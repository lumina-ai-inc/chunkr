/*
 * Chunkr API
 *
 * API service for document layout analysis and chunking to convert document into RAG/LLM-ready data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ishaan@lumina.sh
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`cancel_task_route`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CancelTaskRouteError {
    Status500(String),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_task_route`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTaskRouteError {
    Status500(String),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_task_route`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteTaskRouteError {
    Status500(String),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_task_route`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTaskRouteError {
    Status500(String),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_task_route`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateTaskRouteError {
    Status500(String),
    UnknownValue(serde_json::Value),
}


/// Cancel a task that hasn't started processing yet: - For new tasks: Status will be updated to `Cancelled` - For updating tasks: Task will revert to the previous state  Requirements: - Task must have status `Starting`
pub async fn cancel_task_route(configuration: &configuration::Configuration, task_id: Option<&str>) -> Result<(), Error<CancelTaskRouteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_task_id = task_id;

    let uri_str = format!("{}/api/v1/task/{task_id}/cancel", configuration.base_path, task_id=crate::apis::urlencode(p_task_id.unwrap()));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<CancelTaskRouteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Queues a document for processing and returns a TaskResponse containing: - Task ID for status polling - Initial configuration - File metadata - Processing status - Creation timestamp - Presigned URLs for file access  The returned task will typically be in a `Starting` or `Processing` state. Use the `GET /task/{task_id}` endpoint to poll for completion.
pub async fn create_task_route(configuration: &configuration::Configuration, create_form: models::CreateForm) -> Result<models::TaskResponse, Error<CreateTaskRouteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_create_form = create_form;

    let uri_str = format!("{}/api/v1/task/parse", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_create_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TaskResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TaskResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateTaskRouteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Delete a task by its ID.  Requirements: - Task must have status `Succeeded` or `Failed`
pub async fn delete_task_route(configuration: &configuration::Configuration, task_id: Option<&str>) -> Result<(), Error<DeleteTaskRouteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_task_id = task_id;

    let uri_str = format!("{}/api/v1/task/{task_id}", configuration.base_path, task_id=crate::apis::urlencode(p_task_id.unwrap()));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteTaskRouteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieves detailed information about a task by its ID, including: - Processing status - Task configuration - Output data (if processing is complete) - File metadata (name, page count) - Timestamps (created, started, finished) - Presigned URLs for accessing files  This endpoint can be used to: 1. Poll the task status during processing 2. Retrieve the final output once processing is complete 3. Access task metadata and configuration
pub async fn get_task_route(configuration: &configuration::Configuration, task_id: Option<&str>, base64_urls: Option<bool>, include_chunks: Option<bool>) -> Result<models::TaskResponse, Error<GetTaskRouteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_task_id = task_id;
    let p_base64_urls = base64_urls;
    let p_include_chunks = include_chunks;

    let uri_str = format!("{}/api/v1/task/{task_id}", configuration.base_path, task_id=crate::apis::urlencode(p_task_id.unwrap()));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_base64_urls {
        req_builder = req_builder.query(&[("base64_urls", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_chunks {
        req_builder = req_builder.query(&[("include_chunks", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TaskResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TaskResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetTaskRouteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates an existing task's configuration and reprocesses the document. The original configuration will be used for all values that are not provided in the update.  Requirements: - Task must have status `Succeeded` or `Failed` - New configuration must be different from the current one  The returned task will typically be in a `Starting` or `Processing` state. Use the `GET /task/{task_id}` endpoint to poll for completion.
pub async fn update_task_route(configuration: &configuration::Configuration, task_id: &str, update_form: models::UpdateForm) -> Result<models::TaskResponse, Error<UpdateTaskRouteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_task_id = task_id;
    let p_update_form = update_form;

    let uri_str = format!("{}/api/v1/task/{task_id}/parse", configuration.base_path, task_id=crate::apis::urlencode(p_task_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_update_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TaskResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TaskResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateTaskRouteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

