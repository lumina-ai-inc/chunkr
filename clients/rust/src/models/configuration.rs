/*
 * Chunkr API
 *
 * API service for document layout analysis and chunking to convert document into RAG/LLM-ready data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ishaan@lumina.sh
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Configuration {
    #[serde(rename = "chunk_processing")]
    pub chunk_processing: Box<models::ChunkProcessing>,
    #[serde(rename = "error_handling")]
    pub error_handling: models::ErrorHandlingStrategy,
    /// The number of seconds until task is deleted. Expried tasks can **not** be updated, polled or accessed via web interface.
    #[serde(rename = "expires_in", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub expires_in: Option<Option<i32>>,
    /// Whether to use high-resolution images for cropping and post-processing.
    #[serde(rename = "high_resolution")]
    pub high_resolution: bool,
    /// The presigned URL of the input file.
    #[serde(rename = "input_file_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub input_file_url: Option<Option<String>>,
    #[serde(rename = "json_schema", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub json_schema: Option<Option<serde_json::Value>>,
    #[serde(rename = "llm_processing")]
    pub llm_processing: Box<models::LlmProcessing>,
    #[serde(rename = "model", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub model: Option<Option<models::Model>>,
    #[serde(rename = "ocr_strategy")]
    pub ocr_strategy: models::OcrStrategy,
    #[serde(rename = "segment_processing")]
    pub segment_processing: Box<models::SegmentProcessing>,
    #[serde(rename = "segmentation_strategy")]
    pub segmentation_strategy: models::SegmentationStrategy,
    /// The target number of words in each chunk. If 0, each chunk will contain a single segment.
    #[serde(rename = "target_chunk_length", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub target_chunk_length: Option<Option<i32>>,
}

impl Configuration {
    pub fn new(chunk_processing: models::ChunkProcessing, error_handling: models::ErrorHandlingStrategy, high_resolution: bool, llm_processing: models::LlmProcessing, ocr_strategy: models::OcrStrategy, segment_processing: models::SegmentProcessing, segmentation_strategy: models::SegmentationStrategy) -> Configuration {
        Configuration {
            chunk_processing: Box::new(chunk_processing),
            error_handling,
            expires_in: None,
            high_resolution,
            input_file_url: None,
            json_schema: None,
            llm_processing: Box::new(llm_processing),
            model: None,
            ocr_strategy,
            segment_processing: Box::new(segment_processing),
            segmentation_strategy,
            target_chunk_length: None,
        }
    }
}

