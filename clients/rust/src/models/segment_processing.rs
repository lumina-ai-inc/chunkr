/*
 * Chunkr API
 *
 * API service for document layout analysis and chunking to convert document into RAG/LLM-ready data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ishaan@lumina.sh
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SegmentProcessing : Controls the post-processing of each segment type. Allows you to generate HTML and Markdown from chunkr models for each segment type. By default, the HTML and Markdown are generated manually using the segmentation information except for `Table`, `Formula` and `Picture`. You can optionally configure custom LLM prompts and models to generate an additional `llm` field with LLM-processed content for each segment type.  The configuration of which content sources (HTML, Markdown, LLM, Content) of the segment should be included in the chunk's `embed` field and counted towards the chunk length can be configured through the `embed_sources` setting.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SegmentProcessing {
    #[serde(rename = "Caption", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub caption: Option<Option<Box<models::AutoGenerationConfig>>>,
    #[serde(rename = "Footnote", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub footnote: Option<Option<Box<models::AutoGenerationConfig>>>,
    #[serde(rename = "Formula", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub formula: Option<Option<Box<models::LlmGenerationConfig>>>,
    #[serde(rename = "ListItem", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub list_item: Option<Option<Box<models::AutoGenerationConfig>>>,
    #[serde(rename = "Page", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub page: Option<Option<Box<models::LlmGenerationConfig>>>,
    #[serde(rename = "PageFooter", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub page_footer: Option<Option<Box<models::AutoGenerationConfig>>>,
    #[serde(rename = "PageHeader", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub page_header: Option<Option<Box<models::AutoGenerationConfig>>>,
    #[serde(rename = "Picture", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub picture: Option<Option<Box<models::PictureGenerationConfig>>>,
    #[serde(rename = "SectionHeader", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub section_header: Option<Option<Box<models::AutoGenerationConfig>>>,
    #[serde(rename = "Table", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub table: Option<Option<Box<models::LlmGenerationConfig>>>,
    #[serde(rename = "Text", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub text: Option<Option<Box<models::AutoGenerationConfig>>>,
    #[serde(rename = "Title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub title: Option<Option<Box<models::AutoGenerationConfig>>>,
}

impl SegmentProcessing {
    /// Controls the post-processing of each segment type. Allows you to generate HTML and Markdown from chunkr models for each segment type. By default, the HTML and Markdown are generated manually using the segmentation information except for `Table`, `Formula` and `Picture`. You can optionally configure custom LLM prompts and models to generate an additional `llm` field with LLM-processed content for each segment type.  The configuration of which content sources (HTML, Markdown, LLM, Content) of the segment should be included in the chunk's `embed` field and counted towards the chunk length can be configured through the `embed_sources` setting.
    pub fn new() -> SegmentProcessing {
        SegmentProcessing {
            caption: None,
            footnote: None,
            formula: None,
            list_item: None,
            page: None,
            page_footer: None,
            page_header: None,
            picture: None,
            section_header: None,
            table: None,
            text: None,
            title: None,
        }
    }
}

