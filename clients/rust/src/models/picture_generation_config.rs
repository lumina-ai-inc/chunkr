/*
 * Chunkr API
 *
 * API service for document layout analysis and chunking to convert document into RAG/LLM-ready data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ishaan@lumina.sh
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PictureGenerationConfig : Controls the processing and generation for the segment. - `crop_image` controls whether to crop the file's images to the segment's bounding box.   The cropped image will be stored in the segment's `image` field. Use `All` to always crop,   or `Auto` to only crop when needed for post-processing. - `html` is the HTML output for the segment, generated either through huerstics (`Auto`) or using Chunkr fine-tuned models (`LLM`) - `llm` is the LLM-generated output for the segment, this uses off-the-shelf models to generate a custom output for the segment - `markdown` is the Markdown output for the segment, generated either through huerstics (`Auto`) or using Chunkr fine-tuned models (`LLM`) - `embed_sources` defines which content sources will be included in the chunk's embed field and counted towards the chunk length.   The array's order determines the sequence in which content appears in the embed field (e.g., [Markdown, LLM] means Markdown content   is followed by LLM content). This directly affects what content is available for embedding and retrieval.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PictureGenerationConfig {
    #[serde(rename = "crop_image", skip_serializing_if = "Option::is_none")]
    pub crop_image: Option<Box<models::PictureGenerationConfigCropImage>>,
    #[serde(rename = "embed_sources", skip_serializing_if = "Option::is_none")]
    pub embed_sources: Option<Vec<models::EmbedSource>>,
    #[serde(rename = "html", skip_serializing_if = "Option::is_none")]
    pub html: Option<Box<models::LlmGenerationConfigHtml>>,
    /// Prompt for the LLM model
    #[serde(rename = "llm", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub llm: Option<Option<String>>,
    #[serde(rename = "markdown", skip_serializing_if = "Option::is_none")]
    pub markdown: Option<Box<models::LlmGenerationConfigHtml>>,
}

impl PictureGenerationConfig {
    /// Controls the processing and generation for the segment. - `crop_image` controls whether to crop the file's images to the segment's bounding box.   The cropped image will be stored in the segment's `image` field. Use `All` to always crop,   or `Auto` to only crop when needed for post-processing. - `html` is the HTML output for the segment, generated either through huerstics (`Auto`) or using Chunkr fine-tuned models (`LLM`) - `llm` is the LLM-generated output for the segment, this uses off-the-shelf models to generate a custom output for the segment - `markdown` is the Markdown output for the segment, generated either through huerstics (`Auto`) or using Chunkr fine-tuned models (`LLM`) - `embed_sources` defines which content sources will be included in the chunk's embed field and counted towards the chunk length.   The array's order determines the sequence in which content appears in the embed field (e.g., [Markdown, LLM] means Markdown content   is followed by LLM content). This directly affects what content is available for embedding and retrieval.
    pub fn new() -> PictureGenerationConfig {
        PictureGenerationConfig {
            crop_image: None,
            embed_sources: None,
            html: None,
            llm: None,
            markdown: None,
        }
    }
}

