/*
 * Chunkr API
 *
 * API service for document layout analysis and chunking to convert document into RAG/LLM-ready data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ishaan@lumina.sh
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateForm {
    #[serde(rename = "chunk_processing", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub chunk_processing: Option<Option<Box<models::ChunkProcessing>>>,
    #[serde(rename = "error_handling", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub error_handling: Option<Option<models::ErrorHandlingStrategy>>,
    /// The number of seconds until task is deleted. Expired tasks can **not** be updated, polled or accessed via web interface.
    #[serde(rename = "expires_in", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub expires_in: Option<Option<i32>>,
    /// The file to be uploaded. Can be a URL or a base64 encoded file.
    #[serde(rename = "file")]
    pub file: String,
    /// The name of the file to be uploaded. If not set a name will be generated.
    #[serde(rename = "file_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub file_name: Option<Option<String>>,
    /// Whether to use high-resolution images for cropping and post-processing. (Latency penalty: ~7 seconds per page)
    #[serde(rename = "high_resolution", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub high_resolution: Option<Option<bool>>,
    #[serde(rename = "llm_processing", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub llm_processing: Option<Option<Box<models::LlmProcessing>>>,
    #[serde(rename = "ocr_strategy", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ocr_strategy: Option<Option<models::OcrStrategy>>,
    #[serde(rename = "segment_processing", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub segment_processing: Option<Option<Box<models::SegmentProcessing>>>,
    #[serde(rename = "segmentation_strategy", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub segmentation_strategy: Option<Option<models::SegmentationStrategy>>,
}

impl CreateForm {
    pub fn new(file: String) -> CreateForm {
        CreateForm {
            chunk_processing: None,
            error_handling: None,
            expires_in: None,
            file,
            file_name: None,
            high_resolution: None,
            llm_processing: None,
            ocr_strategy: None,
            segment_processing: None,
            segmentation_strategy: None,
        }
    }
}

