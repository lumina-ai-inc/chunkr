/*
 * Chunkr API
 *
 * API service for document layout analysis and chunking to convert document into RAG/LLM-ready data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ishaan@lumina.sh
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FallbackStrategy : Specifies the fallback strategy for LLM processing  This can be: 1. None - No fallback will be used 2. Default - The system default fallback model will be used 3. Model - A specific model ID will be used as fallback (check the documentation for the models.)
/// Specifies the fallback strategy for LLM processing  This can be: 1. None - No fallback will be used 2. Default - The system default fallback model will be used 3. Model - A specific model ID will be used as fallback (check the documentation for the models.)
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FallbackStrategy {
    FallbackStrategyOneOf(Box<models::FallbackStrategyOneOf>),
    FallbackStrategyOneOf1(Box<models::FallbackStrategyOneOf1>),
    FallbackStrategyOneOf2(Box<models::FallbackStrategyOneOf2>),
}

impl Default for FallbackStrategy {
    fn default() -> Self {
        Self::FallbackStrategyOneOf(Default::default())
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Default")]
    Default,
    #[serde(rename = "Model")]
    Model,
}

impl Default for Type {
    fn default() -> Type {
        Self::None
    }
}

