/*
 * Chunkr API
 *
 * API service for document layout analysis and chunking to convert document into RAG/LLM-ready data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ishaan@lumina.sh
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Segment {
    #[serde(rename = "bbox")]
    pub bbox: Box<models::BoundingBox>,
    /// Confidence score of the layout analysis model
    #[serde(rename = "confidence", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub confidence: Option<Option<f32>>,
    /// Text content of the segment. Calculated by the OCR results.
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// HTML representation of the segment.
    #[serde(rename = "html", skip_serializing_if = "Option::is_none")]
    pub html: Option<String>,
    /// Presigned URL to the image of the segment.
    #[serde(rename = "image", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub image: Option<Option<String>>,
    /// LLM representation of the segment.
    #[serde(rename = "llm", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub llm: Option<Option<String>>,
    /// Markdown representation of the segment.
    #[serde(rename = "markdown", skip_serializing_if = "Option::is_none")]
    pub markdown: Option<String>,
    /// OCR results for the segment.
    #[serde(rename = "ocr", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ocr: Option<Option<Vec<models::OcrResult>>>,
    /// Height of the page containing the segment.
    #[serde(rename = "page_height")]
    pub page_height: f32,
    /// Page number of the segment.
    #[serde(rename = "page_number")]
    pub page_number: i32,
    /// Width of the page containing the segment.
    #[serde(rename = "page_width")]
    pub page_width: f32,
    /// Unique identifier for the segment.
    #[serde(rename = "segment_id")]
    pub segment_id: String,
    #[serde(rename = "segment_type")]
    pub segment_type: models::SegmentType,
}

impl Segment {
    pub fn new(bbox: models::BoundingBox, page_height: f32, page_number: i32, page_width: f32, segment_id: String, segment_type: models::SegmentType) -> Segment {
        Segment {
            bbox: Box::new(bbox),
            confidence: None,
            content: None,
            html: None,
            image: None,
            llm: None,
            markdown: None,
            ocr: None,
            page_height,
            page_number,
            page_width,
            segment_id,
            segment_type,
        }
    }
}

