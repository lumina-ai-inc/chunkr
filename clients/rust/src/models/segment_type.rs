/*
 * Chunkr API
 *
 * API service for document layout analysis and chunking to convert document into RAG/LLM-ready data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ishaan@lumina.sh
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SegmentType : All the possible types for a segment. Note: Different configurations will produce different types. Please refer to the documentation for more information.
/// All the possible types for a segment. Note: Different configurations will produce different types. Please refer to the documentation for more information.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SegmentType {
    #[serde(rename = "Caption")]
    Caption,
    #[serde(rename = "Footnote")]
    Footnote,
    #[serde(rename = "Formula")]
    Formula,
    #[serde(rename = "ListItem")]
    ListItem,
    #[serde(rename = "Page")]
    Page,
    #[serde(rename = "PageFooter")]
    PageFooter,
    #[serde(rename = "PageHeader")]
    PageHeader,
    #[serde(rename = "Picture")]
    Picture,
    #[serde(rename = "SectionHeader")]
    SectionHeader,
    #[serde(rename = "Table")]
    Table,
    #[serde(rename = "Text")]
    Text,
    #[serde(rename = "Title")]
    Title,

}

impl std::fmt::Display for SegmentType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Caption => write!(f, "Caption"),
            Self::Footnote => write!(f, "Footnote"),
            Self::Formula => write!(f, "Formula"),
            Self::ListItem => write!(f, "ListItem"),
            Self::Page => write!(f, "Page"),
            Self::PageFooter => write!(f, "PageFooter"),
            Self::PageHeader => write!(f, "PageHeader"),
            Self::Picture => write!(f, "Picture"),
            Self::SectionHeader => write!(f, "SectionHeader"),
            Self::Table => write!(f, "Table"),
            Self::Text => write!(f, "Text"),
            Self::Title => write!(f, "Title"),
        }
    }
}

impl Default for SegmentType {
    fn default() -> SegmentType {
        Self::Caption
    }
}

