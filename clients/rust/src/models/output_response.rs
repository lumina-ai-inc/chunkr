/*
 * Chunkr API
 *
 * API service for document layout analysis and chunking to convert document into RAG/LLM-ready data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ishaan@lumina.sh
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OutputResponse : The processed results of a document analysis task
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OutputResponse {
    /// Collection of document chunks, where each chunk contains one or more segments
    #[serde(rename = "chunks")]
    pub chunks: Vec<models::Chunk>,
    #[serde(rename = "extracted_json", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub extracted_json: Option<Option<serde_json::Value>>,
    /// The name of the file.
    #[serde(rename = "file_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub file_name: Option<Option<String>>,
    /// The number of pages in the file.
    #[serde(rename = "page_count", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub page_count: Option<Option<i32>>,
    /// The presigned URL of the PDF file.
    #[serde(rename = "pdf_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pdf_url: Option<Option<String>>,
}

impl OutputResponse {
    /// The processed results of a document analysis task
    pub fn new(chunks: Vec<models::Chunk>) -> OutputResponse {
        OutputResponse {
            chunks,
            extracted_json: None,
            file_name: None,
            page_count: None,
            pdf_url: None,
        }
    }
}

