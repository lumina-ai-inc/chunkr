/*
 * Chunkr API
 *
 * API service for document layout analysis and chunking to convert document into RAG/LLM-ready data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ishaan@lumina.sh
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SegmentationStrategy : Controls the segmentation strategy: - `LayoutAnalysis`: Analyzes pages for layout elements (e.g., `Table`, `Picture`, `Formula`, etc.) using bounding boxes. Provides fine-grained segmentation and better chunking. (Latency penalty: ~TBD seconds per page). - `Page`: Treats each page as a single segment. Faster processing, but without layout element detection and only simple chunking.
/// Controls the segmentation strategy: - `LayoutAnalysis`: Analyzes pages for layout elements (e.g., `Table`, `Picture`, `Formula`, etc.) using bounding boxes. Provides fine-grained segmentation and better chunking. (Latency penalty: ~TBD seconds per page). - `Page`: Treats each page as a single segment. Faster processing, but without layout element detection and only simple chunking.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SegmentationStrategy {
    #[serde(rename = "LayoutAnalysis")]
    LayoutAnalysis,
    #[serde(rename = "Page")]
    Page,

}

impl std::fmt::Display for SegmentationStrategy {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::LayoutAnalysis => write!(f, "LayoutAnalysis"),
            Self::Page => write!(f, "Page"),
        }
    }
}

impl Default for SegmentationStrategy {
    fn default() -> SegmentationStrategy {
        Self::LayoutAnalysis
    }
}

