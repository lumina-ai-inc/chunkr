{
  "file_name": "Intel Compiler Features + Performance Tips - Slides (2015) (IntelCompilerNERSC.201505013).pdf",
  "task_id": "19348a82-411c-42a3-8a18-48f24a88f470",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "0419a9d1-d6dd-4650-b70a-2ae1560e1dc4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 1,
            "page_width": 720,
            "page_height": 540,
            "content": "Intel® Compiler Features + Performance Tips \r\nRakesh Krishnaiyer\r\nPrincipal Engineer\r\nIntel Compiler Lab",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/0419a9d1-d6dd-4650-b70a-2ae1560e1dc4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=98100fc9ce0112edfadaa5cf70a269ca5993dc82c3a78c3211d71bee9ab824aa",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ed2dfe14-30fc-4429-a05d-7680bc2718db",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 2,
            "page_width": 720,
            "page_height": 540,
            "content": "Performance Analysis \r\n• Compiler optimization reports are a useful tool to gain insight into:\r\n• What was done (and not done) by the compiler\r\n• Important to understand the interactions between multiple optimizations\r\n• Inlining\r\n• Openmp parallelization\r\n• Loop optimizations\r\n• Vectorization\r\n• Reports are based on static compiler analysis\r\n• No dynamic information available\r\n• Hence the reports are most useful when correlated with performance analysis \r\ntools that do hotspot analysis and provide other dynamic information\r\n• Once this information is available, one can study the optimization information \r\nfor hotspots (functions/loopnests) in compiler reports\r\n• Compiler can generate multiple versions of loop-nests, important to correlate \r\nwith the actual executed version at runtime\r\n• Lot of compiler loop optimizations geared for best vectorization\r\n• Phase ordering of loop opts relative to vectorization and each other\r\n• Often understanding the loop optimization parameters can help tuning\r\n• In many cases, finer control available via pragmas/options\r\n2",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/ed2dfe14-30fc-4429-a05d-7680bc2718db.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e8202b140cca20c71406efc766f8c26030f3c354dc9dacee0588898b27f24ea8",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ef51514e-7917-4c13-8fbf-41269e0b056c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 3,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nCommon Optimization Switches\r\n3\r\nWindows* Linux*\r\nMac OS* X\r\nDisable optimization /Od -O0\r\nOptimize for speed (no code size increase) /O1 -O1\r\nOptimize for speed (default) – includes \r\nsignificant level of loop optimizations\r\n/O2 -O2\r\nMore aggressive loop optimizations /O3 -O3\r\nCreate symbols for debugging /Zi -g\r\nMulti-file inter-procedural optimization /Qipo -ipo\r\nProfile guided optimization (multi-step build) /Qprof-gen \r\n/Qprof-use\r\n-prof-gen\r\n-prof-use\r\nOptimize for speed across the entire program\r\n**warning: -fast def’n changes over time\r\n“-fp-model fast=2” implies –complex-limited\u0002range and –fimf-domain-exclusion=15\r\n/fast\r\n(same as: /O3 /Qipo \r\n/Qprec-div- /QxHost\r\n–fp-model fast=2)\r\n-fast \r\n(same as: -ipo –O3 -\r\nno-prec-div -static –\r\nxHost –fp-model \r\nfast=2)\r\nOpenMP 4.0 support /Qopenmp -openmp\r\nAutomatic parallelization /Qparallel -parallel",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/ef51514e-7917-4c13-8fbf-41269e0b056c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ff6e22a1a6a0aacd9f2b6e654f4e737e63054801e0af811dc78a72ccc738061e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "7489cfac-6d77-49b8-9764-c7be13f76c2e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 4,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nRecent Target-specific Compiler Options \r\n• -xMIC-AVX512: Optimizes code for KNL\r\n• -xCORE-AVX512: Optimizes code for Xeon SKX (Skylake Server)\r\n• -axMIC-AVX512 or –axCORE-AVX512\r\n– Two versions: baseline and another optimized for KNL or Xeon SKX\r\n– ‘baseline’: governed by implied –x flag, default sse2\r\n• -axMIC-AVX512,CORE-AVX512\r\n– Three versions: baseline, KNL optimized, Xeon SKX optimized\r\n• -xCOMMON-AVX512\r\n– Generates instructions that run on KNL and Xeon SKX\r\n– Libraries may use KNL/Xeon SKX specific instructions but will be cpu\r\ndispatched\r\n– Possible performance loss but has advantage of one binary that runs \r\non KNL and Xeon SKX\r\n• -xCORE-AVX2: Optimizes code for HSW\r\n• –mmic: Generate code for KNC",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/7489cfac-6d77-49b8-9764-c7be13f76c2e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d17de644e23e561f832e02d35233cc6a6b40e9a44d21d93d1cefe34af85ff842",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "7aa1d716-d18d-4137-8c64-64e1a89d6c02",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 5,
            "page_width": 720,
            "page_height": 540,
            "content": "Opt-report: Main Compiler Flags of Interest\r\n• -opt-report[=N]\r\n– Default level is N=2\r\n• -opt-report-phase=<vec,loop,openmp,ipo,…>\r\n– Default is all, recommend to use this to get full picture\r\n• -opt-report-file= stdout | stderr | filename\r\n• -vec-report[N] -par-report[N] -openmp-report[N]\r\n– Shorthand for the subset of –opt-report\r\n– Use only when default report is too verbose\r\n5",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/7aa1d716-d18d-4137-8c64-64e1a89d6c02.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2db5b80ddf8e082a8af2385dbc191776649a3c939938dd0ce84e8de428d6b825",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 479
      },
      {
        "segments": [
          {
            "segment_id": "d2241f41-f7e4-4ac1-b605-5b496afd0552",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 6,
            "page_width": 720,
            "page_height": 540,
            "content": "Optimization Report Phases\r\n• The compiler reports optimizations from 9 phases:\r\n6\r\n– LOOP: Loop Nest Optimizations\r\n– PAR: Auto-Parallelization\r\n– VEC: Vectorization\r\n– OPENMP: OpenMP\r\n– OFFLOAD: Offload\r\n– IPO: Interprocedural Optimizations\r\n– PGO: Profile Guided Optimizations\r\n– CG: Code Generation Optimizations\r\n– TCOLLECT: Trace Analyzer Collection\r\nLOOP/PAR/VEC share a unified loop structure, a hierarchical output, to display optimizations in \r\nan integrated format.\r\n• Selecting phases for compiler optimization reporting is highly \r\ncustomizable to satisfy customers’ specific requirements.\r\n– Single Phase Reporting:\r\n• Compiler Option: -[Q]opt-report-phase=VEC\r\n– Multiple Phase Reporting (use a comma separated list):\r\n• Compiler Option: -[Q]opt-report-phase=VEC, OPENMP, IPO, LOOP\r\n– Default is “ALL” phases and default reporting verbosity level is 2\r\n• Want to encourage customers to use integrated HPO report instead of just -vec-report[n]",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/d2241f41-f7e4-4ac1-b605-5b496afd0552.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7eddd48e5126a77a6c70df21e1a54bc7dd5261a639b5290026564c1cf7a1092a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ee97e996-664e-4187-a9f3-80ed87015587",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 7,
            "page_width": 720,
            "page_height": 540,
            "content": "Optimization Report Levels\r\n• The compiler’s optimization report have 5 verbosity levels.\r\n– Specifying report verbosity level:\r\n• Compiler Option: –[Q]opt-report=N where N = level of desired verbosity \r\n• For each optimization phase, higher verbosity level indicates higher level of \r\ndetail reported.\r\n• Each verbosity level is inclusive of lower levels.\r\n– Example, VEC Phase Levels: \r\n• Level 1: Reports when vectorization has occurred. \r\n• Level 2: Adds diagnostics why vectorization did not occur.\r\n• Level 3: Adds vectorization loop summary diagnostics. \r\n• Level 4: Adds additional available vectorization support information.\r\n• Level 5: Adds detailed data dependency information diagnostics.\r\n– Each phase can support up to 5 levels\r\n7",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/ee97e996-664e-4187-a9f3-80ed87015587.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d52291913d623bca4338198dfe9690ef9265889931ec8660a8f443a5c95205f2",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "57e4f340-8920-43b2-9ce5-9be6ca44b684",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 8,
            "page_width": 720,
            "page_height": 540,
            "content": "Vec/Par/Loop\r\n• Loop Optimization report shows loop nest in hierarchical manner\r\n– Every loop version created gets its own set of opt-messages (+ a \r\nheader in some cases)\r\n– Each message has a unique id for easy “help” access\r\n• Vectorization/Parallelization reports have unified look & feel with Loop \r\nOptimization reports\r\n• Caller/Callee info available as part of loop report\r\n• 15.0 messages are more actionable – whenever possible \r\n• Reports a message whenever compiler turns off optimizations when it \r\nhits internal limits\r\n– Optimization for this routine was skipped to constrain compile time. Consider \r\noverriding limits (-qoverride-limits)\r\n– compile time constraints prevent loop vectorization, consider –O3\r\n8",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/57e4f340-8920-43b2-9ce5-9be6ca44b684.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=067e55d4f9e0ffa507e036fe323984f4bbae82aea576178a61bebb0c891bb7d6",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b5a15c8f-70f0-4c3c-879b-2d972e8e3485",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 9,
            "page_width": 720,
            "page_height": 540,
            "content": "Output\r\n• Opt-report output goes to *.optrpt file by default, \r\nno longer stderr\r\n– Output files are always created from scratch (no \r\nappending behavior)\r\n• With “-g” (Linux) / ”-Zi” (Windows), ASM code \r\nand OBJ code will have extra loop-info\r\n– In non-debug mode, use option to embed loop-info -\r\nopt-report-embed=T\r\n– Text-mode output is more complete than loop-info \r\nembedded in object file\r\n– More on this in Vec/Par/Loop section\r\n5/13/2015 9",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/b5a15c8f-70f0-4c3c-879b-2d972e8e3485.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ed155f2fd6fff5e409faed420a3f76b414974d68a8a4e5a4abcc2c67e40b90ac",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 419
      },
      {
        "segments": [
          {
            "segment_id": "adffd8ad-4bb5-4c47-b606-8a0e2d1bb388",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 10,
            "page_width": 720,
            "page_height": 540,
            "content": "Annotated Assembly Listings\r\n.L11: # optimization report\r\n# LOOP WAS INTERCHANGED\r\n# loop was not vectorized: not inner loop\r\nxorl %edi, %edi #38.3\r\nmovsd b.279.0.2(%rax,%rsi,8), %xmm0 #41.32\r\nunpcklpd %xmm0, %xmm0 #41.32\r\n# LOE rax rcx rbx rsi rdi r12 r13 r14 r15 edx xmm0\r\n..B1.11: # Preds ..B1.11 ..B1.10\r\n..L12: # optimization report\r\n# LOOP WAS INTERCHANGED\r\n# LOOP WAS VECTORIZED\r\n# VECTORIZATION HAS UNALIGNED MEMORY REFERENCES\r\n# VECTORIZATION SPEEDUP COEFFECIENT 2.250000\r\nmovaps a.279.0.2(%rcx,%rdi,8), %xmm1 #41.22\r\nmovaps 16+a.279.0.2(%rcx,%rdi,8), %xmm2 #41.22\r\nmovaps 32+a.279.0.2(%rcx,%rdi,8), %xmm3 #41.22\r\nmovaps 48+a.279.0.2(%rcx,%rdi,8), %xmm4 #41.22\r\nmulpd %xmm0, %xmm1 #41.32\r\nmulpd %xmm0, %xmm2 #41.32\r\n<…>\r\n5/13/2015 10\r\nL4:: ; optimization report\r\n; PEELED LOOP FOR VECTORIZATION\r\n$LN36:\r\n$LN37:\r\nvaddss xmm1, xmm0, DWORD PTR [r8+r10*4] ;4.5\r\nsnip snip snip\r\nL5:: ; optimization report\r\n; LOOP WAS VECTORIZED\r\n; VECTORIZATION HAS UNALIGNED MEMORY REFERENCES\r\n; VECTORIZATION SPEEDUP COEFFECIENT 8.398438\r\n$LN46:\r\nvaddps ymm1, ymm0, YMMWORD PTR [r8+r9*4] ;4.5\r\nsnip snip snip\r\nL6:: ; optimization report\r\n; LOOP WAS VECTORIZED\r\n; REMAINDER LOOP FOR VECTORIATION\r\n; VECTORIZATION HAS UNALIGNED MEMORY REFERENCES\r\n; VECTORIZATION SPEEDUP COEFFECIENT 2.449219\r\n$LN78:\r\nadd r10, 4 ;3.3\r\nsnip snip snip\r\nL7:: ; optimization report\r\n; REMAINDER LOOP FOR VECTORIATION\r\n$LN93:\r\ninc rax ;3.3\r\n• Asm listing produced \r\nwith “–S –g”",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/adffd8ad-4bb5-4c47-b606-8a0e2d1bb388.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=63d35204d271fcd850533808e8f53114683daa379074754885849e0b74cf2795",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0a7a50ce-5d70-4a8a-927f-e3a5f4bb5b8c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 11,
            "page_width": 720,
            "page_height": 540,
            "content": "Vec Analysis - Utilizing Full vectors\r\n• Typical vectorized loop consists of:\r\n• Peel loop - generated as an optimization for aligning some \r\naccesses\r\n• Vector kernel loop - Highest performing, best if all vector \r\nexecution happen here\r\n• Remainder loop - required for correctness unless compiler \r\ncan prove trip-count is multiple of vec-length\r\n• Peel loop and remainder loops are (most likely) vectorized\r\nby compiler – less efficiency\r\n• Any unrolling of kernel vector loop also affects max \r\niterations in remainder\r\n• Most loads/stores become masked \r\n• Larger vector register means more iterations in \r\npeel/remainder – in degenerate cases, all execution will \r\nhappen in peel/remainder loops significantly reducing \r\nbenefits from vectorizing loop\r\n11",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/0a7a50ce-5d70-4a8a-927f-e3a5f4bb5b8c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7a010078afa0aabb1acba69560f496b0b5541d1d500b78f10ce327b01264f6b8",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "35ea2cbc-bc80-454b-98bf-6c65e5490cc2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 12,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n12\r\nUtilizing Full Vectors – Simple Example1\r\nScellrb5% cat -n t10.c\r\n1 #include <stdio.h>\r\n2\r\n3 void foo1(float * restrict a, float *b, float *c, int n)\r\n4 {\r\n5 int i;\r\n6 for (i=0; i<n; i++) {\r\n7 a[i] += b[i] * c[i];\r\n8 }\r\n9 }\r\n10\r\nscellrb5%:icc -O2 -opt-report4 -opt-report-file=stderr t10.c -restrict -c -\r\nmmic",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/35ea2cbc-bc80-454b-98bf-6c65e5490cc2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ed5ba394492147314555f4e4e08ee1aa26b23aba374dfa732defbca9018097f4",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c89f103d-a108-4af9-9715-b0de50ca3d6c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 13,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n13\r\nExample1 Pseudo Code\r\nPeel loop until A is aligned \r\nif ( B is aligned ) \r\nfor () { // Kernel vectorized loop1, unrolled by 2\r\n[al64] A = [al64] A + [al64] B * C\r\n[al64] A = [al64] A + [al64] B * C \r\nelse\r\nfor () { // Alternate alignment kernel loop2, unrolled by 2\r\n[al64] A = [al64] A + B * C\r\n[al64] A = [al64] A + [al64] B * C\r\n}\r\nendif\r\nRemainder loop to execute remaining iterations ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/c89f103d-a108-4af9-9715-b0de50ca3d6c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e88ce8d0e90acca476bca2ec258f9f7df2ef9844ecd6c75405470940e73b0306",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 495
      },
      {
        "segments": [
          {
            "segment_id": "f0289b1a-0119-4d1b-94a3-38ef6cd6b01f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 14,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n14\r\nPeel Loop Report – Example1\r\nReport from: Loop nest, Vector & Auto-parallelization optimizations [loop, \r\nvec, par]\r\nLOOP BEGIN at t10.c(6,3)\r\n<Peeled>\r\nremark #15389: vectorization support: reference a has unaligned access \r\n[ t10.c(7,5) ]\r\nremark #15389: vectorization support: reference a has unaligned access \r\n[ t10.c(7,5) ]\r\nremark #15389: vectorization support: reference b has unaligned access \r\n[ t10.c(7,5) ]\r\nremark #15389: vectorization support: reference c has unaligned access \r\n[ t10.c(7,5) ]\r\nremark #15381: vectorization support: unaligned access used inside \r\nloop body\r\nremark #15301: PEEL LOOP WAS VECTORIZED\r\nLOOP END",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/f0289b1a-0119-4d1b-94a3-38ef6cd6b01f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=682dadfa2fed66cc2fe1f8716b9e995c905155f54b760af51ec057e163f6b5ba",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "5f97b95e-9bc0-4a99-a2f9-3b4b2cb7a564",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 15,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n15\r\nKernel Loop Report – Example1 \r\nLOOP BEGIN at t10.c(6,3)\r\nremark #15388: vectorization support: reference a has aligned access \r\n[ t10.c(7,5) ]\r\nremark #15388: vectorization support: reference a has aligned access \r\n[ t10.c(7,5) ]\r\nremark #15389: vectorization support: reference b has aligned access \r\n[ t10.c(7,5) ]\r\nremark #15388: vectorization support: reference c has unaligned access \r\n[ t10.c(7,5) ]\r\nremark #15381: vectorization support: unaligned access used inside loop body\r\nremark #15399: vectorization support: unroll factor set to 2\r\nremark #15300: LOOP WAS VECTORIZED\r\nremark #15450: unmasked unaligned unit stride loads: 1\r\nremark #15475: --- begin vector loop cost summary ---\r\nremark #15476: scalar loop cost: 15\r\nremark #15477: vector loop cost: 1.120\r\nremark #15478: estimated potential speedup: 20.270\r\nremark #15488: --- end vector loop cost summary ---\r\nLOOP END\r\nLOOP BEGIN at t10.c(6,3)\r\n<Alternate Alignment Vectorized Loop>\r\nLOOP END",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/5f97b95e-9bc0-4a99-a2f9-3b4b2cb7a564.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=78bfb454e196a2d660844467ebd6c4803b45aa16a78d4eea8f5df669d0e8b374",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9faafadc-f63e-47e8-8617-18852677f5a9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 16,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n16\r\nRemainder Loop Report – Example1\r\nLOOP BEGIN at t10.c(6,3)\r\n<Remainder>\r\nremark #15388: vectorization support: reference a has aligned access \r\n[ t10.c(7,5) ]\r\nremark #15388: vectorization support: reference a has aligned access \r\n[ t10.c(7,5) ]\r\nremark #15389: vectorization support: reference b has unaligned access \r\n[ t10.c(7,5) ]\r\nremark #15389: vectorization support: reference c has unaligned access \r\n[ t10.c(7,5) ]\r\nremark #15388: vectorization support: reference a has aligned access \r\n[ t10.c(7,5) ]\r\nremark #15388: vectorization support: reference a has aligned access \r\n[ t10.c(7,5) ]\r\nremark #15389: vectorization support: reference b has unaligned access \r\n[ t10.c(7,5) ]\r\nremark #15389: vectorization support: reference c has unaligned access \r\n[ t10.c(7,5) ]\r\nremark #15381: vectorization support: unaligned access used inside \r\nloop body\r\nremark #15301: REMAINDER LOOP WAS VECTORIZED\r\nLOOP END",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/9faafadc-f63e-47e8-8617-18852677f5a9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8b321a1e588a306c66887c53a67554d0cd194ce747c46a01553efc1499a769f3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 405
      },
      {
        "segments": [
          {
            "segment_id": "ab02700e-7e1d-4462-aaf7-537ed0584b8f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 17,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n17\r\nUtilizing Full Vectors – What you can do\r\n• If hotspot analysis on performance tool shows lot of time spent in peel or \r\nremainder loops, this may be worth looking into\r\n• Happens often when trip-count is unknown to compiler (say, n1) – but actual \r\nvalue at runtime is small\r\n• Choose algorithm blocking parameters to have high trip-counts for kernel \r\nloops (relative to any peel/remainder loops)\r\n• Align arrays – no need for peel loop\r\n• Use loop_count pragma to convey information to compiler\r\n• Especially useful for low trip-count loops for compiler to make better decisions\r\n• Several controls available:\r\n• #pragma nounroll (to disable unroll of vector kernel loops)\r\n• #pragma vector noremainder (to disable vectorization of peel/remainder loops)\r\n• #pragma vector unaligned (don’t generate peel loop)\r\n• #pragma novector (disable vectorization altogether)\r\n• Use –opt-assume-safe-padding if possible (specific to KNC)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/ab02700e-7e1d-4462-aaf7-537ed0584b8f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=66c9a050cacc83d22246702c2441d24184a4757b60104a80d8ac2a6d53a44786",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "7db4191a-10aa-481d-b65d-e9d0105877f3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 18,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2013, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nTips for Low Trip-count Loops\r\n• Ideal for compiler if trip-count and array extents are statically known\r\n• Such as a Fortran “parameter” (#define in C)\r\n• Vectorization cost-model decisions are easier for compiler – whether or not to \r\npeel, unroll-factor, …\r\n• Compiler analysis of alignment for vectorization is much more effective\r\n• Prefetch distances chosen by the compiler are more effective\r\n• Compiler is able to do outer-loop optimizations much more efficiently\r\n– PRE (partial redundancy elimination) for address calculations\r\n– Unroll of outer-loop\r\n– PDSE (partial dead store elimination) in outer-loop, etc.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/7db4191a-10aa-481d-b65d-e9d0105877f3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0bc842aa15cd4942985c0c60ef01603f52fd8ae4695930afa2dfdd7684acf0db",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "30baf7d8-7ea1-4166-8e8f-29ad29da657b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 19,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2013, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nTips for Low Tripcount Loops - 2\r\n• If trip-count and array extents are variables, it may be possible in \r\nsome cases to make a specialized version via src-changes\r\n• In cases where they will remain as variables, you can help the \r\ncompiler:\r\n• Use loop_count pragma/directive to convey min/max/avg values\r\n• Can also use options such as –unroll0\r\n• Use alignment clauses per loop or per array\r\n• Use prefetch distance option to fine-tune\r\n• In some cases, applying !dir$ simd on the outer-loop may be better\r\n• Study the opt-report to make sure compiler is making reasonable \r\noptimization decisions",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/30baf7d8-7ea1-4166-8e8f-29ad29da657b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=24d61ece3021192405c64d6c162c06f3b0b9183ce4a57e8d65c1ce036df3a63f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 395
      },
      {
        "segments": [
          {
            "segment_id": "9d4293f8-4f68-4938-bad2-567b7a877ba2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 20,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n20\r\nBlocking Example - NBody\r\nfor (body1=0; body1<NBODIES; body1++){\r\nfor (body2=0; body2<NBODIES; body2++) { \r\nOUT[body1] += compute(body1, body2); \r\n} \r\n}\r\n• data (body2) is streamed from memory. Assuming \r\nNBODIES is large, we would have no reuse in cache \r\n=> this application is memory bandwidth bound (app \r\nwill run at the speed of memory to cpu speeds, less \r\nthan optimal)\r\nModified Source Pseudo-code (with 1-D blocking):\r\nfor (body2=0; body2 <NBODIES; body2 +=BLOCK) { \r\nfor (body1=0; body1 < NBODIES; body1 ++) { \r\nfor (body22=0; body22 < BLOCK; body22 ++) { \r\nOUT[body1] += compute(body1, \r\nbody2 + body22); \r\n}\r\n}\r\n}\r\n• data (body22) is kept and reused in cache => better \r\nperformance\r\n// Full source code\r\n#define CHUNK_SIZE 8192\r\n#pragma omp parallel private(body_start_index)\r\nfor(body_start_index=0; body_start_index<global_number_of_bodies; \r\nbody_start_index += CHUNK_SIZE) {\r\nint i, body_end_index = body_start_index + CHUNK_SIZE;\r\n#pragma omp for private(i) schedule(guided)\r\n#pragma unroll_and_jam (4) // unroll-jam done by compiler\r\nfor(i=0; i<global_number_of_bodies; i++) {\r\nint j;\r\nTYPE acc_x_0 = 0, acc_y_0 = 0, acc_z_0 = 0;\r\nfor(j=body_start_index; j<body_end_index; j+=1){\r\nTYPE delta_x_0 = Input_Position_X[(j+0)] - Input_Position_X[i];\r\nTYPE delta_y_0 = Input_Position_Y[(j+0)] - Input_Position_Y[i];\r\nTYPE delta_z_0 = Input_Position_Z[(j+0)] - Input_Position_Z[i];\r\nTYPE gamma_0 = delta_x_0*delta_x_0 +\r\ndelta_y_0*delta_y_0 + delta_z_0*delta_z_0 + epsilon_sqr;\r\nTYPE s_0 = Mass[j+0]/(gamma_0 * SQRT(gamma_0));\r\nacc_x_0 += s_0*delta_x_0;\r\nacc_y_0 += s_0*delta_y_0;\r\nacc_z_0 += s_0*delta_z_0;\r\n}\r\nOutput_Acceleration[3*(i+0)+0] += acc_x_0;\r\nOutput_Acceleration[3*(i+0)+1] += acc_y_0;\r\nOutput_Acceleration[3*(i+0)+2] += acc_z_0;\r\n}\r\n}",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/9d4293f8-4f68-4938-bad2-567b7a877ba2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f0ab261d98d5e64814da4c1a3029f11e4ac776ab8a54c10a4600c05019bd83e9",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c53ffd3f-dfc4-4836-8336-ed4cb8cf8ae6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 21,
            "page_width": 720,
            "page_height": 540,
            "content": "Data Dependence - Multiversioning\r\n• scellrb5% cat -n t8.c\r\n• 1 #include <stdio.h>\r\n• 2\r\n• 3 void foo1(float *a, float *b, float *c, int n)\r\n• 4 {\r\n• 5 int i;\r\n• 6 #pragma vector aligned nontemporal\r\n• 7 for (i=0; i<n; i++) {\r\n• 8 a[i] *= b[i] + c[i];\r\n• 9 }\r\n• 10 }\r\n• scellrb5%: icc -O2 -opt-report4 -opt-report-file=stderr t8.c -restrict -c -xmic-avx512\r\n21",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/c53ffd3f-dfc4-4836-8336-ed4cb8cf8ae6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e7126c6dcb994e530c2c49b9c1844830b95f61f8114724834117663760d40644",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "92345dbd-3a9d-4c07-abbc-945973f83804",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 22,
            "page_width": 720,
            "page_height": 540,
            "content": "Loop Report – Multiversioning for vec\r\n• LOOP BEGIN at t8.c(7,3)\r\n• <Multiversioned v1>\r\n• remark #25228: Loop multiversioned for Data Dependence\r\n• remark #15388: vectorization support: reference a has aligned access [ t8.c(8,5) ] …\r\n• remark #15412: vectorization support: streaming store was generated for a [ t8.c(8,5) ]\r\n• remark #15300: LOOP WAS VECTORIZED\r\n• remark #15448: unmasked aligned unit stride loads: 3\r\n• remark #15449: unmasked aligned unit stride stores: 1\r\n• remark #15467: unmasked aligned streaming stores: 1\r\n• remark #15475: --- begin vector loop cost summary ---\r\n• remark #15476: scalar loop cost: 15\r\n• remark #15477: vector loop cost: 0.430\r\n• remark #15478: estimated potential speedup: 32.140\r\n• remark #15488: --- end vector loop cost summary ---\r\n• LOOP END\r\n• LOOP BEGIN at t8.c(7,3)\r\n• <Remainder, Multiversioned v1>\r\n• remark #15388: vectorization support: reference a has aligned access [ t8.c(8,5) ] …\r\n• remark #15301: REMAINDER LOOP WAS VECTORIZED\r\n• LOOP END\r\n• LOOP BEGIN at t8.c(7,3)\r\n• <Multiversioned v2>\r\n• remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning\r\n• remark #25439: unrolled with remainder by 2\r\n• LOOP END\r\n22",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/92345dbd-3a9d-4c07-abbc-945973f83804.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d75a85b4f7b80da00e27007efdd15ff537650b20771c77316cba84347863319c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 499
      },
      {
        "segments": [
          {
            "segment_id": "9e21f82f-b5a7-412a-b721-518b7081f240",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 23,
            "page_width": 720,
            "page_height": 540,
            "content": "Software & Services Group\r\nCopyright© 2013, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nAvoid Manual Unrolling in Source\r\n• Simple legacy DAXPY Fortran \r\ncode: (Y = A*X + Y on DP vectors)\r\nm = MOD(N,4)\r\nif ( m /= 0 ) THEN \r\ndo i = 1 , m \r\nDy(i) = Dy(i) + Da*Dx(i) \r\nend do \r\nif ( N < 4 ) RETURN \r\nend if \r\nmp1 = m + 1 \r\ndo i = mp1 , N , 4 \r\nDy(i) = Dy(i) + Da*Dx(i) \r\nDy(i+1) = Dy(i+1) + Da*Dx(i+1) \r\nDy(i+2) = Dy(i+2) + Da*Dx(i+2) \r\nDy(i+3) = Dy(i+3) + Da*Dx(i+3) \r\nend do\r\n• Rewriting in a simplest \r\npossible way helps:\r\n– Unit-stride accesses\r\n– Alignable manually or using \r\npeeling and multiversioning\r\n– Optimizable for all platforms\r\n– Much more readable\r\ndo i=1,N \r\nDy(i) = Dy(i) + Da*Dx(i) \r\nend do\r\n23\r\n• Try not to use manual unroll: keep code simple\r\n– Common in legacy Fortran codes\r\nLess than 4 \r\niterations loop\r\nNon-unit \r\naccesses \r\neverywhere ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/9e21f82f-b5a7-412a-b721-518b7081f240.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8f6def7bdf2e6821635d59ee54aa14fda698e7f50d32c9cec80a52488bc72882",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "46e79183-e3cf-4fdf-bf79-1e798fa35153",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 24,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n24\r\nLoop Interchange-Locality&Vectorization\r\nscellrb5% cat –n d2.F90\r\n#define np 16\r\n149 subroutine orig(div)\r\n150 real*8, dimension (np,np), intent(inout) :: div\r\n151 integer :: i, j, l, k, n, m\r\n152 do j=1,np\r\n153 do i=1,np\r\n154 vtemp(i,j,1)=(Dinv(1,1,i,j)*v(i,j,1) + Dinv(1,2,i,j)*v(i,j,2))\r\n155 vtemp(i,j,2)=(Dinv(2,1,i,j)*v(i,j,1) + Dinv(2,2,i,j)*v(i,j,2))\r\n156 enddo\r\n157 enddo\r\n159 do n=1,np\r\n160 do m=1,np\r\n162 div(m,n)=0\r\n163 do j=1,np\r\n164 div(m,n)=div(m,n)-(spheremp(j,n)*vtemp(j,n,1)*Dvv(m,j) &\r\n165 + spheremp(m,j)*vtemp(m,j,2)*Dvv(n,j)) &\r\n166 * rrearth\r\n167 enddo\r\n168 end do\r\n169 end do\r\n170 end subroutine orig\r\nscellrb5%: ifort -O3 -xAVX –c -i_keep -qopt-report4 d2.F90",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/46e79183-e3cf-4fdf-bf79-1e798fa35153.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d5075b14ddb234ba85f100077bd586ca3b1abfe8f319e49052fdf8f9825bb042",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f17b5bf4-b5bd-45b5-98c5-93716419f47b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 25,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n25\r\nLoop Report – Distribution+Interchange\r\nLOOP BEGIN at d2.F90(165,30)\r\n<Distributed chunk1>\r\nremark #25426: Loop Distributed (2 way)\r\nremark #15541: outer loop was not auto-vectorized: consider using SIMD \r\ndirective [ d2.F90(162,11) ]\r\nLOOP BEGIN at d2.F90(160,8)\r\n<Distributed chunk1>\r\nremark #25426: Loop Distributed (2 way)\r\nremark #25408: memset generated\r\nremark #15398: loop was not vectorized: loop was transformed to memset or \r\nmemcpy\r\nLOOP END\r\nLOOP END",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/f17b5bf4-b5bd-45b5-98c5-93716419f47b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=68cc080fd5047af7001a515fef1cb53f85ceff6f49f79ff0eaf483101e764cdd",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 359
      },
      {
        "segments": [
          {
            "segment_id": "d8892c7e-ef5d-425a-8f4e-b43db3a6e169",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 26,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n26\r\nLoop Report–Distribution+Interchange(2)\r\nLOOP BEGIN at d2.F90(165,30)\r\n<Distributed chunk2>\r\nremark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 1 3 2 )\r\nremark #15542: loop was not vectorized: inner loop was already vectorized\r\nLOOP BEGIN at d2.F90(163,11)\r\n<Distributed chunk2>\r\nremark #15542: loop was not vectorized: inner loop was already vectorized\r\nLOOP BEGIN at d2.F90(160,8)\r\nremark #15389: vectorization support: reference div has unaligned access [ d2.F90(164,14) ]\r\nremark #15389: vectorization support: reference div has unaligned access [ d2.F90(164,14) ]\r\nremark #15389: vectorization support: reference divspherewk_mp_dvv_ has unaligned access \r\n[ d2.F90(164,14) ]\r\nremark #15389: vectorization support: reference divspherewk_mp_spheremp_ has unaligned access \r\n[ d2.F90(164,14) ]\r\nremark #15389: vectorization support: reference divspherewk_mp_vtemp_ has unaligned access \r\n[ d2.F90(164,14) ]\r\nremark #15381: vectorization support: unaligned access used inside loop body\r\nremark #15301: PERMUTED LOOP WAS VECTORIZED\r\nremark #15450: unmasked unaligned unit stride loads: 4\r\nremark #15451: unmasked unaligned unit stride stores: 1\r\nremark #15475: --- begin vector loop cost summary ---\r\nremark #15476: scalar loop cost: 22\r\nremark #15477: vector loop cost: 11.750\r\nremark #15478: estimated potential speedup: 1.660\r\nremark #15488: --- end vector loop cost summary ---\r\nremark #25015: Estimate of max trip count of loop=4\r\nLOOP END\r\nLOOP END\r\nLOOP END",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/d8892c7e-ef5d-425a-8f4e-b43db3a6e169.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=96664f4e680dd742836feca893d72cf6026f917246105d73b59cf95fb9481757",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "797c3d28-077a-4bf9-bb72-fb4c5c91c880",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 27,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n27\r\nMake Loop Induction Variables Local \r\nscellrb5% cat –n d1.F90\r\nModule divSphereWk\r\nreal*8, Dimension(:,:,:), Allocatable :: v …\r\ninteger :: i, j, l, k, n, m // Global loop induction variables – bad idea\r\npublic\r\nContains\r\n149 subroutine orig(div)\r\n150 real*8, dimension (np,np), intent(inout) :: div\r\n159 do n=1,np\r\n160 do m=1,np\r\n162 div(m,n)=0\r\n163 do j=1,np\r\n164 div(m,n)=div(m,n)-(spheremp(j,n)*vtemp(j,n,1)*Dvv(m,j) &\r\n165 + spheremp(m,j)*vtemp(m,j,2)*Dvv(n,j)) &\r\n166 * rrearth\r\n167 enddo\r\n168 end do\r\n169 end do\r\n170 end subroutine orig\r\nscellrb5%: ifort -O3 -xAVX –c -i_keep -qopt-report4 d1.F90\r\n• Global induction variables create imperfect nesting – affects loop opts\r\nremark #25096: Loop Interchange not done due to: Imperfect Loop Nest \r\n(Either at Source or due to other Compiler Transformations)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/797c3d28-077a-4bf9-bb72-fb4c5c91c880.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1fa8c8078d803f978907601b855813741bc4ca668099c92d9b11e92274f4f56d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 353
      },
      {
        "segments": [
          {
            "segment_id": "86ed3453-f467-4114-9da9-688615d5fa2f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 28,
            "page_width": 720,
            "page_height": 540,
            "content": "28\r\nExample of \r\nmatmul ‘C’\r\nfor j=1,1000 // Original loopnest\r\nfor i = 1,1000\r\na[j][i] = 0.0\r\nfor k = 1,1000\r\na[j][i] = a[j][i] + b[k][i] *c[j][k];\r\nend for\r\nend for\r\nend for\r\n// Transformed Loopnest pseudo-code\r\nfor j = 1, 1000\r\nfor i = 1, 1000\r\na[j][i] = 0.0 // This 2-level loopnest will be \r\n// converted to a call to memcpy\r\nend for\r\nend for\r\n// outer three-level loop-blocking not shown \r\nfor j=1,1000,4 // unroll-jam by 4\r\nfor k = 1,1000,4 // unroll-jam by 4\r\nfor i = 1,1000 // this loop will be vectorized\r\na[j][i] = a[j][i] + b[k][i] * c[j][k]; \r\na[j][i] = a[j][i] + b[k+1][i] * c[j][k+1];\r\na[j][i] = a[j][i] + b[k+2][i] * c[j][k+2]; \r\na[j][i] = a[j][i] + b[k+3][i] * c[j][k+3];\r\na[j+1][i] = a[j+1][i] + b[k][i] * c[j+1][k];\r\na[j+1][i] = a[j+1][i] + b[k+1][i] * c[j+1][k+1];\r\na[j+1][i] = a[j+1][i] + b[k+2][i] * c[j+1][k+2];\r\na[j+1][i] = a[j+1][i] + b[k+3][i] * c[j+1][k+3];\r\na[j+2][i] = a[t2+1][i] + b[k][i] * c[j+2][k];\r\n...\r\na[j+3][i] = a[j+3][i] + b[k][i] * c[j+3][k];\r\n...\r\nend for\r\nend for\r\nend for",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/86ed3453-f467-4114-9da9-688615d5fa2f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e0939e5a4a12db638df9af01fff3ffc1d0c40b9a276877a127a851b847715d5e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1e4b141a-e2a9-4412-ae4e-abaa6803125e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 29,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n29\r\nLoop Blocking and Unroll-Jam\r\nscellrb5% cat -n m4_single.f\r\n1 program main\r\n2 parameter (n=2048)\r\n3 double precision , dimension(n,n) :: a,b,c,ctest\r\n4 integer i,j,k, nerr\r\n5 double precision t,s, temp,freq\r\n6 real ( selected_real_kind(14) ) :: t2,t1,TIME,FLOPS,t_call\r\n7 freq = 2.67\r\n8 fopspercycle = 4\r\n9 print*, \" Frequency of processor in Ghz \",freq\r\n10 print*, \" fp ops per cycle \",fopspercycle\r\n11\r\n12 do j=1,n\r\n13 do i = 1,n\r\n14 c(i,j) = 0\r\n15 do k = 1,n\r\n16 c(i,j) = c(i,j) + a(i,k) * b(k,j)\r\n17 enddo\r\n18 enddo\r\n19 enddo\r\n21 print *, a,b,c\r\n22 end \r\nscellrb5%: ifort -O3 -qopt-report2 -qopt-report-file=stderr m4_single.f -\r\nxmic-avx512",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/1e4b141a-e2a9-4412-ae4e-abaa6803125e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b775ecefb0825e99e2ee92752dedc4f08ae138fbf794c23b4fa243f158440aca",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fe4bb5f2-33b2-4e64-86e8-e14fb780eee0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 30,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n30\r\nLoop Report–Distn+Blocking+Unroll-jam \r\nLOOP BEGIN at m4_single.f(12,9)\r\n<Distributed chunk1>\r\nremark #25426: Loop Distributed (2 way)\r\nremark #25420: Collapsed with loop at line 13\r\nremark #25408: memset generated\r\nremark #15398: loop was not vectorized: loop was transformed to memset or \r\nmemcpy\r\nLOOP BEGIN at m4_single.f(13,12)\r\n<Distributed chunk1>\r\nremark #25426: Loop Distributed (2 way)\r\nremark #25421: Loop eliminated in Collapsing\r\nLOOP END\r\nLOOP END",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/fe4bb5f2-33b2-4e64-86e8-e14fb780eee0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ad4f1231dc9927cfed24cbe057ff088eab0287f92f01bcc65424e0bdd5866fdd",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 382
      },
      {
        "segments": [
          {
            "segment_id": "f6fa7281-3a85-4195-8a65-5f5c5496097d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 31,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n31\r\nDistn+Blocking+Unroll-jam (2)\r\nLOOP BEGIN at m4_single.f(12,9)\r\n<Distributed chunk2>\r\nremark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 1 3 2 )\r\nremark #15542: loop was not vectorized: inner loop was already vectorized\r\nLOOP BEGIN at m4_single.f(12,9)\r\n<Distributed chunk2>\r\nremark #15542: loop was not vectorized: inner loop was already vectorized\r\nLOOP BEGIN at m4_single.f(12,9)\r\nremark #15542: loop was not vectorized: inner loop was already vectorized\r\nLOOP BEGIN at m4_single.f(12,9)\r\n<Distributed chunk2>\r\nremark #25442: blocked by 128 (pre-vector)\r\nremark #25440: unrolled and jammed by 4 (pre-vector)\r\nremark #15542: loop was not vectorized: inner loop was already vectorized\r\nLOOP BEGIN at m4_single.f(15,15)\r\n<Distributed chunk2>\r\nremark #25442: blocked by 128 (pre-vector)\r\nremark #25440: unrolled and jammed by 4 (pre-vector)\r\nremark #15542: loop was not vectorized: inner loop was already vectorized\r\nLOOP BEGIN at m4_single.f(13,12)\r\nremark #25442: blocked by 128 (pre-vector)\r\nremark #15301: PERMUTED LOOP WAS VECTORIZED\r\nremark #25456: Number of Array Refs Scalar Replaced In Loop: 36\r\nLOOP END\r\nLOOP END",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/f6fa7281-3a85-4195-8a65-5f5c5496097d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f0349cc01d2d000d97501433e0e637cf5db49abd77c875fed41eef847a328a29",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a5c18153-e42c-4d4a-9645-eb39205007e4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 32,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n32\r\nDistn+Blocking+Unroll-jam (3)\r\nLOOP BEGIN at m4_single.f(15,15)\r\n<Remainder, Distributed chunk2>\r\nremark #15542: loop was not vectorized: inner loop was already vectorized\r\nLOOP BEGIN at m4_single.f(13,12)\r\nremark #15301: PERMUTED LOOP WAS VECTORIZED\r\nremark #25456: Number of Array Refs Scalar Replaced In Loop: 3\r\nLOOP END\r\nLOOP END\r\nLOOP END\r\nLOOP BEGIN at m4_single.f(12,9)\r\n<Remainder, Distributed chunk2>\r\nremark #15542: loop was not vectorized: inner loop was already vectorized\r\nLOOP BEGIN at m4_single.f(15,15)\r\n<Distributed chunk2>\r\nremark #15542: loop was not vectorized: inner loop was already vectorized\r\nLOOP BEGIN at m4_single.f(13,12)\r\nremark #15301: PERMUTED LOOP WAS VECTORIZED\r\nLOOP END\r\nLOOP END\r\nLOOP END\r\nLOOP END\r\nLOOP END\r\nLOOP END",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/a5c18153-e42c-4d4a-9645-eb39205007e4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a68b02d71aca78072c78962b4a56b1421a5e6a3de84f68976b6ba3ba22f16093",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "dea6fca7-202a-41ab-a142-fa926392ef4d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 33,
            "page_width": 720,
            "page_height": 540,
            "content": "Pragmas to Fine-tune Loop Opts \r\n• Sampling of loop-level controls available \r\n• Also useful to suppress particular loop transformations – useful for performance \r\nexperiments\r\n• If turning off a particular loop opt hurts, there may be opportunity to fine-tune the \r\nparameter\r\n• #pragma simd reduction(+:sum)\r\n• The loop is transformed as is, no other loop-optimizations will change the simd\u0002loop\r\n• #pragma loop_count min(220) avg (300) max (380)\r\n– Fortran syntax: !dir$ loop count(16)\r\n• #pragma vector aligned nontemporal\r\n– #pragma novector // to suppress vectorization\r\n• #pragma unroll(4)\r\n– #pragma unroll(0) // to suppress loop unrolling\r\n• #pragma unroll_and_jam(2)\r\n• #pragma nofusion\r\n• #pragma distribute_point\r\n– If placed right after the for-loop, distribution will be suppressed for that loop\r\n– Fortran syntax: !dir$ distribute point \r\n• #pragma forceinline (recursive)\r\n33",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/dea6fca7-202a-41ab-a142-fa926392ef4d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0ca7f74e726e59cfe92d06c4fe5d19ad2d33394d398898b6c3d05fbdfec78691",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 431
      },
      {
        "segments": [
          {
            "segment_id": "e0730dae-432a-4511-bdfe-5ec8ab217df6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 34,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n34\r\nFortran – Unit-Stride is Important\r\n• Fortran language semantics allow unit-stride vectorization for lots of array \r\ntypes such as allocatable arrays, adjustable arrays, explicit arrays, assumed\u0002size arrays, etc.\r\n• Still requires vector-loop index to be in the last dimension\r\n• Using F90 array notation can help in cases where it is not\r\n• F90 pointers and assumed-shape arrays get strided access (language \r\nsemantics)\r\n• Compiler does versioning for unit-strides, but this is an optimization and \r\nmay not help all cases\r\n• Using Fortran 2008 CONTIGUOUS attribute may help\r\nOriginal src:\r\nDo index=1,n\r\nA(I,j,k,index) = B(I,j,k,index) + \r\nC(I,j,k,index) * D\r\nenddo\r\n• Non-unit stride vectorization, since \r\nindex is not in the innermost \r\ndimension\r\n• Results in gathers/scatters\r\nModified src:\r\nDo index=1,n\r\nA(I:I+VLEN,j,k,index) = B(I:I+VLEN,j,k,index) + \r\nC(I:I+VLEN,j,k,index) * D\r\nEnddo\r\n• Use of F90 array notation helps here to vectorize\r\nwith unit-stride",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/e0730dae-432a-4511-bdfe-5ec8ab217df6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bd5b0512adc00b65bc135fe42c7e7e79ca40a95aa46afe78af55a6288856d906",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "4d713ea3-e81a-4686-a890-4440ee7404e8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 35,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2013, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n• Use multi-dimensional arrays carefully to get full-VL unit-strided\r\nvectorization for most loops \r\ndo k=2,kbu\r\nmi = mi0 + k\r\nf1 = mhdtddy*max(v(mi),zero)\r\ntmp(1:nc,k) = (t(1:nc,mi) + f1*(t(1:nc,mi)))\r\nhtmp(k) = mhdtddy*onethird*dt/h_new(mi)\r\nenddo\r\n• nc value is 2 or 12 - if source-code can be transformed to:\r\n!dir$ simd // Better to vectorize at outer-level with transformation below\r\ndo k=2,kbu \r\nmi = mi0 + k \r\nf1 = mhdtddy*max(v(mi),zero) \r\ntmp(k,1:nc) = (t(mi,1:nc) + f1*(t(mi,1:nc))) \r\nhtmp(k) = mhdtddy*onethird*dt/h_new(mi) \r\nenddo\r\n– Unit-strided vectorization by vectorizing outer-loop \r\n– If nc is constant and small, compiler will do complete unroll of inner-loop \r\nbefore vectorization (based on simd pragma on outer loop)\r\n– Useful even when nc is a variable unknown to compiler\r\n5/13/2015\r\n35\r\nRefactor for Efficient Unit-stride Vectors",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/4d713ea3-e81a-4686-a890-4440ee7404e8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=aea952ce6705c2d90e655737c57a8860e10535dcde41dd92f10483dd8886ad9d",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a72ed783-f16e-46f2-bcca-78399d46036f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 36,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n36\r\nVectorization with Indirect Accesses\r\nfor (i = kstart; i < kend; ++i) { \r\nistart = iend; \r\niend = mp_dofStart[i+1]; \r\nfloat w = xd[i]; \r\nfor (j = istart; j < iend; ++j) { \r\nindex = SCS[j]; \r\nxd[index] -= lower[j]*w; \r\n}\r\n}\r\n• Key pre-requisite to vectorization is that the xd values are distinct\r\n• Otherwise, there are genuine dependences that will make the loop NOT \r\nvectorizable (without advanced instructions such as vconflict)\r\n• If that is the case, the only alternative is to rewrite the algorithm in a vector\u0002friendly way\r\n• If the xd values are guaranteed (by the user) to be distinct, then one can use the \r\nivdep/simd pragmas (before the inner j-loop) to vectorize\r\n• The compiler will still generate gather/scatter vectorization\r\n• If there is an alternative algorithmic formulation where unit-strides can be used, that may \r\nbe beneficial",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/a72ed783-f16e-46f2-bcca-78399d46036f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=40b14ed09a91f15e395c7ab22481180d4f83d88a0c84c4ed413d058e14873782",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 459
      },
      {
        "segments": [
          {
            "segment_id": "11d5fbdd-0c43-4d55-8781-cda0e1551759",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 37,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n37\r\nVectorization with indirect access - contd\r\nWhether gather/scatter helps (compared to scalar) will depend on:\r\n• Whether there is any cache-locality for the indirect accesses – KNC hardware will be \r\nable to combine them if they happen to be in the same cache-line\r\n• Whether all the data is in cache (as opposed to memory) \r\n• If they are getting accessed from memory, doing prefetching using intrinsics for the \r\ngather/scatter may help depending on the memory access pattern\r\n• Doing vectorization (or not) may not matter since your bottleneck is the memory access.\r\n• Amount of other “vectorizable computation” inside the loop \r\n• Example in previous slide has only a simple fma, so not much to gain from vectorizing the \r\n“other” part.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/11d5fbdd-0c43-4d55-8781-cda0e1551759.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=86050c14e9f16ec754d0ac12b09ec2adf972314089299a1c5db03411d685f4c0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "17518019-2f21-4cf2-8617-0497fb9a967b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 38,
            "page_width": 720,
            "page_height": 540,
            "content": "38\r\nMotivation for Conflict Detection\r\n• Sparse computations are common in HPC, but hard to \r\nvectorize due to race conditions\r\n• Consider the “histogram” problem:\r\nindex = vload &B[i] // Load 16 B[i]\r\nold_val = vgather A, index // Grab A[B[i]]\r\nnew_val = vadd old_val, +1.0 // Compute new values\r\nvscatter A, index, new_val // Update A[B[i]]\r\nfor(i=0; i<16; i++) { A[B[i]]++;}\r\n• Code above is wrong if any values within B[i] are duplicated\r\n− Only one update from the repeated index would be registered! \r\n• A solution to the problem would be to avoid executing the sequence gather-op-scatter \r\nwith vector of indexes that contain conflicts",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/17518019-2f21-4cf2-8617-0497fb9a967b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c53913a80a76de2da1f4f2abeaea6de35f238f24005ce016c5c026cae5e05684",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c442874c-f9f5-4a12-98fe-70e1e5edd8bb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 39,
            "page_width": 720,
            "page_height": 540,
            "content": "39\r\nConflict Detection Instructions Usage\r\n• VPCONFLICT instruction detects elements \r\nwith previous conflicts in a vector of indexes\r\n– Allows to generate a mask with a subset of \r\nelements that are guaranteed to be conflict \r\nfree\r\n– The computation loop can be re-executed with \r\nthe remaining elements until all the indexes \r\nhave been operated upon\r\nindex = vload &B[i] // Load 16 B[i]\r\npending_elem = 0xFFFF; // all still \r\nremaining\r\ndo { \r\ncurr_elem = get_conflict_free_subset(index, pending_elem)\r\nold_val = vgather {curr_elem} A, index // Grab A[B[i]]\r\nnew_val = vadd old_val, +1.0 // Compute new \r\nvalues\r\nvscatter A {curr_elem}, index, new_val // Update A[B[i]]\r\npending_elem = pending_elem ^ curr_elem // remove done idx\r\n} while (pending_elem)\r\nVCONFLICT instr.\r\nVPCONFLICT{D,Q} zmm1{k1}, \r\nzmm2/mem\r\nVPBROADCASTM{W2D,B2Q} zmm1, k2\r\nVPTESTNM{D,Q} k2{k1}, zmm2, \r\nzmm3/mem\r\nVPLZCNT{D,Q} zmm1 {k1}, zmm2/mem",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/c442874c-f9f5-4a12-98fe-70e1e5edd8bb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dd3018cd762ba9a832ffa5cecf4a33a06cf82241f201f24ac18ae3d99e7ee45b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 377
      },
      {
        "segments": [
          {
            "segment_id": "d5a8ca1a-91fa-4539-9c70-e8df0e78a4ce",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 40,
            "page_width": 720,
            "page_height": 540,
            "content": "40\r\n40\r\nReport for vectorization using vconflict\r\nLOOP BEGIN at t1.c(11,5)\r\nremark #15389: vectorization support: reference SCS has unaligned access [ t1.c(12,7) ]\r\nremark #15389: vectorization support: reference lower has unaligned access [ t1.c(13,7) ]\r\nremark #15381: vectorization support: unaligned access used inside loop body\r\nremark #15416: vectorization support: scatter was generated for the variable xd: indirect access [ t1.c(13,7) ]\r\nremark #15415: vectorization support: gather was generated for the variable xd: indirect access [ t1.c(13,7) ]\r\nremark #15305: vectorization support: vector length 16\r\nremark #15300: LOOP WAS VECTORIZED\r\nremark #15442: entire loop may be executed in remainder\r\nremark #15450: unmasked unaligned unit stride loads: 2\r\nremark #15458: masked indexed (or gather) loads: 1\r\nremark #15459: masked indexed (or scatter) stores: 1\r\nremark #15475: --- begin vector loop cost summary ---\r\nremark #15476: scalar loop cost: 20\r\nremark #15477: vector loop cost: 5.060\r\nremark #15478: estimated potential speedup: 3.490\r\nremark #15488: --- end vector loop cost summary ---\r\nremark #15499: histogram: 2\r\nLOOP BEGIN at t1.c(13,7)\r\nremark #25460: No loop optimizations reported\r\nLOOP END\r\nLOOP END",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/d5a8ca1a-91fa-4539-9c70-e8df0e78a4ce.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c31f359a602f0b3e6b6cbd710071db859a801b8290e98cc79b32700bfc2b85fe",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ec127aaa-3a55-40b9-99d8-ed6c5e138444",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 41,
            "page_width": 720,
            "page_height": 540,
            "content": "41\r\nInner-level vs. Outer-level Vectorization\r\nWhen to consider outer-loop vectorization:\r\n• If the average inner-loop trip-counts are low (not enough \r\nto fill up a full vector) and the outer-loop trip-counts are \r\nlarge, then you may get better vectorization-efficiency. \r\n• Are there any expensive operations in the outer-loop (say \r\na divide) that now get vectorized due to outer-loop \r\nvectorization?\r\n• Unit-stride vs. gathers/scatters will change for inner vs. \r\nouter vectorization\r\n• Potential gains have to be weighed taking any loss of \r\nunit-stride efficient vectorization compared to inner-loop \r\nvectorization",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/ec127aaa-3a55-40b9-99d8-ed6c5e138444.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=48cba28b9ae1c19a0f4e5a31b89634c4d5adaa9fb53e84c7aa0fc91444d236d6",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "32a76801-6e9e-4f38-907e-0d0b61fa524a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 42,
            "page_width": 720,
            "page_height": 540,
            "content": "42\r\nHow to do Outer-level Vectorization\r\n• Compiler may be able to vectorize a subset of these cases by \r\nadding the simd pragma (with the right clauses) to the outer-loop\r\n• Directly vectorize at outer loop level by outlining the body of the \r\nouter-loop into a vector-elemental function and using the simd\r\npragma\r\n• Strip-mine outer loop iterations and change each statement in the \r\nloop body to operate on the strip\r\n– Intel® Cilk™ Plus array notation extension helps the \r\nprogrammers to express this approach in a natural fashion",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/32a76801-6e9e-4f38-907e-0d0b61fa524a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cf44b6c2e274d17a586525dfa404d0eb1ef3cd9fa29377bf3c741b44e984c59a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e3f66962-6ff5-466b-b2ae-668a870e6638",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 43,
            "page_width": 720,
            "page_height": 540,
            "content": "43\r\nOuter-level Vectorization by outlining \r\nouter-loop body into elemental function\r\nSparse-matrix-vector loop-pattern:\r\nfor(int row=ib*BLOCKSIZE; row<top; \r\n++row) {\r\nlocal_y[row]=0.0;\r\nfor(int i=Arowoffsets[row]; \r\ni<Arowoffsets[row+1]; ++i) {\r\nlocal_y[row] += \r\nAcoefs[i]*local_x[Acols[i]];\r\n}\r\n}\r\n• Inner-loop vectorization gives:\r\n• unit-stride load for \"Acoefs\" and \r\n\"Acols\", and gathers for \"local_x“\r\n• \"local_y\" storage accesses get moved \r\nout of the loop and a reduction-temp will \r\nbe introduced by the compiler \r\n•Wrong to use simd pragma without \r\nreduction clause\r\n#pragma simd\r\nfor(LocalOrdinalType row=ib*BLOCKSIZE; row<top; ++row) \r\n{\r\nlocal_y[row]=0.0;\r\nInner_loop_elem_function(local_y, row, Acoefs, local_x, \r\nAcols, Arowoffsets);\r\n}\r\n__declspec(vector(uniform(Arowoffsets, Acoefs, local_x, \r\nAcols, local_y), linear(row))))\r\nInner_loop_elem_function(float *local_y, int row, \r\nfloat *Acoefs, float *local_x, int *Acols, int *Arowoffsets)\r\n{\r\nfor(int i=Arowoffsets[row]; i<Arowoffsets[row+1]; ++i) {\r\nlocal_y[row] += Acoefs[i]*local_x[Acols[i]];\r\n}\r\n}\r\n•Outer-loop vectorization gives:\r\n• For the inner-loop-body the compiler will generate unit\u0002stride load/store for \"local_y“\r\n• \"Acoefs\" and \"Acols\" loads become gather\r\n• \"local_x\" continues to be gather.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/e3f66962-6ff5-466b-b2ae-668a870e6638.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=47252b67e8e91a258ade37549065ffc3eb9a9c2f8447e7ab4e930adbfa434660",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 494
      },
      {
        "segments": [
          {
            "segment_id": "25607dd6-80a4-4855-9c5a-686a84c8246f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 44,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n44\r\nPrefetch Directive Support \r\nPrefetch pragma support for C loops\r\n• Apply uniform distance for all arrays in a loop:\r\n– #pragma prefetch *:hint:distance\r\n• Fine-grained control for each array:\r\n– #pragma prefetch var:hint:distance\r\n– #pragma noprefetch var\r\n• You can combine the two forms for the same loop\r\n#pragma prefetch *:1:5\r\n#pragma noprefetch A // prefetch only for B and C arrays\r\nfor(int i=0; i<n; i++) { C[i] = A[B[i]]; }\r\nPrefetch directive support for Fortran loops\r\n• Apply uniform distance for all arrays in a loop:\r\n– CDEC$ prefetch *:hint:distance\r\n• Fine-grained control for each array:\r\n– CDEC$ prefetch var:hint:distance\r\n– CDEC$ noprefetch var",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/25607dd6-80a4-4855-9c5a-686a84c8246f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7c5285be5201a6238927cd26b15c17263c11bba540818dcbca3b1b1f0d5bdeaf",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1ab08314-de71-4ee4-bcf0-b3d546b6d6c5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 45,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n45\r\nPrefetch Distance Tuning Option\r\n-opt-prefetch-distance=n1[,n2]\r\n• n1 specifies the distance for first-level prefetches into L2\r\n• n2 specifies prefetch distance for second-level prefetches from L2 \r\nto L1 (use n2 <= n1)\r\n• -opt-prefetch-distance=64,32\r\n• -opt-prefetch-distance=24\r\n– Use first-level distance=24, second-level distance to be \r\ndetermined by compiler\r\n• -opt-prefetch-distance=0,4 \r\n– Turns off all first-level prefetches, second-level uses distance=4 \r\n(Use this if you want to rely on hardware prefetching to L2, and \r\ncompiler prefetching from L2 to L1)\r\n• -opt-prefetch-distance=16,0\r\n– First-level distance=16, no second-level prefetches issued\r\n• If option not specified, all distances determined by compiler",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/1ab08314-de71-4ee4-bcf0-b3d546b6d6c5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2fcff38a3a30bb058bb347088e086b3786aae2758ec331f0aeaffeccf548ffa3",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "bb751030-de7f-4ec1-aa99-b736631822c5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 46,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n46\r\nPrefetch Performance Tuning\r\nIf algorithm is well blocked to fit in L2 cache, prefetching is less \r\ncritical\r\nFor data access patterns where L2-cache misses are common , \r\nprefetching is critical\r\n• Default compiler heuristics typically use a first-level prefetch\r\ndistance of <=8 vectorized iterations \r\n• For bandwidth-bound benchmarks (such as stream), using a \r\nlarger first-level prefetch (vprefetch1) distance sometimes \r\nshows performance improvements\r\n• If you see a performance drop when you turn off compiler\u0002prefetching, the app is a likely candidate that will benefit from \r\nfine-tuning of compiler prefetches with options/pragmas",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/bb751030-de7f-4ec1-aa99-b736631822c5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=aa86c45161619c233af67998a56e3758c2263f2173b3b0c1d3eb58b2a7b5a2ea",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "02fbd1d5-d588-4d43-af0e-8d09c04beac8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 47,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n47\r\nPrefetch Performance Tuning - Contd\r\nUse different first-level (vprefetch1) and second-level prefetch\r\n(vprefetch0) distances to fine-tune your application performance\r\n• -opt-prefetch-distance=n1[,n2]\r\n• Useful values to try for n1: 0,4,8,16,32,64 \r\n• Useful values to try for n2: 0,1,2,4,8\r\n• Can also use prefetch pragmas to do this on a per-loop basis\r\n• Try –mP2OPT_hpo_pref_initial_vals=100 <large_value>\r\nIf your application hot-spots use indirect accesses (gather/scatter) or \r\nnon-unit-strided accesses, then try enhanced compiler prefetching\r\nfor such references (described more in later slides)\r\n• Use appropriate pragma for each such loop OR\r\n• Add option –mP2OPT_hlo_pref_indirect_refs=T \r\n• Add option –mP2OPT_hlo_pref_multiple_pfes_strided_refs=T",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/02fbd1d5-d588-4d43-af0e-8d09c04beac8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=91bf2db4b4ffc88dc0b76f97e2384567200af8931d46dcc11ff45e612dc37260",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 461
      },
      {
        "segments": [
          {
            "segment_id": "a8e57da5-e0cb-4faa-bd3b-ffd0b3bd16de",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 48,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nC++ Example Using Lambda Function\r\ntypedef double* __restrict__ __attribute__((align_value (64))) Real_ptr;\r\ntypedef int Indx_type;\r\ntemplate <typename LOOP_BODY>\r\ninline __attribute__((always_inline))\r\nvoid forall(Indx_type begin, Indx_type end, LOOP_BODY loop_body)\r\n{\r\n#pragma simd\r\n#pragma vector aligned\r\n#pragma prefetch *:1:25\r\n#pragma prefetch *:0:2\r\nfor ( Indx_type ii = begin ; ii < end ; ++ii ) { loop_body( ii ); }\r\n}\r\nvoid foo8(Indx_type len, Real_ptr out1, Real_ptr out2, Real_ptr out3,\r\nReal_ptr in1, Real_ptr in2)\r\n{ \r\nforall(0, len, [&] (Indx_type i) { \r\nout1[i] = in1[i] * in2[i] ; \r\nout2[i] = in1[i] + in2[i] ;\r\nout3[i] = in1[i] - in2[i] ;\r\n} ) ;\r\n}\r\n48",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/a8e57da5-e0cb-4faa-bd3b-ffd0b3bd16de.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=56ce121b72e00daee9e784445d29c87b0f8bccb732fcf44faafdf5daecac480e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "439b4a1d-e902-467f-bee3-a9b9d8302b8f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 49,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nC++ Ex. Using Lambda - Contd\r\n49\r\n• Prefetch pragma using the * syntax to control all arrays inside the loop\r\n• Command-line uses –unroll0 option for illustrative purposes only\r\n• In general, all unrolled cache-lines are prefetched irrespective of the \r\nunroll factor chosen by the compiler for the vectorized loop \r\n• 5 arrays, 2 prefetches per array, 10 cache-lines prefetched inside the loop\r\n• First-level prefetch distance =25 vectorized loop-iterations ahead\r\n$ icpc -c -qopt-report3 -qopt-report-phase=loop,vec star_pf7.cpp -\r\nstd=c++0x -mmic -unroll0\r\nLOOP BEGIN at star_pf7.cpp(12,4) inlined into star_pf7.cpp(17,4)\r\nremark #15301: SIMD LOOP WAS VECTORIZED\r\n…\r\nremark #25018: Total number of lines prefetched in=10\r\nremark #25021: Number of initial-value prefetches=6\r\nremark #25035: Number of pointer data prefetches=10, dist=8\r\nremark #25149: Using directive-based hint=1, distance=25 for pointer \r\ndata reference [ star_pf7.cpp(18,21) ]\r\nremark #25141: Using second-level distance 2 for prefetching pointer \r\ndata reference [ star_pf7.cpp(18,21) ]\r\n…",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/439b4a1d-e902-467f-bee3-a9b9d8302b8f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=38999a2acf8d96b0e4e726b0eb765e6f0e97e892027a4f576058e9b8c6ac0825",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fb994d01-4605-495e-9559-6d2353f72afb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 50,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nLoop Prefetch Example2\r\nfor(int y = y0; y < y1; ++y) {\r\nfloat div, *restrict A_cur = &A[t & 1][z * Nxy + y * Nx];\r\nfloat *restrict A_next = &A[(t + 1) & 1][z * Nxy + y * Nx];\r\nfloat *restrict vvv = &vsq[z * Nxy + y * Nx];\r\nfor(int x = x0; x < x1; ++x) { // Typical trip-count is 192, 12 after vectorization\r\ndiv = c0 * A_cur[x] + c1 * ((A_cur[x + 1] + A_cur[x - 1])\r\n+ (A_cur[x + _Nx] + A_cur[x - _Nx])\r\n+ (A_cur[x + Nxy] + A_cur[x - Nxy])) \r\n+ c2 * ((A_cur[x + 2] + A_cur[x - 2]) + ...\r\nA_next[x] = 2 * A_cur[x] - A_next[x] + vvv[x] * div;\r\n}\r\n}\r\n50\r\n$ icc -O2 -qopt-report3 -qopt-report-phase=loop,vec p3_orig.cpp\r\n…\r\nremark #15301: LOOP WAS VECTORIZED.\r\nremark #25018: Total number of lines prefetched=38\r\nremark #25035: Number of pointer data prefetches=38, dist=8\r\n…\r\n• Prefetch coverage is low (dist =8) since typical trip-count is only 12\r\n• Use –opt-prefetch-distance=2,1 (Or add pragmas)\r\n• Or use loop-count directive before inner-loop:#pragma loop_count (192)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/fb994d01-4605-495e-9559-6d2353f72afb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=112c0523f798ed5a9e110357f86a53b7a0d3abaedb24822b17575a84b9140361",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 482
      },
      {
        "segments": [
          {
            "segment_id": "36f3e6bb-db66-487d-8a65-0b1c1d1b0a2b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 51,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\n51\r\nAdjacent Gather/Scatter Optimization Variants\r\n Few basic forms (all unmasked)\r\n Strided loads and stores\r\n Array of Structs\r\n Fortran multi-dimensional arrays with last dimension completely unrolled\r\n C/C++ pointer-of-pointers with constant last dimension\r\n Support for indirect accesses – applications like miniMD\r\n Replace series of gathers with a series of vector loads of contiguous elements \r\nfollowed by a sequence of permutations/shuffles in the register file\r\n Compiler Targeting Priorities\r\n Simple forms of this optimization enabled in 15.0 for KNC\r\n Targeting more cases in 16.0\r\n Optimization is enabled as part of default O2 optimization level \r\n User does not need to add any special options",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/36f3e6bb-db66-487d-8a65-0b1c1d1b0a2b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c844767d79b7f3bfd8b316c77c77c03cd5911d0d6ceb09c4be3f718d6eb85b8b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "aa5928f7-c04d-4bbf-8e41-3d19b766124d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 52,
            "page_width": 720,
            "page_height": 540,
            "content": "5/13/2015 52\r\nOpt-report Example – Adjacent Gather\r\n1 #include <stdio.h>\r\n2\r\n3 extern float dataf[];\r\n4 static float resf[];\r\n5 extern double datad[];\r\n6 static double resd[];\r\n7\r\n8 void adjacent_access_unoptimized()\r\n9 {\r\n10 int i = 0;\r\n11\r\n12 for (i = 0; i< 6200; ++i) {\r\n13 float xij = dataf[4 * i];\r\n14 float yij = dataf[4 * i + 1];\r\n15 float zij = dataf[4 * i + 2];\r\n16 float tij = dataf[4 * i + 3];\r\n17 resf[i] = xij * xij + yij * yij + zij * zij + tij * tij;\r\n18 }\r\n19 }\r\n20\r\n21 void adjacent_access_optimized()\r\n22 {\r\n23 int i = 0;\r\n24\r\n25 for (i = 0; i< 6200; ++i) {\r\n26 double xij = datad[3 * i];\r\n27 double yij = datad[3 * i + 1];\r\n28 double zij = datad[3 * i + 2];\r\n29 resd[i] = xij * xij + yij * yij + zij * zij;\r\n30 }\r\n31 }\r\n32\r\nCompiled with:\r\nicc -O2 -opt-report1 -opt-report\u0002file=stderr t1.c -c -mmic –opt\u0002report-phase=cg",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/aa5928f7-c04d-4bbf-8e41-3d19b766124d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8d2f7a42a8351ed40705029ff9ccd8d0e010f8d1f975ca59af66eb3bb7d13d8f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a38807c8-60c1-40f5-9b32-46c3605d5954",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 53,
            "page_width": 720,
            "page_height": 540,
            "content": "CG Opt Report: Level 1 \r\nFeatures \r\nShows report for \r\noptimization of sparse \r\nmemory accesses for \r\neach routine \r\n Reports whether an optimized \r\ninstruction sequence is used for \r\nthe sparse memory access pattern\r\n Usage of an unoptimized is a \r\nquestion for a compiler \r\nimprovement\r\n Compiler report may also say \r\n“optimization unprofitable” (not \r\nshown)\r\nExample\r\nBegin optimization report for: adjacent_access_unoptimized()\r\nReport from: Code generation optimizations [cg]\r\nt1.c(13,23):remark #34032: adjacent sparse (strided) loads are \r\nnot optimized. Details: stride { 16 }, types { F32-V512, F32-\r\nV512, F32-V512, F32-V512 }, number of elements { 16 }, \r\nselect mask { 0x00000000F }.\r\n====================================\r\nBegin optimization report for: adjacent_access_optimized()\r\nReport from: Code generation optimizations [cg]\r\nt1.c(26,24):remark #34030: adjacent sparse (strided) loads \r\noptimized for speed. Details: stride { 24 }, types { F64-\r\nV512, F64-V512, F64-V512 }, number of elements { 8 }, \r\nselect mask { 0x000000007 }.\r\n====================================\r\n5/13/2015 53",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/a38807c8-60c1-40f5-9b32-46c3605d5954.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fd9ac7c94d2974b7eeada916ecd8378d8f3097e0bfdd5665bad37eab5ba61f13",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 458
      },
      {
        "segments": [
          {
            "segment_id": "088802cd-2b7c-465a-a748-4278663ca2f0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 54,
            "page_width": 720,
            "page_height": 540,
            "content": "CG Opt Report: KNC Assembly Snippet\r\n• Unoptimized case:\r\n..L12: vgatherdps 4+dataf(%r9,%zmm0,8), %zmm1{%k3} #13.23\r\njkzd ..L11, %k3 # Prob 50% #13.23\r\nvgatherdps 4+dataf(%r9,%zmm0,8), %zmm1{%k3} #13.23\r\njknzd ..L12, %k3 # Prob 50% #13.23\r\n..L11: … \r\n..L14: vgatherdps dataf(%r9,%zmm0,8), %zmm3{%k4} #13.23\r\njkzd ..L13, %k4 # Prob 50% #13.23\r\nvgatherdps dataf(%r9,%zmm0,8), %zmm3{%k4} #13.23\r\njknzd ..L14, %k4 # Prob 50% #13.23\r\n..L13: …\r\n..L16: vgatherdps 8+dataf(%r9,%zmm0,8), %zmm4{%k2} #13.23\r\njkzd ..L15, %k2 # Prob 50% #13.23\r\nvgatherdps 8+dataf(%r9,%zmm0,8), %zmm4{%k2} #13.23\r\njknzd ..L16, %k2 # Prob 50% #13.23 …\r\n..L15: …\r\n..L18: vgatherdps 12+dataf(%r9,%zmm0,8), %zmm5{%k1} #13.23\r\njkzd ..L17, %k1 # Prob 50% #13.23\r\nvgatherdps 12+dataf(%r9,%zmm0,8), %zmm5{%k1} #13.23\r\njknzd ..L18, %k1 # Prob 50% #13.23\r\n..L17:\r\nThe four gather sequences remain in \r\ngenerated code – code generator does not \r\ncreate more efficient sequence\r\n• Optimized case:\r\n..B2.7: # Preds ..B2.7 ..B2.6 Latency 97\r\nvloadunpackld datad(,%rdx,8), %zmm3 #26.24 c1\r\nvloadunpackld 64+datad(,%rdx,8), %zmm7 #26.24 c5\r\nvloadunpackld 128+datad(,%rdx,8), %zmm2 #26.24 c9\r\nvloadunpackhd 64+datad(,%rdx,8), %zmm3 #26.24 c13\r\nvloadunpackhd 128+datad(,%rdx,8), %zmm7 #26.24 c17\r\nvloadunpackhd 192+datad(,%rdx,8), %zmm2 #26.24 c21\r\n…\r\njb ..B2.7 # Prob 99% #25.7 c97\r\n3-gather sequence converted by \r\ncompiler to a more efficient \r\nsequence with 3 unaligned pair\u0002loads (shown above) + permutes \r\n(not shown)\r\n5/13/2015 54",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/088802cd-2b7c-465a-a748-4278663ca2f0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=21a96020f42363786971c7ddd3b0f491d7b0af85c3cb667e1b530c2dbebd6f75",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9a26dcf5-e489-4a6d-8c5c-ddc0323bc347",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 55,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2013, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nCoral Example–Strided Loads\r\n• Vectorized using 3 adj-gather: optimized seq generated for AVX,AVX2,KNC,KNL,SKX\r\nvoid foo(double* restrict min, __int32* restrict pos, const double (*in)[3], const \r\ndouble* displ, const int limit){\r\nint p = 0; double t = in[0][0] + displ[0]; double m = t*t;\r\nt = in[0][1] + displ[1]; m += t*t;\r\nt = in[0][2] + displ[2]; m += t*t;\r\nfor (int j = 1; j < limit; j++) {\r\ndouble t = in[j][0] + displ[0]; double v = t*t;\r\nt = in[j][1] + displ[1]; v += t*t;\r\nt = in[j][2] + displ[2]; v += t*t;\r\nif (v < m){ m = v; p = j; }\r\n}\r\n*min = m; *pos = p;\r\n} // icc -O3 –xMIC-AVX512 -restrict -opt-report3 coral_qmcpack.cpp –c\r\nReport from: Code generation optimizations [cg]\r\ncoral_qmcpack.cpp(11,28):remark #34030: adjacent sparse (strided) loads optimized \r\nfor speed. Details: stride { 24 }, types { F64-V512, F64-V512, F64-V512 }, number \r\nof elements { 8 }, select mask { 0x000000007 }",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/9a26dcf5-e489-4a6d-8c5c-ddc0323bc347.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b9830ac6f22dbcf84f4c4bd38c1b17c75d87ccbbf2b52e69f0105a549cbe0609",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 373
      },
      {
        "segments": [
          {
            "segment_id": "738691ba-a8c4-42cd-b4b3-4db084b8282e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 56,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2013, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nAdjacent Gather/Scatter Optimization for AOS\r\n• Current compiler can successfully detect a \r\nseries of adjacent gathers/scatters that get \r\ngenerated due to accesses to multiple \r\nadjacent structure members and can \r\noptimize away the gathers/scatters.\r\n• Optimized sequence generated for KNC, KNL, \r\nSKX\r\n• a3_double.c(13,17):remark #34030: adjacent \r\nsparse (strided) loads optimized for speed. Details: \r\nstride { 24 }, types { F64-V512, F64-V512, F64-\r\nV512 }, number of elements { 8 }, select mask \r\n{ 0x000000007 }\r\ntypedef struct {\r\ndouble x;\r\ndouble y;\r\ndouble z;\r\n} s;\r\ns aos[16];\r\ndouble foo( ){\r\nint i, j;\r\ndouble res = 0;\r\nfor (i=0; i<16; i++) {\r\ndouble xt = aos[i].x;\r\ndouble yt = aos[i].y;\r\ndouble zt = aos[i].z;\r\nres += xt + yt + zt;\r\n}\r\nreturn res;\r\n}",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/738691ba-a8c4-42cd-b4b3-4db084b8282e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cf8135aac62e4ceb598a4978a72fd8dc0b98ab2d56a2bff6865d5eac35ec6f0a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "919e7726-4cbc-4401-8775-c069155af514",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 57,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2013, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nminiMD: Adjacent Gather on KNC based on Indexed Loads\r\n• Three gather’s of eight double precision \r\nelements with offsets 0, 8, 16\r\n• 8 byte padding is present at offset 24\r\n• Full mask, no up-conversion, scale is 8, \r\nno NT hint\r\n• 4-byte indices\r\n• Same base; offsets are included into \r\nindex vectors, so each gather uses its \r\nown index vector\r\nfor(int k = 0; k < numneighs; k++) {\r\nconst int j = neighs[k];\r\ndouble x = x[j * PAD + 0];\r\ndouble y = x[j * PAD + 1];\r\ndouble z = x[j * PAD + 2];\r\n…\r\n}\r\nA scenario of gathers in a \r\nparticular version of miniMD\r\n1.11x improvement on KNC\r\nforce_lj.cpp(417,37):remark #34029: \r\nadjacent sparse (indexed) loads optimized \r\nfor speed. Details: types { F64-V512, F64-\r\nV512, F64-V512 }, number of elements { 8 \r\n}, select mask { 0x000000007 }",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/919e7726-4cbc-4401-8775-c069155af514.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=09a9798a1a66c6cd18840b1bfe38e9f733434c7a67ad8cc6c520606438c6791b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "60ee755c-15a6-4fc6-9c63-bb7078c0acc0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 58,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nIntel \r\nConfidential\r\n58\r\nFortran Assumed Shape Array Parameter\r\nAssumed shape arrays as parameters\r\nsubroutine ash(A, B, C)\r\nreal, intent(inout), dimension(:) :: A \r\nreal, intent(in), dimension(:) :: B \r\nreal, intent(in), dimension(:) :: C \r\nA = A + B * C \r\nreturn \r\nend\r\nNo information is passed explicitly by the programmer\r\n– Implicit interface (dope vector) for extent, stride info\r\n– Populated by the compiler, passed from caller to callee\r\nCan have any stride\r\n– Compiler does not generate packing/unpacking at call site",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/60ee755c-15a6-4fc6-9c63-bb7078c0acc0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2eea0cf8d06dbc48545f24fce66f88d820f5862a40b060f92af844abee774176",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 404
      },
      {
        "segments": [
          {
            "segment_id": "d21322bb-df36-4068-a3ff-66441a0e7f7b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 59,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nIntel \r\nConfidential\r\n59\r\nAssumed Shape Array Vectorization\r\nAny stride is possible for each of the 3 arrays\r\n– Multiversion code to check for stride at runtime\r\n– How many versions? There are 2^3=8 combinations:\r\n– unitstride(A) & unitstride(B) & unitstride(C)\r\n– unitstride(A) & unitstride(B) & !unitstride(C)\r\n– unitstride(A) & !unitstride(B) & unitstride(C)\r\n– ...\r\n– !unitstride(A) & !unitstride(B) & !unitstride(C)\r\n– Compiler generates 2 versions:\r\n– Ver1: All arrays are unitstride\r\n– Ver2: At least 1 array is non-unitstride\r\n– Version 1 can be vectorized (on KNC) using \r\nvmovaps/vloadunpack (alignment)\r\n– Version 2 can be vectorized using vgather",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/d21322bb-df36-4068-a3ff-66441a0e7f7b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=563465fe49a21b4822af86274e86f547360d68ade452f70e8caa26129124f4a1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d82ab770-19ce-45ac-adb9-ac306b6b6417",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 60,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nIntel \r\nConfidential\r\n60\r\nAssumed Shape Array Alignment\r\nEach array can have arbitrary alignment\r\n– User should help compiler with alignment assumptions (as \r\nbefore)\r\n– Without user help, the compiler generates\r\n– A peel loop that iterates until one array is aligned \r\n• Preferred array to align is the one we store \r\ninto (i.e., A)\r\n– Still (N-1) arrays could be unaligned\r\n– A multiversion code that checks alignment of B (2nd array)\r\n– No further multiversioning for array C (too deep version tree)\r\nif( A,B,C all unit stride ) \r\nPeel loop until A is aligned (uses vscatter for A)\r\nif( B is aligned ) \r\n[al64] A = [al64] B + C //Version 1a\r\nelse\r\n[al64] A = B + C //Version 1b\r\nendif\r\nelse\r\nA = B + C //Version 2\r\nendif",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/d82ab770-19ce-45ac-adb9-ac306b6b6417.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0eadc9e63313ea1751d0dc716c102a0ec3654687f08f8dccf5a7c2ca43a0a62e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e641d3ab-a895-496d-83bc-2d77f3ac4cb2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 61,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n61\r\nAssumed Shape Array Multiversioning\r\nScellrb5% cat -n t7.f90\r\n1 subroutine assumed_shape1(A, B, C)\r\n2\r\n3 real, intent(inout), dimension(:) :: A\r\n4 real, intent(in), dimension(:) :: B, C\r\n5\r\n6 A = A + B * C\r\n7\r\n8 return\r\n9 end\r\nscellrb5%: ifort -O3 -opt-report5 -opt-report-file=stderr -xmic-avx512 -c \r\nt7.f90",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/e641d3ab-a895-496d-83bc-2d77f3ac4cb2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9dc89b418815850b7ad4845a776672072554f3db2c4b551e574652768a1ec5d2",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "2a326eab-1a56-4d8d-ad8d-c635080b8a8a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 62,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n62\r\nLoop Report – Assumed Shape Array (1)\r\nLOOP BEGIN at t7.f90(6,7)\r\n<Peeled, Multiversioned v1>\r\nremark #15389: vectorization support: reference a has unaligned access …\r\nremark #15381: vectorization support: unaligned access used inside loop body\r\nremark #15301: PEEL LOOP WAS VECTORIZED\r\nLOOP END\r\nLOOP BEGIN at t7.f90(6,7)\r\n<Multiversioned v1>\r\nremark #25233: Loop multiversioned for stride tests on Assumed shape arrays\r\nremark #15389: vectorization support: reference a has aligned access …\r\nremark #15389: vectorization support: reference b has unaligned access\r\nremark #15389: vectorization support: reference c has aligned access\r\nremark #15381: vectorization support: unaligned access used inside loop body\r\nremark #15399: vectorization support: unroll factor set to 2\r\nremark #15300: LOOP WAS VECTORIZED\r\nremark #15450: unmasked unaligned unit stride loads: 1 …\r\nLOOP END\r\nLOOP BEGIN at t7.f90(6,7)\r\n<Alternate Alignment Vectorized Loop, Multiversioned v1>\r\nLOOP END\r\nLOOP BEGIN at t7.f90(6,7)\r\n<Remainder, Multiversioned v1> …\r\nremark #15301: REMAINDER LOOP WAS VECTORIZED\r\nLOOP END",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/2a326eab-1a56-4d8d-ad8d-c635080b8a8a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4705212caee47efcff647a6eca1fa8db89b8a909707fe8b88ace5199ddba601d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 503
      },
      {
        "segments": [
          {
            "segment_id": "75c62be1-f1e1-4efd-be3f-e692c1d9f8a5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 63,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n63\r\nLoop Report – Assumed Shape Array (2)\r\nLOOP BEGIN at t7.f90(6,7)\r\n<Multiversioned v2>\r\nremark #15416: vectorization support: scatter was generated for the variable a: strided by non-constant \r\nvalue\r\nremark #15415: vectorization support: gather was generated for the variable a: strided by non-constant \r\nvalue\r\nremark #15415: vectorization support: gather was generated for the variable b: strided by non-constant \r\nvalue\r\nremark #15415: vectorization support: gather was generated for the variable c: strided by non-constant \r\nvalue\r\nremark #15399: vectorization support: unroll factor set to 2\r\nremark #15300: LOOP WAS VECTORIZED\r\nremark #15460: masked strided loads: 3\r\nremark #15462: unmasked indexed (or gather) loads: 1\r\nremark #15475: --- begin vector loop cost summary ---\r\nremark #15476: scalar loop cost: 9\r\nremark #15477: vector loop cost: 10.870\r\nremark #15478: estimated potential speedup: 1.530\r\nremark #15488: --- end vector loop cost summary --- …\r\nLOOP END\r\nLOOP BEGIN at t7.f90(6,7)\r\n<Remainder, Multiversioned v2>\r\nLOOP END",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/75c62be1-f1e1-4efd-be3f-e692c1d9f8a5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=16556b29aa898f476157fca460ae42672fce88011e46ad3f335766b3d0809c44",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3e100316-7588-4ac0-a00c-e4b9e4527d83",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 64,
            "page_width": 720,
            "page_height": 540,
            "content": "Software & Services Group\r\nCopyright© 2013, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nCompiler Strictly Follows Language Rules\r\n• Are “long” and “int” same?\r\n– Not on GCC based Intel64 platforms\r\n– Potential Impact: portability and \r\nperformance\r\n• Can complicate compiler analysis.\r\n• May lose vectorization\r\n• 1.0 and sin() are double. \r\n1.0f and sinf() are float.\r\n– Hard to catch in the source code.\r\n– Unintended type converts all over in \r\nASM code\r\n– Computation unintentionally \r\nexpensive\r\n64\r\nfloat x[N], y[N];\r\nfor (i = 0; i < N; i++) \r\ny[i] = sin(x[i] + 1.0)+1.0\r\nfloat\r\nfloat double double\r\nfloat x[N], y[N];\r\nfor (i = 0; I < N; i++) \r\ny[i] = sinf(x[i] + 1.0f)+1.0f",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/3e100316-7588-4ac0-a00c-e4b9e4527d83.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2421d714f71cf79ac558c31e6dc0c708d3dc71ed97a500d232140677a790d5fe",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "cbe474e5-0d3c-4d68-8820-ffaf9807a856",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 65,
            "page_width": 720,
            "page_height": 540,
            "content": "Look for Hints of Vector Inefficiency \r\n• Scellrb5% cat -n t12_sin.c\r\n• 1 #include <stdio.h>\r\n• 2\r\n• 3 void foo1(float * restrict a, float *b, float *c, int n)\r\n• 4 {\r\n• 5 int i;\r\n• 6 for (i=0; i<n; i++) {\r\n• 7 a[i] = sin(b[i] + 1.0);\r\n• 8 }\r\n• 9 }\r\n• 10\r\n• scellrb5%: icc -O2 -qopt-report4 -qopt-report-file=stderr t12_sin.c -restrict -c -xmic\u0002avx512\r\n65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/cbe474e5-0d3c-4d68-8820-ffaf9807a856.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=eca5cb70bbf8922a10541705e48d1dfe080e85c01211060976b8fb227e2e6db6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 362
      },
      {
        "segments": [
          {
            "segment_id": "0533e3f2-26de-47e3-9218-7787c91fa58a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 66,
            "page_width": 720,
            "page_height": 540,
            "content": "Kernel Loop Report–Vector Inefficiency\r\n• LOOP BEGIN at t12_sin.c(6,3)\r\n• remark #15389: vectorization support: reference b has unaligned access [ t12_sin.c(7,12) ]\r\n• remark #15389: vectorization support: reference a has unaligned access [ t12_sin.c(7,5) ]\r\n• remark #15381: vectorization support: unaligned access used inside loop body\r\n• remark #15399: vectorization support: unroll factor set to 2\r\n• remark #15417: vectorization support: number of FP up converts: single precision to double \r\nprecision 1 [ t12_sin.c(7,12) ]\r\n• remark #15418: vectorization support: number of FP down converts: double precision to single \r\nprecision 1 [ t12_sin.c(7,5) ]\r\n• remark #15300: LOOP WAS VECTORIZED\r\n• remark #15442: entire loop may be executed in remainder\r\n• remark #15450: unmasked unaligned unit stride loads: 1\r\n• remark #15451: unmasked unaligned unit stride stores: 1\r\n• remark #15475: --- begin vector loop cost summary ---\r\n• remark #15476: scalar loop cost: 113\r\n• remark #15477: vector loop cost: 10.060\r\n• remark #15478: estimated potential speedup: 9.980\r\n• remark #15482: vectorized math library calls: 1\r\n• remark #15487: type converts: 2\r\n• remark #15488: --- end vector loop cost summary ---\r\n• LOOP END\r\n66",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/0533e3f2-26de-47e3-9218-7787c91fa58a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=72388a7c3a1965c36f35674a9c0353a6d37c067bd9dd216edca4c17a315b577f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "bfc382b4-c554-497b-90ab-00d1f5d6eb55",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 67,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nAlignment and Module Data\r\nKnown Sized Arrays\r\nExample: Global arrays declared in modules with \r\nknown size.\r\nmodule mymod\r\n!dir$ attributes align:64 :: a\r\n!dir$ attributes align:64 :: b\r\nreal (kind=8) :: a(1000), b(1000)\r\nend module mymod\r\nsubroutine add_them()\r\nuse mymod\r\nimplicit none\r\n! array syntax shown, could also be explicit loop\r\n!...No explicit directive needed to say that A and B\r\n! are aligned, the USE brings that information\r\na = a + b\r\nend subroutine add_them\r\nThis saves coding effort AND \r\nimproves performance!\r\n67",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/bfc382b4-c554-497b-90ab-00d1f5d6eb55.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fa0c0e150e23b4039d1e429c2cb0f02a6bca300297d0424e0b769d81e11c4062",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "eb88dadc-faac-42dc-a286-e2f440d67150",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 68,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n68\r\nFortran Alignment Example \r\nscellrb5% cat -n t2_mod.f90\r\n1 module mymod\r\n2 !dir$ attributes align:64 :: a, b, c, d // Alternatively use –align array64byte\r\n3 real*8 :: a(1000), b(1000), c(1000), d(1000)\r\n4 end module mymod\r\nscellrb5% cat -n sub3.f90\r\n1 subroutine add_them2(low1, up1)\r\n2 use mymod\r\n3 implicit none\r\n4 integer low1, up1, i\r\n5\r\n6 ! No explicit directive should be needed to tell the compiler that\r\n7 ! base pointers of A and B are aligned, the USE should bring that information.\r\n8 ! But since the lower bound of the loop is not 1, compiler does\r\n9 ! loop-peeling - once peeling is done for one array, all array\r\n10 ! accesses get fully aligned in the kernel loop\r\n11\r\n12 do i=low1, up1\r\n13 a(i) = b(i) + c(i) + d(i)\r\n14 enddo\r\n15 end subroutine add_them2",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/eb88dadc-faac-42dc-a286-e2f440d67150.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=94bbf7b1a4b4526eb0f2947f56da1d2d9d9d10146c83762626741bf5594b7e5d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 450
      },
      {
        "segments": [
          {
            "segment_id": "7fce8235-a78e-4a71-9766-613bd1c73fb3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 69,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n69\r\nFortran Alignment Example (2)\r\nLOOP BEGIN at sub3.f90(12,3)\r\n<Peeled>\r\nremark #15389: vectorization support: reference a has unaligned access [ sub3.f90(13,5) ] \r\n…\r\nremark #15381: vectorization support: unaligned access used inside loop body\r\nremark #15301: PEEL LOOP WAS VECTORIZED\r\nremark #25015: Estimate of max trip count of loop=125\r\nLOOP END\r\nLOOP BEGIN at sub3.f90(12,3)\r\nremark #15388: vectorization support: reference a has aligned access [ sub3.f90(13,5) ]\r\nremark #15388: vectorization support: reference b has aligned access [ sub3.f90(13,5) ]\r\nremark #15388: vectorization support: reference c has aligned access [ sub3.f90(13,5) ]\r\nremark #15388: vectorization support: reference d has aligned access [ sub3.f90(13,5) ]\r\nremark #15399: vectorization support: unroll factor set to 4\r\nremark #15300: LOOP WAS VECTORIZED …\r\nremark #25015: Estimate of max trip count of loop=31\r\nLOOP END\r\nLOOP BEGIN at sub3.f90(12,3)\r\n<Remainder>\r\nremark #15388: vectorization support: reference a has aligned access [ sub3.f90(13,5) ] …\r\nremark #15301: REMAINDER LOOP WAS VECTORIZED\r\nremark #25015: Estimate of max trip count of loop=125\r\nLOOP END",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/7fce8235-a78e-4a71-9766-613bd1c73fb3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=53fbe764b91e19b559fa103fe884f48b15e08cedec1cd3cdae4271f34da47c15",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "be646b36-5f9a-48a5-b884-a503a25e474e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 70,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n70\r\nAppln Example Using Elemental Function\r\n#pragma simd // simd pragma for outer-loop at call-site of elemental-function\r\nfor (int i = beg*16; i < end*16; ++i) \r\nparticleVelocity_block(px[i], py[i], pz[i], destvx + i, destvy + i, destvz + i, vel_block_start, \r\nvel_block_end);\r\n__declspec(vector(uniform(start,end), linear(velx,vely,velz)))\r\nstatic void particleVelocity_block(const float posx, const float posy, const float posz,\r\nfloat *velx, float *vely, float *velz, int start, int end) {\r\n__assume_aligned(velx,64); __assume_aligned(vely,64); __assume_aligned(velz,64); \r\nfor (int j = start; j < end; ++j) {\r\nconst float del_p_x = posx - px[j]; const float del_p_y = posy - py[j];\r\nconst float del_p_z = posz - pz[j];\r\nconst float dxn= del_p_x * del_p_x + del_p_y * del_p_y + del_p_z * del_p_z +pa[j]* pa[j];\r\nconst float dxctaui = del_p_y * tz[j] - ty[j] * del_p_z;\r\nconst float dyctaui = del_p_z * tx[j] - tz[j] * del_p_x;\r\nconst float dzctaui = del_p_x * ty[j] - tx[j] * del_p_y;\r\nconst float dst = 1.0f/std::sqrt(dxn);\r\nconst float dst3 = dst*dst*dst;\r\n*velx -= dxctaui * dst3;\r\n*vely -= dyctaui * dst3;\r\n*velz -= dzctaui * dst3;\r\n}\r\n}\r\n• Performance improvement over 2X going from inner to outer-loop \r\nvectorization",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/be646b36-5f9a-48a5-b884-a503a25e474e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=192e4bb7ef98323d18343d4f58ffd7e828dd097a7253021a98f770eee93268f4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 384
      },
      {
        "segments": [
          {
            "segment_id": "d7f0cd46-ec9e-48fe-8c35-ca19fb72a682",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 71,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n71\r\nAppln Example using Compress Idiom\r\nint index_0 = 0;\r\nfor(int k0=0; k0<count0; k0++) {\r\nTYPE X1 = *(Pos0 + k0); TYPE Y1 = *(Pos0 + k0 + count0);\r\nTYPE Z1 = *(Pos0 + k0 + 2*count0);\r\n#pragma loop_count min(220) avg (300) max (380)\r\nfor(int k1=0; k1<count1; k1+=1) {\r\nTYPE X0 = *(Pos1 + k1);\r\nTYPE Y0 = *(Pos1 + k1 + count1);\r\nTYPE Z0 = *(Pos1 + k1 + 2*count1);\r\nTYPE diff_X = (X0 - X1);\r\nTYPE diff_Y = (Y0 - Y1);\r\nTYPE diff_Z = (Z0 - Z1);\r\nTYPE norm_2 = (diff_X*diff_X) + (diff_Y*diff_Y) + (diff_Z*diff_Z);\r\nif ( (norm_2 >= rmin_2) && (norm_2 <= rmax_2))\r\nPacked[index_0++] = norm_2;\r\n}\r\n}\r\n• Perf gain close to 10X going from no-vec to vec\r\n• Index_0 is getting updated under a condition – not linear\r\n• Currently this cannot be expressed using simd clauses \r\n• Extensions to simd-syntax to express this idiom is WIP",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/d7f0cd46-ec9e-48fe-8c35-ca19fb72a682.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b3ff5d532e488fcded844784b5a64a05c99630c6742302f63c6d504f50b82b47",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a53f4791-139b-433d-935b-901e2b074f37",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 72,
            "page_width": 720,
            "page_height": 540,
            "content": "Mandel Ex. for Vectorizing Outer Loop\r\nOriginal Src:\r\nmandel ( x0, x1, y0, y1, \r\nwidth, height, \r\nmax_recur, output) \r\n{\r\ndx = (x1-x0) / width; \r\ndy = (y1-y0) / height; \r\nfor( j=0; j<height; j++) {\r\nfor( i=0; i<width; i++) {\r\nindex = j * width + i;\r\nx = x0 + i * dx; \r\ny = y0 + j * dy; \r\nstd::complex c(x,y);\r\nmandel_inner(c, max_recur, &output[index]);\r\n}\r\n}\r\n}\r\nmain() {\r\n//read inputs \r\n...\r\nmandel(...);\r\n}\r\n• Two loops that go over 2D space of points,\r\n• Call mandel_inner for each point.\r\nmandel_inner ( \r\nstd::complex<float> c, \r\nint max_recur, \r\nchar *output ) \r\n{\r\nstd::complex z = c; \r\nint i=0;\r\nwhile ( i < max_recur ) {\r\nif ( z.real()*z.real()+z.imag()*z.imag() > 4.0 )\r\nbreak; \r\nz = z * z + c;\r\ni++;\r\n}\r\n*output = i * (255.0/max_recur);\r\n}\r\n• For a given point, calculate how many \r\niterations is needed for that point to go \r\nout of bounds.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/a53f4791-139b-433d-935b-901e2b074f37.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9bd581698fcd03ff541a30aa15c59aaf7c42be8380cb93438afee2dd1ca72fa0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0259b587-32e8-4cdd-9fe8-454401affd07",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 73,
            "page_width": 720,
            "page_height": 540,
            "content": "Mandel Version 2: Elemental Function\r\nmandel ( x0, x1, y0, y1, \r\nwidth, height, \r\nmax_recur, output) {\r\ndx = (x1-x0) / width; \r\ndy = (y1-y0) / height; \r\n#pragma omp parallel for \r\nfor( j=0; j<height; j++) {\r\n#pragma simd\r\nfor( i=0; i<width; i++) {\r\nindex = j * width + i;\r\nx = x0 + i * dx; \r\ny = y0 + j * dy; \r\nmandel_inner(x,y, max_recur, \r\n&output[index]);\r\n}\r\n}\r\n}\r\n• Vectorization of the loop is simple \r\n• The function to be called is already \r\nvectorized. \r\n__declspec(vector(uniform(max_recur), \r\nlinear(output)))\r\nmandel_inner ( float c_re, float c_im\r\nint max_recur, \r\nint * output ) {\r\nfloat z_re=c_re, z_im=c_im; \r\nint i=0;\r\nwhile ( i < max_recur ) {\r\nif ( z_re*z_re+z_im*z_im > 4.0 )\r\nbreak; \r\ntmp = z_re*z_re - z_im*z_im + c_re;\r\nz_im = 2*z_re*z_im + c_im;\r\nz_re = tmp;\r\ni++;\r\n}\r\n*output = i * (255.0/max_recur);\r\n}\r\n• Declared as a “SIMD enabled function\". \r\n• Function is vectorized\r\n• SIMD Loop is vectorized",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/0259b587-32e8-4cdd-9fe8-454401affd07.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6f5471aba5573d4f2c4319360116552e6931ecb8be7174e87aa2c4ff15713fd8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 483
      },
      {
        "segments": [
          {
            "segment_id": "b63da84d-292f-46f9-bff9-16eef79ffb80",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 74,
            "page_width": 720,
            "page_height": 540,
            "content": "Mandel Version 3: Array Notation\r\n#define VLEN 16 // on MIC\r\nmandel ( x0, x1, y0, y1, \r\nwidth, height, \r\nmax_recur, output) {\r\ndx = (x1-x0) / width; \r\ndy = (y1-y0) / height; \r\n#pragma omp parallel for \r\nfor( j=0; j<height; j++) {\r\nfor( i=0; i<width; i+=VLEN) {\r\nunsigned int ix[VLEN];\r\ncomplex<float> c; \r\nindex = j * width + i;\r\nix = __sec_implicit_index(0); \r\nc[:].re = x0 + (i+ix[:]) * dx; \r\nc[:].im = y0 + j * dy; \r\nmandel_inner(c, max_recur, \r\n&output[index]);\r\n}\r\n}\r\n}\r\nvoid mandel_inner(struct complex<float> c[VLEN],\r\nunsigned int max_recur,\r\nunsigned int output[VLEN]) {\r\nunsigned int i = 0; complex<float> z[VLEN];\r\nint mask[VLEN], result[VLEN];\r\nresult[:] = 0;\r\nz[:].re = c[:].re;\r\nz[:].im = c[:].im;\r\nwhile (i < max_recurrences) {\r\nfloat absq[VLEN];\r\nabsq[:] = z[:].re * z[:].re + z[:].im * z[:].im;\r\nmask[:] = absq[:] < 4.0;\r\nif (__sec_reduce_all_zero(mask[:])) \r\nbreak;\r\nresult[:] += mask[:];\r\nfloat oldz_re[VLEN];\r\noldz_re[:] = z[:].re;\r\nz[:].re = (z[:].re * z[:].re) -\r\n(z[:].im * z[:].im) + c[0:VLEN].re;\r\nz[:].im = (oldz_re[:] * z[:].im * TWO) +\r\nc[0:VLEN].im;\r\ni++;\r\n}\r\noutput[0:VLEN] = (result[:]*(255.0/max_recur));\r\n}\r\n• Some extra effort by the programmer guarantees vectorization\r\n• Direct translation into vector code",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/b63da84d-292f-46f9-bff9-16eef79ffb80.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e74e0b2ab27590894a82b7b56ea29556b6e99f91f19d32d4d3621fc3cb32b4b0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ee99e585-dbc7-4345-85c2-3190e567771c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 75,
            "page_width": 720,
            "page_height": 540,
            "content": "75\r\nPredicate Optimization\r\n Hoist affine and invariant conditions \r\ndo i = 1, n do i = 1, m-1\r\nif (i>=m) S2\r\nS1 enddo\r\nend if do i= m,n\r\nS2 S1 S2\r\nend do enddo",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/ee99e585-dbc7-4345-85c2-3190e567771c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=87ed78a08b97615c0f45f8f9b10e3b82d9c25400e4a8f6e74cd1b20c1319d26e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9b9d5e05-1c43-4fcd-8ec6-88adb6b0880f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 76,
            "page_width": 720,
            "page_height": 540,
            "content": "76\r\nPredicate opt \r\nexample\r\nfor (i=i1; i<=i2; i++) {\r\nif (i == val)\r\nsum++;\r\n*cnt_ptr=*cnt_ptr*5 +1;\r\n} \r\n/* Region 1 */\r\ncnt1 = min(i2-i1+1, val-i1);\r\nfor (i=1; i<=cnt1; i++) {\r\n*cnt_ptr = *cnt_ptr*5 + 1;\r\n}\r\n/* Region 2 */\r\nIf ( (i1<=val) && (val<=i2) {\r\nsum++;\r\n*cnt_ptr = *cnt_ptr*5 + 1;\r\n}\r\n/* Region 3 */\r\ncnt2 = i2-val;\r\nif (val < i1) \r\ncnt2=i2-i1+1;\r\nfor (i=1; i<=cnt2; i++) {\r\n*cnt_ptr = *cnt_ptr*5 + 1;\r\n}",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/9b9d5e05-1c43-4fcd-8ec6-88adb6b0880f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8f3387a74eb3e2366e3d3d364710244949eb8c5ab4f14b80ab3873b8c2543fdf",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "76c50418-022c-47ff-aa52-32892dfd72b8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 77,
            "page_width": 720,
            "page_height": 540,
            "content": "77\r\nMCDRAM Support in FORTRAN\r\n• !DIR$ attributes fastmem :: data-object\r\n– Says put that data object in KNL “fast memory” aka MCDRAM\r\n– data-object is an allocatable array on heap memory–any type, any \r\nshape {up to size limits of HBW memory)\r\n• Compiler will generate calls to routines like \r\nhbw_posix_memalign and hbw_free to allocate and free \r\n“fast memory”\r\n• Full support available starting with 15.0 Product Update 1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/76c50418-022c-47ff-aa52-32892dfd72b8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=51126aaa04b8979787525a336f235c1f34cd8323095d4e5e09b11e12d427062d",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d4602d4f-1b09-417a-8e0b-49b8bb4f87ef",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 78,
            "page_width": 720,
            "page_height": 540,
            "content": "78\r\nFORTRAN fastmem Example\r\nprogram main\r\nReal(8), allocatable, dimension(:,:) :: A, B, C\r\n!DIR$ ATTRIBUTES FASTMEM :: A, B, C\r\nInteger, parameter :: N=600\r\nAllocate (A(N,N), B(N,N), C(N,N))\r\ncall test(a,b,c,N)\r\nprint *, a(1,1), b(2,2), c(3,3)\r\nend\r\nsubroutine test(a,b,c,N)\r\ninteger len, i,j\r\nReal(8), dimension(N,N) :: A, B, C\r\nInteger:: N\r\nPrint *, 'start'\r\ncall mic_sub(A, N)\r\ncall mic_sub(B, N)\r\ncall mic_sub(C, N)\r\nend subroutine test\r\nsubroutine mic_sub(a,len)\r\nreal(8) a(len,len)\r\ninteger i ,len\r\ndo i = 1, len\r\ndo j =1, len\r\na(i,j) = 2*(i+j)\r\nenddo\r\nenddo\r\nend",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/d4602d4f-1b09-417a-8e0b-49b8bb4f87ef.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4b1b26193142e21e26263e8fac6b9787e66e928a626539f73b5b308929c80b08",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 450
      },
      {
        "segments": [
          {
            "segment_id": "9fd2e858-1374-4356-bcec-c247c04ad5e3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 79,
            "page_width": 720,
            "page_height": 540,
            "content": "79\r\nFORTRAN fastmem Example2\r\nmodule work_array\r\nTYPE FBLOCK\r\nINTEGER :: NXFULL\r\nREAL, ALLOCATABLE :: work1 (:,:)\r\nREAL, ALLOCATABLE :: work2 (:,:)\r\n!!!DIR$ ATTRIBUTES FASTMEM :: work2\r\n!DIR$ ATTRIBUTES FASTMEM :: work1\r\nEND TYPE FBLOCK\r\ninteger N1\r\nTYPE(FBLOCK) :: PV1\r\nend module\r\nprogram main\r\nuse work_array\r\nread (input, *) N1\r\nPV1%NXFULL = N1\r\nallocate(PV1%work1(N1, 2*N1))\r\nPV1%work1 = 2\r\nallocate(PV1%work2(N1, 2*N1))\r\nPV1%work2 = 3\r\ndo j=1,2*PV1%NXFULL\r\ndo i=1,PV1%NXFULL\r\nprint *, PV1%work1(i, j)\r\nprint *, PV1%work2(i, j)\r\nenddo\r\nenddo\r\nend program",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/9fd2e858-1374-4356-bcec-c247c04ad5e3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=07eff392735c75460931ec03e475ed4dd4db8f645a8a13804ea91e860deae8f5",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a41196a5-38db-4d28-845b-e4d2232ac628",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 80,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n80\r\nReview Sheet for Efficient Vectorization\r\n• Are you using vector-friendly options such as –align array64byte?\r\n• Are all hot loops vectorized and maximizing use of unit-stride accesses?\r\n• Have you looked into outer-loop vs. inner-loop vec tradeoffs?\r\n• Align the data and Tell the compiler\r\n• Have you studied the opt-report output for hot-loops to ensure these?\r\n• Are there any peel-loop and remainder-loop generated for your key-loops (Have \r\nyou added loop_count pragma)?\r\n• Make changes to ensure significant runtime is not being spent in such loops\r\n• Are you able to pad your arrays and get improved performance with –opt\u0002assume-safe-padding (only on KNC)?\r\n• Have you added “#pragma vector aligned nontemporal” for all loops with \r\nstreaming-store accesses to maximize performance?\r\n• Avoid branchy code inside loops to improve vector-efficiency\r\n• Avoid duplicates between then and else, use builtin_expect to provide hint, \r\nmove loop-invariant loads and stores under the branch to outside loops\r\n• Use hardware supported operations only (rest will be emulated)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/a41196a5-38db-4d28-845b-e4d2232ac628.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bb1658794f74742f70a13bcd6200be1ac2693393faf1726a6c4e001241714e21",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1f3f6d6a-4960-4cc3-a59a-8dd0a98ee3f1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 81,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n81\r\nReview Sheet for Vectorization 2\r\n• Use OMP4.0 or Intel Cilk Plus extensions for efficient and predictable \r\nvectorization\r\n• #pragma omp simd OR #pragma SIMD OR !DEC$ SIMD\r\n• Short-vector array notation for C/C++\r\n• Shifts burden to the user to express explicit vectorization\r\n• High-level and portable alternative to using intrinsics\r\n• Use simd-enabled functions (C and Fortran) for loops with function \r\ncalls\r\n• Can also be used to express outer-loop vectorization\r\n• #pragma omp declare simd\r\n• Study opportunities for outer-loop vectorization based on code access \r\npatterns\r\n• Use array-notations OR simd-enabled-functions to express it\r\n• Make memory accesses unit-strided in vector-loops as much as possible\r\n• Important for C and Fortran\r\n• F90 array notation also can be used in short-vector form",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/1f3f6d6a-4960-4cc3-a59a-8dd0a98ee3f1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e455032bc4e350546e63ce9a3d71ef54c3446780d3a6e4de8677a76711f08e40",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 404
      },
      {
        "segments": [
          {
            "segment_id": "3a6d230e-e5c6-47af-83c0-4c981843243c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 82,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n82\r\nReview Sheet for Advanced Optimizations\r\n• Are you able to take advantage of –fp-model fast=2?\r\n• Enables –complex-limited-range – important if using “complex” datatype\r\n• Enables –fimf-domain-exclusion=15 (significant perf adv on KNC)\r\n• If your algorithm allows it, have you tried more aggressive floating-point options:\r\n• -fimf-precision=low, -no-prec-div, -no-prec-sqrt, -fast-transcendentals, …\r\n• If your application requires use of –fp-model precise:\r\n• In some cases, users (who want high-performing vector code) may use:\r\n• –fp-model precise –fimf-max-error=1 –fast-transcendentals –no-prec-div –no\u0002prec-sqrt\r\n• This will result in generating vectorized code with as much precision as SVML \r\nsupports – not IEEE, results may be non-reproducible between –O0 and –O2\r\n• Have you tried prefetch tuning options?\r\n• For indirect accesses, have you tried prefetching using pragmas?\r\n• Have you maximized use of streaming stores for bandwidth savings?",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/3a6d230e-e5c6-47af-83c0-4c981843243c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a615464dbeb6a723d52a31ad14834c7ef1cea8a0245ade9fc6c20c469899f713",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9d1f3971-6999-404b-988e-ddb02231d9fc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 83,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2013, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nFortran Vectorization Tips\r\n• https://software.intel.com/en-us/articles/fortran\u0002array-data-and-arguments-and-vectorization\r\n• Use CONTIGUOUS Attribute for pointers and assumed \r\nshape arrays\r\n• Use –align array64byte option\r\n• Use –opt-assume-safe-padding (KNC only) wherever \r\npossible to change gathers into unit-strided loads ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/9d1f3971-6999-404b-988e-ddb02231d9fc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e949a0a90e020ba8390becbded876dc268fd17159147eb22cb4d95ffd817acc2",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "edd94818-c32f-4b2b-95c4-2f2969dc98ba",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 84,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2013, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners. 84\r\nReference Links\r\n• http://software.intel.com/en-us/articles/programming-and-compiling\u0002for-intel-many-integrated-core-architecture - MIC Compiler tips, lots \r\nof useful information for Xeon as well \r\n• http://software.intel.com/en-us/mic-developer - Intel(R) Xeon \r\nPhi(TM) page\r\n• https://software.intel.com/en-us/intel-isa-extensions - Intel ISA \r\nExtensions\r\n• https://software.intel.com/en-us/blogs/2013/avx-512-instructions -\r\nAVX-512 instructions\r\n• http://www.openmp.org/mp-documents/OpenMP4.0.0.pdf -\r\nOpenMP 4.0 Application Program Interface",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/edd94818-c32f-4b2b-95c4-2f2969dc98ba.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8762a171d0b4af9a07d05cd2d7bcb90682edb4653f034eb01e7cec7048f2486f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 264
      },
      {
        "segments": [
          {
            "segment_id": "39c6f890-5020-4085-879e-b5ee0416b341",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 85,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\nLegal Disclaimer & Optimization Notice\r\nINFORMATION IN THIS DOCUMENT IS PROVIDED “AS IS”. NO LICENSE, EXPRESS OR IMPLIED, BY ESTOPPEL OR OTHERWISE, TO \r\nANY INTELLECTUAL PROPERTY RIGHTS IS GRANTED BY THIS DOCUMENT. INTEL ASSUMES NO LIABILITY WHATSOEVER AND \r\nINTEL DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY, RELATING TO THIS INFORMATION INCLUDING LIABILITY OR \r\nWARRANTIES RELATING TO FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR INFRINGEMENT OF ANY PATENT, \r\nCOPYRIGHT OR OTHER INTELLECTUAL PROPERTY RIGHT.\r\nSoftware and workloads used in performance tests may have been optimized for performance only on Intel microprocessors. \r\nPerformance tests, such as SYSmark and MobileMark, are measured using specific computer systems, components, software, \r\noperations and functions. Any change to any of those factors may cause the results to vary. You should consult other \r\ninformation and performance tests to assist you in fully evaluating your contemplated purchases, including the performance of\r\nthat product when combined with other products. \r\nCopyright © 2014, Intel Corporation. All rights reserved. Intel, Pentium, Xeon, Xeon Phi, Core, VTune, Cilk, and the Intel logo are \r\ntrademarks of Intel Corporation in the U.S. and other countries.\r\nOptimization Notice\r\nIntel’s compilers may or may not optimize to the same degree for non-Intel microprocessors for \r\noptimizations that are not unique to Intel microprocessors. These optimizations include SSE2, SSE3, and \r\nSSSE3 instruction sets and other optimizations. Intel does not guarantee the availability, functionality, or \r\neffectiveness of any optimization on microprocessors not manufactured by Intel. Microprocessor-dependent \r\noptimizations in this product are intended for use with Intel microprocessors. Certain optimizations not \r\nspecific to Intel microarchitecture are reserved for Intel microprocessors. Please refer to the applicable \r\nproduct User and Reference Guides for more information regarding the specific instruction sets covered by \r\nthis notice.\r\nNotice revision #20110804\r\n85\r\nIntel Confidential ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/39c6f890-5020-4085-879e-b5ee0416b341.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4ed44c8635f4c769a222d023023f09d74cbcd06232d3406e5533cd2f93b9b71c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "155aa16d-9b67-494e-8e89-c649acb66049",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 86,
            "page_width": 720,
            "page_height": 540,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/155aa16d-9b67-494e-8e89-c649acb66049.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9162f52733b1a7aa9ada3cbcdb0994d14dd2e7ac1300f5993e08104c5dd78ac0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "dfdcc95d-abf3-4234-a865-b920dac45a70",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 87,
            "page_width": 720,
            "page_height": 540,
            "content": "Software & Services Group\r\nDeveloper Products Division Copyright© 2011, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n• Support for majority of OpenMP* 4.0\r\n– Cancel, cancellation point, depend, combined offload \r\nconstructs, workshare parallelization\r\n– Major item not included: user-defined reductions\r\n• Feature Complete! C++ 11\r\n– Language features only, library features dependent on the \r\nstandard C++ library with the platform \r\n• Feature Complete! Fortran 2003\r\n• Fortran 2008 Blocks\r\n• Redesign of compiler Optimization Reports \r\n– including vec-report, loop optimizations, and inlining reports\r\n• -ansi-alias option enabled as part of default level –O2 (Linux)\r\n• Initial implementation of C++ offload to Intel® Graphics \r\nTechnology\r\n• New icl/icl++ compilers on OS X for improved compatibility \r\nwith clang/LLVM\r\n15.0 Key Features: Big Items\r\n87",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/dfdcc95d-abf3-4234-a865-b920dac45a70.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c18974805429642692dd809d6e18592db34c2e9aed909febd3f313fd9abffa7c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1a3f0796-0bba-4cde-b09a-0a1b63bd5906",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 88,
            "page_width": 720,
            "page_height": 540,
            "content": "Vec/Par/Loop\r\n• Loop info embedded in ASM/OBJ with –g/-Zi\r\n– Embedded information is a subset of the output \r\navailable from the text report\r\n– Executable size increased slightly (~2%)\r\n5/13/2015 88",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/1a3f0796-0bba-4cde-b09a-0a1b63bd5906.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5829992cbfedb86a2e22e92abf1e3cf1e821a6c38be2ab349413281715cf86e0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 470
      },
      {
        "segments": [
          {
            "segment_id": "d3da9172-e36d-4022-b5bc-2f9467bd137d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 89,
            "page_width": 720,
            "page_height": 540,
            "content": "Amber loop on KNC example\r\n• Vectorized with \r\nvector length 8\r\n• Code generated \r\nwithout opt: 3 \r\ngather-loops load \r\n3*64 bytes of \r\nadjacent data\r\nIntel Confidential\r\nfor (int i = 0; i < size; ++i) {\r\nfor (int j = i + 1; j < size; ++j) {\r\nxij = xi - data[3 * j];\r\nyij = yi - data[3 * j + 1];\r\nzij = zi - data[3 * j + 2];\r\n..L50:\r\nvgatherdpd 32+data(%rbx,%zmm1,8), %zmm3{%k2}\r\njkzd ..L49, %k2\r\nvgatherdpd 32+data(%rbx,%zmm1,8), %zmm3{%k2}\r\njknzd ..L50, %k2\r\n..L49:\r\n..L52:\r\nvgatherdpd 24+data(%rbx,%zmm1,8), %zmm2{%k1}\r\njkzd ..L51, %k1\r\nvgatherdpd 24+data(%rbx,%zmm1,8), %zmm2{%k1}\r\njknzd ..L52, %k1\r\n..L51:\r\n..L54:\r\nvgatherdpd 40+data(%rbx,%zmm1,8), %zmm7{%k3}\r\njkzd ..L53, %k3\r\nvgatherdpd 40+data(%rbx,%zmm1,8), %zmm7{%k3}\r\njknzd ..L54, %k3\r\n..L53:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/d3da9172-e36d-4022-b5bc-2f9467bd137d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d130d00275a799bfe5975f41d325d81bd1f4a963dde9e8f2e0c06a384f7ddd95",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "5aa9584c-96f6-4873-9f4b-09ea19b0babf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 90,
            "page_width": 720,
            "page_height": 540,
            "content": "Optimized KNC Sequence: Data Load\r\n• Start address is \r\nnot aligned\r\n• A pair of \r\nloadunpacks is \r\nrequired for each \r\n64-byte chunk \r\nload\r\nvloadunpacklpd 24+data(,%r15,8), %zmm9 \r\nvloadunpacklpd 88+data(,%r15,8), %zmm12 \r\nvloadunpacklpd 152+data(,%r15,8), %zmm8 \r\nvloadunpackhpd 88+data(,%r15,8), %zmm9 \r\nvloadunpackhpd 152+data(,%r15,8), %zmm12 \r\nvloadunpackhpd 216+data(,%r15,8), %zmm8\r\nfor (int i = 0; i < size; ++i) {\r\nfor (int j = i + 1; j < size; ++j) {\r\nxij = xi - data[3 * j];\r\nyij = yi - data[3 * j + 1];\r\nzij = zi - data[3 * j + 2];\r\n8 7 6 5 4 3 2 1 t1\r\n16 15 14 13 12 11 10 9 t2\r\n24 23 22 21 20 19 18 17 t3",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/5aa9584c-96f6-4873-9f4b-09ea19b0babf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=034310addaa7a3fa1f22e2322ae0702f16dfc3c055d2de9f67659dd6118f5fee",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b100b7a8-19f5-49fb-9172-9713226bea69",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 91,
            "page_width": 720,
            "page_height": 540,
            "content": "Full KNC sequence: Summary\r\n• 3 pairs of loadunpacklpd/loadunpackhpd\r\n• 6 cross-lane permutations\r\n• 5 blends\r\n• 2 in-lane shuffles or swizzles\r\n• From 30% to 48% speed-up on KNC B0 for size \r\nequal to 10000",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/b100b7a8-19f5-49fb-9172-9713226bea69.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=24c2026bd04310bca979c13ead047c26b63adac5e30973074c9a0e83f4f51856",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3255c819-1d8a-41fd-a179-05b39655f5b1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 92,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2012, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\n92\r\nReview Sheet (Partial) for Efficient OMP \r\nParallelization\r\n• Is the algorithm able to take advantage of all available threads?\r\n• In some cases, using OMP collapse may help – but make sure innermost loop \r\ngets efficiently vectorized after collapsing\r\n• May need stripmine loop to make sure innermost loop is not part of collapse\r\n• Reduce any use of barrier synchronization, OMP locks, critical sections\r\n• In some cases, using nowait clause may help (review example in BKM page)\r\n• Use reductions where possible\r\n• Are the OMP affinity settings right to cause no oversubscription?\r\n• Different defaults for native vs. offload\r\n• For offload, use ‘norespect’ to use all N*4 threads\r\n• If you are using <4 threads/core, use –opt-threads-per-core=n\r\n• Affinity tuning\r\n• Balanced vs. Compact vs. Scatter vs. proclist, Core vs. Fine\r\n• Try different OMP loop scheduling types – static vs. dynamic(<n>)\r\n• Have you tuned your code (to overcome load-imbalance) with \r\nKMP_BLOCKTIME=<default,0,50,infinite>\r\n• Explicit tuning of OMP_STACKSIZE?",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/3255c819-1d8a-41fd-a179-05b39655f5b1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5fda86c52091f1c714325d5df39e1bddb7cc97bd7619fe5bd083954c69711173",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 447
      },
      {
        "segments": [
          {
            "segment_id": "8eec0c11-ce09-47eb-b471-1e3ac13b1368",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 93,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\n93\r\nIntel® Compilers for Intel® Parallel Studio XE 2015\r\nIntel® C++ 15.0 and Intel® Fortran 15.0\r\nProductive language-level vectorization & parallelism models for advanced developers driving \r\napplication performance\r\n Common to both\r\n New OpenMP 4.0 vectorization simplifies taking advantage of SIMD instructions for great performance on \r\nIntel® Xeon® and Xeon Phi™ processors and coprocessors\r\n Improved compiler optimization reports help quickly identify optimization opportunities. For Windows-based \r\ndevelopers, Visual Studio* 2010, 2012 and 2013 integration is included.\r\n Linux*, OS X*, Windows*, Android*\r\n Available now in a variety of configurations to suit different development needs. C++ Info Fortran Info\r\n Intel® C++ Compiler\r\n Intel Cilk™ Plus keywords for parallelism simplify implementation of task and data parallelism\r\n Complete C++11 support\r\n Intel® Fortran Compiler\r\n Support for the latest Fortran standards\r\n Rogue Wave* IMSL* Fortran Numerical Libraries: Performance add-on for Intel® Fortran \r\nWindows suites",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/8eec0c11-ce09-47eb-b471-1e3ac13b1368.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=589f73264c0c57db2b19c1947641136026707283e476737ec8fa9a86f6a78634",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0eafcdc9-de84-418f-b21e-cf17c0d47d4e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 94,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\n94\r\nOpenMP* 4.0 Support \r\nIntel Compilers\r\n Everything now supported in Intel C++ and Fortran compilers, except user-defined \r\nreductions\r\n CANCEL directive: Requests cancellation of the innermost enclosing region\r\n CANCELLATION POINT directive: Defines a point at which implicit or explicit tasks \r\ncheck to see if cancellation has been requested\r\n DEPEND clause on TASK directive: Enforces additional constraints on the scheduling of \r\na task by enabling dependences between sibling tasks in the task region.\r\n Combined constructs (TEAMS DISTRIBUTE, etc.)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/0eafcdc9-de84-418f-b21e-cf17c0d47d4e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c6b33dd4ff044c11498e97dfdba5ed8ae5fb795762b5078c6d560dae1e4edc39",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "665258c2-1580-413a-a6cb-0be262bc79c6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 95,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\nWhat’s New\r\nIntel® C++ Compiler\r\n95\r\n Excellent outer-loop optimization \r\ncapabilities with either OpenMP* or Intel \r\nCilk™ Plus\r\n Intel® Cilk™ Plus : explicit vectorization. \r\nKeyword versions of SIMD pragmas \r\nadded: _Simd, _Safelen, _Reduction\r\n Near complete OpenMP* 4.0, including \r\nTASK dependency to speed performance \r\nby enforcing task scheduling\r\n Easier to use, more insightful \r\noptimization reports, including \r\nvectorization, all consolidated under -\r\nqopt-report\r\n Full C++11 language support \r\n Gcc*-compatible function \r\nmultiversioning\r\n Compiler details\r\n -ansi-alias enabled by default at –O2 and \r\nabove on Linux* C++ to enable better \r\nperformance, including vectorization \r\n(matches –fstrict-aliasing defaults on gcc*)\r\n Compiler option –no-opt-dynamic-align to \r\ndisable generation of multiple code paths \r\ndepending on data alignment \r\n aligned_new header\r\n -fast/-Ofast enables –fp-model fast=2\r\n Improved lambda function debugging",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/665258c2-1580-413a-a6cb-0be262bc79c6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=37bf3654c3f1823199398f3ebe7ef9785a91aea11a3dddee2bf01bb7d6a680e7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 421
      },
      {
        "segments": [
          {
            "segment_id": "ad83df36-4ff8-4570-95c4-678e2e95f34b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 96,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\n96\r\nGNU Compatibility \r\nIntel® C++ Compiler\r\n To enable c++11 support you need to use \r\n–std=c++11 (or –std=c++0x) option\r\n We currently support all c++11 features used in the GNU 4.8 versions of the headers \r\nenabled when you use the option\r\n Depending upon the GNU on your system (i.e. g++ in your PATH) you may get different \r\nfeatures enabled\r\n Support of C++11 features requires support from C++ header files included with GNU \r\nC/C++ installation – these features vary by version. \r\n Recommend use of GNU 4.8 or newer packages",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/ad83df36-4ff8-4570-95c4-678e2e95f34b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e312c62e2ec16914ef702ba5147a53dfcbc7a38c596e412a5a903f20f5f768f3",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "05b01a79-053e-47f8-b177-ddeefbdc6695",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 97,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\nEasier Task & Data Parallelism with Intel® Cilk™ Plus \r\n(Intel® C++ Compiler)\r\n97\r\n Easier task & data parallelism with three \r\nsimple keywords :\r\n Cilk_for, Cilk_spawn, Cilk_sync\r\n Save time in implementing vectorization. \r\nUse Intel® Cilk™ Plus Array Notation and \r\n#pragma SIMD\r\nCode snippet before #pragma SIMD\r\nfor(int i = 2; i < n ;i++)\r\ny[i] = y[i-2] + 1;\r\nCode snippet with #pragma SIMD \r\n#pragma simd vectorlength(2)\r\nfor(int i = 2; i < n ;i++)\r\ny[i] = y[i-2] + 1;\r\nSerial code (left) made parallel with Intel® Cilk™ Plus \r\nkeywords. \r\nNo changes to original code. \r\nint fib (int n)\r\n{\r\nif (n <= 2)\r\nreturn n;\r\nelse {\r\nint x,y;\r\nx = \r\nfib(n-1);\r\ny = \r\nfib(n-2);\r\nreturn \r\nx+y;\r\n}\r\n}\r\nint fib (int n)\r\n{\r\nif (n <= 2)\r\nreturn n;\r\nelse {\r\nint x,y;\r\nx = _Cilk_spawn fib(n\u00021);\r\ny = fib(n-2);\r\n_Cilk_sync;\r\nreturn x+y;\r\n}\r\n}\r\nArray notation showing simple vector \r\nmultiplication\r\nA[0:N] = b[0:N] * c[0:N];\r\nMore sophisticated example of array \r\nnotation\r\nX[0:10:10] = sin(y[20:10:2]);",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/05b01a79-053e-47f8-b177-ddeefbdc6695.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=19c84cd9b7c1b8e8042ad06eeaf5bf8b174c7a57f581d4bc1383d937fab9aedd",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 304
      },
      {
        "segments": [
          {
            "segment_id": "51e82624-2137-4989-9bfd-07033a7b53ba",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 98,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\n98\r\nIntel® Cilk™ Plus and OpenMP* 4.0 Differences\r\nIntel® C++ Compiler\r\nIntel® Cilk™ Plus OpenMP* 4.0\r\nArray Notations Support No Array Notations support\r\nSupport for User implemented vector function using \r\n_declspec(vector_variant)implement)...)))\r\nThis feature enables the users to implement the vector variant of the SIMD enabled \r\nfunction if they aren’t happy with the vector code generated by the compiler.\r\nNo Support for User implemented \r\nvector functions.\r\n#pragma simd has firstprivate(), vecremainder and assert clauses which “omp simd” \r\ndoesn’t support. Can mimic the behavior of aligned() clause in OMP4.0 with \r\n__assume_aligned() or __builtin_assume_aligned() \r\n“omp simd” has collapse() and \r\naligned() clauses which is not \r\nsupported by #pragma simd\r\n_Simd keyword support for explicit vectorization apart from #pragma simd.\r\nThis keyword support was enabled for enabling threading and vectorization for a \r\nsingle “for” loop which OpenMP4.0 could do with the following:\r\n#pragma omp parallel for simd\r\nNo _Simd keyword support for explicit \r\nvectorization.\r\nSupport for __intel_simd_lane() to identify the simd lane on which the current \r\noperation is happening.\r\nNo support for identifying the \r\nindividual simd lane.\r\nSupports built-in reduction operations like __sec_reduce_add(), \r\n__sec_reduce_max_ind(), __sec_reduce_mul(), __sec_reduce_min_ind(), \r\n__sec_reduce_all_zero(), __sec_reduce_all_nonzero(), __sec_reduce_min(), \r\n__sec_reduce_max(), __sec_reduce_and(), __sec_reduce_or(), __sec_reduce_xor()\r\nNo support for built-in reducer \r\noperations.\r\nSupports writing custom reduction functions using:\r\n__sec_reduce() and __sec_reduce_mutating()\r\nNo Support for custom reduction \r\nfunctions.\r\nSupport for Array implicit index using __sec_implicit_index() No support for Array Implicit index.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/51e82624-2137-4989-9bfd-07033a7b53ba.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e476039345daf1ae11e825ff8b9c31b39bae273da60a38650d12cd127c9d9d3e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1a2b7caa-268f-4aac-97d5-a46cad22ee46",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 99,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\nWhat’s New\r\nIntel® Fortran Compiler\r\n99\r\n Improvements in both automatic and \r\nexplicit (using Intel or OpenMP \r\ndirectives) vectorization, especially in \r\nouter loop vectorization. Provides \r\nimproved robustness and performance.\r\n Full Fortran 2003 support including \r\nParameterized Derived Types\r\n Intel® Fortran supports Fortran 2008 \r\nBlocks and much more from Fortran \r\n2008\r\n Near complete OpenMP* 4.0, including \r\ntask dependencies. What’s left? User\u0002defined reductions.\r\n Compiler option –no-opt-dynamic-align \r\nto ensure run-to-run reproducibility with \r\nrelatively little impact on performance \r\n(compared to –fp-model precise)\r\n Fortran option –init=snan to initialize all \r\nuninitialized SAVEd scalar and array \r\nvariables of type REAL and COMPLEX to \r\nsignaling NaNs\r\n __intel_simd_lane() intrinsic to represent \r\nsimd lane number in a SIMD vector \r\nfunction callable from Fortran using the \r\ninteroperability feature\r\n Support offload of arrays of pointers and \r\nnon-contiguous array slices ( to Intel® \r\nXeon Phi™ coprocessors)\r\n gdb* debugger supports Intel Fortran \r\n(Intel® Debugger removed)\r\n -fast/-Ofast enables –fp-model fast=2\r\n Fastmem support for KNL MCDRAM",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/1a2b7caa-268f-4aac-97d5-a46cad22ee46.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=324d5cade09913f439547ce6a87093942d3db9c4fe2924267f0b9deb1299bfee",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 425
      },
      {
        "segments": [
          {
            "segment_id": "efc8dea1-b260-40d6-bbed-54d6ccf3dd3d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 100,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\n100\r\nFortran OpenMP* Support: WORKSHARE\r\nIntel® Fortran Compiler\r\n Can go parallel in many uses \r\n Simple array assignments such as A = B + C parallelize.\r\n Simple array assignments with overlap such as A = A + B + C parallelize.\r\n Array assignments with user-defined function calls parallelize such as A = A + F (B). \r\nF must be ELEMENTAL.\r\n Array assignments with array slices on the right hand side of the assignment such as A \r\n= A + B(1:4) + C(1:4) parallelize. If the lower bound of the left hand side or the array \r\nslice lower bound or the array slice stride on the right hand side is not 1, then the \r\nstatement does not parallelize.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/efc8dea1-b260-40d6-bbed-54d6ccf3dd3d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=24c578a1469c9002f4cae761e5ea6a54fb5897e5028b3a97cc86329f7722ee75",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0f4228e9-e808-47d2-9c5f-a40f6b565e32",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 101,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\nIntel® Fortran Compiler BLOCK Examples\r\n101\r\nBLOCK Example\r\nIF (swapxy) THEN\r\nBLOCK\r\nREAL(KIND(x)) tmp\r\ntmp = x\r\nx = y\r\ny = tmp\r\nEND BLOCK\r\nEND IF\r\nF08: DO CONCURRENT with BLOCK\r\nDO CONCURRENT (I = 1:N)\r\nBLOCK\r\nREAL T\r\nT = A(I) + B(I)\r\nC(I) = T + SQRT(T)\r\nEND BLOCK\r\nEND DO\r\nWithout BLOCK, no way to create an iteration\u0002local (threadprivate) temporary variable",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/0f4228e9-e808-47d2-9c5f-a40f6b565e32.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f98b31fe893ffa0848b7c7e5633dbb3260133560d260788778c652895609121c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "749c6d3f-425b-4536-aa06-5d83fb8d20dd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 102,
            "page_width": 720,
            "page_height": 540,
            "content": "Vectorizer Architecture\r\n5/13/2015 102\r\nInput: C/C++/FORTRAN source code\r\nVectorizer\r\nIntel® SSE Intel® AVX Intel® MIC \r\nExpress/expose vector parallelism\r\nArray Notation\r\nSIMD pragma\r\nVectorization Hints\r\n(ivdep/vector pragmas)\r\nFully Automatic\r\nAnalysis\r\nElemental Function\r\nMap vector\r\nparallelism\r\nto vector ISA\r\nOptimize and Code Gen\r\nVector part ofIntel® Cilk™Plus extension\r\nVectorizer makes \r\nretargeting easy!",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/749c6d3f-425b-4536-aa06-5d83fb8d20dd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9b72d1daf7cf1815858133454e050a631d6b5ea7513146a8ad9f21c972532dce",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "2a4a0801-66c7-4989-b49e-fc6db9ca9a69",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 103,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\n103\r\nImproved Vectorization\r\nIntel Compilers\r\n Guaranteed vectorization for entire SIMD loop and SIMD-enabled function while \r\nisolating offending code \r\n Apply partial vectorization escape\r\n Serialize execution of offending code section (usually small portion)\r\n Works at both statement and expression level\r\n Currently enabled for SIMD loops and SIMD-enabled (vector) functions\r\n Significantly reduced SIMD vectorization bail-outs due to cryptic reasons, e.g. \r\n“statement cannot be vectorized”, “operation cannot be vectorized”, “unsupported data \r\ntype”, etc. \r\n Customers more satisfied with smaller number of SIMD vectorization bail-outs",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/2a4a0801-66c7-4989-b49e-fc6db9ca9a69.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=61b5a2c9dd8bb9368ff27f4ce44146797f9b9735fab950b748a8b6fe80140982",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 388
      },
      {
        "segments": [
          {
            "segment_id": "bdb1623d-cd53-4a01-88ae-6afb9b05bae6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 104,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\n5/13/2015\r\n104\r\nCilk Plus Improvements & OpenMP 4.0 SIMD Support\r\nOpenMP 4.0 syntax support\r\n For both loops and functions\r\n Stricter syntax checking\r\n Alignment specification supported\r\n Safelen semantics\r\nNew public ABI support for vector \r\nfunctions\r\nSupport for private/lastprivate\r\narrays and structs\r\n SOA re-layout for non-escaping \r\nlocal private structs and arrays\r\nVL agreement rules for caller and callee relaxed\r\n Longer VL caller may call shorter VL callee [multiple calls emitted]\r\n#pragma omp simd aligned(a,c)\r\nfor (int i; i <N; i++) {\r\na[i] = b[i]*c[i]; \r\n}\r\n#pragma simd\r\nfor (int i; i <N; i++) {\r\nfloat3 q; // SIMD private\r\nq.f1 = a[i] + b[i]; \r\nq.f2 = a[i] - b[i]; \r\n}\r\n• q.f1 is unit-stride \r\naccess, not stride 3*unit\r\n• Same done for local \r\narrays ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/bdb1623d-cd53-4a01-88ae-6afb9b05bae6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fdbd87fa0e3efd8b4bc3225892b5ad1222daf4d32d033ac39db914c5dac0609e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f7c55cb8-2e9a-4b93-8509-4ab53c3b3a7e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 105,
            "page_width": 720,
            "page_height": 540,
            "content": "Updates to MIC Vectorization\r\n• Support for compress/expand \r\nidiom\r\n– Using packstore/loadunpack\r\non KNC\r\n– Using vcompress/vexpand on KNL\r\n• Improvements to remainder and low trip count \r\nmasked vectorization\r\n– Non-masked code path for full mask (if needed)\r\n– -opt-assume-safe-padding option on KNC to mitigate \r\nvector load using gather issue\r\n• Masks handling improvements\r\n• Optimized math functions with controllable precision\r\n5/13/2015 105\r\nfor (int i; i <N; i++) {\r\nif (a[i] > 0) {\r\nb[j++] = a[i]; // \r\ncompress\r\nc[i] = a[k++]; // expand\r\n}\r\n}\r\n• Cross-iteration dependencies\r\nby j and k",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/f7c55cb8-2e9a-4b93-8509-4ab53c3b3a7e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=90a5126fdbfa362702f85a96fd9243fb075e2ddff5da2a3ff8b0b58ae568ea7f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "dec59a2d-706a-45d2-8117-fb26a3a38ceb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 106,
            "page_width": 720,
            "page_height": 540,
            "content": "Software & Services Group\r\nDeveloper Products Division Copyright© 2011, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nReference Links - 2\r\n• http://software.intel.com/en-us/intro-to-vectorization-using-intel-cilk\u0002plus - Cilk Plus webinar\r\n• http://software.intel.com/en-us/code-samples/intel-c-compiler/ - Intel \r\nC++ Compiler code samples\r\n• http://software.intel.com/en-us/articles/getting-started-with-intel\u0002cilk-plus-array-notations/#! – Intel® Cilk™ Plus Array Notation\r\n• http://software.intel.com/en-us/articles/intelr-cilktm-plus-white\u0002paper#! – Intel® Cilk™ Plus White Paper\r\n• http://software.intel.com/en-us/articles/implementing-sepia-filters\u0002with-intelr-cilktm-plus#! – Improving Sepia filter performance with \r\nIntel® Cilk™ Plus\r\n• http://software.intel.com/en-us/articles/improving-averaging-filter\u0002performance-using-intel-cilk-plus#! – Improving Averaging filter \r\nperformance with Intel® Cilk™ Plus\r\n106",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/dec59a2d-706a-45d2-8117-fb26a3a38ceb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5ac4927624dc0df0f14ca5755c2c0704afea8208b654518900a3aa32112fced3",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "45741359-564b-4eaa-8e21-7c90b15ab45c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 107,
            "page_width": 720,
            "page_height": 540,
            "content": "Software & Services Group\r\nDeveloper Products Division Copyright© 2011, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nReference Links - 3\r\n• http://software.intel.com/en-us/articles/improving-discrete\u0002cosine-transform-performance-using-intelr-cilktm-plus#! –\r\nImproving DCT kernel performance using Intel® Cilk™ Plus\r\n• http://software.intel.com/en-us/articles/call-site-dependence\u0002for-elemental-functions-simd-enabled-functions-in-c#! –\r\nSIMD-enabled functions explained (call site dependence)\r\n• http://software.intel.com/en-us/articles/usage-of-linear-and\u0002uniform-clause-in-elemental-function-simd-enabled-function\u0002clause#! – SIMD-enabled functions with clauses explained\r\n• http://software.intel.com/en-us/blogs/2013/06/07/resources\u0002about-intel-transactional-synchronization-extensions - Intel(R) \r\nTSX\r\n107",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/45741359-564b-4eaa-8e21-7c90b15ab45c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=025bbb03e510e3d87dc87a5d6c3a1d025b5374db4020f75c2da707f535c6ff54",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f7379e5c-4c14-48fa-b7d7-2f315a142188",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 108,
            "page_width": 720,
            "page_height": 540,
            "content": "Software & Services Group\r\nDeveloper Products Division Copyright© 2011, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nReference Links - 4\r\n• http://halobates.de/adding-lock-elision-to-linux.pdf - Intel(R) \r\nTSX presentation by Andi Kleen\r\n• http://software.intel.com/en-us/intel-isa-extensions - Intel(R) \r\nMPX page\r\n• http://software.intel.com/en-us/c-compiler-android - Intel C++ \r\nCompiler for Android \r\n• http://software.intel.com/en-us/articles/intel-compilers-for\u0002linux-compatibility-with-gnu-compilers-0 - GNU Compiler \r\nCompatibility\r\n108",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/f7379e5c-4c14-48fa-b7d7-2f315a142188.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d04cd0dd041daa0f3893e2b2b125957e45f82b4295fe92ff1ad23a4c3779165a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 448
      },
      {
        "segments": [
          {
            "segment_id": "89f66ea4-8002-43f9-9dfc-cc127760cb8c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 109,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\nCompiler Based Vectorization\r\nExtension Specification\r\nFeature SIMD \r\nExtension\r\nIntel® Streaming SIMD Extensions 2 (Intel® SSE2) as available in initial Pentium®\r\n4 or compatible non-Intel processors\r\nsse2\r\nIntel® Streaming SIMD Extensions 3 (Intel® SSE3) as available in Pentium® 4 or \r\ncompatible non-Intel processors\r\nsse3\r\nSupplemental Streaming SIMD Extensions 3 (SSSE3) as available in Intel® Core™2 \r\nDuo processors\r\nssse3\r\nIntel® SSE4.1 as first introduced in Intel® 45nm Hi-K next generation Intel Core™ \r\nmicro-architecture \r\nsse4.1\r\nIntel® SSE4.2 Accelerated String and Text Processing instructions supported first \r\nby Intel® Core™ i7 processors \r\nsse4.2\r\nLike ssse3 but optimizes for the Intel® Atom™ processor and Intel® Centrino® \r\nAtom™ Processor Technology\r\nssse3_atom\r\nIntel® Advanced Vector Extensions (Intel® AVX) as available in 2nd generation \r\nIntel® Core™ processor family\r\navx\r\nIntel® Advanced Vector Extension (Intel® AVX) including instructions offered by \r\nthe 3rd generation Intel® Core processor\r\ncore-avx-I\r\nIntel® Advanced Vector Extension 2 (Intel® AVX2) as provided by a 4th Generation \r\nIntel® Core Processors and above\r\ncore-avx2",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/89f66ea4-8002-43f9-9dfc-cc127760cb8c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5acfa420631df390ec437da09f96f42dbb81253eac83ec81181d112ac0b348e8",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "be3ddb91-188f-4193-9e49-cb755aab08fb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 110,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2013, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nLoops with Lots of Memory Accesses \r\n• In some cases, you can do careful allocation of arrays or choose the \r\nextents to add some padding to reduce associativity issues:\r\n• If you have a loop access of the form:\r\n# define FD_REPEAT(x,idx,coeff) +coeff[0] * x##_4[(idx)] \\\r\n+coeff[1] * (x##_3[(idx)] + x##_5[(idx)]) \\\r\n+coeff[2] * (x##_2[(idx)] + x##_6[(idx)]) \\\r\n+coeff[3] * (x##_1[(idx)] + x##_7[(idx)]) \\\r\n+coeff[4] * (x##_0[(idx)] + x##_8[(idx)])\r\nfor (j=0; j<STREAM_ARRAY_SIZE; j++)\r\na[j] = scalar*c[j]\r\nFD_REPEAT(b_ext,j,vscalar);",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/be3ddb91-188f-4193-9e49-cb755aab08fb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5177bb7fc552b1390fd883f7a73565f573b87bc4b6f49edcabb8cca2296ca10c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "5bb960f1-e1d2-4e82-86ee-3a938ee8154c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 111,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2013, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nLoops with Lots of Memory Accesses-2\r\nAnd the data allocation was done as follows:\r\na = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nc = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb_ext_0 = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb_ext_1 = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb_ext_2 = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb_ext_3 = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb_ext_4 = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb_ext_5 = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb_ext_6 = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb_ext_7 = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb_ext_8 = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/5bb960f1-e1d2-4e82-86ee-3a938ee8154c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6feb5979860ff639ec6850042ab67d847bdb889144e5b83b67e1d4f85555cc9f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 389
      },
      {
        "segments": [
          {
            "segment_id": "4169886c-1788-4bcd-ba34-4eec867b8e73",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 112,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright© 2013, Intel Corporation. All rights reserved. \r\n*Other brands and names are the property of their respective owners.\r\nLoops with Lots of Memory Accesses-2\r\nTry this instead:\r\na = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nc = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb_ext_0 = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\n// Shift the start-point of b_ext_* to reduce set-associativity problems.\r\n// Make sure added value is a multiple of 16 (to keep the 64-byte alignment for base-ptr\r\nb_ext_0 = b_ext_0 + 16;\r\nb_ext_1 = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb_ext_1 = b_ext_1 + 16;\r\nb_ext_2 = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb_ext_2 = b_ext_2 + 32;\r\nb_ext_3 = _mm_malloc( (STREAM_ARRAY_SIZE) * sizeof(STREAM_TYPE), 64);\r\nb_ext_3 = b_ext_3 + 32;\r\n…",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/4169886c-1788-4bcd-ba34-4eec867b8e73.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c37e6f45c4aee7d83d730b790330218ab6c65b546e4d100fb7229d8e84be0d96",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 124
      },
      {
        "segments": [
          {
            "segment_id": "1e29a8a8-54e2-452a-b6d1-030115a2470c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 113,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\nImpressive Performance Improvement\r\nIntel® Compiler OpenMP* 4.0 Explicit Vectorization\r\n113\r\n Two lines added that take full advantage of \r\nboth SSE or AVX\r\n Pragmas ignored by other compilers so code is \r\nportable\r\ntypedef float complex fcomplex;\r\nconst uint32_t max_iter = 3000;\r\n#pragma omp declare simd uniform(max_iter), simdlen(16)\r\nuint32_t mandel(fcomplex c, uint32_t max_iter)\r\n{\r\nuint32_t count = 1; fcomplex z = c;\r\nwhile ((cabsf(z) < 2.0f) && (count < max_iter)) {\r\nz = z * z + c; count++;\r\n}\r\nreturn count;\r\n}\r\nuint32_t count[ImageWidth][ImageHeight];\r\n…… …. ……. \r\nfor (int32_t y = 0; y < ImageHeight; ++y) {\r\nfloat c_im = max_imag - y * imag_factor;\r\n#pragma omp simd safelen(16)\r\nfor (int32_t x = 0; x < ImageWidth; ++x) {\r\nfcomplex in_vals_tmp = (min_real + x * real_factor) + \r\n(c_im * 1.0iF);\r\ncount[y][x] = mandel(in_vals_tmp, max_iter);\r\n}\r\n}\r\n1.00 \r\n2.28 \r\n5.29 \r\n0.0\r\n1.0\r\n2.0\r\n3.0\r\n4.0\r\n5.0\r\n6.0\r\nSerial SSE 4.2 AVX2\r\nSpeedup\r\nMandelbrot calculation speedup\r\n(higher is better)\r\nConfiguration: Intel® Xeon® CPU E3-1270 v3 @ 3.50 GHz system (4 cores with Hyper-Threading On), running at 3.50GHz, with 32.0GB RAM, L1 Cache 256KB, L2 \r\nCache 1.0MB, L3 Cache 8.0MB, 64-bit Windows* Server 2012 R2 Datacenter. Compiler options:, SSE4.2: -O3 –Qipo –QxSSE4.2 or AVX2: -O3 –Qipo –QxCORE-AVX2. \r\nSoftware and workloads used in performance tests may have been optimized for performance only on Intel microprocessors. Performance tests, such as SYSmark\r\nand MobileMark, are measured using specific computer systems, components, software, operations and functions. Any change to any of those factors may cause the \r\nresults to vary. You should consult other information and performance tests to assist you in fully evaluating your contemplated purchases, including the \r\nperformance of that product when combined with other products. * Other brands and names are the property of their respective owners. Benchmark Source: Intel \r\nCorporation\r\nOptimization Notice: Intel’s compilers may or may not optimize to the same degree for non-Intel microprocessors for optimizations that are not \r\nunique to Intel microprocessors. These optimizations include SSE2, SSE3, and SSSE3 instruction sets and other optimizations. Intel does not \r\nguarantee the availability, functionality, or effectiveness of any optimization on microprocessors not manufactured by Intel. Microprocessor\u0002dependent optimizations in this product are intended for use with Intel microprocessors. Certain optimizations not specific to Intel \r\nmicroarchitecture are reserved for Intel microprocessors. Please refer to the applicable product User and Reference Guides for more information \r\nregarding the specific instruction sets covered by this notice. Notice revision #20110804 . \r\nNormalized performance data – higher is better",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/1e29a8a8-54e2-452a-b6d1-030115a2470c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=00315e762d385c3d0d1ab054468e7af0a8c5921366cbc6ac5ba6908b256d6e59",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 432
      },
      {
        "segments": [
          {
            "segment_id": "0c6524b7-ccd3-444d-a8d9-b36876b0ab26",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 114,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\nImpressive Performance Improvement \r\nIntel® Compiler OpenMP* 4.0 Explicit Vectorization\r\n114\r\n Three lines added that take full advantage of \r\nboth SSE or AVX\r\n Pragma’s ignored by other compilers so code \r\nis portable\r\n#pragma omp declare simd linear(z:40) uniform(L, N, Nmat) linear(k)\r\nfloat path_calc(float *z, float L[][VLEN], int k, int N, int Nmat)\r\n#pragma omp declare simd uniform(L, N, Nopt, Nmat) linear(k)\r\nfloat portfolio(float L[][VLEN], int k, int N, int Nopt, int Nmat)\r\n… … … \r\nfor (path=0; path<NPATH; path+=VLEN) {\r\n/* Initialise forward rates */\r\nz = z0 + path * Nmat;\r\n#pragma omp simd linear(z:Nmat)\r\nfor(int k=0; k < VLEN; k++) {\r\nfor(i=0;i<N;i++) {\r\nL[i][k] = L0[i];\r\n}\r\n/* LIBOR path calculation */\r\nfloat temp = path_calc(z, L, k, N, Nmat);\r\nv[k+path] = portfolio(L, k, N, Nopt, Nmat);\r\n/* move pointer to start of next block */\r\nz += Nmat;\r\n}\r\n}\r\n1.00 \r\n2.73 \r\n4.09 \r\n0.0\r\n1.0\r\n2.0\r\n3.0\r\n4.0\r\nSerial SSE 4.2 AVX2\r\nSpeedup\r\nLibor calculation speedup\r\n(higher is better)\r\nConfiguration: Intel® Xeon® CPU E3-1270 v3 @ 3.50 GHz system (4 cores with Hyper-Threading On), running at 3.50GHz, with 32.0GB RAM, L1 Cache 256KB, L2 \r\nCache 1.0MB, L3 Cache 8.0MB, 64-bit Windows* Server 2012 R2 Datacenter. Compiler options:, SSE4.2: -O3 –Qipo –QxSSE4.2 or AVX2: -O3 –Qipo –QxCORE-AVX2. \r\nFor more information go to http://www.intel.com/performance \r\nSoftware and workloads used in performance tests may have been optimized for performance only on Intel microprocessors. Performance tests, such as SYSmark\r\nand MobileMark, are measured using specific computer systems, components, software, operations and functions. Any change to any of those factors may cause the \r\nresults to vary. You should consult other information and performance tests to assist you in fully evaluating your contemplated purchases, including the \r\nperformance of that product when combined with other products. * Other brands and names are the property of their respective owners. Benchmark Source: Intel \r\nCorporation\r\nOptimization Notice: Intel’s compilers may or may not optimize to the same degree for non-Intel microprocessors for optimizations that are not \r\nunique to Intel microprocessors. These optimizations include SSE2, SSE3, and SSSE3 instruction sets and other optimizations. Intel does not \r\nguarantee the availability, functionality, or effectiveness of any optimization on microprocessors not manufactured by Intel. Microprocessor\u0002dependent optimizations in this product are intended for use with Intel microprocessors. Certain optimizations not specific to Intel \r\nmicroarchitecture are reserved for Intel microprocessors. Please refer to the applicable product User and Reference Guides for more information \r\nregarding the specific instruction sets covered by this notice. Notice revision #20110804 . \r\nNormalized performance data – higher is better",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/0c6524b7-ccd3-444d-a8d9-b36876b0ab26.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4ff46cbc191447ea14945ad42214e9acc970f97e8f4c82bb3f895233c4d9f6b0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 442
      },
      {
        "segments": [
          {
            "segment_id": "7844dab6-c717-49cc-b568-5e8d037b0ed2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 115,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\nImpressive Performance Improvement \r\nIntel C++ Explicit Vectorization: SIMD Performance\r\n115\r\n One line added that take full advantage of \r\nboth SSE or AVX\r\n Pragma’s ignored by other compilers so code \r\nis portable\r\n#pragma simd vectorlength(8)\r\nfor (int x = x0; x < x1; ++x) {\r\nfloat div = coef[0] * A_cur[x]\r\n+ coef[1] * ((A_cur[x + 1] + A_cur[x - 1])\r\n+ (A_cur[x + Nx] + A_cur[x - Nx])\r\n+ (A_cur[x + Nxy] + A_cur[x - Nxy]))\r\n+ coef[2] * ((A_cur[x + 2] + A_cur[x - 2])\r\n+ (A_cur[x + sx2] + A_cur[x - sx2])\r\n+ (A_cur[x + sxy2] + A_cur[x - sxy2]))\r\n+ coef[3] * ((A_cur[x + 3] + A_cur[x - 3])\r\n+ (A_cur[x + sx3] + A_cur[x - sx3])\r\n+ (A_cur[x + sxy3] + A_cur[x - sxy3]))\r\n+ coef[4] * ((A_cur[x + 4] + A_cur[x - 4])\r\n+ (A_cur[x + sx4] + A_cur[x - sx4])\r\n+ (A_cur[x + sxy4] + A_cur[x - sxy4]));\r\nA_next[x] = 2 * A_cur[x] - A_next[x] + vsq[s+x] * div;\r\n}\r\n1.00 \r\n3.92 \r\n6.67 \r\n0\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\nSerial SSE 4.2 AVX2\r\nSpeedup\r\nRTM-Stencil Speedup\r\n(higher is better)\r\nConfiguration: Intel® Xeon® CPU E3-1270 v3 @ 3.50 GHz system (4 cores with Hyper-Threading On), running at 3.50GHz, with 32.0GB RAM, L1 Cache 256KB, L2 \r\nCache 1.0MB, L3 Cache 8.0MB, 64-bit Windows* Server 2012 R2 Datacenter. Compiler options:, SSE4.2: -O3 –Qipo –QxSSE4.2 or AVX2: -O3 –Qipo –QxCORE-AVX2. \r\nFor more information go to http://www.intel.com/performance \r\nSoftware and workloads used in performance tests may have been optimized for performance only on Intel microprocessors. Performance tests, such as SYSmark\r\nand MobileMark, are measured using specific computer systems, components, software, operations and functions. Any change to any of those factors may cause the \r\nresults to vary. You should consult other information and performance tests to assist you in fully evaluating your contemplated purchases, including the \r\nperformance of that product when combined with other products. * Other brands and names are the property of their respective owners. Benchmark Source: Intel \r\nCorporation\r\nOptimization Notice: Intel’s compilers may or may not optimize to the same degree for non-Intel microprocessors for optimizations that are not \r\nunique to Intel microprocessors. These optimizations include SSE2, SSE3, and SSSE3 instruction sets and other optimizations. Intel does not \r\nguarantee the availability, functionality, or effectiveness of any optimization on microprocessors not manufactured by Intel. Microprocessor\u0002dependent optimizations in this product are intended for use with Intel microprocessors. Certain optimizations not specific to Intel \r\nmicroarchitecture are reserved for Intel microprocessors. Please refer to the applicable product User and Reference Guides for more information \r\nregarding the specific instruction sets covered by this notice. Notice revision #20110804 . \r\nNormalized performance data – higher is better",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/7844dab6-c717-49cc-b568-5e8d037b0ed2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=adfaa6bfb67839c95c8cd8295e2b31a5dbc5c3cf56ba28e28a6f02cbdc0956de",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 468
      },
      {
        "segments": [
          {
            "segment_id": "96192ba6-a81e-48a6-a74e-6444af286394",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 116,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2014, Intel Corporation. All rights reserved. *Other names and brands may be claimed as the property of others. Optimization Notice\r\nImpressive performance improvement\r\nIntel C++ Explicit Vectorization using OpenMP* 4.0 SIMD or Intel® Cilk™ Plus\r\n116\r\n1.00 1.00 1.00 1.00 1.00 1.00 1.00 \r\n2.91 2.99 2.97 \r\n2.28 \r\n2.73 \r\n3.92 \r\n2.93 \r\n6.11 \r\n4.75 \r\n5.92 \r\n5.29 \r\n4.10 \r\n6.67 \r\n5.40 \r\n0\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\nAoBench Collision Detection Grassshader Mandelbrot Libor RTM-Stencil Geo Mean\r\nSpeedup\r\nSIMD Speedup on Intel® Xeon® Processor\r\n(Higher is better)\r\nSerial SSE 4.2 AVX2\r\nConfiguration: Intel® Xeon® CPU E3-1270 v3 @ 3.50 GHz system (4 cores with Hyper-Threading On), running at 3.50GHz, with 32.0GB RAM, L1 Cache 256KB, L2 Cache 1.0MB, L3 Cache 8.0MB, 64-bit Windows* Server 2012 R2 Datacenter. Compiler options:, SSE4.2: -O3 –Qipo –QxSSE4.2 or AVX2: -O3 –Qipo –QxCORE-AVX2. For more \r\ninformation go to http://www.intel.com/performance \r\nSoftware and workloads used in performance tests may have been optimized for performance only on Intel microprocessors. Performance tests, such as SYSmark and MobileMark, are measured using specific computer systems, components, software, operations and functions. Any change to any of those factors may cause the results to \r\nvary. You should consult other information and performance tests to assist you in fully evaluating your contemplated purchases, including the performance of that product when combined with other products. * Other brands and names are the property of their respective owners. Benchmark Source: Intel Corporation\r\nOptimization Notice: Intel’s compilers may or may not optimize to the same degree for non-Intel microprocessors for optimizations that are not unique to Intel microprocessors. These optimizations include SSE2, SSE3, and SSSE3 instruction sets and other optimizations. Intel does not guarantee the \r\navailability, functionality, or effectiveness of any optimization on microprocessors not manufactured by Intel. Microprocessor-dependent optimizations in this product are intended for use with Intel microprocessors. Certain optimizations not specific to Intel microarchitecture are reserved for Intel \r\nmicroprocessors. Please refer to the applicable product User and Reference Guides for more information regarding the specific instruction sets covered by this notice. Notice revision #20110804 . \r\nNormalized performance data – higher is better",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19348a82-411c-42a3-8a18-48f24a88f470/images/96192ba6-a81e-48a6-a74e-6444af286394.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041440Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6a44bb09c133dc721572d3314dc5050211f8404a55812345ba01f374f9b63b19",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 347
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "```json\n{\"title\": \"Intel® Compiler Features + Performance Tips\"}\n```"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Intel Corporation"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "5/13/2015\n"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "```json\n{\"location\": \"t10.c(6,3)\"}\n```"
        }
      ]
    }
  }
}