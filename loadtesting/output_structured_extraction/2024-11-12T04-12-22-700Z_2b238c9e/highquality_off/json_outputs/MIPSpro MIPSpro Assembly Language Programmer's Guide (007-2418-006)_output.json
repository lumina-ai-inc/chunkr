{
  "file_name": "MIPSpro MIPSpro Assembly Language Programmer's Guide (007-2418-006).pdf",
  "task_id": "c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "20e680e1-6d25-443c-89db-509b7fcac2fa",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 1,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language\r\nProgrammer’s Guide\r\n007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/20e680e1-6d25-443c-89db-509b7fcac2fa.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=35f51c5c04c3cf4d84521b20294c29ede49a644d2ad4dfee9ecd7775a4983dad",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a5c32712-1bca-4c19-ad90-b59e617920df",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 2,
            "page_width": 612,
            "page_height": 792,
            "content": "CONTRIBUTORS\r\nOriginally written by Larry Huffman, David Graves\r\nEngineering contributions by Bean Anderson, Jim Dehnert, Suneel Jain, Michael Murphy, George Pirocanac.\r\nCOPYRIGHT\r\nCopyright © 1996, 1999, 2002–2003 Silicon Graphics, Inc. All rights reserved; provided portions may be copyright in third parties, as\r\nindicated elsewhere herein. No permission is granted to copy, distribute, or create derivative works from the contents of this electronic\r\ndocumentation in any manner, in whole or in part, without the prior written permission of Silicon Graphics, Inc.\r\nLIMITED RIGHTS LEGEND\r\nThe electronic (software) version of this document was developed at private expense; if acquired under an agreement with the USA\r\ngovernment or any contractor thereto, it is acquired as \"commercial computer software\" subject to the provisions of its applicable\r\nlicense agreement, as specified in (a) 48 CFR 12.212 of the FAR; or, if acquired for Department of Defense units, (b) 48 CFR 227-7202 of\r\nthe DoD FAR Supplement; or sections succeeding thereto. Contractor/manufacturer is Silicon Graphics, Inc., 1600 Amphitheatre Pkwy\r\n2E, Mountain View, CA 94043-1351.\r\nTRADEMARKS AND ATTRIBUTIONS\r\nSilicon Graphics, SGI, the SGI logo and IRIX are registered trademarks of Silicon Graphics, Inc. in the United States and/or other\r\ncountries worldwide. GL is a trademark of Silicon Graphics, Inc. MIPS is a trademark of MIPS Technologies, Inc. MIPSpro is a\r\ntrademark of MIPS Technologies, Inc., and is used under license by Silicon Graphics, Inc. UNIX is a registered trademark of the Open\r\nGroup in the United States and other countries.\r\nCover design by Sarah Bolles, Sarah Bolles Design, and Dany Galgani, SGI Technical Publications.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/a5c32712-1bca-4c19-ad90-b59e617920df.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=94168c42b4e225187ecf8f36947d47df79e4328970035514a6eb730e2deffbe7",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "2119d1bb-a687-432b-a14a-2f09c92cc0dd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 3,
            "page_width": 612,
            "page_height": 792,
            "content": "New Features in This Manual\r\nThe .restore and .save directives have been added and are documented in\r\nChapter 8, \"Pseudo Op-Codes (Directives)\", page 109.\r\nThe assembler now supports branches to label+offset.\r\nInformation regarding the assembly language file produced using the -S option to the\r\ncompilers is documented in Chapter 7, \"Writing Assembly Language Code\", page 87.\r\nNote that this chapter was entitled “Linkage Conventions” in previous versions of\r\nthis manual.\r\n007–2418–006 iii",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/2119d1bb-a687-432b-a14a-2f09c92cc0dd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ca430f0adfaff916a53bd5877543520bacf5f122c038fc6cd8dcadca6c080dd5",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "de7b564b-8116-4efa-bd7e-2974625ad60b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 4,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/de7b564b-8116-4efa-bd7e-2974625ad60b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3f0a625afcd6970887f4d94947e6b807a5d5fa748a1fe3714a72087d11999690",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "08785af5-4f3c-4846-afd3-03e730e0876a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 5,
            "page_width": 612,
            "page_height": 792,
            "content": "Record of Revision\r\nVersion Description\r\n1996.\r\nOriginal Printing.\r\n7.3 April 1999\r\nRevised to support the MIPSpro 7.3 release.\r\n005 September 2002\r\nRevised to support the MIPSpro 7.4 release which runs on the IRIX\r\noperation system version 6.5 and later.\r\n006 June 2003\r\nRevised to support the MIPSpro 7.4.1m release.\r\n007–2418–006 v",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/08785af5-4f3c-4846-afd3-03e730e0876a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=af4a0c17d3bab264eb87a6c3c4c7f38a7dba13d2c07c1d1eb18a95e2153d7f7d",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3cc68c59-ddd0-4c36-9f16-205f57f43298",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 6,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/3cc68c59-ddd0-4c36-9f16-205f57f43298.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=776104fda5b1b021c67320d5d5261012a44f6d4d37778496e8d6e09d896650a8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 386
      },
      {
        "segments": [
          {
            "segment_id": "d4a695c1-7e76-4e60-9d1b-53af66c89fd2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 7,
            "page_width": 612,
            "page_height": 792,
            "content": "Contents\r\nAbout This Guide ..................... xix\r\nRelated Publications . . . . . . . . . . . . . . . . . . . . . . xix\r\nObtaining Publications . . . . . . . . . . . . . . . . . . . . . . xx\r\nConventions . . . . . . . . . . . . . . . . . . . . . . . . . xx\r\nReader Comments . . . . . . . . . . . . . . . . . . . . . . . xx\r\n1. Registers . . ..................... 1\r\nRegister Format ........................ 1\r\nGeneral Registers ....................... 1\r\nSpecial Registers ....................... 4\r\nFloating-Point Registers . . ................... 4\r\nFloating-Point Condition Codes ................... 7\r\n2. Addressing . . ..................... 9\r\nInstructions to Load and Store Unaligned Data .............. 9\r\nAddress Formats . . . . . . . . . . . . . . . . . . . . . . . 10\r\nAddress Descriptions . . . . . . . . . . . . . . . . . . . . . . 11\r\n3. Exceptions . . ..................... 13\r\nMain Processor Exceptions . . . . . . . . . . . . . . . . . . . . 13\r\nFloating-Point Exceptions . . . . . . . . . . . . . . . . . . . . . 13\r\n4. Lexical Conventions . . ................. 15\r\nTokens . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\r\nComments . . . . . . . . . . . . . . . . . . . . . . . . . 16\r\n007–2418–006 vii",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/d4a695c1-7e76-4e60-9d1b-53af66c89fd2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5fa9b8550d31fceb1deeaf80c9024d327a3c2fbee738f8a2c6a0c32d2b16890f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 323
      },
      {
        "segments": [
          {
            "segment_id": "7883ee85-c5ed-4e56-913c-787fb99bff98",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 8,
            "page_width": 612,
            "page_height": 792,
            "content": "Contents\r\nIdentifiers . . . . . . . . . . . . . . . . . . . . . . . . . . 16\r\nConstants . . . . . . . . . . . . . . . . . . . . . . . . . . 16\r\nScalar Constants . . . . . . . . . . . . . . . . . . . . . . . 17\r\nFloating-Point Constants . . . . . . . . . . . . . . . . . . . . 17\r\nString Constants . . . . . . . . . . . . . . . . . . . . . . . 18\r\nMultiple Lines Per Physical Line . . . . . . . . . . . . . . . . . . . 19\r\nSection and Location Counters . . . . . . . . . . . . . . . . . . . 19\r\nStatements . . . . . . . . . . . . . . . . . . . . . . . . . 21\r\nLabel Definitions . . . . . . . . . . . . . . . . . . . . . . . 21\r\nNull Statements . . . . . . . . . . . . . . . . . . . . . . . 21\r\nKeyword Statements . . . . . . . . . . . . . . . . . . . . . 22\r\nExpressions . . . . . . . . . . . . . . . . . . . . . . . . . 22\r\nPrecedence . . . . . . . . . . . . . . . . . . . . . . . . 22\r\nExpression Operators . . . . . . . . . . . . . . . . . . . . . 23\r\nData Types . . . . . . . . . . . . . . . . . . . . . . . . 24\r\nType Propagation in Expressions . . . . . . . . . . . . . . . . . . 25\r\nRelocations . . . . . . . . . . . . . . . . . . . . . . . . . 26\r\n5. The Instruction Set . . . ................. 27\r\nInstruction Classes . . . . . . . . . . . . . . . . . . . . . . . 27\r\nReorganization Constraints and Rules . . . . . . . . . . . . . . . . . 27\r\nInstruction Notation . . . . . . . . . . . . . . . . . . . . . . 27\r\nInstruction Set . . . . . . . . . . . . . . . . . . . . . . . . 29\r\nLoad and Store Instructions . . . . . . . . . . . . . . . . . . . 29\r\nLoad Instruction Descriptions . . . . . . . . . . . . . . . . . . . 31\r\nStore Instruction Descriptions . . . . . . . . . . . . . . . . . . . 34\r\nComputational Instructions . . . . . . . . . . . . . . . . . . . . 37\r\nComputational Instructions . . . . . . . . . . . . . . . . . . . 37\r\nComputational Instruction Descriptions . . . . . . . . . . . . . . . . 41\r\nviii 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/7883ee85-c5ed-4e56-913c-787fb99bff98.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=da479965a4da1fff2f59741f10a43c3fb03f1e264f26770c339b221f96d15523",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 684
      },
      {
        "segments": [
          {
            "segment_id": "7883ee85-c5ed-4e56-913c-787fb99bff98",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 8,
            "page_width": 612,
            "page_height": 792,
            "content": "Contents\r\nIdentifiers . . . . . . . . . . . . . . . . . . . . . . . . . . 16\r\nConstants . . . . . . . . . . . . . . . . . . . . . . . . . . 16\r\nScalar Constants . . . . . . . . . . . . . . . . . . . . . . . 17\r\nFloating-Point Constants . . . . . . . . . . . . . . . . . . . . 17\r\nString Constants . . . . . . . . . . . . . . . . . . . . . . . 18\r\nMultiple Lines Per Physical Line . . . . . . . . . . . . . . . . . . . 19\r\nSection and Location Counters . . . . . . . . . . . . . . . . . . . 19\r\nStatements . . . . . . . . . . . . . . . . . . . . . . . . . 21\r\nLabel Definitions . . . . . . . . . . . . . . . . . . . . . . . 21\r\nNull Statements . . . . . . . . . . . . . . . . . . . . . . . 21\r\nKeyword Statements . . . . . . . . . . . . . . . . . . . . . 22\r\nExpressions . . . . . . . . . . . . . . . . . . . . . . . . . 22\r\nPrecedence . . . . . . . . . . . . . . . . . . . . . . . . 22\r\nExpression Operators . . . . . . . . . . . . . . . . . . . . . 23\r\nData Types . . . . . . . . . . . . . . . . . . . . . . . . 24\r\nType Propagation in Expressions . . . . . . . . . . . . . . . . . . 25\r\nRelocations . . . . . . . . . . . . . . . . . . . . . . . . . 26\r\n5. The Instruction Set . . . ................. 27\r\nInstruction Classes . . . . . . . . . . . . . . . . . . . . . . . 27\r\nReorganization Constraints and Rules . . . . . . . . . . . . . . . . . 27\r\nInstruction Notation . . . . . . . . . . . . . . . . . . . . . . 27\r\nInstruction Set . . . . . . . . . . . . . . . . . . . . . . . . 29\r\nLoad and Store Instructions . . . . . . . . . . . . . . . . . . . 29\r\nLoad Instruction Descriptions . . . . . . . . . . . . . . . . . . . 31\r\nStore Instruction Descriptions . . . . . . . . . . . . . . . . . . . 34\r\nComputational Instructions . . . . . . . . . . . . . . . . . . . . 37\r\nComputational Instructions . . . . . . . . . . . . . . . . . . . 37\r\nComputational Instruction Descriptions . . . . . . . . . . . . . . . . 41\r\nviii 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/7883ee85-c5ed-4e56-913c-787fb99bff98.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=da479965a4da1fff2f59741f10a43c3fb03f1e264f26770c339b221f96d15523",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 684
      },
      {
        "segments": [
          {
            "segment_id": "c3f0e3e6-b658-4bab-8021-b562df0536f1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 9,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nJump and Branch Instructions . . . . . . . . . . . . . . . . . . . 50\r\nJump and Branch Instructions . . . . . . . . . . . . . . . . . . . 50\r\nJump and Branch Instruction Descriptions . . . . . . . . . . . . . . . 52\r\nSpecial Instructions . . . . . . . . . . . . . . . . . . . . . . . 55\r\nSpecial Instruction Descriptions . . . . . . . . . . . . . . . . . . 55\r\nCoprocessor Interface Instructions . . . . . . . . . . . . . . . . . . 56\r\nCoprocessor Interface Summary . . . . . . . . . . . . . . . . . . 56\r\nCoprocessor Interface Instruction Descriptions . . . . . . . . . . . . . . 58\r\n6. Coprocessor Instruction Set ................. 61\r\nInstruction Notation . . . . . . . . . . . . . . . . . . . . . . 61\r\nFloating-Point Instructions . . . . . . . . . . . . . . . . . . . . 62\r\nFloating-Point Formats . . . . . . . . . . . . . . . . . . . . . 62\r\nFloating-Point Load and Store Formats . . . . . . . . . . . . . . . . 63\r\nFloating-Point Load and Store Descriptions . . . . . . . . . . . . . . 64\r\nFloating-Point Computational Formats . . . . . . . . . . . . . . . . 65\r\nFloating-Point Computational Instruction Descriptions . . . . . . . . . . . 68\r\nFloating-Point Relational Operations . . . . . . . . . . . . . . . . . 70\r\nFloating-Point Relational Instruction Formats . . . . . . . . . . . . . . 72\r\nFloating-Point Relational Instruction Descriptions . . . . . . . . . . . . . 74\r\nFloating-Point Move Formats . . . . . . . . . . . . . . . . . . . 76\r\nFloating-Point Move Instruction Descriptions . . . . . . . . . . . . . . 77\r\nSystem Control Coprocessor Instructions . . . . . . . . . . . . . . . . 78\r\nSystem Control Coprocessor Instruction Formats . . . . . . . . . . . . . 78\r\nSystem Control Coprocessor Instruction Descriptions . . . . . . . . . . . 79\r\nControl and Status Register . . . . . . . . . . . . . . . . . . . 81\r\nException Trap Processing . . . . . . . . . . . . . . . . . . . 82\r\n007–2418–006 ix",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/c3f0e3e6-b658-4bab-8021-b562df0536f1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a0d2c182695f75f7ce2367351dac17d5921c7966951167eda91e9b57311383ba",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 547
      },
      {
        "segments": [
          {
            "segment_id": "c3f0e3e6-b658-4bab-8021-b562df0536f1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 9,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nJump and Branch Instructions . . . . . . . . . . . . . . . . . . . 50\r\nJump and Branch Instructions . . . . . . . . . . . . . . . . . . . 50\r\nJump and Branch Instruction Descriptions . . . . . . . . . . . . . . . 52\r\nSpecial Instructions . . . . . . . . . . . . . . . . . . . . . . . 55\r\nSpecial Instruction Descriptions . . . . . . . . . . . . . . . . . . 55\r\nCoprocessor Interface Instructions . . . . . . . . . . . . . . . . . . 56\r\nCoprocessor Interface Summary . . . . . . . . . . . . . . . . . . 56\r\nCoprocessor Interface Instruction Descriptions . . . . . . . . . . . . . . 58\r\n6. Coprocessor Instruction Set ................. 61\r\nInstruction Notation . . . . . . . . . . . . . . . . . . . . . . 61\r\nFloating-Point Instructions . . . . . . . . . . . . . . . . . . . . 62\r\nFloating-Point Formats . . . . . . . . . . . . . . . . . . . . . 62\r\nFloating-Point Load and Store Formats . . . . . . . . . . . . . . . . 63\r\nFloating-Point Load and Store Descriptions . . . . . . . . . . . . . . 64\r\nFloating-Point Computational Formats . . . . . . . . . . . . . . . . 65\r\nFloating-Point Computational Instruction Descriptions . . . . . . . . . . . 68\r\nFloating-Point Relational Operations . . . . . . . . . . . . . . . . . 70\r\nFloating-Point Relational Instruction Formats . . . . . . . . . . . . . . 72\r\nFloating-Point Relational Instruction Descriptions . . . . . . . . . . . . . 74\r\nFloating-Point Move Formats . . . . . . . . . . . . . . . . . . . 76\r\nFloating-Point Move Instruction Descriptions . . . . . . . . . . . . . . 77\r\nSystem Control Coprocessor Instructions . . . . . . . . . . . . . . . . 78\r\nSystem Control Coprocessor Instruction Formats . . . . . . . . . . . . . 78\r\nSystem Control Coprocessor Instruction Descriptions . . . . . . . . . . . 79\r\nControl and Status Register . . . . . . . . . . . . . . . . . . . 81\r\nException Trap Processing . . . . . . . . . . . . . . . . . . . 82\r\n007–2418–006 ix",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/c3f0e3e6-b658-4bab-8021-b562df0536f1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a0d2c182695f75f7ce2367351dac17d5921c7966951167eda91e9b57311383ba",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 547
      },
      {
        "segments": [
          {
            "segment_id": "0ba79feb-dbe8-4c69-b7ef-73b591f25af5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 10,
            "page_width": 612,
            "page_height": 792,
            "content": "Contents\r\nInvalid Operation Exception . . . . . . . . . . . . . . . . . . 83\r\nDivision-by-zero Exception . . . . . . . . . . . . . . . . . . . 83\r\nOverflow Exception . . . . . . . . . . . . . . . . . . . . . 84\r\nUnderflow Exception . . . . . . . . . . . . . . . . . . . . 84\r\nInexact Exception . . . . . . . . . . . . . . . . . . . . . . 85\r\nUnimplemented Operation Exception . . . . . . . . . . . . . . . 85\r\nFloating-Point Rounding . . . . . . . . . . . . . . . . . . . . 85\r\n7. Writing Assembly Language Code . . . . .......... 87\r\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . 87\r\nProgram Design . . . . . . . . . . . . . . . . . . . . . . . . 88\r\nThe Stack Frame . . . . . . . . . . . . . . . . . . . . . . . 88\r\nThe Shape of Data . . . . . . . . . . . . . . . . . . . . . . 96\r\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . 96\r\nInterfaces Between Assembly Routines and Other Languages . . . . . . . . . . 100\r\nUsing the .s Assembly Language File . . . . . . . . . . . . . . . . . 100\r\nProgram Header . . . . . . . . . . . . . . . . . . . . . . . 101\r\nInstruction Alignment . . . . . . . . . . . . . . . . . . . . . 101\r\nLabel Offset Comments . . . . . . . . . . . . . . . . . . . . . 101\r\nSource Code Comments . . . . . . . . . . . . . . . . . . . . 102\r\nRelative Instruction Issue Times . . . . . . . . . . . . . . . . . . 103\r\nRelative Branch Prediction Times . . . . . . . . . . . . . . . . . . 104\r\nnop Instructions . . . . . . . . . . . . . . . . . . . . . . . 105\r\nLoop Information Comments . . . . . . . . . . . . . . . . . . . 106\r\nBlock Information . . . . . . . . . . . . . . . . . . . . . . 107\r\n8. Pseudo Op-Codes (Directives) . . . . . . .......... 109\r\nOp-Codes . . . . . . . . . . . . . . . . . . . . . . . . . . 109\r\nx 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/0ba79feb-dbe8-4c69-b7ef-73b591f25af5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f851f5bfe4bf0e3dd54afdf1ea266f16c36224276320db15f0f79a25c6c8a0f5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 609
      },
      {
        "segments": [
          {
            "segment_id": "0ba79feb-dbe8-4c69-b7ef-73b591f25af5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 10,
            "page_width": 612,
            "page_height": 792,
            "content": "Contents\r\nInvalid Operation Exception . . . . . . . . . . . . . . . . . . 83\r\nDivision-by-zero Exception . . . . . . . . . . . . . . . . . . . 83\r\nOverflow Exception . . . . . . . . . . . . . . . . . . . . . 84\r\nUnderflow Exception . . . . . . . . . . . . . . . . . . . . 84\r\nInexact Exception . . . . . . . . . . . . . . . . . . . . . . 85\r\nUnimplemented Operation Exception . . . . . . . . . . . . . . . 85\r\nFloating-Point Rounding . . . . . . . . . . . . . . . . . . . . 85\r\n7. Writing Assembly Language Code . . . . .......... 87\r\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . 87\r\nProgram Design . . . . . . . . . . . . . . . . . . . . . . . . 88\r\nThe Stack Frame . . . . . . . . . . . . . . . . . . . . . . . 88\r\nThe Shape of Data . . . . . . . . . . . . . . . . . . . . . . 96\r\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . 96\r\nInterfaces Between Assembly Routines and Other Languages . . . . . . . . . . 100\r\nUsing the .s Assembly Language File . . . . . . . . . . . . . . . . . 100\r\nProgram Header . . . . . . . . . . . . . . . . . . . . . . . 101\r\nInstruction Alignment . . . . . . . . . . . . . . . . . . . . . 101\r\nLabel Offset Comments . . . . . . . . . . . . . . . . . . . . . 101\r\nSource Code Comments . . . . . . . . . . . . . . . . . . . . 102\r\nRelative Instruction Issue Times . . . . . . . . . . . . . . . . . . 103\r\nRelative Branch Prediction Times . . . . . . . . . . . . . . . . . . 104\r\nnop Instructions . . . . . . . . . . . . . . . . . . . . . . . 105\r\nLoop Information Comments . . . . . . . . . . . . . . . . . . . 106\r\nBlock Information . . . . . . . . . . . . . . . . . . . . . . 107\r\n8. Pseudo Op-Codes (Directives) . . . . . . .......... 109\r\nOp-Codes . . . . . . . . . . . . . . . . . . . . . . . . . . 109\r\nx 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/0ba79feb-dbe8-4c69-b7ef-73b591f25af5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f851f5bfe4bf0e3dd54afdf1ea266f16c36224276320db15f0f79a25c6c8a0f5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 609
      },
      {
        "segments": [
          {
            "segment_id": "e0227990-3cf7-482d-be54-f67a037c17cd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 11,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nPIC Assembly Code . . . . . . . . . . . . . . . . . . . . . . 120\r\nIndex . ......................... 123\r\n007–2418–006 xi",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/e0227990-3cf7-482d-be54-f67a037c17cd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=151344b400c2b5daedcb6ee3b4d780dc49203ac0bcd0b866a0e66b813e404cd0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d895517c-4a8e-451d-bb7b-a85a6c10419d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 12,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/d895517c-4a8e-451d-bb7b-a85a6c10419d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=883247d12c683cf0997f108c6b420734c4f965109a0be047f9c85d0474f4bf69",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3c37d235-16f4-4a34-a44c-dd5146b4ae9c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 13,
            "page_width": 612,
            "page_height": 792,
            "content": "Figures\r\nFigure 4-1 Section and Location Counters . . . . . . . . . . . . . . . 20\r\nFigure 6-1 Floating Point Formats . . . . . . . . . . . . . . . . . 63\r\nFigure 6-2 Floating Control and Status Register 31 . . . . . . . . . . . . 81\r\nFigure 7-1 Stack Organization for -32 . . . . . . . . . . . . . . . . 90\r\nFigure 7-2 Stack Organization for -n32 and -64 . . . . . . . . . . . . . 91\r\nFigure 7-3 Stack Example . . . . . . . . . . . . . . . . . . . . 93\r\n007–2418–006 xiii",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/3c37d235-16f4-4a34-a44c-dd5146b4ae9c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=29979c0863d305bebb0675c448df301c571204bb5a6c507891d593f17d4101de",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "29d93102-f576-4b50-890c-37a4f1cacfb3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 14,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/29d93102-f576-4b50-890c-37a4f1cacfb3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=89b3e3809b501864b758b40597672b857c247ad65972ddd827e77e712b4dead2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 176
      },
      {
        "segments": [
          {
            "segment_id": "1f13cb26-963a-43ce-ba3d-3022c206b474",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 15,
            "page_width": 612,
            "page_height": 792,
            "content": "Tables\r\nTable 1-1 General (Integer) Registers (-32) ............... 2\r\nTable 1-2 General (Integer) Registers (64-Bit) .............. 3\r\nTable 1-3 Special Registers . ................... 4\r\nTable 1-4 Floating-Point Registers (-32)................ 5\r\nTable 1-5 Floating-Point Registers (-64)................ 6\r\nTable 1-6 Floating-Point Registers (-n32) ............... 6\r\nTable 2-1 Address Formats . . . . . . . . . . . . . . . . . . . . 10\r\nTable 2-2 Assembler Addresses . . . . . . . . . . . . . . . . . . 11\r\nTable 4-1 Backslash Conventions . . . . . . . . . . . . . . . . . . 18\r\nTable 4-2 Expression Operators . . . . . . . . . . . . . . . . . . 23\r\nTable 4-3 Data Types . . . . . . . . . . . . . . . . . . . . . 24\r\nTable 5-1 Load and Store Format Summary . . . . . . . . . . . . . . 29\r\nTable 5-2 Load Instruction Descriptions . . . . . . . . . . . . . . . . 31\r\nTable 5-3 Load Instruction Descriptions for MIPS3/4 Architecture Only . . . . . . 34\r\nTable 5-4 Store Instruction Descriptions . . . . . . . . . . . . . . . . 35\r\nTable 5-5 Store Instruction Descriptions for MIPS3/4 Architecture Only . . . . . . 37\r\nTable 5-6 Computational Format Summaries . . . . . . . . . . . . . . 38\r\nTable 5-7 Computational Instruction Descriptions . . . . . . . . . . . . . 41\r\nTable 5-8 Computational Instruction Descriptions for MIPS3/4 Architecture . . . . 47\r\nTable 5-9 Jump and Branch Format Summary . . . . . . . . . . . . . . 51\r\nTable 5-10 Jump and Branch Instruction Descriptions . . . . . . . . . . . 52\r\nTable 5-11 Special Instruction Descriptions . . . . . . . . . . . . . . . 55\r\nTable 5-12 Coprocessor Interface Formats . . . . . . . . . . . . . . . 56\r\n007–2418–006 xv",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/1f13cb26-963a-43ce-ba3d-3022c206b474.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=62818d5c41f25d31e020c8d7e61212b1b3c930ee0ee76262d9bc5f45aa8f9870",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 398
      },
      {
        "segments": [
          {
            "segment_id": "b3894bb4-a791-44d3-9dd0-b41b7648b00b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 16,
            "page_width": 612,
            "page_height": 792,
            "content": "Contents\r\nTable 5-13 Coprocessor Interface Instruction Descriptions . . . . . . . . . . 58\r\nTable 6-1 Floating-Point Load and Store Formats . . . . . . . . . . . . . 63\r\nTable 6-2 Floating-Point Load and Store Descriptions . . . . . . . . . . . 64\r\nTable 6-3 Floating-Point Computational Instructions . . . . . . . . . . . . 65\r\nTable 6-4 Floating-Point Computational Instruction Descriptions . . . . . . . . 69\r\nTable 6-5 Floating-Point Relational Operators . . . . . . . . . . . . . . 70\r\nTable 6-6 Floating-Point Relational Instruction Formats . . . . . . . . . . . 72\r\nTable 6-7 Floating-Point Relational Instruction Descriptions . . . . . . . . . . 75\r\nTable 6-8 Floating-Point Move Instruction Descriptions . . . . . . . . . . . 78\r\nTable 6-9 System Control Coprocessor Instruction Descriptions . . . . . . . . 80\r\nTable 7-1 Parameter Passing (-32) . . . . . . . . . . . . . . . . . 94\r\nTable 7-2 Parameter Passing (-n32 and -64) . . . . . . . . . . . . . . 94\r\nTable 8-1 Pseudo Op-Codes . . . . . . . . . . . . . . . . . . . 109\r\nxvi 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/b3894bb4-a791-44d3-9dd0-b41b7648b00b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1c11438b37f38014058aaad85545f0c6a594c06345a39040f484ec757e88d265",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fd7a5238-ca46-4947-af37-296d0bdb0c7c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 17,
            "page_width": 612,
            "page_height": 792,
            "content": "Examples\r\nExample 7-1 Non-leaf procedure . . . . . . . . . . . . . . . . . . 96\r\nExample 7-2 Leaf Procedure . . . . . . . . . . . . . . . . . . . 98\r\nExample 8-1 KPIC directives example . . . . . . . . . . . . . . . . 120\r\n007–2418–006 xvii",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/fd7a5238-ca46-4947-af37-296d0bdb0c7c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e3ad8dafe79c0d03fc5c53cb2d5fde486e7bfc92f125b1ec2cf417b69f2f6368",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e00c9bde-2ad5-485e-be56-5cf5a3ad913c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 18,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/e00c9bde-2ad5-485e-be56-5cf5a3ad913c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=25c9b78044f4e2999e3f9f6a984b27024124d13ad5616b53041eeda942c9f5a9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 323
      },
      {
        "segments": [
          {
            "segment_id": "2366a852-b62f-410e-94ad-b0014b61b7a2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 19,
            "page_width": 612,
            "page_height": 792,
            "content": "About This Guide\r\nThis publication describes the assembly language supported by the IRIX operating\r\nsystem, its syntax rules, and how to write assembly programs. For information about\r\nassembling and linking an assembly language program, see the MIPSpro N32/64\r\nCompiling and Performance Tuning Guide.\r\nThis book assumes that you are an experienced assembly language programmer. The\r\nassembler produces object modules from the assembly instructions that the C and\r\nFortran compilers generate. It therefore lacks many of the functions normally present\r\nin an assembler. You should use the assembler only when you must:\r\n• Maximize the efficiency of a routine, which might not be possible in C, Fortran, or\r\nanother high-level language (for example, to write low-level I/O drivers).\r\n• Access machine functions unavailable in high-level languages or satisfy special\r\nconstraints such as restricted register usage.\r\n• Change the operating system.\r\n• Change the compiler system.\r\nThe assembler converts assembly language statements into machine code. In most\r\nassembly languages, each instruction corresponds to a single machine instruction;\r\nhowever, some assembly language instructions can generate several machine\r\ninstructions. This feature results in assembly programs that can run without\r\nmodification on future machines, which might have different machine instructions.\r\nIn this release, the assembler supports compilations in -o32, -n32, and -64 mode.\r\nSome of the implications of these different data sizes are explained in this book. For\r\nmore information, see the MIPSpro 64-Bit Porting and Transition Guide.\r\nMany assembly language instructions have direct equivalents to machine instructions.\r\nFor more information about the operations of a specific architecture, see the book that\r\nis appropriate for your hardware type.\r\nRelated Publications\r\nThis manual is one of a set of manuals that describes the compiler. The complete set\r\nof manuals is as follows:\r\n007–2418–006 xix",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/2366a852-b62f-410e-94ad-b0014b61b7a2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=26c3d2b6e833645c57ffda36064fc517601902f8c18bc6b4af5361296ebd7a33",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "47fadfc2-a278-4909-9245-305c53436ebf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 20,
            "page_width": 612,
            "page_height": 792,
            "content": "About This Guide\r\n• MIPSpro 64-Bit Porting and Transition Guide\r\n• MIPSpro N32/64 Compiling and Performance Tuning Guide\r\n• MIPSpro N32 ABI Handbook\r\nObtaining Publications\r\nTo obtain SGI documentation, go to the SGI Technical Publications Library at:\r\nhttp://docs.sgi.com.\r\nConventions\r\nThe following conventions are used throughout this document:\r\nConvention Meaning\r\ncommand This fixed-space font denotes literal items such as\r\ncommands, files, routines, path names, signals,\r\nmessages, and programming language structures.\r\nvariable Italic typeface denotes variable entries and words or\r\nconcepts being defined.\r\nuser input This bold, fixed-space font denotes literal items that the\r\nuser enters in interactive sessions. (Output is shown in\r\nnonbold, fixed-space font.)\r\n[ ] Brackets enclose optional portions of a command or\r\ndirective line.\r\nReader Comments\r\nIf you have comments about the technical accuracy, content, or organization of this\r\npublication, contact SGI. Be sure to include the title and document number of the\r\npublication with your comments. (Online, the document number is located in the\r\nfront matter of the publication. In printed publications, the document number is\r\nlocated at the bottom of each page.)\r\nxx 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/47fadfc2-a278-4909-9245-305c53436ebf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c6e65a29f155f02ac43a976bf0069cacfb0c1559f1b555b1149da477882e7a3f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 466
      },
      {
        "segments": [
          {
            "segment_id": "1908fdd2-005e-4d0e-97f0-20b810df6277",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 21,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nYou can contact SGI in any of the following ways:\r\n• Send e-mail to the following address:\r\ntechpubs@sgi.com\r\n• Use the Feedback option on the Technical Publications Library Web page:\r\nhttp://docs.sgi.com\r\n• Contact your customer service representative and ask that an incident be filed in\r\nthe SGI incident tracking system.\r\n• Send mail to the following address:\r\nTechnical Publications\r\nSGI\r\n1600 Amphitheatre Parkway, M/S 535\r\nMountain View, California 94043–1351\r\n• Send a fax to the attention of “Technical Publications” at +1 650 932 0801.\r\nSGI values your comments and will respond to them promptly.\r\n007–2418–006 xxi",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/1908fdd2-005e-4d0e-97f0-20b810df6277.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=51ee58bce87e73ff4769629b0cf349051fec2fda7b1255a46114a8a6d124e236",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f96a4e8e-312c-4b7d-afa9-2be33f963e14",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 22,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/f96a4e8e-312c-4b7d-afa9-2be33f963e14.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=afea623a5b1bc02ae35ec398e3cf869f34325b253a3431eecb6c449d6ee7bdce",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0e0c4217-ce8e-411b-8e5e-9d68d7c5d8b2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 23,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 1\r\nRegisters\r\nThis chapter describes the organization of data in memory, and the naming and usage\r\nconventions that the assembler applies to the CPU and FPU registers. See Chapter 7,\r\n\"Writing Assembly Language Code\", page 87, for information regarding register use\r\nand linkage.\r\nRegister Format\r\nThe CPU uses four data formats: a 64-bit doubleword, a 32-bit word, a 16-bit\r\nhalfword and an 8-bit byte. Byte ordering within each of the larger data formats –\r\ndoubleword, word or halfword – the CPU’s byte ordering scheme (or endian issues),\r\naffects memory organization and defines the relationship between address and byte\r\nposition of data in memory.\r\nFor R4000 and earlier systems, byte ordering is configurable into either big-endian or\r\nlittle-endian byte ordering (configuration occurs during hardware reset). When\r\nconfigured as a big-endian system, byte 0 is always the most-significant (leftmost)\r\nbyte. When configured as a little-endian system, byte 0 is always the least-significant\r\n(rightmost byte).\r\nThe R8000 CPU, at present, supports big-endian only.\r\nGeneral Registers\r\nFor the MIPS1 and MIPS2 architectures, the CPU has thirty-two 32-bit registers. In the\r\nMIPS3 architecture and above, the size of each of the thirty-two integer registers is\r\n64-bit.\r\nTable 1-1, page 2, and Table 1-2, page 3, summarize the assembler’s usage, conventions\r\nand restrictions for these registers. The assembler reserves all register names; you\r\nmust use lowercase for the names. All register names start with a dollar sign ($).\r\nThe general registers have the names $0..$31. By including the file regdef.h (use\r\n#include <regdef.h>) in your program, you can use software names for some\r\ngeneral registers.\r\n007–2418–006 1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/0e0c4217-ce8e-411b-8e5e-9d68d7c5d8b2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6e4115931265ea397bd3487f4fbc863dbf6e8b4917f8cb2429b46b3cba6342f2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 363
      },
      {
        "segments": [
          {
            "segment_id": "37d1f004-b882-48cb-a672-72d6e0c7e604",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 24,
            "page_width": 612,
            "page_height": 792,
            "content": "1: Registers\r\nThe operating system and the assembler use the general registers $1, $26, $27, $28,\r\nand $29 for specific purposes. Attempts to use these general registers in other ways\r\ncan produce unexpected results.\r\nTable 1-1 General (Integer) Registers (-32)\r\nRegister Name\r\nSoftware Name\r\n(from\r\nregdef.h) Use and Linkage\r\n$0 Always has the value 0.\r\n$1 or $at Reserved for the assembler.\r\n$2..$3 v0-v1 Used for expression evaluations and to hold\r\nthe integer type function results. Also used to\r\npass the static link when calling nested\r\nprocedures.\r\n$4..$7 a0-a3 Pass the first 4 words of actual integer type\r\narguments; their values are not preserved\r\nacross procedure calls.\r\n$8..$11 $11..$15 t0-t7 t4-t7 or\r\nta0-ta3\r\nTemporary registers used for expression\r\nevaluations; their values aren’t preserved\r\nacross procedure calls.\r\n$16..$23 s0-s7 Saved registers. Their values must be\r\npreserved across procedure calls.\r\n$25 t9 or jp PIC jump register.\r\n$26..27 or\r\n$kt0..$kt1\r\nk0-k1 Reserved for the operating system kernel.\r\n$28 or $gp gp Contains the global pointer.\r\n$29 or $sp sp Contains the stack pointer.\r\n$30 or $fp fp or s8 Contains the frame pointer (if needed);\r\notherwise a saved register (like s0-s7).\r\n$31 ra Contains the return address and is used for\r\nexpression evaluation.\r\n2 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/37d1f004-b882-48cb-a672-72d6e0c7e604.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0cc6d44459f0ef870692f69c03a3b10dd3108da2c139ac0794f8dc8556b56e0d",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "47e6c0a5-60d8-49b7-8cfd-73c093625eb4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 25,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nNote: General register $0 always contains the value 0. All other general registers are\r\nequivalent, except that general register $31 also serves as the implicit link register for\r\njump and link instructions. See Chapter 7, \"Writing Assembly Language Code\", page\r\n87, for a description of register assignments.\r\nTable 1-2 General (Integer) Registers (64-Bit)\r\nRegister Name\r\nSoftware Name\r\n(from\r\nregdef.h) Use and Linkage\r\n$0 Always has the value 0.\r\n$1 or $at Reserved for the assembler.\r\n$2..$3 v0-v1 Used for expression evaluations and to hold\r\nthe integer type function results. Also used to\r\npass the static link when calling nested\r\nprocedures.\r\n$4..$7 $8..$11 a0-a3 a4-a7 or\r\nta0-ta3\r\nPass up to 8 words of actual integer type\r\narguments; their values are not preserved\r\nacross procedure calls.\r\n$12..$15 t0-t3 Temporary registers used for expression\r\nevaluations; their values aren’t preserved\r\nacross procedure calls.\r\n$16..$23 s0-s7 Saved registers. Their values must be\r\npreserved across procedure calls.\r\n$24..$25 t8-t9 Temporary registers used for expression\r\nevaluations; their values aren’t preserved\r\nacross procedure calls.\r\n$26..27 or\r\n$kt0..$kt1\r\nk0-k1 Reserved for the operating system kernel.\r\n$28 or $gp gp Contains the global pointer.\r\n$29 or $sp sp Contains the stack pointer.\r\n007–2418–006 3",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/47e6c0a5-60d8-49b7-8cfd-73c093625eb4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=98d436f87e36a59cc42918683496f4faee6b0197ba76ad9a1c6e29e0e2a2a0cc",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 402
      },
      {
        "segments": [
          {
            "segment_id": "39eeef68-8251-47f1-909c-039f64692ea8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 26,
            "page_width": 612,
            "page_height": 792,
            "content": "1: Registers\r\nRegister Name\r\nSoftware Name\r\n(from\r\nregdef.h) Use and Linkage\r\n$30 or $fp fp or s8 Contains the frame pointer (if needed);\r\notherwise a saved register (such as s0-s7).\r\n$31 ra Contains the return address and is used for\r\nexpression evaluation.\r\nSpecial Registers\r\nThe CPU defines three special registers: PC (program counter), HI and LO, as shown\r\nin Table 1-3, page 4. The HI and LO special registers hold the results of the\r\nmultiplication (mult and multu) and division (div and divu) instructions.\r\nYou usually do not need to refer explicitly to these special registers; instructions that\r\nuse the special registers refer to them automatically.\r\nTable 1-3 Special Registers\r\nName Description\r\nPC Program Counter\r\nHI Multiply/Divide special register holds the most-significant 32 bits of\r\nmultiply, remainder of divide\r\nLO Multiply/Divide special register holds the least-significant 32 bits of\r\nmultiply, quotient of divide\r\nNote: In MIPS3 architecture and later, the HI and Lo registers hold 64-bits.\r\nFloating-Point Registers\r\nThe FPU has sixteen floating-point registers. Each register can hold either a\r\nsingle-precision (32-bit) or double-precision (64-bit) value. In case of a\r\ndouble-precision value, $f0 holds the least-significant half, and $f1 holds the\r\n4 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/39eeef68-8251-47f1-909c-039f64692ea8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9b22bee45b43b59358e843b64b6c427588bcc0a1cefd5740a3960e2431920762",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f850d743-b5cf-4824-aa3e-fd9cc3f51e61",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 27,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nmost-significant half. For 32-bit systems, all references to these registers use an even\r\nregister number (for example, $f4). 64-bit systems can reference all 32 registers\r\ndirectly. The following tables summarize the assembler’s usage conventions and\r\nrestrictions for these registers.\r\nTable 1-4 Floating-Point Registers (-32)\r\nRegister\r\nName\r\nSoftware Name\r\n(from\r\nfgregdef.h) Use and Linkage\r\n$f0..$f2 fv0-fv1 Hold results of floating-point type function ($f0)\r\nand complex type function ($f0 has the real part,\r\n$f2 has the imaginary part.\r\n$f4..$f10 ft0-ft3 Temporary registers, used for expression\r\nevaluation whose values are not preserved across\r\nprocedure calls.\r\n$f12..$f14 fa0-fa1 Pass the first two single- or double-precision\r\nactual arguments; their values are not preserved\r\nacross procedure calls.\r\n$f16..$f18 ft4-ft5 Temporary registers, used for expression\r\nevaluation, whose values are not preserved\r\nacross procedure calls.\r\n$f20..$f30 fs0-fs5 Saved registers, whose values must be preserved\r\nacross procedure calls.\r\n007–2418–006 5",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/f850d743-b5cf-4824-aa3e-fd9cc3f51e61.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=df7f96ca666bdbf5db4e1029eb9568aa5c4d88760f180f6ef04787a2613df975",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 339
      },
      {
        "segments": [
          {
            "segment_id": "6e612da6-bde3-40a8-9929-cb90780710d4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 28,
            "page_width": 612,
            "page_height": 792,
            "content": "1: Registers\r\nTable 1-5 Floating-Point Registers (-64)\r\nRegister\r\nName\r\nSoftware\r\nName(from\r\nfgregdef.h) Use and Linkage\r\n$f0, $f2 fv0,fv1 Hold results of floating-point type function ($f0)\r\nand complex type function ($f0 has the real part,\r\n$f2 has the imaginary part.\r\n$f1, $f3,\r\n$f4..$f11\r\nft12, ft13, ft0–ft7 Temporary registers, used for expression\r\nevaluation; their values are not preserved across\r\nprocedure calls.\r\n$f12..$f19 fa0-fa7 Pass single– or double–precision actual\r\narguments, whose values are not preserved\r\nacross procedure calls.\r\n$f20..$f23 ft8-ft11 Temporary registers, used for expression\r\nevaluation; their values are not preserved across\r\nproceadure calls.\r\n$f24..$f31 fs0-fs7 Saved registers, whose values must be preserved\r\nacross procedure calls.\r\nTable 1-6 Floating-Point Registers (-n32)\r\nRegister\r\nName\r\nSoftware\r\nName(from\r\nfgregdef.h) Use and Linkage\r\n$f0, $f2 fv0,fv1 Hold results of floating-point type function ($f0)\r\nand complex type function ($f0 has the real part,\r\n$f2 has the imaginary part.)\r\n$f1, $f3\r\n$f4..$f11\r\nft14, ft15, ft0-ft7 Temporary registers, used for expression\r\nevaluation; their values are not preserved across\r\nprocedure calls.\r\n$f12..$f19 fa0-fa7 Pass single– or double–precision actual\r\narguments, whose values are not preserved\r\nacross procedure calls.\r\n6 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/6e612da6-bde3-40a8-9929-cb90780710d4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6e46ca216ee44c92040207d4efd799e1e55a44e623e958ba59fc35dc90b2b689",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "28aa210f-af86-4f58-92ba-63f3a05ad4a9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 29,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nRegister\r\nName\r\nSoftware\r\nName(from\r\nfgregdef.h) Use and Linkage\r\n$f21, $f23,\r\n$f25, $f27,\r\n$f29, $f31\r\nft8-ft13 Temporary registers, used for expression\r\nevaluation; their values are not preserved across\r\nprocedure calls.\r\n$f20, $f22,\r\n$f24, $f26,\r\n$f28, $f30\r\nfs0-fs5 Saved registers, whose values must be preserved\r\nacross procedure calls.\r\nFloating-Point Condition Codes\r\nThe floating-point condition code registers hold the result of a floating-point\r\ncomparison, and then decide whether or not to branch. For -32 compilers, there is\r\nonly register: $fcc0. For -n32 and -64 compilers, there are eight registers available:\r\n$fcc0 through $fcc7.\r\n007–2418–006 7",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/28aa210f-af86-4f58-92ba-63f3a05ad4a9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6cded5873e70a62cd92371f5785a50911e9a9d536ee50d39eac9f8f5aca9f7c5",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0bafe654-5af9-427f-a513-a078fd6afd3b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 30,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/0bafe654-5af9-427f-a513-a078fd6afd3b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3b6540db2f636d5897ac67c60f5f12c0fd6a0156f1e74d5d25f198f39d20a649",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "51735844-9c1a-486f-ba77-73b9fac9b470",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 31,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 2\r\nAddressing\r\nThis chapter describes the formats that you can use to specify addresses. SGI CPUs\r\nuse a byte addressing scheme. Access to halfwords requires alignment on even byte\r\nboundaries, and access to words requires alignment on byte boundaries that are\r\ndivisible by four. Access to doublewords (for 64-bit systems) requires alignment on\r\nbyte boundaries that are divisible by eight. Any attempt to address a data item that\r\ndoes not have the proper alignment causes an alignment exception.\r\nInstructions to Load and Store Unaligned Data\r\nThe unaligned assembler load and store instructions may generate multiple machine\r\nlanguage instructions. They do not raise alignment exceptions.\r\nThese instructions load and store unaligned data:\r\n• Load doubleword left (LDL)\r\n• Load word left (LWL)\r\n• Load doubleword right (LDR)\r\n• Load word right (LWR)\r\n• Store doubleword left (SDL)\r\n• Store word left (SWL)\r\n• Store doubleword right (SDR)\r\n• Store word right (SWR)\r\n• Unaligned load doubleword (ULD)\r\n• Unaligned load word (ULW)\r\n• Unaligned load halfword (ULH)\r\n• Unaligned load halfword unsigned (ULHU)\r\n• Unaligned store doubleword (USD)\r\n• Unaligned store word (USW)\r\n007–2418–006 9",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/51735844-9c1a-486f-ba77-73b9fac9b470.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2030b505439ef24182fe36cee716b90a6ca44b0fbd54d8a17587cf0217ef58c8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 460
      },
      {
        "segments": [
          {
            "segment_id": "5ae65084-7436-48cd-aabc-a38efaf0ce57",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 32,
            "page_width": 612,
            "page_height": 792,
            "content": "2: Addressing\r\n• Unaligned store halfword (USH)\r\nThe following instructions load and store aligned data:\r\n• Load doubleword (LD)\r\n• Load word (LW)\r\n• Load halfword (LH)\r\n• Load halfword unsigned (LHU)\r\n• Load byte (LB)\r\n• Load byte unsigned (LBU)\r\n• Store doubleword (SD)\r\n• Store word (SW)\r\n• Store halfword (SH)\r\n• Store byte (SB)\r\nAddress Formats\r\nThe assembler accepts the following formats for addresses: Table 2-2 explains these\r\nformats in more detail.\r\nTable 2-1 Address Formats\r\nFormat Address\r\n(base-register) Base address (zero offset assumed)\r\nexpression Absolute address\r\nexpression (base-register) Based address\r\nindex-register (base-register) Based address\r\nrelocatable-symbol Relocatable address\r\n10 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/5ae65084-7436-48cd-aabc-a38efaf0ce57.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=09a73db4ea2a6c19682d32c4f87f364d4f42304bd9ad2c92c301779c3de5dd34",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "021adeb6-b00a-42d3-b03a-dd7ce806f7fc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 33,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nFormat Address\r\nrelocatable-symbol ± expression Relocatable address\r\nrelocatable-symbol ± expression (index\r\nregister)\r\nIndexed relocatable address\r\nAddress Descriptions\r\nThe assembler accepts any combination of the constants and operations described in\r\nthis chapter for expressions in address descriptions.\r\nTable 2-2 Assembler Addresses\r\nExpression Address Description\r\n( base-register) Specifies an indexed address, which\r\nassumes a zero offset. The base-register\r\ncontents specify the address.\r\nexpression Specifies an absolute address. The assembler\r\ngenerates the most locally efficient code for\r\nreferencing a value at the specified address.\r\nexpression (base-register) Specifies a based address. To get the\r\naddress, the CPU adds the value of the\r\nexpression to the contents of the\r\nbase-register.\r\nindex-register (base-register) Same as expression(base-register), except that\r\nthe index register is used as the offset.\r\nrelocatable-symbol Specifies a relocatable address. The\r\nassembler generates the necessary\r\ninstruction(s) to address the item and\r\ngenerates relocatable information for the\r\nlink editor.\r\n007–2418–006 11",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/021adeb6-b00a-42d3-b03a-dd7ce806f7fc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5a6c3609d6ed9a4c79aaf7f4c78c3e81d402564b2833fef003d39572a60f6083",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fd647825-742b-40d0-91cd-6655bd7c3215",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 34,
            "page_width": 612,
            "page_height": 792,
            "content": "2: Addressing\r\nExpression Address Description\r\nrelocatable-symbol ± expression Specifies a relocatable address. To get the\r\naddress, the assembler adds or subtracts the\r\nvalue of the expression, which has an\r\nabsolute value, from the relocatable symbol.\r\nThe assembler generates the necessary\r\ninstruction(s) to address the item and\r\ngenerates relocatable information for the\r\nlink editor. If the symbol name does not\r\nappear as a label anywhere in the assembly,\r\nthe assembler assumes that the symbol is\r\nexternal.\r\nrelocatable-symbol (index register) Specifies an indexed relocatable address. To\r\nget the address, the CPU adds the index\r\nregisterto the relocatable symbol’s address.\r\nThe assembler generates the necessary\r\ninstruction(s) to address the item and\r\ngenerates relocatable information for the\r\nlink editor. If the symbol name does not\r\nappear as a label anywhere in the assembly,\r\nthe assembler assumes that the symbol is\r\nexternal.\r\nrelocatable ± expression Specifies an indexed relocatable address. To\r\nget the address, the assembler adds or\r\nsubtracts the relocatable symbol, the\r\nexpression, and the contents of the index\r\nregister. The assembler generates the\r\nnecessary instruction(s) to address the item\r\nand generates relocation information for the\r\nlink editor. If the symbol does not appear as\r\na label anywhere in the assembly, the\r\nassembler assumes that the symbol is\r\nexternal.\r\n12 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/fd647825-742b-40d0-91cd-6655bd7c3215.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=475159b3711356975394bfbf503bdab765d7e53a4fa957a0d056569e1a25e852",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 460
      },
      {
        "segments": [
          {
            "segment_id": "a7104811-898c-4b5f-a196-7ee02b087a83",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 35,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 3\r\nExceptions\r\nThis chapter describes the exceptions that you can encounter while running assembly\r\nprograms. The system detects some exceptions directly, and the assembler inserts\r\nspecific tests that signal other exceptions. This chapter lists only those exceptions that\r\noccur frequently.\r\nMain Processor Exceptions\r\nThe following exceptions are the most common to the main processor:\r\n• Address error exceptions, which occur when a data item is referenced that is not\r\non its proper memory alignment or when an address is invalid for the executing\r\nprocess.\r\n• Overflow exceptions, which occur when arithmetic operations compute signed\r\nvalues and the destination lacks the precision to store the result.\r\n• Bus exceptions, which occur when an address is invalid for the executing process.\r\n• Divide-by-zero exceptions, which occur when a divisor is zero.\r\nFloating-Point Exceptions\r\nThe following are the most common floating-point exceptions:\r\n• Invalid operation exceptions which include:\r\n– Magnitude subtraction of infinities, for example: –1.\r\n– Multiplication of 0 by 1 with any signs.\r\n– Division of 0/0 or 1/1 with any signs.\r\n– Conversion of a binary floating-point number to an integer format when an\r\noverflow or the operand value for the infinity or NaN precludes a faithful\r\nrepresentation in the format (see Chapter 4, \"Lexical Conventions\", page 15).\r\n– Comparison of predicates that have unordered operands, and that involve\r\nGreater Than or Less Than without Unordered.\r\n007–2418–006 13",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/a7104811-898c-4b5f-a196-7ee02b087a83.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fdc4a8bbb9e49c5fad30ceeee9d8b73e937ecd7f1717791da7d5ee6852ffef34",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "27f1d649-8543-400e-b642-3ccf24a49725",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 36,
            "page_width": 612,
            "page_height": 792,
            "content": "3: Exceptions\r\n– Any operation on a signaling NaN.\r\n• Divide-by-zero exceptions.\r\n• Overflow exceptions occur when a rounded floating-point result exceeds the\r\ndestination format’s largest finite number.\r\n• Underflow exceptions these occur when a result has lost accuracy and also when a\r\nnonzero result is between 2Emin (2 to the minimum expressible exponent).\r\n• Inexact exceptions.\r\n14 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/27f1d649-8543-400e-b642-3ccf24a49725.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1b91ae18929124429efc893bfc2c64ec57af040dbae819d2f802cc89e515fa92",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e6ad0ea0-3fb7-4f2b-8849-ea728112ec3b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 37,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 4\r\nLexical Conventions\r\nThis chapter discusses lexical conventions for these topics:\r\n• Tokens, \"Tokens\", page 15\r\n• Comments, \"Comments\", page 16\r\n• Identifiers, \"Identifiers\", page 16\r\n• Constants, \"Constants\", page 16\r\n• Multiple lines per physical line, \"Multiple Lines Per Physical Line\", page 19\r\n• Sections and location counters, \"Section and Location Counters\", page 19\r\n• Statements, \"Statements\", page 21\r\n• Expressions, \"Expressions\", page 22\r\nThis chapter uses the following notation to describe syntax:\r\n• | (vertical bar) means “or”\r\n• [ ](square brackets) enclose options\r\n• ± indicates both addition and subtraction operations\r\nTokens\r\nThe assembler has these tokens:\r\n• Identifiers\r\n• Constants\r\n• Operators\r\nThe assembler lets you put blank characters and tab characters anywhere between\r\ntokens; however, it does not allow these characters within tokens (except for character\r\nconstants). A blank or tab must separate adjacent identifiers or constants that are not\r\notherwise separated.\r\n007–2418–006 15",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/e6ad0ea0-3fb7-4f2b-8849-ea728112ec3b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=276571b9fc3d435bf6a20f18b46b2c5fe09e82da18d9cb58b81724ec1c3fe2c4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 438
      },
      {
        "segments": [
          {
            "segment_id": "3fa1d238-78bf-434f-bafe-2d902b80001a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 38,
            "page_width": 612,
            "page_height": 792,
            "content": "4: Lexical Conventions\r\nComments\r\nThe pound sign character (#) introduces a comment. Comments that start with a #\r\nextend through the end of the line on which they appear. You can also use\r\nC-language notation /*...*/ to delimit comments.\r\nThe assembler uses cpp (the C language preprocessor) to preprocess assembler code.\r\nBecause cpp interprets a # symbol in the first column as pragmas (compiler\r\ndirectives), do not start a # comment in the first column.\r\nIdentifiers\r\nAn identifier consists of a case-sensitive sequence of alphanumeric characters,\r\nincluding these:\r\n• . (period)\r\n• _ (underscore)\r\n• $ (dollar sign)\r\nThe first character of an identifier cannot be numeric.\r\nIf an identifier is not defined to the assembler (only referenced), the assembler\r\nassumes that the identifier is an external symbol. The assembler treats the identifier\r\nlike a .globl pseudo-operation (see Chapter 8, \"Pseudo Op-Codes (Directives)\", page\r\n109). If the identifier is defined to the assembler and the identifier has not been\r\nspecified as global, the assembler assumes that the identifier is a local symbol.\r\nConstants\r\nThe assembler has these constants:\r\n• Scalar constants\r\n• Floating-point constants\r\n• String constants\r\n16 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/3fa1d238-78bf-434f-bafe-2d902b80001a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=26396b285811410577d113717ec1af1d1232ccd17866bb1a2549e83ad221b833",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "43c9928f-732e-4f67-aa00-6e7b2db31e09",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 39,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nScalar Constants\r\nThe assembler interprets all scalar constants as twos-complement numbers. In 32-bit\r\nmode, a scalar constant is 32 bits. 64 bits is the size of a scalar constant in 64-bit\r\nmode. Scalar constants can be any of the alphanumeric characters\r\n0123456789abcdefABCDEF. You can use an all or LL suffix to identify a 64–bit\r\nconstant.\r\nScalar constants can be one of the following:\r\n• Decimal constants, which consist of a sequence of decimal digits without a leading\r\nzero.\r\n• Hexadecimal constants, which consist of the characters 0x (or 0X) followed by a\r\nsequence of digits.\r\n• Octal constants, which consist of a leading zero followed by a sequence of digits\r\nin the range 0..7.\r\nFloating-Point Constants\r\nFloating-point constants can appear only in .float and .double pseudo-operations\r\n(directives) (see Chapter 8, \"Pseudo Op-Codes (Directives)\", page 109), and in the\r\nfloating-point Load Immediate instructions (see Chapter 6, \"Coprocessor Instruction\r\nSet\", page 61). Floating-point constants have this format:\r\n+d1[.d2] [e|E+d3]\r\nwhere:\r\n• d1 is written as a decimal integer and denotes the integral part of the\r\nfloating-point value.\r\n• d2 is written as a decimal integer and denotes the fractional part of the\r\nfloating-point value.\r\n• d3 is written as a decimal integer and denotes a power of 10.\r\n• The “+” symbol is optional.\r\nFor example:\r\n21.73E-3\r\n007–2418–006 17",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/43c9928f-732e-4f67-aa00-6e7b2db31e09.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8d75ce516e00c46a3cbc46de3cd1340a4c945baa66116d7ce712993262661637",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 411
      },
      {
        "segments": [
          {
            "segment_id": "5ef78f8c-09ca-4860-b285-38067fb5adad",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 40,
            "page_width": 612,
            "page_height": 792,
            "content": "4: Lexical Conventions\r\nrepresents the number .02173.\r\nOptionally, .float and .double directives may use hexadecimal floating-point\r\nconstants instead of decimal ones. A hexadecimal floating-point constant consists of:\r\n<+ or -> 0x <1 or 0 or nothing> . <hex digits> H 0x <hex digits>\r\nThe assembler places the first set of hex digits (excluding the 0 or 1 preceding the\r\ndecimal point) in the mantissa field of the floating-point format without attempting to\r\nnormalize it. It stores the second set of hex digits into the exponent field without\r\nbiasing them. It checks that the exponent is appropriate if the mantissa appears to be\r\ndenormalizing. Hexadecimal floating-point constants are useful for generating IEEE\r\nspecial symbols, and for writing hardware diagnostics.\r\nFor example, either of the following generates a single-precision “1.0”:\r\n.float 1.0e+0\r\n.float 0x1.0h0x7f\r\nString Constants\r\nString constants begin and end with double quotation marks (”).\r\nThe assembler observes C language backslash conventions. For octal notation, the\r\nbackslash conventions require three characters when the next character can be\r\nconfused with the octal number. For hexadecimal notation, the backslash conventions\r\nrequire two characters when the next character can be confused with the hexadecimal\r\nnumber (that is, use a 0 for the first character of a single character hex number).\r\nThe assembler follows the backslash conventions shown in Table 4-1.\r\nTable 4-1 Backslash Conventions\r\nConvention Meaning\r\n\\a Alert (0x07)\r\n\\b Backspace (0x08)\r\n\\f Form feed (0x0c)\r\n\\n Newline (0x0a)\r\n\\r Carriage return (0x0d)\r\n18 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/5ef78f8c-09ca-4860-b285-38067fb5adad.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=62b18fc9356431c763e58ce4b86d712b3f8fa8f3b5ef8fe3add56a8fa6bee73d",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6a9c6389-1497-4d55-8744-48e9ae5b5bdf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 41,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nConvention Meaning\r\n\\t horizontal tab (0x09)\r\n\\v Vertical feed (0x0b)\r\n\\\\ Backslash (0x5c)\r\n\\\" Double quotation mark (0x22)\r\n\\’ Single quotation mark (0x27)\r\n\\000 Character whose octal value is 000\r\n\\Xnn Character whose hexadecimal value is nn\r\nMultiple Lines Per Physical Line\r\nYou can include multiple statements on the same line by separating the statements\r\nwith semicolons. The assembler does not recognize semicolons as separators when\r\nthey follow comment symbols (# or /*).\r\nSection and Location Counters\r\nAssembled code and data fall in one of the sections shown in Figure 4-1.\r\n007–2418–006 19",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/6a9c6389-1497-4d55-8744-48e9ae5b5bdf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ed0d83668a9ed687a23a3671d1529f96dd2ec77b77760143daa81242503fb406",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "dce1b743-c192-4bdc-bf68-14481a8f2501",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 42,
            "page_width": 612,
            "page_height": 792,
            "content": "4: Lexical Conventions\r\n.text\r\n.rdata\r\n.data\r\n.lit8\r\n.lit4\r\n.sdata\r\n.sbss\r\n.bss\r\nText section\r\nRead-only data section\r\nData sections\r\nSmall data section, addressed\r\nthrough register $gp\r\nSmall bss section, addressed\r\nthrough register $gp\r\nbss (block started by storage)\r\nsection, which loads zero-initialized\r\ndata\r\na12033\r\nFigure 4-1 Section and Location Counters\r\nThe assembler always generates the text section before other sections. Additions to\r\nthe text section happen in four-byte units. Each section has an implicit location\r\ncounter, which begins at zero and increments by one for each byte assembled in the\r\nsection.\r\nThe bss section holds zero-initialized data. If a .lcomm pseudo-op defines a variable\r\n(see Chapter 8, \"Pseudo Op-Codes (Directives)\", page 109), the assembler assigns that\r\nvariable to the bss (block started by storage) section or to the sbss (short block\r\nstarted by storage) section depending on the variable’s size. The default variable size\r\nfor sbss is 8 or fewer bytes.\r\n20 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/dce1b743-c192-4bdc-bf68-14481a8f2501.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1a606e1f08faf283dc560b5747ae867c6a6c0dafc74937bd2a45999b45c03b4b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 491
      },
      {
        "segments": [
          {
            "segment_id": "b8f6e975-8f44-4214-918e-41e24a262942",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 43,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nThe command line option –G for each compiler (C, Pascal, Fortran 77, or the\r\nassembler), can increase the size of sbss to cover all but extremely large data items.\r\nThe link editor issues an error message when the –G value gets too large. If a –G\r\nvalue is not specified to the compiler, 8 is the default. Items smaller than, or equal to,\r\nthe specified size go in sbss. Items greater than the specified size go in bss.\r\nBecause you can address items much more quickly through $gp than through a more\r\ngeneral method, put as many items as possible in sdata or sbss. The size of sdata\r\nand sbss combined must not exceed 64 KB.\r\nStatements\r\nEach statement consists of an optional label, an operation code, and the operand(s).\r\nThe system allows these statements:\r\n• Null statements\r\n• Keyword statements\r\nLabel Definitions\r\nA label definition consists of an identifier followed by a colon. Label definitions\r\nassign the current value and type of the location counter to the name. An error\r\nresults when the name is already defined, the assigned value changes the label\r\ndefinition, or both conditions exist.\r\nLabel definitions always end with a colon. You can put a label definition on a line by\r\nitself.\r\nA generated label is a single numeric value (1...255). To reference a generated label,\r\nput an f (forward) or a b (backward) immediately after the digit. The reference tells\r\nthe assembler to look for the nearest generated label that corresponds to the number\r\nin the lexically forward or backward direction.\r\nNull Statements\r\nA null statement is an empty statement that the assembler ignores. Null statements\r\ncan have label definitions. For example, this line has three null statements in it:\r\nlabel: ; ;\r\n007–2418–006 21",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/b8f6e975-8f44-4214-918e-41e24a262942.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b4ba1050d055e0f220ca92a9e5fbdd5202e89a6216528f9a1f82d260e3746d76",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0b58fbad-3a77-4487-a673-62346706881c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 44,
            "page_width": 612,
            "page_height": 792,
            "content": "4: Lexical Conventions\r\nKeyword Statements\r\nA keyword statement begins with a predefined keyword. The syntax for the rest of\r\nthe statement depends on the keyword. All instruction opcodes are keywords. All\r\nother keywords are assembler pseudo-operations (directives).\r\nExpressions\r\nAn expression is a sequence of symbols that represent a value. Each expression and\r\nits result have data types. The assembler does arithmetic in twos-complemet integers\r\n(32 bits of precision in 32-bit mode; 64 bits of precision in 64-bit mode). Expressions\r\nfollow precedence rules and consist of:\r\n• Operators\r\n• Identifiers\r\n• Constants\r\nAlso, you may use a single character string in place of an integer within an\r\nexpression. Thus:\r\n.byte ‘‘a’’ ; .word ‘‘a’’+0x19\r\nis equivalent to:\r\n.byte 0x61 ; .word 0x7a\r\nPrecedence\r\nUnless parentheses enforce precedence, the assembler evaluates all operators of the\r\nsame precedence strictly from left to right. Because parentheses also designate\r\nindex-registers, ambiguity can arise from parentheses in expressions. To resolve this\r\nambiguity, put a unary + in front of parentheses in expressions.\r\nThe assembler has three precedence levels, which are listed here from lowest to\r\nhighest precedence:\r\nleast binding, lowest\r\nprecedence\r\nbinary +,-\r\n22 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/0b58fbad-3a77-4487-a673-62346706881c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4441c65f552572b202a2c7ae823a74d8d7fc0e322c1326d57ed4a03f74e654e2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 485
      },
      {
        "segments": [
          {
            "segment_id": "d1149725-e33a-4729-aa48-ddc3ea8c248d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 45,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\n#\r\n# binary *,/,5,<<,>>,^,&, |\r\n#\r\nmost binding, highest\r\nprecedence\r\nunary —,+,~\r\nNote: The assembler’s precedence scheme differs from that of the C language.\r\nExpression Operators\r\nFor expressions, you can rely on the precedence rules, or you can group expressions\r\nwith parentheses. The assembler recognizes the operators listed in Table 4-2.\r\nTable 4-2 Expression Operators\r\nOperator Meaning\r\n+ Addition\r\n- Subtraction\r\n* Multiplication\r\n/ Division\r\n% Remainder\r\n<< Shift Left\r\n>> Shift Right (sign NOT extended)\r\n^ Bitwise Exclusive-OR\r\n& Bitwise AND\r\n| Bitwise OR\r\n- Minus (unary)\r\n+ Identity (unary)\r\n~ Complement\r\n007–2418–006 23",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/d1149725-e33a-4729-aa48-ddc3ea8c248d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ae0d5ddb8eee237e838ba09f5bbdccbe59827b093d80722ff137729a0e47cb7a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d3e67c47-a191-4247-8c8d-297be69d6d0e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 46,
            "page_width": 612,
            "page_height": 792,
            "content": "4: Lexical Conventions\r\nData Types\r\nThe assembler manipulates several types of expressions. Each symbol you reference\r\nor define belongs to one of the categories shown in Table 4-3, page 24.\r\nTable 4-3 Data Types\r\nType Description\r\nundefined Any symbol that is referenced but not defined becomes global undefined, and this\r\nmodule will attempt to import it. The assembler uses 32-bit addressing to access\r\nthese symbols. (Declaring such a symbol in a .globl pseudo-op merely makes its\r\nstatus clearer).\r\nsundefined A symbol defined by a .extern pseudo-op becomes global small undefined if its size\r\nis greater than zero but less than the number of bytes specified by the –G option on\r\nthe command line (which defaults to 8). The linker places these symbols within a\r\n64KB region pointed to by the $gp register, so that the assembler can use economical\r\n16-bit addressing to access them.\r\nabsolute A constant defined in an “=” expression.\r\ntext The text section contains the program’s instructions, which are not modifiable during\r\nexecution. Any symbol defined while the .text pseudo-op is in effect belongs to the\r\ntext section.\r\ndata The data section contains memory that the linker can initialize to nonzero values\r\nbefore your program begins to execute. Any symbol defined while the .data\r\npseudo-op is in effect belongs to the data section. The assembler uses 32-bit or 64-bit\r\naddressing to access these symbols (depending on whether you are in 32-bit or 64-bit\r\nmode).\r\nsdata This category is similar to data, except that defining a symbol while the .sdata\r\n(“small data”) pseudo-op is in effect causes the linker to place it within a 64KB region\r\npointed to by the $gp register, so that the assembler can use economical 16-bit\r\naddressing to access it.\r\n24 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/d3e67c47-a191-4247-8c8d-297be69d6d0e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=997ef9aff905bf9245a966b60ed4bba0ca3f736550965163482abae7f63aa2b4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 388
      },
      {
        "segments": [
          {
            "segment_id": "1a73e12e-3a27-4386-a3fb-f8c1c7cb4c0a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 47,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nType Description\r\nrdata Any symbol defined while the .rdata pseudo-op is in effect belongs to this category,\r\nwhich is similar to data, but may not be modified during execution.\r\nbss and sbss The bss and sbss sections consist of memory which the kernel loader initializes to zero\r\nbefore your program begins to execute. Any symbol defined in a .comm or .lcomm\r\npseudo-op belongs to these sections (except that a .data, .sdata, or .rdata\r\npseudo-op can override a .comm directive). If its size is less than the number of bytes\r\nspecified by the –G option on the command line (which defaults to 8), it belongs to\r\nsbss (“small bss”), and the linker places it within a 64 KB region pointed to by the\r\n$gp register so that the assembler can use economical 16-bit addressing to access it.\r\nOtherwise, it belongs to bss and the assembler uses 32-bit or 64-bit addressing\r\n(depending on whether you are in 32-bit or 64-bit mode). Local symbols in bss or\r\nsbss defined by .lcomm are allocated memory by the assembler; global symbols are\r\nallocated memory by the link editor; and symbols defined by .comm are overlaid\r\nupon like-named symbols (in the fashion of Fortran COMMON blocks) by the link editor.\r\nSymbols in the undefined and small undefined categories are always global (that is,\r\nthey are visible to the link editor and can be shared with other modules of your\r\nprogram). Symbols in the absolute, text, data, sdata, rdata, bss, and sbss\r\ncategories are local unless declared in a .globl pseudo-op.\r\nType Propagation in Expressions\r\nWhen expression operators combine expression operands, the result’s type depends\r\non the types of the operands and on the operator. Expressions follow these type\r\npropagation rules:\r\n• If an operand is undefined, the result is undefined.\r\n• If both operands are absolute, the result is absolute.\r\n• If the operator is + and the first operand refers to a relocatable text-section,\r\ndata-section, bss-section, or an undefined external, the result has the postulated\r\ntype and the other operand must be absolute.\r\n• If the operator is – and the first operand refers to a relocatable text-section,\r\ndata-section, or bss-section symbol, the second operand can be absolute (if it\r\npreviously defined) and the result has the first operand’s type; or the second\r\noperand can have the same type as the first operand and the result is absolute.\r\nIf the first operand is external undefined, the second operand must be absolute.\r\n007–2418–006 25",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/1a73e12e-3a27-4386-a3fb-f8c1c7cb4c0a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2f52fc67b2158db30fd26519f878ef0645e10ea8656fc6e258405f128374d136",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 413
      },
      {
        "segments": [
          {
            "segment_id": "f551552b-dfdc-40eb-b03c-38f50e6f73ec",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 48,
            "page_width": 612,
            "page_height": 792,
            "content": "4: Lexical Conventions\r\n• The operators * , /, % , << , >> , ~, ^ , & , and | apply only to absolute symbols.\r\nRelocations\r\nWith -n32 and -64 compiles, it is possible to specify a relocation explicitly in\r\nassembly. For example:\r\nlui $24,%hi(.data)\r\nThis example emits a lui$24,0 instruction with a R_MIPS_H16 relocation that\r\nreferences the .data symbol.\r\nThe following table lists the available relocations:\r\nAS-SYNTAX ELF Relocation\r\n%hi R_MIPS_HI16\r\n%lo R_MIPS_LO16\r\n%gp_rel R_MIPS_GPREL\r\n%half R_MIPS_16\r\n%call6 R_MIPS_CALL6\r\n%call_hi R_MIPS_CALL_H16\r\n%call_lo R_MIPS_CALL_LO16\r\n%got R_MIPS_GOT\r\n%got_disp R_MIPS_GOT_DISP\r\n%got_hi R_MIPS_GOT_HI16\r\n%got_lo R_MIPS_GOT_LO16\r\n%got_page R_MIPS_GOT_PAGE\r\n%got_ofst R_MIPS_GOT_OFST\r\n%neg R_MIPS_SUB\r\n%higher R_MIPS_HIGHER\r\n%highest R_MIPS_HIGHEST\r\n26 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/f551552b-dfdc-40eb-b03c-38f50e6f73ec.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=76936bc30209c20c64d056ff3d453e4428af1f3d8a1bed8994d3702bb5ab37c2",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ef0e117b-f30a-4c8e-9682-6d0aad07ba2c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 49,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 5\r\nThe Instruction Set\r\nThis chapter describes instruction notation and discusses assembler instructions for\r\nthe main processor. Chapter 6, \"Coprocessor Instruction Set\", page 61, describes\r\ncoprocessor notation and instructions.\r\nInstruction Classes\r\nThe assembler has these classes of instructions for the main processor:\r\n• Load and Store Instructions. These instructions load immediate values and move\r\ndata between memory and general registers.\r\n• Computational Instructions. These instructions do arithmetic and logical\r\noperations for values in registers.\r\n• Jump and Branch Instructions. These instructions change program control flow.\r\nIn addition, there are two other classes of instruction:\r\n• Coprocessor Interface. These instructions provide standard interfaces to the\r\ncoprocessors.\r\n• Special Instructions. These instructions do miscellaneous tasks.\r\nReorganization Constraints and Rules\r\nTo maximize performance, the goal of RISC designs is to achieve an execution rate of\r\none machine cycle per instruction. When writing assembly language instructions, you\r\nmust be aware of the rules to achieve this goal. You can find this information in the\r\nappropriate microprocessor manual for your architecture (for example, the MIPS\r\nR8000 Microprocessor User’s Manual).\r\nInstruction Notation\r\nThe tables in this chapter list the assembler format for each load, store, computational,\r\njump, branch, coprocessor, and special instruction. The format consists of an op-code\r\n007–2418–006 27",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/ef0e117b-f30a-4c8e-9682-6d0aad07ba2c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a21c0db3943f6f686b777230e8dc26ec38b3ef150e7cbd847dbfd526d9328556",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9faf8ca3-ed30-40d0-8746-17017b9a2ff1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 50,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nand a list of operand formats. The tables list groups of closely related instructions; for\r\nthose instructions, you can use any op-code with any specified operand.\r\nOperands can take any of these formats:\r\n• Memory references. For example, a relocatable symbol +/– an expression(register).\r\n• Expressions (for immediate values).\r\n• Two or three operands. For example, ADD $3,$4 is the same as ADD $3,$3,$4.\r\nThe operands in the table in this chapter have the following meanings\r\nOperand Description\r\naddress Symbolic expression (see Chapter 2)\r\nbreakcode Value that determines the break\r\ndestination Destination register\r\ndestination/src1 Destination register is also source register 1\r\ndest-copr Destination coprocessor register\r\ndest-gpr Destination general register\r\nexpression Absolute value\r\nimmediate Expression with an immediate value\r\nlabel Symbolic label, possibly label+offset\r\noperation Coprocessor-specific operation\r\nreturn Register containing the return address\r\nsource Source register\r\nsrc1, src2 Source registers\r\nsrc-copr Coprocessor register from which values are assigned\r\nsrc-gpr General register from which values are assigned\r\ntarget Register containing the target\r\nz Coprocessor number in the range 0..2\r\n28 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/9faf8ca3-ed30-40d0-8746-17017b9a2ff1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f9fcd414fb9512db7a97950990114a91a6a23c6c78b9f988dddc72b1dd9e6cf0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 484
      },
      {
        "segments": [
          {
            "segment_id": "ac6e9a0e-2643-45f3-b1cd-d54a419fff28",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 51,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nInstruction Set\r\nThe tables in this section summarize the assembly language instruction set. Most of\r\nthe assembly language instructions have direct machine equivalents.\r\nLoad and Store Instructions\r\nLoad and store are immediate type intructions that move data between memory and\r\nthe general registers. Table 5-1 summarizes the load and store instruction format, and\r\nTable 5-2 and Table 5-3 provide more detailed descriptions for each load instruction.\r\nTable 5-4, page 35, and Table 5-5, page 37, provide details of each store instruction.\r\nTable 5-1 Load and Store Format Summary\r\nDescription Op-code Operands\r\nLoad Address LA destination, address\r\nLoad Doubleword Address DLA\r\nLoad Byte LB\r\nLoad Byte Unsigned LBU\r\nLoad Halfword LH\r\nLoad Halfword Unsigned LHU\r\nLoad Linked * LL\r\nLoad Word LW\r\nLoad Word Left LWL\r\nLoad Word Right LWR\r\nLoad Doubleword LD\r\nUnaligned Load Halfword ULH\r\nUnaligned Load Halfword Unsigned ULHU\r\n007–2418–006 29",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/ac6e9a0e-2643-45f3-b1cd-d54a419fff28.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c8c70ed488470cce17ac85e9034111f6f3fb7ea6154580d911bc21e15376a8eb",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "57cc15a4-cb77-4d6b-861e-c278482c66de",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 52,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nDescription Op-code Operands\r\nUnaligned Load Word ULW\r\nLoad Immediate LI destination, expression\r\nLoad Doubleword Immediate DLI\r\nStore Double Right SDR\r\nUnaligned Store Doubleword USD\r\nLoad Upper Immediate LUI\r\nStore Byte SB source, address\r\nStore Conditional * SC\r\nStore Double SD\r\nStore Halfword SH\r\nStore Word Left SWL\r\nStore Word Right SWR\r\nStore Word SW\r\nUnaligned Store Halfword USH\r\nUnaligned Store Word USW\r\nLoad Doubleword LD destination, address\r\nLoad Linked Doubleword LLD\r\nLoad Word Unsigned LWU\r\nLoad Doubleword Left LDL\r\nLoad Doubleword Right LDR\r\nUnaligned Load Double ULD\r\nStore Doubleword SD source, address\r\nStore Conditional Doubleword SCD\r\nStore Double Left SDL\r\n* not valid in MIPS1 architecture\r\n30 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/57cc15a4-cb77-4d6b-861e-c278482c66de.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e804f75aeb4860b6df383d41e8ff45e7b08f5ff683aeb254532a0e7ad22009f4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 260
      },
      {
        "segments": [
          {
            "segment_id": "e903cdd3-c565-42fc-a919-6d4413b1f2ce",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 53,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nLoad Instruction Descriptions\r\nFor all load instructions, the effective address is the 32-bit twos-complement sum of\r\nthe contents of the index-register and the (sign-extended) 16-bit offset. Instructions\r\nthat have symbolic labels imply an index register, which the assembler determines.\r\nThe assembler supports additional load instructions, which can produce multiple\r\nmachine instructions.\r\nNote: Load instructions can generate many code sequences for which the link editor\r\nmust fix the address by resolving external data items.\r\nTable 5-2 Load Instruction Descriptions\r\nInstruction Name Description\r\nLoad Address (LA) Loads the destination register with the effective 32-bit address of the specified\r\ndata item.\r\nLoad Doubleword Address\r\n(DLA)\r\nLoads the destination register with the effective 64-bit address of the specified\r\ndata item (MIPS3 and above only).\r\nLoad Byte (LB) Loads the least-significant byte of the destination register with the contents of\r\nthe byte that is at the memory location specified by the effective address. The\r\nsystem treats the loaded byte as a signed value: bit seven is extended to fill the\r\nthree most-significant bytes.\r\nLoad Byte Unsigned (LBU) Loads the least-significant byte of the destination register with the contents of\r\nthe byte that is at the memory location specified by the effective address.\r\nBecause the system treats the loaded byte as an unsigned value, it fills the\r\nthree most-significant bytes of the destination register with zeros.\r\nLoad Halfword (LH) Loads the two least-significant bytes of the destination register with the\r\ncontents of the halfword that is at the memory location specified by the\r\neffective address. The system treats the loaded halfword as a signed value. If\r\nthe effective address is not even, the system signals an address error exception.\r\nLoad Halfword Unsigned\r\n(LHU)\r\nLoads the least-significant bits of the destination register with the contents of\r\nthe halfword that is at the memory location specified by the effective address.\r\nBecause the system treats the loaded halfword as an unsigned value, it fills the\r\ntwo most-significant bytes of the destination register with zeros. If the effective\r\naddress is not even, the system signals an address error exception.\r\n007–2418–006 31",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/e903cdd3-c565-42fc-a919-6d4413b1f2ce.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b11dfddebc9c8396f5b5abe8b93ede9a30da47ca1cf5b255ed269c89fda76929",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 346
      },
      {
        "segments": [
          {
            "segment_id": "8cd68d5a-5f74-4546-88ab-0f12c7a3e242",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 54,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nInstruction Name Description\r\nLoad Linked (LL) Loads the destination register with the contents of the word that is at the\r\nmemory location. This instruction performs an SYNC operation implicitly; all\r\nloads and stores to shared memory fetched prior to the LL must access\r\nmemory before the LL, and loads and stores to shared memory fetched\r\nsubsequent to the LL must access memory after the LL. Load Linked and Store\r\nConditional can be use to update memory locations atomically. The system\r\nsignals an address exception when the effective address is not divisible by four.\r\nThis instruction is not valid in the MIPS1 architectures.\r\nLoad Word (LW) Loads the destination register with the contents of the word that is at the\r\nmemory location. The system replaces all bytes of the register with the\r\ncontents of the loaded word. The system signals an address error exception\r\nwhen the effective address is not divisible by four.\r\nLoad Word Left (LWL) Loads the sign; that is, Load Word Left loads the destination register with the\r\nmost-significant bytes of the word specified by the effective address. The\r\neffective address must specify the byte containing the sign. In a big-endian\r\nsystem, the effective address specifies the lowest numbered byte; in a\r\nlittle-endian system, the effective address specifies the highest numbered byte.\r\nOnly the bytes which share the same aligned word in memory are merged into\r\nthe destination register.\r\nLoad Word Right (LWR) Loads the lowest precision bytes; that is, Load Word Right loads the\r\ndestination register with the least-significant bytes of the word specified by the\r\neffective address. The effective address must specify the byte containing the\r\nleast-significant bits. In a big-endian configuration, the effective address\r\nspecifies the highest numbered byte; in a little-endian configuration, the\r\neffective address specifies the lowest numbered byte. Only the bytes which\r\nshare the same aligned word in memory are merged into the destination\r\nregister.\r\nLoad Doubleword (LD) LD is a machine instruction in the MIPS3 architecture. For the -mips1 [default]\r\nand -mips2 option: Loads the register pair (destination and destination +1) with\r\nthe two successive words specified by the address. The destination register\r\nmust be the even register of the pair. When the address is not on a word\r\nboundary, the system signals an address error exception.\r\nNote: This is retained for use with the -mips1 and -mips2 options to provide\r\nbackward compatibility only.\r\n32 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/8cd68d5a-5f74-4546-88ab-0f12c7a3e242.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=857b4ddb7147bc700451839a2ecad7003da735e99653c5cc908eccf5cd84dd24",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 399
      },
      {
        "segments": [
          {
            "segment_id": "6219ec79-6d99-4dc9-9de7-d7eb7badaf18",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 55,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nInstruction Name Description\r\nUnaligned Load Halfword\r\n(ULH)\r\nLoads a halfword into the destination register from the specified address and\r\nextends the sign of the halfword. Unaligned Load Halfword loads a halfword\r\nregardless of the halfword’s alignment in memory.\r\nUnaligned Load Halfword\r\nUnsigned (ULHU)\r\nLoads a halfword into the destination register from the specified address and\r\nzero extends the halfword. Unaligned Load Halfword Unsigned loads a\r\nhalfword regardless of the halfword’s alignment in memory.\r\nUnaligned Load Word\r\n(ULW)\r\nLoads a word into the destination register from the specified address.\r\nUnaligned Load Word loads a word regardless of the word’s alignment in\r\nmemory.\r\nLoad Immediate (LI) Loads the destination register with the 32-bit value of an expression that can be\r\ncomputed at assembly time.\r\nNote: Load Immediate can generate any efficient code sequence to put a\r\ndesired value in the register.\r\nLoad Doubleword\r\nImmediate (DLI)\r\nLoads the destination register with the 64-bit value of an expression that can be\r\ncomputed at assembly time.\r\nNote: Load Immediate can generate any efficient code sequence to put a\r\ndesired value in the register (MIPS3 and above only).\r\nLoad Upper Immediate\r\n(LUI)\r\nLoads the most-significant half of a register with the expression’s value. The\r\nsystem fills the least-significant half of the register with zeros. The expression’s\r\nvalue must be in the range –32768...65535.\r\n007–2418–006 33",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/6219ec79-6d99-4dc9-9de7-d7eb7badaf18.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=206444853c22a9917eafc64a5a7ccdab210cefce2845a8ae4944ea05c15e759e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 224
      },
      {
        "segments": [
          {
            "segment_id": "2962a81f-c6db-4733-9c9b-42e76d680f78",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 56,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nTable 5-3 Load Instruction Descriptions for MIPS3/4 Architecture Only\r\nInstruction Name Description\r\nLoad Doubleword (LD) Loads the destination register with the contents of the doubleword that is at the\r\nmemory location. The system replaces all bytes of the register with the contents\r\nof the loaded doubleword. The system signals an address error exception when\r\nthe effective address is not divisible by eight.\r\nLoad Linked Doubleword\r\n(LLD)\r\nLoads the destination register with the contents of the doubleword that is\r\ncurrently in the memory location. This instruction performs a SYNC operation\r\nimplicitly. Load Linked Doubleword and Store Conditional Doubleword can be\r\nused to update memory locations atomically.\r\nLoad Word Unsigned(LWU) Loads the least-significant bits of the destination register with the contents of the\r\nword (32 bits) that is at the memory location specified by the effective address.\r\nBecause the system treats the loaded word as an unsigned value, it fills the four\r\nmost-significant bytes of the destination register with zeros. If the effective\r\naddress is not divisible by four, the system signals an address error exception.\r\nLoad Doubleword Left\r\n(LDL)\r\nLoads the destination register with the most-significant bytes of the doubleword\r\nspecified by the effective address. The effective address must specify the byte\r\ncontaining the sign. In a big-endian configuration, the effective address\r\nspecifies the lowest numbered byte; in a little-endian machine, the effective\r\naddress specifies the highest numbered byte. Only the bytes which share the\r\nsame aligned doubleword in memory are merged into the destination register.\r\nLoad Doubleword Right\r\n(LDR)\r\nLoads the destination register with the least-significant bytes of the doubleword\r\nspecified by the effective address. The effective address must specify the byte\r\ncontaining the least-significant bits. In a bid-endian machine, the effective\r\naddress specifies the highest numbered byte. In a little-endian machine, the\r\neffective address specifies the lowest numbered byte. Only the bytes which\r\nshare the same aligned doubleword in memory are merged into the destination\r\nregister.\r\nUnaligned Load\r\nDoubleword (ULD)\r\nLoads a doubleword into the destination register from the specified address.\r\nULD loads a doubleword regardless of the doubleword’s alignment in memory.\r\nStore Instruction Descriptions\r\nFor all machine store instructions, the effective address is the 32-bit twos-complement\r\nsum of the contents of the index-register and the (sign-extended) 16-bit offset. The\r\n34 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/2962a81f-c6db-4733-9c9b-42e76d680f78.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e8aae0b5267d21c3e0d0ab88bc78a6f8df67bc91178318c71d04166c8f620772",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 377
      },
      {
        "segments": [
          {
            "segment_id": "5637f0af-f59c-49fd-ab47-323c81449e66",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 57,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nassembler supports additional store instructions, which can produce multiple machine\r\ninstructions. Instructions that have symbolic labels imply an index-register, which the\r\nassembler determines.\r\nTable 5-4 Store Instruction Descriptions\r\nInstruction Name Description\r\nStore Byte (SB) Stores the contents of the source register’s least-significant byte in the byte\r\nspecified by the effective address.\r\nStore Conditional (SC) Stores the contents of a word from the source register into the memory location\r\nspecified by the effective address. This instruction implicitly performs a SYNC\r\noperation; all loads and stores to shared memory fetched prior to the sc must\r\naccess memory before the sc, and loads and stores to shared memory fetched\r\nsubsequent to the sc must access memory after the sc. If any other processor or\r\ndevice has modified the physical address since the time of the previous Load\r\nLinked instruction, or if an RFE or ERET instruction occurs between the Load\r\nLinked and this store instruction, the store fails. The success or failure of the\r\nstore operation (as defined above) is indicated by the contents of the source\r\nregister after execution of the instruction. A successful store sets it to 1; and a\r\nfailed store sets it to 0. The machine signals an address exception when the\r\neffective address is not divisible by four.\r\nThis instruction is not valid in the MIPS1 architectures.\r\nStore Doubleword (SD) SD is a machine instruction in the MIPS3 architecture. For the -mips1 [default]\r\nand -mips2 options: Stores the contents of the register pair in successive\r\nwords, which the address specifies. The source register must be the even\r\nregister of the pair, and the storage address must be word aligned.\r\nNote: This is retained for use with the -mips1 and -mips2 options to provide\r\nbackward compatibility only.\r\nStore Halfword (SH) Stores the two least-significant bytes of the source register in the halfword that\r\nis at the memory location specified by the effective address. The effective\r\naddress must be divisible by two; otherwise the machine signals an address\r\nerror exception.\r\n007–2418–006 35",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/5637f0af-f59c-49fd-ab47-323c81449e66.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=038ffb24e56bb35a61e99bb93afefe60fb707372cc921f30023614ade68777ad",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 337
      },
      {
        "segments": [
          {
            "segment_id": "5bdb2e23-f27c-4e12-b8ab-66bd457e0874",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 58,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nInstruction Name Description\r\nStore Word Left (SWL) Stores the most-significant bytes of a word in the memory location specified by\r\nthe effective address. The contents of the word at the memory location,\r\nspecified by the effective address, are shifted right so that the leftmost byte of\r\nthe unaligned word is in the addressed byte position. The stored bytes replace\r\nthe corresponding bytes of the effective address. The effective address’s last\r\ntwo bits determine how many bytes are involved.\r\nStore Word Right (SWR) Stores the least-significant bytes of a word in the memory location specified by\r\nthe effective address. The contents of the word at the memory location,\r\nspecified by the effective address, are shifted left so that the right byte of the\r\nunaligned word is in the addressed byte position. The stored bytes replace the\r\ncorresponding bytes of the effective address. The effective address’s last two\r\nbits determine how many bytes are involved.\r\nStore Word (SW) Stores the contents of a word from the source register in the memory location\r\nspecified by the effective address. The effective address must be divisible by\r\nfour; otherwise the machine signals an address error exception.\r\nUnaligned Store Halfword\r\n(USH)\r\nStores the contents of the two least-significant bytes of the source register in a\r\nhalfword that the address specifies. The machine does not require alignment\r\nfor the storage address.\r\nUnaligned Store Word\r\n(USW)\r\nStores the contents of the source register in a word specified by the address.\r\nThe machine does not require alignment for the storage address.\r\n36 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/5bdb2e23-f27c-4e12-b8ab-66bd457e0874.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=da3826f751e0bce9d6311aa4aa205002dc0590f11d6113d47e3e0107d91a7dfe",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 258
      },
      {
        "segments": [
          {
            "segment_id": "4ca869e7-ccdf-4607-bbcb-5f971143ff47",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 59,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nTable 5-5 Store Instruction Descriptions for MIPS3/4 Architecture Only\r\nInstruction Name Description\r\nStore Doubleword (SD) Stores the contents of a doubleword from the source register in the memory\r\nlocation specified by the effective address. The effective address must be\r\ndivisible by eight, otherwise the machine signals an address error exception.\r\nStore Conditional\r\nDoubleword (SCD)\r\nStores the contents of a doubleword from the source register into the memory\r\nlocations specified by the effective address. This instruction implicitly performs\r\na SYNC operation. If any other processor or device has modified the physical\r\naddress since the time of the previous Load Linked instruction, or if an ERET\r\ninstruction occurs between the Load Linked instruction and this store\r\ninstruction, the store fails and is inhibited from taking place. The success or\r\nfailure of the store operation (as defined above) is indicated by the contents of\r\nthe source register after execution of this instruction. A successful store sets it\r\nto 1; and a failed store sets it to 0. The machine signals an address exception\r\nwhen the effective address is not divisible by eight.\r\nStore Doubleword Left\r\n(SDL)\r\nStores the most-significant bytes of a doubleword in the memory location\r\nspecified by the effective address. It alters only the doubleword in memory\r\nwhich contains the byte indicated by the effective address.\r\nStore Doubleword Right\r\n(SDR)\r\nStores the least-significant bytes of a doubleword in the memory location\r\nspecified by the effective address. It alters only the doubleword in memory\r\nwhich contains the byte indicated by the effective address.\r\nUnaligned Store\r\nDoubleword (USD)\r\nStores the contents of the source register in a doubleword specified by the\r\naddress. The machine does not require alignment for the storage address.\r\nComputational Instructions\r\nThe machine has general-purpose and coprocessor-specific computational instructions\r\n(for example, the floating-point coprocessor). This section describes general-purpose\r\ncomputational instructions.\r\nComputational Instructions\r\nComputational instructions perform the following operations on register values;\r\n• arithmetic\r\n007–2418–006 37",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/4ca869e7-ccdf-4607-bbcb-5f971143ff47.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d27942c8f8a7e511910ce7e4ec5649a45723e6bac2858d5baf4d9ecdccff810c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f31f0079-10d9-4c9b-9124-d2c74b5d468c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 60,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\n• logical\r\n• shift\r\n• multiply\r\n• divide\r\nTable 5-6 summarizes the computational format summaries, and Table 5-7, page 41,\r\nand Table 5-8, page 47, describe these instructions in more detail.\r\nTable 5-6 Computational Format Summaries\r\nDescription Op-code Operand\r\nAdd with Overflow ADD destination, src1, src2\r\nAdd without Overflow ADDU destination, src1, src2\r\nAND AND destination, src1, immediate\r\nDivide Signed DIV destination/src1, immediate\r\nDivide Unsigned DIVU\r\nExclusive-OR XOR\r\nMultiply MUL\r\nMultiply with Overflow MULO\r\nMultiply with Overflow Unsigned MULOU\r\nNOT OR NOR\r\nOR OR\r\nSet Equal SEQ\r\nSet Greater Than SGT\r\nSet Greater/Equal SGE\r\nSet Greater/Equal Unsigned SGEU\r\nSet Greater Unsigned SGTU\r\nSet Less Than SLT\r\nSet Less/Equal SLE\r\n38 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/f31f0079-10d9-4c9b-9124-d2c74b5d468c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6b3bf47f51218d19781fb47f0a409531c7222e55b3887cf4d85a06a046e45471",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 435
      },
      {
        "segments": [
          {
            "segment_id": "83099b16-6967-4f25-92a9-cb8147ee9f41",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 61,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nDescription Op-code Operand\r\nSet Less/Equal Unsigned SLEU\r\nSet Less Than Unsigned SLTU\r\nSet Not Equal SNE\r\nSubtract with Overflow SUB\r\nSubtract without Overflow SUBU\r\nRemainder Signed REM\r\nRemainder Unsigned REMU\r\nRotate Left ROL\r\nRotate Right ROR\r\nShift Right Arithmetic SRA\r\nShift Left Logical SLL\r\nShift Right Logical SRL\r\nAbsolute Value ABS destination, src1\r\nNegate with Overflow NEG destination/src1\r\nNegate without Overflow NEGU\r\nNOT NOT\r\nMove MOVE destination, src1\r\nMove Conditional on Not Zero MOVN destination, src1, src2\r\nMove Conditional on Zero MOVZ\r\nMultiply MULT src1,src2\r\nMultiply Unsigned MULTU\r\nTrap if Equal TEQ src1, src2\r\nTrap if not Equal TNE src1, immediate\r\nTrap if Less Than TLT\r\nTrap if Less than, Unsigned TLTU\r\nTrap if Greater Than or Equal TGE\r\nTrap if Greater than or Equal, Unsigned TGEU\r\n007–2418–006 39",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/83099b16-6967-4f25-92a9-cb8147ee9f41.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1d795778955e358eb10d04984a0844a1afb9403737843b3241b1e3b7a74fee8c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b362cbc4-1250-4e6b-9064-69b0846add58",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 62,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nDescription Op-code Operand\r\nDoubleword Add with Overflow DADD destination,src1, src2\r\ndestination/src1,src2\r\nDoubleword Add without Overflow DADDU destination, src1, immediate\r\ndestination/src1, immediate\r\nDoubleword Divide Signed DDIV\r\nDoubleword Divide Unsigned DDIVU\r\nDoubleword Multiply DMUL\r\nDoubleword Multiply with Overflow DMULO\r\nDoubleword Multiply with Overflow Unsigned DMULOU\r\nDoubleword Subtract with Overflow DSUB\r\nDoubleword Subtract without Overflow DSUBU\r\nDoubleword Remainder Signed DREM\r\nDoubleword Remainder Unsigned DREMU\r\nDoubleword Rotate Left DROL\r\nDoubleword Rotate Right DROR\r\nDoubleword Shift Right Arithmetic DSRA\r\nDoubleword Shift Left Logical DSLL\r\nDoubleword Shift Right Logical DSRL\r\nDoubleword Absolute Value DABS destination, src1\r\nDoubleword Negate with Overflow DNEG destination/src1\r\nDoubleword Negate without Overflow DNEGU\r\nDoubleword Multiply DMULT src1, src2\r\nDoubleword Multiply Unsigned DMULTU src1, immediate\r\n40 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/b362cbc4-1250-4e6b-9064-69b0846add58.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c302b3facf8a0ebb89b71897179a41d769bf9dbe56b7ad265bbfa8855a976f24",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 252
      },
      {
        "segments": [
          {
            "segment_id": "871819df-7b31-4831-b156-b6832cb0f8a7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 63,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nComputational Instruction Descriptions\r\nTable 5-7 Computational Instruction Descriptions\r\nInstruction Name Description\r\nAbsolute Value (ABS) Computes the absolute value of the contents of src1 and puts the result in the\r\ndestination register. If the value in src1 is –2147483648, the machine signals an\r\noverflow exception.\r\nAdd with Overflow (ADD) Computes the twos-complement sum of two signed values. This instruction\r\nadds the contents of src1 to the contents of src2, or it can add the contents of\r\nsrc1 to the immediate value. Add (with Overflow) puts the result in the\r\ndestination register. When the result cannot be extended as a 32-bit number, the\r\nmachine signals an overflow exception.\r\nAdd without Overflow\r\n(ADDU)\r\nComputes the twos-complement sum of two 32-bit values. This instruction\r\nadds the contents of src1 to the contents of src2, or it can add the contents of\r\nsrc1 to the immediate value. Add (without Overflow) puts the result in the\r\ndestination register. Overflow exceptions never occur.\r\nAND (AND) Computes the Logical AND of two values. This instruction ANDs (bit-wise) the\r\ncontents of src1 with the contents of src2, or it can AND the contents of src1\r\nwith the immediate value. The immediate value is not sign extended. AND\r\nputs the result in the destination register.\r\nDivide Signed (DIV) Computes the quotient of two values. Divide (with Overflow) treats src1 as the\r\ndividend. The divisor can be src2 or the immediate value. The instruction\r\ndivides the contents of src1 by the contents of src2, or it can divide src1 by the\r\nimmediate value. It puts the quotient in the destination register. If the divisor\r\nis zero, the machine signals an error and may issue a BREAK instruction. The\r\nDIV instruction rounds toward zero. Overflow is signaled when dividing\r\n–2147483648 by –1. The machine may issue a BREAK instruction for\r\ndivide-by-zero or for overflow.\r\nNote: The special case DIV $0,src1,src2 generates the real machine divide\r\ninstruction and leaves the result in the HI/LO register. The HI register contains\r\nthe remainder and the LO register contains the quotient. No checking for\r\ndivide-by-zero is performed.\r\n007–2418–006 41",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/871819df-7b31-4831-b156-b6832cb0f8a7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e7da3e77bfc1d1fd457319bf0e862adb2084ed71b5ecb27f1f5887123b7b718b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 348
      },
      {
        "segments": [
          {
            "segment_id": "5695b3e5-a2fb-4612-86e8-f31e9e46151c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 64,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nInstruction Name Description\r\nDivide Unsigned (DIVU) Computes the quotient of two unsigned 32-bit values. Divide (unsigned) treats\r\nsrc1 as the dividend. The divisor can be src2 or the immediate value. This\r\ninstruction divides the contents of src1 by the contents of src2, or it can divide\r\nthe contents of src1 by the immediate value. Divide (unsigned) puts the\r\nquotient in the destination register. If the divisor is zero, the machine signals\r\nan exception and may issue a BREAK instruction. See the note for DIV\r\nconcerning $0 as a destination. Overflow exceptions never occur.\r\nExclusive-OR (XOR) Computes the XOR of two values. This instruction XORs (bit-wise) the contents\r\nof src1 with the contents of src2, or it can XOR the contents of src1 with the\r\nimmediate value. The immediate value is not sign extended. Exclusive-OR\r\nputs the result in the destination register.\r\nMove (MOVE) Moves the contents of src1 to the destination register.\r\nMove Conditional on Not\r\nZero (MOVN)\r\nConditionally moves the contents of src1 to the destination register after testing\r\nthat src2 is not equal to zero (MIPS4 only.)\r\nMove Conditional on Zero\r\n(MOVZ)\r\nConditionally moves the contents of src1 to the destination register after testing\r\nthat src2 is equal to zero (MIPS4 only).\r\nMultiply (MUL) Computes the product of two values. This instruction puts the 32-bit product\r\nof src1 and src2, or the 32-bit product of src1 and the immediate value, in the\r\ndestination register. The machine does not report overflow.\r\nNote: Use MUL when you do not need overflow protection: it’s often faster\r\nthan MULO and MULOU. For multiplication by a constant, the MUL\r\ninstruction produces faster machine instruction sequences than MULT or\r\nMULTU instructions can produce.\r\nMultiply (MULT) Computes the 64-bit product of two 32-bit signed values. This instruction\r\nmultiplies the contents of src1 by the contents of src2 and puts the result in the\r\nHI and LO registers (see Chapter 1). No overflow is possible.\r\nNote: The MULT instruction is a real machine language instruction.\r\n42 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/5695b3e5-a2fb-4612-86e8-f31e9e46151c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8506eef2b419136417d6d8f91bcd7839afa51231501786aa1e16978149ffda20",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 335
      },
      {
        "segments": [
          {
            "segment_id": "d79068ec-d801-4684-aa47-dc6f0f5cfcc4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 65,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nInstruction Name Description\r\nMultiply Unsigned\r\n(MULTU)\r\nComputes the product of two unsigned 32-bit values. It multiplies the contents\r\nof src1 and the contents of src2 and puts the result in the HI and LO registers\r\n(see Chapter 1). No overflow is possible.\r\nNote: The MULTU instruction is a real machine language instruction.\r\nMultiply with Overflow\r\n(MULO)\r\nComputes the product of two 32-bit signed values. Multiply (with Overflow)\r\nputs the 32-bit product of src1 and src2, or the 32-bit product of src1 and the\r\nimmediate value, in the destination register. When an overflow occurs, the\r\nmachine signals an overflow exception and may execute a BREAK instruction.\r\nNote: For multiplication by a constant, MULO produces faster machine\r\ninstruction sequences than MULT or MULTU can produce; however, if you do\r\nnot need overflow detection, use the MUL instruction. It’s often faster than\r\nMULO.\r\nMultiply with Overflow\r\nUnsigned (MULOU)\r\nComputes the product of two 32-bit unsigned values. Multiply (with Overflow\r\nUnsigned) puts the 32-bit product of src1 and src2, or the product of src1 and\r\nthe immediate value, in the destination register. This instruction treats the\r\nmultiplier and multiplicand as 32-bit unsigned values. When an overflow\r\noccurs, the machine signals an overflow exception and may issue an BREAK\r\ninstruction.\r\nNote: For multiplication by a constant, MULOU produces faster machine\r\ninstruction sequences than MULT or MULTU can reproduce; however, if you\r\ndo not need overflow detection, use the MUL instruction. It’s often faster than\r\nMULOU.\r\nNegate with Overflow\r\n(NEG)\r\nComputes the negative of a value. This instruction negates the contents of src1\r\nand puts the result in the destination register. If the value in src1 is\r\n–2147483648, the machine signals an overflow exception.\r\nNegate without Overflow\r\n(NEGU)\r\nNegates the integer contents of src1 and puts the result in the destination\r\nregister. The machine does not report overflows.\r\nNOT (NOT) Computes the Logical NOT of a value. This instruction complements (bit-wise)\r\nthe contents of src1 and puts the result in the destination register.\r\n007–2418–006 43",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/d79068ec-d801-4684-aa47-dc6f0f5cfcc4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a4335f45152cde67d94fd823fe61093c2d61ae95feae55a7a66a0a4317ccfbf1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 334
      },
      {
        "segments": [
          {
            "segment_id": "57e8f63b-5cd5-4255-b2cb-5e4f3819bcb3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 66,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nInstruction Name Description\r\nNOT OR (NOR) Computes the NOT OR of two values. This instruction combines the contents\r\nof src1 with the contents of src2 (or the immediate value). NOT OR\r\ncomplements the result and puts it in the destination register.\r\nOR (OR) Computes the Logical OR of two values. This instruction ORs (bit-wise) the\r\ncontents of src1 with the contents of src2, or it can OR the contents of src1 with\r\nthe immediate value. The immediate value is not sign-extended. OR puts the\r\nresult in the destination register.\r\nRemainder Signed (REM) Computes the remainder of the division of two unsigned 32-bit values. The\r\nmachine defines the remainder REM(i,j) as i–(j*div(i,j)) where j \u0001 0. Remainder\r\n(with Overflow) treats src1 as the dividend. The divisor can be src2 or the\r\nimmediate value. This instruction divides the contents of src1 by the contents\r\nof src2, or it can divide the contents of src1 by the immediate value. It puts the\r\nremainder in the destination register. The REM instruction rounds toward zero,\r\nrather than toward negative infinity. For example, div(5,–3)=–1, and\r\nrem(5,–3)=2. For divide-by-zero, the machine signals an error and may issue a\r\nBREAK instruction.\r\nRemainder Unsigned\r\n(REMU)\r\nComputes the remainder of the division of two unsigned 32-bit values. The\r\nmachine defines the remainder REM(i,j) as i–(j*div(i,j)) where j \u0001 0. Remainder\r\n(unsigned) treats src1 as the dividend. The divisor can be src2 or the immediate\r\nvalue. This instruction divides the contents of src1 by the contents of src2, or it\r\ncan divide the contents of src1 by the immediate value. Remainder (unsigned)\r\nputs the remainder in the destination register. For divide-by-zero, the machine\r\nsignals an error and may issue a BREAK instruction.\r\nRotate Left (ROL) Rotates the contents of a register left (toward the sign bit). This instruction\r\ninserts in the least-significant bit any bits that were shifted out of the sign bit.\r\nThe contents of src1 specify the value to shift, and the contents of src2 (or the\r\nimmediate value) specify the amount to shift. Rotate Left puts the result in the\r\ndestination register. If src2 (or the immediate value) is greater than 31, src1\r\nshifts by (src2 MOD 32).\r\nRotate Right (ROR) Rotates the contents of a register right (toward the least-significant bit). This\r\ninstruction inserts in the sign bit any bits that were shifted out of the\r\nleast-significant bit. The contents of src1 specify the value to shift, and the\r\ncontents of src2 (or the immediate value) specify the amount to shift. Rotate\r\nRight puts the result in the destination register. If src2 (or the immediate value)\r\nis greater than 32, src1 shifts by src2 MOD 32.\r\n44 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/57e8f63b-5cd5-4255-b2cb-5e4f3819bcb3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ebca84acb79b158231940e474e9ebef07c66cb95b1ee08329e6937c3f33f49ca",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 445
      },
      {
        "segments": [
          {
            "segment_id": "2b816fe4-a9d4-4f4b-9c6e-243e4fab1b01",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 67,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nInstruction Name Description\r\nSet Equal (SEQ) Compares two 32-bit values. If the contents of src1 equal the contents of src2\r\n(or src1 equals the immediate value) this instruction sets the destination register\r\nto one; otherwise, it sets the destination register to zero.\r\nSet Greater Than (SGT) Compares two signed 32-bit values. If the contents of src1 are greater than the\r\ncontents of src2 (or src1 is greater than the immediate value), this instruction sets\r\nthe destination register to one; otherwise, it sets the destination register to zero.\r\nSet Greater/Equal (SGE) Compares two signed 32-bit values. If the contents of src1 are greater than or\r\nequal to the contents of src2 (or src1 is greater than or equal to the immediate\r\nvalue), this instruction sets the destination register to one; otherwise, it sets the\r\ndestination register to zero.\r\nSet Greater/Equal\r\nUnsigned (SGEU)\r\nCompares two unsigned 32-bit values. If the contents of src1 are greater than or\r\nequal to the contents of src2 (or src1 is greater than or equal to the immediate\r\nvalue), this instruction sets the destination register to one; otherwise, it sets the\r\ndestination register to zero.\r\nSet Greater Than Unsigned\r\n(SGTU)\r\nCompares two unsigned 32-bit values. If the contents of src1 are greater than\r\nthe contents of src2 (or src1 is greater than the immediate value), this\r\ninstruction sets the destination register to one; otherwise, it sets the destination\r\nregister to zero.\r\nSet Less Than (SLT) Compares two signed 32-bit values. If the contents of src1 are less than the\r\ncontents of src2 (or src1 is less than the immediate value), this instruction sets\r\nthe destination register to one; otherwise, it sets the destination register to zero.\r\nSet Less/Equal (SLE) Compares two signed 32-bit values. If the contents of src1 are less than or equal\r\nto the contents of src2 (or src1 is less than or equal to the immediate value), this\r\ninstruction sets the destination register to one; otherwise, it sets the destination\r\nregister to zero.\r\nSet Less/Equal Unsigned\r\n(SLEU)\r\nCompares two unsigned 32-bit values. If the contents of src1 are less than or\r\nequal to the contents of src2 (or src1 is less than or equal to the immediate\r\nvalue) this instruction sets the destination register to one; otherwise, it sets the\r\ndestination register to zero.\r\nSet Less Than Unsigned\r\n(SLTU)\r\nCompares two unsigned 32-bit values. If the contents of src1 are less than the\r\ncontents of src2 (or src1 is less than the immediate value), this instruction sets\r\nthe destination register to one; otherwise, it sets the destination register to zero.\r\nSet Not Equal (SNE) Compares two 32-bit values. If the contents of scr1 do not equal the contents of\r\nsrc2 (or src1 does not equal the immediate value), this instruction sets the\r\ndestination register to one; otherwise, it sets the destination register to zero.\r\n007–2418–006 45",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/2b816fe4-a9d4-4f4b-9c6e-243e4fab1b01.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=30b1f0ef01cf1d60a4e54ce60c346a922c9cec6d18b494129a95d4003c34e44a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 477
      },
      {
        "segments": [
          {
            "segment_id": "1a177833-20fc-4437-9b9b-c0c9588e61bc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 68,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nInstruction Name Description\r\nShift Left Logical (SLL) Shifts the contents of a register left (toward the sign bit) and inserts zeros at the\r\nleast-significant bit. The contents of src1 specify the value to shift, and the\r\ncontents of src2 or the immediate value specify the amount to shift. If src2 (or\r\nthe immediate value) is greater than 31 or less than 0, src1 shifts by src2 MOD\r\n32.\r\nShift Right Arithmetic\r\n(SRA)\r\nShifts the contents of a register right (toward the least-significant bit) and\r\ninserts the sign bit at the most-significant bit. The contents of src1 specify the\r\nvalue to shift, and the contents of src2 (or the immediate value) specify the\r\namount to shift. If src2 (or the immediate value) is greater than 31 or less than\r\n0, src1 shifts by the result of src2 MOD 32.\r\nShift Right Logical (SRL) Shifts the contents of a register right (toward the least-significant bit) and\r\ninserts zeros at the most-significant bit. The contents of src1 specify the value to\r\nshift, and the contents of src2 (or the immediate value) specify the amount to\r\nshift. If src2 (or the immediate value) is greater than 31 or less than 0, src1\r\nshifts by the result of src2 MOD 32.\r\nSubtract with Overflow\r\n(SUB)\r\nComputes the twos-complement difference for two signed values. This\r\ninstruction subtracts the contents of src2 from the contents of src1, or it can\r\nsubtract the contents of the immediate from the src1 value. Subtract (with\r\nOverflow) puts the result in the destination register. When the true result’s sign\r\ndiffers from the destination register’s sign, the machine signals an overflow\r\nexception.\r\nSubtract without Overflow\r\n(SUBU)\r\nComputes the twos-complement difference for two 32-bit values. This\r\ninstruction subtracts the contents of src2 from the contents of src1, or it can\r\nsubtract the contents of the immediate from the src1 value. Subtract (without\r\nOverflow) puts the result in the destination register. Overflow exceptions never\r\nhappen.\r\nTrap if Equal (TEQ) Compares two 32-bit values. If the contents of src1 equal the contents of src2\r\n(or src1 equals the immediate value), a trap exception occurs.\r\nTrap if Not Equal (TNE) Compares two 32-bit values. If the contents of src1 do not equal the contents of\r\nsrc2 (or src1 does not equal the immediate value), a trap exception occurs.\r\nTrap if Less Than (TLT) Compares two signed 32-bit values. If the contents of src1 are less than the\r\ncontents of src2 (or src1 is less than the immediate value), a trap exception\r\noccurs.\r\n46 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/1a177833-20fc-4437-9b9b-c0c9588e61bc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a6e1ba83f40f0a8e5cd86c93b866c21eb640ab4ebbd025655d3df0387e2518be",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 422
      },
      {
        "segments": [
          {
            "segment_id": "2a5adf0e-cde8-4f55-8a7b-692da17ae561",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 69,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nInstruction Name Description\r\nTrap if Less Than Unsigned\r\n(TLTU)\r\nCompares two unsigned 32-bit values. If the contents of src1 are less than the\r\ncontents of src2 (or src1 is less than the immediate value), a trap exception\r\noccurs.\r\nTrap if Greater than or\r\nEqual (TGE)\r\nCompares two signed 32-bit values. If the contents of src1 are greater than the\r\ncontents of src2 (or src1 is greater than the immediate value), a trap exception\r\noccurs.\r\nTrap if Greater than or\r\nEqual Unsigned (TGEU)\r\nCompares two unsigned 32-bit values. If the contents of src1 are greater than\r\nthe contents of src2 (or src1 is greater than the immediate value), a trap\r\nexception occurs.\r\nTable 5-8 Computational Instruction Descriptions for MIPS3/4 Architecture\r\nInstruction Name Description\r\nDoubleword Absolute\r\nValue (DABS)\r\nComputes the absolute value of the contents of src1, treated as a 64-bit signed\r\nvalue, and puts the result in the destination register. If the value in src1 is\r\n-2**63, the machine signals an overflow exception.\r\nDoubleword Add with\r\nOverflow (DADD)\r\nComputes the twos-complement sum of two 64-bit signed values. The\r\ninstruction adds the contents of src1 to the contents of src2, or it can add the\r\ncontents of src1 to the immediate value. When the result cannot be extended as\r\na 64-bit number, the system signals an overflow exception.\r\nDoubleword Add without\r\nOverflow (DADDU)\r\nComputes the twos-complement sum of two 64-bit values. The instruction adds\r\nthe contents of src1 to the contents of src2, or it can add the contents of src1 to\r\nthe immediate value. Overflow exceptions never occur.\r\nDoubleword Divide Signed\r\n(DDIV)\r\nComputes the quotient of two 64-bit values. DDIV treats src1 as the dividend.\r\nThe divisor can be src2 or the immediate value. It puts the quotient in the\r\ndestination register. If the divisor is zero, the system signals an error and may\r\nissue a BREAK instruction. The DDIV instruction rounds towards zero.\r\nOverflow is signaled when dividing -2**63 by -1.\r\nNote: The special case DDIV $0,src1,src2 generates the real doubleword divide\r\ninstruction and leaves the result in the HI/LO register. The HI register contains\r\nthe quotient. No checking for divide-by-zero is performed.\r\n007–2418–006 47",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/2a5adf0e-cde8-4f55-8a7b-692da17ae561.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e29bac4f86b75edd0956232d56292ecf5e3e3ceb0136aa06c2adff79708a8f74",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 360
      },
      {
        "segments": [
          {
            "segment_id": "1d441417-d40f-4cae-b6b2-c0dce3968ced",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 70,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nInstruction Name Description\r\nDoubleword Divide\r\nUnsigned (DDIVU)\r\nComputes the quotient of two unsigned 64-bit values. DDIVU treats src1 as the\r\ndividend. The divisor can be src2 or the immediate value. It puts the quotient\r\nin the destination register. If the divisor is zero, the system signals an exception\r\nand may issue a BREAK instruction. See note for DDIV concerning $0 as a\r\ndestination. Overflow exceptions never occur.\r\nDoubleword Multiply\r\n(DMUL)\r\nComputes the product of two values. This instruction puts the 64-bit product\r\nof src1 and src2, or the 64-bit product of src1 and the immediate value, in the\r\ndestination register. Overflow is not reported.\r\nNote: Use DMUL when you do not need overflow protection. It is often faster\r\nthan DMULO and DMULOU. For multiplication by a constant, the DMUL\r\ninstruction produces faster machine instruction sequences than DMULT or\r\nDMULTU can produce.\r\nDoubleword Multiply\r\n(DMULT)\r\nComputes the 128-bit product of two 64-bit signed values. This instruction\r\nmultiplies the contents of src1 by the contents of src2 and puts the result in the\r\nHI and LO registers. No overflow is possible.\r\nNote: The DMULT instruction is a real machine language instruction.\r\nDoubleword Multiply\r\nUnsigned (DMULTU)\r\nComputes the product of two unsigned 64-bit values. It multiplies the contents\r\nof src1 and the contents of src2, putting the result in the HI and LO registers.\r\nNo overflow is possible.\r\nNote: The DMULTU instruction is a real machine language instruction.\r\nDoubleword Multiply with\r\nOverflow (DMULO)\r\nComputes the product of two 64-bit signed values. It puts the 64-bit product of\r\nsrc1 and src2, or the 64-bit product of src1 and the immediate value, in the\r\ndestination register. When an overflow occurs, the system signals an overflow\r\nexception and may execute a BREAK instruction.\r\nNote: For multiplication by a constant, DMULO produces faster machine\r\ninstruction sequences than DMULT or DMULTU can produce; however, if you\r\ndo not need overflow detection, use the DMUL instruction. It is often faster\r\nthan DMULO.\r\n48 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/1d441417-d40f-4cae-b6b2-c0dce3968ced.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b095053fcaf9d137be3ef73b9d2958a4dbb1a6e3aca2a37c43f8f01aca16754a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 329
      },
      {
        "segments": [
          {
            "segment_id": "9f8c3ae9-e21b-4909-bb99-12b815588169",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 71,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nInstruction Name Description\r\nDoubleword Multiply with\r\nOverflow Unsigned\r\n(DMULOU)\r\nComputes the product of two 64-bit unsigned values. It puts the 64-bit product\r\nof src1 and src2, or the 64-bit product of src1 and the immediate value, into the\r\ndestination register. When an overflow occurs, the system signals an overflow\r\nexception and may issue a BREAK instruction.\r\nNote: For multiplication by a constant, DMULO produces faster machine\r\ninstruction sequences than DMULT or DMULTU can produce; however, if you\r\ndo not need overflow detection, use the DMUL instruction. It is often faster\r\nthan DMULO.\r\nDoubleword Negate with\r\nOverflow (DNEG)\r\nComputes the negative of a 64-bit value. The instruction negates the contents\r\nof src1 and puts the result in the destination register. If the value of src1 is\r\n-2**63, the system signals an overflow exception.\r\nDoubleword Negate\r\nwithout Overflow\r\n(DNEGU)\r\nNegates the 64-bit contents of src1 and puts the result in the destination\r\nregister. Overflow is not reported.\r\nDoubleword Remainder\r\nSigned (DREM)\r\nComputes the remainder of the division of two signed 64-bit values. It treats\r\nsrc1 as the dividend. The divisor can be src2 or the immediate value. The\r\nDREMU instruction puts the remainder in the destination register. If the\r\ndivisor is zero, the system signals an error and may issue a BREAK instruction.\r\nDoubleword Remainder\r\nUnsigned (DREMU)\r\nComputes the remainder of the division of two unsigned 64-bit values. It treats\r\nsrc1 as the dividend. The divisor can be src2 or the immediate value. The\r\nDREMU instruction puts the remainder in the destination register. If the\r\ndivisor is zero, the system signals an error and may issue a BREAK instruction.\r\nDoubleword Rotate Left\r\n(DROL)\r\nRotates the contents of a 64-bit register left (towards the sign bit). This\r\ninstruction inserts in the least-significant bit any bits that were shifted out of\r\nthe sign bit. The contents of src1 specify the value to shift, and contents of src2\r\n(or the immediate value) specify the amount to shift. If src2 (or the immediate\r\nvalue) is greater than 63, src1 shifts by src2 MOD 64.\r\nDoubleword Rotate Right\r\n(DROR)\r\nRotates the contents of a 63-bit register right (towards the least-significant bit).\r\nThis instruction inserts in the sign bit any bits that were shifted out of the\r\nleast-significant bit. The contents of src1 specify the value to shift, and the\r\ncontents of src2 (or the immediate value) specify the amount to shift. If src2 (or\r\nthe immediate value is greater than 63, src1 shifts by src2 MOD 64.\r\n007–2418–006 49",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/9f8c3ae9-e21b-4909-bb99-12b815588169.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f863c5bc0b3933a18a3ea758040490e302e0ef94f350973d1f286794ff1676aa",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 417
      },
      {
        "segments": [
          {
            "segment_id": "50bbd05c-9d8c-457d-a901-a7c36d96dcb7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 72,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nInstruction Name Description\r\nDoubleword Shift Left\r\nLogical (DSLL)\r\nShifts the contents of a 64-bit register left (towards the sign bit) and inserts\r\nzeros at the least-significant bit. The contents of src1 specify the value to shift,\r\nand the contents of src2 (or the immediate value) specify the amount to shift. If\r\nsrc2 (or the immediate value) is greater than 63, src1 shifts by src2 MOD 64.\r\nDoubleword Shift Right\r\nArithmetic (DSRA)\r\nShifts the contents of a 64-bit register right (towards the least-significant bit)\r\nand inserts the sign bit at the most-significant bit. The contents of src2 (or the\r\nimmediate value) specify the amount to shift. If src2 (or the immediate value)\r\nis greater than 63, src1 shifts by src2 MOD 64.\r\nDoubleword Shift Right\r\nLogical (DSRL)\r\nShifts the contents of a 64-bit register right (towards the least-significant bit)\r\nand inserts zeros at the most-significant bit. The contents of src1 specify the\r\nvalue to shift, and the contents of src2 (or the immediate value) specify the\r\namount to shift. If src2 (or the immediate value) is greater than 63, src1 shifts\r\nby src2 MOD 64.\r\nDoubleword Subtract with\r\nOverflow (DSUB)\r\nComputes the twos-complement difference for two signed 64-bit values. This\r\ninstruction subtracts the contents of src2 from the contents of src1, or it can\r\nsubtract the immediate value from the contents of src1. It puts the result in the\r\ndestination register. When the true result’s sign differs from the destination\r\nregister’s sign, the system signals an overflow exception.\r\nDoubleword Subtract\r\nwithout Overflow (DSUBU)\r\nComputes the twos complement difference for two unsigned 64-bit values. This\r\ninstruction subtracts the contents of src2 from the contents of src1, or it can\r\nsubtract the immediate value from the contents of src1. It puts the result in the\r\ndestination register. Overflow exceptions never happen.\r\nJump and Branch Instructions\r\nThe jump and branch instructions let you change an assembly program’s control flow.\r\nThis section of the book describes jump and branch instructions.\r\nJump and Branch Instructions\r\nJump and branch instructions change the flow of a program. Table 5-9, page 51,\r\nsummarizes the formats of jump and branch instructions.\r\n50 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/50bbd05c-9d8c-457d-a901-a7c36d96dcb7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3b00a4297076db5333be10105af4876eb335a6aaaf7e26e66c9d3ee1c346c50b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "436f4a00-198b-4af7-a1eb-2d7cce74216e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 73,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nTable 5-9 Jump and Branch Format Summary\r\nDescription Op-Code Operand\r\nJump J address\r\nJump and Link JAL address target return,target\r\nBranch on Equal BEQ src1,src2,label\r\nBranch on Greater BGT src1,immediate,label\r\nBranch on Greater/Equal BGE\r\nBranch on Greater/Equal Unsigned BGEU\r\nBranch on Greater Than Unsigned BGTU\r\nBranch on Less Than BLT\r\nBranch on Less/Equal BLE\r\nBranch on Less/Equal Unsigned BLEU\r\nBranch on Less Than Unsigned BLTU\r\nBranch on Not Equal BNE\r\nBranch B label\r\nBranch and Link BAL\r\nBranch on Equal Likely* BEQL src1,src2,label\r\nBranch on Greater Than Likely* BGTL src1, immediate,label\r\nBranch on Greater/Equal Likely* BGEL\r\nBranch on Greater/Equal Unsigned Likely* BGEUL\r\nBranch on Greater Than Unsigned Likely* BGTUL\r\nBranch on Less Than Likely* BLTL\r\nBranch on Less/Equal Likely* BLEL\r\nBranch on Less/Equal Unsigned Likely* BLEUL\r\nBranch on Less Than Unsigned Likely* BLTUL\r\nBranch on Not Equal Likely* BNEL\r\nBranch on Equal to Zero BEQZ src1,label\r\n007–2418–006 51",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/436f4a00-198b-4af7-a1eb-2d7cce74216e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2463c295c5d8ebff15c237fecaf4fd8adf8e856b9804731985bcba5a7abbf7e8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 510
      },
      {
        "segments": [
          {
            "segment_id": "4010f2d0-ad98-4bc2-8986-a4d338cd9919",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 74,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nDescription Op-Code Operand\r\nBranch on Greater/Equal Zero BGEZ\r\nBranch on Greater Than Zero BGTZ\r\nBranch on Greater or Equal to Zero and Link BGEZAL\r\nBranch on Less Than Zero and Link BLTZAL\r\nBranch on Less/Equal Zero BLEZ\r\nBranch on Less Than Zero BLTZ\r\nBranch on Not Equal to Zero BNEZ\r\nBranch on Equal to Zero Likely* BEQZL src1,label\r\nBranch on Greater/Equal Zero Likely* BGEZL\r\nBranch on Greater Than Zero Likely* BGTZL\r\nBranch on Greater or Equal to Zero and Link Likely* BGEZALL\r\nBranch on Less Than Zero and Link Likely* BLTZALL\r\nBranch on Less/Equal Zero Likely* BLEZL\r\nBranch on Less Than Zero Likely* BLTZL\r\nBranch on Not Equal to Zero Likely* BNEZL\r\n* not valid on MIPS1 architecture\r\nJump and Branch Instruction Descriptions\r\nIn Table 5-10, page 52, the branch instructions, branch destinations must be defined in\r\nthe source being assembled.\r\nTable 5-10 Jump and Branch Instruction Descriptions\r\nInstruction Name Description\r\nBranch (B) Branches unconditionally to the specified label.\r\nBranch and Link (BAL) Branches unconditionally to the specified label and puts the return address in\r\ngeneral register $31.\r\n52 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/4010f2d0-ad98-4bc2-8986-a4d338cd9919.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0ef0f7fbc7c6bb5ece80aa98a6026be178006477773b3011a9870b327664ac49",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 184
      },
      {
        "segments": [
          {
            "segment_id": "ab5c9fec-a77f-4717-bdde-b8c131c4d46c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 75,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nInstruction Name Description\r\nBranch on Equal (BEQ) Branches to the specified label when the contents of src1 equal the contents of\r\nsrc2, or when the contents of src1 equal the immediate value.\r\nBranch on Equal to Zero\r\n(BEQZ)\r\nBranches to the specified label when the contents of src1 equal zero.\r\nBranch on Greater Than\r\n(BGT)\r\nBranches to the specified label when the contents of src1 are greater than the\r\ncontents of src2, or it can branch when the contents of src1 are greater than the\r\nimmediate value. The comparison treats the comparands as signed 32-bit values.\r\nBranch on Greater/Equal\r\nUnsigned (BGEU)\r\nBranches to the specified label when the contents of src1 are greater than or equal\r\nto the contents of src2, or it can branch when the contents of src1 are greater than\r\nor equal to the immediate value. The comparison treats the comparands as\r\nunsigned 32-bit values.\r\nBranch on Greater/Equal\r\nZero (BGEZ)\r\nBranches to the specified label when the contents of src1 are greater than or equal\r\nto zero.\r\nBranch on Greater/Equal\r\nZero and Link (BGEZAL)\r\nBranches to the specified label when the contents of src1 are greater than or equal\r\nto zero and puts the return address in general register $31. When this write is\r\ndone, it destroys the contents of the register. See the MIPS Microprocessor User’s\r\nManual appropriate to your architecture for more information. Do not use\r\nBGEZAL $31.\r\nBranch on Greater or\r\nEqual (BGE)\r\nBranches to the specified label when the contents of src1 are greater than or equal\r\nto the contents of src2, or it can branch when the contents of src1 are greater than\r\nor equal to the immediate value. The comparison treats the comparands as\r\nsigned 32-bit values.\r\nBranch on Greater Than\r\nUnsigned (BGTU)\r\nBranches to the specified label when the contents of src1 are greater than the\r\ncontents of src2, or it can branch when the contents of src1 are greater than the\r\nimmediate value. The comparison treats the comparands as unsigned 32-bit\r\nvalues.\r\nBranch on Greater Than\r\nZero (BGTZ)\r\nBranches to the specified label when the contents of src1 are greater than zero.\r\nBranch on Less Than\r\nZero (BLTZ)\r\nBranches to the specified label when the contents of src1 are less than zero. The\r\nprogram must define the destination.\r\nBranch on Less Than\r\n(BLT)\r\nBranches to the specified label when the contents of src1 are less than the contents\r\nof src2, or it can branch when the contents of src1 are less than the immediate\r\nvalue. The comparison treats the comparands as signed 32-bit values.\r\n007–2418–006 53",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/ab5c9fec-a77f-4717-bdde-b8c131c4d46c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0fd2d26116598dd3ddd08d86a361c08b5fda04be29fd34817a54aacbf492b6a5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 432
      },
      {
        "segments": [
          {
            "segment_id": "e1148e1a-1fcd-49dc-a529-a9c3460d5340",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 76,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nInstruction Name Description\r\nBranch on Less/Equal\r\nUnsigned (BLEU)\r\nBranches to the specified label when the contents of src1 are less than or equal to\r\nthe contents of src2, or it can branch when the contents of src1 are less than or\r\nequal to the immediate value. The comparison treats the comparands as unsigned\r\n32-bit values.\r\nBranch on Less/Equal\r\nZero (BLEZ)\r\nBranches to the specified label when the contents of src1 are less than or equal to\r\nzero. The program must define the destination.\r\nBranch on Less or Equal\r\n(BLE)\r\nBranches to the specified label when the contents of src1 are less than or equal to\r\nthe contents of src2, or it can branch when the contents of src1 are less than or\r\nequal to the immediate value. The comparison treats the comparands as signed\r\n32-bit values.\r\nBranch on Less Than\r\nUnsigned (BLTU)\r\nBranches to the specified label when the contents of src1 are less than the contents\r\nof src2, or it can branch when the contents of src1 are less than the immediate\r\nvalue. The comparison treats the comparands as unsigned 32-bit values.\r\nBranch on Less Than\r\nZero and Link (BLTZAL)\r\nBranches to the specified label when the contents of src1 are less than zero and\r\nputs the return address in general register $31. Because the value is always stored\r\nin register 31, there is a chance of a stored value being overwritten before it is\r\nused. See the MIPS microprocessor user’s manual appropriate to your\r\narchitecture for more information. Do not use BGEZAL $31\r\nBranch on Not Equal\r\n(BNE)\r\nBranches to the specified label when the contents of src1 do not equal the contents\r\nof src2, or it can branch when the contents of src1 do not equal the immediate\r\nvalue.\r\nBranch on Not Equal to\r\nZero (BNEZ)\r\nBranches to the specified label when the contents of src1 do not equal zero.\r\nJump (J) Unconditionally jumps to a specified location. A symbolic address or a general\r\nregister specifies the destination. The instruction J $31 returns from a JAL call\r\ninstruction.\r\n54 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/e1148e1a-1fcd-49dc-a529-a9c3460d5340.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cbb14fffded3a6c40635df0fb84258611f82758ebecdada627be951f60258b0a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 347
      },
      {
        "segments": [
          {
            "segment_id": "24bb9bbf-b7b0-4f78-a491-609f320721c4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 77,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nInstruction Name Description\r\nJump And Link (JAL) Unconditionally jumps to a specified location and puts the return address in a\r\ngeneral register. A symbolic address or a general register specifies the target\r\nlocation. By default, the return address is placed in register $31. If you specify a\r\npair of registers, the first receives the return address and the second specifies the\r\ntarget. The instruction JAL procname transfers to procname and saves the\r\nreturn address. For the two-register form of the instruction, the target register\r\nmay not be the same as the return-address register. For the one-register form, the\r\ntarget may not be $31.\r\nBranch Likely\r\nInstructions\r\nSame an the ordinary branch instruction (without the \"Likely\"), except in a branch\r\nlikely instruction, the instruction in the delay slot is nullified if the conditional\r\nbranch is not taken.\r\nNote: The branch likely instructions should be used only inside a .set\r\nnoreorder schedule in an assembly program. The assembler does not attempt\r\nto schedule the delay slot of a branch likely instruction.\r\nSpecial Instructions\r\nThe main processor’s special instructions do miscellaneous tasks. See Table 5-11.\r\nSpecial Instruction Descriptions\r\nTable 5-11 Special Instruction Descriptions\r\nInstruction Name Description\r\nBreak (BREAK) Unconditionally transfers control to the exception handler. The breakcode\r\noperand is interpreted by software conventions. The breakcode1 operand is used\r\nto fill the low-order 10 bits of the 20-bit immediate field in the BREAK\r\ninstruction. The optional second operand, breakcode2, fills the high-order 10 bits.\r\nException Return (ERET) Returns from an interrupt, exception or error trap. Similar to a branch or jump\r\ninstruction, ERET executes the next instruction before taking effect. Use this on\r\nR4000 processor machines in place of RFE.\r\n007–2418–006 55",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/24bb9bbf-b7b0-4f78-a491-609f320721c4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=98def77cbe60d87c67fc8ba299fbbdcaf7a07a696a7e3d3c86e65577e8044dcf",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "134daffa-c175-4b7d-863f-3a0c05c32b7f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 78,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nInstruction Name Description\r\nMove From HI Register\r\n(MFHI)\r\nMoves the contents of the HI register to a general-purpose register.\r\nMove From LO Register\r\n(MFLO)\r\nMoves the contents of the LO register to a general-purpose register.\r\nMove To HI Register\r\n(MTHI)\r\nMoves the contents of a general-purpose register to the HI register.\r\nMove To LO Register\r\n(MTLO)\r\nMoves the contents of a general-purpose register to the LO register.\r\nRestore From Exception\r\n(RFE)\r\nRestores the previous interrupt called and user/kernel state. This instruction\r\ncan execute only in kernel state and is unavailable in user mode.\r\nSyscall (SYSCALL) Causes a system call trap. The operating system interprets the information set\r\nin registers to determine what system call to do.\r\nCoprocessor Interface Instructions\r\nThe coprocessor interface instructions provide standard ways to access your\r\nmachine’s coprocessors. See Table 4-1, page 18 and Table 5-13, page 58.\r\nCoprocessor Interface Summary\r\nTable 5-12 Coprocessor Interface Formats\r\nDescription Op-code Operand\r\nLoad Word Coprocessor z LWCz dest-copr,address\r\nLoad Double Coprocessor z* LDCz\r\nStore Word Coprocessor z SWCz src-copr, address\r\nStore Double Coprocessor z* SDCz\r\nMove From Coprocessor z MFCz dest-gpr, source\r\nMove To Coprocessor z MTCz src-gpr, destination\r\n56 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/134daffa-c175-4b7d-863f-3a0c05c32b7f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7f0e2399f02c2d1b46523d68df52f09381d1bb626d071d5a602da32c266c27f1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 478
      },
      {
        "segments": [
          {
            "segment_id": "176f3cb8-35bb-4f0d-8da6-bfc1005b7b5c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 79,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nDescription Op-code Operand\r\nDoubleword Move From Coprocessor z** DMFCz\r\nDoubleword Move To Coprocessor z** DMTCz\r\nBranch Coprocessor z False BCzF label\r\nBranch Coprocessor z True BCzT\r\nBranch Coprocessor z False Likely* BCzFL\r\nBranch Coprocessor z True Likely* BCzTL\r\nCoprocessor z Operation Cz expression\r\nControl From Coprocessor z CFCz dest-gpr, source\r\nControl To Coprocessor z CTCz src-gpr, destination\r\n* not valid on MIPS1 architecture\r\n** not valid on MIPS1 and MIPS2 architectures\r\nNote: You cannot use coprocessor load and store instructions with the system control\r\ncoprocessor (cp0).\r\n007–2418–006 57",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/176f3cb8-35bb-4f0d-8da6-bfc1005b7b5c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e4fba0b0428a9785416457e71922db383d3f53f37d7fc437c00fc8f3b156a23b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "80a771e1-ea2a-492a-9304-5036545f2c00",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 80,
            "page_width": 612,
            "page_height": 792,
            "content": "5: The Instruction Set\r\nCoprocessor Interface Instruction Descriptions\r\nTable 5-13 Coprocessor Interface Instruction Descriptions\r\nInstruction Name Description\r\nBranch Coprocessor z True\r\n(BCzT)\r\nBranches to the specified label when the specified coprocessor asserts a true\r\ncondition. The z selects one of the coprocessors. A previous coprocessor\r\noperation sets the condition.\r\nBranch Coprocessor z False\r\n(BCzF)\r\nBranches to the specified label when the specified coprocessor asserts a false\r\ncondition. The z selects one of the coprocessors. A previous coprocessor\r\noperation sets the condition.\r\nBranch Coprocessor z True\r\nLikely (BCzTL)\r\nBranches to the specified label when the specified coprocessor asserts a true\r\ncondition. If the conditional branch is not taken, the instruction in the branch\r\ndelay slot is nullified.\r\nNote: The branch likely instructions should be used only within a .set\r\nnoreorder block. The assembler does not attempt to schedule the delay slot\r\nof a branch likely instruction.\r\nBranch Coprocessor z False\r\nLikely (BCzFL)\r\nBranches to the specified label when the specified coprocessor asserts a false\r\ncondition. If the conditional branch is not taken, the instruction in the branch\r\ndelay slot is nullified.\r\nNote: The branch likely instructions should be used only within a .set\r\nnoreorder block. The assembler does not attempt to schedule the delay slot\r\nof a branch likely instruction.\r\nControl From Coprocessor z\r\n(CFCz)\r\nStores the contents of the coprocessor control register specified by the source in\r\nthe general register specified by dest-gpr.\r\nControl To Coprocessor\r\n(CTCz)\r\nStores the contents of the general register specified by src-gpr in the coprocessor\r\ncontrol register specified by the destination.\r\nCoprocessor z Operation\r\n(Cz)\r\nExecutes a coprocessor-specific operation on the specified coprocessor. The z\r\nselects one of four distinct coprocessors.\r\n58 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/80a771e1-ea2a-492a-9304-5036545f2c00.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=09d8716749549d3282fda7276ef9f4418c4651a3079e4ede13d72b594b4f7775",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 371
      },
      {
        "segments": [
          {
            "segment_id": "487b5908-78a4-4a34-b47a-a4192cd0b754",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 81,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nInstruction Name Description\r\nLoad Word Coprocessor z\r\n(LWCz)\r\nLoads the destination with the contents of a word that is at the memory\r\nlocation specified by the effective address. The z selects one of four distinct\r\ncoprocessors. Load Word Coprocessor replaces all register bytes with the\r\ncontents of the loaded word. If bits 0 and 1 of the effective address are not\r\nzero, the machine signals an address exception.\r\nLoad Double Coprocessor z\r\n(LDCz)\r\nLoads a doubleword from the memory location specified by the effective\r\naddress and makes the data available to coprocessor unit z. The manner in\r\nwhich each coprocessor uses the data is defined by the individual coprocessor\r\nspecifications. This instruction is not valid in MIPS1 architectures. If any of the\r\nthree least-significant bits of the effective address are non-zero, the machine\r\nsignals an address error exception.\r\nMove From Coprocessor z\r\n(MFCz)\r\nStores the contents of the coprocessor register specified by the source in the\r\ngeneral register specified by dest-gpr.\r\nMove To Coprocessor z\r\n(MTCz)\r\nStores the contents of the general register specified by src-gpr in the coprocessor\r\nregister specified by the destination.\r\nDoubleword Move From\r\nCoprocessor z (DMFCz)\r\nStores the 64-bit contents of the coprocessor register specified by the source into\r\nthe general register specified by dest-gpr.\r\nDoubleword Move To\r\nCoprocessor z (DMTCz)\r\nStores the 64-bit contents of the general register src-gpr into the coprocessor\r\nregister specified by the destination.\r\nStore Word Coprocessor z\r\n(SWCz)\r\nStores the contents of the coprocessor register in the memory location specified\r\nby the effective address. The z selects one of four distinct coprocessors. If bits 0\r\nand 1 of the effective address are not zero, the machine signals an address error\r\nexception.\r\nStore Double Coprocessor z\r\n(SDCz)\r\nCoprocessor z sources a doubleword, which the processor writes the memory\r\nlocation specified by the effective address. The data to be stored is defined by\r\nthe individual coprocessor specifications. This instruction is not valid in MIPS1\r\narchitecture. If any of the three least-significant bits of the effective address are\r\nnon-zero, the machine signals an address error exception.\r\n007–2418–006 59",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/487b5908-78a4-4a34-b47a-a4192cd0b754.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e1bcfb1a44383e95e2cc38a43950b7b98a1c0b0b284cf0004802d3931e741eaf",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "26679f24-a81f-4b2e-9700-ccd0286d8e32",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 82,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/26679f24-a81f-4b2e-9700-ccd0286d8e32.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1b5ca682cfe5832030cf8055487f039d34ed4076593af9b937285e5d6e056312",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 349
      },
      {
        "segments": [
          {
            "segment_id": "747722e2-f44e-4aa0-a8fd-6e06790c1dc8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 83,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 6\r\nCoprocessor Instruction Set\r\nThis chapter describes the coprocessor instructions for these coprocessors:\r\n• System control coprocessor (cp0) instructions\r\n• Floating-point coprocessor instructions\r\nSee Chapter 5, \"The Instruction Set\", page 27, for a description of the main processor’s\r\ninstructions and the coprocessor interface instructions.\r\nInstruction Notation\r\nThe tables in this chapter list the assembler format for each coprocessor’s load, store,\r\ncomputational, jump, branch, and special instructions. The format consists of an\r\nop-code and a list of operand formats. The tables list groups of closely related\r\ninstructions; for those instructions, you can use any op-code with any specified\r\noperand.\r\nNote: The system control coprocessor instructions do not have operands.\r\nOperands can have any of these formats:\r\n• Memory references: for example, a relocatable symbol +/– an expression(register)\r\n• Expressions (for immediate values)\r\n• Two or three operands: for example, ADD $3,$4 is the same as ADD $3,$3,$4\r\nThe following terms are used to discuss floating-point operations:\r\n• infinite: A value of +1 or –1.\r\n• infinity: A symbolic entity that represents values with magnitudes greater than the\r\nlargest value in that format.\r\n• ordered: The usual result from a comparison, namely: <,=, or >.\r\n• NaN: Symbolic entities that represent values not otherwise available in\r\nfloating-point formats. There are two kinds of NaNs. Quiet NaNs represent\r\nunknown or uninitialized values. Signaling NaNs represent symbolic values and\r\n007–2418–006 61",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/747722e2-f44e-4aa0-a8fd-6e06790c1dc8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=80a7d1874166ff4905166b6a05975289af787cce90d5b06c4837a988cd88eaf1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1e2aab91-34d7-4612-9e56-a08d600ebcac",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 84,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Coprocessor Instruction Set\r\nvalues that are too big or too precise for the format. Signaling NaNs raise an\r\ninvalid operation exception whenever an operation is attempted on them.\r\n• unordered: The condition that results from a floating-point comparison when one\r\nor both operands are NaNs.\r\nFloating-Point Instructions\r\nThe floating-point coprocessor has these classes of instructions:\r\n• Load and Store Instructions: Load values and move data between memory and\r\ncoprocessor registers.\r\n• Move Instructions: Move data between registers.\r\n• Computational Instructions: Do arithmetic and logical operations on values in\r\ncoprocessor registers.\r\n• Relational Instructions: Compare two floating-point values.\r\nA particular floating-point instruction may be implemented in hardware, software, or\r\na combination of hardware and software.\r\nFloating-Point Formats\r\nThe formats for the single- and double-precision floating-point constants are shown in\r\nFigure 6-1, page 63:\r\n62 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/1e2aab91-34d7-4612-9e56-a08d600ebcac.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f693eb4a1020a3fa29855d5063c2a6a7b63d75f4009b879fc5053bbeee16297c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "7aaf68bb-ae83-4023-bb38-ceff3ebe8757",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 85,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\n8 bits\r\nSINGLE-PRECISION\r\n0 (little-endian)\r\n1 23 bits\r\n1 11 bits 52 bits\r\n0 1 8 9 31 (big-endian)\r\n31 30 23 22\r\n63\r\n0\r\n62 52 51 0\r\n1 11 12 63\r\n(big-endian)\r\n(little-endian)\r\nDOUBLE-PRECISION\r\na12034\r\nFigure 6-1 Floating Point Formats\r\nFloating-Point Load and Store Formats\r\nFloating-point load and store instructions must use even registers. The operands in\r\nthe following tables have the following meanings:\r\nOperand Meaning\r\naddress Offset (base)\r\ndestination Destination register\r\nsource Source register\r\nTable 6-1 Floating-Point Load and Store Formats\r\nDescription Op-Code Operand\r\nLoad Fp\r\nDouble L.D destination, address\r\nSingle L.S\r\nLoad Indexed Fp\r\nDouble LDXC1 destination, index(base)\r\n007–2418–006 63",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/7aaf68bb-ae83-4023-bb38-ceff3ebe8757.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b4be30b5d42dcd6c0846248b4c996c64d781b5f233203ab6e858c7c2d930f8d2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 472
      },
      {
        "segments": [
          {
            "segment_id": "5da6ca93-57c6-4b14-9a2b-d119ebc5ba59",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 86,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Coprocessor Instruction Set\r\nDescription Op-Code Operand\r\nSingle LWXC1\r\nLoad Immediate Fp\r\nDouble LI.D destination, floating-point constant\r\nSingle LI.S\r\nStore Fp\r\nDouble S.D source, address\r\nSingle S.S\r\nStore Indexed Fp\r\nDouble SDXC1 destination, index(base)\r\nSingle SWXC1\r\nFloating-Point Load and Store Descriptions\r\nThis section groups the instructions by function. See \"Floating-Point Instructions\",\r\npage 62, for the op-codes. Table 6-2, page 64, describes the floating-point Load and\r\nStore instructions.\r\nTable 6-2 Floating-Point Load and Store Descriptions\r\nInstruction Description\r\nLoad Fp Instructions Load eight bytes for double-precision and four bytes for single-precision\r\nfrom the specified effective address into the destination register, which must\r\nbe an even register (32-bit only) . The bytes must be word aligned. Note: It\r\nis recommended that you use doubleword alignment for double-precision\r\noperands. It is required in the MIPS2 architecture (R4000 and later).\r\nLoad Indexed Fp Instructions Indexed loads follow the same description as the load instructions above\r\nexcept that indexed loads use index+base to specify the effective address\r\n(64-bit only).\r\n64 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/5da6ca93-57c6-4b14-9a2b-d119ebc5ba59.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=36a7cc381383d76e00f676d352d6ec4634faa087eda846b380df15d088c2a75d",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "68040351-efb3-4875-b131-ae2dcc7a9778",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 87,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nInstruction Description\r\nStore Fp Instructions Stores eight bytes for double-precision and four bytes for single-precision\r\nfrom the source floating-point register in the destination register, which\r\nmust be an even register (32-bit only). Note: It is recommended that you\r\nuse doubleword alignment for double-precision operands. It is required in\r\nthe MIPS2 architecture and later.\r\nStore Indexed Fp Instructions Indexed stores follow the same description as the store instructions above\r\nexcept that indexed stores use index+base to specify the effective address\r\n(64-bit only).\r\nFloating-Point Computational Formats\r\nThis part of Chapter 6 describes floating-point computational instructions. The\r\noperands in Table 6-5, page 70 and Table 6-7, page 75 have the following meaning:\r\nOperand Meaning\r\ndestination Destination register\r\ngpr General-purpose register\r\nsource Source register\r\nTable 6-3 Floating-Point Computational Instructions\r\nDescription Op-code Operand\r\nAbsolute Value Fp\r\nDouble ABS.D destination, src1\r\nSingle ABS.S\r\nNegate Fp\r\nDouble NEG.D\r\nSingle NEG.S\r\nAdd Fp\r\nDouble ADD.D destination, src1, src2\r\nSingle ADD.S\r\n007–2418–006 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/68040351-efb3-4875-b131-ae2dcc7a9778.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=29b95d65b79697168960e23d8c86fcf128778395ac23d793f9e63339dc7f7a84",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "09a9c0d4-cc0b-41d7-9f62-c1d2b7a78b0b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 88,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Coprocessor Instruction Set\r\nDescription Op-code Operand\r\nDivide Fp\r\nDouble DIV.D\r\nSingle DIV.S\r\nMultiply Fp\r\nDouble MUL.D\r\nSingle MUL.S\r\nSubtract Fp\r\nDouble SUB.D\r\nSingle SUB.S\r\nMultiply Add FP\r\nDouble MADD.D destination, src1, src2, src3\r\nSingle MADD.S\r\nNegative Multiply Add FP\r\nDouble NMADD.D\r\nSingle NMADD.S\r\nMultiply Subtract FP\r\nDouble MSUB.D\r\nSingle MSUB.S\r\nNegative Multiply Subtract FP\r\nDouble NMSUB.D\r\nSingle NMSUB.S\r\nConvert Source to Specified Fp Precision\r\nDouble to Single Fp CVT.S.D destination, src1\r\nFixed Point to Single Fp CVT.S.W\r\nSingle to Double Fp CVT.D.S\r\nFixed Point to Double Fp CVT.D.W\r\nSingle to Fixed Point Fp CVT.W.S\r\n66 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/09a9c0d4-cc0b-41d7-9f62-c1d2b7a78b0b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9106b03af243bb5a8a9384fc44f685b292ecc6a4097018d327a349b58fd58c4b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 421
      },
      {
        "segments": [
          {
            "segment_id": "8a1dbe6d-12b3-4b4d-a247-48a11aa95ecc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 89,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nDescription Op-code Operand\r\nDouble to Fixed Point Fp CVT.W.D\r\nTruncate and Round Operations\r\nTruncate to Single Fp TRUNC.W.S destination, src, gpr\r\nTruncate to Double Fp TRUNC.W.D\r\nRound to Single Fp ROUND.W.S\r\nRound to Double Fp ROUND.W.D\r\nCeiling to Double Fp CEIL.W.D\r\nCeiling to Single Fp CEIL.W.S\r\nCeiling to Double Fp, Unsigned CEILU.W.D\r\nCeiling to Single Fp, Unsigned CEILU.W.S\r\nFloor to Double Fp FLOOR.W.D\r\nFloor to Single Fp FLOOR.W.S\r\nFloor to Double F, Unsigned FLOORU.W.D\r\nFloor to Single Fp Unsigned FLOORU.W.S\r\nRound to Double Fp Unsigned ROUNDU.W.D\r\nRound to Single Fp Unsigned ROUNDU.W.S\r\nTruncate to Double Fp Unsigned TRUNCU.W.D\r\nTruncate to Single Fp Unsigned TRUNCU.W.S\r\nConvert Source to Specified Fp Precision\r\nLong Fixed Point to Single Fp CVT.S.L destination, src1\r\nLong Fixed Point to Double FP CVT.D.L\r\nSingle to Long Fixed Point FP CVT.L.S\r\nDouble to Long Fixed Point FP CVT.L.D\r\nTruncate and Round Operations\r\nTruncate Single to Long Fixed\r\nPoint\r\nTRUNC.L.S destination, src, gpr\r\n007–2418–006 67",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/8a1dbe6d-12b3-4b4d-a247-48a11aa95ecc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d66a9049de98d53d921f08a4f2d75e0e973f88cad52cf44062acca58bc6178d2",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ad04ab5b-6510-4a68-8f50-1b3af29db953",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 90,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Coprocessor Instruction Set\r\nDescription Op-code Operand\r\nTruncate Double to Long Fixed\r\nPoint\r\nTRUNC.L.D\r\nRound Single to Long Fixed Point ROUND.L.S\r\nRound Double to Long Fixed\r\nPoint\r\nROUND.L.D\r\nCeiling Single to Long Fixed Point CEIL.L.S\r\nCeiling Double to Long Fixed\r\nPoint\r\nCEIL.L.D\r\nFloor Single to Long Fixed Point FLOOR.L.S\r\nFloor Double to Long Fixed Point FLOOR.L.D\r\nReciprocal Approximation Operations\r\nReciprocal Approximation Single\r\nFp\r\nRECIP.S destination, src1\r\nReciprocal Approximation Double\r\nFp\r\nRECIP.D\r\nReciprocal Square Root Single Fp RSQRT.S\r\nReciprocal Square Root Double Fp RSQRT.D\r\nFloating-Point Computational Instruction Descriptions\r\nThis section groups the instructions by function. Refer to Table 6-5, page 70, and\r\nTable 6-7, page 75, for the op-code names. Table 6-4 describes the floating-point\r\ncomputational instructions.\r\n68 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/ad04ab5b-6510-4a68-8f50-1b3af29db953.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1cf588905fc72b1a12573727f096a9721bceef53ff407656e49341b3a71325c2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 279
      },
      {
        "segments": [
          {
            "segment_id": "f016da23-9ddc-4c19-bb8b-2684e3f3dd0e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 91,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nTable 6-4 Floating-Point Computational Instruction Descriptions\r\nInstruction Description\r\nAbsolute Value Fp Instructions Compute the absolute value of the contents of src1 and put the\r\nspecified precision floating-point result in the destination register.\r\nAdd Fp Instructions Add the contents of src1 (or the destination) to the contents of src2\r\nand put the result in the destination register. When the sum of two\r\noperands with opposite signs is exactly zero, the sum has a positive\r\nsign for all rounding modes except round toward –1. For that\r\nrounding mode, the sum has a negative sign.\r\nConvert Source to Another Precision\r\nFp Instructions\r\nConvert the contents of src1 to the specified precision, round according\r\nto the rounding mode, and put the result in the destination register.\r\nMutiply-Then-Add Fp Instructions Multiply the contents of src2 and src3, then add the result to src1 and\r\nstore in the destination register (MADD). The NMADD instruction\r\ndoes the same mutiply then add, but then negates the sign of the\r\nresult (64-bit only).\r\nMutiply-Then-Subtract Fp\r\nInstructions\r\nMultiply the contents of src2 and src3, then subtract src1 from the\r\nproduct and store in the destination register (MSUB). The NMSUB\r\ninstruction does the same mutiply then subtract, but then negates the\r\nsign of the result (64-bit only).\r\nTruncate and Round instructions The TRUNC instructions truncate the value in the source\r\nfloating-point register and put the resulting integer in the destination\r\nfloating-point register, using the third (general-purpose) register to\r\nhold a temporary value. (This is a macro-instruction.) The ROUND\r\ninstructions work like TRUNC, but round the floating-point value to\r\nan integer instead of truncating it.\r\nDivide Fp Instructions Compute the quotient of two values. These instructions treat src1 as\r\nthe dividend and src2 as the divisor. Divide Fp instructions divide the\r\ncontents of src1 by the contents of src2 and put the result in the\r\ndestination register. If the divisor is a zero, the machine signals a error\r\nif the divide-by-zero exception is enabled.\r\nMultiply Fp Instructions Multiplies the contents of src1 (or the destination) with the contents of\r\nsrc2 and puts the result in the destination register.\r\nNegate FP Instructions Compute the negative value of the contents of src1 and put the\r\nspecified precision floating-point result in the destination register.\r\n007–2418–006 69",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/f016da23-9ddc-4c19-bb8b-2684e3f3dd0e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=877afe10d89f3c5ef4826157bf531be1dfd57c56f7583b91e82869d6b9b9bfb4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 376
      },
      {
        "segments": [
          {
            "segment_id": "4e4bd594-9ea3-47ea-8187-dd54b8297699",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 92,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Coprocessor Instruction Set\r\nInstruction Description\r\nSubtract Fp Instructions Subtract the contents of src2 from the contents of src1 (or the\r\ndestination). These instructions put the result in the destination\r\nregister. When the difference of two operands with the same signs is\r\nexactly zero, the difference has a positive sign for all rounding modes\r\nexcept round toward –1. For that rounding mode, the sum has a\r\nnegative sign.\r\nReciprocal Approximation\r\nInstructions\r\nFor RECIP, the reciprocal of the value in src1 is approximated and\r\nplaced into the destination register. For RSQRT the reciprocal of the\r\nsquare root of the value in src1 is approximated and placed into the\r\ndestination register.\r\nFloating-Point Relational Operations\r\nTable 6-5 summarizes the floating-point relational instructions. The first column\r\nunder Condition gives a mnemonic for the condition tested. As the “branch on\r\ntrue/false” condition can be used logically to negate any condition, the second\r\ncolumn supplies a mnemonic for the logical negation of the condition in the first\r\ncolumn. This provides a total of 32 possible conditions. The four columns under\r\nRelations give the result of the comparison based on each condition. The final column\r\nstates if an invalid operation is signaled for each condition.\r\nFor example, with an equal condition (EQ mnemonic in the True column), the logical\r\nnegation of the condition is not equal (NEQ), and a comparison that is equal is True\r\nfor equal and False for greater than, less than, and unordered, and no Invalid\r\nOperation Exception is given if the relation is unordered.\r\nTable 6-5 Floating-Point Relational Operators\r\nConditions:\r\nMnemonics\r\nTrue\r\nConditions:\r\nMnemonics\r\nFalse\r\nRelations:\r\nGreater\r\nThan Less Than Equal Unordered\r\nInvalid Operation\r\nException if\r\nUnordered\r\nF T F F F F no\r\nUN OR F F F T no\r\nEQ NEQ F F T F no\r\n70 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/4e4bd594-9ea3-47ea-8187-dd54b8297699.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=61a576cbc02ddff54dc8d6f8876c9a8773d313fd85234f0ab11035f345733b42",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9a256f64-c4ce-4fba-ab7b-37905be2dc5f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 93,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nConditions:\r\nMnemonics\r\nTrue\r\nConditions:\r\nMnemonics\r\nFalse\r\nRelations:\r\nGreater\r\nThan Less Than Equal Unordered\r\nInvalid Operation\r\nException if\r\nUnordered\r\nUEQ OLG F F T T no\r\nOLT UGE F T F F no\r\nULT OGE F T F T no\r\nOLE UGT F T T F no\r\nULE OGT F T T T no\r\nSF ST F F F F yes\r\nNGLE GLE F F F T yes\r\nSEQ SNE F F T F yes\r\nNGL GL F F T T yes\r\nLT NLT F T F F yes\r\nNGE GE F T F T yes\r\nLE NLE F T T F yes\r\nNGT GT F T T T yes\r\nThe mnemonics found in Table 6-5 have following meanings:\r\nMnemonic Meaning Mnemonic Meaning\r\nF False T True\r\nUN Unordered OR Ordered\r\nEQ Equal NEQ Not Equal\r\nUEQ Unordered or Equal OLG Ordered or Less than or Greater than\r\nOLT Ordered Less Than UGE Unordered or Greater than or Equal\r\nULT Unordered or Less Than OGE Ordered Greater than or Equal\r\nOLE Ordered Less than or Equal UGT Unordered or Greater Than\r\nULE Unorderd or Less than or Equal OGT Ordered Greater Than\r\n007–2418–006 71",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/9a256f64-c4ce-4fba-ab7b-37905be2dc5f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7a948e35a7afa014ef543e1ee329eaa3017f873c957fe2593b84ce9e236035ce",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 495
      },
      {
        "segments": [
          {
            "segment_id": "c926f90f-ba42-4983-9200-7dbaf52b1ef6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 94,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Coprocessor Instruction Set\r\nMnemonic Meaning Mnemonic Meaning\r\nSF Signaling False ST Signaling True\r\nNGLE Not Greater Than or Less Than or\r\nEqual\r\nGLE Greater Than, or Less Than or Equal\r\nSEQ Signaling Equal SNE Signaling Not Equal\r\nNGL Not Greater Than or Less Than GL Greater Than or Less Less Than\r\nLT Less Than NLT Not Less Than\r\nNGE Not Greater Than GE Greater Than or Equal or Equal\r\nLE Less Than or Equal NLE Not Less Than or Equal\r\nNGT Not Greater Than GT Greater Than\r\nTo branch on the result of a relational:\r\n/* branching on a compare result */\r\nc.eq.s $fcc0,$f1,$f12 /* compare the single-precision values */\r\nbc1t $fcc0, true /* if $f1 equals $f2, branch to true */\r\nbc1f $fcc0, false /* if $f1 does not equal $f2, branch */\r\n/* to false */\r\nFloating-Point Relational Instruction Formats\r\nThe following are the floating-point relational instruction formats.\r\nTable 6-6 Floating-Point Relational Instruction Formats\r\nDescription Op-code Operand\r\nCompare F\r\nDouble C.F.D src1,src2\r\nSingle C.F.S\r\nCompare UN\r\nDouble C.UN.D\r\n72 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/c926f90f-ba42-4983-9200-7dbaf52b1ef6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ce6d230923a499a581267f19d50cd5b9cd20b5b106de2b79f7facc2144790a4e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e5481993-4879-4ddc-a416-c54494c3efb6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 95,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nDescription Op-code Operand\r\nSingle C.UN.S\r\n*Compare EQ\r\nDouble C.EQ.D\r\nSingle C.EQ.S\r\nCompare UEQ\r\nDouble C.UEQ.D\r\nSingle C.UEQ.S\r\nCompare OLT\r\nDouble C.OLT.D\r\nSingle C>OLT.S\r\nCompare ULT\r\nDouble C.ULT.D\r\nSingle C.ULT.S\r\nCompare OLE\r\nDouble C.OLE.D\r\nSingle C.OLE.S\r\nCompare ULE\r\nDouble C.ULE.D\r\nSingle C.ULE.S\r\nCompare SF\r\nDouble C.SF.D\r\nSingle C.SF.S\r\nCompare NGLE\r\nDouble C.NGLE.D src1, src2\r\nSingle C.NGLE.S\r\nCompare SEQ\r\nDouble C.SEQ.D\r\n007–2418–006 73",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/e5481993-4879-4ddc-a416-c54494c3efb6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5fa636b116678feee958fd1ca93b194b8d5afa2bcd71ca9bced0223ef04052a6",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "74e89847-a0ba-4107-865d-c45b5eb99771",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 96,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Coprocessor Instruction Set\r\nDescription Op-code Operand\r\nSingle C.SEQ.S\r\nCompare NGL\r\nDouble C.NGL.D\r\nSingle C.NGL.S\r\n*Compare LT\r\nDouble C.LT.D\r\nSingle C.LT.S\r\nCompare NGE\r\nDouble C.NGE.D\r\nSingle C.NGE.S\r\n*Compare LE\r\nDouble C.LE.D\r\nSingle C.LE.S\r\nCompare NGT\r\nDouble C.NGT.D\r\nSingle C.NGT.S\r\nNote: These are the most common Compare instructions. The MIPS coprocessor\r\ninstruction set provides others for IEEE compatibility.\r\nFloating-Point Relational Instruction Descriptions\r\nThis section describes the relational instruction descriptions by function. Refer to\r\nChapter 1 for information regarding registers.\r\n74 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/74e89847-a0ba-4107-865d-c45b5eb99771.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f4c30c113998780237083d3af983b8390253ec489fb56d3f2d32f0f09cc3acee",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 319
      },
      {
        "segments": [
          {
            "segment_id": "bb3bfb7f-dccf-4828-abd0-2e6799a0a664",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 97,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nTable 6-7 Floating-Point Relational Instruction Descriptions\r\nInstruction Description\r\nCompare EQ Instructions Compare the contents of src1 with the contents of src2. If src1 equals\r\nsrc2 a true condition results; otherwise, a false condition results. The\r\nmachine does not signal an exception for unordered values.\r\nCompare F Instructions Compare the contents of src1 with the contents of src2. These\r\ninstructions always produce a false condition. The machine does not\r\nsignal an exception for unordered values.\r\nCompare LE Compare the contents of src1 with the contents of src2. If src1 is less\r\nthan or equal to src2, a true condition results; otherwise, a false\r\ncondition results. The machine signals an exception for unordered\r\nvalues.\r\nCompare LT Compare the contents of src1 with the contents of src2. If src1 is less\r\nthan src2, a true condition results; otherwise, a false condition results.\r\nThe machine signals an exception for unordered values.\r\nCompare NGE Compare the contents of src1 with the contents of src2. If src1 is less\r\nthan src2 (or the contents are unordered), a true condition results;\r\notherwise, a false condition results. The machine signals an exception\r\nfor unordered values.\r\nCompare NGL Compare the contents of src1 with the contents of src2. If src1 equals\r\nsrc2 or the contents are unordered, a true condition results; otherwise,\r\na false condition results. The machine signals an exception for\r\nunordered values.\r\nCompare NGLE Compare the contents of src1 with the contents of src2. If src1 is\r\nunordered, a true condition results; otherwise, a false condition\r\nresults. The machine signals an exception for unordered values.\r\nCompare NGT Compare the contents of src1 with the contents of src2. If src1 is less\r\nthan or equal to src2 or the contents are unordered, a true condition\r\nresults; otherwise, a false condition results. The machine signals an\r\nexception for unordered values.\r\nCompare OLE Instructions Compare the contents of src1 with the contents of src2. If src1 is less\r\nthan or equal to src2, a true condition results; otherwise, a false\r\ncondition results. The machine does not signal an exception for\r\nunordered values.\r\n007–2418–006 75",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/bb3bfb7f-dccf-4828-abd0-2e6799a0a664.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=67b039b3973f1101411ed9232a79f42f7829fd64a2a98ba73e06830919e01a9a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 349
      },
      {
        "segments": [
          {
            "segment_id": "0df304ba-32ce-425b-b2b5-fd14e6c6ed59",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 98,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Coprocessor Instruction Set\r\nInstruction Description\r\nCompare OLT Instructions Compare the contents of src1 with the contents of src2. If src1 is less\r\nthan src2, a true condition results; otherwise, a false condition results.\r\nThe machine does not signal an exception for unordered values.\r\nCompare SEQ Instructions Compare the contents of src1 with the contents of src2. If src1 equals\r\nsrc2, a true condition results; otherwise, a false condition results. The\r\nmachine signals an exception for unordered values.\r\nCompare SF Instructions Compare the contents of src1 with the contents of src2. This always\r\nproduces a false condition. The machine signals an exception for\r\nunordered values.\r\nCompare ULE Instructions Compare the contents of src1 with the contents of src2. If src1 is less\r\nthan or equal to src2 (or src1 is unordered), a true condition results;\r\notherwise, a false condition results. The machine does not signal an\r\nexception for unordered values.\r\nCompare UEQ Instructions Compare the contents of src1 with the contents of src2. If src1 equals\r\nsrc2 (or src1 and src2 are unordered), a true condition results;\r\notherwise, a false condition results. The machine does not signal an\r\nexception for unordered values.\r\nCompare ULT Instructions Compare the contents of src1 with the contents of src2. If src1 is less\r\nthan src2 (or the contents are unordered), a true condition results;\r\notherwise, a false condition results. The machine does not signal an\r\nexception for unordered values.\r\nCompare UN Instructions Compare the contents of src1 with the contents of src2. If either src1 or\r\nsrc2 is unordered, a true condition results; otherwise, a false condition\r\nresults. The machine does not signal an exception for unordered\r\nvalues.\r\nFloating-Point Move Formats\r\nThe floating-point move instructions move data from source to destination registers\r\n(only floating-point registers are allowed).\r\n76 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/0df304ba-32ce-425b-b2b5-fd14e6c6ed59.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d37eea06b9143502731cb883cd983c6e64aca316ff34e916517135746bdfbd2d",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "965ae8c3-68c0-4537-a8b6-105ee5f39ff4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 99,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nDescription Op-code Operand\r\nMove FP\r\nSingle MOV.S destination,src1\r\nDouble MOV.D\r\nMove Conditional on FP False MOVF gpr_dest, gpr_src, cc\r\nMove Conditional on FP True MOVT gpr_dest, gpr_src, cc\r\nFloating-Point Move Conditional on FP False\r\nSingle MOVF.S destination, src1, cc\r\nDouble MOVF.D\r\nFloating-Point Move Conditional on FP True\r\nSingle MOVT.S destination, src1, cc\r\nDouble MOVT.D\r\nFloating-Point Move Conditional on Not Zero\r\nSingle MOVN.S destination, src1, gpr\r\nDouble MOVN.D\r\nFloating-Point Move Conditional on Zero\r\nSingle MOVZ.S gpr_destination, gpr_src1, gpr\r\nDouble MOVZ.D\r\nFloating-Point Move Instruction Descriptions\r\nThis section describes the floating-point move instructions.\r\n007–2418–006 77",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/965ae8c3-68c0-4537-a8b6-105ee5f39ff4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=245e6c345a037ee084e78e4b2f70067d4ffc0b61bf9a374a48eca661fd1dbef6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 392
      },
      {
        "segments": [
          {
            "segment_id": "962daffa-ef5d-453d-883b-c14233e7423b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 100,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Coprocessor Instruction Set\r\nTable 6-8 Floating-Point Move Instruction Descriptions\r\nInstruction Description\r\nMove FP Instructions Move the double or single-precision contents of src1 to the destination\r\nregister, maintaining the specified precision.\r\nConditional Move Instructions Move the general-purpose register, src1, to the destination register if the\r\ncondition code (cc) is zero (MOVF) or is one (MOVT).\r\nConditonal FP Move\r\nInstructions\r\nConditionally, move the double-precision or single-precision contents of src1\r\nto the destination register, maintaining the specified precision.\r\nFloating-Point Conditonal\r\nMove Instructions\r\nConditionally, move a floating-point value from src1 to the destination\r\nregister if the gpr_register is zero (MOVZ) or not equal to zero (MOVN).\r\nSystem Control Coprocessor Instructions\r\nThe system control coprocessor (cp0) handles all functions and special and privileged\r\nregisters for the virtual memory and exception handling subsystems. The system\r\ncontrol coprocessor translates addresses from a large virtual address space into the\r\nmachine’s physical memory space. The coprocessor uses a translation lookaside\r\nbuffer (TLB) to translate virtual addresses to physical addresses.\r\nSystem Control Coprocessor Instruction Formats\r\nThese coprocessor system control instructions do not have operands.\r\nDescription Op-code\r\nCache (not valid in MIPS1 and MIPS2\r\narchitectures)\r\nCACHE\r\nTranslation Lookaside Buffer Probe TLBP\r\nTranslation Lookaside Buffer Read TLBR\r\nTranslation Lookaside Buffer Write\r\nRandom\r\nTLBWR\r\nTranslation Lookaside Write Index TLBWI\r\n78 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/962daffa-ef5d-453d-883b-c14233e7423b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f32b4f0a095ab01402238d93a367d5ebcefc8cd865b203cb79236d4c3b76eef9",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f82d7dab-652f-4a83-b021-b60db041eb33",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 101,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nSynchronize (Not valid in MIPS1\r\narchitectures)\r\nSYNC\r\nSystem Control Coprocessor Instruction Descriptions\r\nThis section describes the system control coprocessor instructions.\r\n007–2418–006 79",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/f82d7dab-652f-4a83-b021-b60db041eb33.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=02e8054be6fb934ffd82642c9b78c5ad9b14962fc5af958aca24fe2aad46fa6d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 236
      },
      {
        "segments": [
          {
            "segment_id": "2dea8601-7fef-441d-a7b5-5b17b69fdb32",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 102,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Coprocessor Instruction Set\r\nTable 6-9 System Control Coprocessor Instruction Descriptions\r\nInstruction Description\r\nCache (CACHE) Cache is the R4000 instruction to perform cache operations. The 16-bit\r\noffset is sign-extended and added to the contents of general register\r\nbase to form a virtual address. The virtual address is translated to a\r\nphysical address using the TLB. The 5-bit sub-opcode (“op”) specifies\r\nthe cache operation for that address. Part of the virtual address is\r\nused to specify the cache block for the operation. Possible operations\r\ninclude invalidating a cache block, writeback to a secondary cache or\r\nmemory, etc.\r\nNote: This instruction is not valid in MIPS1 or MIPS2 architectures.\r\nTranslation Lookaside Buffer Probe\r\n(TLBP)\r\nProbes the translation lookaside buffer (TLB) to see if the TLB has an\r\nentry that matches the contents of the EntryHi register. If a match\r\noccurs, the machine loads the Index register with the number of the\r\nentry that matches the EntryHi register. If no TLB entry matches, the\r\nmachine sets the high-order bit of the Index register.\r\nTranslation Lookaside Buffer Read\r\n(TLBR)\r\nLoads the EntryHi and EntryLo registers with the contents of the\r\ntranslation lookaside buffer (TLB) entry specified in the TLB Index\r\nregister.\r\nTranslation Lookaside BufferWrite\r\nRandom (TLBWR)\r\nLoads the specified translation lookaside buffer (TLB) entry with the\r\ncontents of the EntryHi and EntryLo registers. The contents of the\r\nTLB Random register specify the TLB entry to be loaded.\r\nTranslation Lookaside Buffer Write\r\nIndex (TLBWI)\r\nLoads the specified translation lookaside buffer (TLB) entry with the\r\ncontents of the EntryHI and EntryLO registers. The contents of the\r\nTLB Index register specify the TLB entry to be loaded.\r\nSynchronize (SYNC) Ensures that all loads and stores fetched before the sync are\r\ncompleted, before allowing any following loads or stores. Use of sync\r\nto serialize certain memory references may be required in\r\nmultiprocessor environments.\r\nNote: This instruction is not valid in the MIPS1 architecture.\r\n80 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/2dea8601-7fef-441d-a7b5-5b17b69fdb32.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f182ebdbd0e1f913595f4bf55e95a2288b35332407b1d8570a44a2ed75bce17d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 317
      },
      {
        "segments": [
          {
            "segment_id": "d13a52d2-2ee7-42f5-a556-89a978dbf0fc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 103,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nControl and Status Register\r\nFloating-point coprocessor control register 31 contains status and control information.\r\nSee Figure 6-2. It controls the arithmetic rounding mode and the enabling of\r\nuser-level traps, and indicates exceptions that occurred in the most recently executed\r\ninstruction, and any exceptions that may have occurred without being trapped:\r\nControl and Status register\r\n(c = compare bit)\r\nV\r\n11\r\nEnable bits\r\n10 9 8\r\nZ O U I\r\n7\r\nException bits\r\n15 14 13\r\nZ O U I\r\n12\r\nV\r\n6\r\nSticky bits\r\n543\r\nZ O U I\r\n2\r\nV\r\n16\r\nE\r\n17\r\n0 c 0\r\n31 24 23 22\r\nBits:\r\nExceptions Enables Sticky\r\nbits 0\r\n8 6 5 52 1 5\r\n18 17 12 11 7 6 2 1 0\r\na12035\r\nFigure 6-2 Floating Control and Status Register 31\r\nThe exception bits are set for instructions that cause an IEEE standard exception or an\r\noptional exception used to emulate some of the more hardware-intensive features of\r\nthe IEEE standard.\r\nThe exception field is loaded as a side-effect of each floating-point operation\r\n(excluding loads, stores, and unformatted moves). The exceptions which were caused\r\nby the immediately previous floating-point operation can be determined by reading\r\nthe exception field.\r\nThe meaning of each bit in the exception field is given below. If two exceptions occur\r\ntogether on one instruction, the field will contain the inclusive-OR of the bits for each\r\nexception:\r\nException Field Bit Description\r\nE Unimplemented Operation\r\nI Inexact Exception\r\n007–2418–006 81",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/d13a52d2-2ee7-42f5-a556-89a978dbf0fc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8f33026c8dd6e0f2e5cebdb41732ed8695d1303776274e70ded1bf178169d539",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 247
      },
      {
        "segments": [
          {
            "segment_id": "89960ad6-b60b-45e6-930f-52366b73879d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 104,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Coprocessor Instruction Set\r\nO Overflow Exception\r\nU Underflow Exception\r\nV Invalid Operation\r\nZ Division-by-Zero\r\nThe unimplemented operation exception is normally invisible to user-level code. It is\r\nprovided to maintain IEEE compatibility for non-standard implementations.\r\nThe five IEEE standard exceptions are listed below:\r\nField Description\r\nI Inexact Exception\r\nO Overflow Exception\r\nU Underflow Exception\r\nV Invalid Operation\r\nZ Division-by-Zero\r\nEach of the five exceptions is associated with a trap under user control, which is\r\nenabled by setting one of the five bits of the enable field, shown above.\r\nWhen an exception occurs, both the corresponding exception and status bits are set. If\r\nthe corresponding enable flag bit is set, a trap is taken. In some cases the result of an\r\noperation is different if a trap is enabled.\r\nThe status flags are never cleared as a side effect of floating-point operations, but may\r\nbe set or cleared by writing a new value into the status register, using a “move to\r\ncoprocessor control” instruction.\r\nThe floating-point compare instruction places the condition which was detected into\r\nthe c` ’ bit of the control and status register, so that the state of the condition line may\r\nbe saved and restored. The c` ’ bit is set if the condition is true, and cleared if the\r\ncondition is false, and is affected only by compare and move to control register\r\ninstructions.\r\nException Trap Processing\r\nFor each IEEE standard exception, a status flag is provided that is set on any\r\noccurrence of the corresponding exception condition with no corresponding exception\r\ntrap signaled. It may be reset by writing a new value into the status register. The\r\nflags may be saved and restored individually, or as a group, by software. When no\r\n82 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/89960ad6-b60b-45e6-930f-52366b73879d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4dc4544d9237906aa779e2f2bed13162aebcfbb9518ec7071fe747343561d021",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 288
      },
      {
        "segments": [
          {
            "segment_id": "473c410e-59cf-4cfc-854e-3355b6e18489",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 105,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nexception trap is signaled, a default action is taken by the floating-point coprocessor,\r\nwhich provides a substitute value for the original, exceptional, result of the\r\nfloating-point operation. The default action taken depends on the type of exception,\r\nand in the case of the Overflow exception, the current rounding mode.\r\nInvalid Operation Exception\r\nThe invalid operation exception is signaled if one or both of the operands are invalid\r\nfor an implemented operation. The result, when the exception occurs without a trap,\r\nis a quiet NaN when the destination has a floating-point format, and is indeterminate\r\nif the result has a fixed-point format. The invalid operations are:\r\n• Addition or subtraction: magnitude subtraction of infinities, such as ( + 1 ) – ( –\r\n1 ).\r\n• Multiplication: 0 times 1, with any signs.\r\n• Division: 0 over 0 or 1 over 1, with any signs.\r\n• Square root of x: where x is less than zero.\r\n• Conversion of a floating-point number to a fixed-point format when an overflow,\r\nor operand value of infinity or NaN, precludes a faithful representation in that\r\nformat.\r\n• Comparison of predicates involving < or > without ?, when the operands are\r\n“unordered”.\r\n• Any operation on a signaling NaN.\r\nSoftware may simulate this exception for other operations that are invalid for the\r\ngiven source operands. Examples of these operations include IEEE-specified functions\r\nimplemented in software, such as Remainder: x REM y, where y is zero or x is infinite;\r\nconversion of a floating-point number to a decimal format whose value causes and\r\noverflow or is infinity of NaN; and transcendental functions, such as ln (–5) or cos-1(3).\r\nDivision-by-zero Exception\r\nThe division by zero exception is signaled on an implemented divide operation if the\r\ndivisor is zero and the dividend is a finite nonzero number. The result, when no trap\r\noccurs, is a correctly signed infinity.\r\nIf division by zero traps are enabled, the result register is not modified, and the\r\nsource registers are preserved.\r\n007–2418–006 83",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/473c410e-59cf-4cfc-854e-3355b6e18489.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8d855e8b9aeca270f2bd7d798a786aea00172564e2f171d7dc3201a54fcef8ee",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 336
      },
      {
        "segments": [
          {
            "segment_id": "3d4ba6ad-c9fb-4b9e-97ca-4cad113a4e6a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 106,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Coprocessor Instruction Set\r\nSoftware may simulate this exception for other operations that produce a signed\r\ninfinity, such as ln(0), sec(p/2), csc(0) or 0-1.\r\nOverflow Exception\r\nThe overflow exception is signaled when what would have been the magnitude of the\r\nrounded floating-point result, were the exponent range unbounded, is larger than the\r\ndestination format’s largest finite number. The result, when no trap occurs, is\r\ndetermined by the rounding mode and the sign of the intermediate result.\r\nIf overflow traps are enabled, the result register is not modified, and the source\r\nregisters are preserved.\r\nUnderflow Exception\r\nTwo related events contribute to underflow. One is the creation of a tiny non-zero\r\nresult between 2Emin (minimum expressible exponent) which, because it is tiny, may\r\ncause some other exception later. The other is extraordinary loss of accuracy during\r\nthe approximation of such tiny numbers by denormalized numbers.\r\nThe IEEE standard permits a choice in how these events are detected, but requires\r\nthat they must be detected the same way for all operations.\r\nThe IEEE standard specifies that “tininess” may be detected either: “after rounding”\r\n(when a nonzero result computed as though the exponent range were unbounded\r\nwould lie strictly between 2Emin), or “before rounding” (when a nonzero result\r\ncomputed as though the exponent range and the precision were unbounded would lie\r\nstrictly between 2Emin). The architecture requires that tininess be detected after\r\nrounding.\r\nLoss of accuracy may be detected as either “denormalization loss” (when the delivered\r\nresult differs from what would have been computed if the exponent range were\r\nunbounded), or “inexact result” (when the delivered result differs from what would\r\nhave been computed if the exponent range and precision were both unbounded). The\r\narchitecture requires that loss of accuracy be detected as inexact result.\r\nWhen an underflow trap is not enabled, underflow is signaled (via the underflow\r\nflag) only when both tininess and loss of accuracy have been detected. The delivered\r\nresult might be zero, denormalized, or 2Emin. When an underflow trap is enabled,\r\nunderflow is signaled when tininess is detected regardless of loss of accuracy.\r\nIf underflow traps are enabled, the result register is not modified, and the source\r\nregisters are preserved.\r\n84 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/3d4ba6ad-c9fb-4b9e-97ca-4cad113a4e6a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e3bc40be416e30b259da91671723265c75ad0fa2b75ba33c0bf5448d9b91aa31",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 362
      },
      {
        "segments": [
          {
            "segment_id": "68498077-5169-4f1d-a66a-57b453879947",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 107,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nInexact Exception\r\nIf the rounded result of an operation is not exact or if it overflows without an\r\noverflow trap, then the inexact exception is signaled. The rounded or overflowed\r\nresult is delivered to the destination register, when no inexact trap occurs. If inexact\r\nexception traps are enabled, the result register is not modified, and the source\r\nregisters are preserved.\r\nUnimplemented Operation Exception\r\nIf an operation is specified that the hardware may not perform, due to an\r\nimplementation restriction on the supported operations or supported formats, an\r\nunimplemented operation exception may be signaled, which always causes a trap, for\r\nwhich there are no corresponding enable or flag bits. The trap cannot be disabled.\r\nThis exception is raised at the execution of the unimplemented instruction. The\r\ninstruction may be emulated in software, possibly using implemented floating-point\r\nunit instructions to accomplish the emulation. Normal instruction execution may then\r\nbe restarted.\r\nThis exception is also raised when an attempt is made to execute an instruction with\r\nan operation code or format code which has been reserved for future architectural\r\ndefinition. The unimplemented instruction trap is not optional, since the current\r\ndefinition contains codes of this kind.\r\nThis exception may be signaled when unusual operands or result conditions are\r\ndetected, for which the implemented hardware cannot handle the condition properly.\r\nThese may include (but are not limited to), denormalized operands or results, NaN\r\noperands, trapped overflow or underflow conditions. The use of this exception for\r\nsuch conditions is optional.\r\nFloating-Point Rounding\r\nBits 0 and 1 of the coprocessor control register 31 sets the rounding mode for\r\nfloating-point. The machine allows four rounding modes:\r\n• Round to nearest rounds the result to the nearest representable value. When the\r\ntwo nearest representable values are equally near, this mode rounds to the value\r\nwith the least significant bit zero. To select this mode, set bits 1..0 of control\r\nregister 31 to 0.\r\n007–2418–006 85",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/68498077-5169-4f1d-a66a-57b453879947.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3090468583eef70d584340639b3270efbe6986443c273b75cef9e854d5c745ab",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9f1427ea-4f5e-4fcc-bc1c-31041654cb68",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 108,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Coprocessor Instruction Set\r\n• Round toward zero rounds toward zero. It rounds to the value that is closest to\r\nand not greater in magnitude than the infinitely precise result. To select this mode,\r\nset bits 1..0 of control register 31 to 1.\r\n• Round toward positive infinity rounds to the value that is closest to and not less\r\nthan the infinitely precise result. To select this mode, set bits 1..0 of control register\r\n31 to 2.\r\n• Round toward negative infinity rounds toward negative infinity. It rounds to the\r\nvalue that is closest to and not greater than the infinitely precise result. To select\r\nthis mode, set bits 1..0 of control register 31 to 3.\r\nTo set the rounding mode:\r\n/* setting the rounding mode */\r\nRoundNearest = Ox0\r\nRoundZero = Ox1\r\nRoundPosInf = Ox2\r\nRoundNegInf = Ox3\r\ncfc1 rt2, $31 # move from coprocessor 1\r\nand rt, Oxfffffffc # zero the round mode bits\r\nor rt, RoundZero # set mask as round to zero\r\nctc1 rt, $f31 # move to coprocessor 1\r\n86 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/9f1427ea-4f5e-4fcc-bc1c-31041654cb68.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fc139a638471431ab56312612e864dc4fa1e9c5cb795c7a12fd0d575286ca87f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 498
      },
      {
        "segments": [
          {
            "segment_id": "08410b06-e9c4-4a47-999f-f786e573d0a6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 109,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 7\r\nWriting Assembly Language Code\r\nThis chapter gives rules and examples to follow when designing an assembly\r\nlanguage program. The chapter includes a tutorial section that contains information\r\nabout how calling sequences work. This involves writing a skeleton version of your\r\nprospective assembly routine using a high-level language, and then compiling it with\r\nthe –S option to generate a human-readable assembly language file. The assembly\r\nlanguage file can then be used as the starting point for coding your routine. See\r\n\"Using the .s Assembly Language File\", page 100 for details about the assembly\r\nlanguage file produced with this option.\r\nThis assembler works in either 32-bit, high performance 32-bit (N32) or 64-bit\r\ncompilation modes. While these modes are very similar, due to the difference in data,\r\nregister and address sizes, the N32 and 64-bit assembler linkage conventions are not\r\nalways the same as those for 32-bit mode. For details on some of these differences, see\r\nthe MIPSpro 64-Bit Porting and Transition Guide and the MIPSpro N32 ABI Handbook.\r\nThe procedures and examples in this chapter, for the most part, describe 32-bit\r\ncompilation mode. In some cases, specific differences necessitated by 64-bit mode are\r\nhighlighted.\r\nIntroduction\r\nWhen you write assembly language routines, you should follow the same calling\r\nconventions that the compilers observe, for two reasons:\r\n• Often your code must interact with compiler-generated code, accepting and\r\nreturning arguments or accessing shared global data.\r\n• The symbolic debugger gives better assistance in debugging programs using\r\nstandard calling conventions.\r\nThe conventions for the compiler system are a bit more complicated than some,\r\nmostly to enhance the speed of each procedure call. Specifically:\r\n• The compilers use the full, general calling sequence only when necessary; where\r\npossible, they omit unneeded portions of it. For example, the compilers don’t use\r\na register as a frame pointer whenever possible.\r\n007–2418–006 87",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/08410b06-e9c4-4a47-999f-f786e573d0a6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7860468a4334cf4c014b8bde043b49f6c5fe8c44c78999bef4fc737c216f2b34",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 306
      },
      {
        "segments": [
          {
            "segment_id": "88ecc6d7-ba8d-45b5-bdb7-86fd5d944096",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 110,
            "page_width": 612,
            "page_height": 792,
            "content": "7: Writing Assembly Language Code\r\n• The compilers and debugger observe certain implicit rules rather than\r\ncommunicating via instructions or data at execution time. For example, the\r\ndebugger looks at information placed in the symbol table by a “.frame” directive\r\nat compilation time, so that it can tolerate the lack of a register containing a frame\r\npointer at execution time.\r\nProgram Design\r\nThis section describes some general areas of concern to the assembly language\r\nprogrammer:\r\n• Stack frame requirements on entering and exiting a routine.\r\n• The “shape” of data (scalars, arrays, records, sets) laid out by the various\r\nhigh-level languages.\r\nFor information about register format, and general, special, and floating-point\r\nregisteres, see Chapter 1.\r\nThe Stack Frame\r\nThis discussion of the stack frame, particularly regarding the graphics, describes\r\n32-bit operations. In 32-bit mode, restrictions such as stack addressing are enforced\r\nstrictly. While these restrictions are not enforced rigidly for 64-bit stack frame usage,\r\ntheir observance is probably still a good coding practice, especially if you count on\r\nreliable debugging information.\r\nThe compilers classify each routine into one of the following categories:\r\n• Non-leaf routines, that is, routines that call other procedures.\r\n• Leaf routines, that is, routines that do not themselves execute any procedure calls.\r\nLeaf routines are of two types:\r\n– Leaf routines that require stack storage for local variables\r\n– Leaf routines that do not require stack storage for local variables.\r\nYou must decide the routine category before determining the calling sequence.\r\nTo write a program with proper stack frame usage and debugging capabilities, use\r\nthe following procedure:\r\n88 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/88ecc6d7-ba8d-45b5-bdb7-86fd5d944096.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4c67af3fa30e40e2336d4167af0e1d1191dbfd899816521f8ff65322d2df4770",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 263
      },
      {
        "segments": [
          {
            "segment_id": "5b8b388a-7362-4dce-b7a8-040d306e6839",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 111,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\n1. Regardless of the type of routine, you should include a .ent pseudo-op and an\r\nentry label for the procedure. The .ent pseudo-op is for use by the debugger, and\r\nthe entry label is the procedure name. The syntax is:\r\n.ent procedure_name\r\nprocedure_name:\r\n2. If you are writing a leaf procedure that does not use the stack, skip to step 3. For\r\nleaf procedure that uses the stack or non-leaf procedures, you must allocate all\r\nthe stack space that the routine requires. The syntax to adjust the stack size is:\r\nsubu $sp,framesize\r\nwhere framesize is the size of frame required; framesize must be a multiple of 16.\r\nSpace must be allocated for:\r\n• Local variables.\r\n• Saved general registers. Space should be allocated only for those registers saved.\r\nFor non-leaf procedures, you must save $31, which is used in the calls to other\r\nprocedures from this routine. If you use registers $16--$23, you must also save\r\nthem.\r\n• Saved floating-point registers. Space should be allocated only for those registers\r\nsaved. If you use registers $f20--$f30 (for 32-bit) or $f24--$f31 (for 64-bit),\r\nyou must also save them.\r\n• Procedure call argument area. You must allocate the maximum number of bytes\r\nfor arguments of any procedure that you call from this routine.\r\nNote: Once you have modified $sp, you should not modify it again for the rest of\r\nthe routine.\r\n3. Now include a .frame pseudo-op:\r\n.frame framereg,framesize,returnreg\r\nThe virtual frame pointer is a frame pointer as used in other compiler systems\r\nbut has no register allocated for it. It consists of the framereg ($sp, in most cases)\r\nadded to the framesize (see step 2 above). The following figures show the stack\r\ncomponents for -32 and -n32 and -64.\r\n007–2418–006 89",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/5b8b388a-7362-4dce-b7a8-040d306e6839.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0bdd819dfcfee3de81baa23eae7c78d29cee618f4ac2156d8d63d60056daddf1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d6718cde-6701-47e6-b5d1-d9ace8ceda32",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 112,
            "page_width": 612,
            "page_height": 792,
            "content": "7: Writing Assembly Language Code\r\nThe returnreg specifies the register containing the return address (usually $31).\r\nThese usual values may change if you use a varying stack pointer or are\r\nspecifying a kernel trap routine.\r\nFramesize\r\nArgument n\r\nArgument 1\r\nLocal & temporaries\r\nSaved registers\r\n(including returnreg)\r\nArgument build\r\n•\r\n•\r\n•\r\n•\r\n•\r\n•\r\nHigh memory\r\nLow memory\r\nStack pointer($sp)\r\n(framereg)\r\nVirtual\r\nframepointer ($fp)\r\nFrame offset\r\na12036\r\nFigure 7-1 Stack Organization for -32\r\n90 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/d6718cde-6701-47e6-b5d1-d9ace8ceda32.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ecee1dc691dff968d15ae48bb75d5032c5aee0408776a082f1cd637e99bf9ee5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 370
      },
      {
        "segments": [
          {
            "segment_id": "4b3e683a-71d3-4fd4-a2c5-b852af3db184",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 113,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nStack parameters\r\nRegister parameters a0 - a7\r\nLocals, temporaries, and saved registers\r\n•\r\n•\r\n•\r\n•\r\n•\r\n•\r\nHigh memory\r\nLow memory\r\nStack pointer($sp)\r\n(framereg)\r\nVirtual\r\nframe pointer ($fp)\r\na12142\r\nStack argument build\r\nFigure 7-2 Stack Organization for -n32 and -64\r\n4. If the procedure is a leaf procedure that does not use the stack, skip to step 7.\r\nOtherwise you must save the registers you allocated space for in step 2.\r\nTo save the general registers, use the following operations:\r\n.mask bitmask,frameoffset\r\nsw reg,framesize+frameoffset-N($sp)\r\nThe .mask directive specifies the registers to be stored and where they are stored.\r\nA bit should be on in bitmask for each register saved (for example, if register $31\r\nis saved, bit 31 should be ‘1’ in bitmask. Bits are set in bitmask in little-endian\r\norder, even if the machine configuration is big-endian).The frameoffset is the offset\r\nfrom the virtual frame pointer (this number is usually negative). N should be 0\r\n007–2418–006 91",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/4b3e683a-71d3-4fd4-a2c5-b852af3db184.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=934cae6ea8be691ebc3ed40005afbabecb803732657ba5d37f78681cd723b419",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0f4b77fe-dd8f-4535-ab86-69508c6de570",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 114,
            "page_width": 612,
            "page_height": 792,
            "content": "7: Writing Assembly Language Code\r\nfor the highest numbered register saved and then incremented by four for each\r\nsubsequently lower numbered register saved. For example:\r\nsw $31,framesize+frameoffset($sp)\r\nsw $17,framesize+frameoffset-4($sp)\r\nsw $16,framesize+frameoffset-16($sp)\r\nFigure 7-3, page 93, illustrates this example.\r\nNow save any floating-point registers that you allocated space for in step 2 as\r\nfollows:\r\n.fmask bitmask,frameoffset\r\ns.[sd] reg,framesize+frameoffset-N($sp)\r\nNotice that saving floating-point registers is identical to saving general registers\r\nexcept we use the .fmask pseudo-op instead of .mask, and the stores are of\r\nfloating-point singles or doubles.The discussion regarding saving general registers\r\napplies here as well, but remember that N should be incremented by 16 for\r\ndoubles.The stack framesize must be a multiple of 16.\r\n92 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/0f4b77fe-dd8f-4535-ab86-69508c6de570.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5b473b159a7a0290850f3a9715519fc0721bcad2f876ba86aa32d8ab332cd883",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1bfbdf56-dd48-4683-9a00-8858e07b6198",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 115,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nFramesize\r\nSaved $31\r\nHigh memory\r\nLow memory\r\nStack pointer($sp)\r\nVirtual\r\nframepointer ($fp)\r\nFrame offset\r\nSaved $17\r\nSaved $16\r\n•\r\n•\r\n•\r\na12037\r\nFigure 7-3 Stack Example\r\n5. This step describes parameter passing: how to access arguments passed into your\r\nroutine and passing arguments correctly to other procedures. For information on\r\nhigh-level language-specific constructs (call-by-name, call-by-value, string or\r\nstructure passing), refer to the MIPSpro N32/64 Compiling and Performance Tuning\r\nGuide.\r\nAs specified in step 2, space must be allocated on the stack for all arguments even\r\nthough they may be passed in registers. This provides a saving area if their\r\nregisters are needed for other variables.\r\nGeneral registers must be used for passing arguments. For 32-bit compilations,\r\ngeneral registers $4–$7 and float registers $f12, $f14 are used for passing the\r\nfirst four arguments (if possible). You must allocate a pair of registers (even if it’s\r\n007–2418–006 93",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/1bfbdf56-dd48-4683-9a00-8858e07b6198.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f3faa08faf136311511d04822fc6aa51bd80e957322581560bccf5d7d127594a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 431
      },
      {
        "segments": [
          {
            "segment_id": "ada75a59-8aac-4171-a6d7-e98c9ead7d22",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 116,
            "page_width": 612,
            "page_height": 792,
            "content": "7: Writing Assembly Language Code\r\na single precision argument) that start with an even register for floating-point\r\narguments appearing in registers.\r\nFor 64-bit compilations, general registers $4–$11 and float registers $f12,\r\nthrough $f19 are used for passing the first eight arguments (if possible).\r\nIn Table 7-1 and Table 7-2, the “fN” arguments are considered single- and\r\ndouble-precision floating-point arguments, and “nN” arguments are everything\r\nelse. The ellipses (...) mean that the rest of the arguments do not go in registers\r\nregardless of their type. The “stack” assignment means that you do not put this\r\nargument in a register. The register assignments occur in the order shown in\r\norder to satisfy optimizing compiler protocols:\r\nTable 7-1 Parameter Passing (-32)\r\nArgument List Register and Stack Assignments\r\nf1, f2 $f12, $f14\r\nf1, n1, f2 $f12, $6, stack\r\nf1, n1, n2 $f12, $6 $7\r\nn1, n2, n3, n4 $4, $5, $6, $7\r\nn1, n2, n3, f1 $4, $5, $6, stack\r\nn1, n2, f1 $4, $5, ($6, $6)\r\nn1, f1 $4, ($6, $7)\r\nTable 7-2 Parameter Passing (-n32 and -64)\r\nArgument List Register and Stack Assignments\r\nd1,d2 $f12, $f13\r\ns1,s2 $f12, $f13\r\ns1,d1 $f12, $f13\r\nd1,s1 $f12, $f13\r\nn1,d1 $4,$f13\r\n94 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/ada75a59-8aac-4171-a6d7-e98c9ead7d22.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=10e5fadd879a39680737258fe90c8843b28ee4dd1482c86a151b846525ede742",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6b11e748-d3a5-4adb-9773-4644e8c1c063",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 117,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nArgument List Register and Stack Assignments\r\nd1,n1,d1 $f12, $5,$f14\r\nn1,n2,d1 $4, $5,$f14\r\nd1,n1,n2 $f12, $5,$6\r\ns1,n1,n2 $f12, $5,$6\r\nd1,s1,s2 $f12, $f13, $f14\r\ns1,s2,d1 $f12, $f13, $f14\r\nn1,n2,n3,n4 $4,$5,$6,$7\r\nn1,n2,n3,d1 $4,$5,$6,$f15\r\nn1,n2,n3,s1 $4,$5,$6, $f15\r\ns1,s2,s3,s4 $f12, $f13,$f14,$f15\r\ns1,n1,s2,n2 $f12, $5,$f14,$7\r\nn1,s1,n2,s2 $4,$f13,$6,$f15\r\nn1,s1,n2,n3 $4,$f13,$6,$7\r\nd1,d2,d3,d4,d5 $f12, $f13, $f14, $f15, $f16\r\nd1,d2,d3,d4,d5,s1,s2,s3,s4 $f12, $f13, $f14, $f15, $f16, $f17, $f18,$f19,stack\r\nd1,d2,d3,s1,s2,s3,n1,n2,n3 $f12, $f13, $f14, $f15, $f16, $f17, $10,$11, stack\r\n6. Next, you must restore registers that were saved in step 4. To restore general\r\npurpose registers:\r\nlw reg,framesize+frameoffset-N($sp)\r\nTo restore the floating-point registers:\r\nl.[sd] reg,framesize+frameoffset-N($sp)\r\nRefer to step 4 for a discussion of the value of N.)\r\n7. Get the return address:\r\nlw $31,framesize+frameoffset($sp)\r\n8. Clean up the stack:\r\naddu framesize\r\n007–2418–006 95",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/6b11e748-d3a5-4adb-9773-4644e8c1c063.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5038c1246ae889bc9cf917f083a61014ff4744e74223f129439dd26a43407ff3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 322
      },
      {
        "segments": [
          {
            "segment_id": "94c12ab5-a204-4be0-a2a7-ebff43009e55",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 118,
            "page_width": 612,
            "page_height": 792,
            "content": "7: Writing Assembly Language Code\r\n9. Return:\r\nj $31\r\n10. To end the procedure:\r\n.end procedurename\r\nThe difference in stack frame usage for -n32 and -64 operations can be summarized\r\nas follows:\r\nThe portion of the argument structure beyond the initial eight doublewords is passed\r\nin memory on the stack, pointed to by the stack pointer at the time of call. The caller\r\ndoes not reserve space for the register arguments; the callee is responsible for\r\nreserving it if required (either adjacent to any caller-saved stack arguments if required,\r\nor elsewhere as appropriate). No requirement is placed on the callee either to allocate\r\nspace and save the register parameters, or to save them in any particular place.\r\nThe Shape of Data\r\nIn most cases, high-level language routine and assembly routines communicate via\r\nsimple variables: pointers, integers, booleans, and single- and double-precision real\r\nnumbers. Describing the details of the various high-level data structures (arrays,\r\nrecords, sets, and so on) is beyond the scope of this book. If you need to access such\r\na structure as an argument or as a shared global variable, refer to the MIPSpro N32/64\r\nCompiling and Performance Tuning Guide.\r\nExamples\r\nThis section contains the examples that illustrate program design rules. Each example\r\nshows a procedure written and C and its equivalent written in assembly language.\r\nExample 7-1 Non-leaf procedure\r\nThe following example shows a non-leaf procedure. Notice that it creates a\r\nstackframe, and also saves its return address since it must put a new return address\r\ninto register $31 when it invokes its callee:\r\nfloat\r\nnonleaf(int i, int *j)\r\n{\r\ndouble atof();\r\n96 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/94c12ab5-a204-4be0-a2a7-ebff43009e55.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=92cceca640a7d95da6b0f951b971e7094ef970e520c476ec56434cceec459072",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fec68ebd-524b-46ef-b2ae-31506eef1b48",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 119,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nint temp;\r\ntemp = i - *j;\r\nif (i < *j) temp = -temp;\r\nreturn atof(temp);\r\n}\r\n.globl nonleaf\r\n# 1 float\r\n# 2 nonleaf(i, j)\r\n# 3 int i, *j;\r\n#4{\r\n.ent nonleaf 2\r\nnonleaf;\r\n.cpload $25 ## Load $gp\r\nsubu $sp, 32 ## Create stackframe\r\nsw $31, 20($sp) ## Save the return\r\n## address\r\nsw $sp, 24($sp) ## Save gp\r\n.mask 0x80000000, -4\r\n.frame $sp, 32, $31\r\n# 5 double atof();\r\n# 6 int temp;\r\n# 7\r\n# 8 temp = i - *j;\r\nlw $2, 0($5) ## Arguments are in\r\n## $4 and $5\r\nsubu $3, $4, $2\r\n# 9 if (i < *j) temp = -temp;\r\nbge $4, $2, $32 ## Note: $32 is a label,\r\n## not a reg\r\nnegu $3, $3\r\n$32:\r\n# 10 return atof(temp);\r\nmove $4, $3\r\njal atof\r\ncvt.s. $f0, $f0 ## Return value goes in $f0\r\nlw $gp, 24($sp) ## Restore gp\r\nlw $31, 20($sp) ## Restore return address\r\naddu $sp, 32 ## Delete stackframe\r\nj $31 ## Return to caller\r\n.end nonleaf\r\n007–2418–006 97",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/fec68ebd-524b-46ef-b2ae-31506eef1b48.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7f47a9cb58a45c3b30dcc4ab5a44f891b7be4c8d2390a5b4924ce72b34542e40",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 447
      },
      {
        "segments": [
          {
            "segment_id": "db82da42-a943-43c2-8c77-334ba470816c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 120,
            "page_width": 612,
            "page_height": 792,
            "content": "7: Writing Assembly Language Code\r\nThe -n32 code for the previous example is shown below. Note that this code is under\r\n.set noreorder, so be aware of delay slots.\r\n.set noreorder\r\n# Program Unit: nonleaf\r\n.ent nonleaf\r\n.globl nonleaf\r\nnonleaf: # 0x0\r\n.frame $sp, 32, $31\r\n.mask 0x80000000, -32\r\nlw $7,0($5) # load *j\r\naddiu $sp,$sp,-32 #.frame.len.nonleaf\r\nsd $gp,8($sp) # save $gp\r\nsd $31,0($sp) # save $ra\r\nlui $31,%hi(%neg(%gp_rel(nonleaf+0))) #load new $gp\r\naddiu $31,$31,%lo(%neg(%gp_rel(nonleaf +0))) #\r\naddu $gp,$25,$31 #\r\nslt $1,$4,$7 # compare i to *j\r\nbeq $1,$0,.L.1.1.temp #\r\nsubu $7,$4,$7 # i-*j, in delay slot of branch\r\nsubu $7,$0,$7 # temp = -temp\r\n.L.1.1.temp: # 0x2c\r\nlw $25,%call16(atof)($gp)#\r\njalr $25 #atof\r\nor $4,$7,$0 # delay slot of jalr loads arg\r\nld $31,0($sp) # restore $ra\r\ncvt.s.d $f0,$f0 #\r\nld $tp,8($sp) # restore $gp\r\njr $31 #\r\naddiu $sp,$sp,32 # .frame.len.nonleaf\r\n.end nonleaf\r\nExample 7-2 Leaf Procedure\r\nThis example shows a leaf procedure that does not require stack space for local\r\nvariables. Notice that it creates no stackframe, and saves no return address.\r\nint\r\nleaf(p1, p2)\r\nint p1, p2;\r\n98 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/db82da42-a943-43c2-8c77-334ba470816c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=764462120d5d55ab2c3a5384fc48d392f7f057847be173d94d5f909fbb62a5d1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "515f9cda-2803-4d0b-a606-e6fb044f2d3e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 121,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\n{\r\nreturn (p1 > p2) ? p1 : p2;\r\n}\r\n.globl leaf\r\n# 1 int\r\n# 2 leaf(p1, p2)\r\n# 3 int p1, p2;\r\n#4 {\r\n.ent leaf2\r\nleaf:\r\n.frame $sp, 0, $31\r\n# 5 return (p1 > p2) ? p1 : p2;\r\nble $4, $5, $32 ## Arguments in\r\n## $4 and $5\r\nmove $3, $4\r\nb $33\r\n$32:\r\nmove $3, $5\r\n$33:\r\nmove $2, $3 ## Return value\r\n## goes in $2\r\nj $31 ## Return to\r\n## caller\r\n#6 }\r\n.end leaf\r\nThe -n32 code for the previous example looks like this:\r\n.set noreorder\r\n.ent leaf\r\n.globl leaf\r\nleaf: #0x0\r\n.fram$sp, 0, $31\r\nslt $2,$5,$4 # compare p1 and p2\r\nbeq $2, $0,.L.1.2.temp #\r\nor $9,$4,$0 # delay slot\r\nb .L.1.1.temp #\r\nor $2,$9,$0 # delay slot, return pl\r\n.L.1.2.temp: # 0x14\r\nor $2,$5,$0 # return p2\r\n.L.1.1.temp: # 0x18\r\njr $31 #\r\n007–2418–006 99",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/515f9cda-2803-4d0b-a606-e6fb044f2d3e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cd6bb3d5714be35233294daa46cb8edbd9eba2fe9e3f98602562a141bd45f09b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 334
      },
      {
        "segments": [
          {
            "segment_id": "e99fa30f-bdd8-466e-8d5f-6bbda8bc3a0b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 122,
            "page_width": 612,
            "page_height": 792,
            "content": "7: Writing Assembly Language Code\r\nnop # delay slot\r\n.end leaf\r\nInterfaces Between Assembly Routines and Other Languages\r\nThe rules and parameter requirements that exist between assembly language and\r\nother languages are varied and complex. The simplest approach to coding an\r\ninterface between an assembly routine and a routine written in a high-level language\r\nis to do the following:\r\n• Use the high-level language to write a skeletal version of the routine that you plan\r\nto code in assembly language.\r\n• Compile the program using the –S option, which creates an assembly language\r\n(.s) version of the compiled source file (the -O option, though not required,\r\nreduces the amount of code generated, making the listing easier to read).\r\n• Study the assembly-language listing and then, imitating the rules and conventions\r\nused by the compiler, write your assembly language code.\r\nUsing the .s Assembly Language File\r\nThe MIPSpro compilers can produce a .s file rather than a .o file. The file is\r\nproduced by specifying the -S option on the command line instead of the -c option.\r\nThe assembly language file that is produced contains exactly the same set of\r\ninstructions that would have been produced in the .o object file, and inputting the .s\r\nfile to the assembler produces an object file with the same instructions that the\r\ncompiler would have produced. The .s file is a listing of the instructions, but does\r\nnot contain all the object information that a .o file contains. Therefore, a .o file\r\ngenerated by a .s file will not be exactly the same as one generated directly by the\r\ncompiler and they are not guaranteed to work identically (for example,\r\nreorg_common information is lost).\r\nIn addition to the program’s instructions, the .s file contains comments indicating the\r\neffects of various optimization transformations that were made by the compiler.\r\nMost of these comments are self-explanatory or contain easily understood\r\ninformation, while other comments require a detailed knowledge of the compiler’s\r\ninternal workings. The following information is intended to describe the more useful,\r\n100 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/e99fa30f-bdd8-466e-8d5f-6bbda8bc3a0b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=117432c6e157e2ce7e6a38f89cd056326b970104699b9ce5e798f1ba8c3bfde6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 339
      },
      {
        "segments": [
          {
            "segment_id": "5aa521fe-c687-49f2-a681-28577570dcfb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 123,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nnon-obvious, features of the file without getting into the details of optimization\r\ntheory. For more detailed information about optimization see the MIPSpro N32/64\r\nCompiling and Performance Tuning Guide.\r\nThe following subsections describe the different elements of the .s file.\r\nProgram Header\r\nThe file begins with comments that indicate the name of the source file and the\r\ncompiler that was used to produce the .s file. The options that were used by the\r\ncompiler are also listed. It is often important to know the target machine that the\r\ninstructions were intended for; this is discussed in the following subsections. By\r\ndefault, only a select set of options are included in the file. More detail can be\r\nobtained by including the -LIST:options flag on the compiler’s command line.\r\nInstruction Alignment\r\nOne of the first pseudo-instructions in the file is similar to the following example:\r\n.section .text, 1, 0x00000006, 4, 64\r\nor\r\n.section .text, 1, 0x00000006, 4, 16\r\nThis directive is used by the loader to align the start of the program’s instructions at\r\nparticular byte-address boundaries. The rightmost field is 16 if quad word alignment\r\nis required, or is 64 if cache line alignment is needed. The proper number is\r\ndetermined by the target processor type and the optimization level that was used\r\nbecause some optimizations require an exact knowledge of the I-Cache placement of\r\neach instruction while others do not benefit from this level of control.\r\nLabel Offset Comments\r\nA comment is attached to each label definition (recognized by the colon (:) following\r\nthe name). This comment provides the byte offset of the label’s location relative to the\r\nstart of the .section .text directive. The first label, which usually corresponds to\r\nthe first entry point of the first function, is 0x0.\r\nThe remaining labels have addresses that are increased by 4 bytes for each instruction\r\nthat is placed between successive labels. These offsets are the same for both the .s\r\n007–2418–006 101",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/5aa521fe-c687-49f2-a681-28577570dcfb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b1027691093167d6e2ee5dd6b5d846786ad49b483e12f37b746479a8bd4d9631",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 326
      },
      {
        "segments": [
          {
            "segment_id": "17d2f361-e5f3-4599-8d4b-72f79a23ee2b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 124,
            "page_width": 612,
            "page_height": 792,
            "content": "7: Writing Assembly Language Code\r\nfile and the related .o files, although the loader can choose to place the start of the\r\nprogram (the 0x0 location) anywhere in the machine’s address space. The start is\r\nsubject only to the alignment restriction placed on the .section directive (see\r\n\"Instruction Alignment\", page 101).\r\nThis is useful to note when you are using a debugger and trying to correlate the\r\nassembly file to the executed instructions. The machine addresses are sometimes\r\ndifficult to translate to the file’s relative offsets when only quad word alignment was\r\nrequested.\r\nThe following is an example of this comment:\r\n.BB1.kernel_: # 0x0\r\nSource Code Comments\r\nTo help associate the compiler-generated code to the original source code, the line\r\nnumber and source code are inserted into comment lines that are interspersed with\r\nthe assembly instructions. The comments usually appear ahead of the machine\r\ninstructions that are generated for it. However, various optimizations may cause\r\ninstructions to be moved or reordered and it is sometimes difficult to understand\r\nwhere they appear.\r\nA further difficulty can arise if inline code expansion occurs. In these cases, the line\r\nnumber (503 in the following example) may refer to the line of the module that\r\ncontained the inlined routine, and not to the original source code module of the\r\ncompiled program. This can be especially confusing if the -ipa option was\r\nrequested, and if several source code files were intermixed.\r\nTo determine the original file that contains a particular source code line, search for the\r\nimmediately preceding .loc directive. This directive contains the line number and\r\nan index to a previous .file directive that identifies the file that the source code was\r\nread from. See Chapter 8, \"Pseudo Op-Codes (Directives)\", page 109 for information\r\nabout the .loc directive.\r\nThe following is an example of this comment:\r\n# 503 x[k] = q + y[k]*( r*z[k+10] + t*z[k+11] )\r\n102 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/17d2f361-e5f3-4599-8d4b-72f79a23ee2b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9dd90cb224736d8c0e14e47b3e95b0a35d462e7fa197298142f08dc0e369921d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 315
      },
      {
        "segments": [
          {
            "segment_id": "ec26f290-5878-415e-83e9-c10219841020",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 125,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nRelative Instruction Issue Times\r\nWhen any level of optimization greater than -O0 is requested on the command line,\r\ncomments are added to the right of machine instructions that indicate the compiler’s\r\nknowledge of the relative issue time for the particular instruction. These comments\r\nconsist of an integer between square brackets, as shown in the following example:\r\nmul.d $f2,$f2,$f10 # [11]\r\nIn this example, the [11] indicates the clock cycle (relative to the start of the block)\r\nin which this instruction will be issued by the processor.\r\nThe assembly files targeted for processors that can only issue a single instruction in a\r\nclock period have unique times for each instruction in the block, while target\r\nprocessors that can issue multiple instructions may show that several instructions\r\nhave the same integer in the issue time comment.\r\nThe times for processors that support Out-Of-Order issue of instructions may\r\nsometimes appear unusual because an instruction may be issued before other\r\ninstructions that precede it in the block. This is common processor behavior. The\r\ncompiler attempts to model the queuing mechanisms contained by the hardware and\r\nit uses knowledge of the details to arrive at meaningful times to place in these\r\ncomment fields. The times are accurate to the limit that the machine is modeled.\r\nSeveral simplifying assumptions are made to calculate these times, which make it\r\ndifficult to estimate the performance of the code by using these comments alone. The\r\nmost important point to make is that program flow is not taken into account. The\r\nactual performance of a program is influenced by the path taken into a particular\r\nblock of code, which often determines when the inputs that an instruction needs will\r\nbe ready. It would be difficult to model an entire program and take into account all\r\npossible paths into a block, so it is assumed that all inputs computed outside a block\r\nare available at the start of the block, and that all functional units are initially free to\r\naccept new operations.\r\nEven with these restrictions, it is difficult to accurately model the behavior of load\r\nand store instructions. The compiler attempts to recognize accesses that will be\r\nsatisfied from a data cache and use an appropriate latency. Although performance\r\ndata suggests that most data references are to a cache, this can be very\r\nprogram-dependent. With the additional complexity introduced when multiple levels\r\nof cache are available, the compiler can never be certain that it is using the correct\r\nmemory latency to produce the issue time comments. Because of these uncertainties,\r\nthe compiler uses times that match what happens in the average program.\r\n007–2418–006 103",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/ec26f290-5878-415e-83e9-c10219841020.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=68c67976ac38897e98e8446dda60b08c3d803de342885dd6ed04a9743959da32",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 439
      },
      {
        "segments": [
          {
            "segment_id": "27d6ef0c-9993-4bb3-8b6e-5dd990c74574",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 126,
            "page_width": 612,
            "page_height": 792,
            "content": "7: Writing Assembly Language Code\r\nA limitation on the use of these times is illustrated with the following program\r\nexample run on a machine with an R10000 processor:\r\n.Lt.0.224: # 0x508\r\n.loc 1 589 17\r\n# 589 temp -= x[j]*y[j];\r\nldc1 $f9,24024($3) # [0]\r\nldc1 $f10,32064($5) # [1]\r\naddiu $2,$2,-1 # [0]\r\naddiu $3,$3,8 # [0]\r\naddiu $5,$5,8 # [1]\r\nbne $2,$0,.Lt.0.224 # [1,1]\r\nnmsub.d $f4,$f4,$f9,$f10 # [4]\r\nWith just a glance at the times, you might conclude that a nmsub instruction will only\r\nbe issued every 5 clock periods. However, as long as execution stays within the loop,\r\nthe processor will prefetch instructions faster than it can execute them, resulting in an\r\naverage issue of 1 nmsub instruction every 2 clock periods, limited by the 2 memory\r\naccesses that take 2 clock periods to issue.\r\nThere are occasions when the first instruction is not considered to be part of the block\r\nand no instruction issue time is computed for it. This happens when the block is\r\nfrequently branched to using a label+4 address specification. The following\r\nexample code illustrates this:\r\n.Lt.0.274: # 0x9ac\r\nor $3,$9,$0 #\r\nor $6,$10,$0 # [0]\r\nThe most frequent transfer to the label is the following instruction:\r\nbne $8,$30,.Lt.0.274+4 # [0,1]\r\nRelative Branch Prediction Times\r\nIf the target processor is an Out-Of-Order processor, the cycle when the hardware will\r\npredict the direction of a conditional branch is estimated. This happens at the time\r\nthe instruction is first read into the instruction decode buffer and is independent of\r\nthe time that the instruction actually issues.\r\nThis time is reported as the first of a pair of integers, in square brackets, in the\r\ncomment field of the instruction. The second field is the issue time. In the preceding\r\n104 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/27d6ef0c-9993-4bb3-8b6e-5dd990c74574.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=abb5ee0d7974461ec79d353272c8eee4228c2a6753e3e40d85fbd2173bc09edb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 293
      },
      {
        "segments": [
          {
            "segment_id": "05ea9e47-2326-4c69-9e06-1231914024cc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 127,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nexample, branch prediction happens in cycle 0, but the instruction will not issue until\r\ncycle 1 (because it has to wait for an input).\r\nThe compiler attempts to move inputs to conditional branches as far previously as\r\npossible so that both the branch prediction and the issue times are identical.\r\nHowever, there are conditions that prevent the compiler from doing so; this is done to\r\nminimize the number of instructions that are speculatively executed after the\r\nprediction and before the direction of the branch can be determined with certainty. It\r\nis only when the instruction completes execution that the hardware is certain which\r\nbranch direction is correct.\r\nIf the wrong direction was predicted, all speculatively executed instructions will need\r\nto be aborted, wasting time that could have been devoted to completing the program.\r\nnop Instructions\r\nA nop instruction is a real operation that does not change the contents of any\r\nregisters. There are several that could be used, but the preferred one is sll\r\n$0,$0,0, which means “shift left by 0 bits the contents of register $0 and store the\r\nresult into register $0”.\r\nnop instructions usually waste space and should be deleted by the compiler, but there\r\nare situations where they are necessary for the correctness of the executed code and\r\ncases where they can improve the performance of the executed code. They are most\r\noften encountered as a placeholder for the delay slot of a branch instruction, when no\r\nother instruction can be found. The following code sequence illustrates this:\r\naddiu $5,$5,1 # [0]\r\nbne $5,$30,.Lt.0.460 # [0,1]\r\nnop # [0]\r\nOther than their use in the delay slot of conditional branches, nop instructions are\r\nused to optimize the fetch and decode performance of processor types that can read,\r\ndecode and execute multiple instructions in each clock period. These processors\r\ncannot group together instructions when a cache line boundary occurs between them,\r\nresulting in a delay that can be avoided by inserting one or more nop instructions\r\nahead of a label.\r\nThe optimization that attempts this alignment depends on the processor type and the\r\noptimization levels selected. In the common case, the first block of each loop is forced\r\nto start on a quad word boundary. This is simple and fast although it sometimes\r\ncauses nops to be added in the middle of a cache line, where they are not useful.\r\n007–2418–006 105",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/05ea9e47-2326-4c69-9e06-1231914024cc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5a434c54906de156c7ffaa31052e639df002790dfce11a07aa84caad908f4e70",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 400
      },
      {
        "segments": [
          {
            "segment_id": "96154009-b760-4720-b1af-03487c8e12fc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 128,
            "page_width": 612,
            "page_height": 792,
            "content": "7: Writing Assembly Language Code\r\nFor the highest level of optimization, and only for Out-Of-Order issue processors,\r\ncloser track is kept of cache line boundaries. This requires that the start of the module\r\n(that is, the address of the first text label) be aligned on a cache line boundary,\r\nincreasing the size of the generated executable but allowing the compiler to avoid\r\nunnecessary instructions.\r\nAlong with optimally aligning instructions on Out-Of-Order processors, attention is\r\npaid to a timing \"hiccup\" that can occur if a branch instruction is separated from its\r\ndelay slot instruction by a cache line break. The insertion of a nop before the branch\r\ncan improve performance slightly. The following is an example of this. The nop\r\nforces the bne instruction to start in the next cache line, as can be determined by the\r\naddress comment in the label field of the next block.\r\nnop # [1]\r\nbne $0,$1,.Lt.0.550 # [3,5]\r\nxori $1,$1,1 # [5]\r\n.BB307.kernel_: # 0x2408\r\nLoop Information Comments\r\nComments are added at the start of loops to indicate the transformations that were\r\napplied to the loop. The meanings of most of these are obvious, but some need some\r\nexplanation:\r\n• The occurrence of comments that start with <swpf> or <loop>Not unrolled:\r\nindicate that software pipelining failed to optimize the loop. There is usually a\r\nreason given, although the meaning can be obscure and refer to details of software\r\ntheory.\r\n• Comments that look like <swps> xx cycles per iteration may not contain\r\nan accurate count of the number of cycles for Out-Of-Order processors. This is\r\nbecause the exact cycle times are determined much later in the compiler process\r\nthan when this cycle count is estimated and the comment is constructed. These\r\ninaccuracies also affect the numbers that precede % of peak comments.\r\n• Similarly, for Out-Of-Order processors, the cycle count in comments similar to\r\n<sched> Loop schedule length: xxx cycles (ignoring nested\r\nloops) is sometimes wrong.\r\n106 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/96154009-b760-4720-b1af-03487c8e12fc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=70af908b312391c731db16928862c6742ef8ae4e10a7eefa606158ab38f5ff49",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 323
      },
      {
        "segments": [
          {
            "segment_id": "6ad20d82-27a6-4408-ad39-117a61adc748",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 129,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nBlock Information\r\nA block is a sequence of instructions between 2 labels. Blocks are usually identified in\r\nthe assembly file by a comment between the starting label and the first instruction\r\nwith a comment that contains BB:xxx. The block number that follows the BB: is\r\nused to identify each unique block of the program. Comments that start with <freq>\r\nBB:xxx frequency = yyy.yy indicate how often the compiler believes the block\r\nis executed for each invocation of the function where the block is located.\r\nThe comment is followed by (heuristic) or (feedback) to indicate how that\r\naverage was arrived at. Because many optimizations utilize this information, incorrect\r\ninformation can result in sub-optimal compiler output. It is important that the\r\nfeedback data be generated by tests that truly represent the expected behavior of the\r\nfinal program so that accurate decisions can be made by the compiler.\r\nBlocks that end with conditional branches also contain comments similar to <freq>\r\nBB:xxx => BB:yyy probability = 0.zzzzz. These indicate the compiler’s\r\nestimation for the direction of each possible branch. Again, it is important for optimal\r\nperformance that feedback be generated by test cases that are representative of the\r\nactual workload.\r\n007–2418–006 107",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/6ad20d82-27a6-4408-ad39-117a61adc748.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a6eae58ee276aad3aee6d2cb4a0f1f776a6d6accdd5a6321231e4084f222a846",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "01436180-5e2c-4bed-8605-a1e2ab08b549",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 130,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/01436180-5e2c-4bed-8605-a1e2ab08b549.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f204f671740e39bf67e4a8d20e3bff31a3e68e49fcb9b0c142937978743692a6",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c002f4ff-ebf8-429f-b2f5-398780f2a934",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 131,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 8\r\nPseudo Op-Codes (Directives)\r\nThis chapter describes pseudo op-codes (directives). These pseudo op-codes influence\r\nthe assembler’s later behavior.\r\nOp-Codes\r\nThe assembler has the following pseudo op-codes:\r\nTable 8-1 Pseudo Op-Codes\r\nPseudo-Op Description\r\n.2byte expression1 [ ,\r\nexpression2 ]... [ ,\r\nexpressionN]\r\nTruncates the expressions in the comma-separated list\r\nto 16-bit values and assembles the values in successive\r\nlocations. The expressions must be absolute or in the\r\nform of a label difference ( label1 - label2) if both labels\r\nare defined in the same section.\r\nThis directive optionally can have the form expression1 [\r\n: expression2 ]. The expression2 replicates expression1’s\r\nvalue expression2 times.\r\nThis directive does no automatic alignment.\r\n(64–bit and N32 only)\r\n.4byte expression1 [ ,\r\nexpression2 ]... [ ,\r\nexpressionN]\r\nTruncates the expressions in the comma-separated list\r\nto 32-bit values and assembles the values in successive\r\nlocations.\r\nThe expressions must be absolute or in the form of a\r\nlabel difference ( label1 - label2) if both labels are defined\r\nin the same section.\r\nThis directive optionally can have the form expression1 [\r\n: expression2 ]. The expression2 replicates expression1’s\r\nvalue expression2 times.\r\nThis directive does no automatic alignment.\r\n(64-bit and N32 only)\r\n007–2418–006 109",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/c002f4ff-ebf8-429f-b2f5-398780f2a934.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a4776d52f6b947b21bb9ef8167563c1ac3df4ad1e40fc25b494a120fedcc4b3c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 400
      },
      {
        "segments": [
          {
            "segment_id": "2568147a-5701-4d70-900d-138fa8e3bcd6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 132,
            "page_width": 612,
            "page_height": 792,
            "content": "8: Pseudo Op-Codes (Directives)\r\n.8byte expression1 [ ,\r\nexpression2 ]... [ ,\r\nexpressionN]\r\nTruncates the expressions in the comma-separated list\r\nto 64-bit values and assembles the values in successive\r\nlocations. The expressions must be absolute or in the\r\nform of a label difference ( label1 - label2) if both labels\r\nare defined in the same section.\r\nThis directive optionally can have the form expression1 [\r\n: expression2 ]. The expression2 replicates expression1’s\r\nvalue expression2 times. This directive does no\r\nautomatic alignment.\r\n(64-bit and N32 only)\r\n.aent name, symno Sets an alternate entry point for the current procedure.\r\nUse this information when you want to generate\r\ninformation for the debugger. It must appear inside an\r\n.ent/.end pair.\r\n.align expression Advances the location counter to make the expression\r\nlow order bits of the counter zero. Normally, the\r\n.half, .word, .float, and .double directives\r\nautomatically align their data appropriately. For\r\nexample, .word does an implicit .align 2 (.double\r\ndoes an .align 3). You disable the automatic\r\nalignment feature with .align 0. The assembler\r\nreinstates automatic alignment at the next .text, .data,\r\n.rdata, or .sdata directive.\r\nLabels immediately preceding an automatic or explicit\r\nalignment are also realigned. For example, foo:\r\n.align 3; .word 0 is the same as .align 3;\r\nfoo: .word 0.\r\n.ascii string [,\r\nstring]...\r\nAssembles each string from the list into successive\r\nlocations. The .ascii directive does not null pad the\r\nstring. You must put quotation marks (”) around each\r\nstring. You can use the backslash escape characters. For\r\na list of the backslash characters, see Chapter 4, \"Lexical\r\nConventions\", page 15.\r\n.asciiz string [,\r\nstring]...\r\nAssembles each string in the list into successive\r\nlocations and adds a null. You can use the backslash\r\nescape characters. For a list of the backslash characters,\r\nsee Chapter 4, \"Lexical Conventions\", page 15.\r\n110 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/2568147a-5701-4d70-900d-138fa8e3bcd6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0481f8c1d82fd5be2ca78fed7c5666a4775e45b887e08d5f0cb7f19e55cd8b9c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 301
      },
      {
        "segments": [
          {
            "segment_id": "9f645863-cee7-45e0-b120-3fb2520ef795",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 133,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\n.byte expression1 [,\r\nexpression2 ]... [,\r\nexpressionN]\r\nTruncates the expressions from the comma-separated\r\nlist to 8-bit values, and assembles the values in\r\nsuccessive locations. The expressions must be absolute.\r\nThe operands can optionally have the form: expression1\r\n[ : expression2 ]. The expression2 replicates expression1’s\r\nvalue expression2 times.\r\n.comm name, expression\r\n[alignment]\r\nUnless defined elsewhere, name becomes a global\r\ncommon symbol at the head of a block of expression\r\nbytes of storage. The linker overlays like-named\r\ncommon blocks, using the maximum of the expressions.\r\nThe 64-bit and N32 assembler also accepts an optional\r\nvalue which specifies the alignment of the symbol.\r\n.cpadd reg Emits code that adds the value of “_gp” to reg.\r\n.cpload reg Expands into the three instructions function prologue\r\nthat sets up the $gp register. This directive is used by\r\nposition-independent code.\r\n.cplocal reg Causes the assembler to use reg instead of $gp as the\r\ncontext pointer. This directive is used by\r\nposition-independent code.\r\n(64-bit and N32 only)\r\n.cprestore offset Causes the assembler to emit the following at the point\r\nwhere it occurs: sw $gp, offset ($sp)\r\nAlso, causes the assembler to generate lw $gp,\r\noffset ($sp) after every JAL or BAL operation.\r\nOffset should point to the saved register area as\r\ndescribed in Chapter 7, \"Writing Assembly Language\r\nCode\", page 87.\r\nThis directive is used by position-independent code\r\nfollowing the caller-saved gp convention.\r\n.cpreturn Causes the assembler to emit the following at the point\r\nwhere it occurs:\r\nld $gp, offset ($sp)\r\nThe offset is obtained from the previous .cpsetup\r\npseudo-op.\r\n007–2418–006 111",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/9f645863-cee7-45e0-b120-3fb2520ef795.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=43958410818240b7a4b74be1c5072e682cd09b7ac6c672669e015a185e7fd4c7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 261
      },
      {
        "segments": [
          {
            "segment_id": "d9ce2b56-fd76-4064-8dfa-70693d698f38",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 134,
            "page_width": 612,
            "page_height": 792,
            "content": "8: Pseudo Op-Codes (Directives)\r\n(64-bit and N32 only)\r\n.cpsetup reg1, {offset |\r\nreg2}, label\r\nCauses the assembler to emit the following at the point\r\nwhere it occurs:\r\nsd $gp, offset ($sp)\r\nlui $gp, 0 {label}\r\ndaddiu $gp, $gp, 0 { label }\r\ndaddu $gp, $gp, reg1\r\nld $gp, offset ($sp)\r\nThis sequence is used by position-independent code\r\nfollowing the callee-saved gp convention. It stores $gp\r\nin the saved register area and calculates the virtual\r\naddress of label and places it in reg1. By convention,\r\nreg1 is $25 (t9).\r\nIf reg2 is used instead of offset, $gp is saved and\r\nrestored to and from this register.\r\n(64-bit and N32 only)\r\n.data Tells the assembler to add all subsequent data to the\r\ndata section.\r\n.double expression [ ,\r\nexpression2] ...[,\r\nexpressionN]\r\nInitializes memory to 64-bit floating point numbers.\r\nThe operands optionally can have the form: expression1\r\n[ : expression2 ]. The expression1 is the floating point\r\nvalue. The optional expression2 is a non-negative\r\nexpression that specifies a repetition count. The\r\nexpression2 replicates expression1’s value expression2\r\ntimes. This directive aligns its data and any preceding\r\nlabels automatically to a double-word boundary. You\r\ncan disable this feature by using .align0.\r\n.dword expression [ ,\r\nexpression2 ]...[,\r\nexpressionN]\r\nTruncates the expressions in the comma-separated list\r\nto 64-bits and assembles the values in successive\r\nlocations. The expressions must be absolute. The\r\noperands optionally can have the form: expression1\r\n[:expression2]. The expresssion2 replicates expression1’s\r\nvalue expression2 number of times. The directive aligns\r\nits data and preceding labels automatically to a\r\n112 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/d9ce2b56-fd76-4064-8dfa-70693d698f38.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b20f0c8219fc2c0a32708c56e925a4181a83ccbb9ffba6ab01d4af07ff0c6bea",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 255
      },
      {
        "segments": [
          {
            "segment_id": "15961dba-f323-4f93-ab47-b9d4d7c23fe3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 135,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\ndoubleword boundary. You can disable this feature by\r\nusing .align0.\r\n.dynsym name value Specifies an ELF st_other value for the object\r\ndenoted by name (64-bit and N32 only).\r\n.end [proc_name] Sets the end of a procedure. Use this directive when\r\nyou want to generate information for the debugger. To\r\nset the beginning of a procedure, see .ent.\r\n.endr Signals the end of a repeat block. To start a repeat\r\nblock, see .repeat.\r\n.ent proc_name Sets the beginning of the procedure proc_name. Use this\r\ndirective when you want to generate information for\r\nthe debugger. To set the end of a procedure, see .end.\r\n.extern name expression name is a global undefined symbol whose size is\r\nassumed to be expression bytes. The advantage of using\r\nthis directive, instead of permitting an undefined\r\nsymbol to become global by default, is that the\r\nassembler can decide whether to use the economical\r\n$gp-relative addressing mode, depending on the value\r\nof the –G option. As a special case, if expression is zero,\r\nthe assembler refrains from using $gp to address this\r\nsymbol regardless of the size specified by –G.\r\n.file file_number\r\nfile_name_string\r\nSpecifies the source file corresponding to the assembly\r\ninstructions that follow. For use only by compilers, not\r\nby programmers; when the assembler sees this, it\r\nrefrains from generating line numbers for dbx to use\r\nunless it also sees .loc directives.\r\n.float expression1 [ ,\r\nexpression2 ]... [,\r\nexpressionN]\r\nInitializes memory to single precision 32-bit floating\r\npoint numbers. The operands optionally can have the\r\nform: expression1<_newline>[ : expression2 ]. The\r\noptional expression2 is a non-negative expression that\r\nspecifies a repetition count. This optional form\r\nreplicates expression1’s value expression2 times. This\r\ndirective aligns its data and preceding labels\r\nautomatically to a word boundary. You can disable this\r\nfeature by using .align0.\r\n.fmask mask offset Sets a mask with a bit turned on for each floating point\r\nregister that the current routine saved. The\r\n007–2418–006 113",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/15961dba-f323-4f93-ab47-b9d4d7c23fe3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=12a33b41e8312aba7bb74878ab2d1714709bdd3bc0aa3441a7aba2198cd8fcda",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 324
      },
      {
        "segments": [
          {
            "segment_id": "33bfe5b7-ba18-4adb-a7e7-0154af554ded",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 136,
            "page_width": 612,
            "page_height": 792,
            "content": "8: Pseudo Op-Codes (Directives)\r\nleast-significant bit corresponds to register $f0. The\r\noffset is the distance in bytes from the virtual frame\r\npointer at which the floating point registers are saved.\r\nThe assembler saves higher register numbers closer to\r\nthe virtual frame pointer. You must use .ent before\r\n.fmask and only one .fmask may be used per .ent.\r\nSpace should be allocated for those registers specified\r\nin the .fmask.\r\n.frame frame-register\r\noffset return_pc_register\r\nDescribes a stack frame. The first register is the\r\nframe-register, the offset is the distance from the frame\r\nregister to the virtual frame pointer, and the second\r\nregister is the return program counter (or, if the first\r\nregister is $0, this directive shows that the return\r\nprogram counter is saved four bytes from the virtual\r\nframe pointer). You must use .ent before .frame and\r\nonly one .frame may be used per .ent. No stack traces\r\ncan be done in the debugger without .frame.\r\n.globl name Makes the name external. If the name is defined\r\notherwise (by its appearance as a label), the assembler\r\nwill export the symbol; otherwise it will import the\r\nsymbol. In general, the assembler imports undefined\r\nsymbols (that is, it gives them the UNIX storage class\r\n“global undefined” and requires the linker to resolve\r\nthem).\r\n.gpvalue number Sets the offset to use in gp_rel relocations; 0 by default.\r\n(64–bit and N32 only).\r\n.gpword local-sym This directive is similar to .word except that the\r\nrelocation entry for local-sym has the R_MIPS_GPREL32\r\ntype. After linkage, this results in a 32-bit value that is\r\nthe distance between local-sym and gp. local-sym must\r\nbe local. This directive is used by the code generator\r\nfor PIC switch tables.\r\n.half expression1 [ ,\r\nexpression2 ]... {,\r\nexpressionN]\r\nTruncates the expressions in the comma-separated list\r\nto 16-bit values and assembles the values in successive\r\nlocations. The expressions must be absolute. This\r\ndirective optionally can have the form: expression1 [ :\r\nexpression2 ]. The expression2 replicates expression1’s\r\nvalue expression2 times. This directive automatically\r\n114 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/33bfe5b7-ba18-4adb-a7e7-0154af554ded.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ba951f9b954200bb206809f2b52b96344949e869498632a34c4ea7a9602d4da0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 332
      },
      {
        "segments": [
          {
            "segment_id": "c17ea4ad-d783-4957-a6ee-eee4c6c9cd22",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 137,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\naligns its data appropriately. You can disable this\r\nfeature by using .align0.\r\n.lab label_name Associates a named label with the current location in\r\nthe program text. For use by compilers.\r\n.lcomm name, expression Makes the name’s data type bss. The assembler\r\nallocates the named symbol to the bss area, and the\r\nexpression defines the named symbol’s length. If a\r\n.globl directive also specifies the name, the assembler\r\nallocates the named symbol to external bss. The\r\nassembler puts bss symbols in one of two bss areas. If\r\nthe defined size is smaller than (or equal to) the size\r\nspecified by the assembler or compiler’s –G command\r\nline option, the assembler puts the symbols in the sbss\r\narea and uses $gp to address the data.\r\n.loc file_number\r\nline_number [column]\r\nSpecifies the source file and the line within that file that\r\ncorresponds to the assembly instructions that follow.\r\nFor use by compilers. The assembler ignores the file\r\nnumber when this directive appears in the assembly\r\nsource file. Then, the assembler assumes that the\r\ndirective refers to the most recent .file directive. The\r\n64-bit and N32 assembler also supports an optional\r\nvalue that specifies the column number.\r\n.mask mask, offset Sets a mask with a bit turned on for each general\r\npurpose register that the current routine saved. For use\r\nby compilers. Bit one corresponds to register $1. The\r\noffset is the distance in bytes from the virtual frame\r\npointer where the registers are saved. The assembler\r\nsaves higher register numbers closer to the virtual\r\nframe pointer. Space should be allocated for those\r\nregisters appearing in the mask. If bit zero is set it is\r\nassumed that space is allocated for all 31 registers\r\nregardless of whether they appear in the mask.\r\nFor N32/64, only bit 31 for $ra is utilized; the rest are\r\nignored.\r\n.nada Tells the assembler to put in an instruction that has no\r\neffect on the machine state. It has the same effect as\r\nnop (described below), but it produces more efficient\r\ncode on an R8000.\r\n007–2418–006 115",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/c17ea4ad-d783-4957-a6ee-eee4c6c9cd22.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4511329b7dc02e2cfefcbac4cacf290aec908d3ed874c7907e4644c0b5c41866",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 343
      },
      {
        "segments": [
          {
            "segment_id": "d976e80b-6ad9-400b-aa8f-86a74759eb2f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 138,
            "page_width": 612,
            "page_height": 792,
            "content": "8: Pseudo Op-Codes (Directives)\r\n(64-bit and N32 only)\r\n.nop Tells the assembler to put in an instruction that has no\r\neffect on the machine state. While several instructions\r\ncause no-operation, the assembler only considers the\r\nones generated by the nop directive to be wait\r\ninstructions. This directive puts an explicit delay in the\r\ninstruction stream.\r\nNote: Unless you use .set noreorder, the\r\nreorganizer may eliminate unnecessary nop\r\ninstructions.\r\n.option options Tells the assembler that certain options were in effect\r\nduring compilation. (These options can, for example,\r\nlimit the assembler’s freedom to perform branch\r\noptimizations.) This option is intended for\r\ncompiler-generated .s files rather than for hand-coded\r\nones.\r\n.origin expression Specifies the current offset in a section to the value of\r\nexpression.\r\n(64-bit and N32 only)\r\n.repeat expression Repeats all instructions or data between the .repeat\r\ndirective and the .endr directive. The expression\r\ndefines how many times the data repeats. With the\r\n.repeat directive, you cannot use labels, branch\r\ninstructions, or values that require relocation in the\r\nblock. To end a .repeat, see .endr.\r\n.restore reg The following instruction restores the value in reg. This\r\nis used to provide correct information for stack\r\nunwinding. There must be an earlier .save reg that\r\nthis is following.\r\n(64-bit and N32 only)\r\n.rdata Tells the assembler to add subsequent data into the\r\nrdata section.\r\n116 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/d976e80b-6ad9-400b-aa8f-86a74759eb2f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=44934908c32116d0e3d0d20bf9f94228d26015b86fe2e21a69dddb6d1bea081b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d766278e-50ce-4f45-856a-12b9217138dc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 139,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\n.save reg The following instruction saves the value in reg. This is\r\nused to provide correct information for stack\r\nunwinding.\r\n(64-bit and N32 only)\r\n.sdata Tells the assembler to add subsequent data to the\r\nsdata section.\r\n.section name [,\r\nsection type, section flags,\r\nsection entry size, section\r\nalignment]\r\nInstructs the assembler to create a section with the\r\ngiven name and optional attributes.\r\nLegal section type values are denoted by variables\r\nprefixed by SHT_ in <elf.h>.\r\nLegal section flags values are denoted by variables\r\nprefixed by SHF_ in <elf.h>.\r\nThe section entry size specifies the size of each entry in\r\nthe section. For example, it is 4 for .text sections.\r\nThe section alignment specifies the byte boundary\r\nrequirement for the section. For example, it is 16 for\r\n.text sections.\r\n(64-bit and N32 only)\r\n.set option Instructs the assembler to enable or to disable certain\r\noptions. Use .set options only for hand-crafted\r\nassembly routines. The assembler has these default\r\noptions: reorder, macro, and at. You can specify\r\nonly one option for each .set directive. You can specify\r\nthese .set options:\r\nThe reorder option lets the assembler reorder\r\nmachine language instructions to improve performance.\r\nThe noreorder option prevents the assembler from\r\nreordering machine language instructions. If a machine\r\nlanguage instruction violates the hardware pipeline\r\nconstraints, the assembler issues a warning message.\r\nThe macro option lets the assembler generate multiple\r\nmachine instructions from a single assembler\r\ninstruction.\r\n007–2418–006 117",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/d766278e-50ce-4f45-856a-12b9217138dc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cef93abd3088767ae1a81e9a2a3ac5375620061c768388d2b2030bc14548de3b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 462
      },
      {
        "segments": [
          {
            "segment_id": "7e421a87-e196-4ad0-af26-072346b42520",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 140,
            "page_width": 612,
            "page_height": 792,
            "content": "8: Pseudo Op-Codes (Directives)\r\nThe nomacro option causes the assembler to print a\r\nwarning whenever an assembler operation generates\r\nmore than one machine language instruction. You must\r\nselect the noreorder option before using the nomacro\r\noption; otherwise, an error results.\r\nThe at option lets the assembler use the $at register\r\nfor macros, but generates warnings if the source\r\nprogram uses $at. When you use the noat option and\r\nan assembler operation requires the $at register, the\r\nassembler issues a warning message; however, the\r\nnoat option does let source programs use $at without\r\nissuing warnings.\r\nThe nomove option tells the assembler to mark each\r\nsubsequent instruction so that it cannot be moved\r\nduring reorganization. Because the assembler can still\r\ninsert nop instructions where necessary for pipeline\r\nconstraints, this option is less stringent than\r\nnoreorder. The assembler can still move instructions\r\nfrom below the nomove region to fill delay slots above\r\nthe region or vice versa. The nomove option has part of\r\nthe effect of the “volatile” C declaration; it prevents\r\notherwise independent loads or stores from occurring\r\nin a different order than intended.\r\nThe move option cancels the effect of nomove.\r\nThe notransform option tells the assembler to mark\r\neach subsequent instruction so that it cannot be\r\ntransformed by pixie(1) into an equivalent set of\r\ninstructions. There are restrictions on the use of this\r\noption in order to guarantee pixie’s ability to still\r\nproduce code that will execute correctly with the\r\npreceding/following transformed code. The sequence\r\nof instructions marked notransform must behave like\r\na single basic block (i.e., there is only one entry and exit\r\nfrom the sequences and they are the first and last\r\ninstructions, respectively). If this restriction cannot be\r\nmet, correct transformed execution can still be\r\nguaranteed if the sequence of instructions does not use\r\nany of the saved registers $16..$23, $30 (s0–s8).\r\n118 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/7e421a87-e196-4ad0-af26-072346b42520.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f47c2f0de2f2e9ce184caf00b554ca5f319645a2d64c8e8696ee1fd18dece837",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 307
      },
      {
        "segments": [
          {
            "segment_id": "ec458759-5a7d-4a6f-b23b-e9efdd4a7d61",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 141,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nThe transform option cancels the effect of\r\nnotransform.\r\n.size name, expression Specifies the size of an object denoted by name to the\r\nvalue of expression.\r\n.space expression Advances the location counter by the value of the\r\nspecified expression bytes. The assembler fills the space\r\nwith zeros.\r\n.struct expression This permits you to lay out a structure using labels plus\r\ndirectives like .word, .byte, and so forth. It ends at\r\nthe next segment directive (.data, .text, etc.). It does\r\nnot emit any code or data, but defines the labels within\r\nit to have values which are the sum of expression plus\r\ntheir offsets from the .struct itself.\r\n(symbolic equate) Takes one of these forms: name = expression or name =\r\nregister. You must define the name only once in the\r\nassembly, and you cannot redefine the name. The\r\nexpression must be computable when you assemble the\r\nprogram, and the expression must involve operators,\r\nconstants, and equated symbols. You can use the name\r\nas a constant in any later statement.\r\n.text Tells the assembler to add subsequent code to the text\r\nsection. (This is the default.)\r\n.type name, value Specifies the elf type of an object denoted by name to\r\nvalue. Legal elf type values are denoted by variables\r\nprefixed by STT_ in <elf.h>.\r\n(64-bit and N32 only)\r\n.verstamp major minor Specifies the major and minor version numbers (for\r\nexample, version 0.15 would be .verstamp 0 15).\r\n.weakext weak_name\r\n[strong_name]\r\nDefines a weak external name and optionally associates\r\nit with the strong_name.\r\n.word expression1 [,\r\nexpression2 ]... [,\r\nexpressionN]\r\nTruncates the expressions in the comma-separated list to\r\n32-bits and assembles the values in successive locations.\r\nThe expressions must be absolute. The operands\r\noptionally can have the form: expression1 <_newline>[\r\n: expression2 ]. The expression2 replicates expression1’s\r\nvalue expression2 times. This directive aligns its data\r\n007–2418–006 119",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/ec458759-5a7d-4a6f-b23b-e9efdd4a7d61.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=29d47dc1e89f7b6b6c122dbbc141580896a15635908bd0bc0522d8e59da3c330",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0f07d5f4-f4ee-4727-8a12-a92b2928fb18",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 142,
            "page_width": 612,
            "page_height": 792,
            "content": "8: Pseudo Op-Codes (Directives)\r\nand preceding labels automatically to a word boundary.\r\nYou can disable this feature by using .align0.\r\nThe directives listed below are only accepted in -o32 compiles; they are only meant\r\nfor compiler-generated code, and should not be used in hand-written assembly code.\r\n.alias\r\n.asm0\r\n.bgnb\r\n.endb\r\n.err\r\n.gjaldef\r\n.gjallive\r\n.gjrlive\r\n.livereg\r\n.noalias\r\n.set bopt/nobopt\r\n.vreg\r\nPIC Assembly Code\r\nBy default, the assembler and compilers generate position-independent code (PIC).\r\nThis is needed for programs that use dynamic shared libraries. For programs\r\nassembled with the -n32 and -64 options to as(1), see the MIPSpro 64-Bit Porting\r\nand Transition Guide for further information.\r\nIf you want to generate PIC with the assembler using the -o32 option, assemble with\r\nthe -KPIC and -G0 options, which are enabled by default.\r\nThe following assembler directives support PIC generation: .option pic2,\r\n.cpload, .cprestore, .gpword, and .cpadd. See \"Op-Codes\", page 109 for\r\ninformation about the directives. The following example illustrates the use of these\r\ndirectives with the -o32 option.\r\nExample 8-1 KPIC directives example\r\nConsider the following program:\r\n.option pic2\r\n.data\r\n.align 2\r\n$$5:\r\n120 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/0f07d5f4-f4ee-4727-8a12-a92b2928fb18.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3e4509f00bddc3759b6d3295b34f87a4e98b55c1aae2eeeb1cecc64046a13ecc",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 491
      },
      {
        "segments": [
          {
            "segment_id": "8916dc31-3e8d-4431-ba27-f4163a70da87",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 143,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\n.ascii \"hello world\\X0A\\X00\"\r\n.text\r\n.align 2\r\nmain:\r\n.set noreorder\r\n.cpload $25\r\n.set reorder\r\nsubu $sp, 40\r\nsw $31, 36($sp)\r\n.cprestore 32\r\nla $4, $$5\r\njal printf\r\nmove $2, $0\r\nlw $31, 36($sp)\r\naddu $sp, 40\r\nj $31\r\nThe actual instructions generated by the assembler are as follows:\r\nlui gp,0 #\r\naddiu gp,gp,0 #generated by .cpload\r\naddu gp,gp,t9 #\r\nlw a0,0(g0) # gp-relative addressing used\r\nlw t9,0(gp) # t9 is used for func. call\r\naddiu sp,sp,-40\r\nsw ra,36(sp)\r\nsw gp,32(sp)# from .cprestore\r\njalr ra,t9 # jal is changed to jalr\r\naddiu a0,a0,0\r\nlw ra,36(sp)\r\nlw gp,32(sp)# activated by .cprestore\r\nmove v0,zero\r\njr ra\r\naddiu sp,sp,40\r\nnop\r\nThe ABI requires that register t9 ($25) be used for indirect function calls, so\r\n.cpload should always use $25; no-reorder mode should also be used. Make sure\r\nthat t9 is dead before any function call, because the register is changed (and not\r\nrestored) during the function call.\r\n007–2418–006 121",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/8916dc31-3e8d-4431-ba27-f4163a70da87.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c17c30d443317578a5d1dabd9530cbb7488f028f6cb093f07bb2dc7a6dfe5268",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b511bf08-847f-4631-9fca-fbe02616df04",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 144,
            "page_width": 612,
            "page_height": 792,
            "content": "8: Pseudo Op-Codes (Directives)\r\nIf your program uses an indirect jump (jalr), you must also use t9 as the jump\r\nregister.\r\nIf you have an unconditional jump to an external label (j _cerror), rewrite it into\r\nan indirect jump using t9, as in this example:\r\nla t9,_cerror\r\nj t9\r\nIf you use branch-and-link (bal) instructions and if the target procedure begins with\r\na .cpload, specify an alternate entry point, as in this example:\r\nfoo: .set noreorder #callee\r\n.cpload $25\r\n.set reorder\r\n$$1: ... # alternative entry point\r\n...\r\nj $31 # foo returns\r\nbar: ... # caller\r\n...\r\nbal $$1 # bypass the .cpload\r\n...\r\nThe alternate entry point is important because .cpload assumes register $25\r\ncontains the address of foo, but in this case, $25 is not set up. Because both foo and\r\nbar reside in the same file, they must have the same value for $gp. The .cpload\r\ninstructions can be and must be bypassed, but because foo can still be called from\r\noutside, the .cpload is still required.\r\nIf you don’t want to have an alternate entry point, you can set up register $25 before\r\nthe bal, as in the following:\r\nla t9, foo\r\nbal foo\r\nEntries of the address table created by .gpword are converted into displacement from\r\nthe context pointer. To get the correct text address, .cpadd should be used to add the\r\nvalue of gp back to them. The gp is updated by the runtime linker, so the correct text\r\naddress can be reconstructed regardless of the location of the DSO.\r\n122 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/b511bf08-847f-4631-9fca-fbe02616df04.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4a9b22adb249125e95cb03ccc2a001706131a2b19565dab1419b8abff748c3d9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 418
      },
      {
        "segments": [
          {
            "segment_id": "0bf76aa5-58c8-403d-88c8-39310815a54b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 145,
            "page_width": 612,
            "page_height": 792,
            "content": "Index\r\nA\r\naddress\r\ndescription, 11\r\ndescriptions, 11\r\nformat, 10\r\naddressing, 9\r\nalignment, 9\r\n.aent name, symno, 110\r\n.align, 110\r\naligned data\r\nload and store instructions, 10\r\nalignment\r\naddressing, 9\r\n.ascii, 110\r\n.asciiz, 111\r\nassembler\r\ntokens, 15\r\nassembly languagefile, 100\r\nblock information, 107\r\ninstruction alignment, 101\r\nlabel offset comments, 101\r\nloop information comments, 107\r\nnop instructions, 106\r\nprogram header, 101\r\nrelative branch prediction times, 105\r\nrelative instruction issue times, 103\r\nsource code comments, 102\r\nB\r\nblock information, 107\r\nbranch instructions filling delay slots, 27\r\n.byte, 111\r\nC\r\n.comm, 111\r\ncomments, 16\r\ncomputational instructions, 27, 37\r\ndescriptions - table, , 41\r\nconstants, 16 floating-point, 17\r\nscalar, 17\r\nstring, 18\r\nconventions\r\ndata types, 24\r\nexpression operators, 23\r\nexpressions, 22\r\nlexical, 15\r\nlinkage, 87\r\nprecedence, 22\r\nstatements, 21\r\ncoprocessor instruction\r\nnotation, 61\r\ncoprocessor instruction set, 61\r\ncoprocessor interface instructions, 56\r\ndescription of, , 58\r\ncounters\r\nsections and locations, 19\r\n.cpadd, 111\r\n.cpload, 111\r\n.cplocal, 111\r\n.cprestore, 111\r\n.cpreturn, 112\r\n.cpsetup, 112 D\r\ndata types\r\nconventions, 24\r\n007–2418–006 123",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/0bf76aa5-58c8-403d-88c8-39310815a54b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2313c2e58ce0c8b700ed7e09e9184137af3d4ac4b37309b0828589186e05ab9e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f4303616-8332-477d-9495-263759f10cdf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 146,
            "page_width": 612,
            "page_height": 792,
            "content": "Index\r\n.data, 112\r\ndescription\r\naddress, 11\r\ndescriptions\r\nload instructions, 31\r\ndivision by zero, 83\r\n.double, 112\r\n.dword, 113\r\n.dynsym, 113\r\nE\r\n.end, 113\r\nendianness, 1\r\n.endr, 113\r\n.ent, 113\r\nexception\r\ndivision by zero, 83\r\ninexact, 85\r\ninvalid operation, 83\r\noverflow, 84\r\ntrap processing, 82\r\nunderflow, 84\r\nunimplemented operation, 85\r\nexception trap processing, 82\r\nexceptions, 13\r\nfloating-point, 13\r\nmain processor, 13\r\nexpression\r\ntype propagation, 25\r\nexpression operators, 23\r\nexpressions, 22\r\nprecedence, 22\r\n.extern, 113\r\nF\r\n.file, 113\r\n.float, 113\r\nfloating-point\r\ncomputational - description, 68\r\ncomputational - format, 65\r\ncontrol register, 81\r\nexceptions, 13\r\ninstruction format, 62\r\ninstructions, 62\r\nload and store, 63\r\nmove instruction - description of, 77\r\nmove instructions - format, 76\r\nregisters, 4\r\nrelational instruction - description, 74\r\nrelational instruction formats, , 72\r\nrelational operations, 70\r\nrounding, 85\r\nfloating-point constants, 17\r\n.fmask, 114\r\nformat\r\naddress, 10\r\nformats\r\nload and store, 29\r\n.frame, 114\r\nG\r\n-G value\r\nlink editor, 21\r\ngeneral registers, 1\r\n.globl, 114\r\n.gpvalue, 114\r\n.gpword, 114\r\nH\r\n.half, 115\r\nI\r\nidentifiers, 16\r\n124 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/f4303616-8332-477d-9495-263759f10cdf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=664df444db68f9c3979fc25b41ee640bc89e7daaefe35513b71e8847229b4d1f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 331
      },
      {
        "segments": [
          {
            "segment_id": "b0addbac-0c49-44c5-9f93-d40fc9d4c85a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 147,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\ninexact exception, 85\r\ninstruction alignment, 101\r\ninstruction set, 27\r\ncoprocessor, 61\r\ninstructions\r\nclasses of, 27\r\ncomputational, 37\r\nconstraints and rules, 27\r\ncoprocessor interface, 56\r\ncoprocessor interface - description, , 56, 58\r\nfloating-point, 62\r\ninstruction notation, 27\r\njump and branch, 50\r\nload and store - unaligned data, 9\r\nmiscellaneous tasks, 55\r\nreorganization rules, 27\r\nspecial, 55\r\ninvalid operation exception, 83\r\nJ\r\njump and branch instructions, 27, 50\r\ndescriptions, 52\r\nformats, 50\r\nK\r\nkeyword statements, 22\r\nKPIC Fortran compiler option, 120\r\nL\r\n.lab, 115\r\nlabel definitions\r\nstatements, 21\r\nlabel offset comments, 101\r\n.lcomm, 115\r\nleaf routines, 88\r\nlexical conventions, 15\r\nlink editor\r\n-G option, 21\r\nlinkage\r\nconventions, 87\r\nprogram design, 88\r\nload and store\r\nfloating-point, 63\r\nload and store instructions\r\nformats, 29\r\nload instructions\r\ndelayed, 27\r\ndescription, 31\r\nlb (load byte), 10\r\nlbu (load byte unsigned), 10\r\nlh (load halfword), 10\r\nlhu (load halfword unsigned), 10\r\nlw (load word), 10\r\nlwl (load word left), 9\r\nlwr (load word right), 9\r\nulh (unaligned load halfword unsigned), 9\r\nulh (unaligned load halfword), 9\r\nulw (unaligned load word), 9\r\n.loc, 115\r\nloop information comments, 107\r\nM\r\n.mask, 115\r\nmove instructions\r\nfloating-point, 76\r\nN\r\n.nada, 116\r\nnon-leaf routines, 88\r\nnop, 109, 110\r\nnop instructions, 106\r\n.nop, 116\r\nnull statements, 21\r\n007–2418–006 125",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/b0addbac-0c49-44c5-9f93-d40fc9d4c85a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a33e217b116bd550daacbdb14c532805349793d8577ca27224a3dca9b0d5bacc",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6a36f458-d475-4a02-900d-664a4788c1d9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 148,
            "page_width": 612,
            "page_height": 792,
            "content": "Index\r\nO\r\n.option, 116\r\n.origin, 116\r\noverflow exception, 84\r\nP\r\nprecedence in expressions, 22\r\nprogram design\r\nlinkage, 88\r\nprogram header, 101\r\npseudo op-codes, , , 16, 17, 20, 102, 109, , ,,,,,\r\nR\r\n.rdata, 117\r\nregister, 1\r\nendianness, 1\r\nformat, 1\r\nregisters\r\nfloating-point, 4\r\ngeneral, 1\r\nspecial, 4\r\nrelational operations\r\nfloating-point, 70\r\nrelative branch prediction times, 105\r\nrelative instruction issue times, 103\r\n.repeat, 116\r\n.restore, 116\r\nS\r\n.save, 117\r\nscalar constants, 17\r\n.sdata, 117\r\n.section, 117\r\n.set, 117\r\nshape of data, 96\r\n.size, 119\r\nsource code comments, 102\r\n.space, 119\r\nspecial instructions, 27, 55\r\nspecial registers, 4\r\nstack frame, 88\r\nstack organization- figure, , 90\r\nstatements\r\nkeyword, 22\r\nlabel definitions, 21\r\nnull, 21\r\nstore instructions\r\ndescription, 34\r\ndescription - table, 35\r\nformat, 29\r\nsb (store byte), 10\r\nsh (store halfword), 10\r\nsw (store word), 10\r\nswl (store word left), 9\r\nswr (store word right), 9\r\nush (unaligned store halfword), 10\r\nusw (unaligned store word), 9, 10\r\nstring constants, 18\r\n.struct, 119\r\n(symbolic equate), 119\r\nsystem control\r\ninstruction descriptions, 79\r\ninstruction formats, , 78\r\nT\r\n.text, 119\r\ntokens\r\ncomments, 16\r\nconstants, 16\r\nidentifiers, 16\r\ntype propagation in expression, 25\r\n.type, 119\r\n126 007–2418–006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/6a36f458-d475-4a02-900d-664a4788c1d9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=86e9ea43b63f4834bec0a909af353816d34f9f748d347548a55446290717b6d0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e5a47148-71cb-46be-8dc2-45ea855cf8a5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 149,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM Assembly Language Programmer’s Guide\r\nU\r\nunaligned data\r\nload and store instructions, 9\r\nunderflow exception, 84\r\nunimplemented operation exception, 85\r\nV\r\n.verstamp, 119\r\nW\r\n.weakext, 119\r\n.word, 120\r\n007–2418–006 127",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c4f0b1ad-a2ab-4140-bc1f-b2a22ec1f4cf/images/e5a47148-71cb-46be-8dc2-45ea855cf8a5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041624Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8e227b7ad3b5253fb51734cc1d1b1b1c07afa25a57329ea7c53040c82ecef905",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 433
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "```json\n{\n \"title\": \"MIPSpro Assembly Language Programmer’s Guide\"\n}\n```"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Larry Huffman, David Graves. Engineering contributions by Bean Anderson, Jim Dehnert, Suneel Jain, Michael Murphy, George Pirocanac.\n"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "June 2003\n"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "```json\n{\"location\": \"page 87\"}\n```"
        }
      ]
    }
  }
}