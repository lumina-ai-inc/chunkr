{
  "file_name": "JavaScript - ECMA-262 Standard (v5.1, 2011).pdf",
  "task_id": "1d84b8c4-c8f3-4930-b85c-171b2e9f62fd",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "d5f13d60-603e-41c6-840b-86fe3de12241",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 842.04
            },
            "page_number": 1,
            "page_width": 595.32,
            "page_height": 842.04,
            "content": "Reference number\r\nECMA-123:2009\r\n© Ecma International 2009\r\nECMA-262\r\n5.1 Edition / June 2011\r\nECMAScript Language \r\nSpecification",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/d5f13d60-603e-41c6-840b-86fe3de12241.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=42db7d4b3bf5b855723242432cd6f43275ca0b6f7f53a526df283ecc9625990b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "38d18fe1-6b26-4795-9483-d97e70393d30",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 842.04
            },
            "page_number": 2,
            "page_width": 595.32,
            "page_height": 842.04,
            "content": "COPYRIGHT PROTECTED DOCUMENT\r\n© Ecma International 2011",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/38d18fe1-6b26-4795-9483-d97e70393d30.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4d18b3d316b385cb592aba745389f7657547c10db19f5450ac48c65b39df23d0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 23
      },
      {
        "segments": [
          {
            "segment_id": "73825a86-97a7-4b4e-aacc-2aa74a29e4d9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 842.04
            },
            "page_number": 3,
            "page_width": 595.32,
            "page_height": 842.04,
            "content": "Copyright notice\r\nCopyright © 2011 Ecma International\r\nEcma International\r\nRue du Rhone 114\r\nCH-1204 Geneva\r\nTel: +41 22 849 6000\r\nFax: +41 22 849 6001\r\nWeb: http://www.ecma-international.org\r\nThis document and possible translations of it may be copied and furnished to others, and derivative works that \r\ncomment on or otherwise explain it or assist in its implementation may be prepared, copied, published, and \r\ndistributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this \r\nsection are included on all such copies and derivative works. However, this document itself may not be \r\nmodified in any way, including by removing the copyright notice or references to Ecma International, except as \r\nneeded for the purpose of developing any document or deliverable produced by Ecma International (in which \r\ncase the rules applied to copyrights must be followed) or as required to translate it into languages other than \r\nEnglish.\r\nThe limited permissions granted above are perpetual and will not be revoked by Ecma International or its \r\nsuccessors or assigns.\r\nThis document and the information contained herein is provided on an \"AS IS\" basis and ECMA \r\nINTERNATIONAL DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT \r\nLIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE \r\nANY OWNERSHIP RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR \r\nA PARTICULAR PURPOSE.\"\r\nSoftware License\r\nAll Software contained in this document (\"Software)\" is protected by copyright and is being made available \r\nunder the \"BSD License\", included below. This Software may be subject to third party rights (rights from \r\nparties other than Ecma International), including patent rights, and no licenses under such third party rights \r\nare granted under this license even if the third party concerned is a member of Ecma International. SEE THE \r\nECMA CODE OF CONDUCT IN PATENT MATTERS AVAILABLE AT http://www.ecma\u0002international.org/memento/codeofconduct.htm FOR INFORMATION REGARDING THE LICENSING OF \r\nPATENT CLAIMS THAT ARE REQUIRED TO IMPLEMENT ECMA INTERNATIONAL STANDARDS*.\r\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the \r\nfollowing conditions are met:\r\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the \r\nfollowing disclaimer.\r\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the \r\nfollowing disclaimer in the documentation and/or other materials provided with the distribution.\r\n3. Neither the name of the authors nor Ecma International may be used to endorse or promote products \r\nderived from this software without specific prior written permission.\r\nTHIS SOFTWARE IS PROVIDED BY THE ECMA INTERNATIONAL \"AS IS\" AND ANY EXPRESS OR \r\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \r\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT \r\nSHALL ECMA INTERNATIONAL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \r\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT \r\nOF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, \r\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT \r\nOF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/73825a86-97a7-4b4e-aacc-2aa74a29e4d9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=58b480c681886e45dd111fab1863cb5b4cb7555d101c9cc58c1d9db5df1ffc00",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 529
      },
      {
        "segments": [
          {
            "segment_id": "73825a86-97a7-4b4e-aacc-2aa74a29e4d9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 842.04
            },
            "page_number": 3,
            "page_width": 595.32,
            "page_height": 842.04,
            "content": "Copyright notice\r\nCopyright © 2011 Ecma International\r\nEcma International\r\nRue du Rhone 114\r\nCH-1204 Geneva\r\nTel: +41 22 849 6000\r\nFax: +41 22 849 6001\r\nWeb: http://www.ecma-international.org\r\nThis document and possible translations of it may be copied and furnished to others, and derivative works that \r\ncomment on or otherwise explain it or assist in its implementation may be prepared, copied, published, and \r\ndistributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this \r\nsection are included on all such copies and derivative works. However, this document itself may not be \r\nmodified in any way, including by removing the copyright notice or references to Ecma International, except as \r\nneeded for the purpose of developing any document or deliverable produced by Ecma International (in which \r\ncase the rules applied to copyrights must be followed) or as required to translate it into languages other than \r\nEnglish.\r\nThe limited permissions granted above are perpetual and will not be revoked by Ecma International or its \r\nsuccessors or assigns.\r\nThis document and the information contained herein is provided on an \"AS IS\" basis and ECMA \r\nINTERNATIONAL DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT \r\nLIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE \r\nANY OWNERSHIP RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR \r\nA PARTICULAR PURPOSE.\"\r\nSoftware License\r\nAll Software contained in this document (\"Software)\" is protected by copyright and is being made available \r\nunder the \"BSD License\", included below. This Software may be subject to third party rights (rights from \r\nparties other than Ecma International), including patent rights, and no licenses under such third party rights \r\nare granted under this license even if the third party concerned is a member of Ecma International. SEE THE \r\nECMA CODE OF CONDUCT IN PATENT MATTERS AVAILABLE AT http://www.ecma\u0002international.org/memento/codeofconduct.htm FOR INFORMATION REGARDING THE LICENSING OF \r\nPATENT CLAIMS THAT ARE REQUIRED TO IMPLEMENT ECMA INTERNATIONAL STANDARDS*.\r\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the \r\nfollowing conditions are met:\r\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the \r\nfollowing disclaimer.\r\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the \r\nfollowing disclaimer in the documentation and/or other materials provided with the distribution.\r\n3. Neither the name of the authors nor Ecma International may be used to endorse or promote products \r\nderived from this software without specific prior written permission.\r\nTHIS SOFTWARE IS PROVIDED BY THE ECMA INTERNATIONAL \"AS IS\" AND ANY EXPRESS OR \r\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \r\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT \r\nSHALL ECMA INTERNATIONAL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \r\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT \r\nOF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, \r\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT \r\nOF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/73825a86-97a7-4b4e-aacc-2aa74a29e4d9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=58b480c681886e45dd111fab1863cb5b4cb7555d101c9cc58c1d9db5df1ffc00",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 529
      },
      {
        "segments": [
          {
            "segment_id": "6b60ddde-3e25-41e8-a66d-bdcc2d3cc5db",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 842.04
            },
            "page_number": 4,
            "page_width": 595.32,
            "page_height": 842.04,
            "content": "COPYRIGHT PROTECTED DOCUMENT\r\n© Ecma International 2011",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/6b60ddde-3e25-41e8-a66d-bdcc2d3cc5db.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=649442244f602f01164ce4e2e0ea95dea80f301e025ec721e37483c2821cf609",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3b144cad-ca5f-4902-9f0f-94870b9064f8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 5,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 i\r\nContents Page\r\nIntroduction.......................................................................................................................................................vii\r\n1 Scope.............................................................................................................................................................1\r\n2 Conformance ................................................................................................................................................1\r\n3 Normative references ..................................................................................................................................1\r\n4 Overview .......................................................................................................................................................1\r\n4.1 Web Scripting ............................................................................................................................................2\r\n4.2 Language Overview ..................................................................................................................................2\r\n4.2.1 Objects ....................................................................................................................................................3\r\n4.2.2 The Strict Variant of ECMAScript .........................................................................................................4\r\n4.3 Terms and definitions...............................................................................................................................4\r\n5 Notational Conventions...............................................................................................................................7\r\n5.1 Syntactic and Lexical Grammars.............................................................................................................7\r\n5.1.1 Context-Free Grammars ........................................................................................................................7\r\n5.1.2 The Lexical and RegExp Grammars.....................................................................................................8\r\n5.1.3 The Numeric String Grammar...............................................................................................................8\r\n5.1.4 The Syntactic Grammar.........................................................................................................................8\r\n5.1.5 The JSON Grammar...............................................................................................................................9\r\n5.1.6 Grammar Notation..................................................................................................................................9\r\n5.2 Algorithm Conventions ..........................................................................................................................11\r\n6 Source Text.................................................................................................................................................13\r\n7 Lexical Conventions ..................................................................................................................................13\r\n7.1 Unicode Format-Control Characters.....................................................................................................14\r\n7.2 White Space.............................................................................................................................................14\r\n7.3 Line Terminators .....................................................................................................................................15\r\n7.4 Comments................................................................................................................................................16\r\n7.5 Tokens......................................................................................................................................................17\r\n7.6 Identifier Names and Identifiers.............................................................................................................17\r\n7.6.1 Reserved Words...................................................................................................................................18\r\n7.7 Punctuators .............................................................................................................................................19\r\n7.8 Literals......................................................................................................................................................19\r\n7.8.1 Null Literals...........................................................................................................................................19\r\n7.8.2 Boolean Literals ...................................................................................................................................20\r\n7.8.3 Numeric Literals ...................................................................................................................................20\r\n7.8.4 String Literals .......................................................................................................................................22\r\n7.8.5 Regular Expression Literals................................................................................................................24\r\n7.9 Automatic Semicolon Insertion .............................................................................................................26\r\n7.9.1 Rules of Automatic Semicolon Insertion...........................................................................................26\r\n7.9.2 Examples of Automatic Semicolon Insertion....................................................................................27\r\n8 Types ...........................................................................................................................................................28\r\n8.1 The Undefined Type................................................................................................................................28\r\n8.2 The Null Type...........................................................................................................................................28\r\n8.3 The Boolean Type ...................................................................................................................................28\r\n8.4 The String Type .......................................................................................................................................28\r\n8.5 The Number Type....................................................................................................................................29\r\n8.6 The Object Type ......................................................................................................................................30\r\n8.6.1 Property Attributes ..............................................................................................................................30\r\n8.6.2 Object Internal Properties and Methods............................................................................................31\r\n8.7 The Reference Specification Type ........................................................................................................35",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/3b144cad-ca5f-4902-9f0f-94870b9064f8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7925bbb54d81d8e0c57e059440e15bc6232b9468a55cfed5694de195690cfbf6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 204
      },
      {
        "segments": [
          {
            "segment_id": "0e347272-c9b5-4630-b2e1-e5f5a720bd3e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 6,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "ii © Ecma International 2011\r\n8.7.1 GetValue (V) ......................................................................................................................................... 35\r\n8.7.2 PutValue (V, W).................................................................................................................................... 36\r\n8.8 The List Specification Type................................................................................................................... 36\r\n8.9 The Completion Specification Type ..................................................................................................... 36\r\n8.10 The Property Descriptor and Property Identifier Specification Types........................................... 37\r\n8.10.1 IsAccessorDescriptor ( Desc )........................................................................................................... 37\r\n8.10.2 IsDataDescriptor ( Desc ) ................................................................................................................... 37\r\n8.10.3 IsGenericDescriptor ( Desc ) ............................................................................................................. 37\r\n8.10.4 FromPropertyDescriptor ( Desc )...................................................................................................... 38\r\n8.10.5 ToPropertyDescriptor ( Obj ) ............................................................................................................. 38\r\n8.11 The Lexical Environment and Environment Record Specification Types...................................... 39\r\n8.12 Algorithms for Object Internal Methods............................................................................................. 39\r\n8.12.1 [[GetOwnProperty]] (P)....................................................................................................................... 39\r\n8.12.2 [[GetProperty]] (P)............................................................................................................................... 39\r\n8.12.3 [[Get]] (P) ............................................................................................................................................. 39\r\n8.12.4 [[CanPut]] (P)....................................................................................................................................... 39\r\n8.12.5 [[Put]] ( P, V, Throw ) .......................................................................................................................... 40\r\n8.12.6 [[HasProperty]] (P).............................................................................................................................. 40\r\n8.12.7 [[Delete]] (P, Throw)............................................................................................................................ 40\r\n8.12.8 [[DefaultValue]] (hint) ......................................................................................................................... 41\r\n8.12.9 [[DefineOwnProperty]] (P, Desc, Throw).......................................................................................... 41\r\n9 Type Conversion and Testing .................................................................................................................. 42\r\n9.1 ToPrimitive .............................................................................................................................................. 43\r\n9.2 ToBoolean ............................................................................................................................................... 43\r\n9.3 ToNumber................................................................................................................................................ 43\r\n9.3.1 ToNumber Applied to the String Type............................................................................................... 44\r\n9.4 ToInteger ................................................................................................................................................. 46\r\n9.5 ToInt32: (Signed 32 Bit Integer) ............................................................................................................ 47\r\n9.6 ToUint32: (Unsigned 32 Bit Integer) ..................................................................................................... 47\r\n9.7 ToUint16: (Unsigned 16 Bit Integer) ..................................................................................................... 47\r\n9.8 ToString................................................................................................................................................... 48\r\n9.8.1 ToString Applied to the Number Type............................................................................................... 48\r\n9.9 ToObject.................................................................................................................................................. 49\r\n9.10 CheckObjectCoercible ......................................................................................................................... 49\r\n9.11 IsCallable............................................................................................................................................... 49\r\n9.12 The SameValue Algorithm................................................................................................................... 50\r\n10 Executable Code and Execution Contexts ........................................................................................... 50\r\n10.1 Types of Executable Code................................................................................................................... 50\r\n10.1.1 Strict Mode Code ................................................................................................................................ 51\r\n10.2 Lexical Environments .......................................................................................................................... 51\r\n10.2.1 Environment Records ........................................................................................................................ 51\r\n10.2.2 Lexical Environment Operations....................................................................................................... 56\r\n10.2.3 The Global Environment .................................................................................................................... 56\r\n10.3 Execution Contexts .............................................................................................................................. 56\r\n10.3.1 Identifier Resolution ........................................................................................................................... 57\r\n10.4 Establishing an Execution Context .................................................................................................... 57\r\n10.4.1 Entering Global Code ......................................................................................................................... 58\r\n10.4.2 Entering Eval Code............................................................................................................................. 58\r\n10.4.3 Entering Function Code ..................................................................................................................... 58\r\n10.5 Declaration Binding Instantiation....................................................................................................... 59\r\n10.6 Arguments Object ................................................................................................................................ 60\r\n11 Expressions ............................................................................................................................................. 63\r\n11.1 Primary Expressions............................................................................................................................ 63\r\n11.1.1 The this Keyword.............................................................................................................................. 63\r\n11.1.2 Identifier Reference ............................................................................................................................ 63\r\n11.1.3 Literal Reference................................................................................................................................. 63\r\n11.1.4 Array Initialiser.................................................................................................................................... 63\r\n11.1.5 Object Initialiser.................................................................................................................................. 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0e347272-c9b5-4630-b2e1-e5f5a720bd3e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=efee1b86ae413ab7e314452f86924006a61216d4d4979cb50228b1c6cb4bcd9c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 329
      },
      {
        "segments": [
          {
            "segment_id": "aaf87c88-c9f1-4e90-a071-7da4bcbcb584",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 7,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 iii\r\n11.1.6 The Grouping Operator.......................................................................................................................67\r\n11.2 Left-Hand-Side Expressions ................................................................................................................67\r\n11.2.1 Property Accessors.............................................................................................................................67\r\n11.2.2 The new Operator.................................................................................................................................68\r\n11.2.3 Function Calls......................................................................................................................................68\r\n11.2.4 Argument Lists ....................................................................................................................................69\r\n11.2.5 Function Expressions .........................................................................................................................69\r\n11.3 Postfix Expressions..............................................................................................................................69\r\n11.3.1 Postfix Increment Operator................................................................................................................70\r\n11.3.2 Postfix Decrement Operator...............................................................................................................70\r\n11.4 Unary Operators....................................................................................................................................70\r\n11.4.1 The delete Operator..........................................................................................................................70\r\n11.4.2 The void Operator ..............................................................................................................................71\r\n11.4.3 The typeof Operator..........................................................................................................................71\r\n11.4.4 Prefix Increment Operator..................................................................................................................71\r\n11.4.5 Prefix Decrement Operator.................................................................................................................72\r\n11.4.6 Unary + Operator.................................................................................................................................72\r\n11.4.7 Unary - Operator.................................................................................................................................72\r\n11.4.8 Bitwise NOT Operator ( ~ )..................................................................................................................72\r\n11.4.9 Logical NOT Operator ( ! )..................................................................................................................73\r\n11.5 Multiplicative Operators .......................................................................................................................73\r\n11.5.1 Applying the * Operator .....................................................................................................................73\r\n11.5.2 Applying the / Operator .....................................................................................................................74\r\n11.5.3 Applying the % Operator .....................................................................................................................74\r\n11.6 Additive Operators................................................................................................................................75\r\n11.6.1 The Addition operator ( + ) .................................................................................................................75\r\n11.6.2 The Subtraction Operator ( - ) ...........................................................................................................75\r\n11.6.3 Applying the Additive Operators to Numbers ..................................................................................75\r\n11.7 Bitwise Shift Operators ........................................................................................................................76\r\n11.7.1 The Left Shift Operator ( << )..............................................................................................................76\r\n11.7.2 The Signed Right Shift Operator ( >> )..............................................................................................76\r\n11.7.3 The Unsigned Right Shift Operator ( >>> ) .......................................................................................77\r\n11.8 Relational Operators.............................................................................................................................77\r\n11.8.1 The Less-than Operator ( < ) ..............................................................................................................77\r\n11.8.2 The Greater-than Operator ( > )..........................................................................................................78\r\n11.8.3 The Less-than-or-equal Operator ( <= ).............................................................................................78\r\n11.8.4 The Greater-than-or-equal Operator ( >= )........................................................................................78\r\n11.8.5 The Abstract Relational Comparison Algorithm ..............................................................................78\r\n11.8.6 The instanceof operator......................................................................................................................79\r\n11.8.7 The in operator ....................................................................................................................................79\r\n11.9 Equality Operators ................................................................................................................................80\r\n11.9.1 The Equals Operator ( == ) .................................................................................................................80\r\n11.9.2 The Does-not-equals Operator ( != ).................................................................................................80\r\n11.9.3 The Abstract Equality Comparison Algorithm .................................................................................80\r\n11.9.4 The Strict Equals Operator ( === ).....................................................................................................81\r\n11.9.5 The Strict Does-not-equal Operator ( !== ) ......................................................................................81\r\n11.9.6 The Strict Equality Comparison Algorithm.......................................................................................82\r\n11.10 Binary Bitwise Operators....................................................................................................................82\r\n11.11 Binary Logical Operators....................................................................................................................83\r\n11.12 Conditional Operator ( ? : ).............................................................................................................84\r\n11.13 Assignment Operators........................................................................................................................84\r\n11.13.1 Simple Assignment ( = )......................................................................................................................85\r\n11.13.2 Compound Assignment ( op= )..........................................................................................................85\r\n11.14 Comma Operator ( , ) .......................................................................................................................85\r\n12 Statements................................................................................................................................................86\r\n12.1 Block.......................................................................................................................................................86\r\n12.2 Variable Statement................................................................................................................................87",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/aaf87c88-c9f1-4e90-a071-7da4bcbcb584.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5b1cddee7969579cf682ba8f5ed4000cbbc2d778ff4eea7672995d769943682c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 310
      },
      {
        "segments": [
          {
            "segment_id": "6b253648-87cd-4b48-ab0f-0f53952af570",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 8,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "iv © Ecma International 2011\r\n12.2.1 Strict Mode Restrictions .................................................................................................................... 88\r\n12.3 Empty Statement .................................................................................................................................. 88\r\n12.4 Expression Statement.......................................................................................................................... 89\r\n12.5 The if Statement ................................................................................................................................. 89\r\n12.6 Iteration Statements............................................................................................................................. 90\r\n12.6.1 The do-while Statement.................................................................................................................... 90\r\n12.6.2 The while Statement ......................................................................................................................... 90\r\n12.6.3 The for Statement.............................................................................................................................. 90\r\n12.6.4 The for-in Statement........................................................................................................................ 91\r\n12.7 The continue Statement .................................................................................................................... 92\r\n12.8 The break Statement........................................................................................................................... 93\r\n12.9 The return Statement......................................................................................................................... 93\r\n12.10 The with Statement ........................................................................................................................... 93\r\n12.10.1 Strict Mode Restrictions .................................................................................................................... 94\r\n12.11 The switch Statement ....................................................................................................................... 94\r\n12.12 Labelled Statements........................................................................................................................... 96\r\n12.13 The throw Statement ......................................................................................................................... 96\r\n12.14 The try Statement.............................................................................................................................. 96\r\n12.14.1 Strict Mode Restrictions .................................................................................................................... 97\r\n12.15 The debugger statement ................................................................................................................... 97\r\n13 Function Definition.................................................................................................................................. 98\r\n13.1 Strict Mode Restrictions ...................................................................................................................... 99\r\n13.2 Creating Function Objects .................................................................................................................. 99\r\n13.2.1 [[Call]]................................................................................................................................................. 100\r\n13.2.2 [[Construct]] ...................................................................................................................................... 100\r\n13.2.3 The [[ThrowTypeError]] Function Object ....................................................................................... 100\r\n14 Program.................................................................................................................................................. 101\r\n14.1 Directive Prologues and the Use Strict Directive............................................................................ 102\r\n15 Standard Built-in ECMAScript Objects ............................................................................................... 102\r\n15.1 The Global Object............................................................................................................................... 103\r\n15.1.1 Value Properties of the Global Object ............................................................................................ 103\r\n15.1.2 Function Properties of the Global Object ...................................................................................... 104\r\n15.1.3 URI Handling Function Properties .................................................................................................. 106\r\n15.1.4 Constructor Properties of the Global Object ................................................................................. 110\r\n15.1.5 Other Properties of the Global Object ............................................................................................ 111\r\n15.2 Object Objects .................................................................................................................................... 111\r\n15.2.1 The Object Constructor Called as a Function ............................................................................... 111\r\n15.2.2 The Object Constructor.................................................................................................................... 112\r\n15.2.3 Properties of the Object Constructor ............................................................................................. 112\r\n15.2.4 Properties of the Object Prototype Object..................................................................................... 115\r\n15.2.5 Properties of Object Instances........................................................................................................ 117\r\n15.3 Function Objects ................................................................................................................................ 117\r\n15.3.1 The Function Constructor Called as a Function ........................................................................... 117\r\n15.3.2 The Function Constructor................................................................................................................ 117\r\n15.3.3 Properties of the Function Constructor ......................................................................................... 118\r\n15.3.4 Properties of the Function Prototype Object................................................................................. 118\r\n15.3.5 Properties of Function Instances.................................................................................................... 121\r\n15.4 Array Objects ...................................................................................................................................... 122\r\n15.4.1 The Array Constructor Called as a Function ................................................................................. 122\r\n15.4.2 The Array Constructor ..................................................................................................................... 122\r\n15.4.3 Properties of the Array Constructor ............................................................................................... 123\r\n15.4.4 Properties of the Array Prototype Object....................................................................................... 123\r\n15.4.5 Properties of Array Instances.......................................................................................................... 140\r\n15.5 String Objects ..................................................................................................................................... 141\r\n15.5.1 The String Constructor Called as a Function ................................................................................ 141\r\n15.5.2 The String Constructor .................................................................................................................... 142\r\n15.5.3 Properties of the String Constructor .............................................................................................. 142",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/6b253648-87cd-4b48-ab0f-0f53952af570.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5ab3ce192d544d25d58fd99268bff4fa3229c5f59293987093385302607b401c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 365
      },
      {
        "segments": [
          {
            "segment_id": "22b1a7b9-3c52-4292-bdbb-7e8ee422d113",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 9,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 v\r\n15.5.4 Properties of the String Prototype Object ......................................................................................142\r\n15.5.5 Properties of String Instances .........................................................................................................151\r\n15.6 Boolean Objects..................................................................................................................................152\r\n15.6.1 The Boolean Constructor Called as a Function .............................................................................152\r\n15.6.2 The Boolean Constructor .................................................................................................................152\r\n15.6.3 Properties of the Boolean Constructor...........................................................................................153\r\n15.6.4 Properties of the Boolean Prototype Object...................................................................................153\r\n15.6.5 Properties of Boolean Instances .....................................................................................................153\r\n15.7 Number Objects ..................................................................................................................................154\r\n15.7.1 The Number Constructor Called as a Function..............................................................................154\r\n15.7.2 The Number Constructor..................................................................................................................154\r\n15.7.3 Properties of the Number Constructor............................................................................................154\r\n15.7.4 Properties of the Number Prototype Object ...................................................................................155\r\n15.7.5 Properties of Number Instances ......................................................................................................159\r\n15.8 The Math Object ..................................................................................................................................159\r\n15.8.1 Value Properties of the Math Object................................................................................................159\r\n15.8.2 Function Properties of the Math Object..........................................................................................160\r\n15.9 Date Objects ........................................................................................................................................165\r\n15.9.1 Overview of Date Objects and Definitions of Abstract Operators ...............................................165\r\n15.9.2 The Date Constructor Called as a Function....................................................................................170\r\n15.9.3 The Date Constructor........................................................................................................................170\r\n15.9.4 Properties of the Date Constructor .................................................................................................171\r\n15.9.5 Properties of the Date Prototype Object.........................................................................................172\r\n15.9.6 Properties of Date Instances............................................................................................................180\r\n15.10 RegExp (Regular Expression) Objects............................................................................................180\r\n15.10.1 Patterns ..............................................................................................................................................180\r\n15.10.2 Pattern Semantics .............................................................................................................................182\r\n15.10.3 The RegExp Constructor Called as a Function..............................................................................194\r\n15.10.4 The RegExp Constructor..................................................................................................................194\r\n15.10.5 Properties of the RegExp Constructor............................................................................................195\r\n15.10.6 Properties of the RegExp Prototype Object ...................................................................................195\r\n15.10.7 Properties of RegExp Instances ......................................................................................................197\r\n15.11 Error Objects......................................................................................................................................197\r\n15.11.1 The Error Constructor Called as a Function...................................................................................198\r\n15.11.2 The Error Constructor.......................................................................................................................198\r\n15.11.3 Properties of the Error Constructor ................................................................................................198\r\n15.11.4 Properties of the Error Prototype Object........................................................................................198\r\n15.11.5 Properties of Error Instances...........................................................................................................199\r\n15.11.6 Native Error Types Used in This Standard .....................................................................................199\r\n15.11.7 NativeError Object Structure............................................................................................................200\r\n15.12 The JSON Object ...............................................................................................................................201\r\n15.12.1 The JSON Grammar ..........................................................................................................................202\r\n15.12.2 parse ( text [ , reviver ] )....................................................................................................................203\r\n15.12.3 stringify ( value [ , replacer [ , space ] ] ).........................................................................................205\r\n16 Errors.......................................................................................................................................................208\r\nAnnex A (informative) Grammar Summary ..................................................................................................211\r\nAnnex B (informative) Compatibility .............................................................................................................231\r\nAnnex C (informative) The Strict Mode of ECMAScript ..............................................................................235\r\nAnnex D (informative) Corrections and Clarifications in the 5th Edition with Possible 3rd Edition \r\nCompatibility Impact .........................................................................................................................237\r\nAnnex E (informative) Additions and Changes in the 5th Edition that Introduce Incompatibilities \r\nwith the 3rd Edition ............................................................................................................................239\r\nAnnex F (informative) Technically Significant Corrections and Clarifications in the 5.1 Edition ..........243",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/22b1a7b9-3c52-4292-bdbb-7e8ee422d113.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1528b67adf28531cb778fe44ada1348b623cf7e8b78f360b3edb9e5353832ff4",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "894db237-36de-4e6e-9492-ed3b8f202982",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 10,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "vi © Ecma International 2011",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/894db237-36de-4e6e-9492-ed3b8f202982.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6aa831acc8f3454a30e31ff6799b052c659215ec4225b12ddb46121eba4fb759",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 354
      },
      {
        "segments": [
          {
            "segment_id": "d4450ecd-a283-48cd-929d-0800307066f5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 11,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 vii\r\nIntroduction\r\nThis Ecma Standard is based on several originating technologies, the most well known being JavaScript \r\n(Netscape) and JScript (Microsoft). The language was invented by Brendan Eich at Netscape and first \r\nappeared in that company‘s Navigator 2.0 browser. It has appeared in all subsequent browsers from Netscape \r\nand in all browsers from Microsoft starting with Internet Explorer 3.0.\r\nThe development of this Standard started in November 1996. The first edition of this Ecma Standard was \r\nadopted by the Ecma General Assembly of June 1997.\r\nThat Ecma Standard was submitted to ISO/IEC JTC 1 for adoption under the fast-track procedure, and \r\napproved as international standard ISO/IEC 16262, in April 1998. The Ecma General Assembly of June 1998 \r\napproved the second edition of ECMA-262 to keep it fully aligned with ISO/IEC 16262. Changes between the \r\nfirst and the second edition are editorial in nature.\r\nThe third edition of the Standard introduced powerful regular expressions, better string handling, new control \r\nstatements, try/catch exception handling, tighter definition of errors, formatting for numeric output and minor \r\nchanges in anticipation of forthcoming internationalisation facilities and future language growth. The third \r\nedition of the ECMAScript standard was adopted by the Ecma General Assembly of December 1999 and \r\npublished as ISO/IEC 16262:2002 in June 2002.\r\nSince publication of the third edition, ECMAScript has achieved massive adoption in conjunction with the \r\nWorld Wide Web where it has become the programming language that is supported by essentially all web \r\nbrowsers. Significant work was done to develop a fourth edition of ECMAScript. Although that work was not \r\ncompleted and not published1 as the fourth edition of ECMAScript, it informs continuing evolution of the \r\nlanguage. The fifth edition of ECMAScript (published as ECMA-262 5th edition) codifies de facto \r\ninterpretations of the language specification that have become common among browser implementations and \r\nadds support for new features that have emerged since the publication of the third edition. Such features \r\ninclude accessor properties, reflective creation and inspection of objects, program control of property \r\nattributes, additional array manipulation functions, support for the JSON object encoding format, and a strict \r\nmode that provides enhanced error checking and program security.\r\nThis present edition 5.1 of the ECMAScript Standard is fully aligned with third edition of the international \r\nstandard ISO/IEC 16262:2011.\r\nECMAScript is a vibrant language and the evolution of the language is not complete. Significant technical \r\nenhancement will continue with future editions of this specification.\r\nThis Ecma Standard has been adopted by the General Assembly of June 2011.\r\n \r\n1 Note: Please note that for ECMAScript Edition 4 the Ecma standard number ―ECMA-262 Edition 4‖ was reserved but not \r\nused in the Ecma publication process. Therefore ―ECMA-262 Edition 4‖ as an Ecma International publication does not \r\nexist.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/d4450ecd-a283-48cd-929d-0800307066f5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c8a8f34cfaa925cd6f2ff327d62c77215c078c6719775ac6445dd93d5ccffc2a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3a4cbc98-eee9-4b73-8e9f-89e5235f43ac",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 12,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "viii © Ecma International 2011",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/3a4cbc98-eee9-4b73-8e9f-89e5235f43ac.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3b1c633015ed73cf1522eb1d8ff0c25bef569db7a3e275ac351a6037cfd7f4e9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 459
      },
      {
        "segments": [
          {
            "segment_id": "a9669d16-6413-4ea9-ae98-ab44e4f81c8e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 13,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 1\r\nECMAScript Language Specification\r\n1 Scope\r\nThis Standard defines the ECMAScript scripting language.\r\n2 Conformance\r\nA conforming implementation of ECMAScript must provide and support all the types, values, objects, \r\nproperties, functions, and program syntax and semantics described in this specification.\r\nA conforming implementation of this Standard shall interpret characters in conformance with the Unicode \r\nStandard, Version 3.0 or later and ISO/IEC 10646-1 with either UCS-2 or UTF-16 as the adopted encoding \r\nform, implementation level 3. If the adopted ISO/IEC 10646-1 subset is not otherwise specified, it is presumed \r\nto be the BMP subset, collection 300. If the adopted encoding form is not otherwise specified, it presumed to \r\nbe the UTF-16 encoding form.\r\nA conforming implementation of ECMAScript is permitted to provide additional types, values, objects, \r\nproperties, and functions beyond those described in this specification. In particular, a conforming \r\nimplementation of ECMAScript is permitted to provide properties not described in this specification, and \r\nvalues for those properties, for objects that are described in this specification.\r\nA conforming implementation of ECMAScript is permitted to support program and regular expression syntax \r\nnot described in this specification. In particular, a conforming implementation of ECMAScript is permitted to \r\nsupport program syntax that makes use of the ―future reserved words‖ listed in 7.6.1.2 of this specification.\r\n3 Normative references\r\nThe following referenced documents are indispensable for the application of this document. For dated \r\nreferences, only the edition cited applies. For undated references, the latest edition of the referenced \r\ndocument (including any amendments) applies.\r\nISO/IEC 9899:1996, Programming Languages – C, including amendment 1 and technical corrigenda 1 and 2\r\nISO/IEC 10646-1:1993, Information Technology – Universal Multiple-Octet Coded Character Set (UCS) plus \r\nits amendments and corrigenda\r\n4 Overview\r\nThis section contains a non-normative overview of the ECMAScript language.\r\nECMAScript is an object-oriented programming language for performing computations and manipulating \r\ncomputational objects within a host environment. ECMAScript as defined here is not intended to be \r\ncomputationally self-sufficient; indeed, there are no provisions in this specification for input of external data or \r\noutput of computed results. Instead, it is expected that the computational environment of an ECMAScript \r\nprogram will provide not only the objects and other facilities described in this specification but also certain \r\nenvironment-specific host objects, whose description and behaviour are beyond the scope of this specification \r\nexcept to indicate that they may provide certain properties that can be accessed and certain functions that can \r\nbe called from an ECMAScript program.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/a9669d16-6413-4ea9-ae98-ab44e4f81c8e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0ef569f94daa814f022d736f146f0b88e457a846f46da80a63aeec73118978b0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 406
      },
      {
        "segments": [
          {
            "segment_id": "6d027fd6-d62f-4759-b961-2e4d6db13d99",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 14,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "2 © Ecma International 2011\r\nA scripting language is a programming language that is used to manipulate, customise, and automate the \r\nfacilities of an existing system. In such systems, useful functionality is already available through a user \r\ninterface, and the scripting language is a mechanism for exposing that functionality to program control. In this \r\nway, the existing system is said to provide a host environment of objects and facilities, which completes the \r\ncapabilities of the scripting language. A scripting language is intended for use by both professional and non\u0002professional programmers.\r\nECMAScript was originally designed to be a Web scripting language, providing a mechanism to enliven Web \r\npages in browsers and to perform server computation as part of a Web-based client-server architecture. \r\nECMAScript can provide core scripting capabilities for a variety of host environments, and therefore the core \r\nscripting language is specified in this document apart from any particular host environment.\r\nSome of the facilities of ECMAScript are similar to those used in other programming languages; in particular \r\nJava, Self, and Scheme as described in:\r\nGosling, James, Bill Joy and Guy Steele. The JavaLanguage Specification. Addison Wesley Publishing Co., \r\n1996.\r\nUngar, David, and Smith, Randall B. Self: The Power of Simplicity. OOPSLA '87 Conference Proceedings, pp. \r\n227–241, Orlando, FL, October 1987.\r\nIEEE Standard for the Scheme Programming Language. IEEE Std 1178-1990.\r\n4.1 Web Scripting\r\nA web browser provides an ECMAScript host environment for client-side computation including, for instance, \r\nobjects that represent windows, menus, pop-ups, dialog boxes, text areas, anchors, frames, history, cookies, \r\nand input/output. Further, the host environment provides a means to attach scripting code to events such as \r\nchange of focus, page and image loading, unloading, error and abort, selection, form submission, and mouse \r\nactions. Scripting code appears within the HTML and the displayed page is a combination of user interface \r\nelements and fixed and computed text and images. The scripting code is reactive to user interaction and there \r\nis no need for a main program.\r\nA web server provides a different host environment for server-side computation including objects representing \r\nrequests, clients, and files; and mechanisms to lock and share data. By using browser-side and server-side \r\nscripting together, it is possible to distribute computation between the client and server while providing a \r\ncustomised user interface for a Web-based application.\r\nEach Web browser and server that supports ECMAScript supplies its own host environment, completing the \r\nECMAScript execution environment.\r\n4.2 Language Overview\r\nThe following is an informal overview of ECMAScript—not all parts of the language are described. This \r\noverview is not part of the standard proper.\r\nECMAScript is object-based: basic language and host facilities are provided by objects, and an ECMAScript \r\nprogram is a cluster of communicating objects. An ECMAScript object is a collection of properties each with \r\nzero or more attributes that determine how each property can be used—for example, when the Writable \r\nattribute for a property is set to false, any attempt by executed ECMAScript code to change the value of the \r\nproperty fails. Properties are containers that hold other objects, primitive values, or functions. A primitive \r\nvalue is a member of one of the following built-in types: Undefined, Null, Boolean, Number, and String; an \r\nobject is a member of the remaining built-in type Object; and a function is a callable object. A function that is \r\nassociated with an object via a property is a method.\r\nECMAScript defines a collection of built-in objects that round out the definition of ECMAScript entities. These \r\nbuilt-in objects include the global object, the Object object, the Function object, the Array object, the String\r\nobject, the Boolean object, the Number object, the Math object, the Date object, the RegExp object, the ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/6d027fd6-d62f-4759-b961-2e4d6db13d99.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c0e6eff3ba1e834067306bb4742f898452061ce8cce88ec192fe68232bf60f7c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 606
      },
      {
        "segments": [
          {
            "segment_id": "6d027fd6-d62f-4759-b961-2e4d6db13d99",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 14,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "2 © Ecma International 2011\r\nA scripting language is a programming language that is used to manipulate, customise, and automate the \r\nfacilities of an existing system. In such systems, useful functionality is already available through a user \r\ninterface, and the scripting language is a mechanism for exposing that functionality to program control. In this \r\nway, the existing system is said to provide a host environment of objects and facilities, which completes the \r\ncapabilities of the scripting language. A scripting language is intended for use by both professional and non\u0002professional programmers.\r\nECMAScript was originally designed to be a Web scripting language, providing a mechanism to enliven Web \r\npages in browsers and to perform server computation as part of a Web-based client-server architecture. \r\nECMAScript can provide core scripting capabilities for a variety of host environments, and therefore the core \r\nscripting language is specified in this document apart from any particular host environment.\r\nSome of the facilities of ECMAScript are similar to those used in other programming languages; in particular \r\nJava, Self, and Scheme as described in:\r\nGosling, James, Bill Joy and Guy Steele. The JavaLanguage Specification. Addison Wesley Publishing Co., \r\n1996.\r\nUngar, David, and Smith, Randall B. Self: The Power of Simplicity. OOPSLA '87 Conference Proceedings, pp. \r\n227–241, Orlando, FL, October 1987.\r\nIEEE Standard for the Scheme Programming Language. IEEE Std 1178-1990.\r\n4.1 Web Scripting\r\nA web browser provides an ECMAScript host environment for client-side computation including, for instance, \r\nobjects that represent windows, menus, pop-ups, dialog boxes, text areas, anchors, frames, history, cookies, \r\nand input/output. Further, the host environment provides a means to attach scripting code to events such as \r\nchange of focus, page and image loading, unloading, error and abort, selection, form submission, and mouse \r\nactions. Scripting code appears within the HTML and the displayed page is a combination of user interface \r\nelements and fixed and computed text and images. The scripting code is reactive to user interaction and there \r\nis no need for a main program.\r\nA web server provides a different host environment for server-side computation including objects representing \r\nrequests, clients, and files; and mechanisms to lock and share data. By using browser-side and server-side \r\nscripting together, it is possible to distribute computation between the client and server while providing a \r\ncustomised user interface for a Web-based application.\r\nEach Web browser and server that supports ECMAScript supplies its own host environment, completing the \r\nECMAScript execution environment.\r\n4.2 Language Overview\r\nThe following is an informal overview of ECMAScript—not all parts of the language are described. This \r\noverview is not part of the standard proper.\r\nECMAScript is object-based: basic language and host facilities are provided by objects, and an ECMAScript \r\nprogram is a cluster of communicating objects. An ECMAScript object is a collection of properties each with \r\nzero or more attributes that determine how each property can be used—for example, when the Writable \r\nattribute for a property is set to false, any attempt by executed ECMAScript code to change the value of the \r\nproperty fails. Properties are containers that hold other objects, primitive values, or functions. A primitive \r\nvalue is a member of one of the following built-in types: Undefined, Null, Boolean, Number, and String; an \r\nobject is a member of the remaining built-in type Object; and a function is a callable object. A function that is \r\nassociated with an object via a property is a method.\r\nECMAScript defines a collection of built-in objects that round out the definition of ECMAScript entities. These \r\nbuilt-in objects include the global object, the Object object, the Function object, the Array object, the String\r\nobject, the Boolean object, the Number object, the Math object, the Date object, the RegExp object, the ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/6d027fd6-d62f-4759-b961-2e4d6db13d99.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c0e6eff3ba1e834067306bb4742f898452061ce8cce88ec192fe68232bf60f7c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 606
      },
      {
        "segments": [
          {
            "segment_id": "3d8a1d5f-84bf-4dec-9c74-fc346335cddf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 15,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 3\r\nJSON object, and the Error objects Error, EvalError, RangeError, ReferenceError, SyntaxError, \r\nTypeError and URIError.\r\nECMAScript also defines a set of built-in operators. ECMAScript operators include various unary operations, \r\nmultiplicative operators, additive operators, bitwise shift operators, relational operators, equality operators, \r\nbinary bitwise operators, binary logical operators, assignment operators, and the comma operator.\r\nECMAScript syntax intentionally resembles Java syntax. ECMAScript syntax is relaxed to enable it to serve as \r\nan easy-to-use scripting language. For example, a variable is not required to have its type declared nor are \r\ntypes associated with properties, and defined functions are not required to have their declarations appear \r\ntextually before calls to them.\r\n4.2.1 Objects\r\nECMAScript does not use classes such as those in C++, Smalltalk, or Java. Instead objects may be created in \r\nvarious ways including via a literal notation or via constructors which create objects and then execute code \r\nthat initialises all or part of them by assigning initial values to their properties. Each constructor is a function \r\nthat has a property named ―prototype‖ that is used to implement prototype-based inheritance and shared \r\nproperties. Objects are created by using constructors in new expressions; for example, new \r\nDate(2009,11) creates a new Date object. Invoking a constructor without using new has consequences that \r\ndepend on the constructor. For example, Date() produces a string representation of the current date and \r\ntime rather than an object.\r\nEvery object created by a constructor has an implicit reference (called the object‘s prototype) to the value of \r\nits constructor‘s ―prototype‖ property. Furthermore, a prototype may have a non-null implicit reference to its \r\nprototype, and so on; this is called the prototype chain. When a reference is made to a property in an object, \r\nthat reference is to the property of that name in the first object in the prototype chain that contains a property \r\nof that name. In other words, first the object mentioned directly is examined for such a property; if that object \r\ncontains the named property, that is the property to which the reference refers; if that object does not contain \r\nthe named property, the prototype for that object is examined next; and so on.\r\nFigure 1 — Object/Prototype Relationships\r\nIn a class-based object-oriented language, in general, state is carried by instances, methods are carried by \r\nclasses, and inheritance is only of structure and behaviour. In ECMAScript, the state and methods are carried \r\nby objects, and structure, behaviour, and state are all inherited.\r\ncf5\r\nq1\r\nq2\r\ncf4\r\nq1\r\nq2\r\ncf3\r\nq1\r\nq2\r\nCFp\r\nCFP1\r\nCF\r\nprototype\r\nP1\r\nP2\r\ncf1\r\nq1\r\nq2\r\ncf2\r\nq1\r\nq2\r\nimplicit prototype link\r\nexplicit prototype property",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/3d8a1d5f-84bf-4dec-9c74-fc346335cddf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c6ce88d99c1de9af815909345a62abf6e37a285894bad54f8f759114bf0edcf2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 434
      },
      {
        "segments": [
          {
            "segment_id": "f1335dc9-c7c3-47fc-81ba-8a450bfc2bcd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 16,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "4 © Ecma International 2011\r\nAll objects that do not directly contain a particular property that their prototype contains share that property \r\nand its value. Figure 1 illustrates this:\r\nCF is a constructor (and also an object). Five objects have been created by using new expressions: cf1, cf2, \r\ncf3, cf4, and cf5. Each of these objects contains properties named q1 and q2. The dashed lines represent the \r\nimplicit prototype relationship; so, for example, cf3‘s prototype is CFp. The constructor, CF, has two properties \r\nitself, named P1 and P2, which are not visible to CFp, cf1, cf2, cf3, cf4, or cf5. The property named CFP1 in CFp\r\nis shared by cf1, cf2, cf3, cf4, and cf5 (but not by CF), as are any properties found in CFp‘s implicit prototype \r\nchain that are not named q1, q2, or CFP1. Notice that there is no implicit prototype link between CF and CFp.\r\nUnlike class-based object languages, properties can be added to objects dynamically by assigning values to \r\nthem. That is, constructors are not required to name or assign values to all or any of the constructed object‘s \r\nproperties. In the above diagram, one could add a new shared property for cf1, cf2, cf3, cf4, and cf5 by \r\nassigning a new value to the property in CFp.\r\n4.2.2 The Strict Variant of ECMAScript\r\nThe ECMAScript Language recognises the possibility that some users of the language may wish to restrict \r\ntheir usage of some features available in the language. They might do so in the interests of security, to avoid \r\nwhat they consider to be error-prone features, to get enhanced error checking, or for other reasons of their \r\nchoosing. In support of this possibility, ECMAScript defines a strict variant of the language. The strict variant \r\nof the language excludes some specific syntactic and semantic features of the regular ECMAScript language \r\nand modifies the detailed semantics of some features. The strict variant also specifies additional error \r\nconditions that must be reported by throwing error exceptions in situations that are not specified as errors by \r\nthe non-strict form of the language.\r\nThe strict variant of ECMAScript is commonly referred to as the strict mode of the language. Strict mode \r\nselection and use of the strict mode syntax and semantics of ECMAScript is explicitly made at the level of \r\nindividual ECMAScript code units. Because strict mode is selected at the level of a syntactic code unit, strict \r\nmode only imposes restrictions that have local effect within such a code unit. Strict mode does not restrict or \r\nmodify any aspect of the ECMAScript semantics that must operate consistently across multiple code units. A \r\ncomplete ECMAScript program may be composed for both strict mode and non-strict mode ECMAScript code \r\nunits. In this case, strict mode only applies when actually executing code that is defined within a strict mode \r\ncode unit. \r\nIn order to conform to this specification, an ECMAScript implementation must implement both the full \r\nunrestricted ECMAScript language and the strict mode variant of the ECMAScript language as defined by this \r\nspecification. In addition, an implementation must support the combination of unrestricted and strict mode \r\ncode units into a single composite program.\r\n4.3 Terms and definitions\r\nFor the purposes of this document, the following terms and definitions apply.\r\n4.3.1\r\ntype\r\nset of data values as defined in Clause 8 of this specification\r\n4.3.2\r\nprimitive value\r\nmember of one of the types Undefined, Null, Boolean, Number, or String as defined in Clause 8\r\nNOTE A primitive value is a datum that is represented directly at the lowest level of the language implementation.\r\n4.3.3\r\nobject\r\nmember of the type Object\r\nNOTE An object is a collection of properties and has a single prototype object. The prototype may be the null value.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f1335dc9-c7c3-47fc-81ba-8a450bfc2bcd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b79e3d0d6db5ad6d0a909b17b03ae349edb2706ecdaa85b8ba9ad089c2b2cf11",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 619
      },
      {
        "segments": [
          {
            "segment_id": "f1335dc9-c7c3-47fc-81ba-8a450bfc2bcd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 16,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "4 © Ecma International 2011\r\nAll objects that do not directly contain a particular property that their prototype contains share that property \r\nand its value. Figure 1 illustrates this:\r\nCF is a constructor (and also an object). Five objects have been created by using new expressions: cf1, cf2, \r\ncf3, cf4, and cf5. Each of these objects contains properties named q1 and q2. The dashed lines represent the \r\nimplicit prototype relationship; so, for example, cf3‘s prototype is CFp. The constructor, CF, has two properties \r\nitself, named P1 and P2, which are not visible to CFp, cf1, cf2, cf3, cf4, or cf5. The property named CFP1 in CFp\r\nis shared by cf1, cf2, cf3, cf4, and cf5 (but not by CF), as are any properties found in CFp‘s implicit prototype \r\nchain that are not named q1, q2, or CFP1. Notice that there is no implicit prototype link between CF and CFp.\r\nUnlike class-based object languages, properties can be added to objects dynamically by assigning values to \r\nthem. That is, constructors are not required to name or assign values to all or any of the constructed object‘s \r\nproperties. In the above diagram, one could add a new shared property for cf1, cf2, cf3, cf4, and cf5 by \r\nassigning a new value to the property in CFp.\r\n4.2.2 The Strict Variant of ECMAScript\r\nThe ECMAScript Language recognises the possibility that some users of the language may wish to restrict \r\ntheir usage of some features available in the language. They might do so in the interests of security, to avoid \r\nwhat they consider to be error-prone features, to get enhanced error checking, or for other reasons of their \r\nchoosing. In support of this possibility, ECMAScript defines a strict variant of the language. The strict variant \r\nof the language excludes some specific syntactic and semantic features of the regular ECMAScript language \r\nand modifies the detailed semantics of some features. The strict variant also specifies additional error \r\nconditions that must be reported by throwing error exceptions in situations that are not specified as errors by \r\nthe non-strict form of the language.\r\nThe strict variant of ECMAScript is commonly referred to as the strict mode of the language. Strict mode \r\nselection and use of the strict mode syntax and semantics of ECMAScript is explicitly made at the level of \r\nindividual ECMAScript code units. Because strict mode is selected at the level of a syntactic code unit, strict \r\nmode only imposes restrictions that have local effect within such a code unit. Strict mode does not restrict or \r\nmodify any aspect of the ECMAScript semantics that must operate consistently across multiple code units. A \r\ncomplete ECMAScript program may be composed for both strict mode and non-strict mode ECMAScript code \r\nunits. In this case, strict mode only applies when actually executing code that is defined within a strict mode \r\ncode unit. \r\nIn order to conform to this specification, an ECMAScript implementation must implement both the full \r\nunrestricted ECMAScript language and the strict mode variant of the ECMAScript language as defined by this \r\nspecification. In addition, an implementation must support the combination of unrestricted and strict mode \r\ncode units into a single composite program.\r\n4.3 Terms and definitions\r\nFor the purposes of this document, the following terms and definitions apply.\r\n4.3.1\r\ntype\r\nset of data values as defined in Clause 8 of this specification\r\n4.3.2\r\nprimitive value\r\nmember of one of the types Undefined, Null, Boolean, Number, or String as defined in Clause 8\r\nNOTE A primitive value is a datum that is represented directly at the lowest level of the language implementation.\r\n4.3.3\r\nobject\r\nmember of the type Object\r\nNOTE An object is a collection of properties and has a single prototype object. The prototype may be the null value.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f1335dc9-c7c3-47fc-81ba-8a450bfc2bcd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b79e3d0d6db5ad6d0a909b17b03ae349edb2706ecdaa85b8ba9ad089c2b2cf11",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 619
      },
      {
        "segments": [
          {
            "segment_id": "b51038d3-91cb-4a9b-b84d-f7e62f8eaa33",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 17,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 5\r\n4.3.4\r\nconstructor\r\nfunction object that creates and initialises objects\r\nNOTE The value of a constructor‘s ―prototype‖ property is a prototype object that is used to implement inheritance \r\nand shared properties.\r\n4.3.5\r\nprototype\r\nobject that provides shared properties for other objects\r\nNOTE When a constructor creates an object, that object implicitly references the constructor‘s ―prototype‖ property \r\nfor the purpose of resolving property references. The constructor‘s ―prototype‖ property can be referenced by the \r\nprogram expression constructor.prototype, and properties added to an object‘s prototype are shared, through \r\ninheritance, by all objects sharing the prototype. Alternatively, a new object may be created with an explicitly specified \r\nprototype by using the Object.create built-in function.\r\n4.3.6\r\nnative object\r\nobject in an ECMAScript implementation whose semantics are fully defined by this specification rather than by \r\nthe host environment\r\nNOTE Standard native objects are defined in this specification. Some native objects are built-in; others may be \r\nconstructed during the course of execution of an ECMAScript program.\r\n4.3.7\r\nbuilt-in object\r\nobject supplied by an ECMAScript implementation, independent of the host environment, that is present at the \r\nstart of the execution of an ECMAScript program\r\nNOTE Standard built-in objects are defined in this specification, and an ECMAScript implementation may specify and \r\ndefine others. Every built-in object is a native object. A built-in constructor is a built-in object that is also a constructor.\r\n4.3.8\r\nhost object\r\nobject supplied by the host environment to complete the execution environment of ECMAScript\r\nNOTE Any object that is not native is a host object.\r\n4.3.9\r\nundefined value\r\nprimitive value used when a variable has not been assigned a value\r\n4.3.10\r\nUndefined type\r\ntype whose sole value is the undefined value\r\n4.3.11\r\nnull value\r\nprimitive value that represents the intentional absence of any object value\r\n4.3.12\r\nNull type\r\ntype whose sole value is the null value\r\n4.3.13\r\nBoolean value\r\nmember of the Boolean type\r\nNOTE There are only two Boolean values, true and false.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/b51038d3-91cb-4a9b-b84d-f7e62f8eaa33.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=84628bc4af2279bc52c64d66a52baaefdc01ccfbcc5228255bcfa5578077e885",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 323
      },
      {
        "segments": [
          {
            "segment_id": "579c0516-52d4-4cea-8bc7-453410b5ecfa",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 18,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "6 © Ecma International 2011\r\n4.3.14\r\nBoolean type\r\ntype consisting of the primitive values true and false\r\n4.3.15\r\nBoolean object\r\nmember of the Object type that is an instance of the standard built-in Boolean constructor\r\nNOTE A Boolean object is created by using the Boolean constructor in a new expression, supplying a Boolean \r\nvalue as an argument. The resulting object has an internal property whose value is the Boolean value. A Boolean object \r\ncan be coerced to a Boolean value.\r\n4.3.16\r\nString value\r\nprimitive value that is a finite ordered sequence of zero or more 16-bit unsigned integer\r\nNOTE A String value is a member of the String type. Each integer value in the sequence usually represents a single \r\n16-bit unit of UTF-16 text. However, ECMAScript does not place any restrictions or requirements on the values except that \r\nthey must be 16-bit unsigned integers.\r\n4.3.17\r\nString type\r\nset of all possible String values\r\n4.3.18\r\nString object\r\nmember of the Object type that is an instance of the standard built-in String constructor\r\nNOTE A String object is created by using the String constructor in a new expression, supplying a String value as \r\nan argument. The resulting object has an internal property whose value is the String value. A String object can be coerced \r\nto a String value by calling the String constructor as a function (15.5.1).\r\n4.3.19\r\nNumber value\r\nprimitive value corresponding to a double-precision 64-bit binary format IEEE 754 value\r\nNOTE A Number value is a member of the Number type and is a direct representation of a number.\r\n4.3.20\r\nNumber type\r\nset of all possible Number values including the special ―Not-a-Number‖ (NaN) values, positive infinity, and \r\nnegative infinity\r\n4.3.21\r\nNumber object\r\nmember of the Object type that is an instance of the standard built-in Number constructor\r\nNOTE A Number object is created by using the Number constructor in a new expression, supplying a Number value \r\nas an argument. The resulting object has an internal property whose value is the Number value. A Number object can be \r\ncoerced to a Number value by calling the Number constructor as a function (15.7.1).\r\n4.3.22\r\nInfinity\r\nnumber value that is the positive infinite Number value\r\n4.3.23\r\nNaN\r\nnumber value that is a IEEE 754 ―Not-a-Number‖ value",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/579c0516-52d4-4cea-8bc7-453410b5ecfa.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=391c8acb87bb985106d445cb182c9c3e740190ce720dcc8a820081560fb7fd87",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 373
      },
      {
        "segments": [
          {
            "segment_id": "b1ad89a7-8a92-4ff9-90ee-cb5082235443",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 19,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 7\r\n4.3.24\r\nfunction\r\nmember of the Object type that is an instance of the standard built-in Function constructor and that may be \r\ninvoked as a subroutine\r\nNOTE In addition to its named properties, a function contains executable code and state that determine how it \r\nbehaves when invoked. A function‘s code may or may not be written in ECMAScript.\r\n4.3.25\r\nbuilt-in function\r\nbuilt-in object that is a function\r\nNOTE Examples of built-in functions include parseInt and Math.exp. An implementation may provide \r\nimplementation-dependent built-in functions that are not described in this specification.\r\n4.3.26\r\nproperty\r\nassociation between a name and a value that is a part of an object\r\nNOTE Depending upon the form of the property the value may be represented either directly as a data value (a \r\nprimitive value, an object, or a function object) or indirectly by a pair of accessor functions.\r\n4.3.27\r\nmethod\r\nfunction that is the value of a property\r\nNOTE When a function is called as a method of an object, the object is passed to the function as its this value.\r\n4.3.28\r\nbuilt-in method\r\nmethod that is a built-in function\r\nNOTE Standard built-in methods are defined in this specification, and an ECMAScript implementation may specify \r\nand provide other additional built-in methods. \r\n4.3.29\r\nattribute\r\ninternal value that defines some characteristic of a property\r\n4.3.30\r\nown property\r\nproperty that is directly contained by its object\r\n4.3.31\r\ninherited property\r\nproperty of an object that is not an own property but is a property (either own or inherited) of the object‘s \r\nprototype\r\n5 Notational Conventions\r\n5.1 Syntactic and Lexical Grammars\r\n5.1.1 Context-Free Grammars\r\nA context-free grammar consists of a number of productions. Each production has an abstract symbol called a \r\nnonterminal as its left-hand side, and a sequence of zero or more nonterminal and terminal symbols as its \r\nright-hand side. For each grammar, the terminal symbols are drawn from a specified alphabet.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/b1ad89a7-8a92-4ff9-90ee-cb5082235443.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a462888a33502fa4f8a2c71878f9159b5b4a4cd28394cdd12898c3fac4cb5ea2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 316
      },
      {
        "segments": [
          {
            "segment_id": "de98b011-7eaf-414e-8f20-48e9b2ecbd08",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 20,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "8 © Ecma International 2011\r\nStarting from a sentence consisting of a single distinguished nonterminal, called the goal symbol, a given \r\ncontext-free grammar specifies a language, namely, the (perhaps infinite) set of possible sequences of \r\nterminal symbols that can result from repeatedly replacing any nonterminal in the sequence with a right-hand \r\nside of a production for which the nonterminal is the left-hand side.\r\n5.1.2 The Lexical and RegExp Grammars\r\nA lexical grammar for ECMAScript is given in clause 7. This grammar has as its terminal symbols characters \r\n(Unicode code units) that conform to the rules for SourceCharacter defined in Clause 6. It defines a set of \r\nproductions, starting from the goal symbol InputElementDiv or InputElementRegExp, that describe how \r\nsequences of such characters are translated into a sequence of input elements.\r\nInput elements other than white space and comments form the terminal symbols for the syntactic grammar for \r\nECMAScript and are called ECMAScript tokens. These tokens are the reserved words, identifiers, literals, and \r\npunctuators of the ECMAScript language. Moreover, line terminators, although not considered to be tokens, \r\nalso become part of the stream of input elements and guide the process of automatic semicolon insertion (7.9). \r\nSimple white space and single-line comments are discarded and do not appear in the stream of input \r\nelements for the syntactic grammar. A MultiLineComment (that is, a comment of the form ―/*…*/‖ regardless \r\nof whether it spans more than one line) is likewise simply discarded if it contains no line terminator; but if a \r\nMultiLineComment contains one or more line terminators, then it is replaced by a single line terminator, which \r\nbecomes part of the stream of input elements for the syntactic grammar.\r\nA RegExp grammar for ECMAScript is given in 15.10. This grammar also has as its terminal symbols the \r\ncharacters as defined by SourceCharacter. It defines a set of productions, starting from the goal symbol Pattern, \r\nthat describe how sequences of characters are translated into regular expression patterns.\r\nProductions of the lexical and RegExp grammars are distinguished by having two colons ―::‖ as separating \r\npunctuation. The lexical and RegExp grammars share some productions.\r\n5.1.3 The Numeric String Grammar\r\nAnother grammar is used for translating Strings into numeric values. This grammar is similar to the part of the \r\nlexical grammar having to do with numeric literals and has as its terminal symbols SourceCharacter. This \r\ngrammar appears in 9.3.1.\r\nProductions of the numeric string grammar are distinguished by having three colons ―:::‖ as punctuation.\r\n5.1.4 The Syntactic Grammar\r\nThe syntactic grammar for ECMAScript is given in clauses 11, 12, 13 and 14. This grammar has ECMAScript \r\ntokens defined by the lexical grammar as its terminal symbols (5.1.2). It defines a set of productions, starting \r\nfrom the goal symbol Program, that describe how sequences of tokens can form syntactically correct \r\nECMAScript programs.\r\nWhen a stream of characters is to be parsed as an ECMAScript program, it is first converted to a stream of \r\ninput elements by repeated application of the lexical grammar; this stream of input elements is then parsed by \r\na single application of the syntactic grammar. The program is syntactically in error if the tokens in the stream \r\nof input elements cannot be parsed as a single instance of the goal nonterminal Program, with no tokens left \r\nover.\r\nProductions of the syntactic grammar are distinguished by having just one colon ―:‖ as punctuation.\r\nThe syntactic grammar as presented in clauses 11, 12, 13 and 14 is actually not a complete account of which \r\ntoken sequences are accepted as correct ECMAScript programs. Certain additional token sequences are also \r\naccepted, namely, those that would be described by the grammar if only semicolons were added to the \r\nsequence in certain places (such as before line terminator characters). Furthermore, certain token sequences \r\nthat are described by the grammar are not considered acceptable if a terminator character appears in certain \r\n―awkward‖ places.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/de98b011-7eaf-414e-8f20-48e9b2ecbd08.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a3bd5afc2311d30d529e8880a92f9d34ced0c7e65450ecb42b33a818ab49ea6e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 642
      },
      {
        "segments": [
          {
            "segment_id": "de98b011-7eaf-414e-8f20-48e9b2ecbd08",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 20,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "8 © Ecma International 2011\r\nStarting from a sentence consisting of a single distinguished nonterminal, called the goal symbol, a given \r\ncontext-free grammar specifies a language, namely, the (perhaps infinite) set of possible sequences of \r\nterminal symbols that can result from repeatedly replacing any nonterminal in the sequence with a right-hand \r\nside of a production for which the nonterminal is the left-hand side.\r\n5.1.2 The Lexical and RegExp Grammars\r\nA lexical grammar for ECMAScript is given in clause 7. This grammar has as its terminal symbols characters \r\n(Unicode code units) that conform to the rules for SourceCharacter defined in Clause 6. It defines a set of \r\nproductions, starting from the goal symbol InputElementDiv or InputElementRegExp, that describe how \r\nsequences of such characters are translated into a sequence of input elements.\r\nInput elements other than white space and comments form the terminal symbols for the syntactic grammar for \r\nECMAScript and are called ECMAScript tokens. These tokens are the reserved words, identifiers, literals, and \r\npunctuators of the ECMAScript language. Moreover, line terminators, although not considered to be tokens, \r\nalso become part of the stream of input elements and guide the process of automatic semicolon insertion (7.9). \r\nSimple white space and single-line comments are discarded and do not appear in the stream of input \r\nelements for the syntactic grammar. A MultiLineComment (that is, a comment of the form ―/*…*/‖ regardless \r\nof whether it spans more than one line) is likewise simply discarded if it contains no line terminator; but if a \r\nMultiLineComment contains one or more line terminators, then it is replaced by a single line terminator, which \r\nbecomes part of the stream of input elements for the syntactic grammar.\r\nA RegExp grammar for ECMAScript is given in 15.10. This grammar also has as its terminal symbols the \r\ncharacters as defined by SourceCharacter. It defines a set of productions, starting from the goal symbol Pattern, \r\nthat describe how sequences of characters are translated into regular expression patterns.\r\nProductions of the lexical and RegExp grammars are distinguished by having two colons ―::‖ as separating \r\npunctuation. The lexical and RegExp grammars share some productions.\r\n5.1.3 The Numeric String Grammar\r\nAnother grammar is used for translating Strings into numeric values. This grammar is similar to the part of the \r\nlexical grammar having to do with numeric literals and has as its terminal symbols SourceCharacter. This \r\ngrammar appears in 9.3.1.\r\nProductions of the numeric string grammar are distinguished by having three colons ―:::‖ as punctuation.\r\n5.1.4 The Syntactic Grammar\r\nThe syntactic grammar for ECMAScript is given in clauses 11, 12, 13 and 14. This grammar has ECMAScript \r\ntokens defined by the lexical grammar as its terminal symbols (5.1.2). It defines a set of productions, starting \r\nfrom the goal symbol Program, that describe how sequences of tokens can form syntactically correct \r\nECMAScript programs.\r\nWhen a stream of characters is to be parsed as an ECMAScript program, it is first converted to a stream of \r\ninput elements by repeated application of the lexical grammar; this stream of input elements is then parsed by \r\na single application of the syntactic grammar. The program is syntactically in error if the tokens in the stream \r\nof input elements cannot be parsed as a single instance of the goal nonterminal Program, with no tokens left \r\nover.\r\nProductions of the syntactic grammar are distinguished by having just one colon ―:‖ as punctuation.\r\nThe syntactic grammar as presented in clauses 11, 12, 13 and 14 is actually not a complete account of which \r\ntoken sequences are accepted as correct ECMAScript programs. Certain additional token sequences are also \r\naccepted, namely, those that would be described by the grammar if only semicolons were added to the \r\nsequence in certain places (such as before line terminator characters). Furthermore, certain token sequences \r\nthat are described by the grammar are not considered acceptable if a terminator character appears in certain \r\n―awkward‖ places.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/de98b011-7eaf-414e-8f20-48e9b2ecbd08.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a3bd5afc2311d30d529e8880a92f9d34ced0c7e65450ecb42b33a818ab49ea6e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 642
      },
      {
        "segments": [
          {
            "segment_id": "150b13fb-074b-4d49-a623-fedd0dec865a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 21,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 9\r\n5.1.5 The JSON Grammar\r\nThe JSON grammar is used to translate a String describing a set of ECMAScript objects into actual objects. \r\nThe JSON grammar is given in 15.12.1.\r\nThe JSON grammar consists of the JSON lexical grammar and the JSON syntactic grammar. The JSON \r\nlexical grammar is used to translate character sequences into tokens and is similar to parts of the ECMAScript \r\nlexical grammar. The JSON syntactic grammar describes how sequences of tokens from the JSON lexical \r\ngrammar can form syntactically correct JSON object descriptions.\r\nProductions of the JSON lexical grammar are distinguished by having two colons ―::‖ as separating \r\npunctuation. The JSON lexical grammar uses some productions from the ECMAScript lexical grammar. The \r\nJSON syntactic grammar is similar to parts of the ECMAScript syntactic grammar. Productions of the JSON \r\nsyntactic grammar are distinguished by using one colon ―:‖ as separating punctuation.\r\n5.1.6 Grammar Notation\r\nTerminal symbols of the lexical, RegExp, and numeric string grammars, and some of the terminal symbols of \r\nthe other grammars, are shown in fixed width font, both in the productions of the grammars and \r\nthroughout this specification whenever the text directly refers to such a terminal symbol. These are to appear \r\nin a program exactly as written. All terminal symbol characters specified in this way are to be understood as \r\nthe appropriate Unicode character from the ASCII range, as opposed to any similar-looking characters from \r\nother Unicode ranges.\r\nNonterminal symbols are shown in italic type. The definition of a nonterminal is introduced by the name of the \r\nnonterminal being defined followed by one or more colons. (The number of colons indicates to which grammar \r\nthe production belongs.) One or more alternative right-hand sides for the nonterminal then follow on \r\nsucceeding lines. For example, the syntactic definition:\r\nWhileStatement :\r\nwhile ( Expression ) Statement\r\nstates that the nonterminal WhileStatement represents the token while, followed by a left parenthesis token, \r\nfollowed by an Expression, followed by a right parenthesis token, followed by a Statement. The occurrences of \r\nExpression and Statement are themselves nonterminals. As another example, the syntactic definition:\r\nArgumentList :\r\nAssignmentExpression\r\nArgumentList , AssignmentExpression\r\nstates that an ArgumentList may represent either a single AssignmentExpression or an ArgumentList, followed by \r\na comma, followed by an AssignmentExpression. This definition of ArgumentList is recursive, that is, it is defined \r\nin terms of itself. The result is that an ArgumentList may contain any positive number of arguments, separated \r\nby commas, where each argument expression is an AssignmentExpression. Such recursive definitions of \r\nnonterminals are common.\r\nThe subscripted suffix ―opt‖, which may appear after a terminal or nonterminal, indicates an optional symbol.\r\nThe alternative containing the optional symbol actually specifies two right-hand sides, one that omits the \r\noptional element and one that includes it. This means that:\r\nVariableDeclaration :\r\nIdentifier Initialiseropt\r\nis a convenient abbreviation for:\r\nVariableDeclaration :\r\nIdentifier\r\nIdentifier Initialiser",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/150b13fb-074b-4d49-a623-fedd0dec865a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8bdee309bf6aaf52ed0a8b524a233f541a2fe5013d2126eb267fb9065b40c7c6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 475
      },
      {
        "segments": [
          {
            "segment_id": "c74a484c-fa44-4023-b0df-96a3564f4cd6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 22,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "10 © Ecma International 2011\r\nand that:\r\nIterationStatement :\r\nfor ( ExpressionNoInopt ; Expressionopt ; Expressionopt ) Statement\r\nis a convenient abbreviation for:\r\nIterationStatement :\r\nfor ( ; Expressionopt ; Expressionopt ) Statement\r\nfor ( ExpressionNoIn ; Expressionopt ; Expressionopt ) Statement\r\nwhich in turn is an abbreviation for:\r\nIterationStatement :\r\nfor ( ; ; Expressionopt ) Statement\r\nfor ( ; Expression ; Expressionopt ) Statement\r\nfor ( ExpressionNoIn ; ; Expressionopt ) Statement\r\nfor ( ExpressionNoIn ; Expression ; Expressionopt ) Statement\r\nwhich in turn is an abbreviation for:\r\nIterationStatement :\r\nfor ( ; ; ) Statement\r\nfor ( ; ; Expression ) Statement\r\nfor ( ; Expression ; ) Statement\r\nfor ( ; Expression ; Expression ) Statement\r\nfor ( ExpressionNoIn ; ; ) Statement\r\nfor ( ExpressionNoIn ; ; Expression ) Statement\r\nfor ( ExpressionNoIn ; Expression ; ) Statement\r\nfor ( ExpressionNoIn ; Expression ; Expression ) Statement\r\nso the nonterminal IterationStatement actually has eight alternative right-hand sides.\r\nWhen the words ―one of‖ follow the colon(s) in a grammar definition, they signify that each of the terminal \r\nsymbols on the following line or lines is an alternative definition. For example, the lexical grammar for \r\nECMAScript contains the production:\r\nNonZeroDigit :: one of\r\n1 2 3 4 5 6 7 8 9\r\nwhich is merely a convenient abbreviation for:\r\nNonZeroDigit ::\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\nIf the phrase ―[empty]‖ appears as the right-hand side of a production, it indicates that the production's right\u0002hand side contains no terminals or nonterminals.\r\nIf the phrase ―[lookahead  set]‖ appears in the right-hand side of a production, it indicates that the production \r\nmay not be used if the immediately following input token is a member of the given set. The set can be written \r\nas a list of terminals enclosed in curly braces. For convenience, the set can also be written as a nonterminal, ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c74a484c-fa44-4023-b0df-96a3564f4cd6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a1f168010902e181da91258e7dd2d8ab3fd36eaff404eb4b5da7df3e0541b7f1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 318
      },
      {
        "segments": [
          {
            "segment_id": "523e153b-bb27-46f8-987e-b73032240ad0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 23,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 11\r\nin which case it represents the set of all terminals to which that nonterminal could expand. For example, given \r\nthe definitions\r\nDecimalDigit :: one of\r\n0 1 2 3 4 5 6 7 8 9\r\nDecimalDigits ::\r\nDecimalDigit\r\nDecimalDigits DecimalDigit\r\nthe definition\r\nLookaheadExample ::\r\nn [lookahead  {1, 3, 5, 7, 9}] DecimalDigits\r\nDecimalDigit [lookahead  DecimalDigit ]\r\nmatches either the letter n followed by one or more decimal digits the first of which is even, or a decimal digit \r\nnot followed by another decimal digit.\r\nIf the phrase ―[no LineTerminator here]‖ appears in the right-hand side of a production of the syntactic grammar, it \r\nindicates that the production is a restricted production: it may not be used if a LineTerminator occurs in the \r\ninput stream at the indicated position. For example, the production:\r\nThrowStatement :\r\nthrow [no LineTerminator here] Expression ;\r\nindicates that the production may not be used if a LineTerminator occurs in the program between the throw\r\ntoken and the Expression.\r\nUnless the presence of a LineTerminator is forbidden by a restricted production, any number of occurrences of \r\nLineTerminator may appear between any two consecutive tokens in the stream of input elements without \r\naffecting the syntactic acceptability of the program.\r\nWhen an alternative in a production of the lexical grammar or the numeric string grammar appears to be a \r\nmulti-character token, it represents the sequence of characters that would make up such a token.\r\nThe right-hand side of a production may specify that certain expansions are not permitted by using the phrase \r\n―but not‖ and then indicating the expansions to be excluded. For example, the production:\r\nIdentifier ::\r\nIdentifierName but not ReservedWord\r\nmeans that the nonterminal Identifier may be replaced by any sequence of characters that could replace \r\nIdentifierName provided that the same sequence of characters could not replace ReservedWord.\r\nFinally, a few nonterminal symbols are described by a descriptive phrase in sans-serif type in cases where it \r\nwould be impractical to list all the alternatives:\r\nSourceCharacter ::\r\nany Unicode code unit\r\n5.2 Algorithm Conventions\r\nThe specification often uses a numbered list to specify steps in an algorithm. These algorithms are used to \r\nprecisely specify the required semantics of ECMAScript language constructs. The algorithms are not intended \r\nto imply the use of any specific implementation technique. In practice, there may be more efficient algorithms \r\navailable to implement a given feature.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/523e153b-bb27-46f8-987e-b73032240ad0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=77854b1776b2c0ab03825619baa7d5791b6d095d314f4a4ec1c2b51e57214d3e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 398
      },
      {
        "segments": [
          {
            "segment_id": "526d8b24-56d1-4284-8d14-77697843e4f9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 24,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "12 © Ecma International 2011\r\nIn order to facilitate their use in multiple parts of this specification, some algorithms, called abstract operations, \r\nare named and written in parameterised functional form so that they may be referenced by name from within \r\nother algorithms.\r\nWhen an algorithm is to produce a value as a result, the directive ―return x‖ is used to indicate that the result of \r\nthe algorithm is the value of x and that the algorithm should terminate. The notation Result(n) is used as \r\nshorthand for ―the result of step n‖. \r\nFor clarity of expression, algorithm steps may be subdivided into sequential substeps. Substeps are indented \r\nand may themselves be further divided into indented substeps. Outline numbering conventions are used to \r\nidentify substeps with the first level of substeps labelled with lower case alphabetic characters and the second \r\nlevel of substeps labelled with lower case roman numerals. If more than three levels are required these rules \r\nrepeat with the fourth level using numeric labels. For example:\r\n1. Top-level step\r\na. Substep.\r\nb. Substep \r\ni. Subsubstep.\r\nii. Subsubstep.\r\n1. Subsubsubstep\r\na Subsubsubsubstep\r\nA step or substep may be written as an ―if‖ predicate that conditions its substeps. In this case, the substeps \r\nare only applied if the predicate is true. If a step or substep begins with the word ―else‖, it is a predicate that is \r\nthe negation of the preceding ―if‖ predicate step at the same level.\r\nA step may specify the iterative application of its substeps.\r\nA step may assert an invariant condition of its algorithm. Such assertions are used to make explicit \r\nalgorithmic invariants that would otherwise be implicit. Such assertions add no additional semantic \r\nrequirements and hence need not be checked by an implementation. They are used simply to clarify \r\nalgorithms.\r\nMathematical operations such as addition, subtraction, negation, multiplication, division, and the mathematical \r\nfunctions defined later in this clause should always be understood as computing exact mathematical results \r\non mathematical real numbers, which do not include infinities and do not include a negative zero that is \r\ndistinguished from positive zero. Algorithms in this standard that model floating-point arithmetic include explicit \r\nsteps, where necessary, to handle infinities and signed zero and to perform rounding. If a mathematical \r\noperation or function is applied to a floating-point number, it should be understood as being applied to the \r\nexact mathematical value represented by that floating-point number; such a floating-point number must be \r\nfinite, and if it is +0 or 0 then the corresponding mathematical value is simply 0.\r\nThe mathematical function abs(x) yields the absolute value of x, which is x if x is negative (less than zero) and \r\notherwise is x itself.\r\nThe mathematical function sign(x) yields 1 if x is positive and 1 if x is negative. The sign function is not used in \r\nthis standard for cases when x is zero.\r\nThe notation ―x modulo y‖ (y must be finite and nonzero) computes a value k of the same sign as y (or zero) \r\nsuch that abs(k) < abs(y) and xk = q  y for some integer q.\r\nThe mathematical function floor(x) yields the largest integer (closest to positive infinity) that is not larger than x.\r\nNOTE floor(x) = x(x modulo 1).\r\nIf an algorithm is defined to ―throw an exception‖, execution of the algorithm is terminated and no result is \r\nreturned. The calling algorithms are also terminated, until an algorithm step is reached that explicitly deals \r\nwith the exception, using terminology such as ―If an exception was thrown…‖. Once such an algorithm step \r\nhas been encountered the exception is no longer considered to have occurred.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/526d8b24-56d1-4284-8d14-77697843e4f9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=95a03a91a1c41cff3c5aed790e3190b95b9b0859951af79c79818c0cd40082c0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 599
      },
      {
        "segments": [
          {
            "segment_id": "526d8b24-56d1-4284-8d14-77697843e4f9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 24,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "12 © Ecma International 2011\r\nIn order to facilitate their use in multiple parts of this specification, some algorithms, called abstract operations, \r\nare named and written in parameterised functional form so that they may be referenced by name from within \r\nother algorithms.\r\nWhen an algorithm is to produce a value as a result, the directive ―return x‖ is used to indicate that the result of \r\nthe algorithm is the value of x and that the algorithm should terminate. The notation Result(n) is used as \r\nshorthand for ―the result of step n‖. \r\nFor clarity of expression, algorithm steps may be subdivided into sequential substeps. Substeps are indented \r\nand may themselves be further divided into indented substeps. Outline numbering conventions are used to \r\nidentify substeps with the first level of substeps labelled with lower case alphabetic characters and the second \r\nlevel of substeps labelled with lower case roman numerals. If more than three levels are required these rules \r\nrepeat with the fourth level using numeric labels. For example:\r\n1. Top-level step\r\na. Substep.\r\nb. Substep \r\ni. Subsubstep.\r\nii. Subsubstep.\r\n1. Subsubsubstep\r\na Subsubsubsubstep\r\nA step or substep may be written as an ―if‖ predicate that conditions its substeps. In this case, the substeps \r\nare only applied if the predicate is true. If a step or substep begins with the word ―else‖, it is a predicate that is \r\nthe negation of the preceding ―if‖ predicate step at the same level.\r\nA step may specify the iterative application of its substeps.\r\nA step may assert an invariant condition of its algorithm. Such assertions are used to make explicit \r\nalgorithmic invariants that would otherwise be implicit. Such assertions add no additional semantic \r\nrequirements and hence need not be checked by an implementation. They are used simply to clarify \r\nalgorithms.\r\nMathematical operations such as addition, subtraction, negation, multiplication, division, and the mathematical \r\nfunctions defined later in this clause should always be understood as computing exact mathematical results \r\non mathematical real numbers, which do not include infinities and do not include a negative zero that is \r\ndistinguished from positive zero. Algorithms in this standard that model floating-point arithmetic include explicit \r\nsteps, where necessary, to handle infinities and signed zero and to perform rounding. If a mathematical \r\noperation or function is applied to a floating-point number, it should be understood as being applied to the \r\nexact mathematical value represented by that floating-point number; such a floating-point number must be \r\nfinite, and if it is +0 or 0 then the corresponding mathematical value is simply 0.\r\nThe mathematical function abs(x) yields the absolute value of x, which is x if x is negative (less than zero) and \r\notherwise is x itself.\r\nThe mathematical function sign(x) yields 1 if x is positive and 1 if x is negative. The sign function is not used in \r\nthis standard for cases when x is zero.\r\nThe notation ―x modulo y‖ (y must be finite and nonzero) computes a value k of the same sign as y (or zero) \r\nsuch that abs(k) < abs(y) and xk = q  y for some integer q.\r\nThe mathematical function floor(x) yields the largest integer (closest to positive infinity) that is not larger than x.\r\nNOTE floor(x) = x(x modulo 1).\r\nIf an algorithm is defined to ―throw an exception‖, execution of the algorithm is terminated and no result is \r\nreturned. The calling algorithms are also terminated, until an algorithm step is reached that explicitly deals \r\nwith the exception, using terminology such as ―If an exception was thrown…‖. Once such an algorithm step \r\nhas been encountered the exception is no longer considered to have occurred.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/526d8b24-56d1-4284-8d14-77697843e4f9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=95a03a91a1c41cff3c5aed790e3190b95b9b0859951af79c79818c0cd40082c0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 599
      },
      {
        "segments": [
          {
            "segment_id": "d2713cee-9cee-4cbb-b59b-3ce25f0ba8d5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 25,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 13\r\n6 Source Text\r\nECMAScript source text is represented as a sequence of characters in the Unicode character encoding, \r\nversion 3.0 or later. The text is expected to have been normalised to Unicode Normalization Form C \r\n(canonical composition), as described in Unicode Technical Report #15. Conforming ECMAScript \r\nimplementations are not required to perform any normalisation of text, or behave as though they were \r\nperforming normalisation of text, themselves. ECMAScript source text is assumed to be a sequence of 16-bit \r\ncode units for the purposes of this specification. Such a source text may include sequences of 16-bit code \r\nunits that are not valid UTF-16 character encodings. If an actual source text is encoded in a form other than \r\n16-bit code units it must be processed as if it was first converted to UTF-16.\r\nSyntax\r\nSourceCharacter ::\r\nany Unicode code unit\r\nThroughout the rest of this document, the phrase ―code unit‖ and the word ―character‖ will be used to refer to a \r\n16-bit unsigned value used to represent a single 16-bit unit of text. The phrase ―Unicode character‖ will be \r\nused to refer to the abstract linguistic or typographical unit represented by a single Unicode scalar value \r\n(which may be longer than 16 bits and thus may be represented by more than one code unit). The phrase \r\n―code point‖ refers to such a Unicode scalar value. ―Unicode character‖ only refers to entities represented by \r\nsingle Unicode scalar values: the components of a combining character sequence are still individual ―Unicode \r\ncharacters,‖ even though a user might think of the whole sequence as a single character.\r\nIn string literals, regular expression literals, and identifiers, any character (code unit) may also be expressed \r\nas a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits. Within a \r\ncomment, such an escape sequence is effectively ignored as part of the comment. Within a string literal or \r\nregular expression literal, the Unicode escape sequence contributes one character to the value of the literal. \r\nWithin an identifier, the escape sequence contributes one character to the identifier.\r\nNOTE Although this document sometimes refers to a ―transformation‖ between a ―character‖ within a ―string‖ and the \r\n16-bit unsigned integer that is the code unit of that character, there is actually no transformation because a ―character‖ \r\nwithin a ―string‖ is actually represented using that 16-bit unsigned value.\r\nECMAScript differs from the Java programming language in the behaviour of Unicode escape sequences. In a \r\nJava program, if the Unicode escape sequence \\u000A, for example, occurs within a single-line comment, it \r\nis interpreted as a line terminator (Unicode character 000A is line feed) and therefore the next character is not \r\npart of the comment. Similarly, if the Unicode escape sequence \\u000A occurs within a string literal in a Java \r\nprogram, it is likewise interpreted as a line terminator, which is not allowed within a string literal—one must \r\nwrite \\n instead of \\u000A to cause a line feed to be part of the string value of a string literal. In an \r\nECMAScript program, a Unicode escape sequence occurring within a comment is never interpreted and \r\ntherefore cannot contribute to termination of the comment. Similarly, a Unicode escape sequence occurring \r\nwithin a string literal in an ECMAScript program always contributes a character to the String value of the literal \r\nand is never interpreted as a line terminator or as a quote mark that might terminate the string literal.\r\n7 Lexical Conventions\r\nThe source text of an ECMAScript program is first converted into a sequence of input elements, which are \r\ntokens, line terminators, comments, or white space. The source text is scanned from left to right, repeatedly \r\ntaking the longest possible sequence of characters as the next input element.\r\nThere are two goal symbols for the lexical grammar. The InputElementDiv symbol is used in those syntactic \r\ngrammar contexts where a leading division (/) or division-assignment (/=) operator is permitted. The \r\nInputElementRegExp symbol is used in other syntactic grammar contexts.\r\nNOTE There are no syntactic grammar contexts where both a leading division or division-assignment, and a leading \r\nRegularExpressionLiteral are permitted. This is not affected by semicolon insertion (see 7.9); in examples such as the \r\nfollowing:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/d2713cee-9cee-4cbb-b59b-3ce25f0ba8d5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=73b8ac9ef7e8d53ea0f4cfe0494b0bbe17a963b800f8d22427babcf9925506b4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 694
      },
      {
        "segments": [
          {
            "segment_id": "d2713cee-9cee-4cbb-b59b-3ce25f0ba8d5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 25,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 13\r\n6 Source Text\r\nECMAScript source text is represented as a sequence of characters in the Unicode character encoding, \r\nversion 3.0 or later. The text is expected to have been normalised to Unicode Normalization Form C \r\n(canonical composition), as described in Unicode Technical Report #15. Conforming ECMAScript \r\nimplementations are not required to perform any normalisation of text, or behave as though they were \r\nperforming normalisation of text, themselves. ECMAScript source text is assumed to be a sequence of 16-bit \r\ncode units for the purposes of this specification. Such a source text may include sequences of 16-bit code \r\nunits that are not valid UTF-16 character encodings. If an actual source text is encoded in a form other than \r\n16-bit code units it must be processed as if it was first converted to UTF-16.\r\nSyntax\r\nSourceCharacter ::\r\nany Unicode code unit\r\nThroughout the rest of this document, the phrase ―code unit‖ and the word ―character‖ will be used to refer to a \r\n16-bit unsigned value used to represent a single 16-bit unit of text. The phrase ―Unicode character‖ will be \r\nused to refer to the abstract linguistic or typographical unit represented by a single Unicode scalar value \r\n(which may be longer than 16 bits and thus may be represented by more than one code unit). The phrase \r\n―code point‖ refers to such a Unicode scalar value. ―Unicode character‖ only refers to entities represented by \r\nsingle Unicode scalar values: the components of a combining character sequence are still individual ―Unicode \r\ncharacters,‖ even though a user might think of the whole sequence as a single character.\r\nIn string literals, regular expression literals, and identifiers, any character (code unit) may also be expressed \r\nas a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits. Within a \r\ncomment, such an escape sequence is effectively ignored as part of the comment. Within a string literal or \r\nregular expression literal, the Unicode escape sequence contributes one character to the value of the literal. \r\nWithin an identifier, the escape sequence contributes one character to the identifier.\r\nNOTE Although this document sometimes refers to a ―transformation‖ between a ―character‖ within a ―string‖ and the \r\n16-bit unsigned integer that is the code unit of that character, there is actually no transformation because a ―character‖ \r\nwithin a ―string‖ is actually represented using that 16-bit unsigned value.\r\nECMAScript differs from the Java programming language in the behaviour of Unicode escape sequences. In a \r\nJava program, if the Unicode escape sequence \\u000A, for example, occurs within a single-line comment, it \r\nis interpreted as a line terminator (Unicode character 000A is line feed) and therefore the next character is not \r\npart of the comment. Similarly, if the Unicode escape sequence \\u000A occurs within a string literal in a Java \r\nprogram, it is likewise interpreted as a line terminator, which is not allowed within a string literal—one must \r\nwrite \\n instead of \\u000A to cause a line feed to be part of the string value of a string literal. In an \r\nECMAScript program, a Unicode escape sequence occurring within a comment is never interpreted and \r\ntherefore cannot contribute to termination of the comment. Similarly, a Unicode escape sequence occurring \r\nwithin a string literal in an ECMAScript program always contributes a character to the String value of the literal \r\nand is never interpreted as a line terminator or as a quote mark that might terminate the string literal.\r\n7 Lexical Conventions\r\nThe source text of an ECMAScript program is first converted into a sequence of input elements, which are \r\ntokens, line terminators, comments, or white space. The source text is scanned from left to right, repeatedly \r\ntaking the longest possible sequence of characters as the next input element.\r\nThere are two goal symbols for the lexical grammar. The InputElementDiv symbol is used in those syntactic \r\ngrammar contexts where a leading division (/) or division-assignment (/=) operator is permitted. The \r\nInputElementRegExp symbol is used in other syntactic grammar contexts.\r\nNOTE There are no syntactic grammar contexts where both a leading division or division-assignment, and a leading \r\nRegularExpressionLiteral are permitted. This is not affected by semicolon insertion (see 7.9); in examples such as the \r\nfollowing:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/d2713cee-9cee-4cbb-b59b-3ce25f0ba8d5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=73b8ac9ef7e8d53ea0f4cfe0494b0bbe17a963b800f8d22427babcf9925506b4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 694
      },
      {
        "segments": [
          {
            "segment_id": "4fea2cde-6f43-45be-bd16-473891c8990a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 26,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "14 © Ecma International 2011\r\na = b\r\n/hi/g.exec(c).map(d);\r\nwhere the first non-whitespace, non-comment character after a LineTerminator is slash (/) and the syntactic context allows \r\ndivision or division-assignment, no semicolon is inserted at the LineTerminator. That is, the above example is interpreted in \r\nthe same way as:\r\na = b / hi / g.exec(c).map(d);\r\nSyntax\r\nInputElementDiv ::\r\nWhiteSpace\r\nLineTerminator\r\nComment\r\nToken\r\nDivPunctuator\r\nInputElementRegExp ::\r\nWhiteSpace\r\nLineTerminator\r\nComment\r\nToken\r\nRegularExpressionLiteral\r\n7.1 Unicode Format-Control Characters\r\nThe Unicode format-control characters (i.e., the characters in category ―Cf‖ in the Unicode Character \r\nDatabase such as LEFT-TO-RIGHT MARK or RIGHT-TO-LEFT MARK) are control codes used to control the formatting \r\nof a range of text in the absence of higher-level protocols for this (such as mark-up languages).\r\nIt is useful to allow format-control characters in source text to facilitate editing and display. All format control \r\ncharacters may be used within comments, and within string literals and regular expression literals.\r\n<ZWNJ> and <ZWJ> are format-control characters that are used to make necessary distinctions when forming \r\nwords or phrases in certain languages. In ECMAScript source text, <ZWNJ> and <ZWJ> may also be used in \r\nan identifier after the first character. \r\n<BOM> is a format-control character used primarily at the start of a text to mark it as Unicode and to allow \r\ndetection of the text's encoding and byte order. <BOM> characters intended for this purpose can sometimes \r\nalso appear after the start of a text, for example as a result of concatenating files. <BOM> characters are \r\ntreated as white space characters (see 7.2). \r\nThe special treatment of certain format-control characters outside of comments, string literals, and regular \r\nexpression literals is summarised in Table 1.\r\nTable 1 — Format-Control Character Usage\r\nCode Unit Value Name Formal Name Usage\r\n\\u200C Zero width non-joiner <ZWNJ> IdentifierPart\r\n\\u200D Zero width joiner <ZWJ> IdentifierPart\r\n\\uFEFF Byte Order Mark <BOM> Whitespace\r\n7.2 White Space\r\nWhite space characters are used to improve source text readability and to separate tokens (indivisible lexical \r\nunits) from each other, but are otherwise insignificant. White space characters may occur between any two \r\ntokens and at the start or end of input. White space characters may also occur within a StringLiteral or a ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/4fea2cde-6f43-45be-bd16-473891c8990a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=64e5c82f9df0c8866e458bf497a7509e5b92c54fa7377c0a666c6ce8ddf6ea4a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 362
      },
      {
        "segments": [
          {
            "segment_id": "02323fb1-1cb4-4af5-8ba4-0ffb44477e90",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 27,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 15\r\nRegularExpressionLiteral (where they are considered significant characters forming part of the literal value) or \r\nwithin a Comment, but cannot appear within any other kind of token.\r\nThe ECMAScript white space characters are listed in Table 2.\r\nTable 2 — Whitespace Characters\r\nCode Unit Value Name Formal Name\r\n\\u0009 Tab <TAB>\r\n\\u000B Vertical Tab <VT>\r\n\\u000C Form Feed <FF>\r\n\\u0020 Space <SP>\r\n\\u00A0 No-break space <NBSP>\r\n\\uFEFF\r\nOther category ―Zs‖\r\nByte Order Mark\r\nAny other Unicode \r\n―space separator‖\r\n<BOM>\r\n<USP>\r\nECMAScript implementations must recognise all of the white space characters defined in Unicode 3.0. Later \r\neditions of the Unicode Standard may define other white space characters. ECMAScript implementations may \r\nrecognise white space characters from later editions of the Unicode Standard.\r\nSyntax\r\nWhiteSpace ::\r\n<TAB>\r\n<VT>\r\n<FF>\r\n<SP>\r\n<NBSP>\r\n<BOM>\r\n<USP>\r\n7.3 Line Terminators\r\nLike white space characters, line terminator characters are used to improve source text readability and to \r\nseparate tokens (indivisible lexical units) from each other. However, unlike white space characters, line \r\nterminators have some influence over the behaviour of the syntactic grammar. In general, line terminators \r\nmay occur between any two tokens, but there are a few places where they are forbidden by the syntactic \r\ngrammar. Line terminators also affect the process of automatic semicolon insertion (7.9). A line terminator \r\ncannot occur within any token except a StringLiteral. Line terminators may only occur within a StringLiteral\r\ntoken as part of a LineContinuation. \r\nA line terminator can occur within a MultiLineComment (7.4) but cannot occur within a SingleLineComment. \r\nLine terminators are included in the set of white space characters that are matched by the \\s class in regular \r\nexpressions.\r\nThe ECMAScript line terminator characters are listed in Table 3.\r\nTable 3 — Line Terminator Characters\r\nCode Unit Value Name Formal Name\r\n\\u000A Line Feed <LF>\r\n\\u000D Carriage Return <CR>\r\n\\u2028 Line separator <LS>\r\n\\u2029 Paragraph separator <PS>",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/02323fb1-1cb4-4af5-8ba4-0ffb44477e90.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3c6242461c97d03a6de1715b3a0b79e647849c3cff0fda01c041fc298760929a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 312
      },
      {
        "segments": [
          {
            "segment_id": "26d1e0be-dc4e-429f-a433-7a8f2dd1e03e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 28,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "16 © Ecma International 2011\r\nOnly the characters in Table 3 are treated as line terminators. Other new line or line breaking characters are \r\ntreated as white space but not as line terminators. The character sequence <CR><LF> is commonly used as \r\na line terminator. It should be considered a single character for the purpose of reporting line numbers.\r\nSyntax\r\nLineTerminator ::\r\n<LF>\r\n<CR>\r\n<LS>\r\n<PS>\r\nLineTerminatorSequence ::\r\n<LF>\r\n<CR> [lookahead  <LF> ]\r\n<LS>\r\n<PS>\r\n<CR> <LF>\r\n7.4 Comments\r\nComments can be either single or multi-line. Multi-line comments cannot nest.\r\nBecause a single-line comment can contain any character except a LineTerminator character, and because of \r\nthe general rule that a token is always as long as possible, a single-line comment always consists of all \r\ncharacters from the // marker to the end of the line. However, the LineTerminator at the end of the line is not \r\nconsidered to be part of the single-line comment; it is recognised separately by the lexical grammar and \r\nbecomes part of the stream of input elements for the syntactic grammar. This point is very important, because \r\nit implies that the presence or absence of single-line comments does not affect the process of automatic \r\nsemicolon insertion (see 7.9).\r\nComments behave like white space and are discarded except that, if a MultiLineComment contains a line \r\nterminator character, then the entire comment is considered to be a LineTerminator for purposes of parsing by \r\nthe syntactic grammar.\r\nSyntax\r\nComment ::\r\nMultiLineComment\r\nSingleLineComment\r\nMultiLineComment ::\r\n/* MultiLineCommentCharsopt */\r\nMultiLineCommentChars ::\r\nMultiLineNotAsteriskChar MultiLineCommentCharsopt\r\n* PostAsteriskCommentCharsopt\r\nPostAsteriskCommentChars ::\r\nMultiLineNotForwardSlashOrAsteriskChar MultiLineCommentCharsopt\r\n* PostAsteriskCommentCharsopt\r\nMultiLineNotAsteriskChar ::\r\nSourceCharacter but not *\r\nMultiLineNotForwardSlashOrAsteriskChar ::\r\nSourceCharacter but not one of / or *",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/26d1e0be-dc4e-429f-a433-7a8f2dd1e03e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8afce82335dc599e14df24e07f83050d9e64c09520b4b6cb903144f71dfa4310",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 276
      },
      {
        "segments": [
          {
            "segment_id": "36f59725-8027-4922-9107-7cd7e4424a10",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 29,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 17\r\nSingleLineComment ::\r\n// SingleLineCommentCharsopt\r\nSingleLineCommentChars ::\r\nSingleLineCommentChar SingleLineCommentCharsopt\r\nSingleLineCommentChar ::\r\nSourceCharacter but not LineTerminator\r\n7.5 Tokens\r\nSyntax\r\nToken ::\r\nIdentifierName\r\nPunctuator\r\nNumericLiteral\r\nStringLiteral\r\nNOTE The DivPunctuator and RegularExpressionLiteral productions define tokens, but are not included in the Token\r\nproduction.\r\n7.6 Identifier Names and Identifiers\r\nIdentifier Names are tokens that are interpreted according to the grammar given in the ―Identifiers‖ section of \r\nchapter 5 of the Unicode standard, with some small modifications. An Identifier is an IdentifierName that is not \r\na ReservedWord (see 7.6.1). The Unicode identifier grammar is based on both normative and informative \r\ncharacter categories specified by the Unicode Standard. The characters in the specified categories in version \r\n3.0 of the Unicode standard must be treated as in those categories by all conforming ECMAScript \r\nimplementations.\r\nThis standard specifies specific character additions: The dollar sign ($) and the underscore (_) are permitted \r\nanywhere in an IdentifierName.\r\nUnicode escape sequences are also permitted in an IdentifierName, where they contribute a single character to \r\nthe IdentifierName, as computed by the CV of the UnicodeEscapeSequence (see 7.8.4). The \\ preceding the \r\nUnicodeEscapeSequence does not contribute a character to the IdentifierName. A UnicodeEscapeSequence cannot \r\nbe used to put a character into an IdentifierName that would otherwise be illegal. In other words, if a \r\n\\ UnicodeEscapeSequence sequence were replaced by its UnicodeEscapeSequence's CV, the result must still be \r\na valid IdentifierName that has the exact same sequence of characters as the original IdentifierName. All \r\ninterpretations of identifiers within this specification are based upon their actual characters regardless of \r\nwhether or not an escape sequence was used to contribute any particular characters.\r\nTwo IdentifierName that are canonically equivalent according to the Unicode standard are not equal unless \r\nthey are represented by the exact same sequence of code units (in other words, conforming ECMAScript \r\nimplementations are only required to do bitwise comparison on IdentifierName values). The intent is that the \r\nincoming source text has been converted to normalised form C before it reaches the compiler.\r\nECMAScript implementations may recognise identifier characters defined in later editions of the Unicode \r\nStandard. If portability is a concern, programmers should only employ identifier characters defined in Unicode \r\n3.0.\r\nSyntax\r\nIdentifier ::\r\nIdentifierName but not ReservedWord",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/36f59725-8027-4922-9107-7cd7e4424a10.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=db9fd9afbbf9bfbdcff5e054e526f1c64e99ca2a03243fc94ebca0e072b870d2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 369
      },
      {
        "segments": [
          {
            "segment_id": "46f901aa-bea6-4c87-a16e-0c741b489837",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 30,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "18 © Ecma International 2011\r\nIdentifierName ::\r\nIdentifierStart\r\nIdentifierName IdentifierPart\r\nIdentifierStart ::\r\nUnicodeLetter\r\n$\r\n_\r\n\\ UnicodeEscapeSequence\r\nIdentifierPart ::\r\nIdentifierStart\r\nUnicodeCombiningMark\r\nUnicodeDigit\r\nUnicodeConnectorPunctuation\r\n<ZWNJ>\r\n<ZWJ>\r\nUnicodeLetter ::\r\nany character in the Unicode categories ―Uppercase letter (Lu)‖, ―Lowercase letter (Ll)‖, ―Titlecase letter \r\n(Lt)‖, ―Modifier letter (Lm)‖, ―Other letter (Lo)‖, or ―Letter number (Nl)‖.\r\nUnicodeCombiningMark ::\r\nany character in the Unicode categories ―Non-spacing mark (Mn)‖ or ―Combining spacing mark (Mc)‖\r\nUnicodeDigit ::\r\nany character in the Unicode category ―Decimal number (Nd)‖\r\nUnicodeConnectorPunctuation ::\r\nany character in the Unicode category ―Connector punctuation (Pc)‖\r\nThe definitions of the nonterminal UnicodeEscapeSequence is given in 7.8.4\r\n7.6.1 Reserved Words\r\nA reserved word is an IdentifierName that cannot be used as an Identifier.\r\nSyntax\r\nReservedWord ::\r\nKeyword\r\nFutureReservedWord\r\nNullLiteral\r\nBooleanLiteral\r\n7.6.1.1 Keywords\r\nThe following tokens are ECMAScript keywords and may not be used as Identifiers in ECMAScript programs.\r\nSyntax\r\nKeyword :: one of\r\nbreak do instanceof typeof\r\ncase else new var\r\ncatch finally return void\r\ncontinue for switch while\r\ndebugger function this with\r\ndefault if throw\r\ndelete in try",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/46f901aa-bea6-4c87-a16e-0c741b489837.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d4b4522b610f9f3de71e1541ff903314584bda24e77de568b1465a6afd35f7b7",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b07ac21b-1dc0-47f1-91d5-c91e4c787e44",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 31,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 19\r\n7.6.1.2 Future Reserved Words\r\nThe following words are used as keywords in proposed extensions and are therefore reserved to allow for the \r\npossibility of future adoption of those extensions.\r\nSyntax\r\nFutureReservedWord :: one of\r\nclass enum extends super\r\nconst export import\r\nThe following tokens are also considered to be FutureReservedWords when they occur within strict mode code \r\n(see 10.1.1). The occurrence of any of these tokens within strict mode code in any context where the \r\noccurrence of a FutureReservedWord would produce an error must also produce an equivalent error:\r\nimplements let private public yield\r\ninterface package protected static\r\n7.7 Punctuators\r\nSyntax\r\nPunctuator :: one of\r\n{ } ( ) [ ]\r\n. ; , < > <=\r\n>= == != === !==\r\n+ - * % ++ --\r\n<< >> >>> & | ^\r\n! ~ && || ? :\r\n= += -= *= %= <<=\r\n>>= >>>= &= |= ^=\r\nDivPunctuator :: one of\r\n/ /=\r\n7.8 Literals\r\nSyntax\r\nLiteral ::\r\nNullLiteral\r\nBooleanLiteral\r\nNumericLiteral\r\nStringLiteral\r\nRegularExpressionLiteral\r\n7.8.1 Null Literals\r\nSyntax\r\nNullLiteral ::\r\nnull",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/b07ac21b-1dc0-47f1-91d5-c91e4c787e44.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ce3c2ff74e8c00ab8d05a995a2c33aa9717d732228dc5a2e3873cec980d0a1c7",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "10267cf3-33cb-4ae6-9a59-bb6b2809adbb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 32,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "20 © Ecma International 2011\r\nSemantics\r\nThe value of the null literal null is the sole value of the Null type, namely null.\r\n7.8.2 Boolean Literals\r\nSyntax\r\nBooleanLiteral ::\r\ntrue\r\nfalse\r\nSemantics\r\nThe value of the Boolean literal true is a value of the Boolean type, namely true.\r\nThe value of the Boolean literal false is a value of the Boolean type, namely false.\r\n7.8.3 Numeric Literals\r\nSyntax\r\nNumericLiteral ::\r\nDecimalLiteral\r\nHexIntegerLiteral\r\nDecimalLiteral ::\r\nDecimalIntegerLiteral . DecimalDigitsopt ExponentPartopt\r\n. DecimalDigits ExponentPartopt\r\nDecimalIntegerLiteral ExponentPartopt\r\nDecimalIntegerLiteral ::\r\n0\r\nNonZeroDigit DecimalDigitsopt\r\nDecimalDigits ::\r\nDecimalDigit\r\nDecimalDigits DecimalDigit\r\nDecimalDigit :: one of\r\n0 1 2 3 4 5 6 7 8 9\r\nNonZeroDigit :: one of\r\n1 2 3 4 5 6 7 8 9\r\nExponentPart ::\r\nExponentIndicator SignedInteger\r\nExponentIndicator :: one of\r\ne E\r\nSignedInteger ::\r\nDecimalDigits\r\n+ DecimalDigits\r\n- DecimalDigits\r\nHexIntegerLiteral ::\r\n0x HexDigit\r\n0X HexDigit\r\nHexIntegerLiteral HexDigit",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/10267cf3-33cb-4ae6-9a59-bb6b2809adbb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dde112f4ce3208308e64c50d10324d921d1026bf24cd8d8b4fe6e329a3144536",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 496
      },
      {
        "segments": [
          {
            "segment_id": "f96fa606-0be4-4f70-a3c7-33c255653c6c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 33,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 21\r\nHexDigit :: one of\r\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\r\nThe source character immediately following a NumericLiteral must not be an IdentifierStart or DecimalDigit.\r\nNOTE For example:\r\n3in\r\nis an error and not the two input elements 3 and in.\r\nSemantics\r\nA numeric literal stands for a value of the Number type. This value is determined in two steps: first, a \r\nmathematical value (MV) is derived from the literal; second, this mathematical value is rounded as described \r\nbelow.\r\n The MV of NumericLiteral :: DecimalLiteral is the MV of DecimalLiteral.\r\n The MV of NumericLiteral :: HexIntegerLiteral is the MV of HexIntegerLiteral.\r\n The MV of DecimalLiteral :: DecimalIntegerLiteral . is the MV of DecimalIntegerLiteral.\r\n The MV of DecimalLiteral :: DecimalIntegerLiteral . DecimalDigits is the MV of DecimalIntegerLiteral plus \r\n(the MV of DecimalDigits times 10–n), where n is the number of characters in DecimalDigits.\r\n The MV of DecimalLiteral :: DecimalIntegerLiteral . ExponentPart is the MV of DecimalIntegerLiteral times \r\n10e, where e is the MV of ExponentPart.\r\n The MV of DecimalLiteral :: DecimalIntegerLiteral . DecimalDigits ExponentPart is (the MV of\r\nDecimalIntegerLiteral plus (the MV of DecimalDigits times 10–n)) times 10e, where n is the number of \r\ncharacters in DecimalDigits and e is the MV of ExponentPart.\r\n The MV of DecimalLiteral ::. DecimalDigits is the MV of DecimalDigits times 10–n, where n is the number of \r\ncharacters in DecimalDigits.\r\n The MV of DecimalLiteral ::. DecimalDigits ExponentPart is the MV of DecimalDigits times 10e–n, where n is \r\nthe number of characters in DecimalDigits and e is the MV of ExponentPart.\r\n The MV of DecimalLiteral :: DecimalIntegerLiteral is the MV of DecimalIntegerLiteral.\r\n The MV of DecimalLiteral :: DecimalIntegerLiteral ExponentPart is the MV of DecimalIntegerLiteral times 10e, \r\nwhere e is the MV of ExponentPart.\r\n The MV of DecimalIntegerLiteral :: 0 is 0.\r\n The MV of DecimalIntegerLiteral :: NonZeroDigit is the MV of NonZeroDigit.\r\n The MV of DecimalIntegerLiteral :: NonZeroDigit DecimalDigits is (the MV of NonZeroDigit times 10n) plus \r\nthe MV of DecimalDigits, where n is the number of characters in DecimalDigits.\r\n The MV of DecimalDigits :: DecimalDigit is the MV of DecimalDigit.\r\n The MV of DecimalDigits :: DecimalDigits DecimalDigit is (the MV of DecimalDigits times 10) plus the MV of\r\nDecimalDigit.\r\n The MV of ExponentPart :: ExponentIndicator SignedInteger is the MV of SignedInteger.\r\n The MV of SignedInteger :: DecimalDigits is the MV of DecimalDigits.\r\n The MV of SignedInteger :: + DecimalDigits is the MV of DecimalDigits.\r\n The MV of SignedInteger :: - DecimalDigits is the negative of the MV of DecimalDigits.\r\n The MV of DecimalDigit :: 0 or of HexDigit :: 0 is 0.\r\n The MV of DecimalDigit :: 1 or of NonZeroDigit :: 1 or of HexDigit :: 1 is 1.\r\n The MV of DecimalDigit :: 2 or of NonZeroDigit :: 2 or of HexDigit :: 2 is 2.\r\n The MV of DecimalDigit :: 3 or of NonZeroDigit :: 3 or of HexDigit :: 3 is 3.\r\n The MV of DecimalDigit :: 4 or of NonZeroDigit :: 4 or of HexDigit :: 4 is 4.\r\n The MV of DecimalDigit :: 5 or of NonZeroDigit :: 5 or of HexDigit :: 5 is 5.\r\n The MV of DecimalDigit :: 6 or of NonZeroDigit :: 6 or of HexDigit :: 6 is 6.\r\n The MV of DecimalDigit :: 7 or of NonZeroDigit :: 7 or of HexDigit :: 7 is 7.\r\n The MV of DecimalDigit :: 8 or of NonZeroDigit :: 8 or of HexDigit :: 8 is 8.\r\n The MV of DecimalDigit :: 9 or of NonZeroDigit :: 9 or of HexDigit :: 9 is 9.\r\n The MV of HexDigit :: a or of HexDigit :: A is 10.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f96fa606-0be4-4f70-a3c7-33c255653c6c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=12ca5355718c04ede9002c8231e12e6ffb27f0f815b4b4e08eb45087bdda13cc",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 652
      },
      {
        "segments": [
          {
            "segment_id": "f96fa606-0be4-4f70-a3c7-33c255653c6c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 33,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 21\r\nHexDigit :: one of\r\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\r\nThe source character immediately following a NumericLiteral must not be an IdentifierStart or DecimalDigit.\r\nNOTE For example:\r\n3in\r\nis an error and not the two input elements 3 and in.\r\nSemantics\r\nA numeric literal stands for a value of the Number type. This value is determined in two steps: first, a \r\nmathematical value (MV) is derived from the literal; second, this mathematical value is rounded as described \r\nbelow.\r\n The MV of NumericLiteral :: DecimalLiteral is the MV of DecimalLiteral.\r\n The MV of NumericLiteral :: HexIntegerLiteral is the MV of HexIntegerLiteral.\r\n The MV of DecimalLiteral :: DecimalIntegerLiteral . is the MV of DecimalIntegerLiteral.\r\n The MV of DecimalLiteral :: DecimalIntegerLiteral . DecimalDigits is the MV of DecimalIntegerLiteral plus \r\n(the MV of DecimalDigits times 10–n), where n is the number of characters in DecimalDigits.\r\n The MV of DecimalLiteral :: DecimalIntegerLiteral . ExponentPart is the MV of DecimalIntegerLiteral times \r\n10e, where e is the MV of ExponentPart.\r\n The MV of DecimalLiteral :: DecimalIntegerLiteral . DecimalDigits ExponentPart is (the MV of\r\nDecimalIntegerLiteral plus (the MV of DecimalDigits times 10–n)) times 10e, where n is the number of \r\ncharacters in DecimalDigits and e is the MV of ExponentPart.\r\n The MV of DecimalLiteral ::. DecimalDigits is the MV of DecimalDigits times 10–n, where n is the number of \r\ncharacters in DecimalDigits.\r\n The MV of DecimalLiteral ::. DecimalDigits ExponentPart is the MV of DecimalDigits times 10e–n, where n is \r\nthe number of characters in DecimalDigits and e is the MV of ExponentPart.\r\n The MV of DecimalLiteral :: DecimalIntegerLiteral is the MV of DecimalIntegerLiteral.\r\n The MV of DecimalLiteral :: DecimalIntegerLiteral ExponentPart is the MV of DecimalIntegerLiteral times 10e, \r\nwhere e is the MV of ExponentPart.\r\n The MV of DecimalIntegerLiteral :: 0 is 0.\r\n The MV of DecimalIntegerLiteral :: NonZeroDigit is the MV of NonZeroDigit.\r\n The MV of DecimalIntegerLiteral :: NonZeroDigit DecimalDigits is (the MV of NonZeroDigit times 10n) plus \r\nthe MV of DecimalDigits, where n is the number of characters in DecimalDigits.\r\n The MV of DecimalDigits :: DecimalDigit is the MV of DecimalDigit.\r\n The MV of DecimalDigits :: DecimalDigits DecimalDigit is (the MV of DecimalDigits times 10) plus the MV of\r\nDecimalDigit.\r\n The MV of ExponentPart :: ExponentIndicator SignedInteger is the MV of SignedInteger.\r\n The MV of SignedInteger :: DecimalDigits is the MV of DecimalDigits.\r\n The MV of SignedInteger :: + DecimalDigits is the MV of DecimalDigits.\r\n The MV of SignedInteger :: - DecimalDigits is the negative of the MV of DecimalDigits.\r\n The MV of DecimalDigit :: 0 or of HexDigit :: 0 is 0.\r\n The MV of DecimalDigit :: 1 or of NonZeroDigit :: 1 or of HexDigit :: 1 is 1.\r\n The MV of DecimalDigit :: 2 or of NonZeroDigit :: 2 or of HexDigit :: 2 is 2.\r\n The MV of DecimalDigit :: 3 or of NonZeroDigit :: 3 or of HexDigit :: 3 is 3.\r\n The MV of DecimalDigit :: 4 or of NonZeroDigit :: 4 or of HexDigit :: 4 is 4.\r\n The MV of DecimalDigit :: 5 or of NonZeroDigit :: 5 or of HexDigit :: 5 is 5.\r\n The MV of DecimalDigit :: 6 or of NonZeroDigit :: 6 or of HexDigit :: 6 is 6.\r\n The MV of DecimalDigit :: 7 or of NonZeroDigit :: 7 or of HexDigit :: 7 is 7.\r\n The MV of DecimalDigit :: 8 or of NonZeroDigit :: 8 or of HexDigit :: 8 is 8.\r\n The MV of DecimalDigit :: 9 or of NonZeroDigit :: 9 or of HexDigit :: 9 is 9.\r\n The MV of HexDigit :: a or of HexDigit :: A is 10.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f96fa606-0be4-4f70-a3c7-33c255653c6c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=12ca5355718c04ede9002c8231e12e6ffb27f0f815b4b4e08eb45087bdda13cc",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 652
      },
      {
        "segments": [
          {
            "segment_id": "9f4359e1-9772-47f4-a0e6-6d6a9a7d7c9f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 34,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "22 © Ecma International 2011\r\n The MV of HexDigit :: b or of HexDigit :: B is 11.\r\n The MV of HexDigit :: c or of HexDigit :: C is 12.\r\n The MV of HexDigit :: d or of HexDigit :: D is 13.\r\n The MV of HexDigit :: e or of HexDigit :: E is 14.\r\n The MV of HexDigit :: f or of HexDigit :: F is 15.\r\n The MV of HexIntegerLiteral :: 0x HexDigit is the MV of HexDigit.\r\n The MV of HexIntegerLiteral :: 0X HexDigit is the MV of HexDigit.\r\n The MV of HexIntegerLiteral :: HexIntegerLiteral HexDigit is (the MV of HexIntegerLiteral times 16) plus the \r\nMV of HexDigit.\r\nOnce the exact MV for a numeric literal has been determined, it is then rounded to a value of the Number type. \r\nIf the MV is 0, then the rounded value is +0; otherwise, the rounded value must be the Number value for the \r\nMV (as specified in 8.5), unless the literal is a DecimalLiteral and the literal has more than 20 significant digits, \r\nin which case the Number value may be either the Number value for the MV of a literal produced by replacing \r\neach significant digit after the 20th with a 0 digit or the Number value for the MV of a literal produced by \r\nreplacing each significant digit after the 20th with a 0 digit and then incrementing the literal at the 20th \r\nsignificant digit position. A digit is significant if it is not part of an ExponentPart and\r\n it is not 0; or\r\n there is a nonzero digit to its left and there is a nonzero digit, not in the ExponentPart, to its right.\r\nA conforming implementation, when processing strict mode code (see 10.1.1), must not extend the syntax of \r\nNumericLiteral to include OctalIntegerLiteral as described in B.1.1.\r\n7.8.4 String Literals\r\nA string literal is zero or more characters enclosed in single or double quotes. Each character may be \r\nrepresented by an escape sequence. All characters may appear literally in a string literal except for the closing \r\nquote character, backslash, carriage return, line separator, paragraph separator, and line feed. Any character \r\nmay appear in the form of an escape sequence.\r\nSyntax\r\nStringLiteral ::\r\n\" DoubleStringCharactersopt \"\r\n' SingleStringCharactersopt '\r\nDoubleStringCharacters ::\r\nDoubleStringCharacter DoubleStringCharactersopt\r\nSingleStringCharacters ::\r\nSingleStringCharacter SingleStringCharactersopt\r\nDoubleStringCharacter ::\r\nSourceCharacter but not one of \" or \\ or LineTerminator\r\n\\ EscapeSequence\r\nLineContinuation\r\nSingleStringCharacter ::\r\nSourceCharacter but not one of ' or \\ or LineTerminator\r\n\\ EscapeSequence\r\nLineContinuation\r\nLineContinuation ::\r\n\\ LineTerminatorSequence",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/9f4359e1-9772-47f4-a0e6-6d6a9a7d7c9f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a2b3d77dcd74c4f491f90cb3d319528c90c1bde642e628f6986fde8090f9c442",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 428
      },
      {
        "segments": [
          {
            "segment_id": "0db26af0-caec-4666-8215-27eea90eb6b5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 35,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 23\r\nEscapeSequence ::\r\nCharacterEscapeSequence\r\n0 [lookahead  DecimalDigit]\r\nHexEscapeSequence\r\nUnicodeEscapeSequence\r\nCharacterEscapeSequence ::\r\nSingleEscapeCharacter\r\nNonEscapeCharacter\r\nSingleEscapeCharacter :: one of\r\n' \" \\ b f n r t v\r\nNonEscapeCharacter ::\r\nSourceCharacter but not one of EscapeCharacter or LineTerminator\r\nEscapeCharacter ::\r\nSingleEscapeCharacter\r\nDecimalDigit\r\nx\r\nu\r\nHexEscapeSequence ::\r\nx HexDigit HexDigit\r\nUnicodeEscapeSequence ::\r\nu HexDigit HexDigit HexDigit HexDigit\r\nThe definition of the nonterminal HexDigit is given in 7.8.3. SourceCharacter is defined in clause 6.\r\nSemantics\r\nA string literal stands for a value of the String type. The String value (SV) of the literal is described in terms of \r\ncharacter values (CV) contributed by the various parts of the string literal. As part of this process, some \r\ncharacters within the string literal are interpreted as having a mathematical value (MV), as described below or \r\nin 7.8.3.\r\n The SV of StringLiteral :: \"\" is the empty character sequence.\r\n The SV of StringLiteral :: '' is the empty character sequence.\r\n The SV of StringLiteral :: \" DoubleStringCharacters \" is the SV of DoubleStringCharacters.\r\n The SV of StringLiteral :: ' SingleStringCharacters ' is the SV of SingleStringCharacters.\r\n The SV of DoubleStringCharacters :: DoubleStringCharacter is a sequence of one character, the CV of \r\nDoubleStringCharacter.\r\n The SV of DoubleStringCharacters :: DoubleStringCharacter DoubleStringCharacters is a sequence of the CV \r\nof DoubleStringCharacter followed by all the characters in the SV of DoubleStringCharacters in order.\r\n The SV of SingleStringCharacters :: SingleStringCharacter is a sequence of one character, the CV of\r\nSingleStringCharacter.\r\n The SV of SingleStringCharacters :: SingleStringCharacter SingleStringCharacters is a sequence of the CV \r\nof SingleStringCharacter followed by all the characters in the SV of SingleStringCharacters in order.\r\n The SV of LineContinuation :: \\ LineTerminatorSequence is the empty character sequence.\r\n The CV of DoubleStringCharacter :: SourceCharacter but not one of \" or \\ or LineTerminator is the\r\nSourceCharacter character itself.\r\n The CV of DoubleStringCharacter :: \\ EscapeSequence is the CV of the EscapeSequence.\r\n The CV of DoubleStringCharacter :: LineContinuation is the empty character sequence.\r\n The CV of SingleStringCharacter :: SourceCharacter but not one of ' or \\ or LineTerminator is the\r\nSourceCharacter character itself.\r\n The CV of SingleStringCharacter :: \\ EscapeSequence is the CV of the EscapeSequence.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0db26af0-caec-4666-8215-27eea90eb6b5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8f0a31967edc9677d4f57b3b5b1d5448d2560e298f650db07fac481007acb2da",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 373
      },
      {
        "segments": [
          {
            "segment_id": "7bd1e3b9-6f2f-4e20-98ed-14c95366517f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 36,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "24 © Ecma International 2011\r\n The CV of SingleStringCharacter :: LineContinuation is the empty character sequence.\r\n The CV of EscapeSequence :: CharacterEscapeSequence is the CV of the CharacterEscapeSequence.\r\n The CV of EscapeSequence :: 0 [lookahead  DecimalDigit] is a <NUL> character (Unicode value 0000).\r\n The CV of EscapeSequence :: HexEscapeSequence is the CV of the HexEscapeSequence.\r\n The CV of EscapeSequence :: UnicodeEscapeSequence is the CV of the UnicodeEscapeSequence.\r\n The CV of CharacterEscapeSequence :: SingleEscapeCharacter is the character whose code unit value is \r\ndetermined by the SingleEscapeCharacter according to Table 4:\r\nTable 4 — String Single Character Escape Sequences\r\nEscape Sequence Code Unit Value Name Symbol\r\n\\b \\u0008 backspace <BS>\r\n\\t \\u0009 horizontal tab <HT>\r\n\\n \\u000A line feed (new line) <LF>\r\n\\v \\u000B vertical tab <VT>\r\n\\f \\u000C form feed <FF>\r\n\\r \\u000D carriage return <CR>\r\n\\\" \\u0022 double quote \"\r\n\\' \\u0027 single quote '\r\n\\\\ \\u005C backslash \\\r\n The CV of CharacterEscapeSequence :: NonEscapeCharacter is the CV of the NonEscapeCharacter.\r\n The CV of NonEscapeCharacter :: SourceCharacter but not one of EscapeCharacter or LineTerminator is the \r\nSourceCharacter character itself.\r\n The CV of HexEscapeSequence :: x HexDigit HexDigit is the character whose code unit value is (16 times \r\nthe MV of the first HexDigit) plus the MV of the second HexDigit.\r\n The CV of UnicodeEscapeSequence :: u HexDigit HexDigit HexDigit HexDigit is the character whose code \r\nunit value is (4096 times the MV of the first HexDigit) plus (256 times the MV of the second HexDigit) plus \r\n(16 times the MV of the third HexDigit) plus the MV of the fourth HexDigit.\r\nA conforming implementation, when processing strict mode code (see 10.1.1), may not extend the syntax of \r\nEscapeSequence to include OctalEscapeSequence as described in B.1.2.\r\nNOTE A line terminator character cannot appear in a string literal, except as part of a LineContinuation to produce the \r\nempty character sequence. The correct way to cause a line terminator character to be part of the String value of a string \r\nliteral is to use an escape sequence such as \\n or \\u000A.\r\n7.8.5 Regular Expression Literals\r\nA regular expression literal is an input element that is converted to a RegExp object (see 15.10) each time the \r\nliteral is evaluated. Two regular expression literals in a program evaluate to regular expression objects that \r\nnever compare as === to each other even if the two literals' contents are identical. A RegExp object may also \r\nbe created at runtime by new RegExp (see 15.10.4) or calling the RegExp constructor as a function (15.10.3).\r\nThe productions below describe the syntax for a regular expression literal and are used by the input element \r\nscanner to find the end of the regular expression literal. The Strings of characters comprising the \r\nRegularExpressionBody and the RegularExpressionFlags are passed uninterpreted to the regular expression \r\nconstructor, which interprets them according to its own, more stringent grammar. An implementation may \r\nextend the regular expression constructor's grammar, but it must not extend the RegularExpressionBody and \r\nRegularExpressionFlags productions or the productions used by these productions.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/7bd1e3b9-6f2f-4e20-98ed-14c95366517f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=16af37605905c44d286a9070d53b4e8074aad0841371630250933d12cc0b6b53",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 510
      },
      {
        "segments": [
          {
            "segment_id": "c4241727-f51b-413c-8275-3e8dae15fd94",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 37,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 25\r\nSyntax\r\nRegularExpressionLiteral ::\r\n/ RegularExpressionBody / RegularExpressionFlags\r\nRegularExpressionBody ::\r\nRegularExpressionFirstChar RegularExpressionChars\r\nRegularExpressionChars ::\r\n[empty]\r\nRegularExpressionChars RegularExpressionChar\r\nRegularExpressionFirstChar ::\r\nRegularExpressionNonTerminator but not one of * or \\ or / or [\r\nRegularExpressionBackslashSequence\r\nRegularExpressionClass\r\nRegularExpressionChar ::\r\nRegularExpressionNonTerminator but not one of \\ or / or [\r\nRegularExpressionBackslashSequence\r\nRegularExpressionClass\r\nRegularExpressionBackslashSequence ::\r\n\\ RegularExpressionNonTerminator\r\nRegularExpressionNonTerminator ::\r\nSourceCharacter but not LineTerminator\r\nRegularExpressionClass ::\r\n[ RegularExpressionClassChars ]\r\nRegularExpressionClassChars ::\r\n[empty]\r\nRegularExpressionClassChars RegularExpressionClassChar\r\nRegularExpressionClassChar ::\r\nRegularExpressionNonTerminator but not one of ] or \\\r\nRegularExpressionBackslashSequence\r\nRegularExpressionFlags ::\r\n[empty]\r\nRegularExpressionFlags IdentifierPart\r\nNOTE Regular expression literals may not be empty; instead of representing an empty regular expression literal, the \r\ncharacters // start a single-line comment. To specify an empty regular expression, use: /(?:)/.\r\nSemantics\r\nA regular expression literal evaluates to a value of the Object type that is an instance of the standard built-in \r\nconstructor RegExp. This value is determined in two steps: first, the characters comprising the regular \r\nexpression's RegularExpressionBody and RegularExpressionFlags production expansions are collected \r\nuninterpreted into two Strings Pattern and Flags, respectively. Then each time the literal is evaluated, a new \r\nobject is created as if by the expression new RegExp(Pattern, Flags) where RegExp is the standard \r\nbuilt-in constructor with that name. The newly constructed object becomes the value of the \r\nRegularExpressionLiteral. If the call to new RegExp would generate an error as specified in 15.10.4.1, the error \r\nmust be treated as an early error (Clause 16).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c4241727-f51b-413c-8275-3e8dae15fd94.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9430509601c652b495aed7b58ae928928a72534772fabc4392e0f94483d0b00c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 235
      },
      {
        "segments": [
          {
            "segment_id": "e8bbdaec-4189-4299-bbe4-1c975a617b83",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 38,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "26 © Ecma International 2011\r\n7.9 Automatic Semicolon Insertion\r\nCertain ECMAScript statements (empty statement, variable statement, expression statement, do-while\r\nstatement, continue statement, break statement, return statement, and throw statement) must be \r\nterminated with semicolons. Such semicolons may always appear explicitly in the source text. For \r\nconvenience, however, such semicolons may be omitted from the source text in certain situations. These \r\nsituations are described by saying that semicolons are automatically inserted into the source code token \r\nstream in those situations.\r\n7.9.1 Rules of Automatic Semicolon Insertion\r\nThere are three basic rules of semicolon insertion:\r\n1. When, as the program is parsed from left to right, a token (called the offending token) is encountered that \r\nis not allowed by any production of the grammar, then a semicolon is automatically inserted before the \r\noffending token if one or more of the following conditions is true:\r\n The offending token is separated from the previous token by at least one LineTerminator.\r\n The offending token is }.\r\n2. When, as the program is parsed from left to right, the end of the input stream of tokens is encountered \r\nand the parser is unable to parse the input token stream as a single complete ECMAScript Program, then \r\na semicolon is automatically inserted at the end of the input stream.\r\n3. When, as the program is parsed from left to right, a token is encountered that is allowed by some \r\nproduction of the grammar, but the production is a restricted production and the token would be the first \r\ntoken for a terminal or nonterminal immediately following the annotation ―[no LineTerminator here]‖ within the \r\nrestricted production (and therefore such a token is called a restricted token), and the restricted token is\r\nseparated from the previous token by at least one LineTerminator, then a semicolon is automatically \r\ninserted before the restricted token.\r\nHowever, there is an additional overriding condition on the preceding rules: a semicolon is never inserted \r\nautomatically if the semicolon would then be parsed as an empty statement or if that semicolon would become \r\none of the two semicolons in the header of a for statement (see 12.6.3).\r\nNOTE The following are the only restricted productions in the grammar:\r\nPostfixExpression :\r\nLeftHandSideExpression [no LineTerminator here] ++\r\nLeftHandSideExpression [no LineTerminator here] --\r\nContinueStatement :\r\ncontinue [no LineTerminator here] Identifier ;\r\nBreakStatement :\r\nbreak [no LineTerminator here] Identifier ;\r\nReturnStatement :\r\nreturn [no LineTerminator here] Expression ;\r\nThrowStatement :\r\nthrow [no LineTerminator here] Expression ;\r\nThe practical effect of these restricted productions is as follows:\r\nWhen a ++ or -- token is encountered where the parser would treat it as a postfix operator, and at least one \r\nLineTerminator occurred between the preceding token and the ++ or -- token, then a semicolon is automatically \r\ninserted before the ++ or -- token.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/e8bbdaec-4189-4299-bbe4-1c975a617b83.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bc5de05e5b989e7ffe386ddebd7027a0ebed8c7fa3621c60312611bb6b19d856",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 463
      },
      {
        "segments": [
          {
            "segment_id": "be02b58b-835f-478f-a407-054f3216ec17",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 39,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 27\r\nWhen a continue, break, return, or throw token is encountered and a LineTerminator is encountered before \r\nthe next token, a semicolon is automatically inserted after the continue, break, return, or throw token.\r\nThe resulting practical advice to ECMAScript programmers is:\r\nA postfix ++ or -- operator should appear on the same line as its operand.\r\nAn Expression in a return or throw statement should start on the same line as the return or throw token.\r\nAn Identifier in a break or continue statement should be on the same line as the break or continue token.\r\n7.9.2 Examples of Automatic Semicolon Insertion\r\nThe source\r\n{ 1 2 } 3\r\nis not a valid sentence in the ECMAScript grammar, even with the automatic semicolon insertion rules. In \r\ncontrast, the source\r\n{ 1\r\n2 } 3\r\nis also not a valid ECMAScript sentence, but is transformed by automatic semicolon insertion into the \r\nfollowing:\r\n{ 1\r\n;2 ;} 3;\r\nwhich is a valid ECMAScript sentence.\r\nThe source\r\nfor (a; b\r\n)\r\nis not a valid ECMAScript sentence and is not altered by automatic semicolon insertion because the \r\nsemicolon is needed for the header of a for statement. Automatic semicolon insertion never inserts one of \r\nthe two semicolons in the header of a for statement.\r\nThe source\r\nreturn\r\na + b\r\nis transformed by automatic semicolon insertion into the following:\r\nreturn;\r\na + b;\r\nNOTE The expression a + b is not treated as a value to be returned by the return statement, because a \r\nLineTerminator separates it from the token return.\r\nThe source\r\na = b\r\n++c\r\nis transformed by automatic semicolon insertion into the following:\r\na = b;\r\n++c;\r\nNOTE The token ++ is not treated as a postfix operator applying to the variable b, because a LineTerminator occurs \r\nbetween b and ++.\r\nThe source\r\nif (a > b)\r\nelse c = d",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/be02b58b-835f-478f-a407-054f3216ec17.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4ae374f22fc9a49e6cf51825b5b1f8a3ab6d924b105d783b6f7e57c298df4fbf",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 315
      },
      {
        "segments": [
          {
            "segment_id": "7ad4ac46-0385-4453-a6b8-188bfa5e32fd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 40,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "28 © Ecma International 2011\r\nis not a valid ECMAScript sentence and is not altered by automatic semicolon insertion before the else token, \r\neven though no production of the grammar applies at that point, because an automatically inserted semicolon \r\nwould then be parsed as an empty statement.\r\nThe source\r\na = b + c\r\n(d + e).print()\r\nis not transformed by automatic semicolon insertion, because the parenthesised expression that begins the \r\nsecond line can be interpreted as an argument list for a function call:\r\na = b + c(d + e).print()\r\nIn the circumstance that an assignment statement must begin with a left parenthesis, it is a good idea for the \r\nprogrammer to provide an explicit semicolon at the end of the preceding statement rather than to rely on \r\nautomatic semicolon insertion.\r\n8 Types\r\nAlgorithms within this specification manipulate values each of which has an associated type. The possible \r\nvalue types are exactly those defined in this clause. Types are further subclassified into ECMAScript language \r\ntypes and specification types.\r\nAn ECMAScript language type corresponds to values that are directly manipulated by an ECMAScript \r\nprogrammer using the ECMAScript language. The ECMAScript language types are Undefined, Null, Boolean, \r\nString, Number, and Object.\r\nA specification type corresponds to meta-values that are used within algorithms to describe the semantics of \r\nECMAScript language constructs and ECMAScript language types. The specification types are Reference, \r\nList, Completion, Property Descriptor, Property Identifier, Lexical Environment, and Environment Record. \r\nSpecification type values are specification artefacts that do not necessarily correspond to any specific entity \r\nwithin an ECMAScript implementation. Specification type values may be used to describe intermediate results \r\nof ECMAScript expression evaluation but such values cannot be stored as properties of objects or values of \r\nECMAScript language variables.\r\nWithin this specification, the notation ―Type(x)‖ is used as shorthand for ―the type of x‖ where ―type‖ refers to the \r\nECMAScript language and specification types defined in this clause.\r\n8.1 The Undefined Type\r\nThe Undefined type has exactly one value, called undefined. Any variable that has not been assigned a value \r\nhas the value undefined.\r\n8.2 The Null Type\r\nThe Null type has exactly one value, called null.\r\n8.3 The Boolean Type\r\nThe Boolean type represents a logical entity having two values, called true and false.\r\n8.4 The String Type\r\nThe String type is the set of all finite ordered sequences of zero or more 16-bit unsigned integer values \r\n(―elements‖). The String type is generally used to represent textual data in a running ECMAScript program, in \r\nwhich case each element in the String is treated as a code unit value (see Clause 6). Each element is \r\nregarded as occupying a position within the sequence. These positions are indexed with nonnegative integers. \r\nThe first element (if any) is at position 0, the next element (if any) at position 1, and so on. The length of a ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/7ad4ac46-0385-4453-a6b8-188bfa5e32fd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9ee2da3c32d07dd6572e9966409c451a1d451cc5fc461b59faf96e7bcee3cfbe",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 473
      },
      {
        "segments": [
          {
            "segment_id": "31332005-2ca2-4d8d-9906-d0c51bbb437f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 41,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 29\r\nString is the number of elements (i.e., 16-bit values) within it. The empty String has length zero and therefore \r\ncontains no elements.\r\nWhen a String contains actual textual data, each element is considered to be a single UTF-16 code unit. \r\nWhether or not this is the actual storage format of a String, the characters within a String are numbered by \r\ntheir initial code unit element position as though they were represented using UTF-16. All operations on \r\nStrings (except as otherwise stated) treat them as sequences of undifferentiated 16-bit unsigned integers; \r\nthey do not ensure the resulting String is in normalised form, nor do they ensure language-sensitive results.\r\nNOTE The rationale behind this design was to keep the implementation of Strings as simple and high-performing as \r\npossible. The intent is that textual data coming into the execution environment from outside (e.g., user input, text read \r\nfrom a file or received over the network, etc.) be converted to Unicode Normalised Form C before the running program \r\nsees it. Usually this would occur at the same time incoming text is converted from its original character encoding to \r\nUnicode (and would impose no additional overhead). Since it is recommended that ECMAScript source code be in \r\nNormalised Form C, string literals are guaranteed to be normalised (if source text is guaranteed to be normalised), as long \r\nas they do not contain any Unicode escape sequences.\r\n8.5 The Number Type\r\nThe Number type has exactly 18437736874454810627 (that is, 2\r\n64\r\n2\r\n53+3) values, representing the double\u0002precision 64-bit format IEEE 754 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, \r\nexcept that the 9007199254740990 (that is, 2\r\n53\r\n2) distinct ―Not-a-Number‖ values of the IEEE Standard are \r\nrepresented in ECMAScript as a single special NaN value. (Note that the NaN value is produced by the \r\nprogram expression NaN.) In some implementations, external code might be able to detect a difference \r\nbetween various Not-a-Number values, but such behaviour is implementation-dependent; to ECMAScript code, \r\nall NaN values are indistinguishable from each other.\r\nThere are two other special values, called positive Infinity and negative Infinity. For brevity, these values \r\nare also referred to for expository purposes by the symbols + and , respectively. (Note that these two \r\ninfinite Number values are produced by the program expressions +Infinity (or simply Infinity) and -\r\nInfinity.)\r\nThe other 18437736874454810624 (that is, 2\r\n64\r\n2\r\n53) values are called the finite numbers. Half of these are \r\npositive numbers and half are negative numbers; for every finite positive Number value there is a \r\ncorresponding negative value having the same magnitude.\r\nNote that there is both a positive zero and a negative zero. For brevity, these values are also referred to for \r\nexpository purposes by the symbols +0 and 0, respectively. (Note that these two different zero Number \r\nvalues are produced by the program expressions +0 (or simply 0) and -0.)\r\nThe 18437736874454810622 (that is, 2\r\n64\r\n2\r\n53\r\n2) finite nonzero values are of two kinds:\r\n18428729675200069632 (that is, 2\r\n64\r\n2\r\n54) of them are normalised, having the form\r\ns  m  2\r\ne\r\nwhere s is +1 or 1, m is a positive integer less than 2\r\n53 but not less than 252, and e is an integer ranging from \r\n1074 to 971, inclusive.\r\nThe remaining 9007199254740990 (that is, 2\r\n53\r\n2) values are denormalised, having the form\r\ns  m  2\r\ne\r\nwhere s is +1 or 1, m is a positive integer less than 2\r\n52, and e is 1074.\r\nNote that all the positive and negative integers whose magnitude is no greater than 2\r\n53 are representable in \r\nthe Number type (indeed, the integer 0 has two representations, +0 and -0).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/31332005-2ca2-4d8d-9906-d0c51bbb437f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=985287a951b1d26eef24b986b17849b3d458be2b376a77291ea26a9af6443b24",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 620
      },
      {
        "segments": [
          {
            "segment_id": "31332005-2ca2-4d8d-9906-d0c51bbb437f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 41,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 29\r\nString is the number of elements (i.e., 16-bit values) within it. The empty String has length zero and therefore \r\ncontains no elements.\r\nWhen a String contains actual textual data, each element is considered to be a single UTF-16 code unit. \r\nWhether or not this is the actual storage format of a String, the characters within a String are numbered by \r\ntheir initial code unit element position as though they were represented using UTF-16. All operations on \r\nStrings (except as otherwise stated) treat them as sequences of undifferentiated 16-bit unsigned integers; \r\nthey do not ensure the resulting String is in normalised form, nor do they ensure language-sensitive results.\r\nNOTE The rationale behind this design was to keep the implementation of Strings as simple and high-performing as \r\npossible. The intent is that textual data coming into the execution environment from outside (e.g., user input, text read \r\nfrom a file or received over the network, etc.) be converted to Unicode Normalised Form C before the running program \r\nsees it. Usually this would occur at the same time incoming text is converted from its original character encoding to \r\nUnicode (and would impose no additional overhead). Since it is recommended that ECMAScript source code be in \r\nNormalised Form C, string literals are guaranteed to be normalised (if source text is guaranteed to be normalised), as long \r\nas they do not contain any Unicode escape sequences.\r\n8.5 The Number Type\r\nThe Number type has exactly 18437736874454810627 (that is, 2\r\n64\r\n2\r\n53+3) values, representing the double\u0002precision 64-bit format IEEE 754 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, \r\nexcept that the 9007199254740990 (that is, 2\r\n53\r\n2) distinct ―Not-a-Number‖ values of the IEEE Standard are \r\nrepresented in ECMAScript as a single special NaN value. (Note that the NaN value is produced by the \r\nprogram expression NaN.) In some implementations, external code might be able to detect a difference \r\nbetween various Not-a-Number values, but such behaviour is implementation-dependent; to ECMAScript code, \r\nall NaN values are indistinguishable from each other.\r\nThere are two other special values, called positive Infinity and negative Infinity. For brevity, these values \r\nare also referred to for expository purposes by the symbols + and , respectively. (Note that these two \r\ninfinite Number values are produced by the program expressions +Infinity (or simply Infinity) and -\r\nInfinity.)\r\nThe other 18437736874454810624 (that is, 2\r\n64\r\n2\r\n53) values are called the finite numbers. Half of these are \r\npositive numbers and half are negative numbers; for every finite positive Number value there is a \r\ncorresponding negative value having the same magnitude.\r\nNote that there is both a positive zero and a negative zero. For brevity, these values are also referred to for \r\nexpository purposes by the symbols +0 and 0, respectively. (Note that these two different zero Number \r\nvalues are produced by the program expressions +0 (or simply 0) and -0.)\r\nThe 18437736874454810622 (that is, 2\r\n64\r\n2\r\n53\r\n2) finite nonzero values are of two kinds:\r\n18428729675200069632 (that is, 2\r\n64\r\n2\r\n54) of them are normalised, having the form\r\ns  m  2\r\ne\r\nwhere s is +1 or 1, m is a positive integer less than 2\r\n53 but not less than 252, and e is an integer ranging from \r\n1074 to 971, inclusive.\r\nThe remaining 9007199254740990 (that is, 2\r\n53\r\n2) values are denormalised, having the form\r\ns  m  2\r\ne\r\nwhere s is +1 or 1, m is a positive integer less than 2\r\n52, and e is 1074.\r\nNote that all the positive and negative integers whose magnitude is no greater than 2\r\n53 are representable in \r\nthe Number type (indeed, the integer 0 has two representations, +0 and -0).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/31332005-2ca2-4d8d-9906-d0c51bbb437f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=985287a951b1d26eef24b986b17849b3d458be2b376a77291ea26a9af6443b24",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 620
      },
      {
        "segments": [
          {
            "segment_id": "f017c183-5494-4f33-ac4e-be77324c3f34",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 42,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "30 © Ecma International 2011\r\nA finite number has an odd significand if it is nonzero and the integer m used to express it (in one of the two \r\nforms shown above) is odd. Otherwise, it has an even significand.\r\nIn this specification, the phrase ―the Number value for x‖ where x represents an exact nonzero real \r\nmathematical quantity (which might even be an irrational number such as ) means a Number value chosen in \r\nthe following manner. Consider the set of all finite values of the Number type, with 0 removed and with two \r\nadditional values added to it that are not representable in the Number type, namely 2\r\n1024 (which is +1  253 \r\n2\r\n971) and 21024 (which is 1  253  2971). Choose the member of this set that is closest in value to x. If two \r\nvalues of the set are equally close, then the one with an even significand is chosen; for this purpose, the two \r\nextra values 2\r\n1024 and 21024 are considered to have even significands. Finally, if 21024 was chosen, replace it \r\nwith +; if 2\r\n1024 was chosen, replace it with ; if +0 was chosen, replace it with 0 if and only if x is less than \r\nzero; any other chosen value is used unchanged. The result is the Number value for x. (This procedure\r\ncorresponds exactly to the behaviour of the IEEE 754 ―round to nearest‖ mode.)\r\nSome ECMAScript operators deal only with integers in the range 2\r\n31 through 231\r\n1, inclusive, or in the range \r\n0 through 2\r\n32\r\n1, inclusive. These operators accept any value of the Number type but first convert each such \r\nvalue to one of 2\r\n32 integer values. See the descriptions of the ToInt32 and ToUint32 operators in 9.5 and 9.6, \r\nrespectively.\r\n8.6 The Object Type\r\nAn Object is a collection of properties. Each property is either a named data property, a named accessor \r\nproperty, or an internal property:\r\n A named data property associates a name with an ECMAScript language value and a set of Boolean \r\nattributes.\r\n A named accessor property associates a name with one or two accessor functions, and a set of Boolean \r\nattributes. The accessor functions are used to store or retrieve an ECMAScript language value that is \r\nassociated with the property. \r\n An internal property has no name and is not directly accessible via ECMAScript language operators. \r\nInternal properties exist purely for specification purposes. \r\nThere are two kinds of access for named (non-internal) properties: get and put, corresponding to retrieval and \r\nassignment, respectively.\r\n8.6.1 Property Attributes\r\nAttributes are used in this specification to define and explain the state of named properties. A named data \r\nproperty associates a name with the attributes listed in Table 5\r\nTable 5 — Attributes of a Named Data Property\r\nAttribute Name Value Domain Description\r\n[[Value]] Any ECMAScript \r\nlanguage type\r\nThe value retrieved by reading the property.\r\n[[Writable]] Boolean If false, attempts by ECMAScript code to change the \r\nproperty‘s [[Value]] attribute using [[Put]] will not succeed.\r\n[[Enumerable]] Boolean If true, the property will be enumerated by a for-in \r\nenumeration (see 12.6.4). Otherwise, the property is said \r\nto be non-enumerable.\r\n[[Configurable]] Boolean If false, attempts to delete the property, change the \r\nproperty to be an accessor property, or change its \r\nattributes (other than [[Value]]) will fail.\r\nA named accessor property associates a name with the attributes listed in Table 6.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f017c183-5494-4f33-ac4e-be77324c3f34.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dc9fdf13d4a8bb5261fe9efd162f878b8fb70ad85b7b218a94a1502b6b32d949",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 570
      },
      {
        "segments": [
          {
            "segment_id": "f017c183-5494-4f33-ac4e-be77324c3f34",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 42,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "30 © Ecma International 2011\r\nA finite number has an odd significand if it is nonzero and the integer m used to express it (in one of the two \r\nforms shown above) is odd. Otherwise, it has an even significand.\r\nIn this specification, the phrase ―the Number value for x‖ where x represents an exact nonzero real \r\nmathematical quantity (which might even be an irrational number such as ) means a Number value chosen in \r\nthe following manner. Consider the set of all finite values of the Number type, with 0 removed and with two \r\nadditional values added to it that are not representable in the Number type, namely 2\r\n1024 (which is +1  253 \r\n2\r\n971) and 21024 (which is 1  253  2971). Choose the member of this set that is closest in value to x. If two \r\nvalues of the set are equally close, then the one with an even significand is chosen; for this purpose, the two \r\nextra values 2\r\n1024 and 21024 are considered to have even significands. Finally, if 21024 was chosen, replace it \r\nwith +; if 2\r\n1024 was chosen, replace it with ; if +0 was chosen, replace it with 0 if and only if x is less than \r\nzero; any other chosen value is used unchanged. The result is the Number value for x. (This procedure\r\ncorresponds exactly to the behaviour of the IEEE 754 ―round to nearest‖ mode.)\r\nSome ECMAScript operators deal only with integers in the range 2\r\n31 through 231\r\n1, inclusive, or in the range \r\n0 through 2\r\n32\r\n1, inclusive. These operators accept any value of the Number type but first convert each such \r\nvalue to one of 2\r\n32 integer values. See the descriptions of the ToInt32 and ToUint32 operators in 9.5 and 9.6, \r\nrespectively.\r\n8.6 The Object Type\r\nAn Object is a collection of properties. Each property is either a named data property, a named accessor \r\nproperty, or an internal property:\r\n A named data property associates a name with an ECMAScript language value and a set of Boolean \r\nattributes.\r\n A named accessor property associates a name with one or two accessor functions, and a set of Boolean \r\nattributes. The accessor functions are used to store or retrieve an ECMAScript language value that is \r\nassociated with the property. \r\n An internal property has no name and is not directly accessible via ECMAScript language operators. \r\nInternal properties exist purely for specification purposes. \r\nThere are two kinds of access for named (non-internal) properties: get and put, corresponding to retrieval and \r\nassignment, respectively.\r\n8.6.1 Property Attributes\r\nAttributes are used in this specification to define and explain the state of named properties. A named data \r\nproperty associates a name with the attributes listed in Table 5\r\nTable 5 — Attributes of a Named Data Property\r\nAttribute Name Value Domain Description\r\n[[Value]] Any ECMAScript \r\nlanguage type\r\nThe value retrieved by reading the property.\r\n[[Writable]] Boolean If false, attempts by ECMAScript code to change the \r\nproperty‘s [[Value]] attribute using [[Put]] will not succeed.\r\n[[Enumerable]] Boolean If true, the property will be enumerated by a for-in \r\nenumeration (see 12.6.4). Otherwise, the property is said \r\nto be non-enumerable.\r\n[[Configurable]] Boolean If false, attempts to delete the property, change the \r\nproperty to be an accessor property, or change its \r\nattributes (other than [[Value]]) will fail.\r\nA named accessor property associates a name with the attributes listed in Table 6.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f017c183-5494-4f33-ac4e-be77324c3f34.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dc9fdf13d4a8bb5261fe9efd162f878b8fb70ad85b7b218a94a1502b6b32d949",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 570
      },
      {
        "segments": [
          {
            "segment_id": "c5f9c5dc-11d1-4c4f-856a-40531ece8786",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 43,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 31\r\nTable 6 — Attributes of a Named Accessor Property\r\nAttribute Name Value Domain Description\r\n[[Get]] Object or \r\nUndefined\r\nIf the value is an Object it must be a function Object. The \r\nfunction‘s [[Call]] internal method (8.6.2) is called with an \r\nempty arguments list to return the property value each time \r\na get access of the property is performed.\r\n[[Set]] Object or \r\nUndefined\r\nIf the value is an Object it must be a function Object. The \r\nfunction‘s [[Call]] internal method (8.6.2) is called with an \r\narguments list containing the assigned value as its sole \r\nargument each time a set access of the property is \r\nperformed. The effect of a property's [[Set]] internal method\r\nmay, but is not required to, have an effect on the value \r\nreturned by subsequent calls to the property's [[Get]] \r\ninternal method.\r\n[[Enumerable]] Boolean If true, the property is to be enumerated by a for-in \r\nenumeration (see 12.6.4). Otherwise, the property is said to \r\nbe non-enumerable.\r\n[[Configurable]] Boolean If false, attempts to delete the property, change the \r\nproperty to be a data property, or change its attributes will \r\nfail.\r\nIf the value of an attribute is not explicitly specified by this specification for a named property, the default value \r\ndefined in Table 7 is used.\r\nTable 7 — Default Attribute Values\r\nAttribute Name Default Value\r\n[[Value]] undefined\r\n[[Get]] undefined\r\n[[Set]] undefined\r\n[[Writable]] false\r\n[[Enumerable]] false\r\n[[Configurable]] false\r\n8.6.2 Object Internal Properties and Methods\r\nThis specification uses various internal properties to define the semantics of object values. These internal \r\nproperties are not part of the ECMAScript language. They are defined by this specification purely for \r\nexpository purposes. An implementation of ECMAScript must behave as if it produced and operated upon \r\ninternal properties in the manner described here. The names of internal properties are enclosed in double \r\nsquare brackets [[ ]]. When an algorithm uses an internal property of an object and the object does not \r\nimplement the indicated internal property, a TypeError exception is thrown.\r\nThe Table 8 summarises the internal properties used by this specification that are applicable to all \r\nECMAScript objects. The Table 9 summarises the internal properties used by this specification that are only \r\napplicable to some ECMAScript objects. The descriptions in these tables indicate their behaviour for native \r\nECMAScript objects, unless stated otherwise in this document for particular kinds of native ECMAScript \r\nobjects. Host objects may support these internal properties with any implementation-dependent behaviour as \r\nlong as it is consistent with the specific host object restrictions stated in this document.\r\nThe ―Value Type Domain‖ columns of the following tables define the types of values associated with internal \r\nproperties. The type names refer to the types defined in Clause 8 augmented by the following additional \r\nnames. ―any‖ means the value may be any ECMAScript language type. ―primitive‖ means Undefined, Null, \r\nBoolean, String, or Number. ―SpecOp‖ means the internal property is an internal method, an implementation \r\nprovided procedure defined by an abstract operation specification. ―SpecOp‖ is followed by a list of descriptive \r\nparameter names. If a parameter name is the same as a type name then the name describes the type of the ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c5f9c5dc-11d1-4c4f-856a-40531ece8786.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0baa4327ae6364ce598dbb70ca67feb7e09a9bbf8f72f5ea89e545f135b6162e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 521
      },
      {
        "segments": [
          {
            "segment_id": "c5f9c5dc-11d1-4c4f-856a-40531ece8786",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 43,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 31\r\nTable 6 — Attributes of a Named Accessor Property\r\nAttribute Name Value Domain Description\r\n[[Get]] Object or \r\nUndefined\r\nIf the value is an Object it must be a function Object. The \r\nfunction‘s [[Call]] internal method (8.6.2) is called with an \r\nempty arguments list to return the property value each time \r\na get access of the property is performed.\r\n[[Set]] Object or \r\nUndefined\r\nIf the value is an Object it must be a function Object. The \r\nfunction‘s [[Call]] internal method (8.6.2) is called with an \r\narguments list containing the assigned value as its sole \r\nargument each time a set access of the property is \r\nperformed. The effect of a property's [[Set]] internal method\r\nmay, but is not required to, have an effect on the value \r\nreturned by subsequent calls to the property's [[Get]] \r\ninternal method.\r\n[[Enumerable]] Boolean If true, the property is to be enumerated by a for-in \r\nenumeration (see 12.6.4). Otherwise, the property is said to \r\nbe non-enumerable.\r\n[[Configurable]] Boolean If false, attempts to delete the property, change the \r\nproperty to be a data property, or change its attributes will \r\nfail.\r\nIf the value of an attribute is not explicitly specified by this specification for a named property, the default value \r\ndefined in Table 7 is used.\r\nTable 7 — Default Attribute Values\r\nAttribute Name Default Value\r\n[[Value]] undefined\r\n[[Get]] undefined\r\n[[Set]] undefined\r\n[[Writable]] false\r\n[[Enumerable]] false\r\n[[Configurable]] false\r\n8.6.2 Object Internal Properties and Methods\r\nThis specification uses various internal properties to define the semantics of object values. These internal \r\nproperties are not part of the ECMAScript language. They are defined by this specification purely for \r\nexpository purposes. An implementation of ECMAScript must behave as if it produced and operated upon \r\ninternal properties in the manner described here. The names of internal properties are enclosed in double \r\nsquare brackets [[ ]]. When an algorithm uses an internal property of an object and the object does not \r\nimplement the indicated internal property, a TypeError exception is thrown.\r\nThe Table 8 summarises the internal properties used by this specification that are applicable to all \r\nECMAScript objects. The Table 9 summarises the internal properties used by this specification that are only \r\napplicable to some ECMAScript objects. The descriptions in these tables indicate their behaviour for native \r\nECMAScript objects, unless stated otherwise in this document for particular kinds of native ECMAScript \r\nobjects. Host objects may support these internal properties with any implementation-dependent behaviour as \r\nlong as it is consistent with the specific host object restrictions stated in this document.\r\nThe ―Value Type Domain‖ columns of the following tables define the types of values associated with internal \r\nproperties. The type names refer to the types defined in Clause 8 augmented by the following additional \r\nnames. ―any‖ means the value may be any ECMAScript language type. ―primitive‖ means Undefined, Null, \r\nBoolean, String, or Number. ―SpecOp‖ means the internal property is an internal method, an implementation \r\nprovided procedure defined by an abstract operation specification. ―SpecOp‖ is followed by a list of descriptive \r\nparameter names. If a parameter name is the same as a type name then the name describes the type of the ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c5f9c5dc-11d1-4c4f-856a-40531ece8786.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0baa4327ae6364ce598dbb70ca67feb7e09a9bbf8f72f5ea89e545f135b6162e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 521
      },
      {
        "segments": [
          {
            "segment_id": "eb6bef55-10d2-4e40-af9d-b6a0303c4259",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 44,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "32 © Ecma International 2011\r\nparameter. If a ―SpecOp‖ returns a value, its parameter list is followed by the symbol ―→‖ and the type of the \r\nreturned value.\r\nTable 8 — Internal Properties Common to All Objects\r\nInternal Property Value Type Domain Description\r\n[[Prototype]] Object or Null The prototype of this object.\r\n[[Class]] String A String value indicating a specification defined \r\nclassification of objects.\r\n[[Extensible]] Boolean If true, own properties may be added to the \r\nobject.\r\n[[Get]] SpecOp(propertyName) →\r\nany\r\nReturns the value of the named property.\r\n[[GetOwnProperty]] SpecOp (propertyName) →\r\nUndefined or Property\r\nDescriptor\r\nReturns the Property Descriptor of the named \r\nown property of this object, or undefined if \r\nabsent.\r\n[[GetProperty]] SpecOp (propertyName) →\r\nUndefined or Property \r\nDescriptor\r\nReturns the fully populated Property Descriptor \r\nof the named property of this object, or \r\nundefined if absent.\r\n[[Put]] SpecOp (propertyName, \r\nany, Boolean)\r\nSets the specified named property to the value \r\nof the second parameter. The flag controls \r\nfailure handling.\r\n[[CanPut]] SpecOp (propertyName) →\r\nBoolean\r\nReturns a Boolean value indicating whether a \r\n[[Put]] operation with PropertyName can be \r\nperformed.\r\n[[HasProperty]] SpecOp (propertyName) →\r\nBoolean\r\nReturns a Boolean value indicating whether the \r\nobject already has a property with the given \r\nname.\r\n[[Delete]] SpecOp (propertyName, \r\nBoolean) → Boolean\r\nRemoves the specified named own property \r\nfrom the object. The flag controls failure \r\nhandling.\r\n[[DefaultValue]] SpecOp (Hint) → primitive Hint is a String. Returns a default value for the \r\nobject.\r\n[[DefineOwnProperty]] SpecOp (propertyName, \r\nPropertyDescriptor, \r\nBoolean) → Boolean\r\nCreates or alters the named own property to \r\nhave the state described by a Property \r\nDescriptor. The flag controls failure handling.\r\nEvery object (including host objects) must implement all of the internal properties listed in Table 8. However, \r\nthe [[DefaultValue]] internal method may, for some objects, simply throw a TypeError exception.\r\nAll objects have an internal property called [[Prototype]]. The value of this property is either null or an object \r\nand is used for implementing inheritance. Whether or not a native object can have a host object as its \r\n[[Prototype]] depends on the implementation. Every [[Prototype]] chain must have finite length (that is, starting \r\nfrom any object, recursively accessing the [[Prototype]] internal property must eventually lead to a null value). \r\nNamed data properties of the [[Prototype]] object are inherited (are visible as properties of the child object) for \r\nthe purposes of get access, but not for put access. Named accessor properties are inherited for both get \r\naccess and put access.\r\nEvery ECMAScript object has a Boolean-valued [[Extensible]] internal property that controls whether or not \r\nnamed properties may be added to the object. If the value of the [[Extensible]] internal property is false then \r\nadditional named properties may not be added to the object. In addition, if [[Extensible]] is false the value of \r\nthe [[Class]] and [[Prototype]] internal properties of the object may not be modified. Once the value of an \r\n[[Extensible]] internal property has been set to false it may not be subsequently changed to true.\r\nNOTE This specification defines no ECMAScript language operators or built-in functions that permit a program to \r\nmodify an object‘s [[Class]] or [[Prototype]] internal properties or to change the value of [[Extensible]] from false to true. \r\nImplementation specific extensions that modify [[Class]], [[Prototype]] or [[Extensible]] must not violate the invariants \r\ndefined in the preceding paragraph.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/eb6bef55-10d2-4e40-af9d-b6a0303c4259.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=98986b8789e0f148024ddffdbb329ec5c71b5d5da8a33cd77513339464332e20",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 541
      },
      {
        "segments": [
          {
            "segment_id": "eb6bef55-10d2-4e40-af9d-b6a0303c4259",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 44,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "32 © Ecma International 2011\r\nparameter. If a ―SpecOp‖ returns a value, its parameter list is followed by the symbol ―→‖ and the type of the \r\nreturned value.\r\nTable 8 — Internal Properties Common to All Objects\r\nInternal Property Value Type Domain Description\r\n[[Prototype]] Object or Null The prototype of this object.\r\n[[Class]] String A String value indicating a specification defined \r\nclassification of objects.\r\n[[Extensible]] Boolean If true, own properties may be added to the \r\nobject.\r\n[[Get]] SpecOp(propertyName) →\r\nany\r\nReturns the value of the named property.\r\n[[GetOwnProperty]] SpecOp (propertyName) →\r\nUndefined or Property\r\nDescriptor\r\nReturns the Property Descriptor of the named \r\nown property of this object, or undefined if \r\nabsent.\r\n[[GetProperty]] SpecOp (propertyName) →\r\nUndefined or Property \r\nDescriptor\r\nReturns the fully populated Property Descriptor \r\nof the named property of this object, or \r\nundefined if absent.\r\n[[Put]] SpecOp (propertyName, \r\nany, Boolean)\r\nSets the specified named property to the value \r\nof the second parameter. The flag controls \r\nfailure handling.\r\n[[CanPut]] SpecOp (propertyName) →\r\nBoolean\r\nReturns a Boolean value indicating whether a \r\n[[Put]] operation with PropertyName can be \r\nperformed.\r\n[[HasProperty]] SpecOp (propertyName) →\r\nBoolean\r\nReturns a Boolean value indicating whether the \r\nobject already has a property with the given \r\nname.\r\n[[Delete]] SpecOp (propertyName, \r\nBoolean) → Boolean\r\nRemoves the specified named own property \r\nfrom the object. The flag controls failure \r\nhandling.\r\n[[DefaultValue]] SpecOp (Hint) → primitive Hint is a String. Returns a default value for the \r\nobject.\r\n[[DefineOwnProperty]] SpecOp (propertyName, \r\nPropertyDescriptor, \r\nBoolean) → Boolean\r\nCreates or alters the named own property to \r\nhave the state described by a Property \r\nDescriptor. The flag controls failure handling.\r\nEvery object (including host objects) must implement all of the internal properties listed in Table 8. However, \r\nthe [[DefaultValue]] internal method may, for some objects, simply throw a TypeError exception.\r\nAll objects have an internal property called [[Prototype]]. The value of this property is either null or an object \r\nand is used for implementing inheritance. Whether or not a native object can have a host object as its \r\n[[Prototype]] depends on the implementation. Every [[Prototype]] chain must have finite length (that is, starting \r\nfrom any object, recursively accessing the [[Prototype]] internal property must eventually lead to a null value). \r\nNamed data properties of the [[Prototype]] object are inherited (are visible as properties of the child object) for \r\nthe purposes of get access, but not for put access. Named accessor properties are inherited for both get \r\naccess and put access.\r\nEvery ECMAScript object has a Boolean-valued [[Extensible]] internal property that controls whether or not \r\nnamed properties may be added to the object. If the value of the [[Extensible]] internal property is false then \r\nadditional named properties may not be added to the object. In addition, if [[Extensible]] is false the value of \r\nthe [[Class]] and [[Prototype]] internal properties of the object may not be modified. Once the value of an \r\n[[Extensible]] internal property has been set to false it may not be subsequently changed to true.\r\nNOTE This specification defines no ECMAScript language operators or built-in functions that permit a program to \r\nmodify an object‘s [[Class]] or [[Prototype]] internal properties or to change the value of [[Extensible]] from false to true. \r\nImplementation specific extensions that modify [[Class]], [[Prototype]] or [[Extensible]] must not violate the invariants \r\ndefined in the preceding paragraph.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/eb6bef55-10d2-4e40-af9d-b6a0303c4259.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=98986b8789e0f148024ddffdbb329ec5c71b5d5da8a33cd77513339464332e20",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 541
      },
      {
        "segments": [
          {
            "segment_id": "a3c8424e-0058-4a72-abf9-b3e1bc7e475c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 45,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 33\r\nThe value of the [[Class]] internal property is defined by this specification for every kind of built-in object. The \r\nvalue of the [[Class]] internal property of a host object may be any String value except one of \"Arguments\", \r\n\"Array\", \"Boolean\", \"Date\", \"Error\", \"Function\", \"JSON\", \"Math\", \"Number\", \"Object\", \r\n\"RegExp\", and \"String\". The value of a [[Class]] internal property is used internally to distinguish different \r\nkinds of objects. Note that this specification does not provide any means for a program to access that value \r\nexcept through Object.prototype.toString (see 15.2.4.2).\r\nUnless otherwise specified, the common internal methods of native ECMAScript objects behave as described \r\nin 8.12. Array objects have a slightly different implementation of the [[DefineOwnProperty]] internal method\r\n(see 15.4.5.1) and String objects have a slightly different implementation of the [[GetOwnProperty]] internal \r\nmethod (see 15.5.5.2). Arguments objects (10.6) have different implementations of [[Get]], [[GetOwnProperty]], \r\n[[DefineOwnProperty]], and [[Delete]]. Function objects (15.3) have a different implementation of [[Get]].\r\nHost objects may implement these internal methods in any manner unless specified otherwise; for example, \r\none possibility is that [[Get]] and [[Put]] for a particular host object indeed fetch and store property values but \r\n[[HasProperty]] always generates false. However, if any specified manipulation of a host object's internal \r\nproperties is not supported by an implementation, that manipulation must throw a TypeError exception when \r\nattempted.\r\nThe [[GetOwnProperty]] internal method of a host object must conform to the following invariants for each \r\nproperty of the host object:\r\n If a property is described as a data property and it may return different values over time, then either or \r\nboth of the [[Writable]] and [[Configurable]] attributes must be true even if no mechanism to change the \r\nvalue is exposed via the other internal methods.\r\n If a property is described as a data property and its [[Writable]] and [[Configurable]] are both false, then \r\nthe SameValue (according to 9.12) must be returned for the [[Value]] attribute of the property on all calls \r\nto [[GetOwnProperty]].\r\n If the attributes other than [[Writable]] may change over time or if the property might disappear, then the \r\n[[Configurable]] attribute must be true.\r\n If the [[Writable]] attribute may change from false to true, then the [[Configurable]] attribute must be true.\r\n If the value of the host object‘s [[Extensible]] internal property has been observed by ECMAScript code to \r\nbe false, then if a call to [[GetOwnProperty]] describes a property as non-existent all subsequent calls \r\nmust also describe that property as non-existent.\r\nThe [[DefineOwnProperty]] internal method of a host object must not permit the addition of a new property to a \r\nhost object if the [[Extensible]] internal property of that host object has been observed by ECMAScript code to \r\nbe false. \r\nIf the [[Extensible]] internal property of that host object has been observed by ECMAScript code to be false\r\nthen it must not subsequently become true.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/a3c8424e-0058-4a72-abf9-b3e1bc7e475c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a955ce7bf464ac9b97fd5a479f0df92066bce7d4c87f6c06ab317c4a4f46688b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 475
      },
      {
        "segments": [
          {
            "segment_id": "f80055b2-765e-497f-9281-3da4f712183b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 46,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "34 © Ecma International 2011\r\nTable 9 — Internal Properties Only Defined for Some Objects\r\nInternal Property Value Type \r\nDomain\r\nDescription\r\n[[PrimitiveValue]] primitive Internal state information associated with this object. Of the \r\nstandard built-in ECMAScript objects, only Boolean, Date, \r\nNumber, and String objects implement [[PrimitiveValue]].\r\n[[Construct]] SpecOp(a List of \r\nany) → Object\r\nCreates an object. Invoked via the new operator. The \r\narguments to the SpecOp are the arguments passed to the \r\nnew operator. Objects that implement this internal method \r\nare called constructors.\r\n[[Call]] SpecOp(any, a List \r\nof any) → any or\r\nReference\r\nExecutes code associated with the object. Invoked via a \r\nfunction call expression. The arguments to the SpecOp are\r\nthis object and a list containing the arguments passed to the \r\nfunction call expression. Objects that implement this internal \r\nmethod are callable. Only callable objects that are host \r\nobjects may return Reference values.\r\n[[HasInstance]] SpecOp(any) →\r\nBoolean\r\nReturns a Boolean value indicating whether the argument is \r\nlikely an Object that was constructed by this object. Of the \r\nstandard built-in ECMAScript objects, only Function objects\r\nimplement [[HasInstance]].\r\n[[Scope]] Lexical Environment A lexical environment that defines the environment in which \r\na Function object is executed. Of the standard built-in \r\nECMAScript objects, only Function objects implement \r\n[[Scope]].\r\n[[FormalParameters]] List of Strings A possibly empty List containing the identifier Strings of a \r\nFunction‘s FormalParameterList. Of the standard built-in \r\nECMAScript objects, only Function objects implement \r\n[[FormalParameterList]].\r\n[[Code]] ECMAScript code The ECMAScript code of a function. Of the standard built-in \r\nECMAScript objects, only Function objects implement \r\n[[Code]].\r\n[[TargetFunction]] Object The target function of a function object created using the \r\nstandard built-in Function.prototype.bind method. Only \r\nECMAScript objects created using Function.prototype.bind \r\nhave a [[TargetFunction]] internal property.\r\n[[BoundThis]] any The pre-bound this value of a function Object created using \r\nthe standard built-in Function.prototype.bind method. Only \r\nECMAScript objects created using Function.prototype.bind \r\nhave a [[BoundThis]] internal property.\r\n[[BoundArguments]] List of any The pre-bound argument values of a function Object created \r\nusing the standard built-in Function.prototype.bind method. \r\nOnly ECMAScript objects created using \r\nFunction.prototype.bind have a [[BoundArguments]] internal \r\nproperty.\r\n[[Match]] SpecOp(String, \r\nindex) →\r\nMatchResult\r\nTests for a regular expression match and returns a \r\nMatchResult value (see 15.10.2.1). Of the standard built-in \r\nECMAScript objects, only RegExp objects implement \r\n[[Match]].\r\n[[ParameterMap]] Object Provides a mapping between the properties of an arguments \r\nobject (see 10.6) and the formal parameters of the \r\nassociated function. Only ECMAScript objects that are \r\narguments objects have a [[ParameterMap]] internal \r\nproperty.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f80055b2-765e-497f-9281-3da4f712183b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=154f379734f8270359451b5be43401fa019cec569a9c2f7c2901f924fc4084d0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 399
      },
      {
        "segments": [
          {
            "segment_id": "c4390019-2dfc-4533-91f4-c1a10f2e1990",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 47,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 35\r\n8.7 The Reference Specification Type\r\nThe Reference type is used to explain the behaviour of such operators as delete, typeof, and the \r\nassignment operators. For example, the left-hand operand of an assignment is expected to produce a \r\nreference. The behaviour of assignment could, instead, be explained entirely in terms of a case analysis on \r\nthe syntactic form of the left-hand operand of an assignment operator, but for one difficulty: function calls are \r\npermitted to return references. This possibility is admitted purely for the sake of host objects. No built-in \r\nECMAScript function defined by this specification returns a reference and there is no provision for a user\u0002defined function to return a reference. (Another reason not to use a syntactic case analysis is that it would be \r\nlengthy and awkward, affecting many parts of the specification.)\r\nA Reference is a resolved name binding. A Reference consists of three components, the base value, the \r\nreferenced name and the Boolean valued strict reference flag. The base value is either undefined, an Object, a \r\nBoolean, a String, a Number, or an environment record (10.2.1). A base value of undefined indicates that the \r\nreference could not be resolved to a binding. The referenced name is a String.\r\nThe following abstract operations are used in this specification to access the components of references:\r\n GetBase(V). Returns the base value component of the reference V.\r\n GetReferencedName(V). Returns the referenced name component of the reference V.\r\n IsStrictReference(V). Returns the strict reference component of the reference V.\r\n HasPrimitiveBase(V). Returns true if the base value is a Boolean, String, or Number.\r\n IsPropertyReference(V). Returns true if either the base value is an object or HasPrimitiveBase(V) is true; \r\notherwise returns false. \r\n IsUnresolvableReference(V). Returns true if the base value is undefined and false otherwise.\r\nThe following abstract operations are used in this specification to operate on references:\r\n8.7.1 GetValue (V)\r\n1. If Type(V) is not Reference, return V.\r\n2. Let base be the result of calling GetBase(V).\r\n3. If IsUnresolvableReference(V), throw a ReferenceError exception.\r\n4. If IsPropertyReference(V), then\r\na. If HasPrimitiveBase(V) is false, then let get be the [[Get]] internal method of base, otherwise let get\r\nbe the special [[Get]] internal method defined below.\r\nb. Return the result of calling the get internal method using base as its this value, and passing \r\nGetReferencedName(V) for the argument.\r\n5. Else, base must be an environment record.\r\na. Return the result of calling the GetBindingValue (see 10.2.1) concrete method of base passing \r\nGetReferencedName(V) and IsStrictReference(V) as arguments.\r\nThe following [[Get]] internal method is used by GetValue when V is a property reference with a primitive base \r\nvalue. It is called using base as its this value and with property P as its argument. The following steps are \r\ntaken:\r\n1. Let O be ToObject(base).\r\n2. Let desc be the result of calling the [[GetProperty]] internal method of O with property name P.\r\n3. If desc is undefined, return undefined.\r\n4. If IsDataDescriptor(desc) is true, return desc.[[Value]].\r\n5. Otherwise, IsAccessorDescriptor(desc) must be true so, let getter be desc.[[Get]] (see 8.10).\r\n6. If getter is undefined, return undefined.\r\n7. Return the result calling the [[Call]] internal method of getter providing base as the this value and providing \r\nno arguments.\r\nNOTE The object that may be created in step 1 is not accessible outside of the above method. An implementation \r\nmight choose to avoid the actual creation of the object. The only situation where such an actual property access that uses \r\nthis internal method can have visible effect is when it invokes an accessor function.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c4390019-2dfc-4533-91f4-c1a10f2e1990.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=95548403835dd57192579f2c9d0d22b215297fc940da2876fb641caf2e28e49a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 594
      },
      {
        "segments": [
          {
            "segment_id": "c4390019-2dfc-4533-91f4-c1a10f2e1990",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 47,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 35\r\n8.7 The Reference Specification Type\r\nThe Reference type is used to explain the behaviour of such operators as delete, typeof, and the \r\nassignment operators. For example, the left-hand operand of an assignment is expected to produce a \r\nreference. The behaviour of assignment could, instead, be explained entirely in terms of a case analysis on \r\nthe syntactic form of the left-hand operand of an assignment operator, but for one difficulty: function calls are \r\npermitted to return references. This possibility is admitted purely for the sake of host objects. No built-in \r\nECMAScript function defined by this specification returns a reference and there is no provision for a user\u0002defined function to return a reference. (Another reason not to use a syntactic case analysis is that it would be \r\nlengthy and awkward, affecting many parts of the specification.)\r\nA Reference is a resolved name binding. A Reference consists of three components, the base value, the \r\nreferenced name and the Boolean valued strict reference flag. The base value is either undefined, an Object, a \r\nBoolean, a String, a Number, or an environment record (10.2.1). A base value of undefined indicates that the \r\nreference could not be resolved to a binding. The referenced name is a String.\r\nThe following abstract operations are used in this specification to access the components of references:\r\n GetBase(V). Returns the base value component of the reference V.\r\n GetReferencedName(V). Returns the referenced name component of the reference V.\r\n IsStrictReference(V). Returns the strict reference component of the reference V.\r\n HasPrimitiveBase(V). Returns true if the base value is a Boolean, String, or Number.\r\n IsPropertyReference(V). Returns true if either the base value is an object or HasPrimitiveBase(V) is true; \r\notherwise returns false. \r\n IsUnresolvableReference(V). Returns true if the base value is undefined and false otherwise.\r\nThe following abstract operations are used in this specification to operate on references:\r\n8.7.1 GetValue (V)\r\n1. If Type(V) is not Reference, return V.\r\n2. Let base be the result of calling GetBase(V).\r\n3. If IsUnresolvableReference(V), throw a ReferenceError exception.\r\n4. If IsPropertyReference(V), then\r\na. If HasPrimitiveBase(V) is false, then let get be the [[Get]] internal method of base, otherwise let get\r\nbe the special [[Get]] internal method defined below.\r\nb. Return the result of calling the get internal method using base as its this value, and passing \r\nGetReferencedName(V) for the argument.\r\n5. Else, base must be an environment record.\r\na. Return the result of calling the GetBindingValue (see 10.2.1) concrete method of base passing \r\nGetReferencedName(V) and IsStrictReference(V) as arguments.\r\nThe following [[Get]] internal method is used by GetValue when V is a property reference with a primitive base \r\nvalue. It is called using base as its this value and with property P as its argument. The following steps are \r\ntaken:\r\n1. Let O be ToObject(base).\r\n2. Let desc be the result of calling the [[GetProperty]] internal method of O with property name P.\r\n3. If desc is undefined, return undefined.\r\n4. If IsDataDescriptor(desc) is true, return desc.[[Value]].\r\n5. Otherwise, IsAccessorDescriptor(desc) must be true so, let getter be desc.[[Get]] (see 8.10).\r\n6. If getter is undefined, return undefined.\r\n7. Return the result calling the [[Call]] internal method of getter providing base as the this value and providing \r\nno arguments.\r\nNOTE The object that may be created in step 1 is not accessible outside of the above method. An implementation \r\nmight choose to avoid the actual creation of the object. The only situation where such an actual property access that uses \r\nthis internal method can have visible effect is when it invokes an accessor function.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c4390019-2dfc-4533-91f4-c1a10f2e1990.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=95548403835dd57192579f2c9d0d22b215297fc940da2876fb641caf2e28e49a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 594
      },
      {
        "segments": [
          {
            "segment_id": "6ec5cc5e-35d4-4ab9-a6ab-b4e7e0adb99d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 48,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "36 © Ecma International 2011\r\n8.7.2 PutValue (V, W)\r\n1. If Type(V) is not Reference, throw a ReferenceError exception.\r\n2. Let base be the result of calling GetBase(V).\r\n3. If IsUnresolvableReference(V), then\r\na. If IsStrictReference(V) is true, then\r\ni. Throw ReferenceError exception.\r\nb. Call the [[Put]] internal method of the global object, passing GetReferencedName(V) for the \r\nproperty name, W for the value, and false for the Throw flag.\r\n4. Else if IsPropertyReference(V), then\r\na. If HasPrimitiveBase(V) is false, then let put be the [[Put]] internal method of base, otherwise let put\r\nbe the special [[Put]] internal method defined below.\r\nb. Call the put internal method using base as its this value, and passing GetReferencedName(V) for the \r\nproperty name, W for the value, and IsStrictReference(V) for the Throw flag.\r\n5. Else base must be a reference whose base is an environment record. So,\r\na. Call the SetMutableBinding (10.2.1) concrete method of base, passing GetReferencedName(V), W, \r\nand IsStrictReference(V) as arguments.\r\n6. Return.\r\nThe following [[Put]] internal method is used by PutValue when V is a property reference with a primitive base \r\nvalue. It is called using base as its this value and with property P, value W, and Boolean flag Throw as \r\narguments. The following steps are taken:\r\n1. Let O be ToObject(base).\r\n2. If the result of calling the [[CanPut]] internal method of O with argument P is false, then\r\na. If Throw is true, then throw a TypeError exception.\r\nb. Else return.\r\n3. Let ownDesc be the result of calling the [[GetOwnProperty]] internal method of O with argument P.\r\n4. If IsDataDescriptor(ownDesc) is true, then\r\na. If Throw is true, then throw a TypeError exception.\r\nb. Else return.\r\n5. Let desc be the result of calling the [[GetProperty]] internal method of O with argument P. This may be \r\neither an own or inherited accessor property descriptor or an inherited data property descriptor.\r\n6. If IsAccessorDescriptor(desc) is true, then\r\na. Let setter be desc.[[Set]] (see 8.10) which cannot be undefined.\r\nb. Call the [[Call]] internal method of setter providing base as the this value and an argument list \r\ncontaining only W.\r\n7. Else, this is a request to create an own property on the transient object O\r\na. If Throw is true, then throw a TypeError exception.\r\n8. Return.\r\nNOTE The object that may be created in step 1 is not accessible outside of the above method. An implementation \r\nmight choose to avoid the actual creation of that transient object. The only situations where such an actual property \r\nassignment that uses this internal method can have visible effect are when it either invokes an accessor function or is in \r\nviolation of a Throw predicated error check. When Throw is true any property assignment that would create a new property \r\non the transient object throws an error.\r\n8.8 The List Specification Type\r\nThe List type is used to explain the evaluation of argument lists (see 11.2.4) in new expressions, in function \r\ncalls, and in other algorithms where a simple list of values is needed. Values of the List type are simply \r\nordered sequences of values. These sequences may be of any length.\r\n8.9 The Completion Specification Type\r\nThe Completion type is used to explain the behaviour of statements (break, continue, return and throw) \r\nthat perform nonlocal transfers of control. Values of the Completion type are triples of the form (type, value, \r\ntarget), where type is one of normal, break, continue, return, or throw, value is any ECMAScript language \r\nvalue or empty, and target is any ECMAScript identifier or empty. If cv is a completion value then cv.type, \r\ncv.value, and cv.target may be used to directly refer to its constituent values.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/6ec5cc5e-35d4-4ab9-a6ab-b4e7e0adb99d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7ac4132c6e18a7b6fd43d4ea0563cc3db9f3804d724b6f309a2df941757e8c90",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 608
      },
      {
        "segments": [
          {
            "segment_id": "6ec5cc5e-35d4-4ab9-a6ab-b4e7e0adb99d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 48,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "36 © Ecma International 2011\r\n8.7.2 PutValue (V, W)\r\n1. If Type(V) is not Reference, throw a ReferenceError exception.\r\n2. Let base be the result of calling GetBase(V).\r\n3. If IsUnresolvableReference(V), then\r\na. If IsStrictReference(V) is true, then\r\ni. Throw ReferenceError exception.\r\nb. Call the [[Put]] internal method of the global object, passing GetReferencedName(V) for the \r\nproperty name, W for the value, and false for the Throw flag.\r\n4. Else if IsPropertyReference(V), then\r\na. If HasPrimitiveBase(V) is false, then let put be the [[Put]] internal method of base, otherwise let put\r\nbe the special [[Put]] internal method defined below.\r\nb. Call the put internal method using base as its this value, and passing GetReferencedName(V) for the \r\nproperty name, W for the value, and IsStrictReference(V) for the Throw flag.\r\n5. Else base must be a reference whose base is an environment record. So,\r\na. Call the SetMutableBinding (10.2.1) concrete method of base, passing GetReferencedName(V), W, \r\nand IsStrictReference(V) as arguments.\r\n6. Return.\r\nThe following [[Put]] internal method is used by PutValue when V is a property reference with a primitive base \r\nvalue. It is called using base as its this value and with property P, value W, and Boolean flag Throw as \r\narguments. The following steps are taken:\r\n1. Let O be ToObject(base).\r\n2. If the result of calling the [[CanPut]] internal method of O with argument P is false, then\r\na. If Throw is true, then throw a TypeError exception.\r\nb. Else return.\r\n3. Let ownDesc be the result of calling the [[GetOwnProperty]] internal method of O with argument P.\r\n4. If IsDataDescriptor(ownDesc) is true, then\r\na. If Throw is true, then throw a TypeError exception.\r\nb. Else return.\r\n5. Let desc be the result of calling the [[GetProperty]] internal method of O with argument P. This may be \r\neither an own or inherited accessor property descriptor or an inherited data property descriptor.\r\n6. If IsAccessorDescriptor(desc) is true, then\r\na. Let setter be desc.[[Set]] (see 8.10) which cannot be undefined.\r\nb. Call the [[Call]] internal method of setter providing base as the this value and an argument list \r\ncontaining only W.\r\n7. Else, this is a request to create an own property on the transient object O\r\na. If Throw is true, then throw a TypeError exception.\r\n8. Return.\r\nNOTE The object that may be created in step 1 is not accessible outside of the above method. An implementation \r\nmight choose to avoid the actual creation of that transient object. The only situations where such an actual property \r\nassignment that uses this internal method can have visible effect are when it either invokes an accessor function or is in \r\nviolation of a Throw predicated error check. When Throw is true any property assignment that would create a new property \r\non the transient object throws an error.\r\n8.8 The List Specification Type\r\nThe List type is used to explain the evaluation of argument lists (see 11.2.4) in new expressions, in function \r\ncalls, and in other algorithms where a simple list of values is needed. Values of the List type are simply \r\nordered sequences of values. These sequences may be of any length.\r\n8.9 The Completion Specification Type\r\nThe Completion type is used to explain the behaviour of statements (break, continue, return and throw) \r\nthat perform nonlocal transfers of control. Values of the Completion type are triples of the form (type, value, \r\ntarget), where type is one of normal, break, continue, return, or throw, value is any ECMAScript language \r\nvalue or empty, and target is any ECMAScript identifier or empty. If cv is a completion value then cv.type, \r\ncv.value, and cv.target may be used to directly refer to its constituent values.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/6ec5cc5e-35d4-4ab9-a6ab-b4e7e0adb99d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7ac4132c6e18a7b6fd43d4ea0563cc3db9f3804d724b6f309a2df941757e8c90",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 608
      },
      {
        "segments": [
          {
            "segment_id": "0c00d525-9c2d-4cf5-b9d0-ad89b9389425",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 49,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 37\r\nThe term ―abrupt completion‖ refers to any completion with a type other than normal.\r\n8.10 The Property Descriptor and Property Identifier Specification Types\r\nThe Property Descriptor type is used to explain the manipulation and reification of named property attributes. \r\nValues of the Property Descriptor type are records composed of named fields where each field‘s name is an \r\nattribute name and its value is a corresponding attribute value as specified in 8.6.1. In addition, any field may \r\nbe present or absent.\r\nProperty Descriptor values may be further classified as data property descriptors and accessor property \r\ndescriptors based upon the existence or use of certain fields. A data property descriptor is one that includes \r\nany fields named either [[Value]] or [[Writable]]. An accessor property descriptor is one that includes any fields \r\nnamed either [[Get]] or [[Set]]. Any property descriptor may have fields named [[Enumerable]] and \r\n[[Configurable]]. A Property Descriptor value may not be both a data property descriptor and an accessor \r\nproperty descriptor; however, it may be neither. A generic property descriptor is a Property Descriptor value \r\nthat is neither a data property descriptor nor an accessor property descriptor. A fully populated property \r\ndescriptor is one that is either an accessor property descriptor or a data property descriptor and that has all of \r\nthe fields that correspond to the property attributes defined in either 8.6.1 Table 5 or Table 6.\r\nFor notational convenience within this specification, an object literal-like syntax can be used to define a \r\nproperty descriptor value. For example, Property Descriptor {[[Value]]: 42, [[Writable]]: false, [[Configurable]]: \r\ntrue} defines a data property descriptor. Field name order is not significant. Any fields that are not explicitly \r\nlisted are considered to be absent.\r\nIn specification text and algorithms, dot notation may be used to refer to a specific field of a Property \r\nDescriptor. For example, if D is a property descriptor then D.[[Value]] is shorthand for ―the field of D named \r\n[[Value]]‖.\r\nThe Property Identifier type is used to associate a property name with a Property Descriptor. Values of the \r\nProperty Identifier type are pairs of the form (name, descriptor), where name is a String and descriptor is a \r\nProperty Descriptor value. \r\nThe following abstract operations are used in this specification to operate upon Property Descriptor values:\r\n8.10.1 IsAccessorDescriptor ( Desc )\r\nWhen the abstract operation IsAccessorDescriptor is called with property descriptor Desc, the following steps \r\nare taken:\r\n1. If Desc is undefined, then return false.\r\n2. If both Desc.[[Get]] and Desc.[[Set]] are absent, then return false.\r\n3. Return true.\r\n8.10.2 IsDataDescriptor ( Desc )\r\nWhen the abstract operation IsDataDescriptor is called with property descriptor Desc, the following steps are \r\ntaken:\r\n1. If Desc is undefined, then return false.\r\n2. If both Desc.[[Value]] and Desc.[[Writable]] are absent, then return false.\r\n3. Return true.\r\n8.10.3 IsGenericDescriptor ( Desc )\r\nWhen the abstract operation IsGenericDescriptor is called with property descriptor Desc, the following steps \r\nare taken:\r\n1. If Desc is undefined, then return false.\r\n2. If IsAccessorDescriptor(Desc) and IsDataDescriptor(Desc) are both false, then return true.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0c00d525-9c2d-4cf5-b9d0-ad89b9389425.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e812ccbd59aa2e29965bcd0da03f458a2dd142838c0ff61851a4a42569dfa814",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 505
      },
      {
        "segments": [
          {
            "segment_id": "f8043cb6-da89-4941-98f6-ed3fab6b1f6f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 50,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "38 © Ecma International 2011\r\n3. Return false.\r\n8.10.4 FromPropertyDescriptor ( Desc )\r\nWhen the abstract operation FromPropertyDescriptor is called with property descriptor Desc, the following \r\nsteps are taken:\r\nThe following algorithm assumes that Desc is a fully populated Property Descriptor, such as that returned from \r\n[[GetOwnProperty]] (see 8.12.1).\r\n1. If Desc is undefined, then return undefined.\r\n2. Let obj be the result of creating a new object as if by the expression new Object() where Object is the standard \r\nbuilt-in constructor with that name.\r\n3. If IsDataDescriptor(Desc) is true, then \r\na. Call the [[DefineOwnProperty]] internal method of obj with arguments \"value\", Property Descriptor \r\n{[[Value]]: Desc.[[Value]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\nb. Call the [[DefineOwnProperty]] internal method of obj with arguments \"writable\", Property Descriptor \r\n{[[Value]]: Desc.[[Writable]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n4. Else, IsAccessorDescriptor(Desc) must be true, so\r\na. Call the [[DefineOwnProperty]] internal method of obj with arguments \"get\", Property Descriptor \r\n{[[Value]]: Desc.[[Get]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\nb. Call the [[DefineOwnProperty]] internal method of obj with arguments \"set\", Property Descriptor \r\n{[[Value]]: Desc.[[Set]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n5. Call the [[DefineOwnProperty]] internal method of obj with arguments \"enumerable\", Property Descriptor \r\n{[[Value]]: Desc.[[Enumerable]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n6. Call the [[DefineOwnProperty]] internal method of obj with arguments \"configurable\", Property Descriptor \r\n{[[Value]]: Desc.[[Configurable]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n7. Return obj.\r\n8.10.5 ToPropertyDescriptor ( Obj )\r\nWhen the abstract operation ToPropertyDescriptor is called with object Obj, the following steps are taken:\r\n1. If Type(Obj) is not Object throw a TypeError exception.\r\n2. Let desc be the result of creating a new Property Descriptor that initially has no fields.\r\n3. If the result of calling the [[HasProperty]] internal method of Obj with argument \"enumerable\" is true, \r\nthen\r\na. Let enum be the result of calling the [[Get]] internal method of Obj with \"enumerable\".\r\nb. Set the [[Enumerable]] field of desc to ToBoolean(enum).\r\n4. If the result of calling the [[HasProperty]] internal method of Obj with argument \"configurable\" is true, \r\nthen\r\na. Let conf be the result of calling the [[Get]] internal method of Obj with argument \r\n\"configurable\".\r\nb. Set the [[Configurable]] field of desc to ToBoolean(conf).\r\n5. If the result of calling the [[HasProperty]] internal method of Obj with argument \"value\" is true, then\r\na. Let value be the result of calling the [[Get]] internal method of Obj with argument ―value‖.\r\nb. Set the [[Value]] field of desc to value.\r\n6. If the result of calling the [[HasProperty]] internal method of Obj with argument \"writable\" is true, then\r\na. Let writable be the result of calling the [[Get]] internal method of Obj with argument \"writable\".\r\nb. Set the [[Writable]] field of desc to ToBoolean(writable).\r\n7. If the result of calling the [[HasProperty]] internal method of Obj with argument \"get\" is true, then\r\na. Let getter be the result of calling the [[Get]] internal method of Obj with argument \"get\".\r\nb. If IsCallable(getter) is false and getter is not undefined, then throw a TypeError exception.\r\nc. Set the [[Get]] field of desc to getter.\r\n8. If the result of calling the [[HasProperty]] internal method of Obj with argument \"set\" is true, then\r\na. Let setter be the result of calling the [[Get]] internal method of Obj with argument \"set\".\r\nb. If IsCallable(setter) is false and setter is not undefined, then throw a TypeError exception.\r\nc. Set the [[Set]] field of desc to setter.\r\n9. If either desc.[[Get]] or desc.[[Set]] are present, then\r\na. If either desc.[[Value]] or desc.[[Writable]] are present, then throw a TypeError exception.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f8043cb6-da89-4941-98f6-ed3fab6b1f6f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=60bfb024238cb40ab2be7b34df6ecdf3060e9e4f96f6fa0880a8ecb7665233ca",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 601
      },
      {
        "segments": [
          {
            "segment_id": "f8043cb6-da89-4941-98f6-ed3fab6b1f6f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 50,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "38 © Ecma International 2011\r\n3. Return false.\r\n8.10.4 FromPropertyDescriptor ( Desc )\r\nWhen the abstract operation FromPropertyDescriptor is called with property descriptor Desc, the following \r\nsteps are taken:\r\nThe following algorithm assumes that Desc is a fully populated Property Descriptor, such as that returned from \r\n[[GetOwnProperty]] (see 8.12.1).\r\n1. If Desc is undefined, then return undefined.\r\n2. Let obj be the result of creating a new object as if by the expression new Object() where Object is the standard \r\nbuilt-in constructor with that name.\r\n3. If IsDataDescriptor(Desc) is true, then \r\na. Call the [[DefineOwnProperty]] internal method of obj with arguments \"value\", Property Descriptor \r\n{[[Value]]: Desc.[[Value]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\nb. Call the [[DefineOwnProperty]] internal method of obj with arguments \"writable\", Property Descriptor \r\n{[[Value]]: Desc.[[Writable]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n4. Else, IsAccessorDescriptor(Desc) must be true, so\r\na. Call the [[DefineOwnProperty]] internal method of obj with arguments \"get\", Property Descriptor \r\n{[[Value]]: Desc.[[Get]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\nb. Call the [[DefineOwnProperty]] internal method of obj with arguments \"set\", Property Descriptor \r\n{[[Value]]: Desc.[[Set]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n5. Call the [[DefineOwnProperty]] internal method of obj with arguments \"enumerable\", Property Descriptor \r\n{[[Value]]: Desc.[[Enumerable]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n6. Call the [[DefineOwnProperty]] internal method of obj with arguments \"configurable\", Property Descriptor \r\n{[[Value]]: Desc.[[Configurable]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n7. Return obj.\r\n8.10.5 ToPropertyDescriptor ( Obj )\r\nWhen the abstract operation ToPropertyDescriptor is called with object Obj, the following steps are taken:\r\n1. If Type(Obj) is not Object throw a TypeError exception.\r\n2. Let desc be the result of creating a new Property Descriptor that initially has no fields.\r\n3. If the result of calling the [[HasProperty]] internal method of Obj with argument \"enumerable\" is true, \r\nthen\r\na. Let enum be the result of calling the [[Get]] internal method of Obj with \"enumerable\".\r\nb. Set the [[Enumerable]] field of desc to ToBoolean(enum).\r\n4. If the result of calling the [[HasProperty]] internal method of Obj with argument \"configurable\" is true, \r\nthen\r\na. Let conf be the result of calling the [[Get]] internal method of Obj with argument \r\n\"configurable\".\r\nb. Set the [[Configurable]] field of desc to ToBoolean(conf).\r\n5. If the result of calling the [[HasProperty]] internal method of Obj with argument \"value\" is true, then\r\na. Let value be the result of calling the [[Get]] internal method of Obj with argument ―value‖.\r\nb. Set the [[Value]] field of desc to value.\r\n6. If the result of calling the [[HasProperty]] internal method of Obj with argument \"writable\" is true, then\r\na. Let writable be the result of calling the [[Get]] internal method of Obj with argument \"writable\".\r\nb. Set the [[Writable]] field of desc to ToBoolean(writable).\r\n7. If the result of calling the [[HasProperty]] internal method of Obj with argument \"get\" is true, then\r\na. Let getter be the result of calling the [[Get]] internal method of Obj with argument \"get\".\r\nb. If IsCallable(getter) is false and getter is not undefined, then throw a TypeError exception.\r\nc. Set the [[Get]] field of desc to getter.\r\n8. If the result of calling the [[HasProperty]] internal method of Obj with argument \"set\" is true, then\r\na. Let setter be the result of calling the [[Get]] internal method of Obj with argument \"set\".\r\nb. If IsCallable(setter) is false and setter is not undefined, then throw a TypeError exception.\r\nc. Set the [[Set]] field of desc to setter.\r\n9. If either desc.[[Get]] or desc.[[Set]] are present, then\r\na. If either desc.[[Value]] or desc.[[Writable]] are present, then throw a TypeError exception.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f8043cb6-da89-4941-98f6-ed3fab6b1f6f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=60bfb024238cb40ab2be7b34df6ecdf3060e9e4f96f6fa0880a8ecb7665233ca",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 601
      },
      {
        "segments": [
          {
            "segment_id": "930368b1-de96-4490-9ad2-14c1dbafe9fd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 51,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 39\r\n10. Return desc.\r\n8.11 The Lexical Environment and Environment Record Specification Types\r\nThe Lexical Environment and Environment Record types are used to explain the behaviour of name resolution \r\nin nested functions and blocks. These types and the operations upon them are defined in Clause 10.\r\n8.12 Algorithms for Object Internal Methods\r\nIn the following algorithm descriptions, assume O is a native ECMAScript object, P is a String, Desc is a \r\nProperty Description record, and Throw is a Boolean flag.\r\n8.12.1 [[GetOwnProperty]] (P)\r\nWhen the [[GetOwnProperty]] internal method of O is called with property name P, the following steps are \r\ntaken:\r\n1. If O doesn‘t have an own property with name P, return undefined.\r\n2. Let D be a newly created Property Descriptor with no fields.\r\n3. Let X be O‘s own property named P.\r\n4. If X is a data property, then\r\na. Set D.[[Value]] to the value of X‘s [[Value]] attribute.\r\nb. Set D.[[Writable]] to the value of X‘s [[Writable]] attribute\r\n5. Else X is an accessor property, so\r\na. Set D.[[Get]] to the value of X‘s [[Get]] attribute.\r\nb. Set D.[[Set]] to the value of X‘s [[Set]] attribute.\r\n6. Set D.[[Enumerable]] to the value of X‘s [[Enumerable]] attribute.\r\n7. Set D.[[Configurable]] to the value of X‘s [[Configurable]] attribute.\r\n8. Return D.\r\nHowever, if O is a String object it has a more elaborate [[GetOwnProperty]] internal method defined in 15.5.5.2.\r\n8.12.2 [[GetProperty]] (P)\r\nWhen the [[GetProperty]] internal method of O is called with property name P, the following steps are taken:\r\n1. Let prop be the result of calling the [[GetOwnProperty]] internal method of O with property name P.\r\n2. If prop is not undefined, return prop.\r\n3. Let proto be the value of the [[Prototype]] internal property of O.\r\n4. If proto is null, return undefined.\r\n5. Return the result of calling the [[GetProperty]] internal method of proto with argument P.\r\n8.12.3 [[Get]] (P)\r\nWhen the [[Get]] internal method of O is called with property name P, the following steps are taken:\r\n1. Let desc be the result of calling the [[GetProperty]] internal method of O with property name P.\r\n2. If desc is undefined, return undefined.\r\n3. If IsDataDescriptor(desc) is true, return desc.[[Value]].\r\n4. Otherwise, IsAccessorDescriptor(desc) must be true so, let getter be desc.[[Get]].\r\n5. If getter is undefined, return undefined.\r\n6. Return the result calling the [[Call]] internal method of getter providing O as the this value and providing no \r\narguments.\r\n8.12.4 [[CanPut]] (P)\r\nWhen the [[CanPut]] internal method of O is called with property name P, the following steps are taken:\r\n1. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with argument P.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/930368b1-de96-4490-9ad2-14c1dbafe9fd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=61fbf94e9f7d62878375d0a96f9ea78e51ac490bafa0c5c1fc9420174001eeb0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 448
      },
      {
        "segments": [
          {
            "segment_id": "f957a1af-7133-4033-b144-2083649117ad",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 52,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "40 © Ecma International 2011\r\n2. If desc is not undefined, then\r\na. If IsAccessorDescriptor(desc) is true, then\r\ni. If desc.[[Set]] is undefined, then return false.\r\nii. Else return true.\r\nb. Else, desc must be a DataDescriptor so return the value of desc.[[Writable]].\r\n3. Let proto be the [[Prototype]] internal property of O.\r\n4. If proto is null, then return the value of the [[Extensible]] internal property of O.\r\n5. Let inherited be the result of calling the [[GetProperty]] internal method of proto with property name P.\r\n6. If inherited is undefined, return the value of the [[Extensible]] internal property of O.\r\n7. If IsAccessorDescriptor(inherited) is true, then\r\na. If inherited.[[Set]] is undefined, then return false.\r\nb. Else return true.\r\n8. Else, inherited must be a DataDescriptor\r\na. If the [[Extensible]] internal property of O is false, return false.\r\nb. Else return the value of inherited.[[Writable]].\r\nHost objects may define additional constraints upon [[Put]] operations. If possible, host objects should not \r\nallow [[Put]] operations in situations where this definition of [[CanPut]] returns false.\r\n8.12.5 [[Put]] ( P, V, Throw )\r\nWhen the [[Put]] internal method of O is called with property P, value V, and Boolean flag Throw, the following \r\nsteps are taken:\r\n1. If the result of calling the [[CanPut]] internal method of O with argument P is false, then\r\na. If Throw is true, then throw a TypeError exception.\r\nb. Else return.\r\n2. Let ownDesc be the result of calling the [[GetOwnProperty]] internal method of O with argument P.\r\n3. If IsDataDescriptor(ownDesc) is true, then\r\na. Let valueDesc be the Property Descriptor {[[Value]]: V}.\r\nb. Call the [[DefineOwnProperty]] internal method of O passing P, valueDesc, and Throw as \r\narguments.\r\nc. Return.\r\n4. Let desc be the result of calling the [[GetProperty]] internal method of O with argument P. This may be \r\neither an own or inherited accessor property descriptor or an inherited data property descriptor.\r\n5. If IsAccessorDescriptor(desc) is true, then\r\na. Let setter be desc.[[Set]] which cannot be undefined.\r\nb. Call the [[Call]] internal method of setter providing O as the this value and providing V as the sole \r\nargument.\r\n6. Else, create a named data property named P on object O as follows\r\na. Let newDesc be the Property Descriptor\r\n{[[Value]]: V, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}.\r\nb. Call the [[DefineOwnProperty]] internal method of O passing P, newDesc, and Throw as arguments.\r\n7. Return.\r\n8.12.6 [[HasProperty]] (P)\r\nWhen the [[HasProperty]] internal method of O is called with property name P, the following steps are taken:\r\n1. Let desc be the result of calling the [[GetProperty]] internal method of O with property name P.\r\n2. If desc is undefined, then return false.\r\n3. Else return true.\r\n8.12.7 [[Delete]] (P, Throw)\r\nWhen the [[Delete]] internal method of O is called with property name P and the Boolean flag Throw, the \r\nfollowing steps are taken:\r\n1. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with property name P.\r\n2. If desc is undefined, then return true.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f957a1af-7133-4033-b144-2083649117ad.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9722e6cc1822d3d859e1cf97590d2264801fe33133a66fc008dfd107dcf1af9e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 503
      },
      {
        "segments": [
          {
            "segment_id": "b7e15b43-80cd-4f57-af5e-8cbba34b1d3d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 53,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 41\r\n3. If desc.[[Configurable]] is true, then\r\na. Remove the own property with name P from O.\r\nb. Return true.\r\n4. Else if Throw, then throw a TypeError exception.\r\n5. Return false.\r\n8.12.8 [[DefaultValue]] (hint)\r\nWhen the [[DefaultValue]] internal method of O is called with hint String, the following steps are taken:\r\n1. Let toString be the result of calling the [[Get]] internal method of object O with argument \"toString\".\r\n2. If IsCallable(toString) is true then,\r\na. Let str be the result of calling the [[Call]] internal method of toString, with O as the this value and \r\nan empty argument list.\r\nb. If str is a primitive value, return str.\r\n3. Let valueOf be the result of calling the [[Get]] internal method of object O with argument \"valueOf\".\r\n4. If IsCallable(valueOf) is true then, \r\na. Let val be the result of calling the [[Call]] internal method of valueOf, with O as the this value and \r\nan empty argument list.\r\nb. If val is a primitive value, return val.\r\n5. Throw a TypeError exception.\r\nWhen the [[DefaultValue]] internal method of O is called with hint Number, the following steps are taken:\r\n1. Let valueOf be the result of calling the [[Get]] internal method of object O with argument \"valueOf\".\r\n2. If IsCallable(valueOf) is true then,\r\na. Let val be the result of calling the [[Call]] internal method of valueOf, with O as the this value and \r\nan empty argument list.\r\nb. If val is a primitive value, return val.\r\n3. Let toString be the result of calling the [[Get]] internal method of object O with argument \"toString\".\r\n4. If IsCallable(toString) is true then,\r\na. Let str be the result of calling the [[Call]] internal method of toString, with O as the this value and \r\nan empty argument list.\r\nb. If str is a primitive value, return str.\r\n5. Throw a TypeError exception.\r\nWhen the [[DefaultValue]] internal method of O is called with no hint, then it behaves as if the hint were \r\nNumber, unless O is a Date object (see 15.9.6), in which case it behaves as if the hint were String.\r\nThe above specification of [[DefaultValue]] for native objects can return only primitive values. If a host object \r\nimplements its own [[DefaultValue]] internal method, it must ensure that its [[DefaultValue]] internal method \r\ncan return only primitive values.\r\n8.12.9 [[DefineOwnProperty]] (P, Desc, Throw)\r\nIn the following algorithm, the term ―Reject‖ means ―If Throw is true, then throw a TypeError exception, \r\notherwise return false‖. The algorithm contains steps that test various fields of the Property Descriptor Desc for \r\nspecific values. The fields that are tested in this manner need not actually exist in Desc. If a field is absent \r\nthen its value is considered to be false.\r\nWhen the [[DefineOwnProperty]] internal method of O is called with property name P, property descriptor Desc, \r\nand Boolean flag Throw, the following steps are taken:\r\n1. Let current be the result of calling the [[GetOwnProperty]] internal method of O with property name P.\r\n2. Let extensible be the value of the [[Extensible]] internal property of O.\r\n3. If current is undefined and extensible is false, then Reject.\r\n4. If current is undefined and extensible is true, then\r\na. If IsGenericDescriptor(Desc) or IsDataDescriptor(Desc) is true, then\r\ni. Create an own data property named P of object O whose [[Value]], [[Writable]], \r\n[[Enumerable]] and [[Configurable]] attribute values are described by Desc. If the value of ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/b7e15b43-80cd-4f57-af5e-8cbba34b1d3d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b6868b4b00a2649675895048ff37ebc852a9dad41b6133dbcc21b4ee0bccc6f5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 571
      },
      {
        "segments": [
          {
            "segment_id": "b7e15b43-80cd-4f57-af5e-8cbba34b1d3d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 53,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 41\r\n3. If desc.[[Configurable]] is true, then\r\na. Remove the own property with name P from O.\r\nb. Return true.\r\n4. Else if Throw, then throw a TypeError exception.\r\n5. Return false.\r\n8.12.8 [[DefaultValue]] (hint)\r\nWhen the [[DefaultValue]] internal method of O is called with hint String, the following steps are taken:\r\n1. Let toString be the result of calling the [[Get]] internal method of object O with argument \"toString\".\r\n2. If IsCallable(toString) is true then,\r\na. Let str be the result of calling the [[Call]] internal method of toString, with O as the this value and \r\nan empty argument list.\r\nb. If str is a primitive value, return str.\r\n3. Let valueOf be the result of calling the [[Get]] internal method of object O with argument \"valueOf\".\r\n4. If IsCallable(valueOf) is true then, \r\na. Let val be the result of calling the [[Call]] internal method of valueOf, with O as the this value and \r\nan empty argument list.\r\nb. If val is a primitive value, return val.\r\n5. Throw a TypeError exception.\r\nWhen the [[DefaultValue]] internal method of O is called with hint Number, the following steps are taken:\r\n1. Let valueOf be the result of calling the [[Get]] internal method of object O with argument \"valueOf\".\r\n2. If IsCallable(valueOf) is true then,\r\na. Let val be the result of calling the [[Call]] internal method of valueOf, with O as the this value and \r\nan empty argument list.\r\nb. If val is a primitive value, return val.\r\n3. Let toString be the result of calling the [[Get]] internal method of object O with argument \"toString\".\r\n4. If IsCallable(toString) is true then,\r\na. Let str be the result of calling the [[Call]] internal method of toString, with O as the this value and \r\nan empty argument list.\r\nb. If str is a primitive value, return str.\r\n5. Throw a TypeError exception.\r\nWhen the [[DefaultValue]] internal method of O is called with no hint, then it behaves as if the hint were \r\nNumber, unless O is a Date object (see 15.9.6), in which case it behaves as if the hint were String.\r\nThe above specification of [[DefaultValue]] for native objects can return only primitive values. If a host object \r\nimplements its own [[DefaultValue]] internal method, it must ensure that its [[DefaultValue]] internal method \r\ncan return only primitive values.\r\n8.12.9 [[DefineOwnProperty]] (P, Desc, Throw)\r\nIn the following algorithm, the term ―Reject‖ means ―If Throw is true, then throw a TypeError exception, \r\notherwise return false‖. The algorithm contains steps that test various fields of the Property Descriptor Desc for \r\nspecific values. The fields that are tested in this manner need not actually exist in Desc. If a field is absent \r\nthen its value is considered to be false.\r\nWhen the [[DefineOwnProperty]] internal method of O is called with property name P, property descriptor Desc, \r\nand Boolean flag Throw, the following steps are taken:\r\n1. Let current be the result of calling the [[GetOwnProperty]] internal method of O with property name P.\r\n2. Let extensible be the value of the [[Extensible]] internal property of O.\r\n3. If current is undefined and extensible is false, then Reject.\r\n4. If current is undefined and extensible is true, then\r\na. If IsGenericDescriptor(Desc) or IsDataDescriptor(Desc) is true, then\r\ni. Create an own data property named P of object O whose [[Value]], [[Writable]], \r\n[[Enumerable]] and [[Configurable]] attribute values are described by Desc. If the value of ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/b7e15b43-80cd-4f57-af5e-8cbba34b1d3d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b6868b4b00a2649675895048ff37ebc852a9dad41b6133dbcc21b4ee0bccc6f5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 571
      },
      {
        "segments": [
          {
            "segment_id": "e104d369-45d0-4cac-a2c9-d10297fd2761",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 54,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "42 © Ecma International 2011\r\nan attribute field of Desc is absent, the attribute of the newly created property is set to its \r\ndefault value.\r\nb. Else, Desc must be an accessor Property Descriptor so,\r\ni. Create an own accessor property named P of object O whose [[Get]], [[Set]], \r\n[[Enumerable]] and [[Configurable]] attribute values are described by Desc. If the value of \r\nan attribute field of Desc is absent, the attribute of the newly created property is set to its \r\ndefault value.\r\nc. Return true.\r\n5. Return true, if every field in Desc is absent.\r\n6. Return true, if every field in Desc also occurs in current and the value of every field in Desc is the same \r\nvalue as the corresponding field in current when compared using the SameValue algorithm (9.12).\r\n7. If the [[Configurable]] field of current is false then\r\na. Reject, if the [[Configurable]] field of Desc is true.\r\nb. Reject, if the [[Enumerable]] field of Desc is present and the [[Enumerable]] fields of current and \r\nDesc are the Boolean negation of each other.\r\n8. If IsGenericDescriptor(Desc) is true, then no further validation is required.\r\n9. Else, if IsDataDescriptor(current) and IsDataDescriptor(Desc) have different results, then\r\na. Reject, if the [[Configurable]] field of current is false. \r\nb. If IsDataDescriptor(current) is true, then\r\ni. Convert the property named P of object O from a data property to an accessor property. \r\nPreserve the existing values of the converted property‘s [[Configurable]] and \r\n[[Enumerable]] attributes and set the rest of the property‘s attributes to their default values.\r\nc. Else,\r\ni. Convert the property named P of object O from an accessor property to a data property. \r\nPreserve the existing values of the converted property‘s [[Configurable]] and \r\n[[Enumerable]] attributes and set the rest of the property‘s attributes to their default values.\r\n10. Else, if IsDataDescriptor(current) and IsDataDescriptor(Desc) are both true, then\r\na. If the [[Configurable]] field of current is false, then\r\ni. Reject, if the [[Writable]] field of current is false and the [[Writable]] field of Desc is true.\r\nii. If the [[Writable]] field of current is false, then\r\n1. Reject, if the [[Value]] field of Desc is present and SameValue(Desc.[[Value]], \r\ncurrent.[[Value]]) is false. \r\nb. else, the [[Configurable]] field of current is true, so any change is acceptable.\r\n11. Else, IsAccessorDescriptor(current) and IsAccessorDescriptor(Desc) are both true so,\r\na. If the [[Configurable]] field of current is false, then\r\ni. Reject, if the [[Set]] field of Desc is present and SameValue(Desc.[[Set]], current.[[Set]]) is \r\nfalse.\r\nii. Reject, if the [[Get]] field of Desc is present and SameValue(Desc.[[Get]], current.[[Get]]) \r\nis false.\r\n12. For each attribute field of Desc that is present, set the correspondingly named attribute of the property \r\nnamed P of object O to the value of the field.\r\n13. Return true.\r\nHowever, if O is an Array object, it has a more elaborate [[DefineOwnProperty]] internal method defined in \r\n15.4.5.1.\r\nNOTE Step 10.b allows any field of Desc to be different from the corresponding field of current if current‘s \r\n[[Configurable]] field is true. This even permits changing the [[Value]] of a property whose [[Writable]] attribute is false. \r\nThis is allowed because a true [[Configurable]] attribute would permit an equivalent sequence of calls where [[Writable]] is \r\nfirst set to true, a new [[Value]] is set, and then [[Writable]] is set to false.\r\n9 Type Conversion and Testing\r\nThe ECMAScript runtime system performs automatic type conversion as needed. To clarify the semantics of \r\ncertain constructs it is useful to define a set of conversion abstract operations. These abstract operations are\r\nnot a part of the language; they are defined here to aid the specification of the semantics of the language. The \r\nconversion abstract operations are polymorphic; that is, they can accept a value of any ECMAScript language \r\ntype, but not of specification types.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/e104d369-45d0-4cac-a2c9-d10297fd2761.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=90795094223d08555afe622a7594abbce4ce1fc24d54ef7b671e9446b7f88fe6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 625
      },
      {
        "segments": [
          {
            "segment_id": "e104d369-45d0-4cac-a2c9-d10297fd2761",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 54,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "42 © Ecma International 2011\r\nan attribute field of Desc is absent, the attribute of the newly created property is set to its \r\ndefault value.\r\nb. Else, Desc must be an accessor Property Descriptor so,\r\ni. Create an own accessor property named P of object O whose [[Get]], [[Set]], \r\n[[Enumerable]] and [[Configurable]] attribute values are described by Desc. If the value of \r\nan attribute field of Desc is absent, the attribute of the newly created property is set to its \r\ndefault value.\r\nc. Return true.\r\n5. Return true, if every field in Desc is absent.\r\n6. Return true, if every field in Desc also occurs in current and the value of every field in Desc is the same \r\nvalue as the corresponding field in current when compared using the SameValue algorithm (9.12).\r\n7. If the [[Configurable]] field of current is false then\r\na. Reject, if the [[Configurable]] field of Desc is true.\r\nb. Reject, if the [[Enumerable]] field of Desc is present and the [[Enumerable]] fields of current and \r\nDesc are the Boolean negation of each other.\r\n8. If IsGenericDescriptor(Desc) is true, then no further validation is required.\r\n9. Else, if IsDataDescriptor(current) and IsDataDescriptor(Desc) have different results, then\r\na. Reject, if the [[Configurable]] field of current is false. \r\nb. If IsDataDescriptor(current) is true, then\r\ni. Convert the property named P of object O from a data property to an accessor property. \r\nPreserve the existing values of the converted property‘s [[Configurable]] and \r\n[[Enumerable]] attributes and set the rest of the property‘s attributes to their default values.\r\nc. Else,\r\ni. Convert the property named P of object O from an accessor property to a data property. \r\nPreserve the existing values of the converted property‘s [[Configurable]] and \r\n[[Enumerable]] attributes and set the rest of the property‘s attributes to their default values.\r\n10. Else, if IsDataDescriptor(current) and IsDataDescriptor(Desc) are both true, then\r\na. If the [[Configurable]] field of current is false, then\r\ni. Reject, if the [[Writable]] field of current is false and the [[Writable]] field of Desc is true.\r\nii. If the [[Writable]] field of current is false, then\r\n1. Reject, if the [[Value]] field of Desc is present and SameValue(Desc.[[Value]], \r\ncurrent.[[Value]]) is false. \r\nb. else, the [[Configurable]] field of current is true, so any change is acceptable.\r\n11. Else, IsAccessorDescriptor(current) and IsAccessorDescriptor(Desc) are both true so,\r\na. If the [[Configurable]] field of current is false, then\r\ni. Reject, if the [[Set]] field of Desc is present and SameValue(Desc.[[Set]], current.[[Set]]) is \r\nfalse.\r\nii. Reject, if the [[Get]] field of Desc is present and SameValue(Desc.[[Get]], current.[[Get]]) \r\nis false.\r\n12. For each attribute field of Desc that is present, set the correspondingly named attribute of the property \r\nnamed P of object O to the value of the field.\r\n13. Return true.\r\nHowever, if O is an Array object, it has a more elaborate [[DefineOwnProperty]] internal method defined in \r\n15.4.5.1.\r\nNOTE Step 10.b allows any field of Desc to be different from the corresponding field of current if current‘s \r\n[[Configurable]] field is true. This even permits changing the [[Value]] of a property whose [[Writable]] attribute is false. \r\nThis is allowed because a true [[Configurable]] attribute would permit an equivalent sequence of calls where [[Writable]] is \r\nfirst set to true, a new [[Value]] is set, and then [[Writable]] is set to false.\r\n9 Type Conversion and Testing\r\nThe ECMAScript runtime system performs automatic type conversion as needed. To clarify the semantics of \r\ncertain constructs it is useful to define a set of conversion abstract operations. These abstract operations are\r\nnot a part of the language; they are defined here to aid the specification of the semantics of the language. The \r\nconversion abstract operations are polymorphic; that is, they can accept a value of any ECMAScript language \r\ntype, but not of specification types.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/e104d369-45d0-4cac-a2c9-d10297fd2761.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=90795094223d08555afe622a7594abbce4ce1fc24d54ef7b671e9446b7f88fe6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 625
      },
      {
        "segments": [
          {
            "segment_id": "cf93a141-ba2c-472c-b701-700f03a05473",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 55,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 43\r\n9.1 ToPrimitive\r\nThe abstract operation ToPrimitive takes an input argument and an optional argument PreferredType. The \r\nabstract operation ToPrimitive converts its input argument to a non-Object type. If an object is capable of \r\nconverting to more than one primitive type, it may use the optional hint PreferredType to favour that type. \r\nConversion occurs according to Table 10:\r\nTable 10 — ToPrimitive Conversions\r\nInput Type Result\r\nUndefined The result equals the input argument (no conversion).\r\nNull The result equals the input argument (no conversion).\r\nBoolean The result equals the input argument (no conversion).\r\nNumber The result equals the input argument (no conversion).\r\nString The result equals the input argument (no conversion).\r\nObject Return a default value for the Object. The default value of an object is \r\nretrieved by calling the [[DefaultValue]] internal method of the object, \r\npassing the optional hint PreferredType. The behaviour of the \r\n[[DefaultValue]] internal method is defined by this specification for all native \r\nECMAScript objects in 8.12.8.\r\n9.2 ToBoolean\r\nThe abstract operation ToBoolean converts its argument to a value of type Boolean according to Table 11:\r\nTable 11 — ToBoolean Conversions\r\nArgument Type Result\r\nUndefined false\r\nNull false\r\nBoolean The result equals the input argument (no conversion).\r\nNumber The result is false if the argument is +0, 0, or NaN; otherwise the result is \r\ntrue.\r\nString The result is false if the argument is the empty String (its length is zero); \r\notherwise the result is true.\r\nObject true\r\n9.3 ToNumber\r\nThe abstract operation ToNumber converts its argument to a value of type Number according to Table 12:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/cf93a141-ba2c-472c-b701-700f03a05473.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9ca31262e5b3fc54e370a65075fb467cf84c0c1986d844a8f0abbd2fb5129a88",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f33b653c-fdf2-4489-8abe-bfbfd880c0b5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 56,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "44 © Ecma International 2011\r\nTable 12 — To Number Conversions\r\nArgument Type Result\r\nUndefined NaN\r\nNull +0\r\nBoolean The result is 1 if the argument is true. The result is +0 if the argument is \r\nfalse.\r\nNumber The result equals the input argument (no conversion).\r\nString See grammar and note below.\r\nObject Apply the following steps:\r\n1. Let primValue be ToPrimitive(input argument, hint Number).\r\n2. Return ToNumber(primValue).\r\n9.3.1 ToNumber Applied to the String Type\r\nToNumber applied to Strings applies the following grammar to the input String. If the grammar cannot interpret \r\nthe String as an expansion of StringNumericLiteral, then the result of ToNumber is NaN.\r\nSyntax\r\nStringNumericLiteral :::\r\nStrWhiteSpaceopt\r\nStrWhiteSpaceopt StrNumericLiteral StrWhiteSpaceopt\r\nStrWhiteSpace :::\r\nStrWhiteSpaceChar StrWhiteSpaceopt\r\nStrWhiteSpaceChar :::\r\nWhiteSpace\r\nLineTerminator\r\nStrNumericLiteral :::\r\nStrDecimalLiteral\r\nHexIntegerLiteral\r\nStrDecimalLiteral :::\r\nStrUnsignedDecimalLiteral\r\n+ StrUnsignedDecimalLiteral\r\n- StrUnsignedDecimalLiteral\r\nStrUnsignedDecimalLiteral :::\r\nInfinity\r\nDecimalDigits . DecimalDigitsopt ExponentPartopt\r\n. DecimalDigits ExponentPartopt\r\nDecimalDigits ExponentPartopt\r\nDecimalDigits :::\r\nDecimalDigit\r\nDecimalDigits DecimalDigit\r\nDecimalDigit ::: one of\r\n0 1 2 3 4 5 6 7 8 9\r\nExponentPart :::\r\nExponentIndicator SignedInteger",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f33b653c-fdf2-4489-8abe-bfbfd880c0b5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=034841dac4d9b2da5ecaa6237d8047c435134b4a34b2ee7af5ce25482557c29d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 431
      },
      {
        "segments": [
          {
            "segment_id": "f4f262b1-9361-49e8-8568-bba6ee2be566",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 57,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 45\r\nExponentIndicator ::: one of\r\ne E\r\nSignedInteger :::\r\nDecimalDigits\r\n+ DecimalDigits\r\n- DecimalDigits\r\nHexIntegerLiteral :::\r\n0x HexDigit\r\n0X HexDigit\r\nHexIntegerLiteral HexDigit\r\nHexDigit ::: one of\r\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\r\nSome differences should be noted between the syntax of a StringNumericLiteral and a NumericLiteral (see \r\n7.8.3):\r\n A StringNumericLiteral may be preceded and/or followed by white space and/or line terminators.\r\n A StringNumericLiteral that is decimal may have any number of leading 0 digits.\r\n A StringNumericLiteral that is decimal may be preceded by + or - to indicate its sign.\r\n A StringNumericLiteral that is empty or contains only white space is converted to +0.\r\nThe conversion of a String to a Number value is similar overall to the determination of the Number value for a \r\nnumeric literal (see 7.8.3), but some of the details are different, so the process for converting a String numeric \r\nliteral to a value of Number type is given here in full. This value is determined in two steps: first, a \r\nmathematical value (MV) is derived from the String numeric literal; second, this mathematical value is rounded \r\nas described below.\r\n The MV of StringNumericLiteral ::: [empty] is 0.\r\n The MV of StringNumericLiteral ::: StrWhiteSpace is 0.\r\n The MV of StringNumericLiteral ::: StrWhiteSpaceopt StrNumericLiteral StrWhiteSpaceopt is the MV of \r\nStrNumericLiteral, no matter whether white space is present or not.\r\n The MV of StrNumericLiteral ::: StrDecimalLiteral is the MV of StrDecimalLiteral.\r\n The MV of StrNumericLiteral ::: HexIntegerLiteral is the MV of HexIntegerLiteral.\r\n The MV of StrDecimalLiteral ::: StrUnsignedDecimalLiteral is the MV of StrUnsignedDecimalLiteral.\r\n The MV of StrDecimalLiteral ::: + StrUnsignedDecimalLiteral is the MV of StrUnsignedDecimalLiteral.\r\n The MV of StrDecimalLiteral ::: - StrUnsignedDecimalLiteral is the negative of the MV of \r\nStrUnsignedDecimalLiteral. (Note that if the MV of StrUnsignedDecimalLiteral is 0, the negative of this MV is \r\nalso 0. The rounding rule described below handles the conversion of this signless mathematical zero to a \r\nfloating-point +0 or 0 as appropriate.)\r\n The MV of StrUnsignedDecimalLiteral::: Infinity is 1010000 (a value so large that it will round to +).\r\n The MV of StrUnsignedDecimalLiteral::: DecimalDigits. is the MV of DecimalDigits.\r\n The MV of StrUnsignedDecimalLiteral::: DecimalDigits . DecimalDigits is the MV of the first DecimalDigits\r\nplus (the MV of the second DecimalDigits times 10n), where n is the number of characters in the second \r\nDecimalDigits.\r\n The MV of StrUnsignedDecimalLiteral::: DecimalDigits. ExponentPart is the MV of DecimalDigits times 10e, \r\nwhere e is the MV of ExponentPart.\r\n The MV of StrUnsignedDecimalLiteral::: DecimalDigits. DecimalDigits ExponentPart is (the MV of the first \r\nDecimalDigits plus (the MV of the second DecimalDigits times 10n)) times 10e, where n is the number of characters \r\nin the second DecimalDigits and e is the MV of ExponentPart.\r\n The MV of StrUnsignedDecimalLiteral:::. DecimalDigits is the MV of DecimalDigits times 10n, where n is the \r\nnumber of characters in DecimalDigits.\r\n The MV of StrUnsignedDecimalLiteral:::. DecimalDigits ExponentPart is the MV of DecimalDigits times 10en, \r\nwhere n is the number of characters in DecimalDigits and e is the MV of ExponentPart.\r\n The MV of StrUnsignedDecimalLiteral::: DecimalDigits is the MV of DecimalDigits.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f4f262b1-9361-49e8-8568-bba6ee2be566.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e44acd0696da049ded73f714fad849dbf2480202a6875b05d491ee95fe4dcd35",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 544
      },
      {
        "segments": [
          {
            "segment_id": "f4f262b1-9361-49e8-8568-bba6ee2be566",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 57,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 45\r\nExponentIndicator ::: one of\r\ne E\r\nSignedInteger :::\r\nDecimalDigits\r\n+ DecimalDigits\r\n- DecimalDigits\r\nHexIntegerLiteral :::\r\n0x HexDigit\r\n0X HexDigit\r\nHexIntegerLiteral HexDigit\r\nHexDigit ::: one of\r\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\r\nSome differences should be noted between the syntax of a StringNumericLiteral and a NumericLiteral (see \r\n7.8.3):\r\n A StringNumericLiteral may be preceded and/or followed by white space and/or line terminators.\r\n A StringNumericLiteral that is decimal may have any number of leading 0 digits.\r\n A StringNumericLiteral that is decimal may be preceded by + or - to indicate its sign.\r\n A StringNumericLiteral that is empty or contains only white space is converted to +0.\r\nThe conversion of a String to a Number value is similar overall to the determination of the Number value for a \r\nnumeric literal (see 7.8.3), but some of the details are different, so the process for converting a String numeric \r\nliteral to a value of Number type is given here in full. This value is determined in two steps: first, a \r\nmathematical value (MV) is derived from the String numeric literal; second, this mathematical value is rounded \r\nas described below.\r\n The MV of StringNumericLiteral ::: [empty] is 0.\r\n The MV of StringNumericLiteral ::: StrWhiteSpace is 0.\r\n The MV of StringNumericLiteral ::: StrWhiteSpaceopt StrNumericLiteral StrWhiteSpaceopt is the MV of \r\nStrNumericLiteral, no matter whether white space is present or not.\r\n The MV of StrNumericLiteral ::: StrDecimalLiteral is the MV of StrDecimalLiteral.\r\n The MV of StrNumericLiteral ::: HexIntegerLiteral is the MV of HexIntegerLiteral.\r\n The MV of StrDecimalLiteral ::: StrUnsignedDecimalLiteral is the MV of StrUnsignedDecimalLiteral.\r\n The MV of StrDecimalLiteral ::: + StrUnsignedDecimalLiteral is the MV of StrUnsignedDecimalLiteral.\r\n The MV of StrDecimalLiteral ::: - StrUnsignedDecimalLiteral is the negative of the MV of \r\nStrUnsignedDecimalLiteral. (Note that if the MV of StrUnsignedDecimalLiteral is 0, the negative of this MV is \r\nalso 0. The rounding rule described below handles the conversion of this signless mathematical zero to a \r\nfloating-point +0 or 0 as appropriate.)\r\n The MV of StrUnsignedDecimalLiteral::: Infinity is 1010000 (a value so large that it will round to +).\r\n The MV of StrUnsignedDecimalLiteral::: DecimalDigits. is the MV of DecimalDigits.\r\n The MV of StrUnsignedDecimalLiteral::: DecimalDigits . DecimalDigits is the MV of the first DecimalDigits\r\nplus (the MV of the second DecimalDigits times 10n), where n is the number of characters in the second \r\nDecimalDigits.\r\n The MV of StrUnsignedDecimalLiteral::: DecimalDigits. ExponentPart is the MV of DecimalDigits times 10e, \r\nwhere e is the MV of ExponentPart.\r\n The MV of StrUnsignedDecimalLiteral::: DecimalDigits. DecimalDigits ExponentPart is (the MV of the first \r\nDecimalDigits plus (the MV of the second DecimalDigits times 10n)) times 10e, where n is the number of characters \r\nin the second DecimalDigits and e is the MV of ExponentPart.\r\n The MV of StrUnsignedDecimalLiteral:::. DecimalDigits is the MV of DecimalDigits times 10n, where n is the \r\nnumber of characters in DecimalDigits.\r\n The MV of StrUnsignedDecimalLiteral:::. DecimalDigits ExponentPart is the MV of DecimalDigits times 10en, \r\nwhere n is the number of characters in DecimalDigits and e is the MV of ExponentPart.\r\n The MV of StrUnsignedDecimalLiteral::: DecimalDigits is the MV of DecimalDigits.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f4f262b1-9361-49e8-8568-bba6ee2be566.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e44acd0696da049ded73f714fad849dbf2480202a6875b05d491ee95fe4dcd35",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 544
      },
      {
        "segments": [
          {
            "segment_id": "032d9393-792d-4615-88f6-55137e945fe1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 58,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "46 © Ecma International 2011\r\n The MV of StrUnsignedDecimalLiteral::: DecimalDigits ExponentPart is the MV of DecimalDigits times 10e, \r\nwhere e is the MV of ExponentPart.\r\n The MV of DecimalDigits ::: DecimalDigit is the MV of DecimalDigit.\r\n The MV of DecimalDigits ::: DecimalDigits DecimalDigit is (the MV of DecimalDigits times 10) plus the MV of \r\nDecimalDigit.\r\n The MV of ExponentPart ::: ExponentIndicator SignedInteger is the MV of SignedInteger.\r\n The MV of SignedInteger ::: DecimalDigits is the MV of DecimalDigits.\r\n The MV of SignedInteger ::: + DecimalDigits is the MV of DecimalDigits.\r\n The MV of SignedInteger ::: - DecimalDigits is the negative of the MV of DecimalDigits.\r\n The MV of DecimalDigit ::: 0 or of HexDigit ::: 0 is 0.\r\n The MV of DecimalDigit ::: 1 or of HexDigit ::: 1 is 1.\r\n The MV of DecimalDigit ::: 2 or of HexDigit ::: 2 is 2.\r\n The MV of DecimalDigit ::: 3 or of HexDigit ::: 3 is 3.\r\n The MV of DecimalDigit ::: 4 or of HexDigit ::: 4 is 4.\r\n The MV of DecimalDigit ::: 5 or of HexDigit ::: 5 is 5.\r\n The MV of DecimalDigit ::: 6 or of HexDigit ::: 6 is 6.\r\n The MV of DecimalDigit ::: 7 or of HexDigit ::: 7 is 7.\r\n The MV of DecimalDigit ::: 8 or of HexDigit ::: 8 is 8.\r\n The MV of DecimalDigit ::: 9 or of HexDigit ::: 9 is 9.\r\n The MV of HexDigit ::: a or of HexDigit ::: A is 10.\r\n The MV of HexDigit ::: b or of HexDigit ::: B is 11.\r\n The MV of HexDigit ::: c or of HexDigit ::: C is 12.\r\n The MV of HexDigit ::: d or of HexDigit ::: D is 13.\r\n The MV of HexDigit ::: e or of HexDigit ::: E is 14.\r\n The MV of HexDigit ::: f or of HexDigit ::: F is 15.\r\n The MV of HexIntegerLiteral ::: 0x HexDigit is the MV of HexDigit.\r\n The MV of HexIntegerLiteral ::: 0X HexDigit is the MV of HexDigit.\r\n The MV of HexIntegerLiteral ::: HexIntegerLiteral HexDigit is (the MV of HexIntegerLiteral times 16) plus the \r\nMV of HexDigit.\r\nOnce the exact MV for a String numeric literal has been determined, it is then rounded to a value of the \r\nNumber type. If the MV is 0, then the rounded value is +0 unless the first non white space character in the \r\nString numeric literal is ‗-‘, in which case the rounded value is 0. Otherwise, the rounded value must be the \r\nNumber value for the MV (in the sense defined in 8.5), unless the literal includes a StrUnsignedDecimalLiteral\r\nand the literal has more than 20 significant digits, in which case the Number value may be either the Number \r\nvalue for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit or the \r\nNumber value for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit \r\nand then incrementing the literal at the 20th digit position. A digit is significant if it is not part of an ExponentPart\r\nand\r\n it is not 0; or\r\n there is a nonzero digit to its left and there is a nonzero digit, not in the ExponentPart, to its right.\r\n9.4 ToInteger\r\nThe abstract operation ToInteger converts its argument to an integral numeric value. This abstract operation \r\nfunctions as follows:\r\n1. Let number be the result of calling ToNumber on the input argument.\r\n2. If number is NaN, return +0.\r\n3. If number is +0, 0, +, or , return number.\r\n4. Return the result of computing sign(number)  floor(abs(number)).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/032d9393-792d-4615-88f6-55137e945fe1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b904c824cc79f863e70b1b2d9dbab84909679848f95c34dc8b9718780effb2b8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 636
      },
      {
        "segments": [
          {
            "segment_id": "032d9393-792d-4615-88f6-55137e945fe1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 58,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "46 © Ecma International 2011\r\n The MV of StrUnsignedDecimalLiteral::: DecimalDigits ExponentPart is the MV of DecimalDigits times 10e, \r\nwhere e is the MV of ExponentPart.\r\n The MV of DecimalDigits ::: DecimalDigit is the MV of DecimalDigit.\r\n The MV of DecimalDigits ::: DecimalDigits DecimalDigit is (the MV of DecimalDigits times 10) plus the MV of \r\nDecimalDigit.\r\n The MV of ExponentPart ::: ExponentIndicator SignedInteger is the MV of SignedInteger.\r\n The MV of SignedInteger ::: DecimalDigits is the MV of DecimalDigits.\r\n The MV of SignedInteger ::: + DecimalDigits is the MV of DecimalDigits.\r\n The MV of SignedInteger ::: - DecimalDigits is the negative of the MV of DecimalDigits.\r\n The MV of DecimalDigit ::: 0 or of HexDigit ::: 0 is 0.\r\n The MV of DecimalDigit ::: 1 or of HexDigit ::: 1 is 1.\r\n The MV of DecimalDigit ::: 2 or of HexDigit ::: 2 is 2.\r\n The MV of DecimalDigit ::: 3 or of HexDigit ::: 3 is 3.\r\n The MV of DecimalDigit ::: 4 or of HexDigit ::: 4 is 4.\r\n The MV of DecimalDigit ::: 5 or of HexDigit ::: 5 is 5.\r\n The MV of DecimalDigit ::: 6 or of HexDigit ::: 6 is 6.\r\n The MV of DecimalDigit ::: 7 or of HexDigit ::: 7 is 7.\r\n The MV of DecimalDigit ::: 8 or of HexDigit ::: 8 is 8.\r\n The MV of DecimalDigit ::: 9 or of HexDigit ::: 9 is 9.\r\n The MV of HexDigit ::: a or of HexDigit ::: A is 10.\r\n The MV of HexDigit ::: b or of HexDigit ::: B is 11.\r\n The MV of HexDigit ::: c or of HexDigit ::: C is 12.\r\n The MV of HexDigit ::: d or of HexDigit ::: D is 13.\r\n The MV of HexDigit ::: e or of HexDigit ::: E is 14.\r\n The MV of HexDigit ::: f or of HexDigit ::: F is 15.\r\n The MV of HexIntegerLiteral ::: 0x HexDigit is the MV of HexDigit.\r\n The MV of HexIntegerLiteral ::: 0X HexDigit is the MV of HexDigit.\r\n The MV of HexIntegerLiteral ::: HexIntegerLiteral HexDigit is (the MV of HexIntegerLiteral times 16) plus the \r\nMV of HexDigit.\r\nOnce the exact MV for a String numeric literal has been determined, it is then rounded to a value of the \r\nNumber type. If the MV is 0, then the rounded value is +0 unless the first non white space character in the \r\nString numeric literal is ‗-‘, in which case the rounded value is 0. Otherwise, the rounded value must be the \r\nNumber value for the MV (in the sense defined in 8.5), unless the literal includes a StrUnsignedDecimalLiteral\r\nand the literal has more than 20 significant digits, in which case the Number value may be either the Number \r\nvalue for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit or the \r\nNumber value for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit \r\nand then incrementing the literal at the 20th digit position. A digit is significant if it is not part of an ExponentPart\r\nand\r\n it is not 0; or\r\n there is a nonzero digit to its left and there is a nonzero digit, not in the ExponentPart, to its right.\r\n9.4 ToInteger\r\nThe abstract operation ToInteger converts its argument to an integral numeric value. This abstract operation \r\nfunctions as follows:\r\n1. Let number be the result of calling ToNumber on the input argument.\r\n2. If number is NaN, return +0.\r\n3. If number is +0, 0, +, or , return number.\r\n4. Return the result of computing sign(number)  floor(abs(number)).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/032d9393-792d-4615-88f6-55137e945fe1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b904c824cc79f863e70b1b2d9dbab84909679848f95c34dc8b9718780effb2b8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 636
      },
      {
        "segments": [
          {
            "segment_id": "088336e5-2ca8-45b5-8751-72484fb28a48",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 59,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 47\r\n9.5 ToInt32: (Signed 32 Bit Integer)\r\nThe abstract operation ToInt32 converts its argument to one of 2\r\n32 integer values in the range 231 through \r\n2\r\n31\r\n1, inclusive. This abstract operation functions as follows:\r\n1. Let number be the result of calling ToNumber on the input argument.\r\n2. If number is NaN, +0, 0, +, or , return +0.\r\n3. Let posInt be sign(number) * floor(abs(number)).\r\n4. Let int32bit be posInt modulo 232; that is, a finite integer value k of Number type with positive sign and less \r\nthan 232 in magnitude such that the mathematical difference of posInt and k is mathematically an integer \r\nmultiple of 232.\r\n5. If int32bit is greater than or equal to 231, return int32bit  2\r\n32, otherwise return int32bit.\r\nNOTE Given the above definition of ToInt32:\r\n The ToInt32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves that \r\nvalue unchanged.\r\n ToInt32(ToUint32(x)) is equal to ToInt32(x) for all values of x. (It is to preserve this latter property that + and  are \r\nmapped to +0.)\r\n ToInt32 maps 0 to +0.\r\n9.6 ToUint32: (Unsigned 32 Bit Integer)\r\nThe abstract operation ToUint32 converts its argument to one of 2\r\n32 integer values in the range 0 through 232\r\n1, \r\ninclusive. This abstraction operation functions as follows:\r\n1. Let number be the result of calling ToNumber on the input argument.\r\n2. If number is NaN, +0, 0, +, or , return +0.\r\n3. Let posInt be sign(number)  floor(abs(number)).\r\n4. Let int32bit be posInt modulo 232; that is, a finite integer value k of Number type with positive sign and less \r\nthan 232 in magnitude such that the mathematical difference of posInt and k is mathematically an integer \r\nmultiple of 232.\r\n5. Return int32bit.\r\nNOTE Given the above definition of ToUInt32:\r\n Step 5 is the only difference between ToUint32 and ToInt32.\r\n The ToUint32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves \r\nthat value unchanged.\r\n ToUint32(ToInt32(x)) is equal to ToUint32(x) for all values of x. (It is to preserve this latter property that + and  are \r\nmapped to +0.)\r\n ToUint32 maps 0 to +0.\r\n9.7 ToUint16: (Unsigned 16 Bit Integer)\r\nThe abstract operation ToUint16 converts its argument to one of 2\r\n16 integer values in the range 0 through 216\r\n1, \r\ninclusive. This abstract operation functions as follows:\r\n1. Let number be the result of calling ToNumber on the input argument.\r\n2. If number is NaN, +0, 0, +, or , return +0.\r\n3. Let posInt be sign(number)  floor(abs(number)).\r\n4. Let int16bit be posInt modulo 216; that is, a finite integer value k of Number type with positive sign and less \r\nthan 216 in magnitude such that the mathematical difference of posInt and k is mathematically an integer \r\nmultiple of 216.\r\n5. Return int16bit.\r\nNOTE Given the above definition of ToUint16:\r\n The substitution of 2\r\n16 for 232 in step 4 is the only difference between ToUint32 and ToUint16.\r\n ToUint16 maps 0 to +0.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/088336e5-2ca8-45b5-8751-72484fb28a48.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=977685e03ff8a68d791f28c0f00e7b6b39a347eac7d16348d34c3bde898527f0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 519
      },
      {
        "segments": [
          {
            "segment_id": "088336e5-2ca8-45b5-8751-72484fb28a48",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 59,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 47\r\n9.5 ToInt32: (Signed 32 Bit Integer)\r\nThe abstract operation ToInt32 converts its argument to one of 2\r\n32 integer values in the range 231 through \r\n2\r\n31\r\n1, inclusive. This abstract operation functions as follows:\r\n1. Let number be the result of calling ToNumber on the input argument.\r\n2. If number is NaN, +0, 0, +, or , return +0.\r\n3. Let posInt be sign(number) * floor(abs(number)).\r\n4. Let int32bit be posInt modulo 232; that is, a finite integer value k of Number type with positive sign and less \r\nthan 232 in magnitude such that the mathematical difference of posInt and k is mathematically an integer \r\nmultiple of 232.\r\n5. If int32bit is greater than or equal to 231, return int32bit  2\r\n32, otherwise return int32bit.\r\nNOTE Given the above definition of ToInt32:\r\n The ToInt32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves that \r\nvalue unchanged.\r\n ToInt32(ToUint32(x)) is equal to ToInt32(x) for all values of x. (It is to preserve this latter property that + and  are \r\nmapped to +0.)\r\n ToInt32 maps 0 to +0.\r\n9.6 ToUint32: (Unsigned 32 Bit Integer)\r\nThe abstract operation ToUint32 converts its argument to one of 2\r\n32 integer values in the range 0 through 232\r\n1, \r\ninclusive. This abstraction operation functions as follows:\r\n1. Let number be the result of calling ToNumber on the input argument.\r\n2. If number is NaN, +0, 0, +, or , return +0.\r\n3. Let posInt be sign(number)  floor(abs(number)).\r\n4. Let int32bit be posInt modulo 232; that is, a finite integer value k of Number type with positive sign and less \r\nthan 232 in magnitude such that the mathematical difference of posInt and k is mathematically an integer \r\nmultiple of 232.\r\n5. Return int32bit.\r\nNOTE Given the above definition of ToUInt32:\r\n Step 5 is the only difference between ToUint32 and ToInt32.\r\n The ToUint32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves \r\nthat value unchanged.\r\n ToUint32(ToInt32(x)) is equal to ToUint32(x) for all values of x. (It is to preserve this latter property that + and  are \r\nmapped to +0.)\r\n ToUint32 maps 0 to +0.\r\n9.7 ToUint16: (Unsigned 16 Bit Integer)\r\nThe abstract operation ToUint16 converts its argument to one of 2\r\n16 integer values in the range 0 through 216\r\n1, \r\ninclusive. This abstract operation functions as follows:\r\n1. Let number be the result of calling ToNumber on the input argument.\r\n2. If number is NaN, +0, 0, +, or , return +0.\r\n3. Let posInt be sign(number)  floor(abs(number)).\r\n4. Let int16bit be posInt modulo 216; that is, a finite integer value k of Number type with positive sign and less \r\nthan 216 in magnitude such that the mathematical difference of posInt and k is mathematically an integer \r\nmultiple of 216.\r\n5. Return int16bit.\r\nNOTE Given the above definition of ToUint16:\r\n The substitution of 2\r\n16 for 232 in step 4 is the only difference between ToUint32 and ToUint16.\r\n ToUint16 maps 0 to +0.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/088336e5-2ca8-45b5-8751-72484fb28a48.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=977685e03ff8a68d791f28c0f00e7b6b39a347eac7d16348d34c3bde898527f0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 519
      },
      {
        "segments": [
          {
            "segment_id": "0ffaed59-a8a1-4a61-aa5b-d720f68b69b1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 60,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "48 © Ecma International 2011\r\n9.8 ToString\r\nThe abstract operation ToString converts its argument to a value of type String according to Table 13:\r\nTable 13 — ToString Conversions\r\nArgument Type Result\r\nUndefined \"undefined\"\r\nNull \"null\"\r\nBoolean If the argument is true, then the result is \"true\".\r\nIf the argument is false, then the result is \"false\".\r\nNumber See 9.8.1.\r\nString Return the input argument (no conversion)\r\nObject Apply the following steps:\r\n1. Let primValue be ToPrimitive(input argument, hint String).\r\n2. Return ToString(primValue).\r\n9.8.1 ToString Applied to the Number Type\r\nThe abstract operation ToString converts a Number m to String format as follows:\r\n1. If m is NaN, return the String \"NaN\".\r\n2. If m is +0 or 0, return the String \"0\".\r\n3. If m is less than zero, return the String concatenation of the String \"-\" and ToString(m).\r\n4. If m is infinity, return the String \"Infinity\".\r\n5. Otherwise, let n, k, and s be integers such that k  1, 10k1 s < 10k, the Number value for s  10nkis m, and \r\nk is as small as possible. Note that k is the number of digits in the decimal representation of s, that s is not \r\ndivisible by 10, and that the least significant digit of s is not necessarily uniquely determined by these \r\ncriteria.\r\n6. If k  n  21, return the String consisting of the k digits of the decimal representation of s (in order, with no \r\nleading zeroes), followed by nk occurrences of the character ‗0‘.\r\n7. If 0 < n  21, return the String consisting of the most significant n digits of the decimal representation of s, \r\nfollowed by a decimal point ‗.‘, followed by the remaining kn digits of the decimal representation of s.\r\n8. If 6 < n  0, return the String consisting of the character ‗0‘, followed by a decimal point ‗.‘, followed by \r\nn occurrences of the character ‗0‘, followed by the k digits of the decimal representation of s.\r\n9. Otherwise, if k = 1, return the String consisting of the single digit of s, followed by lowercase character ‗e‘, \r\nfollowed by a plus sign ‗+‘ or minus sign ‗‘ according to whether n1 is positive or negative, followed by \r\nthe decimal representation of the integer abs(n1) (with no leading zeroes).\r\n10. Return the String consisting of the most significant digit of the decimal representation of s, followed by a \r\ndecimal point ‗.‘, followed by the remaining k1 digits of the decimal representation of s, followed by the \r\nlowercase character ‗e‘, followed by a plus sign ‗+‘ or minus sign ‗‘ according to whether n1 is positive \r\nor negative, followed by the decimal representation of the integer abs(n1) (with no leading zeroes).\r\nNOTE 1 The following observations may be useful as guidelines for implementations, but are not part of the normative \r\nrequirements of this Standard:\r\n If x is any Number value other than 0, then ToNumber(ToString(x)) is exactly the same Number value as x.\r\n The least significant digit of s is not always uniquely determined by the requirements listed in step 5.\r\nNOTE 2 For implementations that provide more accurate conversions than required by the rules above, it is \r\nrecommended that the following alternative version of step 5 be used as a guideline:\r\nOtherwise, let n, k, and s be integers such that k  1, 10k1 s < 10k, the Number value for s  10nkis m, and k is as small as \r\npossible. If there are multiple possibilities for s, choose the value of s for which s  10nkis closest in value to m. If there are \r\ntwo such possible values of s, choose the one that is even. Note that k is the number of digits in the decimal representation of \r\ns and that s is not divisible by 10.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0ffaed59-a8a1-4a61-aa5b-d720f68b69b1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=98e77bfaae8f88cfbf8f075ec4d7e206b1a6b06a70b628c41891ed7ed38211d8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 642
      },
      {
        "segments": [
          {
            "segment_id": "0ffaed59-a8a1-4a61-aa5b-d720f68b69b1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 60,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "48 © Ecma International 2011\r\n9.8 ToString\r\nThe abstract operation ToString converts its argument to a value of type String according to Table 13:\r\nTable 13 — ToString Conversions\r\nArgument Type Result\r\nUndefined \"undefined\"\r\nNull \"null\"\r\nBoolean If the argument is true, then the result is \"true\".\r\nIf the argument is false, then the result is \"false\".\r\nNumber See 9.8.1.\r\nString Return the input argument (no conversion)\r\nObject Apply the following steps:\r\n1. Let primValue be ToPrimitive(input argument, hint String).\r\n2. Return ToString(primValue).\r\n9.8.1 ToString Applied to the Number Type\r\nThe abstract operation ToString converts a Number m to String format as follows:\r\n1. If m is NaN, return the String \"NaN\".\r\n2. If m is +0 or 0, return the String \"0\".\r\n3. If m is less than zero, return the String concatenation of the String \"-\" and ToString(m).\r\n4. If m is infinity, return the String \"Infinity\".\r\n5. Otherwise, let n, k, and s be integers such that k  1, 10k1 s < 10k, the Number value for s  10nkis m, and \r\nk is as small as possible. Note that k is the number of digits in the decimal representation of s, that s is not \r\ndivisible by 10, and that the least significant digit of s is not necessarily uniquely determined by these \r\ncriteria.\r\n6. If k  n  21, return the String consisting of the k digits of the decimal representation of s (in order, with no \r\nleading zeroes), followed by nk occurrences of the character ‗0‘.\r\n7. If 0 < n  21, return the String consisting of the most significant n digits of the decimal representation of s, \r\nfollowed by a decimal point ‗.‘, followed by the remaining kn digits of the decimal representation of s.\r\n8. If 6 < n  0, return the String consisting of the character ‗0‘, followed by a decimal point ‗.‘, followed by \r\nn occurrences of the character ‗0‘, followed by the k digits of the decimal representation of s.\r\n9. Otherwise, if k = 1, return the String consisting of the single digit of s, followed by lowercase character ‗e‘, \r\nfollowed by a plus sign ‗+‘ or minus sign ‗‘ according to whether n1 is positive or negative, followed by \r\nthe decimal representation of the integer abs(n1) (with no leading zeroes).\r\n10. Return the String consisting of the most significant digit of the decimal representation of s, followed by a \r\ndecimal point ‗.‘, followed by the remaining k1 digits of the decimal representation of s, followed by the \r\nlowercase character ‗e‘, followed by a plus sign ‗+‘ or minus sign ‗‘ according to whether n1 is positive \r\nor negative, followed by the decimal representation of the integer abs(n1) (with no leading zeroes).\r\nNOTE 1 The following observations may be useful as guidelines for implementations, but are not part of the normative \r\nrequirements of this Standard:\r\n If x is any Number value other than 0, then ToNumber(ToString(x)) is exactly the same Number value as x.\r\n The least significant digit of s is not always uniquely determined by the requirements listed in step 5.\r\nNOTE 2 For implementations that provide more accurate conversions than required by the rules above, it is \r\nrecommended that the following alternative version of step 5 be used as a guideline:\r\nOtherwise, let n, k, and s be integers such that k  1, 10k1 s < 10k, the Number value for s  10nkis m, and k is as small as \r\npossible. If there are multiple possibilities for s, choose the value of s for which s  10nkis closest in value to m. If there are \r\ntwo such possible values of s, choose the one that is even. Note that k is the number of digits in the decimal representation of \r\ns and that s is not divisible by 10.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0ffaed59-a8a1-4a61-aa5b-d720f68b69b1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=98e77bfaae8f88cfbf8f075ec4d7e206b1a6b06a70b628c41891ed7ed38211d8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 642
      },
      {
        "segments": [
          {
            "segment_id": "3ca93ded-5b82-4946-afca-86758d515170",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 61,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 49\r\nNOTE 3 Implementers of ECMAScript may find useful the paper and code written by David M. Gay for binary-to-decimal \r\nconversion of floating-point numbers:\r\nGay, David M. Correctly Rounded Binary-Decimal and Decimal-Binary Conversions. Numerical Analysis,\r\nManuscript 90-10. AT&T Bell Laboratories (Murray Hill, New Jersey). November 30, 1990. Available as\r\nhttp://cm.bell-labs.com/cm/cs/doc/90/4-10.ps.gz. Associated code available as\r\nhttp://cm.bell-labs.com/netlib/fp/dtoa.c.gz and as\r\nhttp://cm.bell-labs.com/netlib/fp/g_fmt.c.gz and may also be found at the various netlib mirror sites.\r\n9.9 ToObject\r\nThe abstract operation ToObject converts its argument to a value of type Object according to Table 14:\r\nTable 14 — ToObject\r\nArgument Type Result\r\nUndefined Throw a TypeError exception.\r\nNull Throw a TypeError exception.\r\nBoolean Create a new Boolean object whose [[PrimitiveValue]] internal property is \r\nset to the value of the argument. See 15.6 for a description of Boolean \r\nobjects.\r\nNumber Create a new Number object whose [[PrimitiveValue]] internal property is \r\nset to the value of the argument. See 15.7 for a description of Number \r\nobjects.\r\nString Create a new String object whose [[PrimitiveValue]] internal property is set \r\nto the value of the argument. See 15.5 for a description of String objects.\r\nObject The result is the input argument (no conversion).\r\n9.10 CheckObjectCoercible\r\nThe abstract operation CheckObjectCoercible throws an error if its argument is a value that cannot be \r\nconverted to an Object using ToObject. It is defined by Table 15:\r\nTable 15 — CheckObjectCoercible Results\r\nArgument Type Result\r\nUndefined Throw a TypeError exception.\r\nNull Throw a TypeError exception.\r\nBoolean Return\r\nNumber Return\r\nString Return\r\nObject Return\r\n9.11 IsCallable\r\nThe abstract operation IsCallable determines if its argument, which must be an ECMAScript language value, \r\nis a callable function Object according to Table 16:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/3ca93ded-5b82-4946-afca-86758d515170.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f68065eb295b81adf3d9ae64f0303c53d7defb0da867d9bc16e7107958002c51",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 278
      },
      {
        "segments": [
          {
            "segment_id": "52a95f9a-47bf-4cd4-b05a-de2de742c028",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 62,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "50 © Ecma International 2011\r\nTable 16 — IsCallable Results\r\nArgument Type Result\r\nUndefined Return false.\r\nNull Return false.\r\nBoolean Return false.\r\nNumber Return false.\r\nString Return false.\r\nObject If the argument object has a [[Call]] internal method, then return true, \r\notherwise return false.\r\n9.12 The SameValue Algorithm\r\nThe internal comparison abstract operation SameValue(x, y), where x and y are ECMAScript language values, \r\nproduces true or false. Such a comparison is performed as follows:\r\n1. If Type(x) is different from Type(y), return false.\r\n2. If Type(x) is Undefined, return true.\r\n3. If Type(x) is Null, return true.\r\n4. If Type(x) is Number, then.\r\na. If x is NaN and y is NaN, return true.\r\nb. If x is +0 and y is -0, return false.\r\nc. If x is -0 and y is +0, return false.\r\nd. If x is the same Number value as y, return true.\r\ne. Return false.\r\n5. If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and \r\nsame characters in corresponding positions); otherwise, return false.\r\n6. If Type(x) is Boolean, return true if x and y are both true or both false; otherwise, return false.\r\n7. Return true if x and y refer to the same object. Otherwise, return false.\r\n10 Executable Code and Execution Contexts\r\n10.1 Types of Executable Code\r\nThere are three types of ECMAScript executable code:\r\n Global code is source text that is treated as an ECMAScript Program. The global code of a \r\nparticular Program does not include any source text that is parsed as part of a FunctionBody.\r\n Eval code is the source text supplied to the built-in eval function. More precisely, if the parameter \r\nto the built-in eval function is a String, it is treated as an ECMAScript Program. The eval code for a \r\nparticular invocation of eval is the global code portion of that Program.\r\n Function code is source text that is parsed as part of a FunctionBody. The function code of a \r\nparticular FunctionBody does not include any source text that is parsed as part of a nested \r\nFunctionBody. Function code also denotes the source text supplied when using the built-in \r\nFunction object as a constructor. More precisely, the last parameter provided to the Function\r\nconstructor is converted to a String and treated as the FunctionBody. If more than one parameter is \r\nprovided to the Function constructor, all parameters except the last one are converted to Strings\r\nand concatenated together, separated by commas. The resulting String is interpreted as the \r\nFormalParameterList for the FunctionBody defined by the last parameter. The function code for a \r\nparticular instantiation of a Function does not include any source text that is parsed as part of a \r\nnested FunctionBody.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/52a95f9a-47bf-4cd4-b05a-de2de742c028.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ff5b8acbc0092d1c5c39feb8917424ea4e02a764ddb91583708a7f973b88d9cb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 460
      },
      {
        "segments": [
          {
            "segment_id": "aa68d20a-5acc-4f04-91a5-50570f84b1f5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 63,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 51\r\n10.1.1 Strict Mode Code\r\nAn ECMAScript Program syntactic unit may be processed using either unrestricted or strict mode syntax and \r\nsemantics. When processed using strict mode the three types of ECMAScript code are referred to as strict \r\nglobal code, strict eval code, and strict function code. Code is interpreted as strict mode code in the following \r\nsituations:\r\n Global code is strict global code if it begins with a Directive Prologue that contains a Use Strict Directive\r\n(see 14.1).\r\n Eval code is strict eval code if it begins with a Directive Prologue that contains a Use Strict Directive or if \r\nthe call to eval is a direct call (see 15.1.2.1.1) to the eval function that is contained in strict mode code. \r\n Function code that is part of a FunctionDeclaration, FunctionExpression, or accessor PropertyAssignment is \r\nstrict function code if its FunctionDeclaration, FunctionExpression, or PropertyAssignment is contained in strict \r\nmode code or if the function code begins with a Directive Prologue that contains a Use Strict Directive.\r\n Function code that is supplied as the last argument to the built-in Function constructor is strict function \r\ncode if the last argument is a String that when processed as a FunctionBody begins with a Directive \r\nPrologue that contains a Use Strict Directive.\r\n10.2 Lexical Environments\r\nA Lexical Environment is a specification type used to define the association of Identifiers to specific variables \r\nand functions based upon the lexical nesting structure of ECMAScript code. A Lexical Environment consists of \r\nan Environment Record and a possibly null reference to an outer Lexical Environment. Usually a Lexical \r\nEnvironment is associated with some specific syntactic structure of ECMAScript code such as a \r\nFunctionDeclaration, a WithStatement, or a Catch clause of a TryStatement and a new Lexical Environment is \r\ncreated each time such code is evaluated.\r\nAn Environment Record records the identifier bindings that are created within the scope of its associated \r\nLexical Environment.\r\nThe outer environment reference is used to model the logical nesting of Lexical Environment values. The \r\nouter reference of a (inner) Lexical Environment is a reference to the Lexical Environment that logically \r\nsurrounds the inner Lexical Environment. An outer Lexical Environment may, of course, have its own outer \r\nLexical Environment. A Lexical Environment may serve as the outer environment for multiple inner Lexical \r\nEnvironments. For example, if a FunctionDeclaration contains two nested FunctionDeclarations then the Lexical \r\nEnvironments of each of the nested functions will have as their outer Lexical Environment the Lexical \r\nEnvironment of the current execution of the surrounding function.\r\nLexical Environments and Environment Record values are purely specification mechanisms and need not \r\ncorrespond to any specific artefact of an ECMAScript implementation. It is impossible for an ECMAScript \r\nprogram to directly access or manipulate such values.\r\n10.2.1 Environment Records\r\nThere are two kinds of Environment Record values used in this specification: declarative environment records\r\nand object environment records. Declarative environment records are used to define the effect of ECMAScript \r\nlanguage syntactic elements such as FunctionDeclarations, VariableDeclarations, and Catch clauses that directly \r\nassociate identifier bindings with ECMAScript language values. Object environment records are used to define \r\nthe effect of ECMAScript elements such as Program and WithStatement that associate identifier bindings with \r\nthe properties of some object.\r\nFor specification purposes Environment Record values can be thought of as existing in a simple object\u0002oriented hierarchy where Environment Record is an abstract class with two concrete subclasses, declarative \r\nenvironment record and object environment record. The abstract class includes the abstract specification ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/aa68d20a-5acc-4f04-91a5-50570f84b1f5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=562c5e502ea18d049bc0508209f76926e5214cb797d95faddad6fe270e514ae4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 580
      },
      {
        "segments": [
          {
            "segment_id": "aa68d20a-5acc-4f04-91a5-50570f84b1f5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 63,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 51\r\n10.1.1 Strict Mode Code\r\nAn ECMAScript Program syntactic unit may be processed using either unrestricted or strict mode syntax and \r\nsemantics. When processed using strict mode the three types of ECMAScript code are referred to as strict \r\nglobal code, strict eval code, and strict function code. Code is interpreted as strict mode code in the following \r\nsituations:\r\n Global code is strict global code if it begins with a Directive Prologue that contains a Use Strict Directive\r\n(see 14.1).\r\n Eval code is strict eval code if it begins with a Directive Prologue that contains a Use Strict Directive or if \r\nthe call to eval is a direct call (see 15.1.2.1.1) to the eval function that is contained in strict mode code. \r\n Function code that is part of a FunctionDeclaration, FunctionExpression, or accessor PropertyAssignment is \r\nstrict function code if its FunctionDeclaration, FunctionExpression, or PropertyAssignment is contained in strict \r\nmode code or if the function code begins with a Directive Prologue that contains a Use Strict Directive.\r\n Function code that is supplied as the last argument to the built-in Function constructor is strict function \r\ncode if the last argument is a String that when processed as a FunctionBody begins with a Directive \r\nPrologue that contains a Use Strict Directive.\r\n10.2 Lexical Environments\r\nA Lexical Environment is a specification type used to define the association of Identifiers to specific variables \r\nand functions based upon the lexical nesting structure of ECMAScript code. A Lexical Environment consists of \r\nan Environment Record and a possibly null reference to an outer Lexical Environment. Usually a Lexical \r\nEnvironment is associated with some specific syntactic structure of ECMAScript code such as a \r\nFunctionDeclaration, a WithStatement, or a Catch clause of a TryStatement and a new Lexical Environment is \r\ncreated each time such code is evaluated.\r\nAn Environment Record records the identifier bindings that are created within the scope of its associated \r\nLexical Environment.\r\nThe outer environment reference is used to model the logical nesting of Lexical Environment values. The \r\nouter reference of a (inner) Lexical Environment is a reference to the Lexical Environment that logically \r\nsurrounds the inner Lexical Environment. An outer Lexical Environment may, of course, have its own outer \r\nLexical Environment. A Lexical Environment may serve as the outer environment for multiple inner Lexical \r\nEnvironments. For example, if a FunctionDeclaration contains two nested FunctionDeclarations then the Lexical \r\nEnvironments of each of the nested functions will have as their outer Lexical Environment the Lexical \r\nEnvironment of the current execution of the surrounding function.\r\nLexical Environments and Environment Record values are purely specification mechanisms and need not \r\ncorrespond to any specific artefact of an ECMAScript implementation. It is impossible for an ECMAScript \r\nprogram to directly access or manipulate such values.\r\n10.2.1 Environment Records\r\nThere are two kinds of Environment Record values used in this specification: declarative environment records\r\nand object environment records. Declarative environment records are used to define the effect of ECMAScript \r\nlanguage syntactic elements such as FunctionDeclarations, VariableDeclarations, and Catch clauses that directly \r\nassociate identifier bindings with ECMAScript language values. Object environment records are used to define \r\nthe effect of ECMAScript elements such as Program and WithStatement that associate identifier bindings with \r\nthe properties of some object.\r\nFor specification purposes Environment Record values can be thought of as existing in a simple object\u0002oriented hierarchy where Environment Record is an abstract class with two concrete subclasses, declarative \r\nenvironment record and object environment record. The abstract class includes the abstract specification ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/aa68d20a-5acc-4f04-91a5-50570f84b1f5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=562c5e502ea18d049bc0508209f76926e5214cb797d95faddad6fe270e514ae4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 580
      },
      {
        "segments": [
          {
            "segment_id": "01f2c75e-8cc2-4ab3-974f-aaa47e9ca99e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 64,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "52 © Ecma International 2011\r\nmethods defined in Table 17. These abstract methods have distinct concrete algorithms for each of the \r\nconcrete subclasses. \r\nTable 17 — Abstract Methods of Environment Records\r\nMethod Purpose\r\nHasBinding(N) Determine if an environment record has a binding for an \r\nidentifier. Return true if it does and false if it does not. The \r\nString value N is the text of the identifier.\r\nCreateMutableBinding(N, D) Create a new mutable binding in an environment record. The \r\nString value N is the text of the bound name. If the optional \r\nBoolean argument D is true the binding is may be subsequently \r\ndeleted. \r\nSetMutableBinding(N,V, S) Set the value of an already existing mutable binding in an \r\nenvironment record. The String value N is the text of the bound \r\nname. V is the value for the binding and may be a value of any \r\nECMAScript language type. S is a Boolean flag. If S is true and \r\nthe binding cannot be set throw a TypeError exception. S is \r\nused to identify strict mode references.\r\nGetBindingValue(N,S) Returns the value of an already existing binding from an \r\nenvironment record. The String value N is the text of the bound \r\nname. S is used to identify strict mode references. If S is true\r\nand the binding does not exist or is uninitialised throw a \r\nReferenceError exception. \r\nDeleteBinding(N) Delete a binding from an environment record. The String value N\r\nis the text of the bound name If a binding for N exists, remove \r\nthe binding and return true. If the binding exists but cannot be \r\nremoved return false. If the binding does not exist return true.\r\nImplicitThisValue() Returns the value to use as the this value on calls to function \r\nobjects that are obtained as binding values from this \r\nenvironment record. \r\n10.2.1.1 Declarative Environment Records\r\nEach declarative environment record is associated with an ECMAScript program scope containing variable \r\nand/or function declarations. A declarative environment record binds the set of identifiers defined by the \r\ndeclarations contained within its scope.\r\nIn addition to the mutable bindings supported by all Environment Records, declarative environment records \r\nalso provide for immutable bindings. An immutable binding is one where the association between an identifier \r\nand a value may not be modified once it has been established. Creation and initialisation of immutable binding \r\nare distinct steps so it is possible for such bindings to exist in either an initialised or uninitialised state. \r\nDeclarative environment records support the methods listed in Table 18 in addition to the Environment Record \r\nabstract specification methods:\r\nTable 18 — Additional Methods of Declarative Environment Records\r\nMethod Purpose\r\nCreateImmutableBinding(N) Create a new but uninitialised immutable binding in an \r\nenvironment record. The String value N is the text of the bound \r\nname.\r\nInitializeImmutableBinding(N,V) Set the value of an already existing but uninitialised immutable \r\nbinding in an environment record. The String value N is the text \r\nof the bound name. V is the value for the binding and is a value \r\nof any ECMAScript language type. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/01f2c75e-8cc2-4ab3-974f-aaa47e9ca99e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5e36a0b8cd46fb6500d16a299938887d244a195cb4bdb262ad6d758b50a174e8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 496
      },
      {
        "segments": [
          {
            "segment_id": "4b70e022-a71f-4fe0-9ca9-9eb88ab1db69",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 65,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 53\r\nThe behaviour of the concrete specification methods for Declarative Environment Records is defined by the \r\nfollowing algorithms.\r\n10.2.1.1.1 HasBinding(N)\r\nThe concrete environment record method HasBinding for declarative environment records simply determines \r\nif the argument identifier is one of the identifiers bound by the record:\r\n1. Let envRec be the declarative environment record for which the method was invoked.\r\n2. If envRec has a binding for the name that is the value of N, return true.\r\n3. If it does not have such a binding, return false.\r\n10.2.1.1.2 CreateMutableBinding (N, D)\r\nThe concrete Environment Record method CreateMutableBinding for declarative environment records creates \r\na new mutable binding for the name N that is initialised to the value undefined. A binding must not already \r\nexist in this Environment Record for N. If Boolean argument D is provided and has the value true the new \r\nbinding is marked as being subject to deletion.\r\n1. Let envRec be the declarative environment record for which the method was invoked.\r\n2. Assert: envRec does not already have a binding for N.\r\n3. Create a mutable binding in envRec for N and set its bound value to undefined. If D is true record that the \r\nnewly created binding may be deleted by a subsequent DeleteBinding call.\r\n10.2.1.1.3 SetMutableBinding (N,V,S)\r\nThe concrete Environment Record method SetMutableBinding for declarative environment records attempts to \r\nchange the bound value of the current binding of the identifier whose name is the value of the argument N to \r\nthe value of argument V. A binding for N must already exist. If the binding is an immutable binding, a \r\nTypeError is thrown if S is true. \r\n1. Let envRec be the declarative environment record for which the method was invoked.\r\n2. Assert: envRec must have a binding for N.\r\n3. If the binding for N in envRec is a mutable binding, change its bound value to V.\r\n4. Else this must be an attempt to change the value of an immutable binding so if S if true throw a TypeError\r\nexception.\r\n10.2.1.1.4 GetBindingValue(N,S)\r\nThe concrete Environment Record method GetBindingValue for declarative environment records simply \r\nreturns the value of its bound identifier whose name is the value of the argument N. The binding must already \r\nexist. If S is true and the binding is an uninitialised immutable binding throw a ReferenceError exception.\r\n1. Let envRec be the declarative environment record for which the method was invoked.\r\n2. Assert: envRec has a binding for N.\r\n3. If the binding for N in envRec is an uninitialised immutable binding, then\r\na. If S is false, return the value undefined, otherwise throw a ReferenceError exception.\r\n4. Else, return the value currently bound to N in envRec.\r\n10.2.1.1.5 DeleteBinding (N)\r\nThe concrete Environment Record method DeleteBinding for declarative environment records can only delete \r\nbindings that have been explicitly designated as being subject to deletion.\r\n1. Let envRec be the declarative environment record for which the method was invoked.\r\n2. If envRec does not have a binding for the name that is the value of N, return true.\r\n3. If the binding for N in envRec is cannot be deleted, return false.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/4b70e022-a71f-4fe0-9ca9-9eb88ab1db69.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cff2e0a568db2c79884dbffe321adeab0312e7d6ce65522ca77e3c81e2349f07",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 526
      },
      {
        "segments": [
          {
            "segment_id": "4b70e022-a71f-4fe0-9ca9-9eb88ab1db69",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 65,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 53\r\nThe behaviour of the concrete specification methods for Declarative Environment Records is defined by the \r\nfollowing algorithms.\r\n10.2.1.1.1 HasBinding(N)\r\nThe concrete environment record method HasBinding for declarative environment records simply determines \r\nif the argument identifier is one of the identifiers bound by the record:\r\n1. Let envRec be the declarative environment record for which the method was invoked.\r\n2. If envRec has a binding for the name that is the value of N, return true.\r\n3. If it does not have such a binding, return false.\r\n10.2.1.1.2 CreateMutableBinding (N, D)\r\nThe concrete Environment Record method CreateMutableBinding for declarative environment records creates \r\na new mutable binding for the name N that is initialised to the value undefined. A binding must not already \r\nexist in this Environment Record for N. If Boolean argument D is provided and has the value true the new \r\nbinding is marked as being subject to deletion.\r\n1. Let envRec be the declarative environment record for which the method was invoked.\r\n2. Assert: envRec does not already have a binding for N.\r\n3. Create a mutable binding in envRec for N and set its bound value to undefined. If D is true record that the \r\nnewly created binding may be deleted by a subsequent DeleteBinding call.\r\n10.2.1.1.3 SetMutableBinding (N,V,S)\r\nThe concrete Environment Record method SetMutableBinding for declarative environment records attempts to \r\nchange the bound value of the current binding of the identifier whose name is the value of the argument N to \r\nthe value of argument V. A binding for N must already exist. If the binding is an immutable binding, a \r\nTypeError is thrown if S is true. \r\n1. Let envRec be the declarative environment record for which the method was invoked.\r\n2. Assert: envRec must have a binding for N.\r\n3. If the binding for N in envRec is a mutable binding, change its bound value to V.\r\n4. Else this must be an attempt to change the value of an immutable binding so if S if true throw a TypeError\r\nexception.\r\n10.2.1.1.4 GetBindingValue(N,S)\r\nThe concrete Environment Record method GetBindingValue for declarative environment records simply \r\nreturns the value of its bound identifier whose name is the value of the argument N. The binding must already \r\nexist. If S is true and the binding is an uninitialised immutable binding throw a ReferenceError exception.\r\n1. Let envRec be the declarative environment record for which the method was invoked.\r\n2. Assert: envRec has a binding for N.\r\n3. If the binding for N in envRec is an uninitialised immutable binding, then\r\na. If S is false, return the value undefined, otherwise throw a ReferenceError exception.\r\n4. Else, return the value currently bound to N in envRec.\r\n10.2.1.1.5 DeleteBinding (N)\r\nThe concrete Environment Record method DeleteBinding for declarative environment records can only delete \r\nbindings that have been explicitly designated as being subject to deletion.\r\n1. Let envRec be the declarative environment record for which the method was invoked.\r\n2. If envRec does not have a binding for the name that is the value of N, return true.\r\n3. If the binding for N in envRec is cannot be deleted, return false.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/4b70e022-a71f-4fe0-9ca9-9eb88ab1db69.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cff2e0a568db2c79884dbffe321adeab0312e7d6ce65522ca77e3c81e2349f07",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 526
      },
      {
        "segments": [
          {
            "segment_id": "11720418-6f25-46b5-99c7-6cfda20e175e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 66,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "54 © Ecma International 2011\r\n4. Remove the binding for N from envRec.\r\n5. Return true.\r\n10.2.1.1.6 ImplicitThisValue()\r\nDeclarative Environment Records always return undefined as their ImplicitThisValue.\r\n1. Return undefined.\r\n10.2.1.1.7 CreateImmutableBinding (N)\r\nThe concrete Environment Record method CreateImmutableBinding for declarative environment records \r\ncreates a new immutable binding for the name N that is initialised to the value undefined. A binding must not \r\nalready exist in this environment record for N.\r\n1. Let envRec be the declarative environment record for which the method was invoked.\r\n2. Assert: envRec does not already have a binding for N.\r\n3. Create an immutable binding in envRec for N and record that it is uninitialised.\r\n10.2.1.1.8 InitializeImmutableBinding (N,V)\r\nThe concrete Environment Record method InitializeImmutableBinding for declarative environment records is \r\nused to set the bound value of the current binding of the identifier whose name is the value of the argument N\r\nto the value of argument V. An uninitialised immutable binding for N must already exist. \r\n1. Let envRec be the declarative environment record for which the method was invoked.\r\n2. Assert: envRec must have an uninitialised immutable binding for N.\r\n3. Set the bound value for N in envRec to V.\r\n4. Record that the immutable binding for N in envRec has been initialised.\r\n10.2.1.2 Object Environment Records\r\nEach object environment record is associated with an object called its binding object. An object environment \r\nrecord binds the set of identifier names that directly correspond to the property names of its binding object. \r\nProperty names that are not an IdentifierName are not included in the set of bound identifiers. Both own and \r\ninherited properties are included in the set regardless of the setting of their [[Enumerable]] attribute. Because \r\nproperties can be dynamically added and deleted from objects, the set of identifiers bound by an object \r\nenvironment record may potentially change as a side-effect of any operation that adds or deletes properties. \r\nAny bindings that are created as a result of such a side-effect are considered to be a mutable binding even if \r\nthe Writable attribute of the corresponding property has the value false. Immutable bindings do not exist for \r\nobject environment records.\r\nObject environment records can be configured to provide their binding object as an implicit this value for use \r\nin function calls. This capability is used to specify the behaviour of With Statement (12.10) induced bindings. \r\nThe capability is controlled by a provideThis Boolean value that is associated with each object environment \r\nrecord. By default, the value of provideThis is false for any object environment record.\r\nThe behaviour of the concrete specification methods for Object Environment Records is defined by the \r\nfollowing algorithms.\r\n10.2.1.2.1 HasBinding(N)\r\nThe concrete Environment Record method HasBinding for object environment records determines if its \r\nassociated binding object has a property whose name is the value of the argument N:\r\n1. Let envRec be the object environment record for which the method was invoked.\r\n2. Let bindings be the binding object for envRec.\r\n3. Return the result of calling the [[HasProperty]] internal method of bindings, passing N as the property name.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/11720418-6f25-46b5-99c7-6cfda20e175e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b6c3f2c1d858e75b76732ce550a3fe54e03fe1d7efea48969da07d555b6669ce",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 511
      },
      {
        "segments": [
          {
            "segment_id": "c669d19a-52f8-422d-a0ae-3d47549d5df8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 67,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 55\r\n10.2.1.2.2 CreateMutableBinding (N, D)\r\nThe concrete Environment Record method CreateMutableBinding for object environment records creates in \r\nan environment record‘s associated binding object a property whose name is the String value and initialises it \r\nto the value undefined. A property named N must not already exist in the binding object. If Boolean argument \r\nD is provided and has the value true the new property‘s [[Configurable]] attribute is set to true, otherwise it is \r\nset to false.\r\n1. Let envRec be the object environment record for which the method was invoked.\r\n2. Let bindings be the binding object for envRec.\r\n3. Assert: The result of calling the [[HasProperty]] internal method of bindings, passing N as the property \r\nname, is false.\r\n4. If D is true then let configValue be true otherwise let configValue be false.\r\n5. Call the [[DefineOwnProperty]] internal method of bindings, passing N, Property Descriptor \r\n{[[Value]]:undefined, [[Writable]]: true, [[Enumerable]]: true , [[Configurable]]: configValue}, and true as \r\narguments.\r\n10.2.1.2.3 SetMutableBinding (N,V,S)\r\nThe concrete Environment Record method SetMutableBinding for object environment records attempts to set \r\nthe value of the environment record‘s associated binding object‘s property whose name is the value of the\r\nargument N to the value of argument V. A property named N should already exist but if it does not or is not \r\ncurrently writable, error handling is determined by the value of the Boolean argument S.\r\n1. Let envRec be the object environment record for which the method was invoked.\r\n2. Let bindings be the binding object for envRec.\r\n3. Call the [[Put]] internal method of bindings with arguments N, V, and S.\r\n10.2.1.2.4 GetBindingValue(N,S)\r\nThe concrete Environment Record method GetBindingValue for object environment records returns the value \r\nof its associated binding object‘s property whose name is the String value of the argument identifier N. The \r\nproperty should already exist but if it does not the result depends upon the value of the S argument:\r\n1. Let envRec be the object environment record for which the method was invoked.\r\n2. Let bindings be the binding object for envRec.\r\n3. Let value be the result of calling the [[HasProperty]] internal method of bindings, passing N as the property \r\nname.\r\n4. If value is false, then\r\na. If S is false, return the value undefined, otherwise throw a ReferenceError exception.\r\n5. Return the result of calling the [[Get]] internal method of bindings, passing N for the argument.\r\n10.2.1.2.5 DeleteBinding (N)\r\nThe concrete Environment Record method DeleteBinding for object environment records can only delete \r\nbindings that correspond to properties of the environment object whose [[Configurable]] attribute have the \r\nvalue true.\r\n1. Let envRec be the object environment record for which the method was invoked.\r\n2. Let bindings be the binding object for envRec.\r\n3. Return the result of calling the [[Delete]] internal method of bindings, passing N and false as arguments.\r\n10.2.1.2.6 ImplicitThisValue()\r\nObject Environment Records return undefined as their ImplicitThisValue unless their provideThis flag is true.\r\n1. Let envRec be the object environment record for which the method was invoked.\r\n2. If the provideThis flag of envRec is true, return the binding object for envRec.\r\n3. Otherwise, return undefined.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c669d19a-52f8-422d-a0ae-3d47549d5df8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=15f1301c95f33aa8ebc90df91435e30aac08122d13e21ff77035e28234a2267f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 523
      },
      {
        "segments": [
          {
            "segment_id": "c669d19a-52f8-422d-a0ae-3d47549d5df8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 67,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 55\r\n10.2.1.2.2 CreateMutableBinding (N, D)\r\nThe concrete Environment Record method CreateMutableBinding for object environment records creates in \r\nan environment record‘s associated binding object a property whose name is the String value and initialises it \r\nto the value undefined. A property named N must not already exist in the binding object. If Boolean argument \r\nD is provided and has the value true the new property‘s [[Configurable]] attribute is set to true, otherwise it is \r\nset to false.\r\n1. Let envRec be the object environment record for which the method was invoked.\r\n2. Let bindings be the binding object for envRec.\r\n3. Assert: The result of calling the [[HasProperty]] internal method of bindings, passing N as the property \r\nname, is false.\r\n4. If D is true then let configValue be true otherwise let configValue be false.\r\n5. Call the [[DefineOwnProperty]] internal method of bindings, passing N, Property Descriptor \r\n{[[Value]]:undefined, [[Writable]]: true, [[Enumerable]]: true , [[Configurable]]: configValue}, and true as \r\narguments.\r\n10.2.1.2.3 SetMutableBinding (N,V,S)\r\nThe concrete Environment Record method SetMutableBinding for object environment records attempts to set \r\nthe value of the environment record‘s associated binding object‘s property whose name is the value of the\r\nargument N to the value of argument V. A property named N should already exist but if it does not or is not \r\ncurrently writable, error handling is determined by the value of the Boolean argument S.\r\n1. Let envRec be the object environment record for which the method was invoked.\r\n2. Let bindings be the binding object for envRec.\r\n3. Call the [[Put]] internal method of bindings with arguments N, V, and S.\r\n10.2.1.2.4 GetBindingValue(N,S)\r\nThe concrete Environment Record method GetBindingValue for object environment records returns the value \r\nof its associated binding object‘s property whose name is the String value of the argument identifier N. The \r\nproperty should already exist but if it does not the result depends upon the value of the S argument:\r\n1. Let envRec be the object environment record for which the method was invoked.\r\n2. Let bindings be the binding object for envRec.\r\n3. Let value be the result of calling the [[HasProperty]] internal method of bindings, passing N as the property \r\nname.\r\n4. If value is false, then\r\na. If S is false, return the value undefined, otherwise throw a ReferenceError exception.\r\n5. Return the result of calling the [[Get]] internal method of bindings, passing N for the argument.\r\n10.2.1.2.5 DeleteBinding (N)\r\nThe concrete Environment Record method DeleteBinding for object environment records can only delete \r\nbindings that correspond to properties of the environment object whose [[Configurable]] attribute have the \r\nvalue true.\r\n1. Let envRec be the object environment record for which the method was invoked.\r\n2. Let bindings be the binding object for envRec.\r\n3. Return the result of calling the [[Delete]] internal method of bindings, passing N and false as arguments.\r\n10.2.1.2.6 ImplicitThisValue()\r\nObject Environment Records return undefined as their ImplicitThisValue unless their provideThis flag is true.\r\n1. Let envRec be the object environment record for which the method was invoked.\r\n2. If the provideThis flag of envRec is true, return the binding object for envRec.\r\n3. Otherwise, return undefined.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c669d19a-52f8-422d-a0ae-3d47549d5df8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=15f1301c95f33aa8ebc90df91435e30aac08122d13e21ff77035e28234a2267f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 523
      },
      {
        "segments": [
          {
            "segment_id": "847645fb-adec-48b4-b023-5cb84d58339f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 68,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "56 © Ecma International 2011\r\n10.2.2 Lexical Environment Operations\r\nThe following abstract operations are used in this specification to operate upon lexical environments:\r\n10.2.2.1 GetIdentifierReference (lex, name, strict)\r\nThe abstract operation GetIdentifierReference is called with a Lexical Environment lex, an identifier String \r\nname, and a Boolean flag strict. The value of lex may be null. When called, the following steps are performed:\r\n1. If lex is the value null, then\r\na. Return a value of type Reference whose base value is undefined, whose referenced name is name, \r\nand whose strict mode flag is strict.\r\n2. Let envRec be lex‘s environment record.\r\n3. Let exists be the result of calling the HasBinding(N) concrete method of envRec passing name as the \r\nargument N.\r\n4. If exists is true, then\r\na. Return a value of type Reference whose base value is envRec, whose referenced name is name, and \r\nwhose strict mode flag is strict.\r\n5. Else\r\na. Let outer be the value of lex’s outer environment reference.\r\nb. Return the result of calling GetIdentifierReference passing outer, name, and strict as arguments.\r\n10.2.2.2 NewDeclarativeEnvironment (E)\r\nWhen the abstract operation NewDeclarativeEnvironment is called with either a Lexical Environment or null\r\nas argument E the following steps are performed:\r\n1. Let env be a new Lexical Environment.\r\n2. Let envRec be a new declarative environment record containing no bindings.\r\n3. Set env’s environment record to be envRec.\r\n4. Set the outer lexical environment reference of env to E.\r\n5. Return env.\r\n10.2.2.3 NewObjectEnvironment (O, E)\r\nWhen the abstract operation NewObjectEnvironment is called with an Object O and a Lexical Environment E \r\n(or null) as arguments, the following steps are performed:\r\n1. Let env be a new Lexical Environment.\r\n2. Let envRec be a new object environment record containing O as the binding object.\r\n3. Set env’s environment record to be envRec.\r\n4. Set the outer lexical environment reference of env to E.\r\n5. Return env.\r\n10.2.3 The Global Environment\r\nThe global environment is a unique Lexical Environment which is created before any ECMAScript code is \r\nexecuted. The global environment‘s Environment Record is an object environment record whose binding \r\nobject is the global object (15.1). The global environment‘s outer environment reference is null.\r\nAs ECMAScript code is executed, additional properties may be added to the global object and the initial \r\nproperties may be modified.\r\n10.3 Execution Contexts\r\nWhen control is transferred to ECMAScript executable code, control is entering an execution context. Active \r\nexecution contexts logically form a stack. The top execution context on this logical stack is the running \r\nexecution context. A new execution context is created whenever control is transferred from the executable \r\ncode associated with the currently running execution context to executable code that is not associated with ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/847645fb-adec-48b4-b023-5cb84d58339f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d1872ff77a4d4a6aee1d4c8e5c91246d2552d4c55d4951d77ca5b80baca5a942",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 453
      },
      {
        "segments": [
          {
            "segment_id": "19521972-13e0-4858-a00a-294f64e2c79e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 69,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 57\r\nthat execution context. The newly created execution context is pushed onto the stack and becomes the \r\nrunning execution context.\r\nAn execution context contains whatever state is necessary to track the execution progress of its associated \r\ncode. In addition, each execution context has the state components listed in Table 19.\r\nTable 19 —Execution Context State Components\r\nComponent Purpose\r\nLexicalEnvironment Identifies the Lexical Environment used to resolve identifier references \r\nmade by code within this execution context.\r\nVariableEnvironment Identifies the Lexical Environment whose environment record holds \r\nbindings created by VariableStatements and FunctionDeclarations within \r\nthis execution context.\r\nThisBinding The value associated with the this keyword within ECMAScript code \r\nassociated with this execution context.\r\nThe LexicalEnvironment and VariableEnvironment components of an execution context are always Lexical \r\nEnvironments. When an execution context is created its LexicalEnvironment and VariableEnvironment \r\ncomponents initially have the same value. The value of the VariableEnvironment component never changes \r\nwhile the value of the LexicalEnvironment component may change during execution of code within an \r\nexecution context.\r\nIn most situations only the running execution context (the top of the execution context stack) is directly \r\nmanipulated by algorithms within this specification. Hence when the terms ―LexicalEnvironment‖, \r\n―VariableEnvironment‖ and ―ThisBinding‖ are used without qualification they are in reference to those \r\ncomponents of the running execution context.\r\nAn execution context is purely a specification mechanism and need not correspond to any particular artefact \r\nof an ECMAScript implementation. It is impossible for an ECMAScript program to access an execution \r\ncontext. \r\n10.3.1 Identifier Resolution\r\nIdentifier resolution is the process of determining the binding of an Identifier using the LexicalEnvironment of \r\nthe running execution context. During execution of ECMAScript code, the syntactic production \r\nPrimaryExpression : Identifier is evaluated using the following algorithm:\r\n1. Let env be the running execution context‘s LexicalEnvironment.\r\n2. If the syntactic production that is being evaluated is contained in a strict mode code, then let strict be true,\r\nelse let strict be false.\r\n3. Return the result of calling GetIdentifierReference function passing env, Identifier, and strict as arguments.\r\nThe result of evaluating an identifier is always a value of type Reference with its referenced name component \r\nequal to the Identifier String.\r\n10.4 Establishing an Execution Context\r\nEvaluation of global code or code using the eval function (15.1.2.1) establishes and enters a new execution \r\ncontext. Every invocation of an ECMAScript code function (13.2.1) also establishes and enters a new \r\nexecution context, even if a function is calling itself recursively. Every return exits an execution context. A \r\nthrown exception may also exit one or more execution contexts.\r\nWhen control enters an execution context, the execution context‘s ThisBinding is set, its VariableEnvironment \r\nand initial LexicalEnvironment are defined, and declaration binding instantiation (10.5) is performed. The exact \r\nmanner in which these actions occur depend on the type of code being entered.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/19521972-13e0-4858-a00a-294f64e2c79e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c98b24554e78172d97e529aa3b4f34a577cdd92925bcdb91434e54c025db38b7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 466
      },
      {
        "segments": [
          {
            "segment_id": "24072661-3957-4d95-a7af-79c032595b65",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 70,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "58 © Ecma International 2011\r\n10.4.1 Entering Global Code\r\nThe following steps are performed when control enters the execution context for global code:\r\n1. Initialise the execution context using the global code as described in 10.4.1.1.\r\n2. Perform Declaration Binding Instantiation as described in 10.5 using the global code.\r\n10.4.1.1 Initial Global Execution Context\r\nThe following steps are performed to initialise a global execution context for ECMAScript code C:\r\n1. Set the VariableEnvironment to the Global Environment.\r\n2. Set the LexicalEnvironment to the Global Environment.\r\n3. Set the ThisBinding to the global object.\r\n10.4.2 Entering Eval Code\r\nThe following steps are performed when control enters the execution context for eval code:\r\n1. If there is no calling context or if the eval code is not being evaluated by a direct call (15.1.2.1.1) to the eval \r\nfunction then,\r\na. Initialise the execution context as if it was a global execution context using the eval code as C as \r\ndescribed in 10.4.1.1.\r\n2. Else,\r\na. Set the ThisBinding to the same value as the ThisBinding of the calling execution context.\r\nb. Set the LexicalEnvironment to the same value as the LexicalEnvironment of the calling execution \r\ncontext.\r\nc. Set the VariableEnvironment to the same value as the VariableEnvironment of the calling execution \r\ncontext.\r\n3. If the eval code is strict code, then\r\na. Let strictVarEnv be the result of calling NewDeclarativeEnvironment passing the \r\nLexicalEnvironment as the argument.\r\nb. Set the LexicalEnvironment to strictVarEnv.\r\nc. Set the VariableEnvironment to strictVarEnv.\r\n4. Perform Declaration Binding Instantiation as described in 10.5 using the eval code.\r\n10.4.2.1 Strict Mode Restrictions\r\nThe eval code cannot instantiate variable or function bindings in the variable environment of the calling \r\ncontext that invoked the eval if either the code of the calling context or the eval code is strict code. Instead \r\nsuch bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code.\r\n10.4.3 Entering Function Code\r\nThe following steps are performed when control enters the execution context for function code contained in \r\nfunction object F, a caller provided thisArg, and a caller provided argumentsList:\r\n1. If the function code is strict code, set the ThisBinding to thisArg.\r\n2. Else if thisArg is null or undefined, set the ThisBinding to the global object.\r\n3. Else if Type(thisArg) is not Object, set the ThisBinding to ToObject(thisArg).\r\n4. Else set the ThisBinding to thisArg.\r\n5. Let localEnv be the result of calling NewDeclarativeEnvironment passing the value of the [[Scope]] internal \r\nproperty of F as the argument.\r\n6. Set the LexicalEnvironment to localEnv.\r\n7. Set the VariableEnvironment to localEnv.\r\n8. Let code be the value of F‘s [[Code]] internal property.\r\n9. Perform Declaration Binding Instantiation using the function code code and argumentsList as described in \r\n10.5.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/24072661-3957-4d95-a7af-79c032595b65.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7ddd7390c1ede947c4d83829696fae47931433854ff109c15cbcf871da67d542",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 456
      },
      {
        "segments": [
          {
            "segment_id": "96036123-23fe-4902-80a9-86d02f42473f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 71,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 59\r\n10.5 Declaration Binding Instantiation\r\nEvery execution context has an associated VariableEnvironment. Variables and functions declared in \r\nECMAScript code evaluated in an execution context are added as bindings in that VariableEnvironment‘s \r\nEnvironment Record. For function code, parameters are also added as bindings to that Environment Record.\r\nWhich Environment Record is used to bind a declaration and its kind depends upon the type of ECMAScript \r\ncode executed by the execution context, but the remainder of the behaviour is generic. On entering an \r\nexecution context, bindings are created in the VariableEnvironment as follows using the caller provided code \r\nand, if it is function code, argument List args:\r\n1. Let env be the environment record component of the running execution context‘s VariableEnvironment.\r\n2. If code is eval code, then let configurableBindings be true else let configurableBindings be false.\r\n3. If code is strict mode code, then let strict be true else let strict be false.\r\n4. If code is function code, then\r\na. Let func be the function whose [[Call]] internal method initiated execution of code. Let names be \r\nthe value of func‘s [[FormalParameters]] internal property. \r\nb. Let argCount be the number of elements in args.\r\nc. Let n be the number 0.\r\nd. For each String argName in names, in list order do\r\ni. Let n be the current value of n plus 1.\r\nii. If n is greater than argCount, let v be undefined otherwise let v be the value of the n‘th \r\nelement of args.\r\niii. Let argAlreadyDeclared be the result of calling env’s HasBinding concrete method passing \r\nargName as the argument.\r\niv. If argAlreadyDeclared is false, call env’s CreateMutableBinding concrete method passing \r\nargName as the argument.\r\nv. Call env’s SetMutableBinding concrete method passing argName, v, and strict as the \r\narguments.\r\n5. For each FunctionDeclaration f in code, in source text order do\r\na. Let fn be the Identifier in FunctionDeclaration f.\r\nb. Let fo be the result of instantiating FunctionDeclaration f as described in Clause 13.\r\nc. Let funcAlreadyDeclared be the result of calling env’s HasBinding concrete method passing fn as \r\nthe argument.\r\nd. If funcAlreadyDeclared is false, call env’s CreateMutableBinding concrete method passing fn and \r\nconfigurableBindings as the arguments.\r\ne. Else if env is the environment record component of the global environment then\r\ni. Let go be the global object.\r\nii. Let existingProp be the resulting of calling the [[GetProperty]] internal method of go with \r\nargument fn.\r\niii. If existingProp .[[Configurable]] is true, then\r\n1. Call the [[DefineOwnProperty]] internal method of go, passing fn, Property \r\nDescriptor {[[Value]]: undefined, [[Writable]]: true, [[Enumerable]]: true , \r\n[[Configurable]]: configurableBindings }, and true as arguments.\r\niv. Else if IsAccessorDescriptor(existingProp) or existingProp does not have attribute values \r\n{[[Writable]]: true, [[Enumerable]]: true}, then\r\n1. Throw a TypeError exception.\r\nf. Call env’s SetMutableBinding concrete method passing fn, fo, and strict as the arguments.\r\n6. Let argumentsAlreadyDeclared be the result of calling env’s HasBinding concrete method passing \r\n\"arguments\" as the argument.\r\n7. If code is function code and argumentsAlreadyDeclared is false, then\r\na. Let argsObj be the result of calling the abstract operation CreateArgumentsObject (10.6) passing \r\nfunc, names, args, env and strict as arguments.\r\nb. If strict is true, then \r\ni. Call env‘s CreateImmutableBinding concrete method passing the String \"arguments\" as \r\nthe argument.\r\nii. Call env‘s InitializeImmutableBinding concrete method passing \"arguments\" and \r\nargsObj as arguments.\r\nc. Else,",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/96036123-23fe-4902-80a9-86d02f42473f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=626900677bc2a58a46245dad4a4b122969fc0edb88c90011a32ea487e01f9ee1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 554
      },
      {
        "segments": [
          {
            "segment_id": "96036123-23fe-4902-80a9-86d02f42473f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 71,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 59\r\n10.5 Declaration Binding Instantiation\r\nEvery execution context has an associated VariableEnvironment. Variables and functions declared in \r\nECMAScript code evaluated in an execution context are added as bindings in that VariableEnvironment‘s \r\nEnvironment Record. For function code, parameters are also added as bindings to that Environment Record.\r\nWhich Environment Record is used to bind a declaration and its kind depends upon the type of ECMAScript \r\ncode executed by the execution context, but the remainder of the behaviour is generic. On entering an \r\nexecution context, bindings are created in the VariableEnvironment as follows using the caller provided code \r\nand, if it is function code, argument List args:\r\n1. Let env be the environment record component of the running execution context‘s VariableEnvironment.\r\n2. If code is eval code, then let configurableBindings be true else let configurableBindings be false.\r\n3. If code is strict mode code, then let strict be true else let strict be false.\r\n4. If code is function code, then\r\na. Let func be the function whose [[Call]] internal method initiated execution of code. Let names be \r\nthe value of func‘s [[FormalParameters]] internal property. \r\nb. Let argCount be the number of elements in args.\r\nc. Let n be the number 0.\r\nd. For each String argName in names, in list order do\r\ni. Let n be the current value of n plus 1.\r\nii. If n is greater than argCount, let v be undefined otherwise let v be the value of the n‘th \r\nelement of args.\r\niii. Let argAlreadyDeclared be the result of calling env’s HasBinding concrete method passing \r\nargName as the argument.\r\niv. If argAlreadyDeclared is false, call env’s CreateMutableBinding concrete method passing \r\nargName as the argument.\r\nv. Call env’s SetMutableBinding concrete method passing argName, v, and strict as the \r\narguments.\r\n5. For each FunctionDeclaration f in code, in source text order do\r\na. Let fn be the Identifier in FunctionDeclaration f.\r\nb. Let fo be the result of instantiating FunctionDeclaration f as described in Clause 13.\r\nc. Let funcAlreadyDeclared be the result of calling env’s HasBinding concrete method passing fn as \r\nthe argument.\r\nd. If funcAlreadyDeclared is false, call env’s CreateMutableBinding concrete method passing fn and \r\nconfigurableBindings as the arguments.\r\ne. Else if env is the environment record component of the global environment then\r\ni. Let go be the global object.\r\nii. Let existingProp be the resulting of calling the [[GetProperty]] internal method of go with \r\nargument fn.\r\niii. If existingProp .[[Configurable]] is true, then\r\n1. Call the [[DefineOwnProperty]] internal method of go, passing fn, Property \r\nDescriptor {[[Value]]: undefined, [[Writable]]: true, [[Enumerable]]: true , \r\n[[Configurable]]: configurableBindings }, and true as arguments.\r\niv. Else if IsAccessorDescriptor(existingProp) or existingProp does not have attribute values \r\n{[[Writable]]: true, [[Enumerable]]: true}, then\r\n1. Throw a TypeError exception.\r\nf. Call env’s SetMutableBinding concrete method passing fn, fo, and strict as the arguments.\r\n6. Let argumentsAlreadyDeclared be the result of calling env’s HasBinding concrete method passing \r\n\"arguments\" as the argument.\r\n7. If code is function code and argumentsAlreadyDeclared is false, then\r\na. Let argsObj be the result of calling the abstract operation CreateArgumentsObject (10.6) passing \r\nfunc, names, args, env and strict as arguments.\r\nb. If strict is true, then \r\ni. Call env‘s CreateImmutableBinding concrete method passing the String \"arguments\" as \r\nthe argument.\r\nii. Call env‘s InitializeImmutableBinding concrete method passing \"arguments\" and \r\nargsObj as arguments.\r\nc. Else,",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/96036123-23fe-4902-80a9-86d02f42473f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=626900677bc2a58a46245dad4a4b122969fc0edb88c90011a32ea487e01f9ee1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 554
      },
      {
        "segments": [
          {
            "segment_id": "0a99ccbf-8f52-4536-ba6e-a92eab876b1b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 72,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "60 © Ecma International 2011\r\ni. Call env‘s CreateMutableBinding concrete method passing the String \"arguments\" as the \r\nargument.\r\nii. Call env‘s SetMutableBinding concrete method passing \"arguments\", argsObj, and false\r\nas arguments.\r\n8. For each VariableDeclaration and VariableDeclarationNoIn d in code, in source text order do\r\na. Let dn be the Identifier in d.\r\nb. Let varAlreadyDeclared be the result of calling env’s HasBinding concrete method passing dn as the \r\nargument.\r\nc. If varAlreadyDeclared is false, then\r\ni. Call env‘s CreateMutableBinding concrete method passing dn and configurableBindings as \r\nthe arguments.\r\nii. Call env‘s SetMutableBinding concrete method passing dn, undefined, and strict as the \r\narguments.\r\n10.6 Arguments Object\r\nWhen control enters an execution context for function code, an arguments object is created unless (as \r\nspecified in 10.5) the identifier arguments occurs as an Identifier in the function‘s FormalParameterList or \r\noccurs as the Identifier of a VariableDeclaration or FunctionDeclaration contained in the function code.\r\nThe arguments object is created by calling the abstract operation CreateArgumentsObject with arguments func\r\nthe function object whose code is to be evaluated, names a List containing the function‘s formal parameter \r\nnames, args the actual arguments passed to the [[Call]] internal method, env the variable environment for the \r\nfunction code, and strict a Boolean that indicates whether or not the function code is strict code. When \r\nCreateArgumentsObject is called the following steps are performed:\r\n1. Let len be the number of elements in args.\r\n2. Let obj be the result of creating a new ECMAScript object.\r\n3. Set all the internal methods of obj as specified in 8.12.\r\n4. Set the [[Class]] internal property of obj to \"Arguments\".\r\n5. Let Object be the standard built-in Object constructor (15.2.2).\r\n6. Set the [[Prototype]] internal property of obj to the standard built-in Object prototype object (15.2.4).\r\n7. Call the [[DefineOwnProperty]] internal method on obj passing \"length\", the Property Descriptor \r\n{[[Value]]: len, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}, and false as arguments.\r\n8. Let map be the result of creating a new object as if by the expression new Object() where Object is \r\nthe standard built-in constructor with that name\r\n9. Let mappedNames be an empty List.\r\n10. Let indx = len - 1.\r\n11. Repeat while indx >= 0, \r\na. Let val be the element of args at 0-origined list position indx.\r\nb. Call the [[DefineOwnProperty]] internal method on obj passing ToString(indx), the property \r\ndescriptor {[[Value]]: val, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and \r\nfalse as arguments.\r\nc. If indx is less than the number of elements in names, then\r\ni. Let name be the element of names at 0-origined list position indx.\r\nii. If strict is false and name is not an element of mappedNames, then\r\n1. Add name as an element of the list mappedNames.\r\n2. Let g be the result of calling the MakeArgGetter abstract operation with arguments \r\nname and env.\r\n3. Let p be the result of calling the MakeArgSetter abstract operation with arguments \r\nname and env.\r\n4. Call the [[DefineOwnProperty]] internal method of map passing ToString(indx), the \r\nProperty Descriptor {[[Set]]: p, [[Get]]: g, [[Configurable]]: true}, and false as \r\narguments.\r\nd. Let indx = indx - 1\r\n12. If mappedNames is not empty, then\r\na. Set the [[ParameterMap]] internal property of obj to map.\r\nb. Set the [[Get]], [[GetOwnProperty]], [[DefineOwnProperty]], and [[Delete]] internal methods of obj\r\nto the definitions provided below.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0a99ccbf-8f52-4536-ba6e-a92eab876b1b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5707cdb111d3ab6ef72c00f0507398804f2a41a731dfcd1625bbfb4962ebfe5a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 554
      },
      {
        "segments": [
          {
            "segment_id": "0a99ccbf-8f52-4536-ba6e-a92eab876b1b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 72,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "60 © Ecma International 2011\r\ni. Call env‘s CreateMutableBinding concrete method passing the String \"arguments\" as the \r\nargument.\r\nii. Call env‘s SetMutableBinding concrete method passing \"arguments\", argsObj, and false\r\nas arguments.\r\n8. For each VariableDeclaration and VariableDeclarationNoIn d in code, in source text order do\r\na. Let dn be the Identifier in d.\r\nb. Let varAlreadyDeclared be the result of calling env’s HasBinding concrete method passing dn as the \r\nargument.\r\nc. If varAlreadyDeclared is false, then\r\ni. Call env‘s CreateMutableBinding concrete method passing dn and configurableBindings as \r\nthe arguments.\r\nii. Call env‘s SetMutableBinding concrete method passing dn, undefined, and strict as the \r\narguments.\r\n10.6 Arguments Object\r\nWhen control enters an execution context for function code, an arguments object is created unless (as \r\nspecified in 10.5) the identifier arguments occurs as an Identifier in the function‘s FormalParameterList or \r\noccurs as the Identifier of a VariableDeclaration or FunctionDeclaration contained in the function code.\r\nThe arguments object is created by calling the abstract operation CreateArgumentsObject with arguments func\r\nthe function object whose code is to be evaluated, names a List containing the function‘s formal parameter \r\nnames, args the actual arguments passed to the [[Call]] internal method, env the variable environment for the \r\nfunction code, and strict a Boolean that indicates whether or not the function code is strict code. When \r\nCreateArgumentsObject is called the following steps are performed:\r\n1. Let len be the number of elements in args.\r\n2. Let obj be the result of creating a new ECMAScript object.\r\n3. Set all the internal methods of obj as specified in 8.12.\r\n4. Set the [[Class]] internal property of obj to \"Arguments\".\r\n5. Let Object be the standard built-in Object constructor (15.2.2).\r\n6. Set the [[Prototype]] internal property of obj to the standard built-in Object prototype object (15.2.4).\r\n7. Call the [[DefineOwnProperty]] internal method on obj passing \"length\", the Property Descriptor \r\n{[[Value]]: len, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}, and false as arguments.\r\n8. Let map be the result of creating a new object as if by the expression new Object() where Object is \r\nthe standard built-in constructor with that name\r\n9. Let mappedNames be an empty List.\r\n10. Let indx = len - 1.\r\n11. Repeat while indx >= 0, \r\na. Let val be the element of args at 0-origined list position indx.\r\nb. Call the [[DefineOwnProperty]] internal method on obj passing ToString(indx), the property \r\ndescriptor {[[Value]]: val, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and \r\nfalse as arguments.\r\nc. If indx is less than the number of elements in names, then\r\ni. Let name be the element of names at 0-origined list position indx.\r\nii. If strict is false and name is not an element of mappedNames, then\r\n1. Add name as an element of the list mappedNames.\r\n2. Let g be the result of calling the MakeArgGetter abstract operation with arguments \r\nname and env.\r\n3. Let p be the result of calling the MakeArgSetter abstract operation with arguments \r\nname and env.\r\n4. Call the [[DefineOwnProperty]] internal method of map passing ToString(indx), the \r\nProperty Descriptor {[[Set]]: p, [[Get]]: g, [[Configurable]]: true}, and false as \r\narguments.\r\nd. Let indx = indx - 1\r\n12. If mappedNames is not empty, then\r\na. Set the [[ParameterMap]] internal property of obj to map.\r\nb. Set the [[Get]], [[GetOwnProperty]], [[DefineOwnProperty]], and [[Delete]] internal methods of obj\r\nto the definitions provided below.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0a99ccbf-8f52-4536-ba6e-a92eab876b1b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5707cdb111d3ab6ef72c00f0507398804f2a41a731dfcd1625bbfb4962ebfe5a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 554
      },
      {
        "segments": [
          {
            "segment_id": "f2c07cf0-453a-4b48-a09e-1b55a3c8a5cd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 73,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 61\r\n13. If strict is false, then\r\na. Call the [[DefineOwnProperty]] internal method on obj passing \"callee\", the property descriptor \r\n{[[Value]]: func, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}, and false as \r\narguments.\r\n14. Else, strict is true so\r\na. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\r\nb. Call the [[DefineOwnProperty]] internal method of obj with arguments \"caller\", \r\nPropertyDescriptor {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: \r\nfalse}, and false.\r\nc. Call the [[DefineOwnProperty]] internal method of obj with arguments \"callee\", \r\nPropertyDescriptor {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: \r\nfalse}, and false.\r\n15. Return obj\r\nThe abstract operation MakeArgGetter called with String name and environment record env creates a function \r\nobject that when executed returns the value bound for name in env. It performs the following steps:\r\n1. Let body be the result of concatenating the Strings \"return \", name, and \";\".\r\n2. Return the result of creating a function object as described in 13.2 using no FormalParameterList, body for \r\nFunctionBody, env as Scope, and true for Strict.\r\nThe abstract operation MakeArgSetter called with String name and environment record env creates a function \r\nobject that when executed sets the value bound for name in env. It performs the following steps:\r\n1. Let param be the String name concatenated with the String \"_arg\".\r\n2. Let body be the String \"<name> = <param>;\" with <name> replaced by the value of name and <param> \r\nreplaced by the value of param.\r\n3. Return the result of creating a function object as described in 13.2 using a List containing the single String \r\nparam as FormalParameterList, body for FunctionBody, env as Scope, and true for Strict.\r\nThe [[Get]] internal method of an arguments object for a non-strict mode function with formal parameters when \r\ncalled with a property name P performs the following steps:\r\n1. Let map be the value of the [[ParameterMap]] internal property of the arguments object.\r\n2. Let isMapped be the result of calling the [[GetOwnProperty]] internal method of map passing P as the \r\nargument.\r\n3. If the value of isMapped is undefined, then\r\na. Let v be the result of calling the default [[Get]] internal method (8.12.3) on the arguments object \r\npassing P as the argument.\r\nb. If P is \"caller\" and v is a strict mode Function object, throw a TypeError exception.\r\nc. Return v.\r\n4. Else, map contains a formal parameter mapping for P so, \r\na. Return the result of calling the [[Get]] internal method of map passing P as the argument.\r\nThe [[GetOwnProperty]] internal method of an arguments object for a non-strict mode function with formal \r\nparameters when called with a property name P performs the following steps:\r\n1. Let desc be the result of calling the default [[GetOwnProperty]] internal method (8.12.1) on t he arguments \r\nobject passing P as the argument.\r\n2. If desc is undefined then return desc.\r\n3. Let map be the value of the [[ParameterMap]] internal property of the arguments object.\r\n4. Let isMapped be the result of calling the [[GetOwnProperty]] internal method of map passing P as the \r\nargument.\r\n5. If the value of isMapped is not undefined, then\r\na. Set desc.[[Value]] to the result of calling the [[Get]] internal method of map passing P as the \r\nargument.\r\n6. Return desc. \r\nThe [[DefineOwnProperty]] internal method of an arguments object for a non-strict mode function with formal \r\nparameters when called with a property name P, Property Descriptor Desc, and Boolean flag Throw performs \r\nthe following steps:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f2c07cf0-453a-4b48-a09e-1b55a3c8a5cd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d36ccff758d688278bff1374dd2eb48713db34346692900697e62e2f88ac6351",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 573
      },
      {
        "segments": [
          {
            "segment_id": "f2c07cf0-453a-4b48-a09e-1b55a3c8a5cd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 73,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 61\r\n13. If strict is false, then\r\na. Call the [[DefineOwnProperty]] internal method on obj passing \"callee\", the property descriptor \r\n{[[Value]]: func, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}, and false as \r\narguments.\r\n14. Else, strict is true so\r\na. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\r\nb. Call the [[DefineOwnProperty]] internal method of obj with arguments \"caller\", \r\nPropertyDescriptor {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: \r\nfalse}, and false.\r\nc. Call the [[DefineOwnProperty]] internal method of obj with arguments \"callee\", \r\nPropertyDescriptor {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: \r\nfalse}, and false.\r\n15. Return obj\r\nThe abstract operation MakeArgGetter called with String name and environment record env creates a function \r\nobject that when executed returns the value bound for name in env. It performs the following steps:\r\n1. Let body be the result of concatenating the Strings \"return \", name, and \";\".\r\n2. Return the result of creating a function object as described in 13.2 using no FormalParameterList, body for \r\nFunctionBody, env as Scope, and true for Strict.\r\nThe abstract operation MakeArgSetter called with String name and environment record env creates a function \r\nobject that when executed sets the value bound for name in env. It performs the following steps:\r\n1. Let param be the String name concatenated with the String \"_arg\".\r\n2. Let body be the String \"<name> = <param>;\" with <name> replaced by the value of name and <param> \r\nreplaced by the value of param.\r\n3. Return the result of creating a function object as described in 13.2 using a List containing the single String \r\nparam as FormalParameterList, body for FunctionBody, env as Scope, and true for Strict.\r\nThe [[Get]] internal method of an arguments object for a non-strict mode function with formal parameters when \r\ncalled with a property name P performs the following steps:\r\n1. Let map be the value of the [[ParameterMap]] internal property of the arguments object.\r\n2. Let isMapped be the result of calling the [[GetOwnProperty]] internal method of map passing P as the \r\nargument.\r\n3. If the value of isMapped is undefined, then\r\na. Let v be the result of calling the default [[Get]] internal method (8.12.3) on the arguments object \r\npassing P as the argument.\r\nb. If P is \"caller\" and v is a strict mode Function object, throw a TypeError exception.\r\nc. Return v.\r\n4. Else, map contains a formal parameter mapping for P so, \r\na. Return the result of calling the [[Get]] internal method of map passing P as the argument.\r\nThe [[GetOwnProperty]] internal method of an arguments object for a non-strict mode function with formal \r\nparameters when called with a property name P performs the following steps:\r\n1. Let desc be the result of calling the default [[GetOwnProperty]] internal method (8.12.1) on t he arguments \r\nobject passing P as the argument.\r\n2. If desc is undefined then return desc.\r\n3. Let map be the value of the [[ParameterMap]] internal property of the arguments object.\r\n4. Let isMapped be the result of calling the [[GetOwnProperty]] internal method of map passing P as the \r\nargument.\r\n5. If the value of isMapped is not undefined, then\r\na. Set desc.[[Value]] to the result of calling the [[Get]] internal method of map passing P as the \r\nargument.\r\n6. Return desc. \r\nThe [[DefineOwnProperty]] internal method of an arguments object for a non-strict mode function with formal \r\nparameters when called with a property name P, Property Descriptor Desc, and Boolean flag Throw performs \r\nthe following steps:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f2c07cf0-453a-4b48-a09e-1b55a3c8a5cd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d36ccff758d688278bff1374dd2eb48713db34346692900697e62e2f88ac6351",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 573
      },
      {
        "segments": [
          {
            "segment_id": "90c1a3fe-6c90-402f-8196-4af1a7676bb2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 74,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "62 © Ecma International 2011\r\n1. Let map be the value of the [[ParameterMap]] internal property of the arguments object.\r\n2. Let isMapped be the result of calling the [[GetOwnProperty]] internal method of map passing P as the \r\nargument.\r\n3. Let allowed be the result of calling the default [[DefineOwnProperty]] internal method (8.12. 9) on the \r\narguments object passing P, Desc, and false as the arguments.\r\n4. If allowed is false, then\r\na. If Throw is true then throw a TypeError exception, otherwise return false.\r\n5. If the value of isMapped is not undefined, then\r\na. If IsAccessorDescriptor(Desc) is true, then\r\ni. Call the [[Delete]] internal method of map passing P, and false as the arguments.\r\nb. Else\r\ni. If Desc.[[Value]] is present, then\r\n1. Call the [[Put]] internal method of map passing P, Desc.[[Value]], and Throw as the \r\narguments.\r\nii. If Desc.[[Writable]] is present and its value is false, then\r\n1. Call the [[Delete]] internal method of map passing P and false as arguments.\r\n6. Return true.\r\nThe [[Delete]] internal method of an arguments object for a non-strict mode function with formal parameters \r\nwhen called with a property name P and Boolean flag Throw performs the following steps:\r\n1. Let map be the value of the [[ParameterMap]] internal property of the arguments object.\r\n2. Let isMapped be the result of calling the [[GetOwnProperty]] internal method of map passing P as the \r\nargument.\r\n3. Let result be the result of calling the default [[Delete]] internal method (8.12.7) on the arguments object \r\npassing P and Throw as the arguments.\r\n4. If result is true and the value of isMapped is not undefined, then\r\na. Call the [[Delete]] internal method of map passing P, and false as the arguments.\r\n5. Return result.\r\nNOTE 1 For non-strict mode functions the array index (defined in 15.4) named data properties of an arguments object \r\nwhose numeric name values are less than the number of formal parameters of the corresponding function object initially \r\nshare their values with the corresponding argument bindings in the function‘s execution context. This means that changing \r\nthe property changes the corresponding value of the argument binding and vice-versa. This correspondence is broken if \r\nsuch a property is deleted and then redefined or if the property is changed into an accessor property. For strict mode \r\nfunctions, the values of the arguments object‘s properties are simply a copy of the arguments passed to the function and \r\nthere is no dynamic linkage between the property values and the formal parameter values.\r\nNOTE 2 The ParameterMap object and its property values are used as a device for specifying the arguments object \r\ncorrespondence to argument bindings. The ParameterMap object and the objects that are the values of its properties are \r\nnot directly accessible from ECMAScript code. An ECMAScript implementation does not need to actually create or use \r\nsuch objects to implement the specified semantics.\r\nNOTE 3 Arguments objects for strict mode functions define non-configurable accessor properties named \"caller\" and \r\n\"callee\" which throw a TypeError exception on access. The \"callee\" property has a more specific meaning for non\u0002strict mode functions and a \"caller\" property has historically been provided as an implementation-defined extension by \r\nsome ECMAScript implementations. The strict mode definition of these properties exists to ensure that neither of them is \r\ndefined in any other manner by conforming ECMAScript implementations.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/90c1a3fe-6c90-402f-8196-4af1a7676bb2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=df05ec4e58d62ce3a8b0e1376d62deeea13e3712875a78a0789735937a81b2e4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 552
      },
      {
        "segments": [
          {
            "segment_id": "90c1a3fe-6c90-402f-8196-4af1a7676bb2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 74,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "62 © Ecma International 2011\r\n1. Let map be the value of the [[ParameterMap]] internal property of the arguments object.\r\n2. Let isMapped be the result of calling the [[GetOwnProperty]] internal method of map passing P as the \r\nargument.\r\n3. Let allowed be the result of calling the default [[DefineOwnProperty]] internal method (8.12. 9) on the \r\narguments object passing P, Desc, and false as the arguments.\r\n4. If allowed is false, then\r\na. If Throw is true then throw a TypeError exception, otherwise return false.\r\n5. If the value of isMapped is not undefined, then\r\na. If IsAccessorDescriptor(Desc) is true, then\r\ni. Call the [[Delete]] internal method of map passing P, and false as the arguments.\r\nb. Else\r\ni. If Desc.[[Value]] is present, then\r\n1. Call the [[Put]] internal method of map passing P, Desc.[[Value]], and Throw as the \r\narguments.\r\nii. If Desc.[[Writable]] is present and its value is false, then\r\n1. Call the [[Delete]] internal method of map passing P and false as arguments.\r\n6. Return true.\r\nThe [[Delete]] internal method of an arguments object for a non-strict mode function with formal parameters \r\nwhen called with a property name P and Boolean flag Throw performs the following steps:\r\n1. Let map be the value of the [[ParameterMap]] internal property of the arguments object.\r\n2. Let isMapped be the result of calling the [[GetOwnProperty]] internal method of map passing P as the \r\nargument.\r\n3. Let result be the result of calling the default [[Delete]] internal method (8.12.7) on the arguments object \r\npassing P and Throw as the arguments.\r\n4. If result is true and the value of isMapped is not undefined, then\r\na. Call the [[Delete]] internal method of map passing P, and false as the arguments.\r\n5. Return result.\r\nNOTE 1 For non-strict mode functions the array index (defined in 15.4) named data properties of an arguments object \r\nwhose numeric name values are less than the number of formal parameters of the corresponding function object initially \r\nshare their values with the corresponding argument bindings in the function‘s execution context. This means that changing \r\nthe property changes the corresponding value of the argument binding and vice-versa. This correspondence is broken if \r\nsuch a property is deleted and then redefined or if the property is changed into an accessor property. For strict mode \r\nfunctions, the values of the arguments object‘s properties are simply a copy of the arguments passed to the function and \r\nthere is no dynamic linkage between the property values and the formal parameter values.\r\nNOTE 2 The ParameterMap object and its property values are used as a device for specifying the arguments object \r\ncorrespondence to argument bindings. The ParameterMap object and the objects that are the values of its properties are \r\nnot directly accessible from ECMAScript code. An ECMAScript implementation does not need to actually create or use \r\nsuch objects to implement the specified semantics.\r\nNOTE 3 Arguments objects for strict mode functions define non-configurable accessor properties named \"caller\" and \r\n\"callee\" which throw a TypeError exception on access. The \"callee\" property has a more specific meaning for non\u0002strict mode functions and a \"caller\" property has historically been provided as an implementation-defined extension by \r\nsome ECMAScript implementations. The strict mode definition of these properties exists to ensure that neither of them is \r\ndefined in any other manner by conforming ECMAScript implementations.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/90c1a3fe-6c90-402f-8196-4af1a7676bb2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=df05ec4e58d62ce3a8b0e1376d62deeea13e3712875a78a0789735937a81b2e4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 552
      },
      {
        "segments": [
          {
            "segment_id": "236659b9-6f12-4e47-ae77-6ccf25f8dd3d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 75,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 63\r\n11 Expressions\r\n11.1 Primary Expressions\r\nSyntax\r\nPrimaryExpression :\r\nthis\r\nIdentifier\r\nLiteral\r\nArrayLiteral\r\nObjectLiteral\r\n( Expression )\r\n11.1.1 The this Keyword\r\nThe this keyword evaluates to the value of the ThisBinding of the current execution context.\r\n11.1.2 Identifier Reference\r\nAn Identifier is evaluated by performing Identifier Resolution as specified in 10.3.1. The result of evaluating an \r\nIdentifier is always a value of type Reference.\r\n11.1.3 Literal Reference\r\nA Literal is evaluated as described in 7.8.\r\n11.1.4 Array Initialiser\r\nAn array initialiser is an expression describing the initialisation of an Array object, written in a form of a literal. \r\nIt is a list of zero or more expressions, each of which represents an array element, enclosed in square \r\nbrackets. The elements need not be literals; they are evaluated each time the array initialiser is evaluated.\r\nArray elements may be elided at the beginning, middle or end of the element list. Whenever a comma in the \r\nelement list is not preceded by an AssignmentExpression (i.e., a comma at the beginning or after another \r\ncomma), the missing array element contributes to the length of the Array and increases the index of \r\nsubsequent elements. Elided array elements are not defined. If an element is elided at the end of an array, \r\nthat element does not contribute to the length of the Array.\r\nSyntax\r\nArrayLiteral :\r\n[ Elisionopt ]\r\n[ ElementList ]\r\n[ ElementList , Elisionopt ]\r\nElementList :\r\nElisionopt AssignmentExpression\r\nElementList , Elisionopt AssignmentExpression\r\nElision :\r\n,\r\nElision ,\r\nSemantics\r\nThe production ArrayLiteral : [ Elisionopt ] is evaluated as follows:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/236659b9-6f12-4e47-ae77-6ccf25f8dd3d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1919d4d054a1734a93b11d95fd759a614d232a59af090188424ca9af488cd540",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 261
      },
      {
        "segments": [
          {
            "segment_id": "fc478766-a21c-4255-8f6c-c2ed5e3b9e77",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 76,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "64 © Ecma International 2011\r\n1. Let array be the result of creating a new object as if by the expression new Array() where Array is \r\nthe standard built-in constructor with that name.\r\n2. Let pad be the result of evaluating Elision; if not present, use the numeric value zero.\r\n3. Call the [[Put]] internal method of array with arguments \"length\", pad, and false.\r\n4. Return array.\r\nThe production ArrayLiteral : [ ElementList ] is evaluated as follows:\r\n1. Return the result of evaluating ElementList.\r\nThe production ArrayLiteral : [ ElementList , Elisionopt ] is evaluated as follows:\r\n1. Let array be the result of evaluating ElementList.\r\n2. Let pad be the result of evaluating Elision; if not present, use the numeric value zero.\r\n3. Let len be the result of calling the [[Get]] internal method of array with argument \"length\".\r\n4. Call the [[Put]] internal method of array with arguments \"length\", ToUint32(pad+len), and false.\r\n5. Return array.\r\nThe production ElementList : Elisionopt AssignmentExpression is evaluated as follows:\r\n1. Let array be the result of creating a new object as if by the expression new Array() where Array is \r\nthe standard built-in constructor with that name.\r\n2. Let firstIndex be the result of evaluating Elision; if not present, use the numeric value zero.\r\n3. Let initResult be the result of evaluating AssignmentExpression.\r\n4. Let initValue be GetValue(initResult).\r\n5. Call the [[DefineOwnProperty]] internal method of array with arguments ToString(firstIndex), the Property \r\nDescriptor { [[Value]]: initValue, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and \r\nfalse.\r\n6. Return array.\r\nThe production ElementList : ElementList , Elisionopt AssignmentExpression is evaluated as follows:\r\n1. Let array be the result of evaluating ElementList.\r\n2. Let pad be the result of evaluating Elision; if not present, use the numeric value zero.\r\n3. Let initResult be the result of evaluating AssignmentExpression.\r\n4. Let initValue be GetValue(initResult).\r\n5. Let len be the result of calling the [[Get]] internal method of array with argument \"length\".\r\n6. Call the [[DefineOwnProperty]] internal method of array with arguments ToString(ToUint32((pad+len)) and \r\nthe Property Descriptor { [[Value]]: initValue, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: \r\ntrue}, and false.\r\n7. Return array.\r\nThe production Elision : , is evaluated as follows:\r\n1. Return the numeric value 1.\r\nThe production Elision : Elision , is evaluated as follows:\r\n1. Let preceding be the result of evaluating Elision.\r\n2. Return preceding+1.\r\nNOTE [[DefineOwnProperty]] is used to ensure that own properties are defined for the array even if the standard \r\nbuilt-in Array prototype object has been modified in a manner that would preclude the creation of new own properties \r\nusing [[Put]].",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/fc478766-a21c-4255-8f6c-c2ed5e3b9e77.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cbc2b44f77452014ddf691724e2081a2032d08efbcb6a4de5940b5121e668010",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 429
      },
      {
        "segments": [
          {
            "segment_id": "e8466701-7077-4aba-b592-3332d9d09303",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 77,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 65\r\n11.1.5 Object Initialiser\r\nAn object initialiser is an expression describing the initialisation of an Object, written in a form resembling a \r\nliteral. It is a list of zero or more pairs of property names and associated values, enclosed in curly braces. The \r\nvalues need not be literals; they are evaluated each time the object initialiser is evaluated.\r\nSyntax\r\nObjectLiteral :\r\n{ }\r\n{ PropertyNameAndValueList }\r\n{ PropertyNameAndValueList , }\r\nPropertyNameAndValueList :\r\nPropertyAssignment\r\nPropertyNameAndValueList , PropertyAssignment\r\nPropertyAssignment :\r\nPropertyName : AssignmentExpression\r\nget PropertyName ( ) { FunctionBody }\r\nset PropertyName ( PropertySetParameterList ) { FunctionBody }\r\nPropertyName :\r\nIdentifierName\r\nStringLiteral\r\nNumericLiteral\r\nPropertySetParameterList :\r\nIdentifier\r\nSemantics\r\nThe production ObjectLiteral : { } is evaluated as follows:\r\n1. Return a new object created as if by the expression new Object() where Object is the standard built\u0002in constructor with that name.\r\nThe productions ObjectLiteral : { PropertyNameAndValueList } and\r\nObjectLiteral : { PropertyNameAndValueList ,} are evaluated as follows:\r\n1. Return the result of evaluating PropertyNameAndValueList.\r\nThe production PropertyNameAndValueList : PropertyAssignment is evaluated as follows:\r\n1. Let obj be the result of creating a new object as if by the expression new Object() where Object is the \r\nstandard built-in constructor with that name.\r\n2. Let propId be the result of evaluating PropertyAssignment.\r\n3. Call the [[DefineOwnProperty]] internal method of obj with arguments propId.name, propId.descriptor, and \r\nfalse.\r\n4. Return obj.\r\nThe production\r\n PropertyNameAndValueList : PropertyNameAndValueList , PropertyAssignment\r\nis evaluated as follows:\r\n1. Let obj be the result of evaluating PropertyNameAndValueList.\r\n2. Let propId be the result of evaluating PropertyAssignment.\r\n3. Let previous be the result of calling the [[GetOwnProperty]] internal method of obj with argument \r\npropId.name.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/e8466701-7077-4aba-b592-3332d9d09303.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b8ab9dd9e89511eda7ba96b46199ef8312f5bd8321ac2aa79ea86b256f224877",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 275
      },
      {
        "segments": [
          {
            "segment_id": "12c2961c-54aa-4fb8-ba20-182f9f42b327",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 78,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "66 © Ecma International 2011\r\n4. If previous is not undefined then throw a SyntaxError exception if any of the following conditions are true\r\na. This production is contained in strict code and IsDataDescriptor(previous) is true and \r\nIsDataDescriptor(propId.descriptor) is true.\r\nb. IsDataDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true.\r\nc. IsAccessorDescriptor(previous) is true and IsDataDescriptor(propId.descriptor) is true.\r\nd. IsAccessorDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true and\r\neither both previous and propId.descriptor have [[Get]] fields or both previous and propId.descriptor \r\nhave [[Set]] fields\r\n5. Call the [[DefineOwnProperty]] internal method of obj with arguments propId.name, propId.descriptor, and \r\nfalse.\r\n6. Return obj.\r\nIf the above steps would throw a SyntaxError then an implementation must treat the error as an early error \r\n(Clause 16).\r\nThe production PropertyAssignment : PropertyName : AssignmentExpression is evaluated as follows:\r\n1. Let propName be the result of evaluating PropertyName.\r\n2. Let exprValue be the result of evaluating AssignmentExpression.\r\n3. Let propValue be GetValue(exprValue).\r\n4. Let desc be the Property Descriptor{[[Value]]: propValue, [[Writable]]: true, [[Enumerable]]: true, \r\n[[Configurable]]: true}\r\n5. Return Property Identifier (propName, desc).\r\nThe production PropertyAssignment : get PropertyName ( ) { FunctionBody } is evaluated as follows:\r\n1. Let propName be the result of evaluating PropertyName.\r\n2. Let closure be the result of creating a new Function object as specified in 13.2 with an empty parameter list \r\nand body specified by FunctionBody. Pass in the LexicalEnvironment of the running execution context as the \r\nScope. Pass in true as the Strict flag if the PropertyAssignment is contained in strict code or if its \r\nFunctionBody is strict code.\r\n3. Let desc be the Property Descriptor{[[Get]]: closure, [[Enumerable]]: true, [[Configurable]]: true}\r\n4. Return Property Identifier (propName, desc).\r\nThe production PropertyAssignment : set PropertyName ( PropertySetParameterList ) { FunctionBody } is \r\nevaluated as follows:\r\n1. Let propName be the result of evaluating PropertyName.\r\n2. Let closure be the result of creating a new Function object as specified in 13.2 with parameters specified by \r\nPropertySetParameterList and body specified by FunctionBody. Pass in the LexicalEnvironment of the \r\nrunning execution context as the Scope. Pass in true as the Strict flag if the PropertyAssignment is contained \r\nin strict code or if its FunctionBody is strict code.\r\n3. Let desc be the Property Descriptor{[[Set]]: closure, [[Enumerable]]: true, [[Configurable]]: true}\r\n4. Return Property Identifier (propName, desc).\r\nIt is a SyntaxError if the Identifier \"eval\" or the Identifier \"arguments\" occurs as the Identifier in a \r\nPropertySetParameterList of a PropertyAssignment that is contained in strict code or if its FunctionBody is strict code.\r\nThe production PropertyName : IdentifierName is evaluated as follows:\r\n1. Return the String value containing the same sequence of characters as the IdentifierName.\r\nThe production PropertyName : StringLiteral is evaluated as follows:\r\n1. Return the SV of the StringLiteral.\r\nThe production PropertyName : NumericLiteral is evaluated as follows:\r\n1. Let nbr be the result of forming the value of the NumericLiteral.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/12c2961c-54aa-4fb8-ba20-182f9f42b327.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1b84d896809f6306d56d8aad43b752be32c4199a7e344ac15a046665def3a6d3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 474
      },
      {
        "segments": [
          {
            "segment_id": "4c6786d9-1bc3-4b01-9316-0869a0754c56",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 79,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 67\r\n2. Return ToString(nbr).\r\n11.1.6 The Grouping Operator\r\nThe production PrimaryExpression : ( Expression ) is evaluated as follows:\r\n1. Return the result of evaluating Expression. This may be of type Reference.\r\nNOTE This algorithm does not apply GetValue to the result of evaluating Expression. The principal motivation for this \r\nis so that operators such as delete and typeof may be applied to parenthesised expressions.\r\n11.2 Left-Hand-Side Expressions\r\nSyntax\r\nMemberExpression :\r\nPrimaryExpression\r\nFunctionExpression\r\nMemberExpression [ Expression ]\r\nMemberExpression . IdentifierName\r\nnew MemberExpression Arguments\r\nNewExpression :\r\nMemberExpression\r\nnew NewExpression\r\nCallExpression :\r\nMemberExpression Arguments\r\nCallExpression Arguments\r\nCallExpression [ Expression ]\r\nCallExpression . IdentifierName\r\nArguments :\r\n( )\r\n( ArgumentList )\r\nArgumentList :\r\nAssignmentExpression\r\nArgumentList , AssignmentExpression\r\nLeftHandSideExpression :\r\nNewExpression\r\nCallExpression\r\n11.2.1 Property Accessors\r\nProperties are accessed by name, using either the dot notation:\r\nMemberExpression . IdentifierName\r\nCallExpression . IdentifierName\r\nor the bracket notation:\r\nMemberExpression [ Expression ]\r\nCallExpression [ Expression ]\r\nThe dot notation is explained by the following syntactic conversion:\r\nMemberExpression . IdentifierName\r\nis identical in its behaviour to",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/4c6786d9-1bc3-4b01-9316-0869a0754c56.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bdf9b1f7044ef55ac26e9ca435658762483c9f02b7d4c3f9ee250a93872c1573",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 172
      },
      {
        "segments": [
          {
            "segment_id": "1190bd4d-3289-43d8-aee0-3681192b0acc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 80,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "68 © Ecma International 2011\r\nMemberExpression [ <identifier-name-string> ]\r\nand similarly\r\nCallExpression . IdentifierName\r\nis identical in its behaviour to\r\nCallExpression [ <identifier-name-string> ]\r\nwhere <identifier-name-string> is a string literal containing the same sequence of characters after processing \r\nof Unicode escape sequences as the IdentifierName.\r\nThe production MemberExpression : MemberExpression [ Expression ] is evaluated as follows:\r\n1. Let baseReference be the result of evaluating MemberExpression.\r\n2. Let baseValue be GetValue(baseReference).\r\n3. Let propertyNameReference be the result of evaluating Expression.\r\n4. Let propertyNameValue be GetValue(propertyNameReference).\r\n5. Call CheckObjectCoercible(baseValue).\r\n6. Let propertyNameString be ToString(propertyNameValue).\r\n7. If the syntactic production that is being evaluated is contained in strict mode code, let strict be true, else let \r\nstrict be false.\r\n8. Return a value of type Reference whose base value is baseValue and whose referenced name is \r\npropertyNameString, and whose strict mode flag is strict.\r\nThe production CallExpression : CallExpression [ Expression ] is evaluated in exactly the same manner, except \r\nthat the contained CallExpression is evaluated in step 1.\r\n11.2.2 The new Operator\r\nThe production NewExpression : new NewExpression is evaluated as follows:\r\n1. Let ref be the result of evaluating NewExpression.\r\n2. Let constructor be GetValue(ref).\r\n3. If Type(constructor) is not Object, throw a TypeError exception.\r\n4. If constructor does not implement the [[Construct]] internal method, throw a TypeError exception.\r\n5. Return the result of calling the [[Construct]] internal method on constructor, providing no arguments (that \r\nis, an empty list of arguments).\r\nThe production MemberExpression : new MemberExpression Arguments is evaluated as follows:\r\n1. Let ref be the result of evaluating MemberExpression.\r\n2. Let constructor be GetValue(ref).\r\n3. Let argList be the result of evaluating Arguments, producing an internal list of argument values (11.2.4).\r\n4. If Type(constructor) is not Object, throw a TypeError exception.\r\n5. If constructor does not implement the [[Construct]] internal method, throw a TypeError exception.\r\n6. Return the result of calling the [[Construct]] internal method on constructor, providing the list argList as the \r\nargument values.\r\n11.2.3 Function Calls\r\nThe production CallExpression : MemberExpression Arguments is evaluated as follows:\r\n1. Let ref be the result of evaluating MemberExpression.\r\n2. Let func be GetValue(ref).\r\n3. Let argList be the result of evaluating Arguments, producing an internal list of argument values (see 11.2.4).\r\n4. If Type(func) is not Object, throw a TypeError exception.\r\n5. If IsCallable(func) is false, throw a TypeError exception.\r\n6. If Type(ref) is Reference, then\r\na. If IsPropertyReference(ref) is true, then",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/1190bd4d-3289-43d8-aee0-3681192b0acc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8386a067d37647ad252e3cf693e9679527ca1ecf4b3595aafd1664f99c0bcd47",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 403
      },
      {
        "segments": [
          {
            "segment_id": "fde83942-e853-4ea8-a0bf-39adf8ea4941",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 81,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 69\r\ni. Let thisValue be GetBase(ref).\r\nb. Else, the base of ref is an Environment Record\r\ni. Let thisValue be the result of calling the ImplicitThisValue concrete method of \r\nGetBase(ref).\r\n7. Else, Type(ref) is not Reference.\r\na. Let thisValue be undefined.\r\n8. Return the result of calling the [[Call]] internal method on func, providing thisValue as the this value and \r\nproviding the list argList as the argument values.\r\nThe production CallExpression : CallExpression Arguments is evaluated in exactly the same manner, except that \r\nthe contained CallExpression is evaluated in step 1.\r\nNOTE The returned result will never be of type Reference if func is a native ECMAScript object. Whether calling a \r\nhost object can return a value of type Reference is implementation-dependent. If a value of type Reference is returned, it \r\nmust be a non-strict Property Reference.\r\n11.2.4 Argument Lists\r\nThe evaluation of an argument list produces a List of values (see 8.8).\r\nThe production Arguments : ( ) is evaluated as follows:\r\n1. Return an empty List.\r\nThe production Arguments : ( ArgumentList ) is evaluated as follows:\r\n1. Return the result of evaluating ArgumentList.\r\nThe production ArgumentList : AssignmentExpression is evaluated as follows:\r\n1. Let ref be the result of evaluating AssignmentExpression.\r\n2. Let arg be GetValue(ref).\r\n3. Return a List whose sole item is arg.\r\nThe production ArgumentList : ArgumentList , AssignmentExpression is evaluated as follows:\r\n1. Let precedingArgs be the result of evaluating ArgumentList.\r\n2. Let ref be the result of evaluating AssignmentExpression.\r\n3. Let arg be GetValue(ref).\r\n4. Return a List whose length is one greater than the length of precedingArgs and whose items are the items of \r\nprecedingArgs, in order, followed at the end by arg which is the last item of the new list.\r\n11.2.5 Function Expressions\r\nThe production MemberExpression : FunctionExpression is evaluated as follows:\r\n1. Return the result of evaluating FunctionExpression.\r\n11.3 Postfix Expressions\r\nSyntax\r\nPostfixExpression :\r\nLeftHandSideExpression\r\nLeftHandSideExpression [no LineTerminator here] ++\r\nLeftHandSideExpression [no LineTerminator here] --",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/fde83942-e853-4ea8-a0bf-39adf8ea4941.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e4b01779161ef0f8528f3db19c8669c49102c55176a41c35f10ccde5bb06cc3f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 331
      },
      {
        "segments": [
          {
            "segment_id": "52aff906-6bc8-4638-9060-a967a69d8dd6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 82,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "70 © Ecma International 2011\r\n11.3.1 Postfix Increment Operator\r\nThe production PostfixExpression : LeftHandSideExpression [no LineTerminator here] ++ is evaluated as follows:\r\n1. Let lhs be the result of evaluating LeftHandSideExpression.\r\n2. Throw a SyntaxError exception if the following conditions are all true:\r\n Type(lhs) is Reference is true\r\n IsStrictReference(lhs) is true\r\n Type(GetBase(lhs)) is Environment Record\r\n GetReferencedName(lhs) is either \"eval\" or \"arguments\"\r\n3. Let oldValue be ToNumber(GetValue(lhs)).\r\n4. Let newValue be the result of adding the value 1 to oldValue, using the same rules as for the + operator (see \r\n11.6.3).\r\n5. Call PutValue(lhs, newValue).\r\n6. Return oldValue.\r\n11.3.2 Postfix Decrement Operator\r\nThe production PostfixExpression : LeftHandSideExpression [no LineTerminator here] -- is evaluated as follows:\r\n1. Let lhs be the result of evaluating LeftHandSideExpression.\r\n2. Throw a SyntaxError exception if the following conditions are all true:\r\n Type(lhs) is Reference is true\r\n IsStrictReference(lhs) is true\r\n Type(GetBase(lhs)) is Environment Record\r\n GetReferencedName(lhs) is either \"eval\" or \"arguments\"\r\n3. Let oldValue be ToNumber(GetValue(lhs)).\r\n4. Let newValue be the result of subtracting the value 1 from oldValue, using the same rules as for the -\r\noperator (11.6.3).\r\n5. Call PutValue(lhs, newValue).\r\n6. Return oldValue.\r\n11.4 Unary Operators\r\nSyntax\r\nUnaryExpression :\r\nPostfixExpression\r\ndelete UnaryExpression\r\nvoid UnaryExpression\r\ntypeof UnaryExpression\r\n++ UnaryExpression\r\n-- UnaryExpression\r\n+ UnaryExpression\r\n- UnaryExpression\r\n~ UnaryExpression\r\n! UnaryExpression\r\n11.4.1 The delete Operator\r\nThe production UnaryExpression : delete UnaryExpression is evaluated as follows:\r\n1. Let ref be the result of evaluating UnaryExpression.\r\n2. If Type(ref) is not Reference, return true.\r\n3. If IsUnresolvableReference(ref) then,\r\na. If IsStrictReference(ref) is true, throw a SyntaxError exception.\r\nb. Else, return true.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/52aff906-6bc8-4638-9060-a967a69d8dd6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6b463f4fd40c17bfeb214b2435161695296ab13e8ebaa2cc18cf67e408c6b810",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 269
      },
      {
        "segments": [
          {
            "segment_id": "11e4930a-ee47-49ef-b80c-d9476a2017f9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 83,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 71\r\n4. If IsPropertyReference(ref) is true, then\r\na. Return the result of calling the [[Delete]] internal method on ToObject(GetBase(ref)) providing \r\nGetReferencedName(ref) and IsStrictReference(ref) as the arguments.\r\n5. Else, ref is a Reference to an Environment Record binding, so\r\na. If IsStrictReference(ref) is true, throw a SyntaxError exception.\r\nb. Let bindings be GetBase(ref).\r\nc. Return the result of calling the DeleteBinding concrete method of bindings, providing \r\nGetReferencedName(ref) as the argument.\r\nNOTE When a delete operator occurs within strict mode code, a SyntaxError exception is thrown if its \r\nUnaryExpression is a direct reference to a variable, function argument, or function name. In addition, if a delete operator \r\noccurs within strict mode code and the property to be deleted has the attribute { [[Configurable]]: false }, a TypeError \r\nexception is thrown.\r\n11.4.2 The void Operator\r\nThe production UnaryExpression : void UnaryExpression is evaluated as follows:\r\n1. Let expr be the result of evaluating UnaryExpression.\r\n2. Call GetValue(expr).\r\n3. Return undefined.\r\nNOTE GetValue must be called even though its value is not used because it may have observable side-effects.\r\n11.4.3 The typeof Operator\r\nThe production UnaryExpression : typeof UnaryExpression is evaluated as follows:\r\n1. Let val be the result of evaluating UnaryExpression.\r\n2. If Type(val) is Reference, then\r\na. If IsUnresolvableReference(val) is true, return \"undefined\".\r\nb. Let val be GetValue(val).\r\n3. Return a String determined by Type(val) according to Table 20.\r\nTable 20 — typeof Operator Results\r\nType of val Result\r\nUndefined \"undefined\"\r\nNull \"object\"\r\nBoolean \"boolean\"\r\nNumber \"number\"\r\nString \"string\"\r\nObject (native and does\r\nnot implement [[Call]])\r\n\"object\"\r\nObject (native or host and \r\ndoes implement [[Call]])\r\n\"function\"\r\nObject (host and does not \r\nimplement [[Call]])\r\nImplementation-defined except may \r\nnot be \"undefined\", \"boolean\", \r\n\"number\", or \"string\".\r\n11.4.4 Prefix Increment Operator\r\nThe production UnaryExpression : ++ UnaryExpression is evaluated as follows:\r\n1. Let expr be the result of evaluating UnaryExpression.\r\n2. Throw a SyntaxError exception if the following conditions are all true:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/11e4930a-ee47-49ef-b80c-d9476a2017f9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=053ffd7234e7e15e2474ff869c997dac52b31239abbf583f3f84e9cd3e6f8ace",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 320
      },
      {
        "segments": [
          {
            "segment_id": "bd138d70-4a8a-4017-89eb-8b1ac67b65e1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 84,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "72 © Ecma International 2011\r\n Type(expr) is Reference is true\r\n IsStrictReference(expr) is true\r\n Type(GetBase(expr)) is Environment Record\r\n GetReferencedName(expr) is either \"eval\" or \"arguments\"\r\n3. Let oldValue be ToNumber(GetValue(expr)).\r\n4. Let newValue be the result of adding the value 1 to oldValue, using the same rules as for the + operator (see \r\n11.6.3).\r\n5. Call PutValue(expr, newValue).\r\n6. Return newValue.\r\n11.4.5 Prefix Decrement Operator\r\nThe production UnaryExpression : -- UnaryExpression is evaluated as follows:\r\n1. Let expr be the result of evaluating UnaryExpression.\r\n2. Throw a SyntaxError exception if the following conditions are all true:\r\n Type(expr) is Reference is true\r\n IsStrictReference(expr) is true\r\n Type(GetBase(expr)) is Environment Record\r\n GetReferencedName(expr) is either \"eval\" or \"arguments\"\r\n3. Let oldValue be ToNumber(GetValue(expr)).\r\n4. Let newValue be the result of subtracting the value 1 from oldValue, using the same rules as for the -\r\noperator (see 11.6.3).\r\n5. Call PutValue(expr, newValue).\r\n6. Return newValue.\r\n11.4.6 Unary + Operator\r\nThe unary + operator converts its operand to Number type.\r\nThe production UnaryExpression : + UnaryExpression is evaluated as follows:\r\n1. Let expr be the result of evaluating UnaryExpression.\r\n2. Return ToNumber(GetValue(expr)).\r\n11.4.7 Unary - Operator\r\nThe unary - operator converts its operand to Number type and then negates it. Note that negating +0\r\nproduces 0, and negating 0 produces +0.\r\nThe production UnaryExpression : - UnaryExpression is evaluated as follows:\r\n1. Let expr be the result of evaluating UnaryExpression.\r\n2. Let oldValue be ToNumber(GetValue(expr)).\r\n3. If oldValue is NaN, return NaN.\r\n4. Return the result of negating oldValue; that is, compute a Number with the same magnitude but opposite \r\nsign.\r\n11.4.8 Bitwise NOT Operator ( ~ )\r\nThe production UnaryExpression : ~ UnaryExpression is evaluated as follows:\r\n1. Let expr be the result of evaluating UnaryExpression.\r\n2. Let oldValue be ToInt32(GetValue(expr)).\r\n3. Return the result of applying bitwise complement to oldValue. The result is a signed 32-bit integer.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/bd138d70-4a8a-4017-89eb-8b1ac67b65e1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2095f5bb983e0c813a11f825e2b9441d0c61a8ffcc3ccb16d287f24f3d99071b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 319
      },
      {
        "segments": [
          {
            "segment_id": "7d3c780c-4650-4815-8440-ba86f55d47f0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 85,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 73\r\n11.4.9 Logical NOT Operator ( ! )\r\nThe production UnaryExpression : ! UnaryExpression is evaluated as follows:\r\n1. Let expr be the result of evaluating UnaryExpression.\r\n2. Let oldValue be ToBoolean(GetValue(expr)).\r\n3. If oldValue is true, return false.\r\n4. Return true.\r\n11.5 Multiplicative Operators\r\nSyntax\r\nMultiplicativeExpression :\r\nUnaryExpression\r\nMultiplicativeExpression * UnaryExpression\r\nMultiplicativeExpression / UnaryExpression\r\nMultiplicativeExpression % UnaryExpression\r\nSemantics\r\nThe production MultiplicativeExpression : MultiplicativeExpression @ UnaryExpression, where @ stands for one \r\nof the operators in the above definitions, is evaluated as follows:\r\n1. Let left be the result of evaluating MultiplicativeExpression.\r\n2. Let leftValue be GetValue(left).\r\n3. Let right be the result of evaluating UnaryExpression.\r\n4. Let rightValue be GetValue(right).\r\n5. Let leftNum be ToNumber(leftValue).\r\n6. Let rightNum be ToNumber(rightValue).\r\n7. Return the result of applying the specified operation (*, /, or %) to leftNum and rightNum. See the Notes \r\nbelow 11.5.1, 11.5.2, 11.5.3.\r\n11.5.1 Applying the * Operator\r\nThe * operator performs multiplication, producing the product of its operands. Multiplication is commutative. \r\nMultiplication is not always associative in ECMAScript, because of finite precision.\r\nThe result of a floating-point multiplication is governed by the rules of IEEE 754 binary double-precision \r\narithmetic:\r\n If either operand is NaN, the result is NaN.\r\n The sign of the result is positive if both operands have the same sign, negative if the \r\noperands have different signs.\r\n Multiplication of an infinity by a zero results in NaN.\r\n Multiplication of an infinity by an infinity results in an infinity. The sign is determined by the \r\nrule already stated above.\r\n Multiplication of an infinity by a finite nonzero value results in a signed infinity. The sign is \r\ndetermined by the rule already stated above.\r\n In the remaining cases, where neither an infinity or NaN is involved, the product is computed \r\nand rounded to the nearest representable value using IEEE 754 round-to-nearest mode. If \r\nthe magnitude is too large to represent, the result is then an infinity of appropriate sign. If \r\nthe magnitude is too small to represent, the result is then a zero of appropriate sign. The \r\nECMAScript language requires support of gradual underflow as defined by IEEE 754.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/7d3c780c-4650-4815-8440-ba86f55d47f0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=16e3e18dc0806f9f770d67988bad5691308d50920795d71d56cb536761ddfd88",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 361
      },
      {
        "segments": [
          {
            "segment_id": "b419b9e7-2f32-4bf3-8754-9c75486be943",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 86,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "74 © Ecma International 2011\r\n11.5.2 Applying the / Operator\r\nThe / operator performs division, producing the quotient of its operands. The left operand is the dividend and \r\nthe right operand is the divisor. ECMAScript does not perform integer division. The operands and result of all \r\ndivision operations are double-precision floating-point numbers. The result of division is determined by the \r\nspecification of IEEE 754 arithmetic:\r\n If either operand is NaN, the result is NaN.\r\n The sign of the result is positive if both operands have the same sign, negative if the \r\noperands have different signs.\r\n Division of an infinity by an infinity results in NaN.\r\n Division of an infinity by a zero results in an infinity. The sign is determined by the rule \r\nalready stated above.\r\n Division of an infinity by a nonzero finite value results in a signed infinity. The sign is \r\ndetermined by the rule already stated above.\r\n Division of a finite value by an infinity results in zero. The sign is determined by the rule \r\nalready stated above.\r\n Division of a zero by a zero results in NaN; division of zero by any other finite value results \r\nin zero, with the sign determined by the rule already stated above.\r\n Division of a nonzero finite value by a zero results in a signed infinity. The sign is \r\ndetermined by the rule already stated above.\r\n In the remaining cases, where neither an infinity, nor a zero, nor NaN is involved, the \r\nquotient is computed and rounded to the nearest representable value using IEEE 754 round -\r\nto-nearest mode. If the magnitude is too large to represent, the operation overflows; the \r\nresult is then an infinity of appropriate sign. If the magnitude is too small to represent, the \r\noperation underflows and the result is a zero of the appropriate sign. The ECMAScript \r\nlanguage requires support of gradual underflow as defined by IEEE 754.\r\n11.5.3 Applying the % Operator\r\nThe % operator yields the remainder of its operands from an implied division; the left operand is the dividend \r\nand the right operand is the divisor.\r\nNOTE In C and C++, the remainder operator accepts only integral operands; in ECMAScript, it also accepts floating\u0002point operands.\r\nThe result of a floating-point remainder operation as computed by the % operator is not the same as the \r\n―remainder‖ operation defined by IEEE 754. The IEEE 754 ―remainder‖ operation computes the remainder \r\nfrom a rounding division, not a truncating division, and so its behaviour is not analogous to that of the usual \r\ninteger remainder operator. Instead the ECMAScript language defines % on floating-point operations to \r\nbehave in a manner analogous to that of the Java integer remainder operator; this may be compared with the \r\nC library function fmod.\r\nThe result of an ECMAScript floating-point remainder operation is determined by the rules of IEEE arithmetic:\r\n If either operand is NaN, the result is NaN.\r\n The sign of the result equals the sign of the dividend.\r\n If the dividend is an infinity, or the divisor is a zero, or both, the result is NaN.\r\n If the dividend is finite and the divisor is an infinity, the result equals the dividend.\r\n If the dividend is a zero and the divisor is nonzero and finite, the result is the same as the \r\ndividend.\r\n In the remaining cases, where neither an infinity, nor a zero, nor NaN is involved, the \r\nfloating-point remainder r from a dividend n and a divisor d is defined by the mathematical \r\nrelation r = n  (d  q) where q is an integer that is negative only if n/d is negative and \r\npositive only if n/d is positive, and whose magnitude is as large as possible without \r\nexceeding the magnitude of the true mathematical quotient of n and d. r is computed and \r\nrounded to the nearest representable value using IEEE 754 round-to-nearest mode.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/b419b9e7-2f32-4bf3-8754-9c75486be943.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b37c99b518182f1ad006f8a13cfb8da84980722b9aef73e0d400ee219f784658",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 654
      },
      {
        "segments": [
          {
            "segment_id": "b419b9e7-2f32-4bf3-8754-9c75486be943",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 86,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "74 © Ecma International 2011\r\n11.5.2 Applying the / Operator\r\nThe / operator performs division, producing the quotient of its operands. The left operand is the dividend and \r\nthe right operand is the divisor. ECMAScript does not perform integer division. The operands and result of all \r\ndivision operations are double-precision floating-point numbers. The result of division is determined by the \r\nspecification of IEEE 754 arithmetic:\r\n If either operand is NaN, the result is NaN.\r\n The sign of the result is positive if both operands have the same sign, negative if the \r\noperands have different signs.\r\n Division of an infinity by an infinity results in NaN.\r\n Division of an infinity by a zero results in an infinity. The sign is determined by the rule \r\nalready stated above.\r\n Division of an infinity by a nonzero finite value results in a signed infinity. The sign is \r\ndetermined by the rule already stated above.\r\n Division of a finite value by an infinity results in zero. The sign is determined by the rule \r\nalready stated above.\r\n Division of a zero by a zero results in NaN; division of zero by any other finite value results \r\nin zero, with the sign determined by the rule already stated above.\r\n Division of a nonzero finite value by a zero results in a signed infinity. The sign is \r\ndetermined by the rule already stated above.\r\n In the remaining cases, where neither an infinity, nor a zero, nor NaN is involved, the \r\nquotient is computed and rounded to the nearest representable value using IEEE 754 round -\r\nto-nearest mode. If the magnitude is too large to represent, the operation overflows; the \r\nresult is then an infinity of appropriate sign. If the magnitude is too small to represent, the \r\noperation underflows and the result is a zero of the appropriate sign. The ECMAScript \r\nlanguage requires support of gradual underflow as defined by IEEE 754.\r\n11.5.3 Applying the % Operator\r\nThe % operator yields the remainder of its operands from an implied division; the left operand is the dividend \r\nand the right operand is the divisor.\r\nNOTE In C and C++, the remainder operator accepts only integral operands; in ECMAScript, it also accepts floating\u0002point operands.\r\nThe result of a floating-point remainder operation as computed by the % operator is not the same as the \r\n―remainder‖ operation defined by IEEE 754. The IEEE 754 ―remainder‖ operation computes the remainder \r\nfrom a rounding division, not a truncating division, and so its behaviour is not analogous to that of the usual \r\ninteger remainder operator. Instead the ECMAScript language defines % on floating-point operations to \r\nbehave in a manner analogous to that of the Java integer remainder operator; this may be compared with the \r\nC library function fmod.\r\nThe result of an ECMAScript floating-point remainder operation is determined by the rules of IEEE arithmetic:\r\n If either operand is NaN, the result is NaN.\r\n The sign of the result equals the sign of the dividend.\r\n If the dividend is an infinity, or the divisor is a zero, or both, the result is NaN.\r\n If the dividend is finite and the divisor is an infinity, the result equals the dividend.\r\n If the dividend is a zero and the divisor is nonzero and finite, the result is the same as the \r\ndividend.\r\n In the remaining cases, where neither an infinity, nor a zero, nor NaN is involved, the \r\nfloating-point remainder r from a dividend n and a divisor d is defined by the mathematical \r\nrelation r = n  (d  q) where q is an integer that is negative only if n/d is negative and \r\npositive only if n/d is positive, and whose magnitude is as large as possible without \r\nexceeding the magnitude of the true mathematical quotient of n and d. r is computed and \r\nrounded to the nearest representable value using IEEE 754 round-to-nearest mode.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/b419b9e7-2f32-4bf3-8754-9c75486be943.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b37c99b518182f1ad006f8a13cfb8da84980722b9aef73e0d400ee219f784658",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 654
      },
      {
        "segments": [
          {
            "segment_id": "c6059438-ca77-4b8f-9e80-2712571f2e20",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 87,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 75\r\n11.6 Additive Operators\r\nSyntax\r\nAdditiveExpression :\r\nMultiplicativeExpression\r\nAdditiveExpression + MultiplicativeExpression\r\nAdditiveExpression - MultiplicativeExpression\r\n11.6.1 The Addition operator ( + )\r\nThe addition operator either performs string concatenation or numeric addition.\r\nThe production AdditiveExpression : AdditiveExpression + MultiplicativeExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating AdditiveExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating MultiplicativeExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Let lprim be ToPrimitive(lval).\r\n6. Let rprim be ToPrimitive(rval).\r\n7. If Type(lprim) is String or Type(rprim) is String, then \r\na. Return the String that is the result of concatenating ToString(lprim) followed by ToString(rprim)\r\n8. Return the result of applying the addition operation to ToNumber(lprim) and ToNumber(rprim). See the \r\nNote below 11.6.3.\r\nNOTE 1 No hint is provided in the calls to ToPrimitive in steps 5 and 6. All native ECMAScript objects except Date \r\nobjects handle the absence of a hint as if the hint Number were given; Date objects handle the absence of a hint as if the \r\nhint String were given. Host objects may handle the absence of a hint in some other manner.\r\nNOTE 2 Step 7 differs from step 3 of the comparison algorithm for the relational operators (11.8.5), by using the \r\nlogical-or operation instead of the logical-and operation.\r\n11.6.2 The Subtraction Operator ( - )\r\nThe production AdditiveExpression : AdditiveExpression - MultiplicativeExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating AdditiveExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating MultiplicativeExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Let lnum be ToNumber(lval).\r\n6. Let rnum be ToNumber(rval).\r\n7. Return the result of applying the subtraction operation to lnum and rnum. See the note below 11.6.3.\r\n11.6.3 Applying the Additive Operators to Numbers\r\nThe + operator performs addition when applied to two operands of numeric type, producing the sum of the \r\noperands. The - operator performs subtraction, producing the difference of two numeric operands.\r\nAddition is a commutative operation, but not always associative.\r\nThe result of an addition is determined using the rules of IEEE 754 binary double-precision arithmetic:\r\n If either operand is NaN, the result is NaN.\r\n The sum of two infinities of opposite sign is NaN.\r\n The sum of two infinities of the same sign is the infinity of that sign.\r\n The sum of an infinity and a finite value is equal to the infinite operand.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c6059438-ca77-4b8f-9e80-2712571f2e20.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b70938a7f1ca31a9f5016210305b193859b7b63a2b3c2151c69e46522c8d021f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 407
      },
      {
        "segments": [
          {
            "segment_id": "a5ff26c7-ddc8-4d6f-bd81-2bd46353fdb1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 88,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "76 © Ecma International 2011\r\n The sum of two negative zeroes is 0. The sum of two positive zeroes, or of two zeroes of \r\nopposite sign, is +0.\r\n The sum of a zero and a nonzero finite value is equal to the nonzero operand.\r\n The sum of two nonzero finite values of the same magnitude and opposite sign is +0.\r\n In the remaining cases, where neither an infinity, nor a zero, nor NaN is involved, and the \r\noperands have the same sign or have different magnitudes, the sum is computed and \r\nrounded to the nearest representable value using IEEE 754 round-to-nearest mode. If the \r\nmagnitude is too large to represent, the operation overflows and the result is then an infinity \r\nof appropriate sign. The ECMAScript language requires support of gradual underflow as \r\ndefined by IEEE 754.\r\nThe - operator performs subtraction when applied to two operands of numeric type, producing the difference \r\nof its operands; the left operand is the minuend and the right operand is the subtrahend. Given numeric\r\noperands a and b, it is always the case that a–b produces the same result as a +(–b).\r\n11.7 Bitwise Shift Operators\r\nSyntax\r\nShiftExpression :\r\nAdditiveExpression\r\nShiftExpression << AdditiveExpression\r\nShiftExpression >> AdditiveExpression\r\nShiftExpression >>> AdditiveExpression\r\n11.7.1 The Left Shift Operator ( << )\r\nPerforms a bitwise left shift operation on the left operand by the amount specified by the right operand.\r\nThe production ShiftExpression : ShiftExpression << AdditiveExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating ShiftExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating AdditiveExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Let lnum be ToInt32(lval).\r\n6. Let rnum be ToUint32(rval).\r\n7. Let shiftCount be the result of masking out all but the least significant 5 bits of rnum, that is, compute rnum\r\n& 0x1F.\r\n8. Return the result of left shifting lnum by shiftCount bits. The result is a signed 32-bit integer.\r\n11.7.2 The Signed Right Shift Operator ( >> )\r\nPerforms a sign-filling bitwise right shift operation on the left operand by the amount specified by the right \r\noperand.\r\nThe production ShiftExpression : ShiftExpression >> AdditiveExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating ShiftExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating AdditiveExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Let lnum be ToInt32(lval).\r\n6. Let rnum be ToUint32(rval).\r\n7. Let shiftCount be the result of masking out all but the least significant 5 bits of rnum, that is, compute rnum\r\n& 0x1F.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/a5ff26c7-ddc8-4d6f-bd81-2bd46353fdb1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b5d1069090dd0739c2217df53521bfcd6e3f22926a344529aeeb3269214828f1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 427
      },
      {
        "segments": [
          {
            "segment_id": "881e47ed-d871-4d33-a75b-b5e0857ae698",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 89,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 77\r\n8. Return the result of performing a sign-extending right shift of lnum by shiftCount bits. The most significant \r\nbit is propagated. The result is a signed 32-bit integer.\r\n11.7.3 The Unsigned Right Shift Operator ( >>> )\r\nPerforms a zero-filling bitwise right shift operation on the left operand by the amount specified by the right \r\noperand.\r\nThe production ShiftExpression : ShiftExpression >>> AdditiveExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating ShiftExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating AdditiveExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Let lnum be ToUint32(lval).\r\n6. Let rnum be ToUint32(rval).\r\n7. Let shiftCount be the result of masking out all but the least significant 5 bits of rnum, that is, compute rnum\r\n& 0x1F.\r\n8. Return the result of performing a zero-filling right shift of lnum by shiftCount bits. Vacated bits are filled \r\nwith zero. The result is an unsigned 32-bit integer.\r\n11.8 Relational Operators\r\nSyntax\r\nRelationalExpression :\r\nShiftExpression\r\nRelationalExpression < ShiftExpression\r\nRelationalExpression > ShiftExpression\r\nRelationalExpression <= ShiftExpression\r\nRelationalExpression >= ShiftExpression\r\nRelationalExpression instanceof ShiftExpression\r\nRelationalExpression in ShiftExpression\r\nRelationalExpressionNoIn :\r\nShiftExpression\r\nRelationalExpressionNoIn < ShiftExpression\r\nRelationalExpressionNoIn > ShiftExpression\r\nRelationalExpressionNoIn <= ShiftExpression\r\nRelationalExpressionNoIn >= ShiftExpression\r\nRelationalExpressionNoIn instanceof ShiftExpression\r\nNOTE The ―NoIn‖ variants are needed to avoid confusing the in operator in a relational expression with the in\r\noperator in a for statement.\r\nSemantics\r\nThe result of evaluating a relational operator is always of type Boolean, reflecting whether the relationship \r\nnamed by the operator holds between its two operands.\r\nThe RelationalExpressionNoIn productions are evaluated in the same manner as the RelationalExpression\r\nproductions except that the contained RelationalExpressionNoIn is evaluated instead of the contained \r\nRelationalExpression.\r\n11.8.1 The Less-than Operator ( < )\r\nThe production RelationalExpression : RelationalExpression < ShiftExpression is evaluated as follows:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/881e47ed-d871-4d33-a75b-b5e0857ae698.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f1193e7db3b4a277996f33056f97cca3aa96b621075f7089059942a7d2f46b04",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 298
      },
      {
        "segments": [
          {
            "segment_id": "741e5adc-6a29-48c6-b6d1-c3552db162fe",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 90,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "78 © Ecma International 2011\r\n1. Let lref be the result of evaluating RelationalExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating ShiftExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Let r be the result of performing abstract relational comparison lval < rval. (see 11.8.5)\r\n6. If r is undefined, return false. Otherwise, return r.\r\n11.8.2 The Greater-than Operator ( > )\r\nThe production RelationalExpression : RelationalExpression > ShiftExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating RelationalExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating ShiftExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Let r be the result of performing abstract relational comparison rval < lval with LeftFirst equal to false. (see \r\n11.8.5).\r\n6. If r is undefined, return false. Otherwise, return r.\r\n11.8.3 The Less-than-or-equal Operator ( <= )\r\nThe production RelationalExpression : RelationalExpression <= ShiftExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating RelationalExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating ShiftExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Let r be the result of performing abstract relational comparison rval < lval with LeftFirst equal to false. (see \r\n11.8.5).\r\n6. If r is true or undefined, return false. Otherwise, return true.\r\n11.8.4 The Greater-than-or-equal Operator ( >= )\r\nThe production RelationalExpression : RelationalExpression >= ShiftExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating RelationalExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating ShiftExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Let r be the result of performing abstract relational comparison lval < rval. (see 11.8.5)\r\n6. If r is true or undefined, return false. Otherwise, return true.\r\n11.8.5 The Abstract Relational Comparison Algorithm\r\nThe comparison x < y, where x and y are values, produces true, false, or undefined (which indicates that at \r\nleast one operand is NaN). In addition to x and y the algorithm takes a Boolean flag named LeftFirst as a \r\nparameter. The flag is used to control the order in which operations with potentially visible side-effects are \r\nperformed upon x and y. It is necessary because ECMAScript specifies left to right evaluation of expressions. \r\nThe default value of LeftFirst is true and indicates that the x parameter corresponds to an expression that \r\noccurs to the left of the y parameter‘s corresponding expression. If LeftFirst is false, the reverse is the case \r\nand operations must be performed upon y before x. Such a comparison is performed as follows:\r\n1. If the LeftFirst flag is true, then\r\na. Let px be the result of calling ToPrimitive(x, hint Number).\r\nb. Let py be the result of calling ToPrimitive(y, hint Number).\r\n2. Else the order of evaluation needs to be reversed to preserve left to right evaluation\r\na. Let py be the result of calling ToPrimitive(y, hint Number).\r\nb. Let px be the result of calling ToPrimitive(x, hint Number).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/741e5adc-6a29-48c6-b6d1-c3552db162fe.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=73609318d5f970b27c7ab27f03f35f051dcd22a603cd7aef671a0ac31fa22833",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 491
      },
      {
        "segments": [
          {
            "segment_id": "f9651119-cbb0-48b4-97ae-88a891f539ac",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 91,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 79\r\n3. If it is not the case that both Type(px) is String and Type(py) is String, then \r\na. Let nx be the result of calling ToNumber(px). Because px and py are primitive values evaluation \r\norder is not important.\r\nb. Let ny be the result of calling ToNumber(py).\r\nc. If nx is NaN, return undefined.\r\nd. If ny is NaN, return undefined.\r\ne. If nx and ny are the same Number value, return false.\r\nf. If nx is +0 and ny is 0, return false.\r\ng. If nx is 0 and ny is +0, return false.\r\nh. If nx is +, return false.\r\ni. If ny is +, return true.\r\nj. If ny is , return false.\r\nk. If nx is , return true.\r\nl. If the mathematical value of nx is less than the mathematical value of ny —note that these \r\nmathematical values are both finite and not both zero—return true. Otherwise, return false.\r\n4. Else, both px and py are Strings\r\na. If py is a prefix of px, return false. (A String value p is a prefix of String value q if q can be the \r\nresult of concatenating p and some other String r. Note that any String is a prefix of itself, because r\r\nmay be the empty String.)\r\nb. If px is a prefix of py, return true.\r\nc. Let k be the smallest nonnegative integer such that the character at position k within px is different \r\nfrom the character at position k within py. (There must be such a k, for neither String is a prefix of \r\nthe other.)\r\nd. Let m be the integer that is the code unit value for the character at position k within px.\r\ne. Let n be the integer that is the code unit value for the character at position k within py.\r\nf. If m < n, return true. Otherwise, return false.\r\nNOTE 1 Step 3 differs from step 7 in the algorithm for the addition operator + (11.6.1) in using and instead of or.\r\nNOTE 2 The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no \r\nattempt to use the more complex, semantically oriented definitions of character or string equality and collating order \r\ndefined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard \r\ncould test as unequal. In effect this algorithm assumes that both Strings are already in normalised form. Also, note that for \r\nstrings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from \r\nthat on sequences of code point values.\r\n11.8.6 The instanceof operator\r\nThe production RelationalExpression: RelationalExpression instanceof ShiftExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating RelationalExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating ShiftExpression.\r\n4. Let rval be GetValue(rref).\r\n5. If Type(rval) is not Object, throw a TypeError exception.\r\n6. If rval does not have a [[HasInstance]] internal method, throw a TypeError exception.\r\n7. Return the result of calling the [[HasInstance]] internal method of rval with argument lval.\r\n11.8.7 The in operator\r\nThe production RelationalExpression : RelationalExpression in ShiftExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating RelationalExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating ShiftExpression.\r\n4. Let rval be GetValue(rref).\r\n5. If Type(rval) is not Object, throw a TypeError exception.\r\n6. Return the result of calling the [[HasProperty]] internal method of rval with argument ToString(lval).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f9651119-cbb0-48b4-97ae-88a891f539ac.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=06893842d33f869e538a9d8ad82047ac405cdcc484d62e1b468763cf5635469c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 589
      },
      {
        "segments": [
          {
            "segment_id": "f9651119-cbb0-48b4-97ae-88a891f539ac",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 91,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 79\r\n3. If it is not the case that both Type(px) is String and Type(py) is String, then \r\na. Let nx be the result of calling ToNumber(px). Because px and py are primitive values evaluation \r\norder is not important.\r\nb. Let ny be the result of calling ToNumber(py).\r\nc. If nx is NaN, return undefined.\r\nd. If ny is NaN, return undefined.\r\ne. If nx and ny are the same Number value, return false.\r\nf. If nx is +0 and ny is 0, return false.\r\ng. If nx is 0 and ny is +0, return false.\r\nh. If nx is +, return false.\r\ni. If ny is +, return true.\r\nj. If ny is , return false.\r\nk. If nx is , return true.\r\nl. If the mathematical value of nx is less than the mathematical value of ny —note that these \r\nmathematical values are both finite and not both zero—return true. Otherwise, return false.\r\n4. Else, both px and py are Strings\r\na. If py is a prefix of px, return false. (A String value p is a prefix of String value q if q can be the \r\nresult of concatenating p and some other String r. Note that any String is a prefix of itself, because r\r\nmay be the empty String.)\r\nb. If px is a prefix of py, return true.\r\nc. Let k be the smallest nonnegative integer such that the character at position k within px is different \r\nfrom the character at position k within py. (There must be such a k, for neither String is a prefix of \r\nthe other.)\r\nd. Let m be the integer that is the code unit value for the character at position k within px.\r\ne. Let n be the integer that is the code unit value for the character at position k within py.\r\nf. If m < n, return true. Otherwise, return false.\r\nNOTE 1 Step 3 differs from step 7 in the algorithm for the addition operator + (11.6.1) in using and instead of or.\r\nNOTE 2 The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no \r\nattempt to use the more complex, semantically oriented definitions of character or string equality and collating order \r\ndefined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard \r\ncould test as unequal. In effect this algorithm assumes that both Strings are already in normalised form. Also, note that for \r\nstrings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from \r\nthat on sequences of code point values.\r\n11.8.6 The instanceof operator\r\nThe production RelationalExpression: RelationalExpression instanceof ShiftExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating RelationalExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating ShiftExpression.\r\n4. Let rval be GetValue(rref).\r\n5. If Type(rval) is not Object, throw a TypeError exception.\r\n6. If rval does not have a [[HasInstance]] internal method, throw a TypeError exception.\r\n7. Return the result of calling the [[HasInstance]] internal method of rval with argument lval.\r\n11.8.7 The in operator\r\nThe production RelationalExpression : RelationalExpression in ShiftExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating RelationalExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating ShiftExpression.\r\n4. Let rval be GetValue(rref).\r\n5. If Type(rval) is not Object, throw a TypeError exception.\r\n6. Return the result of calling the [[HasProperty]] internal method of rval with argument ToString(lval).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f9651119-cbb0-48b4-97ae-88a891f539ac.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=06893842d33f869e538a9d8ad82047ac405cdcc484d62e1b468763cf5635469c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 589
      },
      {
        "segments": [
          {
            "segment_id": "b9446ac2-864d-419a-a7ea-d5abe02fd97c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 92,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "80 © Ecma International 2011\r\n11.9 Equality Operators\r\nSyntax\r\nEqualityExpression :\r\nRelationalExpression\r\nEqualityExpression == RelationalExpression\r\nEqualityExpression != RelationalExpression\r\nEqualityExpression === RelationalExpression\r\nEqualityExpression !== RelationalExpression\r\nEqualityExpressionNoIn :\r\nRelationalExpressionNoIn\r\nEqualityExpressionNoIn == RelationalExpressionNoIn\r\nEqualityExpressionNoIn != RelationalExpressionNoIn\r\nEqualityExpressionNoIn === RelationalExpressionNoIn\r\nEqualityExpressionNoIn !== RelationalExpressionNoIn\r\nSemantics\r\nThe result of evaluating an equality operator is always of type Boolean, reflecting whether the relationship \r\nnamed by the operator holds between its two operands.\r\nThe EqualityExpressionNoIn productions are evaluated in the same manner as the EqualityExpression\r\nproductions except that the contained EqualityExpressionNoIn and RelationalExpressionNoIn are evaluated \r\ninstead of the contained EqualityExpression and RelationalExpression, respectively.\r\n11.9.1 The Equals Operator ( == )\r\nThe production EqualityExpression : EqualityExpression == RelationalExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating EqualityExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating RelationalExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Return the result of performing abstract equality comparison rval == lval. (see 11.9.3).\r\n11.9.2 The Does-not-equals Operator ( != )\r\nThe production EqualityExpression : EqualityExpression != RelationalExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating EqualityExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating RelationalExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Let r be the result of performing abstract equality comparison rval == lval. (see 11.9.3).\r\n6. If r is true, return false. Otherwise, return true.\r\n11.9.3 The Abstract Equality Comparison Algorithm\r\nThe comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as \r\nfollows:\r\n1. If Type(x) is the same as Type(y), then\r\na. If Type(x) is Undefined, return true.\r\nb. If Type(x) is Null, return true.\r\nc. If Type(x) is Number, then\r\ni. If x is NaN, return false.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/b9446ac2-864d-419a-a7ea-d5abe02fd97c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=226986bb243c61eb27a6fb74f8b175d5200c06280a9288c5e6dae64db20db9e6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 291
      },
      {
        "segments": [
          {
            "segment_id": "ecf46f2d-e321-4a51-b2af-5fa81ac3b948",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 93,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 81\r\nii. If y is NaN, return false.\r\niii. If x is the same Number value as y, return true.\r\niv. If x is +0 and y is 0, return true.\r\nv. If x is 0 and y is +0, return true.\r\nvi. Return false.\r\nd. If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same \r\nlength and same characters in corresponding positions). Otherwise, return false.\r\ne. If Type(x) is Boolean, return true if x and y are both true or both false. Otherwise, return false.\r\nf. Return true if x and y refer to the same object. Otherwise, return false.\r\n2. If x is null and y is undefined, return true.\r\n3. If x is undefined and y is null, return true.\r\n4. If Type(x) is Number and Type(y) is String,\r\nreturn the result of the comparison x == ToNumber(y).\r\n5. If Type(x) is String and Type(y) is Number,\r\nreturn the result of the comparison ToNumber(x) == y.\r\n6. If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.\r\n7. If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).\r\n8. If Type(x) is either String or Number and Type(y) is Object,\r\nreturn the result of the comparison x == ToPrimitive(y).\r\n9. If Type(x) is Object and Type(y) is either String or Number,\r\nreturn the result of the comparison ToPrimitive(x) == y.\r\n10. Return false.\r\nNOTE 1 Given the above definition of equality:\r\n String comparison can be forced by: \"\" + a == \"\" + b.\r\n Numeric comparison can be forced by: +a == +b.\r\n Boolean comparison can be forced by: !a == !b.\r\nNOTE 2 The equality operators maintain the following invariants:\r\n A != B is equivalent to !(A == B).\r\n A == B is equivalent to B == A, except in the order of evaluation of A and B.\r\nNOTE 3 The equality operator is not always transitive. For example, there might be two distinct String objects, each\r\nrepresenting the same String value; each String object would be considered equal to the String value by the == operator, \r\nbut the two String objects would not be equal to each other. For Example:\r\n new String(\"a\") == \"a\" and \"a\" == new String(\"a\")are both true.\r\n new String(\"a\") == new String(\"a\") is false.\r\nNOTE 4 Comparison of Strings uses a simple equality test on sequences of code unit values. There is no attempt to \r\nuse the more complex, semantically oriented definitions of character or string equality and collating order defined in the \r\nUnicode specification. Therefore Strings values that are canonically equal according to the Unicode standard could test as \r\nunequal. In effect this algorithm assumes that both Strings are already in normalised form.\r\n11.9.4 The Strict Equals Operator ( === )\r\nThe production EqualityExpression : EqualityExpression === RelationalExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating EqualityExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating RelationalExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Return the result of performing the strict equality comparison rval === lval. (See 11.9.6)\r\n11.9.5 The Strict Does-not-equal Operator ( !== )\r\nThe production EqualityExpression : EqualityExpression !== RelationalExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating EqualityExpression.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/ecf46f2d-e321-4a51-b2af-5fa81ac3b948.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b0478cda6cfe4f426935dfa77db2b54f0b01f566c5624f4fbe9cf1e78ce6ca71",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 559
      },
      {
        "segments": [
          {
            "segment_id": "ecf46f2d-e321-4a51-b2af-5fa81ac3b948",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 93,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 81\r\nii. If y is NaN, return false.\r\niii. If x is the same Number value as y, return true.\r\niv. If x is +0 and y is 0, return true.\r\nv. If x is 0 and y is +0, return true.\r\nvi. Return false.\r\nd. If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same \r\nlength and same characters in corresponding positions). Otherwise, return false.\r\ne. If Type(x) is Boolean, return true if x and y are both true or both false. Otherwise, return false.\r\nf. Return true if x and y refer to the same object. Otherwise, return false.\r\n2. If x is null and y is undefined, return true.\r\n3. If x is undefined and y is null, return true.\r\n4. If Type(x) is Number and Type(y) is String,\r\nreturn the result of the comparison x == ToNumber(y).\r\n5. If Type(x) is String and Type(y) is Number,\r\nreturn the result of the comparison ToNumber(x) == y.\r\n6. If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.\r\n7. If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).\r\n8. If Type(x) is either String or Number and Type(y) is Object,\r\nreturn the result of the comparison x == ToPrimitive(y).\r\n9. If Type(x) is Object and Type(y) is either String or Number,\r\nreturn the result of the comparison ToPrimitive(x) == y.\r\n10. Return false.\r\nNOTE 1 Given the above definition of equality:\r\n String comparison can be forced by: \"\" + a == \"\" + b.\r\n Numeric comparison can be forced by: +a == +b.\r\n Boolean comparison can be forced by: !a == !b.\r\nNOTE 2 The equality operators maintain the following invariants:\r\n A != B is equivalent to !(A == B).\r\n A == B is equivalent to B == A, except in the order of evaluation of A and B.\r\nNOTE 3 The equality operator is not always transitive. For example, there might be two distinct String objects, each\r\nrepresenting the same String value; each String object would be considered equal to the String value by the == operator, \r\nbut the two String objects would not be equal to each other. For Example:\r\n new String(\"a\") == \"a\" and \"a\" == new String(\"a\")are both true.\r\n new String(\"a\") == new String(\"a\") is false.\r\nNOTE 4 Comparison of Strings uses a simple equality test on sequences of code unit values. There is no attempt to \r\nuse the more complex, semantically oriented definitions of character or string equality and collating order defined in the \r\nUnicode specification. Therefore Strings values that are canonically equal according to the Unicode standard could test as \r\nunequal. In effect this algorithm assumes that both Strings are already in normalised form.\r\n11.9.4 The Strict Equals Operator ( === )\r\nThe production EqualityExpression : EqualityExpression === RelationalExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating EqualityExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating RelationalExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Return the result of performing the strict equality comparison rval === lval. (See 11.9.6)\r\n11.9.5 The Strict Does-not-equal Operator ( !== )\r\nThe production EqualityExpression : EqualityExpression !== RelationalExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating EqualityExpression.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/ecf46f2d-e321-4a51-b2af-5fa81ac3b948.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b0478cda6cfe4f426935dfa77db2b54f0b01f566c5624f4fbe9cf1e78ce6ca71",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 559
      },
      {
        "segments": [
          {
            "segment_id": "d969078e-608d-450b-920b-042bcd089a8f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 94,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "82 © Ecma International 2011\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating RelationalExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Let r be the result of performing strict equality comparison rval === lval. (See 11.9.6)\r\n6. If r is true, return false. Otherwise, return true.\r\n11.9.6 The Strict Equality Comparison Algorithm\r\nThe comparison x === y, where x and y are values, produces true or false. Such a comparison is performed \r\nas follows:\r\n1. If Type(x) is different from Type(y), return false.\r\n2. If Type(x) is Undefined, return true.\r\n3. If Type(x) is Null, return true.\r\n4. If Type(x) is Number, then\r\na. If x is NaN, return false.\r\nb. If y is NaN, return false.\r\nc. If x is the same Number value as y, return true.\r\nd. If x is +0 and y is 0, return true.\r\ne. If x is 0 and y is +0, return true.\r\nf. Return false.\r\n5. If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and \r\nsame characters in corresponding positions); otherwise, return false.\r\n6. If Type(x) is Boolean, return true if x and y are both true or both false; otherwise, return false.\r\n7. Return true if x and y refer to the same object. Otherwise, return false.\r\nNOTE This algorithm differs from the SameValue Algorithm (9.12) in its treatment of signed zeroes and NaNs.\r\n11.10 Binary Bitwise Operators\r\nSyntax\r\nBitwiseANDExpression :\r\nEqualityExpression\r\nBitwiseANDExpression & EqualityExpression\r\nBitwiseANDExpressionNoIn :\r\nEqualityExpressionNoIn\r\nBitwiseANDExpressionNoIn & EqualityExpressionNoIn\r\nBitwiseXORExpression :\r\nBitwiseANDExpression\r\nBitwiseXORExpression ^ BitwiseANDExpression\r\nBitwiseXORExpressionNoIn :\r\nBitwiseANDExpressionNoIn\r\nBitwiseXORExpressionNoIn ^ BitwiseANDExpressionNoIn\r\nBitwiseORExpression :\r\nBitwiseXORExpression\r\nBitwiseORExpression | BitwiseXORExpression\r\nBitwiseORExpressionNoIn :\r\nBitwiseXORExpressionNoIn\r\nBitwiseORExpressionNoIn | BitwiseXORExpressionNoIn\r\nSemantics\r\nThe production A : A @ B, where @ is one of the bitwise operators in the productions above, is evaluated as \r\nfollows:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/d969078e-608d-450b-920b-042bcd089a8f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fb5989721133c6653fa6e9b2dfe5f7dfa7f06b0fc84ab743b696610aa5abb059",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 305
      },
      {
        "segments": [
          {
            "segment_id": "ae9e87cb-155d-4cc1-a433-59d0719d1f6c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 95,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 83\r\n1. Let lref be the result of evaluating A.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating B.\r\n4. Let rval be GetValue(rref).\r\n5. Let lnum be ToInt32(lval).\r\n6. Let rnum be ToInt32(rval).\r\n7. Return the result of applying the bitwise operator @ to lnum and rnum. The result is a signed 32 bit integer.\r\n11.11 Binary Logical Operators\r\nSyntax\r\nLogicalANDExpression :\r\nBitwiseORExpression\r\nLogicalANDExpression && BitwiseORExpression\r\nLogicalANDExpressionNoIn :\r\nBitwiseORExpressionNoIn\r\nLogicalANDExpressionNoIn && BitwiseORExpressionNoIn\r\nLogicalORExpression :\r\nLogicalANDExpression\r\nLogicalORExpression || LogicalANDExpression\r\nLogicalORExpressionNoIn :\r\nLogicalANDExpressionNoIn\r\nLogicalORExpressionNoIn || LogicalANDExpressionNoIn\r\nSemantics\r\nThe production LogicalANDExpression : LogicalANDExpression && BitwiseORExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating LogicalANDExpression.\r\n2. Let lval be GetValue(lref).\r\n3. If ToBoolean(lval) is false, return lval.\r\n4. Let rref be the result of evaluating BitwiseORExpression.\r\n5. Return GetValue(rref).\r\nThe production LogicalORExpression : LogicalORExpression || LogicalANDExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating LogicalORExpression.\r\n2. Let lval be GetValue(lref).\r\n3. If ToBoolean(lval) is true, return lval.\r\n4. Let rref be the result of evaluating LogicalANDExpression.\r\n5. Return GetValue(rref).\r\nThe LogicalANDExpressionNoIn and LogicalORExpressionNoIn productions are evaluated in the same manner \r\nas the LogicalANDExpression and LogicalORExpression productions except that the contained \r\nLogicalANDExpressionNoIn, BitwiseORExpressionNoIn and LogicalORExpressionNoIn are evaluated instead of the \r\ncontained LogicalANDExpression, BitwiseORExpression and LogicalORExpression, respectively.\r\nNOTE The value produced by a && or || operator is not necessarily of type Boolean. The value produced will always \r\nbe the value of one of the two operand expressions.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/ae9e87cb-155d-4cc1-a433-59d0719d1f6c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ab6e908759d6138c11a0e0b92ed2b1ebb1e053745cfeb7e6c24097cee20df3b6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 250
      },
      {
        "segments": [
          {
            "segment_id": "ddebf581-d409-4abf-b1a1-3ccacabbdecb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 96,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "84 © Ecma International 2011\r\n11.12 Conditional Operator ( ? : )\r\nSyntax\r\nConditionalExpression :\r\nLogicalORExpression\r\nLogicalORExpression ? AssignmentExpression : AssignmentExpression\r\nConditionalExpressionNoIn :\r\nLogicalORExpressionNoIn\r\nLogicalORExpressionNoIn ? AssignmentExpression : AssignmentExpressionNoIn\r\nSemantics\r\nThe production ConditionalExpression : LogicalORExpression ? AssignmentExpression : AssignmentExpression is \r\nevaluated as follows:\r\n1. Let lref be the result of evaluating LogicalORExpression.\r\n2. If ToBoolean(GetValue(lref)) is true, then\r\na. Let trueRef be the result of evaluating the first AssignmentExpression.\r\nb. Return GetValue(trueRef).\r\n3. Else\r\na. Let falseRef be the result of evaluating the second AssignmentExpression.\r\nb. Return GetValue(falseRef).\r\nThe ConditionalExpressionNoIn production is evaluated in the same manner as the ConditionalExpression\r\nproduction except that the contained LogicalORExpressionNoIn, AssignmentExpression and \r\nAssignmentExpressionNoIn are evaluated instead of the contained LogicalORExpression, first \r\nAssignmentExpression and second AssignmentExpression, respectively.\r\nNOTE The grammar for a ConditionalExpression in ECMAScript is a little bit different from that in C and Java, which \r\neach allow the second subexpression to be an Expression but restrict the third expression to be a ConditionalExpression. \r\nThe motivation for this difference in ECMAScript is to allow an assignment expression to be governed by either arm of a \r\nconditional and to eliminate the confusing and fairly useless case of a comma expression as the centre expression.\r\n11.13 Assignment Operators\r\nSyntax\r\nAssignmentExpression :\r\nConditionalExpression\r\nLeftHandSideExpression = AssignmentExpression \r\nLeftHandSideExpression AssignmentOperator AssignmentExpression\r\nAssignmentExpressionNoIn :\r\nConditionalExpressionNoIn\r\nLeftHandSideExpression = AssignmentExpressionNoIn\r\nLeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn\r\nAssignmentOperator : one of\r\n*= /= %= += -= <<= >>= >>>= &= ^= |=\r\nSemantics\r\nThe AssignmentExpressionNoIn productions are evaluated in the same manner as the AssignmentExpression\r\nproductions except that the contained ConditionalExpressionNoIn and AssignmentExpressionNoIn are evaluated \r\ninstead of the contained ConditionalExpression and AssignmentExpression, respectively.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/ddebf581-d409-4abf-b1a1-3ccacabbdecb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cdc78e39a8ef73e83c3e8604a1981831c2afd6d6fe5e7e071695a8dbe9f9b61b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 267
      },
      {
        "segments": [
          {
            "segment_id": "6c753792-49d9-45ad-b3cb-964f51eddfb4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 97,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 85\r\n11.13.1 Simple Assignment ( = )\r\nThe production AssignmentExpression : LeftHandSideExpression = AssignmentExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating LeftHandSideExpression.\r\n2. Let rref be the result of evaluating AssignmentExpression.\r\n3. Let rval be GetValue(rref).\r\n4. Throw a SyntaxError exception if the following conditions are all true:\r\n Type(lref) is Reference is true\r\n IsStrictReference(lref) is true\r\n Type(GetBase(lref)) is Environment Record\r\n GetReferencedName(lref) is either \"eval\" or \"arguments\"\r\n5. Call PutValue(lref, rval).\r\n6. Return rval.\r\nNOTE When an assignment occurs within strict mode code, its LeftHandSide must not evaluate to an unresolvable \r\nreference. If it does a ReferenceError exception is thrown upon assignment. The LeftHandSide also may not be a \r\nreference to a data property with the attribute value {[[Writable]]:false}, to an accessor property with the attribute value \r\n{[[Set]]:undefined}, nor to a non-existent property of an object whose [[Extensible]] internal property has the value false. In \r\nthese cases a TypeError exception is thrown.\r\n11.13.2 Compound Assignment ( op= )\r\nThe production AssignmentExpression : LeftHandSideExpression AssignmentOperator AssignmentExpression, where \r\nAssignmentOperator is @= and @ represents one of the operators indicated above, is evaluated as follows:\r\n1. Let lref be the result of evaluating LeftHandSideExpression.\r\n2. Let lval be GetValue(lref).\r\n3. Let rref be the result of evaluating AssignmentExpression.\r\n4. Let rval be GetValue(rref).\r\n5. Let r be the result of applying operator @ to lval and rval.\r\n6. Throw a SyntaxError exception if the following conditions are all true:\r\n Type(lref) is Reference is true\r\n IsStrictReference(lref) is true\r\n Type(GetBase(lref)) is Environment Record\r\n GetReferencedName(lref) is either \"eval\" or \"arguments\"\r\n7. Call PutValue(lref, r).\r\n8. Return r.\r\nNOTE See NOTE 11.13.1.\r\n11.14 Comma Operator ( , )\r\nSyntax\r\nExpression :\r\nAssignmentExpression\r\nExpression , AssignmentExpression\r\nExpressionNoIn :\r\nAssignmentExpressionNoIn\r\nExpressionNoIn , AssignmentExpressionNoIn\r\nSemantics\r\nThe production Expression : Expression , AssignmentExpression is evaluated as follows:\r\n1. Let lref be the result of evaluating Expression.\r\n2. Call GetValue(lref).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/6c753792-49d9-45ad-b3cb-964f51eddfb4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d0a84b71ee557f55782aa76d48960afc6e1d1b9052a593db00203e0335fd6899",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 324
      },
      {
        "segments": [
          {
            "segment_id": "4c8756ca-c8e2-4225-8b5c-65725f131bfb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 98,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "86 © Ecma International 2011\r\n3. Let rref be the result of evaluating AssignmentExpression.\r\n4. Return GetValue(rref).\r\nThe ExpressionNoIn production is evaluated in the same manner as the Expression production except that the \r\ncontained ExpressionNoIn and AssignmentExpressionNoIn are evaluated instead of the contained Expression and \r\nAssignmentExpression, respectively.\r\nNOTE GetValue must be called even though its value is not used because it may have observable side-effects.\r\n12 Statements\r\nSyntax\r\nStatement :\r\nBlock\r\nVariableStatement\r\nEmptyStatement\r\nExpressionStatement\r\nIfStatement\r\nIterationStatement\r\nContinueStatement\r\nBreakStatement\r\nReturnStatement\r\nWithStatement\r\nLabelledStatement\r\nSwitchStatement\r\nThrowStatement\r\nTryStatement\r\nDebuggerStatement\r\nSemantics\r\nA Statement can be part of a LabelledStatement, which itself can be part of a LabelledStatement, and so on. The \r\nlabels introduced this way are collectively referred to as the ―current label set‖ when describing the semantics \r\nof individual statements. A LabelledStatement has no semantic meaning other than the introduction of a label to \r\na label set. The label set of an IterationStatement or a SwitchStatement initially contains the single element \r\nempty. The label set of any other statement is initially empty.\r\nThe result of evaluating a Statement is always a Completion value.\r\nNOTE Several widely used implementations of ECMAScript are known to support the use of FunctionDeclaration as a \r\nStatement. However there are significant and irreconcilable variations among the implementations in the semantics applied \r\nto such FunctionDeclarations. Because of these irreconcilable differences, the use of a FunctionDeclaration as a Statement\r\nresults in code that is not reliably portable among implementations. It is recommended that ECMAScript implementations \r\neither disallow this usage of FunctionDeclaration or issue a warning when such a usage is encountered. Future editions of \r\nECMAScript may define alternative portable means for declaring functions in a Statement context.\r\n12.1 Block\r\nSyntax\r\nBlock :\r\n{ StatementListopt }\r\nStatementList :\r\nStatement\r\nStatementList Statement",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/4c8756ca-c8e2-4225-8b5c-65725f131bfb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=76eb8bfcf011ce7d9846af11df36c14cccabebd27db69f774737dcdce510b96a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 288
      },
      {
        "segments": [
          {
            "segment_id": "96adbf1e-fa00-429c-97c3-0d8ced2e0889",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 99,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 87\r\nSemantics\r\nThe production Block : { } is evaluated as follows:\r\n1. Return (normal, empty, empty).\r\nThe production Block : { StatementList }is evaluated as follows:\r\n1. Return the result of evaluating StatementList.\r\nThe production StatementList : Statement is evaluated as follows:\r\n1. Let s be the result of evaluating Statement.\r\n2. If an exception was thrown, return (throw, V, empty) where V is the exception. (Execution now proceeds as \r\nif no exception were thrown.)\r\n3. Return s.\r\nThe production StatementList : StatementList Statement is evaluated as follows:\r\n1. Let sl be the result of evaluating StatementList.\r\n2. If sl is an abrupt completion, return sl.\r\n3. Let s be the result of evaluating Statement.\r\n4. If an exception was thrown, return (throw, V, empty) where V is the exception. (Execution now proceeds as \r\nif no exception were thrown.)\r\n5. If s.value is empty, let V = sl.value, otherwise let V = s.value.\r\n6. Return (s.type, V, s.target).\r\nNOTE Steps 5 and 6 of the above algoritm ensure that the value of a StatementList is the value of the last value \r\nproducing Statement in the StatementList. For example, the following calls to the eval function all return the value 1:\r\neval(\"1;;;;;\")\r\neval(\"1;{}\")\r\neval(\"1;var a;\")\r\n12.2 Variable Statement\r\nSyntax\r\nVariableStatement :\r\nvar VariableDeclarationList ;\r\nVariableDeclarationList :\r\nVariableDeclaration\r\nVariableDeclarationList , VariableDeclaration\r\nVariableDeclarationListNoIn :\r\nVariableDeclarationNoIn\r\nVariableDeclarationListNoIn , VariableDeclarationNoIn\r\nVariableDeclaration :\r\nIdentifier Initialiseropt\r\nVariableDeclarationNoIn :\r\nIdentifier InitialiserNoInopt\r\nInitialiser :\r\n= AssignmentExpression\r\nInitialiserNoIn :\r\n= AssignmentExpressionNoIn",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/96adbf1e-fa00-429c-97c3-0d8ced2e0889.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=781d5e3f071c2d864036c8831f9a9c699db2d37de38aa3cdeb2237803d17e2ab",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 246
      },
      {
        "segments": [
          {
            "segment_id": "dc063e71-851d-460c-9fb2-ee2d70ce49be",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 100,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "88 © Ecma International 2011\r\nA variable statement declares variables that are created as defined in 10.5. Variables are initialised to \r\nundefined when created. A variable with an Initialiser is assigned the value of its AssignmentExpression when \r\nthe VariableStatement is executed, not when the variable is created.\r\nSemantics\r\nThe production VariableStatement : var VariableDeclarationList ; is evaluated as follows:\r\n1. Evaluate VariableDeclarationList.\r\n2. Return (normal, empty, empty).\r\nThe production VariableDeclarationList :VariableDeclaration is evaluated as follows:\r\n1. Evaluate VariableDeclaration.\r\nThe production VariableDeclarationList : VariableDeclarationList , VariableDeclaration is evaluated as follows:\r\n1. Evaluate VariableDeclarationList.\r\n2. Evaluate VariableDeclaration.\r\nThe production VariableDeclaration : Identifier is evaluated as follows:\r\n1. Return a String value containing the same sequence of characters as in the Identifier.\r\nThe production VariableDeclaration : Identifier Initialiser is evaluated as follows:\r\n1. Let lhs be the result of evaluating Identifier as described in 11.1.2.\r\n2. Let rhs be the result of evaluating Initialiser.\r\n3. Let value be GetValue(rhs).\r\n4. Call PutValue(lhs, value).\r\n5. Return a String value containing the same sequence of characters as in the Identifier.\r\nNOTE The String value of a VariableDeclaration is used in the evaluation of for-in statements (12.6.4).\r\nIf a VariableDeclaration is nested within a with statement and the Identifier in the VariableDeclaration is the \r\nsame as a property name of the binding object of the with statement‘s object environment record, then step 4 \r\nwill assign value to the property instead of to the VariableEnvironment binding of the Identifier.\r\nThe production Initialiser : = AssignmentExpression is evaluated as follows:\r\n1. Return the result of evaluating AssignmentExpression.\r\nThe VariableDeclarationListNoIn, VariableDeclarationNoIn and InitialiserNoIn productions are evaluated in the \r\nsame manner as the VariableDeclarationList, VariableDeclaration and Initialiser productions except that the \r\ncontained VariableDeclarationListNoIn, VariableDeclarationNoIn, InitialiserNoIn and AssignmentExpressionNoIn\r\nare evaluated instead of the contained VariableDeclarationList, VariableDeclaration, Initialiser and \r\nAssignmentExpression, respectively.\r\n12.2.1 Strict Mode Restrictions\r\nIt is a SyntaxError if a VariableDeclaration or VariableDeclarationNoIn occurs within strict code and its Identifier\r\nis either \"eval\" or \"arguments\".\r\n12.3 Empty Statement\r\nSyntax\r\nEmptyStatement :\r\n;",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/dc063e71-851d-460c-9fb2-ee2d70ce49be.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4f41ca50b02c662c2b31bdebb9d98244bb0925065e85426f484751068578acc2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 331
      },
      {
        "segments": [
          {
            "segment_id": "75a480d1-6edc-49d9-928d-c33599b3eb9c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 101,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 89\r\nSemantics\r\nThe production EmptyStatement : ; is evaluated as follows:\r\n1. Return (normal, empty, empty).\r\n12.4 Expression Statement\r\nSyntax\r\nExpressionStatement :\r\n[lookahead  {{, function}] Expression ;\r\nNOTE An ExpressionStatement cannot start with an opening curly brace because that might make it ambiguous with a \r\nBlock. Also, an ExpressionStatement cannot start with the function keyword because that might make it ambiguous with a \r\nFunctionDeclaration.\r\nSemantics\r\nThe production ExpressionStatement : [lookahead  {{, function}] Expression; is evaluated as follows:\r\n1. Let exprRef be the result of evaluating Expression.\r\n2. Return (normal, GetValue(exprRef), empty).\r\n12.5 The if Statement\r\nSyntax\r\nIfStatement :\r\nif ( Expression ) Statement else Statement\r\nif ( Expression ) Statement\r\nEach else for which the choice of associated if is ambiguous shall be associated with the nearest possible \r\nif that would otherwise have no corresponding else.\r\nSemantics\r\nThe production IfStatement : if ( Expression ) Statement else Statement is evaluated as follows:\r\n1. Let exprRef be the result of evaluating Expression.\r\n2. If ToBoolean(GetValue(exprRef)) is true, then\r\na. Return the result of evaluating the first Statement.\r\n3. Else,\r\na. Return the result of evaluating the second Statement.\r\nThe production IfStatement : if ( Expression ) Statement is evaluated as follows:\r\n1. Let exprRef be the result of evaluating Expression.\r\n2. If ToBoolean(GetValue(exprRef)) is false, return (normal, empty, empty).\r\n3. Return the result of evaluating Statement.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/75a480d1-6edc-49d9-928d-c33599b3eb9c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fed6b1813c3f700c883b22ff95602daf6141451cf556705479abdf18adb53f63",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 231
      },
      {
        "segments": [
          {
            "segment_id": "67c598e8-7e02-4c8b-87dc-ad4e4cc8d7c9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 102,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "90 © Ecma International 2011\r\n12.6 Iteration Statements\r\nSyntax\r\nIterationStatement :\r\ndo Statement while ( Expression );\r\nwhile ( Expression ) Statement\r\nfor (ExpressionNoInopt; Expressionopt ; Expressionopt ) Statement\r\nfor ( var VariableDeclarationListNoIn; Expressionopt ; Expressionopt ) Statement\r\nfor ( LeftHandSideExpression in Expression ) Statement\r\nfor ( var VariableDeclarationNoIn in Expression ) Statement\r\n12.6.1 The do-while Statement\r\nThe production do Statement while ( Expression ); is evaluated as follows:\r\n1. Let V = empty.\r\n2. Let iterating be true.\r\n3. Repeat, while iterating is true\r\na. Let stmt be the result of evaluating Statement.\r\nb. If stmt.value is not empty, let V = stmt.value.\r\nc. If stmt.type is not continue || stmt.target is not in the current label set, then\r\ni. If stmt.type is break and stmt.target is in the current label set, return (normal, V, empty).\r\nii. If stmt is an abrupt completion, return stmt.\r\nd. Let exprRef be the result of evaluating Expression.\r\ne. If ToBoolean(GetValue(exprRef)) is false, set iterating to false.\r\n4. Return (normal, V, empty);\r\n12.6.2 The while Statement\r\nThe production IterationStatement : while ( Expression ) Statement is evaluated as follows:\r\n1. Let V = empty.\r\n2. Repeat\r\na. Let exprRef be the result of evaluating Expression.\r\nb. If ToBoolean(GetValue(exprRef)) is false, return (normal, V, empty).\r\nc. Let stmt be the result of evaluating Statement.\r\nd. If stmt.value is not empty, let V = stmt.value.\r\ne. If stmt.type is not continue || stmt.target is not in the current label set, then\r\ni. If stmt.type is break and stmt.target is in the current label set, then\r\n1. Return (normal, V, empty).\r\nii. If stmt is an abrupt completion, return stmt.\r\n12.6.3 The for Statement\r\nThe production\r\n IterationStatement : for (ExpressionNoInopt ; Expressionopt ; Expressionopt) Statement\r\nis evaluated as follows:\r\n1. If ExpressionNoIn is present, then.\r\na. Let exprRef be the result of evaluating ExpressionNoIn.\r\nb. Call GetValue(exprRef). (This value is not used but the call may have side-effects.)\r\n2. Let V = empty.\r\n3. Repeat\r\na. If the first Expression is present, then\r\ni. Let testExprRef be the result of evaluating the first Expression.\r\nii. If ToBoolean(GetValue(testExprRef)) is false, return (normal, V, empty).\r\nb. Let stmt be the result of evaluating Statement.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/67c598e8-7e02-4c8b-87dc-ad4e4cc8d7c9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fe688f5a8a001e5ca1e2be46175d5054a0456ced1e2f59c20e04946bb4281ca5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 366
      },
      {
        "segments": [
          {
            "segment_id": "a4c0ea90-d100-4433-8ae3-e1843d07cd5b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 103,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 91\r\nc. If stmt.value is not empty, let V = stmt.value\r\nd. If stmt.type is break and stmt.target is in the current label set, return (normal, V, empty).\r\ne. If stmt.type is not continue || stmt.target is not in the current label set, then\r\ni. If stmt is an abrupt completion, return stmt.\r\nf. If the second Expression is present, then\r\ni. Let incExprRef be the result of evaluating the second Expression.\r\nii. Call GetValue(incExprRef). (This value is not used.)\r\nThe production\r\n IterationStatement : for ( var VariableDeclarationListNoIn ; Expressionopt ; Expressionopt ) Statement\r\nis evaluated as follows:\r\n1. Evaluate VariableDeclarationListNoIn.\r\n2. Let V = empty.\r\n3. Repeat\r\na. If the first Expression is present, then\r\ni. Let testExprRef be the result of evaluating the first Expression.\r\nii. If ToBoolean(GetValue(testExprRef)) is false, then return (normal, V, empty).\r\nb. Let stmt be the result of evaluating Statement.\r\nc. If stmt.value is not empty, let V = stmt.value.\r\nd. If stmt.type is break and stmt.target is in the current label set, return (normal, V, empty).\r\ne. If stmt.type is not continue || stmt.target is not in the current label set, then\r\ni. If stmt is an abrupt completion, return stmt.\r\nf. If the second Expression is present, then.\r\ni. Let incExprRef be the result of evaluating the second Expression.\r\nii. Call GetValue(incExprRef). (This value is not used.)\r\n12.6.4 The for-in Statement\r\nThe production IterationStatement : for ( LeftHandSideExpression in Expression ) Statement is evaluated as \r\nfollows:\r\n1. Let exprRef be the result of evaluating the Expression.\r\n2. Let experValue be GetValue(exprRef).\r\n3. If experValue is null or undefined, return (normal, empty, empty).\r\n4. Let obj be ToObject(experValue).\r\n5. Let V = empty.\r\n6. Repeat\r\na. Let P be the name of the next property of obj whose [[Enumerable]] attribute is true. If there is no \r\nsuch property, return (normal, V, empty).\r\nb. Let lhsRef be the result of evaluating the LeftHandSideExpression ( it may be evaluated repeatedly).\r\nc. Call PutValue(lhsRef, P).\r\nd. Let stmt be the result of evaluating Statement.\r\ne. If stmt.value is not empty, let V = stmt.value.\r\nf. If stmt.type is break and stmt.target is in the current label set, return (normal, V, empty).\r\ng. If stmt.type is not continue || stmt.target is not in the current label set, then\r\ni. If stmt is an abrupt completion, return stmt.\r\nThe production\r\n IterationStatement : for ( var VariableDeclarationNoIn in Expression ) Statement\r\nis evaluated as follows:\r\n1. Let varName be the result of evaluating VariableDeclarationNoIn.\r\n2. Let exprRef be the result of evaluating the Expression.\r\n3. Let experValue be GetValue(exprRef).\r\n4. If experValue is null or undefined, return (normal, empty, empty).\r\n5. Let obj be ToObject(experValue).\r\n6. Let V = empty.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/a4c0ea90-d100-4433-8ae3-e1843d07cd5b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d7fbe516010a4362fbf406da0c7bd27ab6528093cd759850bb95d2ce1d3423a9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 455
      },
      {
        "segments": [
          {
            "segment_id": "5e47295f-194b-4257-a584-c377d78dcc0c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 104,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "92 © Ecma International 2011\r\n7. Repeat\r\na. Let P be the name of the next property of obj whose [[Enumerable]] attribute is true. If there is no \r\nsuch property, return (normal, V, empty).\r\nb. Let varRef be the result of evaluating varName as if it were an Identifier Reference (11.1.2); it may \r\nbe evaluated repeatedly.\r\nc. Call PutValue(varRef, P).\r\nd. Let stmt be the result of evaluating Statement.\r\ne. If stmt.value is not empty, let V = stmt.value.\r\nf. If stmt.type is break and stmt.target is in the current label set, return (normal, V, empty).\r\ng. If stmt.type is not continue || stmt.target is not in the current label set, then\r\ni. If stmt is an abrupt completion, return stmt.\r\nThe mechanics and order of enumerating the properties (step 6.a in the first algorithm, step 7.a in the second) \r\nis not specified. Properties of the object being enumerated may be deleted during enumeration. If a property \r\nthat has not yet been visited during enumeration is deleted, then it will not be visited. If new properties are \r\nadded to the object being enumerated during enumeration, the newly added properties are not guaranteed to \r\nbe visited in the active enumeration. A property name must not be visited more than once in any enumeration.\r\nEnumerating the properties of an object includes enumerating properties of its prototype, and the prototype of \r\nthe prototype, and so on, recursively; but a property of a prototype is not enumerated if it is ―shadowed‖ \r\nbecause some previous object in the prototype chain has a property with the same name. The values of\r\n[[Enumerable]] attributes are not considered when determining if a property of a prototype object is shadowed \r\nby a previous object on the prototype chain.\r\nNOTE See NOTE 11.13.1.\r\n12.7 The continue Statement\r\nSyntax\r\nContinueStatement :\r\ncontinue ;\r\ncontinue [no LineTerminator here] Identifier;\r\nSemantics\r\nA program is considered syntactically incorrect if either of the following is true:\r\n The program contains a continue statement without the optional Identifier, which is not \r\nnested, directly or indirectly (but not crossing function boundaries), within an \r\nIterationStatement.\r\n The program contains a continue statement with the optional Identifier, where Identifier\r\ndoes not appear in the label set of an enclosing (but not crossing function boundaries) \r\nIterationStatement.\r\nA ContinueStatement without an Identifier is evaluated as follows:\r\n1. Return (continue, empty, empty).\r\nA ContinueStatement with the optional Identifier is evaluated as follows:\r\n1. Return (continue, empty, Identifier).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/5e47295f-194b-4257-a584-c377d78dcc0c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=15c81b6d8bb3c11986617e465d556d9984fccd9fe883f01f101edd2d3cbe94c6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 405
      },
      {
        "segments": [
          {
            "segment_id": "89fe5508-d2c6-4466-9080-a0df5e38eb0e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 105,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 93\r\n12.8 The break Statement\r\nSyntax\r\nBreakStatement :\r\nbreak ;\r\nbreak [no LineTerminator here] Identifier ;\r\nSemantics\r\nA program is considered syntactically incorrect if either of the following is true:\r\n The program contains a break statement without the optional Identifier, which is not \r\nnested, directly or indirectly (but not crossing function boundaries), within an \r\nIterationStatement or a SwitchStatement.\r\n The program contains a break statement with the optional Identifier, where Identifier does \r\nnot appear in the label set of an enclosing (but not crossing function boundaries) Statement.\r\nA BreakStatement without an Identifier is evaluated as follows:\r\n1. Return (break, empty, empty).\r\nA BreakStatement with an Identifier is evaluated as follows:\r\n1. Return (break, empty, Identifier).\r\n12.9 The return Statement\r\nSyntax\r\nReturnStatement :\r\nreturn ;\r\nreturn [no LineTerminator here] Expression ;\r\nSemantics\r\nAn ECMAScript program is considered syntactically incorrect if it contains a return statement that is not \r\nwithin a FunctionBody. A return statement causes a function to cease execution and return a value to the \r\ncaller. If Expression is omitted, the return value is undefined. Otherwise, the return value is the value of \r\nExpression.\r\nA ReturnStatement is evaluated as follows:\r\n1. If the Expression is not present, return (return, undefined, empty).\r\n2. Let exprRef be the result of evaluating Expression.\r\n3. Return (return, GetValue(exprRef), empty).\r\n12.10 The with Statement\r\nSyntax\r\nWithStatement :\r\nwith ( Expression ) Statement\r\nThe with statement adds an object environment record for a computed object to the lexical environment of \r\nthe current execution context. It then executes a statement using this augmented lexical environment. Finally, \r\nit restores the original lexical environment.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/89fe5508-d2c6-4466-9080-a0df5e38eb0e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=35aa35516c665a7f77713d6f150f0a0c523cc6ae0b2ed6e30c0403e3a7374964",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 270
      },
      {
        "segments": [
          {
            "segment_id": "69490e49-2c12-4aa0-892a-1f96973cea5b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 106,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "94 © Ecma International 2011\r\nSemantics\r\nThe production WithStatement : with ( Expression ) Statement is evaluated as follows:\r\n1. Let val be the result of evaluating Expression.\r\n2. Let obj be ToObject(GetValue(val)).\r\n3. Let oldEnv be the running execution context‘s LexicalEnvironment.\r\n4. Let newEnv be the result of calling NewObjectEnvironment passing obj and oldEnv as the arguments.\r\n5. Set the provideThis flag of newEnv to true.\r\n6. Set the running execution context‘s LexicalEnvironment to newEnv.\r\n7. Let C be the result of evaluating Statement but if an exception is thrown during the evaluation, let C be \r\n(throw, V, empty), where V is the exception. (Execution now proceeds as if no exception were thrown.)\r\n8. Set the running execution context‘s Lexical Environment to oldEnv.\r\n9. Return C.\r\nNOTE No matter how control leaves the embedded Statement, whether normally or by some form of abrupt \r\ncompletion or exception, the LexicalEnvironment is always restored to its former state.\r\n12.10.1 Strict Mode Restrictions\r\nStrict mode code may not include a WithStatement. The occurrence of a WithStatement in such a context is \r\ntreated as a SyntaxError.\r\n12.11 The switch Statement\r\nSyntax\r\nSwitchStatement :\r\nswitch ( Expression ) CaseBlock\r\nCaseBlock :\r\n{ CaseClausesopt }\r\n{ CaseClausesopt DefaultClause CaseClausesopt }\r\nCaseClauses :\r\nCaseClause\r\nCaseClauses CaseClause\r\nCaseClause :\r\ncase Expression : StatementListopt\r\nDefaultClause :\r\ndefault : StatementListopt\r\nSemantics\r\nThe production SwitchStatement : switch ( Expression ) CaseBlock is evaluated as follows:\r\n1. Let exprRef be the result of evaluating Expression.\r\n2. Let R be the result of evaluating CaseBlock, passing it GetValue(exprRef) as a parameter.\r\n3. If R.type is break and R.target is in the current label set, return (normal, R.value, empty).\r\n4. Return R.\r\nThe production CaseBlock : { CaseClausesopt } is given an input parameter, input, and is evaluated as follows:\r\n1. Let V = empty.\r\n2. Let A be the list of CaseClause items in source text order.\r\n3. Let searching be true.\r\n4. Repeat, while searching is true\r\na. Let C be the next CaseClause in A. If there is no such CaseClause, return (normal, V, empty).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/69490e49-2c12-4aa0-892a-1f96973cea5b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0fe599d3f82037aeb93fe81277f76905bfbec133eb9508d22b886916a4fa8f69",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 344
      },
      {
        "segments": [
          {
            "segment_id": "87f9bfc9-0120-4aa0-ac98-db478ed08ced",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 107,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 95\r\nb. Let clauseSelector be the result of evaluating C.\r\nc. If input is equal to clauseSelector as defined by the === operator, then\r\ni. Set searching to false.\r\nii. If C has a StatementList, then \r\n1. Evaluate C‘s StatementList and let R be the result.\r\n2. If R is an abrupt completion, then return R.\r\n3. Let V = R.value.\r\n5. Repeat\r\na. Let C be the next CaseClause in A. If there is no such CaseClause, return (normal, V, empty).\r\nb. If C has a StatementList, then \r\ni. Evaluate C‘s StatementList and let R be the result.\r\nii. If R.value is not empty, then let V = R.value.\r\niii. If R is an abrupt completion, then return (R.type, V, R.target).\r\nThe production CaseBlock : { CaseClausesopt DefaultClause CaseClausesopt } is given an input parameter, input, \r\nand is evaluated as follows:\r\n1. Let V = empty.\r\n2. Let A be the list of CaseClause items in the first CaseClauses, in source text order.\r\n3. Let B be the list of CaseClause items in the second CaseClauses, in source text order.\r\n4. Let found be false.\r\n5. Repeat letting C be in order each CaseClause in A\r\na. If found is false, then\r\ni. Let clauseSelector be the result of evaluating C.\r\nii. If input is equal to clauseSelector as defined by the === operator, then set found to true.\r\nb. If found is true, then\r\ni. If C has a StatementList, then\r\n1. Evaluate C‘s StatementList and let R be the result.\r\n2. If R.value is not empty, then let V = R.value.\r\n3. R is an abrupt completion, then return (R.type, V, R.target).\r\n6. Let foundInB be false.\r\n7. If found is false, then\r\na. Repeat, while foundInB is false and all elements of B have not been processed\r\ni. Let C be the next CaseClause in B. \r\nii. Let clauseSelector be the result of evaluating C.\r\niii. If input is equal to clauseSelector as defined by the === operator, then\r\n1. Set foundInB to true.\r\n2. If C has a StatementList, then\r\na Evaluate C‘s StatementList and let R be the result.\r\nb If R.value is not empty, then let V = R.value.\r\nc R is an abrupt completion, then return (R.type, V, R.target).\r\n8. If foundInB is false and the DefaultClause has a StatementList, then\r\na. Evaluate the DefaultClause’s StatementList and let R be the result.\r\nb. If R.value is not empty, then let V = R.value.\r\nc. If R is an abrupt completion, then return (R.type, V, R.target).\r\n9. Repeat (Note that if step 7.a.i has been performed this loop does not start at the beginning of B)\r\na. Let C be the next CaseClause in B. If there is no such CaseClause, return (normal, V, empty).\r\nb. If C has a StatementList, then \r\ni. Evaluate C‘s StatementList and let R be the result.\r\nii. If R.value is not empty, then let V = R.value.\r\niii. If R is an abrupt completion, then return (R.type, V, R.target).\r\nThe production CaseClause : case Expression : StatementListopt is evaluated as follows:\r\n1. Let exprRef be the result of evaluating Expression.\r\n2. Return GetValue(exprRef).\r\nNOTE Evaluating CaseClause does not execute the associated StatementList. It simply evaluates the Expression and \r\nreturns the value, which the CaseBlock algorithm uses to determine which StatementList to start executing.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/87f9bfc9-0120-4aa0-ac98-db478ed08ced.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a096b4a164dc0e3b5077b2767694e10931af27e8363efcee6447347261913035",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 560
      },
      {
        "segments": [
          {
            "segment_id": "87f9bfc9-0120-4aa0-ac98-db478ed08ced",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 107,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 95\r\nb. Let clauseSelector be the result of evaluating C.\r\nc. If input is equal to clauseSelector as defined by the === operator, then\r\ni. Set searching to false.\r\nii. If C has a StatementList, then \r\n1. Evaluate C‘s StatementList and let R be the result.\r\n2. If R is an abrupt completion, then return R.\r\n3. Let V = R.value.\r\n5. Repeat\r\na. Let C be the next CaseClause in A. If there is no such CaseClause, return (normal, V, empty).\r\nb. If C has a StatementList, then \r\ni. Evaluate C‘s StatementList and let R be the result.\r\nii. If R.value is not empty, then let V = R.value.\r\niii. If R is an abrupt completion, then return (R.type, V, R.target).\r\nThe production CaseBlock : { CaseClausesopt DefaultClause CaseClausesopt } is given an input parameter, input, \r\nand is evaluated as follows:\r\n1. Let V = empty.\r\n2. Let A be the list of CaseClause items in the first CaseClauses, in source text order.\r\n3. Let B be the list of CaseClause items in the second CaseClauses, in source text order.\r\n4. Let found be false.\r\n5. Repeat letting C be in order each CaseClause in A\r\na. If found is false, then\r\ni. Let clauseSelector be the result of evaluating C.\r\nii. If input is equal to clauseSelector as defined by the === operator, then set found to true.\r\nb. If found is true, then\r\ni. If C has a StatementList, then\r\n1. Evaluate C‘s StatementList and let R be the result.\r\n2. If R.value is not empty, then let V = R.value.\r\n3. R is an abrupt completion, then return (R.type, V, R.target).\r\n6. Let foundInB be false.\r\n7. If found is false, then\r\na. Repeat, while foundInB is false and all elements of B have not been processed\r\ni. Let C be the next CaseClause in B. \r\nii. Let clauseSelector be the result of evaluating C.\r\niii. If input is equal to clauseSelector as defined by the === operator, then\r\n1. Set foundInB to true.\r\n2. If C has a StatementList, then\r\na Evaluate C‘s StatementList and let R be the result.\r\nb If R.value is not empty, then let V = R.value.\r\nc R is an abrupt completion, then return (R.type, V, R.target).\r\n8. If foundInB is false and the DefaultClause has a StatementList, then\r\na. Evaluate the DefaultClause’s StatementList and let R be the result.\r\nb. If R.value is not empty, then let V = R.value.\r\nc. If R is an abrupt completion, then return (R.type, V, R.target).\r\n9. Repeat (Note that if step 7.a.i has been performed this loop does not start at the beginning of B)\r\na. Let C be the next CaseClause in B. If there is no such CaseClause, return (normal, V, empty).\r\nb. If C has a StatementList, then \r\ni. Evaluate C‘s StatementList and let R be the result.\r\nii. If R.value is not empty, then let V = R.value.\r\niii. If R is an abrupt completion, then return (R.type, V, R.target).\r\nThe production CaseClause : case Expression : StatementListopt is evaluated as follows:\r\n1. Let exprRef be the result of evaluating Expression.\r\n2. Return GetValue(exprRef).\r\nNOTE Evaluating CaseClause does not execute the associated StatementList. It simply evaluates the Expression and \r\nreturns the value, which the CaseBlock algorithm uses to determine which StatementList to start executing.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/87f9bfc9-0120-4aa0-ac98-db478ed08ced.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a096b4a164dc0e3b5077b2767694e10931af27e8363efcee6447347261913035",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 560
      },
      {
        "segments": [
          {
            "segment_id": "0ffa85d5-21b6-470b-99ce-8985f53b080b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 108,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "96 © Ecma International 2011\r\n12.12 Labelled Statements\r\nSyntax\r\nLabelledStatement :\r\nIdentifier : Statement\r\nSemantics\r\nA Statement may be prefixed by a label. Labelled statements are only used in conjunction with labelled break\r\nand continue statements. ECMAScript has no goto statement.\r\nAn ECMAScript program is considered syntactically incorrect if it contains a LabelledStatement that is enclosed \r\nby a LabelledStatement with the same Identifier as label. This does not apply to labels appearing within the body \r\nof a FunctionDeclaration that is nested, directly or indirectly, within a labelled statement.\r\nThe production Identifier : Statement is evaluated by adding Identifier to the label set of Statement and then \r\nevaluating Statement. If the LabelledStatement itself has a non-empty label set, these labels are also added to \r\nthe label set of Statement before evaluating it. If the result of evaluating Statement is (break, V, L) where L is \r\nequal to Identifier, the production results in (normal, V, empty).\r\nPrior to the evaluation of a LabelledStatement, the contained Statement is regarded as possessing an empty \r\nlabel set, unless it is an IterationStatement or a SwitchStatement, in which case it is regarded as possessing a \r\nlabel set consisting of the single element, empty.\r\n12.13 The throw Statement\r\nSyntax\r\nThrowStatement :\r\nthrow [no LineTerminator here] Expression ;\r\nSemantics\r\nThe production ThrowStatement : throw [no LineTerminator here] Expression ; is evaluated as follows:\r\n1. Let exprRef be the result of evaluating Expression.\r\n2. Return (throw, GetValue(exprRef), empty).\r\n12.14 The try Statement\r\nSyntax\r\nTryStatement :\r\ntry Block Catch\r\ntry Block Finally\r\ntry Block Catch Finally\r\nCatch :\r\ncatch ( Identifier ) Block\r\nFinally :\r\nfinally Block\r\nThe try statement encloses a block of code in which an exceptional condition can occur, such as a runtime \r\nerror or a throw statement. The catch clause provides the exception-handling code. When a catch clause \r\ncatches an exception, its Identifier is bound to that exception.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0ffa85d5-21b6-470b-99ce-8985f53b080b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4fb19324dfe98ef6f7884e3994280fc34729ca15ba10a05886f0d3b7ef592ea4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 312
      },
      {
        "segments": [
          {
            "segment_id": "7c88a6c2-07d7-478b-a964-a21646a57836",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 109,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 97\r\nSemantics\r\nThe production TryStatement : try Block Catch is evaluated as follows:\r\n1. Let B be the result of evaluating Block.\r\n2. If B.type is not throw, return B.\r\n3. Return the result of evaluating Catch with parameter B.value.\r\nThe production TryStatement : try Block Finally is evaluated as follows:\r\n1. Let B be the result of evaluating Block.\r\n2. Let F be the result of evaluating Finally.\r\n3. If F.type is normal, return B.\r\n4. Return F.\r\nThe production TryStatement : try Block Catch Finally is evaluated as follows:\r\n1. Let B be the result of evaluating Block.\r\n2. If B.type is throw, then\r\na. Let C be the result of evaluating Catch with parameter B.value.\r\n3. Else, B.type is not throw,\r\na. Let C be B.\r\n4. Let F be the result of evaluating Finally.\r\n5. If F.type is normal, return C.\r\n6. Return F.\r\nThe production Catch : catch ( Identifier ) Block is evaluated as follows:\r\n1. Let C be the parameter that has been passed to this production.\r\n2. Let oldEnv be the running execution context‘s LexicalEnvironment.\r\n3. Let catchEnv be the result of calling NewDeclarativeEnvironment passing oldEnv as the argument. \r\n4. Call the CreateMutableBinding concrete method of catchEnv passing the Identifier String value as the \r\nargument.\r\n5. Call the SetMutableBinding concrete method of catchEnv passing the Identifier, C, and false as arguments. \r\nNote that the last argument is immaterial in this situation.\r\n6. Set the running execution context‘s LexicalEnvironment to catchEnv.\r\n7. Let B be the result of evaluating Block.\r\n8. Set the running execution context‘s LexicalEnvironment to oldEnv.\r\n9. Return B.\r\nNOTE No matter how control leaves the Block the LexicalEnvironment is always restored to its former state.\r\nThe production Finally : finally Block is evaluated as follows:\r\n1. Return the result of evaluating Block.\r\n12.14.1 Strict Mode Restrictions\r\nIt is a SyntaxError if a TryStatement with a Catch occurs within strict code and the Identifier of the Catch\r\nproduction is either \"eval\" or \"arguments\".\r\n12.15 The debugger statement\r\nSyntax\r\nDebuggerStatement :\r\ndebugger ;",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/7c88a6c2-07d7-478b-a964-a21646a57836.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d7333b042eafdc54162f319001e1cbd72b5e79ab1ccdac2ae23aeba6d563376b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 346
      },
      {
        "segments": [
          {
            "segment_id": "e0965eaf-636b-44e8-a3dd-50a09c883277",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 110,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "98 © Ecma International 2011\r\nSemantics\r\nEvaluating the DebuggerStatement production may allow an implementation to cause a breakpoint when run \r\nunder a debugger. If a debugger is not present or active this statement has no observable effect.\r\nThe production DebuggerStatement : debugger ; is evaluated as follows:\r\n1. If an implementation defined debugging facility is available and enabled, then\r\na. Perform an implementation defined debugging action.\r\nb. Let result be an implementation defined Completion value. \r\n2. Else\r\na. Let result be (normal, empty, empty).\r\n3. Return result.\r\n13 Function Definition\r\nSyntax\r\nFunctionDeclaration :\r\nfunction Identifier ( FormalParameterListopt ) { FunctionBody }\r\nFunctionExpression :\r\nfunction Identifieropt ( FormalParameterListopt ) { FunctionBody }\r\nFormalParameterList :\r\nIdentifier\r\nFormalParameterList , Identifier\r\nFunctionBody :\r\nSourceElementsopt\r\nSemantics\r\nThe production\r\n FunctionDeclaration : function Identifier ( FormalParameterListopt ) { FunctionBody }\r\nis instantiated as follows during Declaration Binding instantiation (10.5):\r\n1. Return the result of creating a new Function object as specified in 13.2 with parameters specified by \r\nFormalParameterListopt, and body specified by FunctionBody. Pass in the VariableEnvironment of the running \r\nexecution context as the Scope. Pass in true as the Strict flag if the FunctionDeclaration is contained in strict code \r\nor if its FunctionBody is strict code.\r\nThe production\r\n FunctionExpression : function ( FormalParameterListopt ) { FunctionBody }\r\nis evaluated as follows:\r\n1. Return the result of creating a new Function object as specified in 13.2 with parameters specified by \r\nFormalParameterListopt and body specified by FunctionBody. Pass in the LexicalEnvironment of the running \r\nexecution context as the Scope. Pass in true as the Strict flag if the FunctionExpression is contained in strict code or \r\nif its FunctionBody is strict code.\r\nThe production\r\n FunctionExpression : function Identifier ( FormalParameterListopt ) { FunctionBody }\r\nis evaluated as follows:\r\n1. Let funcEnv be the result of calling NewDeclarativeEnvironment passing the running execution context‘s Lexical \r\nEnvironment as the argument\r\n2. Let envRec be funcEnv’s environment record.\r\n3. Call the CreateImmutableBinding concrete method of envRec passing the String value of Identifier as the argument.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/e0965eaf-636b-44e8-a3dd-50a09c883277.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e0b5b7f110589194dc4c9175dbe484aca7491b29735f4ba854f6c942f276c473",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 332
      },
      {
        "segments": [
          {
            "segment_id": "040c73c3-9650-42db-8212-3c6c20e2c212",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 111,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 99\r\n4. Let closure be the result of creating a new Function object as specified in 13.2 with parameters specified by \r\nFormalParameterListopt and body specified by FunctionBody. Pass in funcEnv as the Scope. Pass in true as the \r\nStrict flag if the FunctionExpression is contained in strict code or if its FunctionBody is strict code.\r\n5. Call the InitializeImmutableBinding concrete method of envRec passing the String value of Identifier and closure as \r\nthe arguments.\r\n6. Return closure.\r\nNOTE The Identifier in a FunctionExpression can be referenced from inside the FunctionExpression's FunctionBody to \r\nallow the function to call itself recursively. However, unlike in a FunctionDeclaration, the Identifier in a FunctionExpression\r\ncannot be referenced from and does not affect the scope enclosing the FunctionExpression.\r\nThe production FunctionBody : SourceElementsopt is evaluated as follows:\r\n1. The code of this FunctionBody is strict mode code if it is part of a FunctionDeclaration or FunctionExpression that \r\nis contained in strict mode code or if the Directive Prologue (14.1) of its SourceElements contains a Use Strict \r\nDirective or if any of the conditions in 10.1.1 apply. If the code of this FunctionBody is strict mode code, \r\nSourceElements is evaluated in the following steps as strict mode code. Otherwise, SourceElements is evaluated in \r\nthe following steps as non-strict mode code.\r\n2. If SourceElements is present return the result of evaluating SourceElements.\r\n3. Else return (normal, undefined, empty).\r\n13.1 Strict Mode Restrictions\r\nIt is a SyntaxError if any Identifier value occurs more than once within a FormalParameterList of a strict mode \r\nFunctionDeclaration or FunctionExpression.\r\nIt is a SyntaxError if the Identifier \"eval\" or the Identifier \"arguments\" occurs within a FormalParameterList\r\nof a strict mode FunctionDeclaration or FunctionExpression.\r\nIt is a SyntaxError if the Identifier \"eval\" or the Identifier \"arguments\" occurs as the Identifier of a strict \r\nmode FunctionDeclaration or FunctionExpression.\r\n13.2 Creating Function Objects\r\nGiven an optional parameter list specified by FormalParameterList, a body specified by FunctionBody, a Lexical \r\nEnvironment specified by Scope, and a Boolean flag Strict, a Function object is constructed as follows:\r\n1. Create a new native ECMAScript object and let F be that object.\r\n2. Set all the internal methods, except for [[Get]], of F as described in 8.12.\r\n3. Set the [[Class]] internal property of F to \"Function\".\r\n4. Set the [[Prototype]] internal property of F to the standard built-in Function prototype object as specified in 15.3.3.1.\r\n5. Set the [[Get]] internal property of F as described in 15.3.5.4.\r\n6. Set the [[Call]] internal property of F as described in 13.2.1.\r\n7. Set the [[Construct]] internal property of F as described in 13.2.2.\r\n8. Set the [[HasInstance]] internal property of F as described in 15.3.5.3.\r\n9. Set the [[Scope]] internal property of F to the value of Scope.\r\n10. Let names be a List containing, in left to right textual order, the Strings corresponding to the identifiers of \r\nFormalParameterList. If no parameters are specified, let names be the empty list.\r\n11. Set the [[FormalParameters]] internal property of F to names.\r\n12. Set the [[Code]] internal property of F to FunctionBody.\r\n13. Set the [[Extensible]] internal property of F to true.\r\n14. Let len be the number of formal parameters specified in FormalParameterList. If no parameters are specified, let len\r\nbe 0.\r\n15. Call the [[DefineOwnProperty]] internal method of F with arguments \"length\", Property Descriptor {[[Value]]: \r\nlen, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false}, and false. \r\n16. Let proto be the result of creating a new object as would be constructed by the expression new Object()where \r\nObject is the standard built-in constructor with that name.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/040c73c3-9650-42db-8212-3c6c20e2c212.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b237802686dda277f557b08c4e8e57f8e1b3eb447b02c5addafe6b07a11fb365",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 594
      },
      {
        "segments": [
          {
            "segment_id": "040c73c3-9650-42db-8212-3c6c20e2c212",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 111,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 99\r\n4. Let closure be the result of creating a new Function object as specified in 13.2 with parameters specified by \r\nFormalParameterListopt and body specified by FunctionBody. Pass in funcEnv as the Scope. Pass in true as the \r\nStrict flag if the FunctionExpression is contained in strict code or if its FunctionBody is strict code.\r\n5. Call the InitializeImmutableBinding concrete method of envRec passing the String value of Identifier and closure as \r\nthe arguments.\r\n6. Return closure.\r\nNOTE The Identifier in a FunctionExpression can be referenced from inside the FunctionExpression's FunctionBody to \r\nallow the function to call itself recursively. However, unlike in a FunctionDeclaration, the Identifier in a FunctionExpression\r\ncannot be referenced from and does not affect the scope enclosing the FunctionExpression.\r\nThe production FunctionBody : SourceElementsopt is evaluated as follows:\r\n1. The code of this FunctionBody is strict mode code if it is part of a FunctionDeclaration or FunctionExpression that \r\nis contained in strict mode code or if the Directive Prologue (14.1) of its SourceElements contains a Use Strict \r\nDirective or if any of the conditions in 10.1.1 apply. If the code of this FunctionBody is strict mode code, \r\nSourceElements is evaluated in the following steps as strict mode code. Otherwise, SourceElements is evaluated in \r\nthe following steps as non-strict mode code.\r\n2. If SourceElements is present return the result of evaluating SourceElements.\r\n3. Else return (normal, undefined, empty).\r\n13.1 Strict Mode Restrictions\r\nIt is a SyntaxError if any Identifier value occurs more than once within a FormalParameterList of a strict mode \r\nFunctionDeclaration or FunctionExpression.\r\nIt is a SyntaxError if the Identifier \"eval\" or the Identifier \"arguments\" occurs within a FormalParameterList\r\nof a strict mode FunctionDeclaration or FunctionExpression.\r\nIt is a SyntaxError if the Identifier \"eval\" or the Identifier \"arguments\" occurs as the Identifier of a strict \r\nmode FunctionDeclaration or FunctionExpression.\r\n13.2 Creating Function Objects\r\nGiven an optional parameter list specified by FormalParameterList, a body specified by FunctionBody, a Lexical \r\nEnvironment specified by Scope, and a Boolean flag Strict, a Function object is constructed as follows:\r\n1. Create a new native ECMAScript object and let F be that object.\r\n2. Set all the internal methods, except for [[Get]], of F as described in 8.12.\r\n3. Set the [[Class]] internal property of F to \"Function\".\r\n4. Set the [[Prototype]] internal property of F to the standard built-in Function prototype object as specified in 15.3.3.1.\r\n5. Set the [[Get]] internal property of F as described in 15.3.5.4.\r\n6. Set the [[Call]] internal property of F as described in 13.2.1.\r\n7. Set the [[Construct]] internal property of F as described in 13.2.2.\r\n8. Set the [[HasInstance]] internal property of F as described in 15.3.5.3.\r\n9. Set the [[Scope]] internal property of F to the value of Scope.\r\n10. Let names be a List containing, in left to right textual order, the Strings corresponding to the identifiers of \r\nFormalParameterList. If no parameters are specified, let names be the empty list.\r\n11. Set the [[FormalParameters]] internal property of F to names.\r\n12. Set the [[Code]] internal property of F to FunctionBody.\r\n13. Set the [[Extensible]] internal property of F to true.\r\n14. Let len be the number of formal parameters specified in FormalParameterList. If no parameters are specified, let len\r\nbe 0.\r\n15. Call the [[DefineOwnProperty]] internal method of F with arguments \"length\", Property Descriptor {[[Value]]: \r\nlen, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false}, and false. \r\n16. Let proto be the result of creating a new object as would be constructed by the expression new Object()where \r\nObject is the standard built-in constructor with that name.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/040c73c3-9650-42db-8212-3c6c20e2c212.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b237802686dda277f557b08c4e8e57f8e1b3eb447b02c5addafe6b07a11fb365",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 594
      },
      {
        "segments": [
          {
            "segment_id": "01233668-e53e-40ed-ac5e-09a58281a3ac",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 112,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "100 © Ecma International 2011\r\n17. Call the [[DefineOwnProperty]] internal method of proto with arguments \"constructor\", Property Descriptor \r\n{[[Value]]: F, { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}, and false.\r\n18. Call the [[DefineOwnProperty]] internal method of F with arguments \"prototype\", Property Descriptor \r\n{[[Value]]: proto, { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false}, and false.\r\n19. If Strict is true, then\r\na. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\r\nb. Call the [[DefineOwnProperty]] internal method of F with arguments \"caller\", PropertyDescriptor \r\n{[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}, and false.\r\nc. Call the [[DefineOwnProperty]] internal method of F with arguments \"arguments\", PropertyDescriptor \r\n{[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}, and false.\r\n20. Return F.\r\nNOTE A prototype property is automatically created for every function, to allow for the possibility that the function \r\nwill be used as a constructor.\r\n13.2.1 [[Call]]\r\nWhen the [[Call]] internal method for a Function object F is called with a this value and a list of arguments, the \r\nfollowing steps are taken:\r\n1. Let funcCtx be the result of establishing a new execution context for function code using the value of F's \r\n[[FormalParameters]] internal property, the passed arguments List args, and the this value as described in \r\n10.4.3.\r\n2. Let result be the result of evaluating the FunctionBody that is the value of F's [[Code]] internal property. If \r\nF does not have a [[Code]] internal property or if its value is an empty FunctionBody, then result is (normal, \r\nundefined, empty).\r\n3. Exit the execution context funcCtx, restoring the previous execution context.\r\n4. If result.type is throw then throw result.value.\r\n5. If result.type is return then return result.value.\r\n6. Otherwise result.type must be normal. Return undefined.\r\n13.2.2 [[Construct]]\r\nWhen the [[Construct]] internal method for a Function object F is called with a possibly empty list of arguments, \r\nthe following steps are taken:\r\n1. Let obj be a newly created native ECMAScript object.\r\n2. Set all the internal methods of obj as specified in 8.12.\r\n3. Set the [[Class]] internal property of obj to \"Object\".\r\n4. Set the [[Extensible]] internal property of obj to true.\r\n5. Let proto be the value of calling the [[Get]] internal property of F with argument \"prototype\".\r\n6. If Type(proto) is Object, set the [[Prototype]] internal property of obj to proto.\r\n7. If Type(proto) is not Object, set the [[Prototype]] internal property of obj to the standard built-in Object prototype \r\nobject as described in 15.2.4.\r\n8. Let result be the result of calling the [[Call]] internal property of F, providing obj as the this value and providing the \r\nargument list passed into [[Construct]] as args.\r\n9. If Type(result) is Object then return result.\r\n10. Return obj.\r\n13.2.3 The [[ThrowTypeError]] Function Object\r\nThe [[ThrowTypeError]] object is a unique function object that is defined once as follows:\r\n1. Create a new native ECMAScript object and let F be that object.\r\n2. Set all the internal methods of F as described in 8.12.\r\n3. Set the [[Class]] internal property of F to \"Function\".\r\n4. Set the [[Prototype]] internal property of F to the standard built-in Function prototype object as specified in 15.3.3.1.\r\n5. Set the [[Call]] internal property of F as described in 13.2.1.\r\n6. Set the [[Scope]] internal property of F to the Global Environment.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/01233668-e53e-40ed-ac5e-09a58281a3ac.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=befa521fb4115ebef5d7e28f9b4e4074d77b8ec8f3c8b0ce0034949c6f7a4320",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 541
      },
      {
        "segments": [
          {
            "segment_id": "01233668-e53e-40ed-ac5e-09a58281a3ac",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 112,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "100 © Ecma International 2011\r\n17. Call the [[DefineOwnProperty]] internal method of proto with arguments \"constructor\", Property Descriptor \r\n{[[Value]]: F, { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}, and false.\r\n18. Call the [[DefineOwnProperty]] internal method of F with arguments \"prototype\", Property Descriptor \r\n{[[Value]]: proto, { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false}, and false.\r\n19. If Strict is true, then\r\na. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\r\nb. Call the [[DefineOwnProperty]] internal method of F with arguments \"caller\", PropertyDescriptor \r\n{[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}, and false.\r\nc. Call the [[DefineOwnProperty]] internal method of F with arguments \"arguments\", PropertyDescriptor \r\n{[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}, and false.\r\n20. Return F.\r\nNOTE A prototype property is automatically created for every function, to allow for the possibility that the function \r\nwill be used as a constructor.\r\n13.2.1 [[Call]]\r\nWhen the [[Call]] internal method for a Function object F is called with a this value and a list of arguments, the \r\nfollowing steps are taken:\r\n1. Let funcCtx be the result of establishing a new execution context for function code using the value of F's \r\n[[FormalParameters]] internal property, the passed arguments List args, and the this value as described in \r\n10.4.3.\r\n2. Let result be the result of evaluating the FunctionBody that is the value of F's [[Code]] internal property. If \r\nF does not have a [[Code]] internal property or if its value is an empty FunctionBody, then result is (normal, \r\nundefined, empty).\r\n3. Exit the execution context funcCtx, restoring the previous execution context.\r\n4. If result.type is throw then throw result.value.\r\n5. If result.type is return then return result.value.\r\n6. Otherwise result.type must be normal. Return undefined.\r\n13.2.2 [[Construct]]\r\nWhen the [[Construct]] internal method for a Function object F is called with a possibly empty list of arguments, \r\nthe following steps are taken:\r\n1. Let obj be a newly created native ECMAScript object.\r\n2. Set all the internal methods of obj as specified in 8.12.\r\n3. Set the [[Class]] internal property of obj to \"Object\".\r\n4. Set the [[Extensible]] internal property of obj to true.\r\n5. Let proto be the value of calling the [[Get]] internal property of F with argument \"prototype\".\r\n6. If Type(proto) is Object, set the [[Prototype]] internal property of obj to proto.\r\n7. If Type(proto) is not Object, set the [[Prototype]] internal property of obj to the standard built-in Object prototype \r\nobject as described in 15.2.4.\r\n8. Let result be the result of calling the [[Call]] internal property of F, providing obj as the this value and providing the \r\nargument list passed into [[Construct]] as args.\r\n9. If Type(result) is Object then return result.\r\n10. Return obj.\r\n13.2.3 The [[ThrowTypeError]] Function Object\r\nThe [[ThrowTypeError]] object is a unique function object that is defined once as follows:\r\n1. Create a new native ECMAScript object and let F be that object.\r\n2. Set all the internal methods of F as described in 8.12.\r\n3. Set the [[Class]] internal property of F to \"Function\".\r\n4. Set the [[Prototype]] internal property of F to the standard built-in Function prototype object as specified in 15.3.3.1.\r\n5. Set the [[Call]] internal property of F as described in 13.2.1.\r\n6. Set the [[Scope]] internal property of F to the Global Environment.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/01233668-e53e-40ed-ac5e-09a58281a3ac.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=befa521fb4115ebef5d7e28f9b4e4074d77b8ec8f3c8b0ce0034949c6f7a4320",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 541
      },
      {
        "segments": [
          {
            "segment_id": "9180769e-d679-4c7b-938c-8fab5e14bbaf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 113,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 101\r\n7. Set the [[FormalParameters]] internal property of F to an empty List.\r\n8. Set the [[Code]] internal property of F to be a FunctionBody that unconditionally throws a TypeError exception and \r\nperforms no other action.\r\n9. Call the [[DefineOwnProperty]] internal method of F with arguments \"length\", Property Descriptor {[[Value]]: 0, \r\n[[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false}, and false. \r\n10. Set the [[Extensible]] internal property of F to false.\r\n11. Let [[ThrowTypeError]] be F.\r\n14 Program\r\nSyntax\r\nProgram :\r\nSourceElementsopt\r\nSourceElements :\r\nSourceElement\r\nSourceElements SourceElement\r\nSourceElement :\r\nStatement\r\nFunctionDeclaration\r\nSemantics\r\nThe production Program : SourceElementsopt is evaluated as follows:\r\n1. The code of this Program is strict mode code if the Directive Prologue (14.1) of its SourceElements contains \r\na Use Strict Directive or if any of the conditions of 10.1.1 apply. If the code of this Program is strict mode \r\ncode, SourceElements is evaluated in the following steps as strict mode code. Otherwise SourceElements is \r\nevaluated in the following steps as non-strict mode code.\r\n2. If SourceElements is not present, return (normal, empty, empty).\r\n3. Let progCxt be a new execution context for global code as described in 10.4.1. \r\n4. Let result be the result of evaluating SourceElements.\r\n5. Exit the execution context progCxt.\r\n6. Return result.\r\nNOTE The processes for initiating the evaluation of a Program and for dealing with the result of such an evaluation \r\nare defined by an ECMAScript implementation and not by this specification.\r\nThe production SourceElements : SourceElements SourceElement is evaluated as follows:\r\n1. Let headResult be the result of evaluating SourceElements.\r\n2. If headResult is an abrupt completion, return headResult.\r\n3. Let tailResult be result of evaluating SourceElement.\r\n4. If tailResult.value is empty, let V = headResult.value, otherwise let V = tailResult.value.\r\n5. Return (tailResult.type, V, tailResult.target) \r\nThe production SourceElement : Statement is evaluated as follows:\r\n1. Return the result of evaluating Statement.\r\nThe production SourceElement : FunctionDeclaration is evaluated as follows:\r\n1. Return (normal, empty, empty).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/9180769e-d679-4c7b-938c-8fab5e14bbaf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2310d8f3cb86c118cf3fcae1cdeff31e2300ee8631f8848f4acf0db8605f69b4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 327
      },
      {
        "segments": [
          {
            "segment_id": "eefe14cb-f59f-42cb-9ba0-92c33d3c7cee",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 114,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "102 © Ecma International 2011\r\n14.1 Directive Prologues and the Use Strict Directive\r\nA Directive Prologue is the longest sequence of ExpressionStatement productions occurring as the initial \r\nSourceElement productions of a Program or FunctionBody and where each ExpressionStatement in the sequence\r\nconsists entirely of a StringLiteral token followed a semicolon. The semicolon may appear explicitly or may be \r\ninserted by automatic semicolon insertion. A Directive Prologue may be an empty sequence.\r\nA Use Strict Directive is an ExpressionStatement in a Directive Prologue whose StringLiteral is either the exact \r\ncharacter sequences \"use strict\" or 'use strict'. A Use Strict Directive may not contain an\r\nEscapeSequence or LineContinuation.\r\nA Directive Prologue may contain more than one Use Strict Directive. However, an implementation may issue \r\na warning if this occurs.\r\nNOTE The ExpressionStatement productions of a Directive Prologue are evaluated normally during evaluation of the \r\ncontaining SourceElements production. Implementations may define implementation specific meanings for \r\nExpressionStatement productions which are not a Use Strict Directive and which occur in a Directive Prologue. If an \r\nappropriate notification mechanism exists, an implementation should issue a warning if it encounters in a Directive \r\nPrologue an ExpressionStatement that is not a Use Strict Directive or which does not have a meaning defined by the \r\nimplementation.\r\n15 Standard Built-in ECMAScript Objects\r\nThere are certain built-in objects available whenever an ECMAScript program begins execution. One, the \r\nglobal object, is part of the lexical environment of the executing program. Others are accessible as initial \r\nproperties of the global object.\r\nUnless specified otherwise, the [[Class]] internal property of a built-in object is \"Function\" if that built-in \r\nobject has a [[Call]] internal property, or \"Object\" if that built-in object does not have a [[Call]] internal \r\nproperty. Unless specified otherwise, the [[Extensible]] internal property of a built-in object initially has the \r\nvalue true.\r\nMany built-in objects are functions: they can be invoked with arguments. Some of them furthermore are \r\nconstructors: they are functions intended for use with the new operator. For each built-in function, this \r\nspecification describes the arguments required by that function and properties of the Function object. For each \r\nbuilt-in constructor, this specification furthermore describes properties of the prototype object of that \r\nconstructor and properties of specific object instances returned by a new expression that invokes that \r\nconstructor.\r\nUnless otherwise specified in the description of a particular function, if a function or constructor described in \r\nthis clause is given fewer arguments than the function is specified to require, the function or constructor shall \r\nbehave exactly as if it had been given sufficient additional arguments, each such argument being the \r\nundefined value.\r\nUnless otherwise specified in the description of a particular function, if a function or constructor described in \r\nthis clause is given more arguments than the function is specified to allow, the extra arguments are evaluated \r\nby the call and then ignored by the function. However, an implementation may define implementation specific \r\nbehaviour relating to such arguments as long as the behaviour is not the throwing of a TypeError exception \r\nthat is predicated simply on the presence of an extra argument.\r\nNOTE Implementations that add additional capabilities to the set of built-in functions are encouraged to do so by \r\nadding new functions rather than adding new parameters to existing functions.\r\nEvery built-in function and every built-in constructor has the Function prototype object, which is the initial value \r\nof the expression Function.prototype (15.3.4), as the value of its [[Prototype]] internal property.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/eefe14cb-f59f-42cb-9ba0-92c33d3c7cee.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9ae3bffc0f23c86af52ea6e3c588cc9bb979ca11d3c81f3249b62b7a8b553557",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 568
      },
      {
        "segments": [
          {
            "segment_id": "eefe14cb-f59f-42cb-9ba0-92c33d3c7cee",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 114,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "102 © Ecma International 2011\r\n14.1 Directive Prologues and the Use Strict Directive\r\nA Directive Prologue is the longest sequence of ExpressionStatement productions occurring as the initial \r\nSourceElement productions of a Program or FunctionBody and where each ExpressionStatement in the sequence\r\nconsists entirely of a StringLiteral token followed a semicolon. The semicolon may appear explicitly or may be \r\ninserted by automatic semicolon insertion. A Directive Prologue may be an empty sequence.\r\nA Use Strict Directive is an ExpressionStatement in a Directive Prologue whose StringLiteral is either the exact \r\ncharacter sequences \"use strict\" or 'use strict'. A Use Strict Directive may not contain an\r\nEscapeSequence or LineContinuation.\r\nA Directive Prologue may contain more than one Use Strict Directive. However, an implementation may issue \r\na warning if this occurs.\r\nNOTE The ExpressionStatement productions of a Directive Prologue are evaluated normally during evaluation of the \r\ncontaining SourceElements production. Implementations may define implementation specific meanings for \r\nExpressionStatement productions which are not a Use Strict Directive and which occur in a Directive Prologue. If an \r\nappropriate notification mechanism exists, an implementation should issue a warning if it encounters in a Directive \r\nPrologue an ExpressionStatement that is not a Use Strict Directive or which does not have a meaning defined by the \r\nimplementation.\r\n15 Standard Built-in ECMAScript Objects\r\nThere are certain built-in objects available whenever an ECMAScript program begins execution. One, the \r\nglobal object, is part of the lexical environment of the executing program. Others are accessible as initial \r\nproperties of the global object.\r\nUnless specified otherwise, the [[Class]] internal property of a built-in object is \"Function\" if that built-in \r\nobject has a [[Call]] internal property, or \"Object\" if that built-in object does not have a [[Call]] internal \r\nproperty. Unless specified otherwise, the [[Extensible]] internal property of a built-in object initially has the \r\nvalue true.\r\nMany built-in objects are functions: they can be invoked with arguments. Some of them furthermore are \r\nconstructors: they are functions intended for use with the new operator. For each built-in function, this \r\nspecification describes the arguments required by that function and properties of the Function object. For each \r\nbuilt-in constructor, this specification furthermore describes properties of the prototype object of that \r\nconstructor and properties of specific object instances returned by a new expression that invokes that \r\nconstructor.\r\nUnless otherwise specified in the description of a particular function, if a function or constructor described in \r\nthis clause is given fewer arguments than the function is specified to require, the function or constructor shall \r\nbehave exactly as if it had been given sufficient additional arguments, each such argument being the \r\nundefined value.\r\nUnless otherwise specified in the description of a particular function, if a function or constructor described in \r\nthis clause is given more arguments than the function is specified to allow, the extra arguments are evaluated \r\nby the call and then ignored by the function. However, an implementation may define implementation specific \r\nbehaviour relating to such arguments as long as the behaviour is not the throwing of a TypeError exception \r\nthat is predicated simply on the presence of an extra argument.\r\nNOTE Implementations that add additional capabilities to the set of built-in functions are encouraged to do so by \r\nadding new functions rather than adding new parameters to existing functions.\r\nEvery built-in function and every built-in constructor has the Function prototype object, which is the initial value \r\nof the expression Function.prototype (15.3.4), as the value of its [[Prototype]] internal property.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/eefe14cb-f59f-42cb-9ba0-92c33d3c7cee.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9ae3bffc0f23c86af52ea6e3c588cc9bb979ca11d3c81f3249b62b7a8b553557",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 568
      },
      {
        "segments": [
          {
            "segment_id": "8de94d97-50f5-4bd0-949f-1984fdc03679",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 115,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 103\r\nUnless otherwise specified every built-in prototype object has the Object prototype object, which is the initial \r\nvalue of the expression Object.prototype (15.2.4), as the value of its [[Prototype]] internal property, \r\nexcept the Object prototype object itself.\r\nNone of the built-in functions described in this clause that are not constructors shall implement the \r\n[[Construct]] internal method unless otherwise specified in the description of a particular function. None of the \r\nbuilt-in functions described in this clause shall have a prototype property unless otherwise specified in the \r\ndescription of a particular function.\r\nThis clause generally describes distinct behaviours for when a constructor is ―called as a function‖ and for\r\nwhen it is ―called as part of a new expression‖. The ―called as a function‖ behaviour corresponds to the \r\ninvocation of the constructor‘s [[Call]] internal method and the ―called as part of a new expression‖ behaviour \r\ncorresponds to the invocation of the constructor‘s [[Construct]] internal method. \r\nEvery built-in Function object described in this clause—whether as a constructor, an ordinary function, or \r\nboth—has a length property whose value is an integer. Unless otherwise specified, this value is equal to the \r\nlargest number of named arguments shown in the subclause headings for the function description, including \r\noptional parameters.\r\nNOTE For example, the Function object that is the initial value of the slice property of the String prototype object is \r\ndescribed under the subclause heading ―String.prototype.slice (start, end)‖ which shows the two named arguments start \r\nand end; therefore the value of the length property of that Function object is 2.\r\nIn every case, the length property of a built-in Function object described in this clause has the attributes \r\n{ [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. Every other property described in this \r\nclause has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise \r\nspecified.\r\n15.1 The Global Object\r\nThe unique global object is created before control enters any execution context. \r\nUnless otherwise specified, the standard built-in properties of the global object have attributes {[[Writable]]: \r\ntrue, [[Enumerable]]: false, [[Configurable]]: true}.\r\nThe global object does not have a [[Construct]] internal property; it is not possible to use the global object as a \r\nconstructor with the new operator.\r\nThe global object does not have a [[Call]] internal property; it is not possible to invoke the global object as a \r\nfunction.\r\nThe values of the [[Prototype]] and [[Class]] internal properties of the global object are implementation\u0002dependent.\r\nIn addition to the properties defined in this specification the global object may have additional host defined \r\nproperties. This may include a property whose value is the global object itself; for example, in the HTML \r\ndocument object model the window property of the global object is the global object itself.\r\n15.1.1 Value Properties of the Global Object\r\n15.1.1.1 NaN\r\nThe value of NaN is NaN (see 8.5). This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, \r\n[[Configurable]]: false }.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/8de94d97-50f5-4bd0-949f-1984fdc03679.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9e4161a71525fbf4a5fb97482abd4fa2ca2b2e5528035a9c4d4199dfd627fb06",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 483
      },
      {
        "segments": [
          {
            "segment_id": "2c0690f3-7af5-43e1-b8d7-986f2cff00d9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 116,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "104 © Ecma International 2011\r\n15.1.1.2 Infinity\r\nThe value of Infinity is + (see 8.5). This property has the attributes { [[Writable]]: false, [[Enumerable]]: \r\nfalse, [[Configurable]]: false }.\r\n15.1.1.3 undefined\r\nThe value of undefined is undefined (see 8.1). This property has the attributes { [[Writable]]: false, \r\n[[Enumerable]]: false, [[Configurable]]: false }.\r\n15.1.2 Function Properties of the Global Object\r\n15.1.2.1 eval (x)\r\nWhen the eval function is called with one argument x, the following steps are taken:\r\n1. If Type(x) is not String, return x.\r\n2. Let prog be the ECMAScript code that is the result of parsing x as a Program. If the parse fails, throw a \r\nSyntaxError exception (but see also clause 16).\r\n3. Let evalCtx be the result of establishing a new execution context (10.4.2) for the eval code prog.\r\n4. Let result be the result of evaluating the program prog.\r\n5. Exit the running execution context evalCtx, restoring the previous execution context.\r\n6. If result.type is normal and its completion value is a value V, then return the value V.\r\n7. If result.type is normal and its completion value is empty, then return the value undefined.\r\n8. Otherwise, result.type must be throw. Throw result.value as an exception.\r\n15.1.2.1.1 Direct Call to Eval\r\nA direct call to the eval function is one that is expressed as a CallExpression that meets the following two \r\nconditions:\r\nThe Reference that is the result of evaluating the MemberExpression in the CallExpression has an environment \r\nrecord as its base value and its reference name is \"eval\".\r\nThe result of calling the abstract operation GetValue with that Reference as the argument is the standard built\u0002in function defined in 15.1.2.1.\r\n15.1.2.2 parseInt (string , radix)\r\nThe parseInt function produces an integer value dictated by interpretation of the contents of the string\r\nargument according to the specified radix. Leading white space in string is ignored. If radix is undefined or 0, \r\nit is assumed to be 10 except when the number begins with the character pairs 0x or 0X, in which case a radix \r\nof 16 is assumed. If radix is 16, the number may also optionally begin with the character pairs 0x or 0X.\r\nWhen the parseInt function is called, the following steps are taken:\r\n1. Let inputString be ToString(string).\r\n2. Let S be a newly created substring of inputString consisting of the first character that is not a \r\nStrWhiteSpaceChar and all characters following that character. (In other words, remove leading white \r\nspace.) If inputString does not contain any such characters, let S be the empty string.\r\n3. Let sign be 1.\r\n4. If S is not empty and the first character of S is a minus sign -, let sign be 1.\r\n5. If S is not empty and the first character of S is a plus sign + or a minus sign -, then remove the first character \r\nfrom S.\r\n6. Let R = ToInt32(radix).\r\n7. Let stripPrefix be true.\r\n8. If R  0, then",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/2c0690f3-7af5-43e1-b8d7-986f2cff00d9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bb560889c3ed0628cbc5307db0a521e2a3e9783efeddcb4e84a4435d83d25de7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 493
      },
      {
        "segments": [
          {
            "segment_id": "74357ac1-80a4-4ec6-99d9-d38b84dc3782",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 117,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 105\r\na. If R < 2 or R > 36, then return NaN.\r\nb. If R  16, let stripPrefix be false.\r\n9. Else, R = 0\r\na. Let R = 10.\r\n10. If stripPrefix is true, then\r\na. If the length of S is at least 2 and the first two characters of S are either ―0x‖ or ―0X‖, then remove \r\nthe first two characters from S and let R = 16.\r\n11. If S contains any character that is not a radix-R digit, then let Z be the substring of S consisting of all \r\ncharacters before the first such character; otherwise, let Z be S.\r\n12. If Z is empty, return NaN.\r\n13. Let mathInt be the mathematical integer value that is represented by Z in radix-R notation, using the letters \r\nA-Z and a-z for digits with values 10 through 35. (However, if R is 10 and Z contains more than 20 \r\nsignificant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the \r\nimplementation; and if R is not 2, 4, 8, 10, 16, or 32, then mathInt may be an implementation-dependent \r\napproximation to the mathematical integer value that is represented by Z in radix-R notation.)\r\n14. Let number be the Number value for mathInt.\r\n15. Return sign  number.\r\nNOTE parseInt may interpret only a leading portion of string as an integer value; it ignores any characters that \r\ncannot be interpreted as part of the notation of an integer, and no indication is given that any such characters were \r\nignored.\r\n15.1.2.3 parseFloat (string)\r\nThe parseFloat function produces a Number value dictated by interpretation of the contents of the string\r\nargument as a decimal literal.\r\nWhen the parseFloat function is called, the following steps are taken:\r\n1. Let inputString be ToString(string).\r\n2. Let trimmedString be a substring of inputString consisting of the leftmost character that is not a \r\nStrWhiteSpaceChar and all characters to the right of that character. (In other words, remove leading white \r\nspace.) If inputString does not contain any such characters, let trimmedString be the empty string.\r\n3. If neither trimmedString nor any prefix of trimmedString satisfies the syntax of a StrDecimalLiteral (see \r\n9.3.1), return NaN.\r\n4. Let numberString be the longest prefix of trimmedString, which might be trimmedString itself, that satisfies \r\nthe syntax of a StrDecimalLiteral.\r\n5. Return the Number value for the MV of numberString.\r\nNOTE parseFloat may interpret only a leading portion of string as a Number value; it ignores any characters that \r\ncannot be interpreted as part of the notation of an decimal literal, and no indication is given that any such characters were \r\nignored.\r\n15.1.2.4 isNaN (number)\r\nReturns true if the argument coerces to NaN, and otherwise returns false.\r\n1. If ToNumber(number) is NaN, return true.\r\n2. Otherwise, return false.\r\nNOTE A reliable way for ECMAScript code to test if a value X is a NaN is an expression of the form X !== X. The \r\nresult will be true if and only if X is a NaN.\r\n15.1.2.5 isFinite (number)\r\nReturns false if the argument coerces to NaN, +, or , and otherwise returns true.\r\n1. If ToNumber(number) is NaN, +, or , return false.\r\n2. Otherwise, return true.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/74357ac1-80a4-4ec6-99d9-d38b84dc3782.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=56044f76199345fb27caadd35795d5aea10af82d6309cb759b8b98f557ab015f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 542
      },
      {
        "segments": [
          {
            "segment_id": "74357ac1-80a4-4ec6-99d9-d38b84dc3782",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 117,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 105\r\na. If R < 2 or R > 36, then return NaN.\r\nb. If R  16, let stripPrefix be false.\r\n9. Else, R = 0\r\na. Let R = 10.\r\n10. If stripPrefix is true, then\r\na. If the length of S is at least 2 and the first two characters of S are either ―0x‖ or ―0X‖, then remove \r\nthe first two characters from S and let R = 16.\r\n11. If S contains any character that is not a radix-R digit, then let Z be the substring of S consisting of all \r\ncharacters before the first such character; otherwise, let Z be S.\r\n12. If Z is empty, return NaN.\r\n13. Let mathInt be the mathematical integer value that is represented by Z in radix-R notation, using the letters \r\nA-Z and a-z for digits with values 10 through 35. (However, if R is 10 and Z contains more than 20 \r\nsignificant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the \r\nimplementation; and if R is not 2, 4, 8, 10, 16, or 32, then mathInt may be an implementation-dependent \r\napproximation to the mathematical integer value that is represented by Z in radix-R notation.)\r\n14. Let number be the Number value for mathInt.\r\n15. Return sign  number.\r\nNOTE parseInt may interpret only a leading portion of string as an integer value; it ignores any characters that \r\ncannot be interpreted as part of the notation of an integer, and no indication is given that any such characters were \r\nignored.\r\n15.1.2.3 parseFloat (string)\r\nThe parseFloat function produces a Number value dictated by interpretation of the contents of the string\r\nargument as a decimal literal.\r\nWhen the parseFloat function is called, the following steps are taken:\r\n1. Let inputString be ToString(string).\r\n2. Let trimmedString be a substring of inputString consisting of the leftmost character that is not a \r\nStrWhiteSpaceChar and all characters to the right of that character. (In other words, remove leading white \r\nspace.) If inputString does not contain any such characters, let trimmedString be the empty string.\r\n3. If neither trimmedString nor any prefix of trimmedString satisfies the syntax of a StrDecimalLiteral (see \r\n9.3.1), return NaN.\r\n4. Let numberString be the longest prefix of trimmedString, which might be trimmedString itself, that satisfies \r\nthe syntax of a StrDecimalLiteral.\r\n5. Return the Number value for the MV of numberString.\r\nNOTE parseFloat may interpret only a leading portion of string as a Number value; it ignores any characters that \r\ncannot be interpreted as part of the notation of an decimal literal, and no indication is given that any such characters were \r\nignored.\r\n15.1.2.4 isNaN (number)\r\nReturns true if the argument coerces to NaN, and otherwise returns false.\r\n1. If ToNumber(number) is NaN, return true.\r\n2. Otherwise, return false.\r\nNOTE A reliable way for ECMAScript code to test if a value X is a NaN is an expression of the form X !== X. The \r\nresult will be true if and only if X is a NaN.\r\n15.1.2.5 isFinite (number)\r\nReturns false if the argument coerces to NaN, +, or , and otherwise returns true.\r\n1. If ToNumber(number) is NaN, +, or , return false.\r\n2. Otherwise, return true.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/74357ac1-80a4-4ec6-99d9-d38b84dc3782.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=56044f76199345fb27caadd35795d5aea10af82d6309cb759b8b98f557ab015f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 542
      },
      {
        "segments": [
          {
            "segment_id": "f30a7e2f-6141-4205-84f1-1346f9b36fa6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 118,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "106 © Ecma International 2011\r\n15.1.3 URI Handling Function Properties\r\nUniform Resource Identifiers, or URIs, are Strings that identify resources (e.g. web pages or files) and transport protocols \r\nby which to access them (e.g. HTTP or FTP) on the Internet. The ECMAScript language itself does not provide any \r\nsupport for using URIs except for functions that encode and decode URIs as described in 15.1.3.1, 15.1.3.2, 15.1.3.3 and \r\n15.1.3.4.\r\nNOTE Many implementations of ECMAScript provide additional functions and methods that manipulate web pages; \r\nthese functions are beyond the scope of this standard.\r\nA URI is composed of a sequence of components separated by component separators. The general form is:\r\n Scheme : First / Second ; Third ? Fourth\r\nwhere the italicised names represent components and ―:‖, ―/‖, ―;‖ and ―?‖ are reserved characters used as \r\nseparators. The encodeURI and decodeURI functions are intended to work with complete URIs; they \r\nassume that any reserved characters in the URI are intended to have special meaning and so are not \r\nencoded. The encodeURIComponent and decodeURIComponent functions are intended to work with the \r\nindividual component parts of a URI; they assume that any reserved characters represent text and so must be \r\nencoded so that they are not interpreted as reserved characters when the component is part of a complete \r\nURI.\r\nThe following lexical grammar specifies the form of encoded URIs.\r\nSyntax\r\nuri :::\r\nuriCharactersopt\r\nuriCharacters :::\r\nuriCharacter uriCharactersopt\r\nuriCharacter :::\r\nuriReserved\r\nuriUnescaped\r\nuriEscaped\r\nuriReserved ::: one of\r\n; / ? : @ & = + $ ,\r\nuriUnescaped :::\r\nuriAlpha\r\nDecimalDigit\r\nuriMark\r\nuriEscaped :::\r\n% HexDigit HexDigit\r\nuriAlpha ::: one of\r\na b c d e f g h i j k l m n o p q r s t u v w x y z\r\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\r\nuriMark ::: one of\r\n- _ . ! ~ * ' ( )\r\nNOTE The above syntax is based upon RFC 2396 and does not reflect changes introduced by the more recent RFC \r\n3986. \r\nWhen a character to be included in a URI is not listed above or is not intended to have the special meaning \r\nsometimes given to the reserved characters, that character must be encoded. The character is transformed ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f30a7e2f-6141-4205-84f1-1346f9b36fa6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=502d134474a14849b8f334d36a419cca8a19f8c3df0121736f5b219cbd3f8e2a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 389
      },
      {
        "segments": [
          {
            "segment_id": "bc3107f7-49c1-4308-b2e4-b0fd3517efe1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 119,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 107\r\ninto its UTF-8 encoding, with surrogate pairs first converted from UTF-16 to the corresponding code point \r\nvalue. (Note that for code units in the range [0,127] this results in a single octet with the same value.) The \r\nresulting sequence of octets is then transformed into a String with each octet represented by an escape \r\nsequence of the form ―%xx‖.\r\nThe encoding and escaping process is described by the abstract operation Encode taking two String \r\narguments string and unescapedSet.\r\n1. Let strLen be the number of characters in string.\r\n2. Let R be the empty String.\r\n3. Let k be 0.\r\n4. Repeat\r\na. If k equals strLen, return R.\r\nb. Let C be the character at position k within string.\r\nc. If C is in unescapedSet, then\r\ni. Let S be a String containing only the character C.\r\nii. Let R be a new String value computed by concatenating the previous value of R and S.\r\nd. Else, C is not in unescapedSet\r\ni. If the code unit value of C is not less than 0xDC00 and not greater than 0xDFFF, throw a \r\nURIError exception.\r\nii. If the code unit value of C is less than 0xD800 or greater than 0xDBFF, then\r\n1. Let V be the code unit value of C.\r\niii. Else, \r\n1. Increase k by 1.\r\n2. If k equals strLen, throw a URIError exception.\r\n3. Let kChar be the code unit value of the character at position k within string.\r\n4. If kChar is less than 0xDC00 or greater than 0xDFFF, throw a URIError\r\nexception.\r\n5. Let V be (((the code unit value of C) – 0xD800)  0x400 + (kChar – 0xDC00) + \r\n0x10000).\r\niv. Let Octets be the array of octets resulting by applying the UTF-8 transformation to V, and \r\nlet L be the array size.\r\nv. Let j be 0.\r\nvi. Repeat, while j < L\r\n1. Let jOctet be the value at position j within Octets.\r\n2. Let S be a String containing three characters ―%XY‖ where XY are two uppercase \r\nhexadecimal digits encoding the value of jOctet.\r\n3. Let R be a new String value computed by concatenating the previous value of R and \r\nS.\r\n4. Increase j by 1.\r\ne. Increase k by 1.\r\nThe unescaping and decoding process is described by the abstract operation Decode taking two String \r\narguments string and reservedSet.\r\n1. Let strLen be the number of characters in string.\r\n2. Let R be the empty String.\r\n3. Let k be 0.\r\n4. Repeat\r\na. If k equals strLen, return R.\r\nb. Let C be the character at position k within string.\r\nc. If C is not ‗%‘, then\r\ni. Let S be the String containing only the character C.\r\nd. Else, C is ‗%‘\r\ni. Let start be k.\r\nii. If k + 2 is greater than or equal to strLen, throw a URIError exception.\r\niii. If the characters at position (k+1) and (k + 2) within string do not represent hexadecimal \r\ndigits, throw a URIError exception.\r\niv. Let B be the 8-bit value represented by the two hexadecimal digits at position (k + 1) and (k\r\n+ 2).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/bc3107f7-49c1-4308-b2e4-b0fd3517efe1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1c2805987ce04ffea209696518d48cf5a36f2a8fab4fe403556091ecbcd9d3e0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 528
      },
      {
        "segments": [
          {
            "segment_id": "bc3107f7-49c1-4308-b2e4-b0fd3517efe1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 119,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 107\r\ninto its UTF-8 encoding, with surrogate pairs first converted from UTF-16 to the corresponding code point \r\nvalue. (Note that for code units in the range [0,127] this results in a single octet with the same value.) The \r\nresulting sequence of octets is then transformed into a String with each octet represented by an escape \r\nsequence of the form ―%xx‖.\r\nThe encoding and escaping process is described by the abstract operation Encode taking two String \r\narguments string and unescapedSet.\r\n1. Let strLen be the number of characters in string.\r\n2. Let R be the empty String.\r\n3. Let k be 0.\r\n4. Repeat\r\na. If k equals strLen, return R.\r\nb. Let C be the character at position k within string.\r\nc. If C is in unescapedSet, then\r\ni. Let S be a String containing only the character C.\r\nii. Let R be a new String value computed by concatenating the previous value of R and S.\r\nd. Else, C is not in unescapedSet\r\ni. If the code unit value of C is not less than 0xDC00 and not greater than 0xDFFF, throw a \r\nURIError exception.\r\nii. If the code unit value of C is less than 0xD800 or greater than 0xDBFF, then\r\n1. Let V be the code unit value of C.\r\niii. Else, \r\n1. Increase k by 1.\r\n2. If k equals strLen, throw a URIError exception.\r\n3. Let kChar be the code unit value of the character at position k within string.\r\n4. If kChar is less than 0xDC00 or greater than 0xDFFF, throw a URIError\r\nexception.\r\n5. Let V be (((the code unit value of C) – 0xD800)  0x400 + (kChar – 0xDC00) + \r\n0x10000).\r\niv. Let Octets be the array of octets resulting by applying the UTF-8 transformation to V, and \r\nlet L be the array size.\r\nv. Let j be 0.\r\nvi. Repeat, while j < L\r\n1. Let jOctet be the value at position j within Octets.\r\n2. Let S be a String containing three characters ―%XY‖ where XY are two uppercase \r\nhexadecimal digits encoding the value of jOctet.\r\n3. Let R be a new String value computed by concatenating the previous value of R and \r\nS.\r\n4. Increase j by 1.\r\ne. Increase k by 1.\r\nThe unescaping and decoding process is described by the abstract operation Decode taking two String \r\narguments string and reservedSet.\r\n1. Let strLen be the number of characters in string.\r\n2. Let R be the empty String.\r\n3. Let k be 0.\r\n4. Repeat\r\na. If k equals strLen, return R.\r\nb. Let C be the character at position k within string.\r\nc. If C is not ‗%‘, then\r\ni. Let S be the String containing only the character C.\r\nd. Else, C is ‗%‘\r\ni. Let start be k.\r\nii. If k + 2 is greater than or equal to strLen, throw a URIError exception.\r\niii. If the characters at position (k+1) and (k + 2) within string do not represent hexadecimal \r\ndigits, throw a URIError exception.\r\niv. Let B be the 8-bit value represented by the two hexadecimal digits at position (k + 1) and (k\r\n+ 2).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/bc3107f7-49c1-4308-b2e4-b0fd3517efe1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1c2805987ce04ffea209696518d48cf5a36f2a8fab4fe403556091ecbcd9d3e0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 528
      },
      {
        "segments": [
          {
            "segment_id": "88677fbe-d98c-40cd-80bf-65444ba73d4a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 120,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "108 © Ecma International 2011\r\nv. Increment k by 2.\r\nvi. If the most significant bit in B is 0, then\r\n1. Let C be the character with code unit value B.\r\n2. If C is not in reservedSet, then\r\na Let S be the String containing only the character C.\r\n3. Else, C is in reservedSet\r\na Let S be the substring of string from position start to position k included.\r\nvii. Else, the most significant bit in B is 1\r\n1. Let n be the smallest non-negative number such that (B << n) & 0x80 is equal to 0.\r\n2. If n equals 1 or n is greater than 4, throw a URIError exception.\r\n3. Let Octets be an array of 8-bit integers of size n.\r\n4. Put B into Octets at position 0.\r\n5. If k + (3  (n – 1)) is greater than or equal to strLen, throw a URIError exception.\r\n6. Let j be 1.\r\n7. Repeat, while j < n\r\na Increment k by 1.\r\nb If the character at position k is not ‗%‘, throw a URIError exception.\r\nc If the characters at position (k +1) and (k + 2) within string do not \r\nrepresent hexadecimal digits, throw a URIError exception.\r\nd Let B be the 8-bit value represented by the two hexadecimal digits at \r\nposition (k + 1) and (k + 2).\r\ne If the two most significant bits in B are not 10, throw a URIError\r\nexception.\r\nf Increment k by 2.\r\ng Put B into Octets at position j.\r\nh Increment j by 1.\r\n8. Let V be the value obtained by applying the UTF-8 transformation to Octets, that is, \r\nfrom an array of octets into a 21-bit value. If Octets does not contain a valid UTF-8 \r\nencoding of a Unicode code point throw an URIError exception.\r\n9. If V is less than 0x10000, then\r\na Let C be the character with code unit value V.\r\nb If C is not in reservedSet, then\r\ni. Let S be the String containing only the character C.\r\nc Else, C is in reservedSet\r\ni. Let S be the substring of string from position start to position k\r\nincluded.\r\n10. Else, V is ≥ 0x10000\r\na Let L be (((V – 0x10000) & 0x3FF) + 0xDC00).\r\nb Let H be ((((V – 0x10000) >> 10) & 0x3FF) + 0xD800).\r\nc Let S be the String containing the two characters with code unit values H\r\nand L.\r\ne. Let R be a new String value computed by concatenating the previous value of R and S.\r\nf. Increase k by 1.\r\nNOTE This syntax of Uniform Resource Identifiers is based upon RFC 2396 and does not reflect the more recent \r\nRFC 3986 which replaces RFC 2396. A formal description and implementation of UTF-8 is given in RFC 3629.\r\nIn UTF-8, characters are encoded using sequences of 1 to 6 octets. The only octet of a \"sequence\" of one has the higher\u0002order bit set to 0, the remaining 7 bits being used to encode the character value. In a sequence of n octets, n>1, the initial \r\noctet has the n higher-order bits set to 1, followed by a bit set to 0. The remaining bits of that octet contain bits from the \r\nvalue of the character to be encoded. The following octets all have the higher-order bit set to 1 and the following bit set to \r\n0, leaving 6 bits in each to contain bits from the character to be encoded. The possible UTF-8 encodings of ECMAScript \r\ncharacters are specified in Table 21.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/88677fbe-d98c-40cd-80bf-65444ba73d4a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cbf96f418ed916964c88045c5dcd5d06102cbdf1ded16b413bf632df59338e0d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 598
      },
      {
        "segments": [
          {
            "segment_id": "88677fbe-d98c-40cd-80bf-65444ba73d4a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 120,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "108 © Ecma International 2011\r\nv. Increment k by 2.\r\nvi. If the most significant bit in B is 0, then\r\n1. Let C be the character with code unit value B.\r\n2. If C is not in reservedSet, then\r\na Let S be the String containing only the character C.\r\n3. Else, C is in reservedSet\r\na Let S be the substring of string from position start to position k included.\r\nvii. Else, the most significant bit in B is 1\r\n1. Let n be the smallest non-negative number such that (B << n) & 0x80 is equal to 0.\r\n2. If n equals 1 or n is greater than 4, throw a URIError exception.\r\n3. Let Octets be an array of 8-bit integers of size n.\r\n4. Put B into Octets at position 0.\r\n5. If k + (3  (n – 1)) is greater than or equal to strLen, throw a URIError exception.\r\n6. Let j be 1.\r\n7. Repeat, while j < n\r\na Increment k by 1.\r\nb If the character at position k is not ‗%‘, throw a URIError exception.\r\nc If the characters at position (k +1) and (k + 2) within string do not \r\nrepresent hexadecimal digits, throw a URIError exception.\r\nd Let B be the 8-bit value represented by the two hexadecimal digits at \r\nposition (k + 1) and (k + 2).\r\ne If the two most significant bits in B are not 10, throw a URIError\r\nexception.\r\nf Increment k by 2.\r\ng Put B into Octets at position j.\r\nh Increment j by 1.\r\n8. Let V be the value obtained by applying the UTF-8 transformation to Octets, that is, \r\nfrom an array of octets into a 21-bit value. If Octets does not contain a valid UTF-8 \r\nencoding of a Unicode code point throw an URIError exception.\r\n9. If V is less than 0x10000, then\r\na Let C be the character with code unit value V.\r\nb If C is not in reservedSet, then\r\ni. Let S be the String containing only the character C.\r\nc Else, C is in reservedSet\r\ni. Let S be the substring of string from position start to position k\r\nincluded.\r\n10. Else, V is ≥ 0x10000\r\na Let L be (((V – 0x10000) & 0x3FF) + 0xDC00).\r\nb Let H be ((((V – 0x10000) >> 10) & 0x3FF) + 0xD800).\r\nc Let S be the String containing the two characters with code unit values H\r\nand L.\r\ne. Let R be a new String value computed by concatenating the previous value of R and S.\r\nf. Increase k by 1.\r\nNOTE This syntax of Uniform Resource Identifiers is based upon RFC 2396 and does not reflect the more recent \r\nRFC 3986 which replaces RFC 2396. A formal description and implementation of UTF-8 is given in RFC 3629.\r\nIn UTF-8, characters are encoded using sequences of 1 to 6 octets. The only octet of a \"sequence\" of one has the higher\u0002order bit set to 0, the remaining 7 bits being used to encode the character value. In a sequence of n octets, n>1, the initial \r\noctet has the n higher-order bits set to 1, followed by a bit set to 0. The remaining bits of that octet contain bits from the \r\nvalue of the character to be encoded. The following octets all have the higher-order bit set to 1 and the following bit set to \r\n0, leaving 6 bits in each to contain bits from the character to be encoded. The possible UTF-8 encodings of ECMAScript \r\ncharacters are specified in Table 21.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/88677fbe-d98c-40cd-80bf-65444ba73d4a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cbf96f418ed916964c88045c5dcd5d06102cbdf1ded16b413bf632df59338e0d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 598
      },
      {
        "segments": [
          {
            "segment_id": "13784464-b800-4200-87b6-9fa650d1b3bb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 121,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 109\r\nTable 21 — UTF-8 Encodings\r\nCode Unit Value Representation 1\r\nst Octet 2nd Octet 3rd Octet 4th Octet\r\n0x0000 - 0x007F 00000000 0zzzzzzz 0zzzzzzz\r\n0x0080 - 0x07FF 00000yyy yyzzzzzz 110yyyyy 10zzzzzz\r\n0x0800 - 0xD7FF xxxxyyyy yyzzzzzz 1110xxxx 10yyyyyy 10zzzzzz\r\n0xD800 - 0xDBFF\r\nfollowed by\r\n0xDC00 – 0xDFFF\r\n110110vv vvwwwwxx\r\nfollowed by\r\n110111yy yyzzzzzz\r\n11110uuu 10uuwwww 10xxyyyy 10zzzzzz\r\n0xD800 - 0xDBFF\r\nnot followed by\r\n0xDC00 – 0xDFFF\r\ncauses URIError\r\n0xDC00 – 0xDFFF causes URIError\r\n0xE000 - 0xFFFF xxxxyyyy yyzzzzzz 1110xxxx 10yyyyyy 10zzzzzz\r\nWhere\r\nuuuuu = vvvv + 1\r\nto account for the addition of 0x10000 as in Surrogates, section 3.7, of the Unicode Standard.\r\nThe range of code unit values 0xD800-0xDFFF is used to encode surrogate pairs; the above transformation combines a \r\nUTF-16 surrogate pair into a UTF-32 representation and encodes the resulting 21-bit value in UTF-8. Decoding \r\nreconstructs the surrogate pair.\r\nRFC 3629 prohibits the decoding of invalid UTF-8 octet sequences. For example, the invalid sequence C0 80 must not \r\ndecode into the character U+0000. Implementations of the Decode algorithm are required to throw a URIError when \r\nencountering such invalid sequences.\r\n15.1.3.1 decodeURI (encodedURI)\r\nThe decodeURI function computes a new version of a URI in which each escape sequence and UTF-8 \r\nencoding of the sort that might be introduced by the encodeURI function is replaced with the character that it \r\nrepresents. Escape sequences that could not have been introduced by encodeURI are not replaced.\r\nWhen the decodeURI function is called with one argument encodedURI, the following steps are taken:\r\n1. Let uriString be ToString(encodedURI).\r\n2. Let reservedURISet be a String containing one instance of each character valid in uriReserved plus ―#‖.\r\n3. Return the result of calling Decode(uriString, reservedURISet)\r\nNOTE The character ―#‖ is not decoded from escape sequences even though it is not a reserved URI character.\r\n15.1.3.2 decodeURIComponent (encodedURIComponent)\r\nThe decodeURIComponent function computes a new version of a URI in which each escape sequence and \r\nUTF-8 encoding of the sort that might be introduced by the encodeURIComponent function is replaced with \r\nthe character that it represents.\r\nWhen the decodeURIComponent function is called with one argument encodedURIComponent, the following \r\nsteps are taken:\r\n1. Let componentString be ToString(encodedURIComponent).\r\n2. Let reservedURIComponentSet be the empty String.\r\n3. Return the result of calling Decode(componentString, reservedURIComponentSet)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/13784464-b800-4200-87b6-9fa650d1b3bb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f270839b0a3412d472171d0728dd0aa52743ece8d6400c1dc1664aba25960c14",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 378
      },
      {
        "segments": [
          {
            "segment_id": "6b8ab20f-52e3-452d-bebc-7f863023aed0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 122,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "110 © Ecma International 2011\r\n15.1.3.3 encodeURI (uri)\r\nThe encodeURI function computes a new version of a URI in which each instance of certain characters is \r\nreplaced by one, two, three, or four escape sequences representing the UTF-8 encoding of the character.\r\nWhen the encodeURI function is called with one argument uri, the following steps are taken:\r\n1. Let uriString be ToString(uri).\r\n2. Let unescapedURISet be a String containing one instance of each character valid in uriReserved and \r\nuriUnescaped plus ―#‖.\r\n3. Return the result of calling Encode(uriString, unescapedURISet)\r\nNOTE The character ―#‖ is not encoded to an escape sequence even though it is not a reserved or unescaped URI \r\ncharacter.\r\n15.1.3.4 encodeURIComponent (uriComponent)\r\nThe encodeURIComponent function computes a new version of a URI in which each instance of certain \r\ncharacters is replaced by one, two, three, or four escape sequences representing the UTF-8 encoding of the \r\ncharacter.\r\nWhen the encodeURIComponent function is called with one argument uriComponent, the following steps are \r\ntaken:\r\n1. Let componentString be ToString(uriComponent).\r\n2. Let unescapedURIComponentSet be a String containing one instance of each character valid in \r\nuriUnescaped.\r\n3. Return the result of calling Encode(componentString, unescapedURIComponentSet)\r\n15.1.4 Constructor Properties of the Global Object\r\n15.1.4.1 Object ( . . . )\r\nSee 15.2.1 and 15.2.2.\r\n15.1.4.2 Function ( . . . )\r\nSee 15.3.1 and 15.3.2.\r\n15.1.4.3 Array ( . . . )\r\nSee 15.4.1 and 15.4.2.\r\n15.1.4.4 String ( . . . )\r\nSee 15.5.1 and 15.5.2.\r\n15.1.4.5 Boolean ( . . . )\r\nSee 15.6.1 and 15.6.2.\r\n15.1.4.6 Number ( . . . )\r\nSee 15.7.1 and 15.7.2.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/6b8ab20f-52e3-452d-bebc-7f863023aed0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=176f89eba9778571531ad1c2c77289c1e2c66e722a2177a370dd192ac97a0275",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ed6876dd-3763-4855-b6eb-919417f4c7c4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 123,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 111\r\n15.1.4.7 Date ( . . . )\r\nSee 15.9.2.\r\n15.1.4.8 RegExp ( . . . )\r\nSee 15.10.3 and 15.10.4.\r\n15.1.4.9 Error ( . . . )\r\nSee 15.11.1 and 15.11.2.\r\n15.1.4.10 EvalError ( . . . )\r\nSee 15.11.6.1.\r\n15.1.4.11 RangeError ( . . . )\r\nSee 15.11.6.2.\r\n15.1.4.12 ReferenceError ( . . . )\r\nSee 15.11.6.3.\r\n15.1.4.13 SyntaxError ( . . . )\r\nSee 15.11.6.4.\r\n15.1.4.14 TypeError ( . . . )\r\nSee 15.11.6.5.\r\n15.1.4.15 URIError ( . . . )\r\nSee 15.11.6.6.\r\n15.1.5 Other Properties of the Global Object\r\n15.1.5.1 Math\r\nSee 15.8.\r\n15.1.5.2 JSON\r\nSee 15.12.\r\n15.2 Object Objects\r\n15.2.1 The Object Constructor Called as a Function\r\nWhen Object is called as a function rather than as a constructor, it performs a type conversion.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/ed6876dd-3763-4855-b6eb-919417f4c7c4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cb6e9d5cc585b6160d260edf78b74bfc26ceb96fd3c2552df2efd21e8ce11508",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 397
      },
      {
        "segments": [
          {
            "segment_id": "b1c6310f-3b0c-4065-b1dc-32d9a94e0a25",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 124,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "112 © Ecma International 2011\r\n15.2.1.1 Object ( [ value ] )\r\nWhen the Object function is called with no arguments or with one argument value, the following steps are \r\ntaken:\r\n1. If value is null, undefined or not supplied, create and return a new Object object exactly as if the standard \r\nbuilt-in Object constructor had been called with the same arguments (15.2.2.1).\r\n2. Return ToObject(value).\r\n15.2.2 The Object Constructor\r\nWhen Object is called as part of a new expression, it is a constructor that may create an object.\r\n15.2.2.1 new Object ( [ value ] )\r\nWhen the Object constructor is called with no arguments or with one argument value, the following steps are \r\ntaken:\r\n1. If value is supplied, then\r\na. If Type(value) is Object, then\r\ni. If the value is a native ECMAScript object, do not create a new object but simply return \r\nvalue.\r\nii. If the value is a host object, then actions are taken and a result is returned in an \r\nimplementation-dependent manner that may depend on the host object.\r\nb. If Type(value) is String, return ToObject(value).\r\nc. If Type(value) is Boolean, return ToObject(value).\r\nd. If Type(value) is Number, return ToObject(value).\r\n2. Assert: The argument value was not supplied or its type was Null or Undefined. \r\n3. Let obj be a newly created native ECMAScript object.\r\n4. Set the [[Prototype]] internal property of obj to the standard built-in Object prototype object (15.2.4).\r\n5. Set the [[Class]] internal property of obj to \"Object\".\r\n6. Set the [[Extensible]] internal property of obj to true.\r\n7. Set all the internal methods of obj as specified in 8.12.\r\n8. Return obj.\r\n15.2.3 Properties of the Object Constructor\r\nThe value of the [[Prototype]] internal property of the Object constructor is the standard built-in Function \r\nprototype object.\r\nBesides the internal properties and the length property (whose value is 1), the Object constructor has the \r\nfollowing properties:\r\n15.2.3.1 Object.prototype\r\nThe initial value of Object.prototype is the standard built-in Object prototype object (15.2.4).\r\nThis property has the attributes {[[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.2.3.2 Object.getPrototypeOf ( O )\r\nWhen the getPrototypeOf function is called with argument O, the following steps are taken:\r\n1. If Type(O) is not Object throw a TypeError exception.\r\n2. Return the value of the [[Prototype]] internal property of O.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/b1c6310f-3b0c-4065-b1dc-32d9a94e0a25.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=32881ddd7038036c159c77efe6ca9bb27fe48a9a1eff26df517ab5d962e9730b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 382
      },
      {
        "segments": [
          {
            "segment_id": "d80ddf6c-0fd7-4a9e-bf20-8a2f1cf22a07",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 125,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 113\r\n15.2.3.3 Object.getOwnPropertyDescriptor ( O, P )\r\nWhen the getOwnPropertyDescriptor function is called, the following steps are taken:\r\n1. If Type(O) is not Object throw a TypeError exception.\r\n2. Let name be ToString(P).\r\n3. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with argument name.\r\n4. Return the result of calling FromPropertyDescriptor(desc) (8.10.4). \r\n15.2.3.4 Object.getOwnPropertyNames ( O )\r\nWhen the getOwnPropertyNames function is called, the following steps are taken:\r\n1. If Type(O) is not Object throw a TypeError exception.\r\n2. Let array be the result of creating a new object as if by the expression new Array () where Array is the \r\nstandard built-in constructor with that name.\r\n3. Let n be 0.\r\n4. For each named own property P of O\r\na. Let name be the String value that is the name of P.\r\nb. Call the [[DefineOwnProperty]] internal method of array with arguments ToString(n), the \r\nPropertyDescriptor {[[Value]]: name, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: \r\ntrue}, and false.\r\nc. Increment n by 1.\r\n5. Return array.\r\nNOTE If O is a String instance, the set of own properties processed in step 4 includes the implicit properties defined \r\nin 15.5.5.2 that correspond to character positions within the object‘s [[PrimitiveValue]] String.\r\n15.2.3.5 Object.create ( O [, Properties] )\r\nThe create function creates a new object with a specified prototype. When the create function is called, the \r\nfollowing steps are taken:\r\n1. If Type(O) is not Object or Null throw a TypeError exception.\r\n2. Let obj be the result of creating a new object as if by the expression new Object() where Object is the \r\nstandard built-in constructor with that name\r\n3. Set the [[Prototype]] internal property of obj to O.\r\n4. If the argument Properties is present and not undefined, add own properties to obj as if by calling the \r\nstandard built-in function Object.defineProperties with arguments obj and Properties.\r\n5. Return obj.\r\n15.2.3.6 Object.defineProperty ( O, P, Attributes )\r\nThe defineProperty function is used to add an own property and/or update the attributes of an existing own \r\nproperty of an object. When the defineProperty function is called, the following steps are taken:\r\n1. If Type(O) is not Object throw a TypeError exception.\r\n2. Let name be ToString(P).\r\n3. Let desc be the result of calling ToPropertyDescriptor with Attributes as the argument.\r\n4. Call the [[DefineOwnProperty]] internal method of O with arguments name, desc, and true.\r\n5. Return O.\r\n15.2.3.7 Object.defineProperties ( O, Properties )\r\nThe defineProperties function is used to add own properties and/or update the attributes of existing own \r\nproperties of an object. When the defineProperties function is called, the following steps are taken:\r\n1. If Type(O) is not Object throw a TypeError exception.\r\n2. Let props be ToObject(Properties).\r\n3. Let names be an internal list containing the names of each enumerable own property of props.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/d80ddf6c-0fd7-4a9e-bf20-8a2f1cf22a07.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c85bbcae7f365dcc0c062edb4d606971a47df7ca79bb89f46e2ac0c312144ec4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 474
      },
      {
        "segments": [
          {
            "segment_id": "337455a7-efc5-4586-8352-1e957ae6ae02",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 126,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "114 © Ecma International 2011\r\n4. Let descriptors be an empty internal List.\r\n5. For each element P of names in list order,\r\na. Let descObj be the result of calling the [[Get]] internal method of props with P as the argument.\r\nb. Let desc be the result of calling ToPropertyDescriptor with descObj as the argument.\r\nc. Append the pair (a two element List) consisting of P and desc to the end of descriptors.\r\n6. For each pair from descriptors in list order,\r\na. Let P be the first element of pair.\r\nb. Let desc be the second element of pair.\r\nc. Call the [[DefineOwnProperty]] internal method of O with arguments P, desc, and true.\r\n7. Return O.\r\nIf an implementation defines a specific order of enumeration for the for-in statement, that same enumeration \r\norder must be used to order the list elements in step 3 of this algorithm.\r\n15.2.3.8 Object.seal ( O )\r\nWhen the seal function is called, the following steps are taken:\r\n1. If Type(O) is not Object throw a TypeError exception.\r\n2. For each named own property name P of O,\r\na. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.\r\nb. If desc.[[Configurable]] is true, set desc.[[Configurable]] to false.\r\nc. Call the [[DefineOwnProperty]] internal method of O with P, desc, and true as arguments.\r\n3. Set the [[Extensible]] internal property of O to false.\r\n4. Return O.\r\n15.2.3.9 Object.freeze ( O )\r\nWhen the freeze function is called, the following steps are taken:\r\n1. If Type(O) is not Object throw a TypeError exception.\r\n2. For each named own property name P of O,\r\na. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.\r\nb. If IsDataDescriptor(desc) is true, then\r\ni. If desc.[[Writable]] is true, set desc.[[Writable]] to false.\r\nc. If desc.[[Configurable]] is true, set desc.[[Configurable]] to false.\r\nd. Call the [[DefineOwnProperty]] internal method of O with P, desc, and true as arguments.\r\n3. Set the [[Extensible]] internal property of O to false.\r\n4. Return O.\r\n15.2.3.10 Object.preventExtensions ( O )\r\nWhen the preventExtensions function is called, the following steps are taken:\r\n1. If Type(O) is not Object throw a TypeError exception.\r\n2. Set the [[Extensible]] internal property of O to false.\r\n3. Return O.\r\n15.2.3.11 Object.isSealed ( O )\r\nWhen the isSealed function is called with argument O, the following steps are taken:\r\n1. If Type(O) is not Object throw a TypeError exception.\r\n2. For each named own property name P of O,\r\na. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.\r\nb. If desc.[[Configurable]] is true, then return false.\r\n3. If the [[Extensible]] internal property of O is false, then return true.\r\n4. Otherwise, return false.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/337455a7-efc5-4586-8352-1e957ae6ae02.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=df84da3a367fcafe63ecd4f67f38e7340a93fd9d651925bcdd266a0fef28a45d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 461
      },
      {
        "segments": [
          {
            "segment_id": "ea2d4513-ab63-40d6-8788-06dd5f5f4c80",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 127,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 115\r\n15.2.3.12 Object.isFrozen ( O )\r\nWhen the isFrozen function is called with argument O, the following steps are taken:\r\n1. If Type(O) is not Object throw a TypeError exception.\r\n2. For each named own property name P of O,\r\na. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.\r\nb. If IsDataDescriptor(desc) is true then\r\ni. If desc.[[Writable]] is true, return false.\r\nc. If desc.[[Configurable]] is true, then return false.\r\n3. If the [[Extensible]] internal property of O is false, then return true.\r\n4. Otherwise, return false.\r\n15.2.3.13 Object.isExtensible ( O )\r\nWhen the isExtensible function is called with argument O, the following steps are taken:\r\n1. If Type(O) is not Object throw a TypeError exception.\r\n2. Return the Boolean value of the [[Extensible]] internal property of O.\r\n15.2.3.14 Object.keys ( O )\r\nWhen the keys function is called with argument O, the following steps are taken:\r\n1. If the Type(O) is not Object, throw a TypeError exception.\r\n2. Let n be the number of own enumerable properties of O\r\n3. Let array be the result of creating a new Object as if by the expression new Array(n) where Array is \r\nthe standard built-in constructor with that name.\r\n4. Let index be 0.\r\n5. For each own enumerable property of O whose name String is P\r\na. Call the [[DefineOwnProperty]] internal method of array with arguments ToString(index), the\r\nPropertyDescriptor {[[Value]]: P, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, \r\nand false.\r\nb. Increment index by 1.\r\n6. Return array.\r\nIf an implementation defines a specific order of enumeration for the for-in statement, that same enumeration \r\norder must be used in step 5 of this algorithm.\r\n15.2.4 Properties of the Object Prototype Object\r\nThe value of the [[Prototype]] internal property of the Object prototype object is null, the value of the [[Class]] \r\ninternal property is \"Object\", and the initial value of the [[Extensible]] internal property is true.\r\n15.2.4.1 Object.prototype.constructor\r\nThe initial value of Object.prototype.constructor is the standard built-in Object constructor.\r\n15.2.4.2 Object.prototype.toString ( )\r\nWhen the toString method is called, the following steps are taken:\r\n1. If the this value is undefined, return \"[object Undefined]\".\r\n2. If the this value is null, return \"[object Null]\".\r\n3. Let O be the result of calling ToObject passing the this value as the argument.\r\n4. Let class be the value of the [[Class]] internal property of O.\r\n5. Return the String value that is the result of concatenating the three Strings \"[object \", class, and \"]\".",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/ea2d4513-ab63-40d6-8788-06dd5f5f4c80.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7f44c4d99fb7516a151b365c03bf55293f4564cdc4852e2951731dc4b09b693a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 421
      },
      {
        "segments": [
          {
            "segment_id": "357a529d-ed84-48d3-8157-30f2374447bf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 128,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "116 © Ecma International 2011\r\n15.2.4.3 Object.prototype.toLocaleString ( )\r\nWhen the toLocaleString method is called, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let toString be the result of calling the [[Get]] internal method of O passing \"toString\" as the argument.\r\n3. If IsCallable(toString) is false, throw a TypeError exception.\r\n4. Return the result of calling the [[Call]] internal method of toString passing O as the this value and no \r\narguments.\r\nNOTE 1 This function is provided to give all Objects a generic toLocaleString interface, even though not all may \r\nuse it. Currently, Array, Number, and Date provide their own locale-sensitive toLocaleString methods.\r\nNOTE 2 The first parameter to this function is likely to be used in a future version of this standard; it is recommended \r\nthat implementations do not use this parameter position for anything else.\r\n15.2.4.4 Object.prototype.valueOf ( )\r\nWhen the valueOf method is called, the following steps are taken: \r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. If O is the result of calling the Object constructor with a host object (15.2.2.1), then\r\na. Return either O or another value such as the host object originally passed to the constructor. The \r\nspecific result that is returned is implementation-defined.\r\n3. Return O.\r\n15.2.4.5 Object.prototype.hasOwnProperty (V)\r\nWhen the hasOwnProperty method is called with argument V, the following steps are taken:\r\n1. Let P be ToString(V).\r\n2. Let O be the result of calling ToObject passing the this value as the argument.\r\n3. Let desc be the result of calling the [[GetOwnProperty]] internal method of O passing P as the argument.\r\n4. If desc is undefined, return false.\r\n5. Return true.\r\nNOTE 1 Unlike [[HasProperty]] (8.12.6), this method does not consider objects in the prototype chain.\r\nNOTE 2 The ordering of steps 1 and 2 is chosen to ensure that any exception that would have been thrown by step 1 \r\nin previous editions of this specification will continue to be thrown even if the this value is undefined or null.\r\n15.2.4.6 Object.prototype.isPrototypeOf (V)\r\nWhen the isPrototypeOf method is called with argument V, the following steps are taken:\r\n1. If V is not an object, return false.\r\n2. Let O be the result of calling ToObject passing the this value as the argument.\r\n3. Repeat\r\na. Let V be the value of the [[Prototype]] internal property of V.\r\nb. if V is null, return false\r\nc. If O and V refer to the same object, return true.\r\nNOTE The ordering of steps 1 and 2 is chosen to preserve the behaviour specified by previous editions of this \r\nspecification for the case where V is not an object and the this value is undefined or null.\r\n15.2.4.7 Object.prototype.propertyIsEnumerable (V)\r\nWhen the propertyIsEnumerable method is called with argument V, the following steps are taken:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/357a529d-ed84-48d3-8157-30f2374447bf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=726e5ffa14b559247eefe7e0d563f9b391f926a90fab06db387652f4059db70e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 484
      },
      {
        "segments": [
          {
            "segment_id": "2fba8024-fbf8-4af7-8357-f61ba83e2bd8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 129,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 117\r\n1. Let P be ToString(V).\r\n2. Let O be the result of calling ToObject passing the this value as the argument.\r\n3. Let desc be the result of calling the [[GetOwnProperty]] internal method of O passing P as the argument.\r\n4. If desc is undefined, return false.\r\n5. Return the value of desc.[[Enumerable]].\r\nNOTE 1 This method does not consider objects in the prototype chain.\r\nNOTE 2 The ordering of steps 1 and 2 is chosen to ensure that any exception that would have been thrown by step 1 \r\nin previous editions of this specification will continue to be thrown even if the this value is undefined or null.\r\n15.2.5 Properties of Object Instances\r\nObject instances have no special properties beyond those inherited from the Object prototype object.\r\n15.3 Function Objects\r\n15.3.1 The Function Constructor Called as a Function\r\nWhen Function is called as a function rather than as a constructor, it creates and initialises a new Function \r\nobject. Thus the function call Function(…) is equivalent to the object creation expression new \r\nFunction(…) with the same arguments.\r\n15.3.1.1 Function (p1, p2, … , pn, body)\r\nWhen the Function function is called with some arguments p1, p2, … , pn, body (where n might be 0, that is, \r\nthere are no ―p‖ arguments, and where body might also not be provided), the following steps are taken:\r\n1. Create and return a new Function object as if the standard built-in constructor Function was used in a new \r\nexpression with the same arguments (15.3.2.1).\r\n15.3.2 The Function Constructor\r\nWhen Function is called as part of a new expression, it is a constructor: it initialises the newly created object.\r\n15.3.2.1 new Function (p1, p2, … , pn, body)\r\nThe last argument specifies the body (executable code) of a function; any preceding arguments specify formal \r\nparameters.\r\nWhen the Function constructor is called with some arguments p1, p2, … , pn, body (where n might be 0, that \r\nis, there are no ―p‖ arguments, and where body might also not be provided), the following steps are taken:\r\n1. Let argCount be the total number of arguments passed to this function invocation.\r\n2. Let P be the empty String.\r\n3. If argCount = 0, let body be the empty String.\r\n4. Else if argCount = 1, let body be that argument.\r\n5. Else, argCount > 1\r\na. Let firstArg be the first argument.\r\nb. Let P be ToString(firstArg).\r\nc. Let k be 2.\r\nd. Repeat, while k < argCount\r\ni. Let nextArg be the k‘th argument.\r\nii. Let P be the result of concatenating the previous value of P, the String \",\" (a comma), and \r\nToString(nextArg).\r\niii. Increase k by 1.\r\ne. Let body be the k‘th argument.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/2fba8024-fbf8-4af7-8357-f61ba83e2bd8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=eb3e60ab46fc2230ef3c341ef18dc0f9e9612676200255adc6b938f1ab9cce66",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 456
      },
      {
        "segments": [
          {
            "segment_id": "bab73263-d4b3-4b32-80a1-a086af63f809",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 130,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "118 © Ecma International 2011\r\n6. Let body be ToString(body).\r\n7. If P is not parsable as a FormalParameterListopt then throw a SyntaxError exception.\r\n8. If body is not parsable as FunctionBody then throw a SyntaxError exception.\r\n9. If body is strict mode code (see 10.1.1) then let strict be true, else let strict be false.\r\n10. If strict is true, throw any exceptions specified in 13.1 that apply. \r\n11. Return a new Function object created as specified in 13.2 passing P as the FormalParameterListopt and body\r\nas the FunctionBody. Pass in the Global Environment as the Scope parameter and strict as the Strict flag.\r\nA prototype property is automatically created for every function, to provide for the possibility that the \r\nfunction will be used as a constructor.\r\nNOTE It is permissible but not necessary to have one argument for each formal parameter to be specified. For \r\nexample, all three of the following expressions produce the same result:\r\nnew Function(\"a\", \"b\", \"c\", \"return a+b+c\")\r\nnew Function(\"a, b, c\", \"return a+b+c\")\r\nnew Function(\"a,b\", \"c\", \"return a+b+c\")\r\n15.3.3 Properties of the Function Constructor\r\nThe Function constructor is itself a Function object and its [[Class]] is \"Function\". The value of the \r\n[[Prototype]] internal property of the Function constructor is the standard built-in Function prototype object \r\n(15.3.4).\r\nThe value of the [[Extensible]] internal property of the Function constructor is true.\r\nThe Function constructor has the following properties:\r\n15.3.3.1 Function.prototype\r\nThe initial value of Function.prototype is the standard built-in Function prototype object (15.3.4).\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.3.3.2 Function.length\r\nThis is a data property with a value of 1. This property has the attributes { [[Writable]]: false, [[Enumerable]]: \r\nfalse, [[Configurable]]: false }.\r\n15.3.4 Properties of the Function Prototype Object\r\nThe Function prototype object is itself a Function object (its [[Class]] is \"Function\") that, when invoked, \r\naccepts any arguments and returns undefined.\r\nThe value of the [[Prototype]] internal property of the Function prototype object is the standard built-in Object \r\nprototype object (15.2.4). The initial value of the [[Extensible]] internal property of the Function prototype \r\nobject is true.\r\nThe Function prototype object does not have a valueOf property of its own; however, it inherits the valueOf\r\nproperty from the Object prototype Object.\r\nThe length property of the Function prototype object is 0.\r\n15.3.4.1 Function.prototype.constructor\r\nThe initial value of Function.prototype.constructor is the built-in Function constructor.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/bab73263-d4b3-4b32-80a1-a086af63f809.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d63db12ee56b2115c88cb90358de57d8f8895c4ef180889280003cac37e0a63a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 396
      },
      {
        "segments": [
          {
            "segment_id": "a618d17e-5550-47ee-a19c-1757b585a6b1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 131,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 119\r\n15.3.4.2 Function.prototype.toString ( )\r\nAn implementation-dependent representation of the function is returned. This representation has the syntax of \r\na FunctionDeclaration. Note in particular that the use and placement of white space, line terminators, and \r\nsemicolons within the representation String is implementation-dependent.\r\nThe toString function is not generic; it throws a TypeError exception if its this value is not a Function \r\nobject. Therefore, it cannot be transferred to other kinds of objects for use as a method.\r\n15.3.4.3 Function.prototype.apply (thisArg, argArray)\r\nWhen the apply method is called on an object func with arguments thisArg and argArray, the following steps \r\nare taken: \r\n1. If IsCallable(func) is false, then throw a TypeError exception.\r\n2. If argArray is null or undefined, then\r\na. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value \r\nand an empty list of arguments.\r\n3. If Type(argArray) is not Object, then throw a TypeError exception.\r\n4. Let len be the result of calling the [[Get]] internal method of argArray with argument \"length\".\r\n5. Let n be ToUint32(len).\r\n6. Let argList be an empty List.\r\n7. Let index be 0.\r\n8. Repeat while index < n\r\na. Let indexName be ToString(index).\r\nb. Let nextArg be the result of calling the [[Get]] internal method of argArray with indexName as the \r\nargument.\r\nc. Append nextArg as the last element of argList.\r\nd. Set index to index + 1.\r\n9. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value and \r\nargList as the list of arguments.\r\nThe length property of the apply method is 2.\r\nNOTE The thisArg value is passed without modification as the this value. This is a change from Edition 3, where a \r\nundefined or null thisArg is replaced with the global object and ToObject is applied to all other values and that result is \r\npassed as the this value.\r\n15.3.4.4 Function.prototype.call (thisArg [ , arg1 [ , arg2, … ] ] )\r\nWhen the call method is called on an object func with argument thisArg and optional arguments arg1, arg2\r\netc, the following steps are taken:\r\n1. If IsCallable(func) is false, then throw a TypeError exception.\r\n2. Let argList be an empty List.\r\n3. If this method was called with more than one argument then in left to right order starting with arg1 append \r\neach argument as the last element of argList\r\n4. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value and \r\nargList as the list of arguments.\r\nThe length property of the call method is 1.\r\nNOTE The thisArg value is passed without modification as the this value. This is a change from Edition 3, where a \r\nundefined or null thisArg is replaced with the global object and ToObject is applied to all other values and that result is \r\npassed as the this value.\r\n15.3.4.5 Function.prototype.bind (thisArg [, arg1 [, arg2, …]])\r\nThe bind method takes one or more arguments, thisArg and (optionally) arg1, arg2, etc, and returns a new \r\nfunction object by performing the following steps:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/a618d17e-5550-47ee-a19c-1757b585a6b1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=07b11ad8e15db6054934127e770c2547dd03c81fe7b6c2ef1e39c4f3a4470bf4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 518
      },
      {
        "segments": [
          {
            "segment_id": "a618d17e-5550-47ee-a19c-1757b585a6b1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 131,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 119\r\n15.3.4.2 Function.prototype.toString ( )\r\nAn implementation-dependent representation of the function is returned. This representation has the syntax of \r\na FunctionDeclaration. Note in particular that the use and placement of white space, line terminators, and \r\nsemicolons within the representation String is implementation-dependent.\r\nThe toString function is not generic; it throws a TypeError exception if its this value is not a Function \r\nobject. Therefore, it cannot be transferred to other kinds of objects for use as a method.\r\n15.3.4.3 Function.prototype.apply (thisArg, argArray)\r\nWhen the apply method is called on an object func with arguments thisArg and argArray, the following steps \r\nare taken: \r\n1. If IsCallable(func) is false, then throw a TypeError exception.\r\n2. If argArray is null or undefined, then\r\na. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value \r\nand an empty list of arguments.\r\n3. If Type(argArray) is not Object, then throw a TypeError exception.\r\n4. Let len be the result of calling the [[Get]] internal method of argArray with argument \"length\".\r\n5. Let n be ToUint32(len).\r\n6. Let argList be an empty List.\r\n7. Let index be 0.\r\n8. Repeat while index < n\r\na. Let indexName be ToString(index).\r\nb. Let nextArg be the result of calling the [[Get]] internal method of argArray with indexName as the \r\nargument.\r\nc. Append nextArg as the last element of argList.\r\nd. Set index to index + 1.\r\n9. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value and \r\nargList as the list of arguments.\r\nThe length property of the apply method is 2.\r\nNOTE The thisArg value is passed without modification as the this value. This is a change from Edition 3, where a \r\nundefined or null thisArg is replaced with the global object and ToObject is applied to all other values and that result is \r\npassed as the this value.\r\n15.3.4.4 Function.prototype.call (thisArg [ , arg1 [ , arg2, … ] ] )\r\nWhen the call method is called on an object func with argument thisArg and optional arguments arg1, arg2\r\netc, the following steps are taken:\r\n1. If IsCallable(func) is false, then throw a TypeError exception.\r\n2. Let argList be an empty List.\r\n3. If this method was called with more than one argument then in left to right order starting with arg1 append \r\neach argument as the last element of argList\r\n4. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value and \r\nargList as the list of arguments.\r\nThe length property of the call method is 1.\r\nNOTE The thisArg value is passed without modification as the this value. This is a change from Edition 3, where a \r\nundefined or null thisArg is replaced with the global object and ToObject is applied to all other values and that result is \r\npassed as the this value.\r\n15.3.4.5 Function.prototype.bind (thisArg [, arg1 [, arg2, …]])\r\nThe bind method takes one or more arguments, thisArg and (optionally) arg1, arg2, etc, and returns a new \r\nfunction object by performing the following steps:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/a618d17e-5550-47ee-a19c-1757b585a6b1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=07b11ad8e15db6054934127e770c2547dd03c81fe7b6c2ef1e39c4f3a4470bf4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 518
      },
      {
        "segments": [
          {
            "segment_id": "dd90efbe-7a49-4b4d-b33e-7272d645e9e8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 132,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "120 © Ecma International 2011\r\n1. Let Target be the this value.\r\n2. If IsCallable(Target) is false, throw a TypeError exception.\r\n3. Let A be a new (possibly empty) internal list of all of the argument values provided after thisArg (arg1, arg2\r\netc), in order.\r\n4. Let F be a new native ECMAScript object .\r\n5. Set all the internal methods, except for [[Get]], of F as specified in 8.12.\r\n6. Set the [[Get]] internal property of F as specified in 15.3.5.4.\r\n7. Set the [[TargetFunction]] internal property of F to Target.\r\n8. Set the [[BoundThis]] internal property of F to the value of thisArg.\r\n9. Set the [[BoundArgs]] internal property of F to A.\r\n10. Set the [[Class]] internal property of F to \"Function\".\r\n11. Set the [[Prototype]] internal property of F to the standard built-in Function prototype object as specified in \r\n15.3.3.1.\r\n12. Set the [[Call]] internal property of F as described in 15.3.4.5.1.\r\n13. Set the [[Construct]] internal property of F as described in 15.3.4.5.2.\r\n14. Set the [[HasInstance]] internal property of F as described in 15.3.4.5.3.\r\n15. If the [[Class]] internal property of Target is \"Function\", then\r\na. Let L be the length property of Target minus the length of A.\r\nb. Set the length own property of F to either 0 or L, whichever is larger. \r\n16. Else set the length own property of F to 0.\r\n17. Set the attributes of the length own property of F to the values specified in 15.3.5.1.\r\n18. Set the [[Extensible]] internal property of F to true.\r\n19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\r\n20. Call the [[DefineOwnProperty]] internal method of F with arguments \"caller\", PropertyDescriptor \r\n{[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}, and false.\r\n21. Call the [[DefineOwnProperty]] internal method of F with arguments \"arguments\", PropertyDescriptor \r\n{[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}, and false.\r\n22. Return F.\r\nThe length property of the bind method is 1.\r\nNOTE Function objects created using Function.prototype.bind do not have a prototype property or the \r\n[[Code]], [[FormalParameters]], and [[Scope]] internal properties.\r\n15.3.4.5.1 [[Call]]\r\nWhen the [[Call]] internal method of a function object, F, which was created using the bind function is called \r\nwith a this value and a list of arguments ExtraArgs, the following steps are taken:\r\n1. Let boundArgs be the value of F’s [[BoundArgs]] internal property.\r\n2. Let boundThis be the value of F’s [[BoundThis]] internal property.\r\n3. Let target be the value of F’s [[TargetFunction]] internal property.\r\n4. Let args be a new list containing the same values as the list boundArgs in the same order followed by the \r\nsame values as the list ExtraArgs in the same order.\r\n5. Return the result of calling the [[Call]] internal method of target providing boundThis as the this value and \r\nproviding args as the arguments.\r\n15.3.4.5.2 [[Construct]]\r\nWhen the [[Construct]] internal method of a function object, F that was created using the bind function is called \r\nwith a list of arguments ExtraArgs, the following steps are taken:\r\n1. Let target be the value of F’s [[TargetFunction]] internal property.\r\n2. If target has no [[Construct]] internal method, a TypeError exception is thrown.\r\n3. Let boundArgs be the value of F’s [[BoundArgs]] internal property.\r\n4. Let args be a new list containing the same values as the list boundArgs in the same order followed by the \r\nsame values as the list ExtraArgs in the same order.\r\n5. Return the result of calling the [[Construct]] internal method of target providing args as the arguments.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/dd90efbe-7a49-4b4d-b33e-7272d645e9e8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a4f33b7dfdcdb822909a3ec38749a0d2a2e99bac4d87827d1a912b9ab8f93005",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 585
      },
      {
        "segments": [
          {
            "segment_id": "dd90efbe-7a49-4b4d-b33e-7272d645e9e8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 132,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "120 © Ecma International 2011\r\n1. Let Target be the this value.\r\n2. If IsCallable(Target) is false, throw a TypeError exception.\r\n3. Let A be a new (possibly empty) internal list of all of the argument values provided after thisArg (arg1, arg2\r\netc), in order.\r\n4. Let F be a new native ECMAScript object .\r\n5. Set all the internal methods, except for [[Get]], of F as specified in 8.12.\r\n6. Set the [[Get]] internal property of F as specified in 15.3.5.4.\r\n7. Set the [[TargetFunction]] internal property of F to Target.\r\n8. Set the [[BoundThis]] internal property of F to the value of thisArg.\r\n9. Set the [[BoundArgs]] internal property of F to A.\r\n10. Set the [[Class]] internal property of F to \"Function\".\r\n11. Set the [[Prototype]] internal property of F to the standard built-in Function prototype object as specified in \r\n15.3.3.1.\r\n12. Set the [[Call]] internal property of F as described in 15.3.4.5.1.\r\n13. Set the [[Construct]] internal property of F as described in 15.3.4.5.2.\r\n14. Set the [[HasInstance]] internal property of F as described in 15.3.4.5.3.\r\n15. If the [[Class]] internal property of Target is \"Function\", then\r\na. Let L be the length property of Target minus the length of A.\r\nb. Set the length own property of F to either 0 or L, whichever is larger. \r\n16. Else set the length own property of F to 0.\r\n17. Set the attributes of the length own property of F to the values specified in 15.3.5.1.\r\n18. Set the [[Extensible]] internal property of F to true.\r\n19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\r\n20. Call the [[DefineOwnProperty]] internal method of F with arguments \"caller\", PropertyDescriptor \r\n{[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}, and false.\r\n21. Call the [[DefineOwnProperty]] internal method of F with arguments \"arguments\", PropertyDescriptor \r\n{[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}, and false.\r\n22. Return F.\r\nThe length property of the bind method is 1.\r\nNOTE Function objects created using Function.prototype.bind do not have a prototype property or the \r\n[[Code]], [[FormalParameters]], and [[Scope]] internal properties.\r\n15.3.4.5.1 [[Call]]\r\nWhen the [[Call]] internal method of a function object, F, which was created using the bind function is called \r\nwith a this value and a list of arguments ExtraArgs, the following steps are taken:\r\n1. Let boundArgs be the value of F’s [[BoundArgs]] internal property.\r\n2. Let boundThis be the value of F’s [[BoundThis]] internal property.\r\n3. Let target be the value of F’s [[TargetFunction]] internal property.\r\n4. Let args be a new list containing the same values as the list boundArgs in the same order followed by the \r\nsame values as the list ExtraArgs in the same order.\r\n5. Return the result of calling the [[Call]] internal method of target providing boundThis as the this value and \r\nproviding args as the arguments.\r\n15.3.4.5.2 [[Construct]]\r\nWhen the [[Construct]] internal method of a function object, F that was created using the bind function is called \r\nwith a list of arguments ExtraArgs, the following steps are taken:\r\n1. Let target be the value of F’s [[TargetFunction]] internal property.\r\n2. If target has no [[Construct]] internal method, a TypeError exception is thrown.\r\n3. Let boundArgs be the value of F’s [[BoundArgs]] internal property.\r\n4. Let args be a new list containing the same values as the list boundArgs in the same order followed by the \r\nsame values as the list ExtraArgs in the same order.\r\n5. Return the result of calling the [[Construct]] internal method of target providing args as the arguments.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/dd90efbe-7a49-4b4d-b33e-7272d645e9e8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a4f33b7dfdcdb822909a3ec38749a0d2a2e99bac4d87827d1a912b9ab8f93005",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 585
      },
      {
        "segments": [
          {
            "segment_id": "9026efc0-e21d-4f12-9182-fa01aea7c067",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 133,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 121\r\n15.3.4.5.3 [[HasInstance]] (V)\r\nWhen the [[HasInstance]] internal method of a function object F, that was created using the bind function is \r\ncalled with argument V, the following steps are taken:\r\n1. Let target be the value of F’s [[TargetFunction]] internal property.\r\n2. If target has no [[HasInstance]] internal method, a TypeError exception is thrown.\r\n3. Return the result of calling the [[HasInstance]] internal method of target providing V as the argument.\r\n15.3.5 Properties of Function Instances\r\nIn addition to the required internal properties, every function instance has a [[Call]] internal property and in \r\nmost cases uses a different version of the [[Get]] internal property. Depending on how they are created (see \r\n8.6.2, 13.2, 15, and 15.3.4.5), function instances may have a [[HasInstance]] internal property, a [[Scope]] \r\ninternal property, a [[Construct]] internal property, a [[FormalParameters]] internal property, a [[Code]] internal \r\nproperty, a [[TargetFunction]] internal property, a [[BoundThis]] internal property, and a [[BoundArgs]] internal \r\nproperty.\r\nThe value of the [[Class]] internal property is \"Function\".\r\nFunction instances that correspond to strict mode functions (13.2) and function instances created using the \r\nFunction.prototype.bind method (15.3.4.5) have properties named ―caller‖ and ―arguments‖ that throw a \r\nTypeError exception. An ECMAScript implementation must not associate any implementation specific \r\nbehaviour with accesses of these properties from strict mode function code. \r\n15.3.5.1 length\r\nThe value of the length property is an integer that indicates the ―typical‖ number of arguments expected by \r\nthe function. However, the language permits the function to be invoked with some other number of arguments. \r\nThe behaviour of a function when invoked on a number of arguments other than the number specified by its \r\nlength property depends on the function. This property has the attributes { [[Writable]]: false, [[Enumerable]]: \r\nfalse, [[Configurable]]: false }.\r\n15.3.5.2 prototype\r\nThe value of the prototype property is used to initialise the [[Prototype]] internal property of a newly created \r\nobject before the Function object is invoked as a constructor for that newly created object. This property has \r\nthe attribute { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }.\r\nNOTE Function objects created using Function.prototype.bind do not have a prototype property.\r\n15.3.5.3 [[HasInstance]] (V)\r\nAssume F is a Function object.\r\nWhen the [[HasInstance]] internal method of F is called with value V, the following steps are taken:\r\n1. If V is not an object, return false.\r\n2. Let O be the result of calling the [[Get]] internal method of F with property name \"prototype\".\r\n3. If Type(O) is not Object, throw a TypeError exception.\r\n4. Repeat\r\na. Let V be the value of the [[Prototype]] internal property of V.\r\nb. If V is null, return false.\r\nc. If O and V refer to the same object, return true.\r\nNOTE Function objects created using Function.prototype.bind have a different implementation of \r\n[[HasInstance]] defined in 15.3.4.5.3.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/9026efc0-e21d-4f12-9182-fa01aea7c067.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3a9f51c87d26c490ca4ceb8aaa1769cdb36bfd922e310c0194c1bd2efc66bc28",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 463
      },
      {
        "segments": [
          {
            "segment_id": "9978b911-3612-4a94-a0a7-2e07911b09a6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 134,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "122 © Ecma International 2011\r\n15.3.5.4 [[Get]] (P)\r\nFunction objects use a variation of the [[Get]] internal method used for other native ECMAScript objects \r\n(8.12.3).\r\nAssume F is a Function object. When the [[Get]] internal method of F is called with property name P, the \r\nfollowing steps are taken:\r\n1. Let v be the result of calling the default [[Get]] internal method (8.12.3) on F passing P as the property name \r\nargument.\r\n2. If P is \"caller\" and v is a strict mode Function object, throw a TypeError exception. \r\n3. Return v.\r\nNOTE Function objects created using Function.prototype.bind use the default [[Get]] internal method.\r\n15.4 Array Objects\r\nArray objects give special treatment to a certain class of property names. A property name P (in the form of a \r\nString value) is an array index if and only if ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal to \r\n2\r\n32\r\n1. A property whose property name is an array index is also called an element. Every Array object has a \r\nlength property whose value is always a nonnegative integer less than 2\r\n32. The value of the length\r\nproperty is numerically greater than the name of every property whose name is an array index; whenever a \r\nproperty of an Array object is created or changed, other properties are adjusted as necessary to maintain this \r\ninvariant. Specifically, whenever a property is added whose name is an array index, the length property is \r\nchanged, if necessary, to be one more than the numeric value of that array index; and whenever the length\r\nproperty is changed, every property whose name is an array index whose value is not smaller than the new \r\nlength is automatically deleted. This constraint applies only to own properties of an Array object and is \r\nunaffected by length or array index properties that may be inherited from its prototypes.\r\nAn object, O, is said to be sparse if the following algorithm returns true:\r\n1. Let len be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n2. For each integer i in the range 0≤i<ToUint32(len)\r\na. Let elem be the result of calling the [[GetOwnProperty]] internal method of O with argument \r\nToString(i).\r\nb. If elem is undefined, return true.\r\n3. Return false.\r\n15.4.1 The Array Constructor Called as a Function\r\nWhen Array is called as a function rather than as a constructor, it creates and initialises a new Array object. \r\nThus the function call Array(…) is equivalent to the object creation expression new Array(…) with the \r\nsame arguments.\r\n15.4.1.1 Array ( [ item1 [ , item2 [ , … ] ] ] )\r\nWhen the Array function is called the following steps are taken:\r\n1. Create and return a new Array object exactly as if the standard built-in constructor Array was used in a \r\nnew expression with the same arguments (15.4.2).\r\n15.4.2 The Array Constructor\r\nWhen Array is called as part of a new expression, it is a constructor: it initialises the newly created object.\r\n15.4.2.1 new Array ( [ item0 [ , item1 [ , … ] ] ] )\r\nThis description applies if and only if the Array constructor is given no arguments or at least two arguments.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/9978b911-3612-4a94-a0a7-2e07911b09a6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1b0f046ced9fed1a0fb2c64f203c2168d119cf3801bf4aa9f783b345a1d7600d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 536
      },
      {
        "segments": [
          {
            "segment_id": "9978b911-3612-4a94-a0a7-2e07911b09a6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 134,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "122 © Ecma International 2011\r\n15.3.5.4 [[Get]] (P)\r\nFunction objects use a variation of the [[Get]] internal method used for other native ECMAScript objects \r\n(8.12.3).\r\nAssume F is a Function object. When the [[Get]] internal method of F is called with property name P, the \r\nfollowing steps are taken:\r\n1. Let v be the result of calling the default [[Get]] internal method (8.12.3) on F passing P as the property name \r\nargument.\r\n2. If P is \"caller\" and v is a strict mode Function object, throw a TypeError exception. \r\n3. Return v.\r\nNOTE Function objects created using Function.prototype.bind use the default [[Get]] internal method.\r\n15.4 Array Objects\r\nArray objects give special treatment to a certain class of property names. A property name P (in the form of a \r\nString value) is an array index if and only if ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal to \r\n2\r\n32\r\n1. A property whose property name is an array index is also called an element. Every Array object has a \r\nlength property whose value is always a nonnegative integer less than 2\r\n32. The value of the length\r\nproperty is numerically greater than the name of every property whose name is an array index; whenever a \r\nproperty of an Array object is created or changed, other properties are adjusted as necessary to maintain this \r\ninvariant. Specifically, whenever a property is added whose name is an array index, the length property is \r\nchanged, if necessary, to be one more than the numeric value of that array index; and whenever the length\r\nproperty is changed, every property whose name is an array index whose value is not smaller than the new \r\nlength is automatically deleted. This constraint applies only to own properties of an Array object and is \r\nunaffected by length or array index properties that may be inherited from its prototypes.\r\nAn object, O, is said to be sparse if the following algorithm returns true:\r\n1. Let len be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n2. For each integer i in the range 0≤i<ToUint32(len)\r\na. Let elem be the result of calling the [[GetOwnProperty]] internal method of O with argument \r\nToString(i).\r\nb. If elem is undefined, return true.\r\n3. Return false.\r\n15.4.1 The Array Constructor Called as a Function\r\nWhen Array is called as a function rather than as a constructor, it creates and initialises a new Array object. \r\nThus the function call Array(…) is equivalent to the object creation expression new Array(…) with the \r\nsame arguments.\r\n15.4.1.1 Array ( [ item1 [ , item2 [ , … ] ] ] )\r\nWhen the Array function is called the following steps are taken:\r\n1. Create and return a new Array object exactly as if the standard built-in constructor Array was used in a \r\nnew expression with the same arguments (15.4.2).\r\n15.4.2 The Array Constructor\r\nWhen Array is called as part of a new expression, it is a constructor: it initialises the newly created object.\r\n15.4.2.1 new Array ( [ item0 [ , item1 [ , … ] ] ] )\r\nThis description applies if and only if the Array constructor is given no arguments or at least two arguments.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/9978b911-3612-4a94-a0a7-2e07911b09a6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1b0f046ced9fed1a0fb2c64f203c2168d119cf3801bf4aa9f783b345a1d7600d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 536
      },
      {
        "segments": [
          {
            "segment_id": "e05c616e-feaa-48bc-b360-9b17f29009fb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 135,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 123\r\nThe [[Prototype]] internal property of the newly constructed object is set to the original Array prototype object, \r\nthe one that is the initial value of Array.prototype (15.4.3.1).\r\nThe [[Class]] internal property of the newly constructed object is set to \"Array\".\r\nThe [[Extensible]] internal property of the newly constructed object is set to true.\r\nThe length property of the newly constructed object is set to the number of arguments.\r\nThe 0 property of the newly constructed object is set to item0 (if supplied); the 1 property of the newly \r\nconstructed object is set to item1 (if supplied); and, in general, for as many arguments as there are, the k\r\nproperty of the newly constructed object is set to argument k, where the first argument is considered to be \r\nargument number 0. These properties all have the attributes {[[Writable]]: true, [[Enumerable]]: true, \r\n[[Configurable]]: true}.\r\n15.4.2.2 new Array (len)\r\nThe [[Prototype]] internal property of the newly constructed object is set to the original Array prototype object, \r\nthe one that is the initial value of Array.prototype (15.4.3.1). The [[Class]] internal property of the newly \r\nconstructed object is set to \"Array\". The [[Extensible]] internal property of the newly constructed object is set \r\nto true.\r\nIf the argument len is a Number and ToUint32(len) is equal to len, then the length property of the newly \r\nconstructed object is set to ToUint32(len). If the argument len is a Number and ToUint32(len) is not equal to len, \r\na RangeError exception is thrown.\r\nIf the argument len is not a Number, then the length property of the newly constructed object is set to 1 and \r\nthe 0 property of the newly constructed object is set to len with attributes {[[Writable]]: true, [[Enumerable]]: \r\ntrue, [[Configurable]]: true}.\r\n15.4.3 Properties of the Array Constructor\r\nThe value of the [[Prototype]] internal property of the Array constructor is the Function prototype object \r\n(15.3.4).\r\nBesides the internal properties and the length property (whose value is 1), the Array constructor has the \r\nfollowing properties:\r\n15.4.3.1 Array.prototype\r\nThe initial value of Array.prototype is the Array prototype object (15.4.4).\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.4.3.2 Array.isArray ( arg )\r\nThe isArray function takes one argument arg, and returns the Boolean value true if the argument is an object \r\nwhose class internal property is \"Array\"; otherwise it returns false. The following steps are taken:\r\n1. If Type(arg) is not Object, return false.\r\n2. If the value of the [[Class]] internal property of arg is \"Array\", then return true.\r\n3. Return false.\r\n15.4.4 Properties of the Array Prototype Object\r\nThe value of the [[Prototype]] internal property of the Array prototype object is the standard built-in Object \r\nprototype object (15.2.4).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/e05c616e-feaa-48bc-b360-9b17f29009fb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9a92cf4bf6dad00573239989397a54e44469a4536d2eb0d3e9e906dcb1369378",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 452
      },
      {
        "segments": [
          {
            "segment_id": "8c57987c-ae7a-463f-a46b-831a3f8f03c2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 136,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "124 © Ecma International 2011\r\nThe Array prototype object is itself an array; its [[Class]] is \"Array\", and it has a length property (whose \r\ninitial value is +0) and the special [[DefineOwnProperty]] internal method described in 15.4.5.1.\r\nIn following descriptions of functions that are properties of the Array prototype object, the phrase ―this object‖ \r\nrefers to the object that is the this value for the invocation of the function. It is permitted for the this to be an \r\nobject for which the value of the [[Class]] internal property is not \"Array\".\r\nNOTE The Array prototype object does not have a valueOf property of its own; however, it inherits the valueOf\r\nproperty from the standard built-in Object prototype Object.\r\n15.4.4.1 Array.prototype.constructor\r\nThe initial value of Array.prototype.constructor is the standard built-in Array constructor.\r\n15.4.4.2 Array.prototype.toString ( )\r\nWhen the toString method is called, the following steps are taken:\r\n1. Let array be the result of calling ToObject on the this value.\r\n2. Let func be the result of calling the [[Get]] internal method of array with argument \"join\".\r\n3. If IsCallable(func) is false, then let func be the standard built-in method Object.prototype.toString (15.2.4.2).\r\n4. Return the result of calling the [[Call]] internal method of func providing array as the this value and an \r\nempty arguments list.\r\nNOTE The toString function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the toString function can be \r\napplied successfully to a host object is implementation-dependent.\r\n15.4.4.3 Array.prototype.toLocaleString ( )\r\nThe elements of the array are converted to Strings using their toLocaleString methods, and these Strings \r\nare then concatenated, separated by occurrences of a separator String that has been derived in an \r\nimplementation-defined locale-specific way. The result of calling this function is intended to be analogous to \r\nthe result of toString, except that the result of this function is intended to be locale-specific.\r\nThe result is calculated as follows:\r\n1. Let array be the result of calling ToObject passing the this value as the argument.\r\n2. Let arrayLen be the result of calling the [[Get]] internal method of array with argument \"length\".\r\n3. Let len be ToUint32(arrayLen).\r\n4. Let separator be the String value for the list-separator String appropriate for the host environment‘s current \r\nlocale (this is derived in an implementation-defined way).\r\n5. If len is zero, return the empty String.\r\n6. Let firstElement be the result of calling the [[Get]] internal method of array with argument \"0\".\r\n7. If firstElement is undefined or null, then\r\na. Let R be the empty String.\r\n8. Else \r\na. Let elementObj be ToObject(firstElement).\r\nb. Let func be the result of calling the [[Get]] internal method of elementObj with argument \r\n\"toLocaleString\".\r\nc. If IsCallable(func) is false, throw a TypeError exception.\r\nd. Let R be the result of calling the [[Call]] internal method of func providing elementObj as the this\r\nvalue and an empty arguments list. \r\n9. Let k be 1.\r\n10. Repeat, while k < len\r\na. Let S be a String value produced by concatenating R and separator.\r\nb. Let nextElement be the result of calling the [[Get]] internal method of array with argument \r\nToString(k).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/8c57987c-ae7a-463f-a46b-831a3f8f03c2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0a96a4b8765f4e6ffd13d21034744c563483eeb07c4f017322ba425a158355e8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 538
      },
      {
        "segments": [
          {
            "segment_id": "8c57987c-ae7a-463f-a46b-831a3f8f03c2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 136,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "124 © Ecma International 2011\r\nThe Array prototype object is itself an array; its [[Class]] is \"Array\", and it has a length property (whose \r\ninitial value is +0) and the special [[DefineOwnProperty]] internal method described in 15.4.5.1.\r\nIn following descriptions of functions that are properties of the Array prototype object, the phrase ―this object‖ \r\nrefers to the object that is the this value for the invocation of the function. It is permitted for the this to be an \r\nobject for which the value of the [[Class]] internal property is not \"Array\".\r\nNOTE The Array prototype object does not have a valueOf property of its own; however, it inherits the valueOf\r\nproperty from the standard built-in Object prototype Object.\r\n15.4.4.1 Array.prototype.constructor\r\nThe initial value of Array.prototype.constructor is the standard built-in Array constructor.\r\n15.4.4.2 Array.prototype.toString ( )\r\nWhen the toString method is called, the following steps are taken:\r\n1. Let array be the result of calling ToObject on the this value.\r\n2. Let func be the result of calling the [[Get]] internal method of array with argument \"join\".\r\n3. If IsCallable(func) is false, then let func be the standard built-in method Object.prototype.toString (15.2.4.2).\r\n4. Return the result of calling the [[Call]] internal method of func providing array as the this value and an \r\nempty arguments list.\r\nNOTE The toString function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the toString function can be \r\napplied successfully to a host object is implementation-dependent.\r\n15.4.4.3 Array.prototype.toLocaleString ( )\r\nThe elements of the array are converted to Strings using their toLocaleString methods, and these Strings \r\nare then concatenated, separated by occurrences of a separator String that has been derived in an \r\nimplementation-defined locale-specific way. The result of calling this function is intended to be analogous to \r\nthe result of toString, except that the result of this function is intended to be locale-specific.\r\nThe result is calculated as follows:\r\n1. Let array be the result of calling ToObject passing the this value as the argument.\r\n2. Let arrayLen be the result of calling the [[Get]] internal method of array with argument \"length\".\r\n3. Let len be ToUint32(arrayLen).\r\n4. Let separator be the String value for the list-separator String appropriate for the host environment‘s current \r\nlocale (this is derived in an implementation-defined way).\r\n5. If len is zero, return the empty String.\r\n6. Let firstElement be the result of calling the [[Get]] internal method of array with argument \"0\".\r\n7. If firstElement is undefined or null, then\r\na. Let R be the empty String.\r\n8. Else \r\na. Let elementObj be ToObject(firstElement).\r\nb. Let func be the result of calling the [[Get]] internal method of elementObj with argument \r\n\"toLocaleString\".\r\nc. If IsCallable(func) is false, throw a TypeError exception.\r\nd. Let R be the result of calling the [[Call]] internal method of func providing elementObj as the this\r\nvalue and an empty arguments list. \r\n9. Let k be 1.\r\n10. Repeat, while k < len\r\na. Let S be a String value produced by concatenating R and separator.\r\nb. Let nextElement be the result of calling the [[Get]] internal method of array with argument \r\nToString(k).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/8c57987c-ae7a-463f-a46b-831a3f8f03c2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0a96a4b8765f4e6ffd13d21034744c563483eeb07c4f017322ba425a158355e8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 538
      },
      {
        "segments": [
          {
            "segment_id": "6abbe44b-9b86-4921-a606-22d02f018cda",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 137,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 125\r\nc. If nextElement is undefined or null, then\r\ni. Let R be the empty String.\r\nd. Else \r\ni. Let elementObj be ToObject(nextElement).\r\nii. Let func be the result of calling the [[Get]] internal method of elementObj with argument \r\n\"toLocaleString\".\r\niii. If IsCallable(func) is false, throw a TypeError exception.\r\niv. Let R be the result of calling the [[Call]] internal method of func providing elementObj as \r\nthe this value and an empty arguments list. \r\ne. Let R be a String value produced by concatenating S and R.\r\nf. Increase k by 1.\r\n11. Return R.\r\nNOTE 1 The first parameter to this function is likely to be used in a future version of this standard; it is recommended \r\nthat implementations do not use this parameter position for anything else.\r\nNOTE 2 The toLocaleString function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the toLocaleString function can \r\nbe applied successfully to a host object is implementation-dependent.\r\n15.4.4.4 Array.prototype.concat ( [ item1 [ , item2 [ , … ] ] ] )\r\nWhen the concat method is called with zero or more arguments item1, item2, etc., it returns an array \r\ncontaining the array elements of the object followed by the array elements of each argument in order.\r\nThe following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let A be a new array created as if by the expression new Array() where Array is the standard built-in \r\nconstructor with that name.\r\n3. Let n be 0.\r\n4. Let items be an internal List whose first element is O and whose subsequent elements are, in left to right \r\norder, the arguments that were passed to this function invocation.\r\n5. Repeat, while items is not empty\r\na. Remove the first element from items and let E be the value of the element.\r\nb. If the value of the [[Class]] internal property of E is \"Array\", then\r\ni. Let k be 0.\r\nii. Let len be the result of calling the [[Get]] internal method of E with argument \"length\".\r\niii. Repeat, while k < len\r\n1. Let P be ToString(k).\r\n2. Let exists be the result of calling the [[HasProperty]] internal method of E with P.\r\n3. If exists is true, then\r\na Let subElement be the result of calling the [[Get]] internal method of E\r\nwith argument P.\r\nb Call the [[DefineOwnProperty]] internal method of A with arguments \r\nToString(n), Property Descriptor {[[Value]]: subElement, [[Writable]]: \r\ntrue, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n4. Increase n by 1.\r\n5. Increase k by 1.\r\nc. Else, E is not an Array\r\ni. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(n), Property \r\nDescriptor {[[Value]]: E, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, \r\nand false.\r\nii. Increase n by 1.\r\n6. Return A.\r\nThe length property of the concat method is 1.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/6abbe44b-9b86-4921-a606-22d02f018cda.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=53ca5f8181e2ed269f587599ba01a652f6853ec1db8de622147e46c7926e7117",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 503
      },
      {
        "segments": [
          {
            "segment_id": "45f84d21-d8f6-49ac-9165-1b713ffe335f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 138,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "126 © Ecma International 2011\r\nNOTE The concat function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the concat function can be applied \r\nsuccessfully to a host object is implementation-dependent.\r\n15.4.4.5 Array.prototype.join (separator)\r\nThe elements of the array are converted to Strings, and these Strings are then concatenated, separated by \r\noccurrences of the separator. If no separator is provided, a single comma is used as the separator.\r\nThe join method takes one argument, separator, and performs the following steps:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n3. Let len be ToUint32(lenVal).\r\n4. If separator is undefined, let separator be the single-character String \",\".\r\n5. Let sep be ToString(separator).\r\n6. If len is zero, return the empty String.\r\n7. Let element0 be the result of calling the [[Get]] internal method of O with argument \"0\".\r\n8. If element0 is undefined or null, let R be the empty String; otherwise, Let R be ToString(element0).\r\n9. Let k be 1.\r\n10. Repeat, while k < len\r\na. Let S be the String value produced by concatenating R and sep.\r\nb. Let element be the result of calling the [[Get]] internal method of O with argument ToString(k).\r\nc. If element is undefined or null, Let next be the empty String; otherwise, let next be \r\nToString(element).\r\nd. Let R be a String value produced by concatenating S and next.\r\ne. Increase k by 1.\r\n11. Return R.\r\nThe length property of the join method is 1.\r\nNOTE The join function is intentionally generic; it does not require that its this value be an Array object. Therefore, \r\nit can be transferred to other kinds of objects for use as a method. Whether the join function can be applied successfully \r\nto a host object is implementation-dependent.\r\n15.4.4.6 Array.prototype.pop ( )\r\nThe last element of the array is removed from the array and returned.\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n3. Let len be ToUint32(lenVal).\r\n4. If len is zero, \r\na. Call the [[Put]] internal method of O with arguments \"length\", 0, and true.\r\nb. Return undefined.\r\n5. Else, len > 0\r\na. Let indx be ToString(len–1).\r\nb. Let element be the result of calling the [[Get]] internal method of O with argument indx.\r\nc. Call the [[Delete]] internal method of O with arguments indx and true.\r\nd. Call the [[Put]] internal method of O with arguments \"length\", indx, and true.\r\ne. Return element.\r\nNOTE The pop function is intentionally generic; it does not require that its this value be an Array object. Therefore it \r\ncan be transferred to other kinds of objects for use as a method. Whether the pop function can be applied successfully to \r\na host object is implementation-dependent.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/45f84d21-d8f6-49ac-9165-1b713ffe335f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=286b7b6714281b813f89aa51bfea7a43661a6b8c204d4acfb6c5c8ab81976027",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 520
      },
      {
        "segments": [
          {
            "segment_id": "45f84d21-d8f6-49ac-9165-1b713ffe335f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 138,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "126 © Ecma International 2011\r\nNOTE The concat function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the concat function can be applied \r\nsuccessfully to a host object is implementation-dependent.\r\n15.4.4.5 Array.prototype.join (separator)\r\nThe elements of the array are converted to Strings, and these Strings are then concatenated, separated by \r\noccurrences of the separator. If no separator is provided, a single comma is used as the separator.\r\nThe join method takes one argument, separator, and performs the following steps:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n3. Let len be ToUint32(lenVal).\r\n4. If separator is undefined, let separator be the single-character String \",\".\r\n5. Let sep be ToString(separator).\r\n6. If len is zero, return the empty String.\r\n7. Let element0 be the result of calling the [[Get]] internal method of O with argument \"0\".\r\n8. If element0 is undefined or null, let R be the empty String; otherwise, Let R be ToString(element0).\r\n9. Let k be 1.\r\n10. Repeat, while k < len\r\na. Let S be the String value produced by concatenating R and sep.\r\nb. Let element be the result of calling the [[Get]] internal method of O with argument ToString(k).\r\nc. If element is undefined or null, Let next be the empty String; otherwise, let next be \r\nToString(element).\r\nd. Let R be a String value produced by concatenating S and next.\r\ne. Increase k by 1.\r\n11. Return R.\r\nThe length property of the join method is 1.\r\nNOTE The join function is intentionally generic; it does not require that its this value be an Array object. Therefore, \r\nit can be transferred to other kinds of objects for use as a method. Whether the join function can be applied successfully \r\nto a host object is implementation-dependent.\r\n15.4.4.6 Array.prototype.pop ( )\r\nThe last element of the array is removed from the array and returned.\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n3. Let len be ToUint32(lenVal).\r\n4. If len is zero, \r\na. Call the [[Put]] internal method of O with arguments \"length\", 0, and true.\r\nb. Return undefined.\r\n5. Else, len > 0\r\na. Let indx be ToString(len–1).\r\nb. Let element be the result of calling the [[Get]] internal method of O with argument indx.\r\nc. Call the [[Delete]] internal method of O with arguments indx and true.\r\nd. Call the [[Put]] internal method of O with arguments \"length\", indx, and true.\r\ne. Return element.\r\nNOTE The pop function is intentionally generic; it does not require that its this value be an Array object. Therefore it \r\ncan be transferred to other kinds of objects for use as a method. Whether the pop function can be applied successfully to \r\na host object is implementation-dependent.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/45f84d21-d8f6-49ac-9165-1b713ffe335f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=286b7b6714281b813f89aa51bfea7a43661a6b8c204d4acfb6c5c8ab81976027",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 520
      },
      {
        "segments": [
          {
            "segment_id": "adfe0121-84b4-49ca-b7cc-e84bddcc3c47",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 139,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 127\r\n15.4.4.7 Array.prototype.push ( [ item1 [ , item2 [ , … ] ] ] )\r\nThe arguments are appended to the end of the array, in the order in which they appear. The new length of the \r\narray is returned as the result of the call.\r\nWhen the push method is called with zero or more arguments item1, item2, etc., the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n3. Let n be ToUint32(lenVal).\r\n4. Let items be an internal List whose elements are, in left to right order, the arguments that were passed to this \r\nfunction invocation.\r\n5. Repeat, while items is not empty\r\na. Remove the first element from items and let E be the value of the element.\r\nb. Call the [[Put]] internal method of O with arguments ToString(n), E, and true.\r\nc. Increase n by 1.\r\n6. Call the [[Put]] internal method of O with arguments \"length\", n, and true.\r\n7. Return n.\r\nThe length property of the push method is 1.\r\nNOTE The push function is intentionally generic; it does not require that its this value be an Array object. Therefore \r\nit can be transferred to other kinds of objects for use as a method. Whether the push function can be applied successfully \r\nto a host object is implementation-dependent.\r\n15.4.4.8 Array.prototype.reverse ( )\r\nThe elements of the array are rearranged so as to reverse their order. The object is returned as the result of \r\nthe call.\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n3. Let len be ToUint32(lenVal).\r\n4. Let middle be floor(len/2).\r\n5. Let lower be 0.\r\n6. Repeat, while lower  middle\r\na. Let upper be len lower 1.\r\nb. Let upperP be ToString(upper).\r\nc. Let lowerP be ToString(lower).\r\nd. Let lowerValue be the result of calling the [[Get]] internal method of O with argument lowerP.\r\ne. Let upperValue be the result of calling the [[Get]] internal method of O with argument upperP .\r\nf. Let lowerExists be the result of calling the [[HasProperty]] internal method of O with argument \r\nlowerP.\r\ng. Let upperExists be the result of calling the [[HasProperty]] internal method of O with argument \r\nupperP.\r\nh. If lowerExists is true and upperExists is true, then\r\ni. Call the [[Put]] internal method of O with arguments lowerP, upperValue, and true .\r\nii. Call the [[Put]] internal method of O with arguments upperP, lowerValue, and true .\r\ni. Else if lowerExists is false and upperExists is true, then\r\ni. Call the [[Put]] internal method of O with arguments lowerP, upperValue, and true .\r\nii. Call the [[Delete]] internal method of O, with arguments upperP and true.\r\nj. Else if lowerExists is true and upperExists is false, then\r\ni. Call the [[Delete]] internal method of O, with arguments lowerP and true .\r\nii. Call the [[Put]] internal method of O with arguments upperP, lowerValue, and true .\r\nk. Else, both lowerExists and upperExists are false\r\ni. No action is required.\r\nl. Increase lower by 1.\r\n7. Return O .",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/adfe0121-84b4-49ca-b7cc-e84bddcc3c47.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=772222cfe63f028df75701d8f0dc565a55cb2897ac9e7749d54e056c4979ce31",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 556
      },
      {
        "segments": [
          {
            "segment_id": "adfe0121-84b4-49ca-b7cc-e84bddcc3c47",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 139,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 127\r\n15.4.4.7 Array.prototype.push ( [ item1 [ , item2 [ , … ] ] ] )\r\nThe arguments are appended to the end of the array, in the order in which they appear. The new length of the \r\narray is returned as the result of the call.\r\nWhen the push method is called with zero or more arguments item1, item2, etc., the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n3. Let n be ToUint32(lenVal).\r\n4. Let items be an internal List whose elements are, in left to right order, the arguments that were passed to this \r\nfunction invocation.\r\n5. Repeat, while items is not empty\r\na. Remove the first element from items and let E be the value of the element.\r\nb. Call the [[Put]] internal method of O with arguments ToString(n), E, and true.\r\nc. Increase n by 1.\r\n6. Call the [[Put]] internal method of O with arguments \"length\", n, and true.\r\n7. Return n.\r\nThe length property of the push method is 1.\r\nNOTE The push function is intentionally generic; it does not require that its this value be an Array object. Therefore \r\nit can be transferred to other kinds of objects for use as a method. Whether the push function can be applied successfully \r\nto a host object is implementation-dependent.\r\n15.4.4.8 Array.prototype.reverse ( )\r\nThe elements of the array are rearranged so as to reverse their order. The object is returned as the result of \r\nthe call.\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n3. Let len be ToUint32(lenVal).\r\n4. Let middle be floor(len/2).\r\n5. Let lower be 0.\r\n6. Repeat, while lower  middle\r\na. Let upper be len lower 1.\r\nb. Let upperP be ToString(upper).\r\nc. Let lowerP be ToString(lower).\r\nd. Let lowerValue be the result of calling the [[Get]] internal method of O with argument lowerP.\r\ne. Let upperValue be the result of calling the [[Get]] internal method of O with argument upperP .\r\nf. Let lowerExists be the result of calling the [[HasProperty]] internal method of O with argument \r\nlowerP.\r\ng. Let upperExists be the result of calling the [[HasProperty]] internal method of O with argument \r\nupperP.\r\nh. If lowerExists is true and upperExists is true, then\r\ni. Call the [[Put]] internal method of O with arguments lowerP, upperValue, and true .\r\nii. Call the [[Put]] internal method of O with arguments upperP, lowerValue, and true .\r\ni. Else if lowerExists is false and upperExists is true, then\r\ni. Call the [[Put]] internal method of O with arguments lowerP, upperValue, and true .\r\nii. Call the [[Delete]] internal method of O, with arguments upperP and true.\r\nj. Else if lowerExists is true and upperExists is false, then\r\ni. Call the [[Delete]] internal method of O, with arguments lowerP and true .\r\nii. Call the [[Put]] internal method of O with arguments upperP, lowerValue, and true .\r\nk. Else, both lowerExists and upperExists are false\r\ni. No action is required.\r\nl. Increase lower by 1.\r\n7. Return O .",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/adfe0121-84b4-49ca-b7cc-e84bddcc3c47.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=772222cfe63f028df75701d8f0dc565a55cb2897ac9e7749d54e056c4979ce31",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 556
      },
      {
        "segments": [
          {
            "segment_id": "0fa6ba43-828a-4bc8-9479-a6d5d207c0e4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 140,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "128 © Ecma International 2011\r\nNOTE The reverse function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method. Whether the reverse function can be \r\napplied successfully to a host object is implementation-dependent.\r\n15.4.4.9 Array.prototype.shift ( )\r\nThe first element of the array is removed from the array and returned.\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n3. Let len be ToUint32(lenVal).\r\n4. If len is zero, then\r\na. Call the [[Put]] internal method of O with arguments \"length\", 0, and true.\r\nb. Return undefined.\r\n5. Let first be the result of calling the [[Get]] internal method of O with argument \"0\".\r\n6. Let k be 1.\r\n7. Repeat, while k < len\r\na. Let from be ToString(k).\r\nb. Let to be ToString(k–1).\r\nc. Let fromPresent be the result of calling the [[HasProperty]] internal method of O with argument \r\nfrom.\r\nd. If fromPresent is true, then\r\ni. Let fromVal be the result of calling the [[Get]] internal method of O with argument from.\r\nii. Call the [[Put]] internal method of O with arguments to, fromVal, and true.\r\ne. Else, fromPresent is false\r\ni. Call the [[Delete]] internal method of O with arguments to and true.\r\nf. Increase k by 1.\r\n8. Call the [[Delete]] internal method of O with arguments ToString(len–1) and true.\r\n9. Call the [[Put]] internal method of O with arguments \"length\", (len–1) , and true.\r\n10. Return first.\r\nNOTE The shift function is intentionally generic; it does not require that its this value be an Array object. Therefore \r\nit can be transferred to other kinds of objects for use as a method. Whether the shift function can be applied \r\nsuccessfully to a host object is implementation-dependent.\r\n15.4.4.10 Array.prototype.slice (start, end)\r\nThe slice method takes two arguments, start and end, and returns an array containing the elements of the \r\narray from element start up to, but not including, element end (or through the end of the array if end is \r\nundefined). If start is negative, it is treated as length+start where length is the length of the array. If end is \r\nnegative, it is treated as length+end where length is the length of the array. The following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let A be a new array created as if by the expression new Array() where Array is the standard built-in \r\nconstructor with that name.\r\n3. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n4. Let len be ToUint32(lenVal).\r\n5. Let relativeStart be ToInteger(start).\r\n6. If relativeStart is negative, let k be max((len + relativeStart),0); else let k be min(relativeStart, len).\r\n7. If end is undefined, let relativeEnd be len; else let relativeEnd be ToInteger(end).\r\n8. If relativeEnd is negative, let final be max((len + relativeEnd),0); else let final be min(relativeEnd, len).\r\n9. Let n be 0.\r\n10. Repeat, while k < final\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0fa6ba43-828a-4bc8-9479-a6d5d207c0e4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c63a03aaf4102b0c18e893be1a3ea3eb0d6d3c643ff4f38c03dbd1aa6960edfc",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 580
      },
      {
        "segments": [
          {
            "segment_id": "0fa6ba43-828a-4bc8-9479-a6d5d207c0e4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 140,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "128 © Ecma International 2011\r\nNOTE The reverse function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method. Whether the reverse function can be \r\napplied successfully to a host object is implementation-dependent.\r\n15.4.4.9 Array.prototype.shift ( )\r\nThe first element of the array is removed from the array and returned.\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n3. Let len be ToUint32(lenVal).\r\n4. If len is zero, then\r\na. Call the [[Put]] internal method of O with arguments \"length\", 0, and true.\r\nb. Return undefined.\r\n5. Let first be the result of calling the [[Get]] internal method of O with argument \"0\".\r\n6. Let k be 1.\r\n7. Repeat, while k < len\r\na. Let from be ToString(k).\r\nb. Let to be ToString(k–1).\r\nc. Let fromPresent be the result of calling the [[HasProperty]] internal method of O with argument \r\nfrom.\r\nd. If fromPresent is true, then\r\ni. Let fromVal be the result of calling the [[Get]] internal method of O with argument from.\r\nii. Call the [[Put]] internal method of O with arguments to, fromVal, and true.\r\ne. Else, fromPresent is false\r\ni. Call the [[Delete]] internal method of O with arguments to and true.\r\nf. Increase k by 1.\r\n8. Call the [[Delete]] internal method of O with arguments ToString(len–1) and true.\r\n9. Call the [[Put]] internal method of O with arguments \"length\", (len–1) , and true.\r\n10. Return first.\r\nNOTE The shift function is intentionally generic; it does not require that its this value be an Array object. Therefore \r\nit can be transferred to other kinds of objects for use as a method. Whether the shift function can be applied \r\nsuccessfully to a host object is implementation-dependent.\r\n15.4.4.10 Array.prototype.slice (start, end)\r\nThe slice method takes two arguments, start and end, and returns an array containing the elements of the \r\narray from element start up to, but not including, element end (or through the end of the array if end is \r\nundefined). If start is negative, it is treated as length+start where length is the length of the array. If end is \r\nnegative, it is treated as length+end where length is the length of the array. The following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let A be a new array created as if by the expression new Array() where Array is the standard built-in \r\nconstructor with that name.\r\n3. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n4. Let len be ToUint32(lenVal).\r\n5. Let relativeStart be ToInteger(start).\r\n6. If relativeStart is negative, let k be max((len + relativeStart),0); else let k be min(relativeStart, len).\r\n7. If end is undefined, let relativeEnd be len; else let relativeEnd be ToInteger(end).\r\n8. If relativeEnd is negative, let final be max((len + relativeEnd),0); else let final be min(relativeEnd, len).\r\n9. Let n be 0.\r\n10. Repeat, while k < final\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0fa6ba43-828a-4bc8-9479-a6d5d207c0e4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c63a03aaf4102b0c18e893be1a3ea3eb0d6d3c643ff4f38c03dbd1aa6960edfc",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 580
      },
      {
        "segments": [
          {
            "segment_id": "94873214-e508-4eb9-99b6-92fd3ecb9e89",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 141,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 129\r\nii. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(n), Property \r\nDescriptor {[[Value]]: kValue, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: \r\ntrue}, and false.\r\nd. Increase k by 1.\r\ne. Increase n by 1.\r\n11. Return A.\r\nThe length property of the slice method is 2.\r\nNOTE The slice function is intentionally generic; it does not require that its this value be an Array object. Therefore \r\nit can be transferred to other kinds of objects for use as a method. Whether the slice function can be applied \r\nsuccessfully to a host object is implementation-dependent.\r\n15.4.4.11 Array.prototype.sort (comparefn)\r\nThe elements of this array are sorted. The sort is not necessarily stable (that is, elements that compare equal \r\ndo not necessarily remain in their original order). If comparefn is not undefined, it should be a function that \r\naccepts two arguments x and y and returns a negative value if x < y, zero if x = y, or a positive value if x > y.\r\nLet obj be the result of calling ToObject passing the this value as the argument.\r\nLet len be the result of applying Uint32 to the result of calling the [[Get]] internal method of obj with argument \r\n\"length\".\r\nIf comparefn is not undefined and is not a consistent comparison function for the elements of this array (see \r\nbelow), the behaviour of sort is implementation-defined.\r\nLet proto be the value of the [[Prototype]] internal property of obj. If proto is not null and there exists an integer \r\nj such that all of the conditions below are satisfied then the behaviour of sort is implementation-defined:\r\n obj is sparse (15.4)\r\n 0  j < len\r\n The result of calling the [[HasProperty]] internal method of proto with argument ToString(j) is true.\r\nThe behaviour of sort is also implementation defined if obj is sparse and any of the following conditions are \r\ntrue:\r\n The [[Extensible]] internal property of obj is false.\r\n Any array index property of obj whose name is a nonnegative integer less than len is a data property \r\nwhose [[Configurable]] attribute is false.\r\nThe behaviour of sort is also implementation defined if any array index property of obj whose name is a \r\nnonnegative integer less than len is an accessor property or is a data property whose [[Writable]] attribute is \r\nfalse.\r\nOtherwise, the following steps are taken.\r\n1. Perform an implementation-dependent sequence of calls to the [[Get]] , [[Put]], and [[Delete]] internal \r\nmethods of obj and to SortCompare (described below), where the first argument for each call to [[Get]], \r\n[[Put]], or [[Delete]] is a nonnegative integer less than len and where the arguments for calls to SortCompare \r\nare results of previous calls to the [[Get]] internal method. The throw argument to the [[Put]] and [[Delete]] \r\ninternal methods will be the value true. If obj is not sparse then [[Delete]] must not be called.\r\n2. Return obj.\r\nThe returned object must have the following two properties.\r\n There must be some mathematical permutation  of the nonnegative integers less than len, such that \r\nfor every nonnegative integer j less than len, if property old[j] existed, then new[(j)] is exactly the \r\nsame value as old[j],. But if property old[j] did not exist, then new[(j)] does not exist.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/94873214-e508-4eb9-99b6-92fd3ecb9e89.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f93c90033d8b55b19e76f91fd6ca2eaee2511c331e7e1d696a548db323e25f96",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 542
      },
      {
        "segments": [
          {
            "segment_id": "94873214-e508-4eb9-99b6-92fd3ecb9e89",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 141,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 129\r\nii. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(n), Property \r\nDescriptor {[[Value]]: kValue, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: \r\ntrue}, and false.\r\nd. Increase k by 1.\r\ne. Increase n by 1.\r\n11. Return A.\r\nThe length property of the slice method is 2.\r\nNOTE The slice function is intentionally generic; it does not require that its this value be an Array object. Therefore \r\nit can be transferred to other kinds of objects for use as a method. Whether the slice function can be applied \r\nsuccessfully to a host object is implementation-dependent.\r\n15.4.4.11 Array.prototype.sort (comparefn)\r\nThe elements of this array are sorted. The sort is not necessarily stable (that is, elements that compare equal \r\ndo not necessarily remain in their original order). If comparefn is not undefined, it should be a function that \r\naccepts two arguments x and y and returns a negative value if x < y, zero if x = y, or a positive value if x > y.\r\nLet obj be the result of calling ToObject passing the this value as the argument.\r\nLet len be the result of applying Uint32 to the result of calling the [[Get]] internal method of obj with argument \r\n\"length\".\r\nIf comparefn is not undefined and is not a consistent comparison function for the elements of this array (see \r\nbelow), the behaviour of sort is implementation-defined.\r\nLet proto be the value of the [[Prototype]] internal property of obj. If proto is not null and there exists an integer \r\nj such that all of the conditions below are satisfied then the behaviour of sort is implementation-defined:\r\n obj is sparse (15.4)\r\n 0  j < len\r\n The result of calling the [[HasProperty]] internal method of proto with argument ToString(j) is true.\r\nThe behaviour of sort is also implementation defined if obj is sparse and any of the following conditions are \r\ntrue:\r\n The [[Extensible]] internal property of obj is false.\r\n Any array index property of obj whose name is a nonnegative integer less than len is a data property \r\nwhose [[Configurable]] attribute is false.\r\nThe behaviour of sort is also implementation defined if any array index property of obj whose name is a \r\nnonnegative integer less than len is an accessor property or is a data property whose [[Writable]] attribute is \r\nfalse.\r\nOtherwise, the following steps are taken.\r\n1. Perform an implementation-dependent sequence of calls to the [[Get]] , [[Put]], and [[Delete]] internal \r\nmethods of obj and to SortCompare (described below), where the first argument for each call to [[Get]], \r\n[[Put]], or [[Delete]] is a nonnegative integer less than len and where the arguments for calls to SortCompare \r\nare results of previous calls to the [[Get]] internal method. The throw argument to the [[Put]] and [[Delete]] \r\ninternal methods will be the value true. If obj is not sparse then [[Delete]] must not be called.\r\n2. Return obj.\r\nThe returned object must have the following two properties.\r\n There must be some mathematical permutation  of the nonnegative integers less than len, such that \r\nfor every nonnegative integer j less than len, if property old[j] existed, then new[(j)] is exactly the \r\nsame value as old[j],. But if property old[j] did not exist, then new[(j)] does not exist.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/94873214-e508-4eb9-99b6-92fd3ecb9e89.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f93c90033d8b55b19e76f91fd6ca2eaee2511c331e7e1d696a548db323e25f96",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 542
      },
      {
        "segments": [
          {
            "segment_id": "016e9ded-d470-44d6-b753-405107143f44",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 142,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "130 © Ecma International 2011\r\n Then for all nonnegative integers j and k, each less than len, if SortCompare(j,k) < 0 (see SortCompare\r\nbelow), then (j) < (k).\r\nHere the notation old[j] is used to refer to the hypothetical result of calling the [[Get]] internal method of obj\r\nwith argument j before this function is executed, and the notation new[j] to refer to the hypothetical result of \r\ncalling the [[Get]] internal method of obj with argument j after this function has been executed.\r\nA function comparefn is a consistent comparison function for a set of values S if all of the requirements below \r\nare met for all values a, b, and c (possibly the same value) in the set S: The notation a <CF b means \r\ncomparefn(a,b) < 0; a =CF b means comparefn(a,b) = 0 (of either sign); and a >CF b means comparefn(a,b) > 0.\r\n Calling comparefn(a,b) always returns the same value v when given a specific pair of values a and b as its two \r\narguments. Furthermore, Type(v) is Number, and v is not NaN. Note that this implies that exactly one of a <CF b, \r\na =CF b, and a >CF b will be true for a given pair of a and b.\r\n Calling comparefn(a,b) does not modify the this object.\r\n a =CF a (reflexivity)\r\n If a =CF b, then b =CF a (symmetry)\r\n If a =CF b and b =CF c, then a =CF c (transitivity of =CF)\r\n If a <CF b and b <CF c, then a <CF c (transitivity of <CF)\r\n If a >CF b and b >CF c, then a >CF c (transitivity of >CF)\r\nNOTE The above conditions are necessary and sufficient to ensure that comparefn divides the set S into equivalence \r\nclasses and that these equivalence classes are totally ordered.\r\nWhen the SortCompare abstract operation is called with two arguments j and k, the following steps are taken:\r\n1. Let jString be ToString(j).\r\n2. Let kString be ToString(k).\r\n3. Let hasj be the result of calling the [[HasProperty]] internal method of obj with argument jString.\r\n4. Let hask be the result of calling the [[HasProperty]] internal method of obj with argument kString.\r\n5. If hasj and hask are both false, then return +0.\r\n6. If hasj is false, then return 1.\r\n7. If hask is false, then return –1.\r\n8. Let x be the result of calling the [[Get]] internal method of obj with argument jString.\r\n9. Let y be the result of calling the [[Get]] internal method of obj with argument kString.\r\n10. If x and y are both undefined, return +0.\r\n11. If x is undefined, return 1.\r\n12. If y is undefined, return 1.\r\n13. If the argument comparefn is not undefined, then\r\na. If IsCallable(comparefn) is false, throw a TypeError exception.\r\nb. Return the result of calling the [[Call]] internal method of comparefn passing undefined as the this\r\nvalue and with arguments x and y.\r\n14. Let xString be ToString(x).\r\n15. Let yString be ToString(y).\r\n16. If xString < yString, return 1.\r\n17. If xString > yString, return 1.\r\n18. Return +0.\r\nNOTE 1 Because non-existent property values always compare greater than undefined property values, and \r\nundefined always compares greater than any other value, undefined property values always sort to the end of the result, \r\nfollowed by non-existent property values.\r\nNOTE 2 The sort function is intentionally generic; it does not require that its this value be an Array object. Therefore, \r\nit can be transferred to other kinds of objects for use as a method. Whether the sort function can be applied successfully \r\nto a host object is implementation-dependent.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/016e9ded-d470-44d6-b753-405107143f44.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5a8e75245d5246fe83a62c76db2563fa553a7e9a562de0fac9e94c33fbc85006",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 611
      },
      {
        "segments": [
          {
            "segment_id": "016e9ded-d470-44d6-b753-405107143f44",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 142,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "130 © Ecma International 2011\r\n Then for all nonnegative integers j and k, each less than len, if SortCompare(j,k) < 0 (see SortCompare\r\nbelow), then (j) < (k).\r\nHere the notation old[j] is used to refer to the hypothetical result of calling the [[Get]] internal method of obj\r\nwith argument j before this function is executed, and the notation new[j] to refer to the hypothetical result of \r\ncalling the [[Get]] internal method of obj with argument j after this function has been executed.\r\nA function comparefn is a consistent comparison function for a set of values S if all of the requirements below \r\nare met for all values a, b, and c (possibly the same value) in the set S: The notation a <CF b means \r\ncomparefn(a,b) < 0; a =CF b means comparefn(a,b) = 0 (of either sign); and a >CF b means comparefn(a,b) > 0.\r\n Calling comparefn(a,b) always returns the same value v when given a specific pair of values a and b as its two \r\narguments. Furthermore, Type(v) is Number, and v is not NaN. Note that this implies that exactly one of a <CF b, \r\na =CF b, and a >CF b will be true for a given pair of a and b.\r\n Calling comparefn(a,b) does not modify the this object.\r\n a =CF a (reflexivity)\r\n If a =CF b, then b =CF a (symmetry)\r\n If a =CF b and b =CF c, then a =CF c (transitivity of =CF)\r\n If a <CF b and b <CF c, then a <CF c (transitivity of <CF)\r\n If a >CF b and b >CF c, then a >CF c (transitivity of >CF)\r\nNOTE The above conditions are necessary and sufficient to ensure that comparefn divides the set S into equivalence \r\nclasses and that these equivalence classes are totally ordered.\r\nWhen the SortCompare abstract operation is called with two arguments j and k, the following steps are taken:\r\n1. Let jString be ToString(j).\r\n2. Let kString be ToString(k).\r\n3. Let hasj be the result of calling the [[HasProperty]] internal method of obj with argument jString.\r\n4. Let hask be the result of calling the [[HasProperty]] internal method of obj with argument kString.\r\n5. If hasj and hask are both false, then return +0.\r\n6. If hasj is false, then return 1.\r\n7. If hask is false, then return –1.\r\n8. Let x be the result of calling the [[Get]] internal method of obj with argument jString.\r\n9. Let y be the result of calling the [[Get]] internal method of obj with argument kString.\r\n10. If x and y are both undefined, return +0.\r\n11. If x is undefined, return 1.\r\n12. If y is undefined, return 1.\r\n13. If the argument comparefn is not undefined, then\r\na. If IsCallable(comparefn) is false, throw a TypeError exception.\r\nb. Return the result of calling the [[Call]] internal method of comparefn passing undefined as the this\r\nvalue and with arguments x and y.\r\n14. Let xString be ToString(x).\r\n15. Let yString be ToString(y).\r\n16. If xString < yString, return 1.\r\n17. If xString > yString, return 1.\r\n18. Return +0.\r\nNOTE 1 Because non-existent property values always compare greater than undefined property values, and \r\nundefined always compares greater than any other value, undefined property values always sort to the end of the result, \r\nfollowed by non-existent property values.\r\nNOTE 2 The sort function is intentionally generic; it does not require that its this value be an Array object. Therefore, \r\nit can be transferred to other kinds of objects for use as a method. Whether the sort function can be applied successfully \r\nto a host object is implementation-dependent.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/016e9ded-d470-44d6-b753-405107143f44.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5a8e75245d5246fe83a62c76db2563fa553a7e9a562de0fac9e94c33fbc85006",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 611
      },
      {
        "segments": [
          {
            "segment_id": "25781957-9f59-4006-a7ef-dc52a221ff52",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 143,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 131\r\n15.4.4.12 Array.prototype.splice (start, deleteCount [ , item1 [ , item2 [ , … ] ] ] )\r\nWhen the splice method is called with two or more arguments start, deleteCount and (optionally) item1, item2, \r\netc., the deleteCount elements of the array starting at array index start are replaced by the arguments item1, \r\nitem2, etc. An Array object containing the deleted elements (if any) is returned. The following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let A be a new array created as if by the expression new Array()where Array is the standard built-in \r\nconstructor with that name.\r\n3. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n4. Let len be ToUint32(lenVal).\r\n5. Let relativeStart be ToInteger(start).\r\n6. If relativeStart is negative, let actualStart be max((len + relativeStart),0); else let actualStart be \r\nmin(relativeStart, len).\r\n7. Let actualDeleteCount be min(max(ToInteger(deleteCount),0), len – actualStart).\r\n8. Let k be 0.\r\n9. Repeat, while k < actualDeleteCount\r\na. Let from be ToString(actualStart+k).\r\nb. Let fromPresent be the result of calling the [[HasProperty]] internal method of O with argument \r\nfrom.\r\nc. If fromPresent is true, then\r\ni. Let fromValue be the result of calling the [[Get]] internal method of O with argument from.\r\nii. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(k), Property \r\nDescriptor {[[Value]]: fromValue, [[Writable]]: true, [[Enumerable]]: true, \r\n[[Configurable]]: true}, and false.\r\nd. Increment k by 1.\r\n10. Let items be an internal List whose elements are, in left to right order, the portion of the actual argument list \r\nstarting with item1. The list will be empty if no such items are present.\r\n11. Let itemCount be the number of elements in items.\r\n12. If itemCount < actualDeleteCount, then\r\na. Let k be actualStart.\r\nb. Repeat, while k < (len – actualDeleteCount)\r\ni. Let from be ToString(k+actualDeleteCount).\r\nii. Let to be ToString(k+itemCount).\r\niii. Let fromPresent be the result of calling the [[HasProperty]] internal method of O with \r\nargument from.\r\niv. If fromPresent is true, then\r\n1. Let fromValue be the result of calling the [[Get]] internal method of O with \r\nargument from.\r\n2. Call the [[Put]] internal method of O with arguments to, fromValue, and true.\r\nv. Else, fromPresent is false\r\n1. Call the [[Delete]] internal method of O with arguments to and true.\r\nvi. Increase k by 1.\r\nc. Let k be len.\r\nd. Repeat, while k > (len – actualDeleteCount + itemCount) \r\ni. Call the [[Delete]] internal method of O with arguments ToString(k–1) and true.\r\nii. Decrease k by 1.\r\n13. Else if itemCount > actualDeleteCount, then\r\na. Let k be (len – actualDeleteCount).\r\nb. Repeat, while k > actualStart\r\ni. Let from be ToString(k + actualDeleteCount – 1).\r\nii. Let to be ToString(k + itemCount – 1)\r\niii. Let fromPresent be the result of calling the [[HasProperty]] internal method of O with \r\nargument from.\r\niv. If fromPresent is true, then\r\n1. Let fromValue be the result of calling the [[Get]] internal method of O with \r\nargument from.\r\n2. Call the [[Put]] internal method of O with arguments to, fromValue, and true.\r\nv. Else, fromPresent is false\r\n1. Call the [[Delete]] internal method of O with argument to and true.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/25781957-9f59-4006-a7ef-dc52a221ff52.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bcdfa9b08d36b8d030309347c16c240e0423bab41615282ed8b636d326ddb3c6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 546
      },
      {
        "segments": [
          {
            "segment_id": "25781957-9f59-4006-a7ef-dc52a221ff52",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 143,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 131\r\n15.4.4.12 Array.prototype.splice (start, deleteCount [ , item1 [ , item2 [ , … ] ] ] )\r\nWhen the splice method is called with two or more arguments start, deleteCount and (optionally) item1, item2, \r\netc., the deleteCount elements of the array starting at array index start are replaced by the arguments item1, \r\nitem2, etc. An Array object containing the deleted elements (if any) is returned. The following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let A be a new array created as if by the expression new Array()where Array is the standard built-in \r\nconstructor with that name.\r\n3. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n4. Let len be ToUint32(lenVal).\r\n5. Let relativeStart be ToInteger(start).\r\n6. If relativeStart is negative, let actualStart be max((len + relativeStart),0); else let actualStart be \r\nmin(relativeStart, len).\r\n7. Let actualDeleteCount be min(max(ToInteger(deleteCount),0), len – actualStart).\r\n8. Let k be 0.\r\n9. Repeat, while k < actualDeleteCount\r\na. Let from be ToString(actualStart+k).\r\nb. Let fromPresent be the result of calling the [[HasProperty]] internal method of O with argument \r\nfrom.\r\nc. If fromPresent is true, then\r\ni. Let fromValue be the result of calling the [[Get]] internal method of O with argument from.\r\nii. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(k), Property \r\nDescriptor {[[Value]]: fromValue, [[Writable]]: true, [[Enumerable]]: true, \r\n[[Configurable]]: true}, and false.\r\nd. Increment k by 1.\r\n10. Let items be an internal List whose elements are, in left to right order, the portion of the actual argument list \r\nstarting with item1. The list will be empty if no such items are present.\r\n11. Let itemCount be the number of elements in items.\r\n12. If itemCount < actualDeleteCount, then\r\na. Let k be actualStart.\r\nb. Repeat, while k < (len – actualDeleteCount)\r\ni. Let from be ToString(k+actualDeleteCount).\r\nii. Let to be ToString(k+itemCount).\r\niii. Let fromPresent be the result of calling the [[HasProperty]] internal method of O with \r\nargument from.\r\niv. If fromPresent is true, then\r\n1. Let fromValue be the result of calling the [[Get]] internal method of O with \r\nargument from.\r\n2. Call the [[Put]] internal method of O with arguments to, fromValue, and true.\r\nv. Else, fromPresent is false\r\n1. Call the [[Delete]] internal method of O with arguments to and true.\r\nvi. Increase k by 1.\r\nc. Let k be len.\r\nd. Repeat, while k > (len – actualDeleteCount + itemCount) \r\ni. Call the [[Delete]] internal method of O with arguments ToString(k–1) and true.\r\nii. Decrease k by 1.\r\n13. Else if itemCount > actualDeleteCount, then\r\na. Let k be (len – actualDeleteCount).\r\nb. Repeat, while k > actualStart\r\ni. Let from be ToString(k + actualDeleteCount – 1).\r\nii. Let to be ToString(k + itemCount – 1)\r\niii. Let fromPresent be the result of calling the [[HasProperty]] internal method of O with \r\nargument from.\r\niv. If fromPresent is true, then\r\n1. Let fromValue be the result of calling the [[Get]] internal method of O with \r\nargument from.\r\n2. Call the [[Put]] internal method of O with arguments to, fromValue, and true.\r\nv. Else, fromPresent is false\r\n1. Call the [[Delete]] internal method of O with argument to and true.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/25781957-9f59-4006-a7ef-dc52a221ff52.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bcdfa9b08d36b8d030309347c16c240e0423bab41615282ed8b636d326ddb3c6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 546
      },
      {
        "segments": [
          {
            "segment_id": "252115d7-a78f-4ce3-8c72-1d4c575a4537",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 144,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "132 © Ecma International 2011\r\nvi. Decrease k by 1.\r\n14. Let k be actualStart.\r\n15. Repeat, while items is not empty\r\na. Remove the first element from items and let E be the value of that element.\r\nb. Call the [[Put]] internal method of O with arguments ToString(k), E, and true.\r\nc. Increase k by 1.\r\n16. Call the [[Put]] internal method of O with arguments \"length\", (len – actualDeleteCount + itemCount), \r\nand true.\r\n17. Return A.\r\nThe length property of the splice method is 2.\r\nNOTE The splice function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the splice function can be applied \r\nsuccessfully to a host object is implementation-dependent.\r\n15.4.4.13 Array.prototype.unshift ( [ item1 [ , item2 [ , … ] ] ] )\r\nThe arguments are prepended to the start of the array, such that their order within the array is the same as the \r\norder in which they appear in the argument list.\r\nWhen the unshift method is called with zero or more arguments item1, item2, etc., the following steps are \r\ntaken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenVal be the result of calling the [[Get]] internal method of O with argument \"length\".\r\n3. Let len be ToUint32(lenVal).\r\n4. Let argCount be the number of actual arguments.\r\n5. Let k be len.\r\n6. Repeat, while k > 0, \r\na. Let from be ToString(k–1).\r\nb. Let to be ToString(k+argCount –1).\r\nc. Let fromPresent be the result of calling the [[HasProperty]] internal method of O with argument \r\nfrom.\r\nd. If fromPresent is true, then\r\ni. Let fromValue be the result of calling the [[Get]] internal method of O with argument from.\r\nii. Call the [[Put]] internal method of O with arguments to, fromValue, and true.\r\ne. Else, fromPresent is false\r\ni. Call the [[Delete]] internal method of O with arguments to, and true.\r\nf. Decrease k by 1.\r\n7. Let j be 0.\r\n8. Let items be an internal List whose elements are, in left to right order, the arguments that were passed to t his \r\nfunction invocation.\r\n9. Repeat, while items is not empty\r\na. Remove the first element from items and let E be the value of that element.\r\nb. Call the [[Put]] internal method of O with arguments ToString(j), E, and true.\r\nc. Increase j by 1.\r\n10. Call the [[Put]] internal method of O with arguments \"length\", len+argCount, and true.\r\n11. Return len+argCount.\r\nThe length property of the unshift method is 1.\r\nNOTE The unshift function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the unshift function can be \r\napplied successfully to a host object is implementation-dependent.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/252115d7-a78f-4ce3-8c72-1d4c575a4537.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4c58660b1c353eca29fd19584c7eb111e804a6d8026012a51f98bb43decf32b8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 492
      },
      {
        "segments": [
          {
            "segment_id": "554deba0-45c1-4b8e-9482-4cd66166a806",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 145,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 133\r\n15.4.4.14 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\r\nindexOf compares searchElement to the elements of the array, in ascending order, using the internal Strict \r\nEquality Comparison Algorithm (11.9.6), and if found at one or more positions, returns the index of the first \r\nsuch position; otherwise, -1 is returned.\r\nThe optional second argument fromIndex defaults to 0 (i.e. the whole array is searched). If it is greater than or \r\nequal to the length of the array, -1 is returned, i.e. the array will not be searched. If it is negative, it is used as \r\nthe offset from the end of the array to compute fromIndex. If the computed index is less than 0, the whole array \r\nwill be searched.\r\nWhen the indexOf method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If len is 0, return -1.\r\n5. If argument fromIndex was passed let n be ToInteger(fromIndex); else let n be 0.\r\n6. If n ≥ len, return -1.\r\n7. If n ≥ 0, then \r\na. Let k be n.\r\n8. Else, n<0\r\na. Let k be len - abs(n).\r\nb. If k is less than 0, then let k be 0.\r\n9. Repeat, while k<len\r\na. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument \r\nToString(k).\r\nb. If kPresent is true, then\r\ni. Let elementK be the result of calling the [[Get]] internal method of O with the argument \r\nToString(k).\r\nii. Let same be the result of applying the Strict Equality Comparison Algorithm to\r\nsearchElement and elementK.\r\niii. If same is true, return k.\r\nc. Increase k by 1.\r\n10. Return -1.\r\nThe length property of the indexOf method is 1.\r\nNOTE The indexOf function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the indexOf function can be \r\napplied successfully to a host object is implementation-dependent.\r\n15.4.4.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\r\nlastIndexOf compares searchElement to the elements of the array in descending order using the internal \r\nStrict Equality Comparison Algorithm (11.9.6), and if found at one or more positions, returns the index of the \r\nlast such position; otherwise, -1 is returned.\r\nThe optional second argument fromIndex defaults to the array's length minus one (i.e. the whole array is \r\nsearched). If it is greater than or equal to the length of the array, the whole array will be searched. If it is \r\nnegative, it is used as the offset from the end of the array to compute fromIndex. If the computed index is less \r\nthan 0, -1 is returned.\r\nWhen the lastIndexOf method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If len is 0, return -1.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/554deba0-45c1-4b8e-9482-4cd66166a806.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=79cae7ec550e25800feef44372375ac21810f99786b472d392ae1f03f7744f02",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 553
      },
      {
        "segments": [
          {
            "segment_id": "554deba0-45c1-4b8e-9482-4cd66166a806",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 145,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 133\r\n15.4.4.14 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\r\nindexOf compares searchElement to the elements of the array, in ascending order, using the internal Strict \r\nEquality Comparison Algorithm (11.9.6), and if found at one or more positions, returns the index of the first \r\nsuch position; otherwise, -1 is returned.\r\nThe optional second argument fromIndex defaults to 0 (i.e. the whole array is searched). If it is greater than or \r\nequal to the length of the array, -1 is returned, i.e. the array will not be searched. If it is negative, it is used as \r\nthe offset from the end of the array to compute fromIndex. If the computed index is less than 0, the whole array \r\nwill be searched.\r\nWhen the indexOf method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If len is 0, return -1.\r\n5. If argument fromIndex was passed let n be ToInteger(fromIndex); else let n be 0.\r\n6. If n ≥ len, return -1.\r\n7. If n ≥ 0, then \r\na. Let k be n.\r\n8. Else, n<0\r\na. Let k be len - abs(n).\r\nb. If k is less than 0, then let k be 0.\r\n9. Repeat, while k<len\r\na. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument \r\nToString(k).\r\nb. If kPresent is true, then\r\ni. Let elementK be the result of calling the [[Get]] internal method of O with the argument \r\nToString(k).\r\nii. Let same be the result of applying the Strict Equality Comparison Algorithm to\r\nsearchElement and elementK.\r\niii. If same is true, return k.\r\nc. Increase k by 1.\r\n10. Return -1.\r\nThe length property of the indexOf method is 1.\r\nNOTE The indexOf function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the indexOf function can be \r\napplied successfully to a host object is implementation-dependent.\r\n15.4.4.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\r\nlastIndexOf compares searchElement to the elements of the array in descending order using the internal \r\nStrict Equality Comparison Algorithm (11.9.6), and if found at one or more positions, returns the index of the \r\nlast such position; otherwise, -1 is returned.\r\nThe optional second argument fromIndex defaults to the array's length minus one (i.e. the whole array is \r\nsearched). If it is greater than or equal to the length of the array, the whole array will be searched. If it is \r\nnegative, it is used as the offset from the end of the array to compute fromIndex. If the computed index is less \r\nthan 0, -1 is returned.\r\nWhen the lastIndexOf method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If len is 0, return -1.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/554deba0-45c1-4b8e-9482-4cd66166a806.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=79cae7ec550e25800feef44372375ac21810f99786b472d392ae1f03f7744f02",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 553
      },
      {
        "segments": [
          {
            "segment_id": "884868d3-45e0-4898-b22e-7e3dc7a25e36",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 146,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "134 © Ecma International 2011\r\n5. If argument fromIndex was passed let n be ToInteger(fromIndex); else let n be len-1.\r\n6. If n ≥ 0, then let k be min(n, len – 1).\r\n7. Else, n < 0\r\na. Let k be len - abs(n).\r\n8. Repeat, while k≥ 0\r\na. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument \r\nToString(k).\r\nb. If kPresent is true, then\r\ni. Let elementK be the result of calling the [[Get]] internal method of O with the argument \r\nToString(k).\r\nii. Let same be the result of applying the Strict Equality Comparison Algorithm to\r\nsearchElement and elementK.\r\niii. If same is true, return k.\r\nc. Decrease k by 1.\r\n9. Return -1.\r\nThe length property of the lastIndexOf method is 1.\r\nNOTE The lastIndexOf function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the lastIndexOf function can be \r\napplied successfully to a host object is implementation-dependent.\r\n15.4.4.16 Array.prototype.every ( callbackfn [ , thisArg ] )\r\ncallbackfn should be a function that accepts three arguments and returns a value that is coercible to the \r\nBoolean value true or false. every calls callbackfn once for each element present in the array, in ascending \r\norder, until it finds one where callbackfn returns false. If such an element is found, every immediately returns \r\nfalse. Otherwise, if callbackfn returned true for all elements, every will return true. callbackfn is called only for \r\nelements of the array which actually exist; it is not called for missing elements of the array.\r\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not \r\nprovided, undefined is used instead.\r\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object \r\nbeing traversed.\r\nevery does not directly mutate the object on which it is called but the object may be mutated by the calls to \r\ncallbackfn. \r\nThe range of elements processed by every is set before the first call to callbackfn. Elements which are \r\nappended to the array after the call to every begins will not be visited by callbackfn. If existing elements of the \r\narray are changed, their value as passed to callbackfn will be the value at the time every visits them; \r\nelements that are deleted after the call to every begins and before being visited are not visited. every acts \r\nlike the \"for all\" quantifier in mathematics. In particular, for an empty array, it returns true.\r\nWhen the every method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n6. Let k be 0.\r\n7. Repeat, while k < len\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/884868d3-45e0-4898-b22e-7e3dc7a25e36.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7f10672e344d0008f72226d1c4c3800e748a6bebb73e188dda11a4de54795a1b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 577
      },
      {
        "segments": [
          {
            "segment_id": "884868d3-45e0-4898-b22e-7e3dc7a25e36",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 146,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "134 © Ecma International 2011\r\n5. If argument fromIndex was passed let n be ToInteger(fromIndex); else let n be len-1.\r\n6. If n ≥ 0, then let k be min(n, len – 1).\r\n7. Else, n < 0\r\na. Let k be len - abs(n).\r\n8. Repeat, while k≥ 0\r\na. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument \r\nToString(k).\r\nb. If kPresent is true, then\r\ni. Let elementK be the result of calling the [[Get]] internal method of O with the argument \r\nToString(k).\r\nii. Let same be the result of applying the Strict Equality Comparison Algorithm to\r\nsearchElement and elementK.\r\niii. If same is true, return k.\r\nc. Decrease k by 1.\r\n9. Return -1.\r\nThe length property of the lastIndexOf method is 1.\r\nNOTE The lastIndexOf function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the lastIndexOf function can be \r\napplied successfully to a host object is implementation-dependent.\r\n15.4.4.16 Array.prototype.every ( callbackfn [ , thisArg ] )\r\ncallbackfn should be a function that accepts three arguments and returns a value that is coercible to the \r\nBoolean value true or false. every calls callbackfn once for each element present in the array, in ascending \r\norder, until it finds one where callbackfn returns false. If such an element is found, every immediately returns \r\nfalse. Otherwise, if callbackfn returned true for all elements, every will return true. callbackfn is called only for \r\nelements of the array which actually exist; it is not called for missing elements of the array.\r\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not \r\nprovided, undefined is used instead.\r\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object \r\nbeing traversed.\r\nevery does not directly mutate the object on which it is called but the object may be mutated by the calls to \r\ncallbackfn. \r\nThe range of elements processed by every is set before the first call to callbackfn. Elements which are \r\nappended to the array after the call to every begins will not be visited by callbackfn. If existing elements of the \r\narray are changed, their value as passed to callbackfn will be the value at the time every visits them; \r\nelements that are deleted after the call to every begins and before being visited are not visited. every acts \r\nlike the \"for all\" quantifier in mathematics. In particular, for an empty array, it returns true.\r\nWhen the every method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n6. Let k be 0.\r\n7. Repeat, while k < len\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/884868d3-45e0-4898-b22e-7e3dc7a25e36.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7f10672e344d0008f72226d1c4c3800e748a6bebb73e188dda11a4de54795a1b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 577
      },
      {
        "segments": [
          {
            "segment_id": "9095de14-9cfe-470b-a0fc-d1eb16263fda",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 147,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 135\r\nii. Let testResult be the result of calling the [[Call]] internal method of callbackfn with T as the \r\nthis value and argument list containing kValue, k, and O.\r\niii. If ToBoolean(testResult) is false, return false.\r\nd. Increase k by 1.\r\n8. Return true.\r\nThe length property of the every method is 1.\r\nNOTE The every function is intentionally generic; it does not require that its this value be an Array object. Therefore \r\nit can be transferred to other kinds of objects for use as a method. Whether the every function can be applied \r\nsuccessfully to a host object is implementation-dependent.\r\n15.4.4.17 Array.prototype.some ( callbackfn [ , thisArg ] )\r\ncallbackfn should be a function that accepts three arguments and returns a value that is coercible to the \r\nBoolean value true or false. some calls callbackfn once for each element present in the array, in ascending \r\norder, until it finds one where callbackfn returns true. If such an element is found, some immediately returns \r\ntrue. Otherwise, some returns false. callbackfn is called only for elements of the array which actually exist; it is \r\nnot called for missing elements of the array.\r\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not \r\nprovided, undefined is used instead.\r\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object \r\nbeing traversed.\r\nsome does not directly mutate the object on which it is called but the object may be mutated by the calls to \r\ncallbackfn.\r\nThe range of elements processed by some is set before the first call to callbackfn. Elements that are appended \r\nto the array after the call to some begins will not be visited by callbackfn. If existing elements of the array are \r\nchanged, their value as passed to callbackfn will be the value at the time that some visits them; elements that \r\nare deleted after the call to some begins and before being visited are not visited. some acts like the \"exists\" \r\nquantifier in mathematics. In particular, for an empty array, it returns false.\r\nWhen the some method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n6. Let k be 0.\r\n7. Repeat, while k < len\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.\r\nii. Let testResult be the result of calling the [[Call]] internal method of callbackfn with T as the \r\nthis value and argument list containing kValue, k, and O.\r\niii. If ToBoolean(testResult) is true, return true.\r\nd. Increase k by 1.\r\n8. Return false.\r\nThe length property of the some method is 1.\r\nNOTE The some function is intentionally generic; it does not require that its this value be an Array object. Therefore \r\nit can be transferred to other kinds of objects for use as a method. Whether the some function can be applied successfully \r\nto a host object is implementation-dependent.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/9095de14-9cfe-470b-a0fc-d1eb16263fda.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8e55b5988cd2c48cd819ef72a94d91374d904b5f20ec2cc7125749882e1e932c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 594
      },
      {
        "segments": [
          {
            "segment_id": "9095de14-9cfe-470b-a0fc-d1eb16263fda",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 147,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 135\r\nii. Let testResult be the result of calling the [[Call]] internal method of callbackfn with T as the \r\nthis value and argument list containing kValue, k, and O.\r\niii. If ToBoolean(testResult) is false, return false.\r\nd. Increase k by 1.\r\n8. Return true.\r\nThe length property of the every method is 1.\r\nNOTE The every function is intentionally generic; it does not require that its this value be an Array object. Therefore \r\nit can be transferred to other kinds of objects for use as a method. Whether the every function can be applied \r\nsuccessfully to a host object is implementation-dependent.\r\n15.4.4.17 Array.prototype.some ( callbackfn [ , thisArg ] )\r\ncallbackfn should be a function that accepts three arguments and returns a value that is coercible to the \r\nBoolean value true or false. some calls callbackfn once for each element present in the array, in ascending \r\norder, until it finds one where callbackfn returns true. If such an element is found, some immediately returns \r\ntrue. Otherwise, some returns false. callbackfn is called only for elements of the array which actually exist; it is \r\nnot called for missing elements of the array.\r\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not \r\nprovided, undefined is used instead.\r\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object \r\nbeing traversed.\r\nsome does not directly mutate the object on which it is called but the object may be mutated by the calls to \r\ncallbackfn.\r\nThe range of elements processed by some is set before the first call to callbackfn. Elements that are appended \r\nto the array after the call to some begins will not be visited by callbackfn. If existing elements of the array are \r\nchanged, their value as passed to callbackfn will be the value at the time that some visits them; elements that \r\nare deleted after the call to some begins and before being visited are not visited. some acts like the \"exists\" \r\nquantifier in mathematics. In particular, for an empty array, it returns false.\r\nWhen the some method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n6. Let k be 0.\r\n7. Repeat, while k < len\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.\r\nii. Let testResult be the result of calling the [[Call]] internal method of callbackfn with T as the \r\nthis value and argument list containing kValue, k, and O.\r\niii. If ToBoolean(testResult) is true, return true.\r\nd. Increase k by 1.\r\n8. Return false.\r\nThe length property of the some method is 1.\r\nNOTE The some function is intentionally generic; it does not require that its this value be an Array object. Therefore \r\nit can be transferred to other kinds of objects for use as a method. Whether the some function can be applied successfully \r\nto a host object is implementation-dependent.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/9095de14-9cfe-470b-a0fc-d1eb16263fda.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8e55b5988cd2c48cd819ef72a94d91374d904b5f20ec2cc7125749882e1e932c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 594
      },
      {
        "segments": [
          {
            "segment_id": "9951cd8e-1899-44a9-a6c7-c2842936a149",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 148,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "136 © Ecma International 2011\r\n15.4.4.18 Array.prototype.forEach ( callbackfn [ , thisArg ] )\r\ncallbackfn should be a function that accepts three arguments. forEach calls callbackfn once for each element \r\npresent in the array, in ascending order. callbackfn is called only for elements of the array which actually exist; \r\nit is not called for missing elements of the array.\r\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not \r\nprovided, undefined is used instead.\r\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object \r\nbeing traversed. \r\nforEach does not directly mutate the object on which it is called but the object may be mutated by the calls to \r\ncallbackfn. \r\nThe range of elements processed by forEach is set before the first call to callbackfn. Elements which are \r\nappended to the array after the call to forEach begins will not be visited by callbackfn. If existing elements of \r\nthe array are changed, their value as passed to callback will be the value at the time forEach visits them; \r\nelements that are deleted after the call to forEach begins and before being visited are not visited.\r\nWhen the forEach method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n6. Let k be 0.\r\n7. Repeat, while k < len\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.\r\nii. Call the [[Call]] internal method of callbackfn with T as the this value and argument list \r\ncontaining kValue, k, and O.\r\nd. Increase k by 1.\r\n8. Return undefined.\r\nThe length property of the forEach method is 1.\r\nNOTE The forEach function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the forEach function can be \r\napplied successfully to a host object is implementation-dependent.\r\n15.4.4.19 Array.prototype.map ( callbackfn [ , thisArg ] )\r\ncallbackfn should be a function that accepts three arguments. map calls callbackfn once for each element in the \r\narray, in ascending order, and constructs a new Array from the results. callbackfn is called only for elements of \r\nthe array which actually exist; it is not called for missing elements of the array.\r\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not \r\nprovided, undefined is used instead.\r\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object \r\nbeing traversed.\r\nmap does not directly mutate the object on which it is called but the object may be mutated by the calls to \r\ncallbackfn.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/9951cd8e-1899-44a9-a6c7-c2842936a149.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=919cdf03ec415246db9c2a4944c8210547536bb979beeec32055a277767d0d12",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 560
      },
      {
        "segments": [
          {
            "segment_id": "9951cd8e-1899-44a9-a6c7-c2842936a149",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 148,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "136 © Ecma International 2011\r\n15.4.4.18 Array.prototype.forEach ( callbackfn [ , thisArg ] )\r\ncallbackfn should be a function that accepts three arguments. forEach calls callbackfn once for each element \r\npresent in the array, in ascending order. callbackfn is called only for elements of the array which actually exist; \r\nit is not called for missing elements of the array.\r\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not \r\nprovided, undefined is used instead.\r\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object \r\nbeing traversed. \r\nforEach does not directly mutate the object on which it is called but the object may be mutated by the calls to \r\ncallbackfn. \r\nThe range of elements processed by forEach is set before the first call to callbackfn. Elements which are \r\nappended to the array after the call to forEach begins will not be visited by callbackfn. If existing elements of \r\nthe array are changed, their value as passed to callback will be the value at the time forEach visits them; \r\nelements that are deleted after the call to forEach begins and before being visited are not visited.\r\nWhen the forEach method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n6. Let k be 0.\r\n7. Repeat, while k < len\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.\r\nii. Call the [[Call]] internal method of callbackfn with T as the this value and argument list \r\ncontaining kValue, k, and O.\r\nd. Increase k by 1.\r\n8. Return undefined.\r\nThe length property of the forEach method is 1.\r\nNOTE The forEach function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the forEach function can be \r\napplied successfully to a host object is implementation-dependent.\r\n15.4.4.19 Array.prototype.map ( callbackfn [ , thisArg ] )\r\ncallbackfn should be a function that accepts three arguments. map calls callbackfn once for each element in the \r\narray, in ascending order, and constructs a new Array from the results. callbackfn is called only for elements of \r\nthe array which actually exist; it is not called for missing elements of the array.\r\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not \r\nprovided, undefined is used instead.\r\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object \r\nbeing traversed.\r\nmap does not directly mutate the object on which it is called but the object may be mutated by the calls to \r\ncallbackfn.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/9951cd8e-1899-44a9-a6c7-c2842936a149.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=919cdf03ec415246db9c2a4944c8210547536bb979beeec32055a277767d0d12",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 560
      },
      {
        "segments": [
          {
            "segment_id": "a5d709cb-5585-4b91-b9cf-a7eb7fabf17a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 149,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 137\r\nThe range of elements processed by map is set before the first call to callbackfn. Elements which are \r\nappended to the array after the call to map begins will not be visited by callbackfn. If existing elements of the \r\narray are changed, their value as passed to callbackfn will be the value at the time map visits them; elements \r\nthat are deleted after the call to map begins and before being visited are not visited.\r\nWhen the map method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n6. Let A be a new array created as if by the expression new Array(len) where Array is the standard built\u0002in constructor with that name and len is the value of len.\r\n7. Let k be 0.\r\n8. Repeat, while k < len\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.\r\nii. Let mappedValue be the result of calling the [[Call]] internal method of callbackfn with T as \r\nthe this value and argument list containing kValue, k, and O.\r\niii. Call the [[DefineOwnProperty]] internal method of A with arguments Pk, Property \r\nDescriptor {[[Value]]: mappedValue, [[Writable]]: true, [[Enumerable]]: true, \r\n[[Configurable]]: true}, and false.\r\nd. Increase k by 1.\r\n9. Return A.\r\nThe length property of the map method is 1.\r\nNOTE The map function is intentionally generic; it does not require that its this value be an Array object. Therefore it \r\ncan be transferred to other kinds of objects for use as a method. Whether the map function can be applied successfully to \r\na host object is implementation-dependent.\r\n15.4.4.20 Array.prototype.filter ( callbackfn [ , thisArg ] )\r\ncallbackfn should be a function that accepts three arguments and returns a value that is coercible to the \r\nBoolean value true or false. filter calls callbackfn once for each element in the array, in ascending order, \r\nand constructs a new array of all the values for which callbackfn returns true. callbackfn is called only for \r\nelements of the array which actually exist; it is not called for missing elements of the array.\r\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not \r\nprovided, undefined is used instead.\r\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object \r\nbeing traversed.\r\nfilter does not directly mutate the object on which it is called but the object may be mutated by the calls to \r\ncallbackfn.\r\nThe range of elements processed by filter is set before the first call to callbackfn. Elements which are \r\nappended to the array after the call to filter begins will not be visited by callbackfn. If existing elements of \r\nthe array are changed their value as passed to callbackfn will be the value at the time filter visits them; \r\nelements that are deleted after the call to filter begins and before being visited are not visited.\r\nWhen the filter method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/a5d709cb-5585-4b91-b9cf-a7eb7fabf17a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=66c0c2e4dfabdcc0589c0b9506cdf996590f0d77b3b90bd62e9e90d0440454b4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 640
      },
      {
        "segments": [
          {
            "segment_id": "a5d709cb-5585-4b91-b9cf-a7eb7fabf17a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 149,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 137\r\nThe range of elements processed by map is set before the first call to callbackfn. Elements which are \r\nappended to the array after the call to map begins will not be visited by callbackfn. If existing elements of the \r\narray are changed, their value as passed to callbackfn will be the value at the time map visits them; elements \r\nthat are deleted after the call to map begins and before being visited are not visited.\r\nWhen the map method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n6. Let A be a new array created as if by the expression new Array(len) where Array is the standard built\u0002in constructor with that name and len is the value of len.\r\n7. Let k be 0.\r\n8. Repeat, while k < len\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.\r\nii. Let mappedValue be the result of calling the [[Call]] internal method of callbackfn with T as \r\nthe this value and argument list containing kValue, k, and O.\r\niii. Call the [[DefineOwnProperty]] internal method of A with arguments Pk, Property \r\nDescriptor {[[Value]]: mappedValue, [[Writable]]: true, [[Enumerable]]: true, \r\n[[Configurable]]: true}, and false.\r\nd. Increase k by 1.\r\n9. Return A.\r\nThe length property of the map method is 1.\r\nNOTE The map function is intentionally generic; it does not require that its this value be an Array object. Therefore it \r\ncan be transferred to other kinds of objects for use as a method. Whether the map function can be applied successfully to \r\na host object is implementation-dependent.\r\n15.4.4.20 Array.prototype.filter ( callbackfn [ , thisArg ] )\r\ncallbackfn should be a function that accepts three arguments and returns a value that is coercible to the \r\nBoolean value true or false. filter calls callbackfn once for each element in the array, in ascending order, \r\nand constructs a new array of all the values for which callbackfn returns true. callbackfn is called only for \r\nelements of the array which actually exist; it is not called for missing elements of the array.\r\nIf a thisArg parameter is provided, it will be used as the this value for each invocation of callbackfn. If it is not \r\nprovided, undefined is used instead.\r\ncallbackfn is called with three arguments: the value of the element, the index of the element, and the object \r\nbeing traversed.\r\nfilter does not directly mutate the object on which it is called but the object may be mutated by the calls to \r\ncallbackfn.\r\nThe range of elements processed by filter is set before the first call to callbackfn. Elements which are \r\nappended to the array after the call to filter begins will not be visited by callbackfn. If existing elements of \r\nthe array are changed their value as passed to callbackfn will be the value at the time filter visits them; \r\nelements that are deleted after the call to filter begins and before being visited are not visited.\r\nWhen the filter method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/a5d709cb-5585-4b91-b9cf-a7eb7fabf17a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=66c0c2e4dfabdcc0589c0b9506cdf996590f0d77b3b90bd62e9e90d0440454b4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 640
      },
      {
        "segments": [
          {
            "segment_id": "d2dae2ab-b325-4d97-aac6-3d6fdf92f069",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 150,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "138 © Ecma International 2011\r\n3. Let len be ToUint32(lenValue).\r\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n6. Let A be a new array created as if by the expression new Array() where Array is the standard built-in \r\nconstructor with that name.\r\n7. Let k be 0.\r\n8. Let to be 0.\r\n9. Repeat, while k < len\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.\r\nii. Let selected be the result of calling the [[Call]] internal method of callbackfn with T as the \r\nthis value and argument list containing kValue, k, and O.\r\niii. If ToBoolean(selected) is true, then\r\n1. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(to), \r\nProperty Descriptor {[[Value]]: kValue, [[Writable]]: true, [[Enumerable]]: true, \r\n[[Configurable]]: true}, and false.\r\n2. Increase to by 1.\r\nd. Increase k by 1.\r\n10. Return A.\r\nThe length property of the filter method is 1.\r\nNOTE The filter function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the filter function can be applied \r\nsuccessfully to a host object is implementation-dependent.\r\n15.4.4.21 Array.prototype.reduce ( callbackfn [ , initialValue ] )\r\ncallbackfn should be a function that takes four arguments. reduce calls the callback, as a function, once for \r\neach element present in the array, in ascending order.\r\ncallbackfn is called with four arguments: the previousValue (or value from the previous call to callbackfn), the \r\ncurrentValue (value of the current element), the currentIndex, and the object being traversed. The first time \r\nthat callback is called, the previousValue and currentValue can be one of two values. If an initialValue was \r\nprovided in the call to reduce, then previousValue will be equal to initialValue and currentValue will be equal \r\nto the first value in the array. If no initialValue was provided, then previousValue will be equal to the first value \r\nin the array and currentValue will be equal to the second. It is a TypeError if the array contains no elements \r\nand initialValue is not provided.\r\nreduce does not directly mutate the object on which it is called but the object may be mutated by the calls to \r\ncallbackfn.\r\nThe range of elements processed by reduce is set before the first call to callbackfn. Elements that are \r\nappended to the array after the call to reduce begins will not be visited by callbackfn. If existing elements of \r\nthe array are changed, their value as passed to callbackfn will be the value at the time reduce visits them; \r\nelements that are deleted after the call to reduce begins and before being visited are not visited.\r\nWhen the reduce method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n5. If len is 0 and initialValue is not present, throw a TypeError exception.\r\n6. Let k be 0.\r\n7. If initialValue is present, then\r\na. Set accumulator to initialValue.\r\n8. Else, initialValue is not present",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/d2dae2ab-b325-4d97-aac6-3d6fdf92f069.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e33e92121f8df16b53ba02951fa5deaa5ab3e5b0a10132a7be6818a9ede35d1a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 596
      },
      {
        "segments": [
          {
            "segment_id": "d2dae2ab-b325-4d97-aac6-3d6fdf92f069",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 150,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "138 © Ecma International 2011\r\n3. Let len be ToUint32(lenValue).\r\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n6. Let A be a new array created as if by the expression new Array() where Array is the standard built-in \r\nconstructor with that name.\r\n7. Let k be 0.\r\n8. Let to be 0.\r\n9. Repeat, while k < len\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.\r\nii. Let selected be the result of calling the [[Call]] internal method of callbackfn with T as the \r\nthis value and argument list containing kValue, k, and O.\r\niii. If ToBoolean(selected) is true, then\r\n1. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(to), \r\nProperty Descriptor {[[Value]]: kValue, [[Writable]]: true, [[Enumerable]]: true, \r\n[[Configurable]]: true}, and false.\r\n2. Increase to by 1.\r\nd. Increase k by 1.\r\n10. Return A.\r\nThe length property of the filter method is 1.\r\nNOTE The filter function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the filter function can be applied \r\nsuccessfully to a host object is implementation-dependent.\r\n15.4.4.21 Array.prototype.reduce ( callbackfn [ , initialValue ] )\r\ncallbackfn should be a function that takes four arguments. reduce calls the callback, as a function, once for \r\neach element present in the array, in ascending order.\r\ncallbackfn is called with four arguments: the previousValue (or value from the previous call to callbackfn), the \r\ncurrentValue (value of the current element), the currentIndex, and the object being traversed. The first time \r\nthat callback is called, the previousValue and currentValue can be one of two values. If an initialValue was \r\nprovided in the call to reduce, then previousValue will be equal to initialValue and currentValue will be equal \r\nto the first value in the array. If no initialValue was provided, then previousValue will be equal to the first value \r\nin the array and currentValue will be equal to the second. It is a TypeError if the array contains no elements \r\nand initialValue is not provided.\r\nreduce does not directly mutate the object on which it is called but the object may be mutated by the calls to \r\ncallbackfn.\r\nThe range of elements processed by reduce is set before the first call to callbackfn. Elements that are \r\nappended to the array after the call to reduce begins will not be visited by callbackfn. If existing elements of \r\nthe array are changed, their value as passed to callbackfn will be the value at the time reduce visits them; \r\nelements that are deleted after the call to reduce begins and before being visited are not visited.\r\nWhen the reduce method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n5. If len is 0 and initialValue is not present, throw a TypeError exception.\r\n6. Let k be 0.\r\n7. If initialValue is present, then\r\na. Set accumulator to initialValue.\r\n8. Else, initialValue is not present",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/d2dae2ab-b325-4d97-aac6-3d6fdf92f069.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e33e92121f8df16b53ba02951fa5deaa5ab3e5b0a10132a7be6818a9ede35d1a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 596
      },
      {
        "segments": [
          {
            "segment_id": "ce3bd2f2-d2d8-4182-b765-3a6ff2d3e895",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 151,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 139\r\na. Let kPresent be false.\r\nb. Repeat, while kPresent is false and k < len\r\ni. Let Pk be ToString(k).\r\nii. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument \r\nPk.\r\niii. If kPresent is true, then\r\n1. Let accumulator be the result of calling the [[Get]] internal method of O with \r\nargument Pk.\r\niv. Increase k by 1.\r\nc. If kPresent is false, throw a TypeError exception.\r\n9. Repeat, while k < len\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.\r\nii. Let accumulator be the result of calling the [[Call]] internal method of callbackfn with \r\nundefined as the this value and argument list containing accumulator, kValue, k, and O.\r\nd. Increase k by 1.\r\n10. Return accumulator.\r\nThe length property of the reduce method is 1.\r\nNOTE The reduce function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the reduce function can be applied \r\nsuccessfully to a host object is implementation-dependent.\r\n15.4.4.22 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\r\ncallbackfn should be a function that takes four arguments. reduceRight calls the callback, as a function, \r\nonce for each element present in the array, in descending order.\r\ncallbackfn is called with four arguments: the previousValue (or value from the previous call to callbackfn), the \r\ncurrentValue (value of the current element), the currentIndex, and the object being traversed. The first time the \r\nfunction is called, the previousValue and currentValue can be one of two values. If an initialValue was provided \r\nin the call to reduceRight, then previousValue will be equal to initialValue and currentValue will be equal to the \r\nlast value in the array. If no initialValue was provided, then previousValue will be equal to the last value in the \r\narray and currentValue will be equal to the second-to-last value. It is a TypeError if the array contains no \r\nelements and initialValue is not provided.\r\nreduceRight does not directly mutate the object on which it is called but the object may be mutated by the \r\ncalls to callbackfn.\r\nThe range of elements processed by reduceRight is set before the first call to callbackfn. Elements that are \r\nappended to the array after the call to reduceRight begins will not be visited by callbackfn. If existing\r\nelements of the array are changed by callbackfn, their value as passed to callbackfn will be the value at the \r\ntime reduceRight visits them; elements that are deleted after the call to reduceRight begins and before \r\nbeing visited are not visited.\r\nWhen the reduceRight method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n5. If len is 0 and initialValue is not present, throw a TypeError exception.\r\n6. Let k be len-1.\r\n7. If initialValue is present, then\r\na. Set accumulator to initialValue.\r\n8. Else, initialValue is not present\r\na. Let kPresent be false.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/ce3bd2f2-d2d8-4182-b765-3a6ff2d3e895.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d67b4d61da8b9112a79be41dfe8cf7c07701657cd3c28a344832f05be068ce51",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 582
      },
      {
        "segments": [
          {
            "segment_id": "ce3bd2f2-d2d8-4182-b765-3a6ff2d3e895",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 151,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 139\r\na. Let kPresent be false.\r\nb. Repeat, while kPresent is false and k < len\r\ni. Let Pk be ToString(k).\r\nii. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument \r\nPk.\r\niii. If kPresent is true, then\r\n1. Let accumulator be the result of calling the [[Get]] internal method of O with \r\nargument Pk.\r\niv. Increase k by 1.\r\nc. If kPresent is false, throw a TypeError exception.\r\n9. Repeat, while k < len\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.\r\nii. Let accumulator be the result of calling the [[Call]] internal method of callbackfn with \r\nundefined as the this value and argument list containing accumulator, kValue, k, and O.\r\nd. Increase k by 1.\r\n10. Return accumulator.\r\nThe length property of the reduce method is 1.\r\nNOTE The reduce function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the reduce function can be applied \r\nsuccessfully to a host object is implementation-dependent.\r\n15.4.4.22 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\r\ncallbackfn should be a function that takes four arguments. reduceRight calls the callback, as a function, \r\nonce for each element present in the array, in descending order.\r\ncallbackfn is called with four arguments: the previousValue (or value from the previous call to callbackfn), the \r\ncurrentValue (value of the current element), the currentIndex, and the object being traversed. The first time the \r\nfunction is called, the previousValue and currentValue can be one of two values. If an initialValue was provided \r\nin the call to reduceRight, then previousValue will be equal to initialValue and currentValue will be equal to the \r\nlast value in the array. If no initialValue was provided, then previousValue will be equal to the last value in the \r\narray and currentValue will be equal to the second-to-last value. It is a TypeError if the array contains no \r\nelements and initialValue is not provided.\r\nreduceRight does not directly mutate the object on which it is called but the object may be mutated by the \r\ncalls to callbackfn.\r\nThe range of elements processed by reduceRight is set before the first call to callbackfn. Elements that are \r\nappended to the array after the call to reduceRight begins will not be visited by callbackfn. If existing\r\nelements of the array are changed by callbackfn, their value as passed to callbackfn will be the value at the \r\ntime reduceRight visits them; elements that are deleted after the call to reduceRight begins and before \r\nbeing visited are not visited.\r\nWhen the reduceRight method is called with one or two arguments, the following steps are taken:\r\n1. Let O be the result of calling ToObject passing the this value as the argument.\r\n2. Let lenValue be the result of calling the [[Get]] internal method of O with the argument \"length\".\r\n3. Let len be ToUint32(lenValue).\r\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n5. If len is 0 and initialValue is not present, throw a TypeError exception.\r\n6. Let k be len-1.\r\n7. If initialValue is present, then\r\na. Set accumulator to initialValue.\r\n8. Else, initialValue is not present\r\na. Let kPresent be false.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/ce3bd2f2-d2d8-4182-b765-3a6ff2d3e895.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d67b4d61da8b9112a79be41dfe8cf7c07701657cd3c28a344832f05be068ce51",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 582
      },
      {
        "segments": [
          {
            "segment_id": "8f906688-cdde-43e4-95ba-1ce2dbc4a6ad",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 152,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "140 © Ecma International 2011\r\nb. Repeat, while kPresent is false and k ≥ 0\r\ni. Let Pk be ToString(k).\r\nii. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument \r\nPk.\r\niii. If kPresent is true, then\r\n1. Let accumulator be the result of calling the [[Get]] internal method of O with \r\nargument Pk.\r\niv. Decrease k by 1.\r\nc. If kPresent is false, throw a TypeError exception.\r\n9. Repeat, while k ≥ 0\r\na. Let Pk be ToString(k).\r\nb. Let kPresent be the result of calling the [[HasProperty]] internal method of O with argument Pk.\r\nc. If kPresent is true, then\r\ni. Let kValue be the result of calling the [[Get]] internal method of O with argument Pk.\r\nii. Let accumulator be the result of calling the [[Call]] internal method of callbackfn with \r\nundefined as the this value and argument list containing accumulator, kValue, k, and O.\r\nd. Decrease k by 1.\r\n10. Return accumulator.\r\nThe length property of the reduceRight method is 1.\r\nNOTE The reduceRight function is intentionally generic; it does not require that its this value be an Array object. \r\nTherefore it can be transferred to other kinds of objects for use as a method. Whether the reduceRight function can be \r\napplied successfully to a host object is implementation-dependent.\r\n15.4.5 Properties of Array Instances\r\nArray instances inherit properties from the Array prototype object and their [[Class]] internal property value is \r\n\"Array\". Array instances also have the following properties.\r\n15.4.5.1 [[DefineOwnProperty]] ( P, Desc, Throw )\r\nArray objects use a variation of the [[DefineOwnProperty]] internal method used for other native ECMAScript \r\nobjects (8.12.9).\r\nAssume A is an Array object, Desc is a Property Descriptor, and Throw is a Boolean flag.\r\nIn the following algorithm, the term ―Reject‖ means ―If Throw is true, then throw a TypeError exception, otherwise \r\nreturn false.‖\r\nWhen the [[DefineOwnProperty]] internal method of A is called with property P, Property Descriptor Desc, and \r\nBoolean flag Throw, the following steps are taken:\r\n1. Let oldLenDesc be the result of calling the [[GetOwnProperty]] internal method of A passing \"length\" as \r\nthe argument. The result will never be undefined or an accessor descriptor because Array objects are \r\ncreated with a length data property that cannot be deleted or reconfigured.\r\n2. Let oldLen be oldLenDesc.[[Value]].\r\n3. If P is \"length\", then\r\na. If the [[Value]] field of Desc is absent, then\r\ni. Return the result of calling the default [[DefineOwnProperty]] internal method (8.12.9) on A\r\npassing \"length\", Desc, and Throw as arguments.\r\nb. Let newLenDesc be a copy of Desc.\r\nc. Let newLen be ToUint32(Desc.[[Value]]).\r\nd. If newLen is not equal to ToNumber( Desc.[[Value]]), throw a RangeError exception.\r\ne. Set newLenDesc.[[Value] to newLen.\r\nf. If newLen ≥oldLen, then\r\ni. Return the result of calling the default [[DefineOwnProperty]] internal method (8.12.9) on A\r\npassing \"length\", newLenDesc, and Throw as arguments.\r\ng. Reject if oldLenDesc.[[Writable]] is false.\r\nh. If newLenDesc.[[Writable]] is absent or has the value true, let newWritable be true.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/8f906688-cdde-43e4-95ba-1ce2dbc4a6ad.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=de81d30bc34a11a6d7404d66b9ec7e1d2c458ea8287101244d401cf12ef5bdc6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 497
      },
      {
        "segments": [
          {
            "segment_id": "92928d29-4761-4f32-8d75-8bc90f4bdf4c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 153,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 141\r\ni. Else,\r\ni. Need to defer setting the [[Writable]] attribute to false in case any elements cannot be \r\ndeleted.\r\nii. Let newWritable be false.\r\niii. Set newLenDesc.[[Writable] to true.\r\nj. Let succeeded be the result of calling the default [[DefineOwnProperty]] internal method (8.12.9) on \r\nA passing \"length\", newLenDesc, and Throw as arguments.\r\nk. If succeeded is false, return false.\r\nl. While newLen < oldLen repeat,\r\ni. Set oldLen to oldLen – 1.\r\nii. Let deleteSucceeded be the result of calling the [[Delete]] internal method of A passing \r\nToString(oldLen) and false as arguments.\r\niii. If deleteSucceeded is false, then\r\n1. Set newLenDesc.[[Value] to oldLen+1.\r\n2. If newWritable is false, set newLenDesc.[[Writable] to false.\r\n3. Call the default [[DefineOwnProperty]] internal method (8.12.9) on A passing \r\n\"length\", newLenDesc, and false as arguments.\r\n4. Reject.\r\nm. If newWritable is false, then\r\ni. Call the default [[DefineOwnProperty]] internal method (8.12.9) on A passing \"length\", \r\nProperty Descriptor{[[Writable]]: false}, and false as arguments. This call will always \r\nreturn true.\r\nn. Return true.\r\n4. Else if P is an array index (15.4), then\r\na. Let index be ToUint32(P).\r\nb. Reject if index ≥ oldLen and oldLenDesc.[[Writable]] is false.\r\nc. Let succeeded be the result of calling the default [[DefineOwnProperty]] internal method (8.12.9) on \r\nA passing P, Desc, and false as arguments.\r\nd. Reject if succeeded is false.\r\ne. If index ≥ oldLen\r\ni. Set oldLenDesc.[[Value]] to index + 1.\r\nii. Call the default [[DefineOwnProperty]] internal method (8.12.9) on A passing \"length\", \r\noldLenDesc, and false as arguments. This call will always return true.\r\nf. Return true.\r\n5. Return the result of calling the default [[DefineOwnProperty]] internal method (8.12.9) on A passing P, \r\nDesc, and Throw as arguments.\r\n15.4.5.2 length\r\nThe length property of this Array object is a data property whose value is always numerically greater than \r\nthe name of every deletable property whose name is an array index.\r\nThe length property initially has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }.\r\nNOTE Attempting to set the length property of an Array object to a value that is numerically less than or equal to the \r\nlargest numeric property name of an existing array indexed non-deletable property of the array will result in the length \r\nbeing set to a numeric value that is one greater than that largest numeric property name. See 15.4.5.1.\r\n15.5 String Objects\r\n15.5.1 The String Constructor Called as a Function\r\nWhen String is called as a function rather than as a constructor, it performs a type conversion.\r\n15.5.1.1 String ( [ value ] )\r\nReturns a String value (not a String object) computed by ToString(value). If value is not supplied, the empty \r\nString \"\" is returned.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/92928d29-4761-4f32-8d75-8bc90f4bdf4c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c63d2315a96f3d9f7bb51e8ccbea92b9a1a117c327ebc0c548a33da4e090dbaa",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 447
      },
      {
        "segments": [
          {
            "segment_id": "1943b6f1-3f21-48a3-aa24-10d3796982d3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 154,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "142 © Ecma International 2011\r\n15.5.2 The String Constructor\r\nWhen String is called as part of a new expression, it is a constructor: it initialises the newly created object.\r\n15.5.2.1 new String ( [ value ] )\r\nThe [[Prototype]] internal property of the newly constructed object is set to the standard built-in String \r\nprototype object that is the initial value of String.prototype (15.5.3.1).\r\nThe [[Class]] internal property of the newly constructed object is set to \"String\".\r\nThe [[Extensible]] internal property of the newly constructed object is set to true.\r\nThe [[PrimitiveValue]] internal property of the newly constructed object is set to ToString(value), or to the empty \r\nString if value is not supplied.\r\n15.5.3 Properties of the String Constructor\r\nThe value of the [[Prototype]] internal property of the String constructor is the standard built-in Function \r\nprototype object (15.3.4).\r\nBesides the internal properties and the length property (whose value is 1), the String constructor has the \r\nfollowing properties:\r\n15.5.3.1 String.prototype\r\nThe initial value of String.prototype is the standard built-in String prototype object (15.5.4).\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.5.3.2 String.fromCharCode ( [ char0 [ , char1 [ , … ] ] ] )\r\nReturns a String value containing as many characters as the number of arguments. Each argument specifies \r\none character of the resulting String, with the first argument specifying the first character, and so on, from left \r\nto right. An argument is converted to a character by applying the operation ToUint16 (9.7) and regarding the \r\nresulting 16-bit integer as the code unit value of a character. If no arguments are supplied, the result is the \r\nempty String.\r\nThe length property of the fromCharCode function is 1.\r\n15.5.4 Properties of the String Prototype Object\r\nThe String prototype object is itself a String object (its [[Class]] is \"String\") whose value is an empty String.\r\nThe value of the [[Prototype]] internal property of the String prototype object is the standard built-in Object \r\nprototype object (15.2.4).\r\n15.5.4.1 String.prototype.constructor\r\nThe initial value of String.prototype.constructor is the built-in String constructor.\r\n15.5.4.2 String.prototype.toString ( )\r\nReturns this String value. (Note that, for a String object, the toString method happens to return the same \r\nthing as the valueOf method.)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/1943b6f1-3f21-48a3-aa24-10d3796982d3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=26ac3eb98a668f1e4e5165c31a7e27a2d9a69cf08dcab707f36cc3ac4e1ec7b4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 368
      },
      {
        "segments": [
          {
            "segment_id": "bf03d970-c3ff-4fbb-81da-f04cb273097d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 155,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 143\r\nThe toString function is not generic; it throws a TypeError exception if its this value is not a String or a \r\nString object. Therefore, it cannot be transferred to other kinds of objects for use as a method.\r\n15.5.4.3 String.prototype.valueOf ( )\r\nReturns this String value.\r\nThe valueOf function is not generic; it throws a TypeError exception if its this value is not a String or String \r\nobject. Therefore, it cannot be transferred to other kinds of objects for use as a method.\r\n15.5.4.4 String.prototype.charAt (pos)\r\nReturns a String containing the character at position pos in the String resulting from converting this object to a \r\nString. If there is no character at that position, the result is the empty String. The result is a String value, not a \r\nString object.\r\nIf pos is a value of Number type that is an integer, then the result of x.charAt(pos) is equal to the result of \r\nx.substring(pos, pos+1).\r\nWhen the charAt method is called with one argument pos, the following steps are taken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let position be ToInteger(pos).\r\n4. Let size be the number of characters in S.\r\n5. If position < 0 or position ≥ size, return the empty String.\r\n6. Return a String of length 1, containing one character from S, namely the character at position position, where \r\nthe first (leftmost) character in S is considered to be at position 0, the next one at position 1, and so on.\r\nNOTE The charAt function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.5 String.prototype.charCodeAt (pos)\r\nReturns a Number (a nonnegative integer less than 2\r\n16) representing the code unit value of the character at \r\nposition pos in the String resulting from converting this object to a String. If there is no character at that \r\nposition, the result is NaN.\r\nWhen the charCodeAt method is called with one argument pos, the following steps are taken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let position be ToInteger(pos).\r\n4. Let size be the number of characters in S.\r\n5. If position < 0 or position ≥ size, return NaN.\r\n6. Return a value of Number type, whose value is the code unit value of the character at position position in the \r\nString S, where the first (leftmost) character in S is considered to be at position 0, the next one at position 1, \r\nand so on.\r\nNOTE The charCodeAt function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.6 String.prototype.concat ( [ string1 [ , string2 [ , … ] ] ] )\r\nWhen the concat method is called with zero or more arguments string1, string2, etc., it returns a String \r\nconsisting of the characters of this object (converted to a String) followed by the characters of each of string1, \r\nstring2, etc. (where each argument is converted to a String). The result is a String value, not a String object. \r\nThe following steps are taken:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/bf03d970-c3ff-4fbb-81da-f04cb273097d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d709d7f5541dd32d4d5ee16040041275b444890a2263b6203d4e2ddb2ad960b3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 578
      },
      {
        "segments": [
          {
            "segment_id": "bf03d970-c3ff-4fbb-81da-f04cb273097d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 155,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 143\r\nThe toString function is not generic; it throws a TypeError exception if its this value is not a String or a \r\nString object. Therefore, it cannot be transferred to other kinds of objects for use as a method.\r\n15.5.4.3 String.prototype.valueOf ( )\r\nReturns this String value.\r\nThe valueOf function is not generic; it throws a TypeError exception if its this value is not a String or String \r\nobject. Therefore, it cannot be transferred to other kinds of objects for use as a method.\r\n15.5.4.4 String.prototype.charAt (pos)\r\nReturns a String containing the character at position pos in the String resulting from converting this object to a \r\nString. If there is no character at that position, the result is the empty String. The result is a String value, not a \r\nString object.\r\nIf pos is a value of Number type that is an integer, then the result of x.charAt(pos) is equal to the result of \r\nx.substring(pos, pos+1).\r\nWhen the charAt method is called with one argument pos, the following steps are taken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let position be ToInteger(pos).\r\n4. Let size be the number of characters in S.\r\n5. If position < 0 or position ≥ size, return the empty String.\r\n6. Return a String of length 1, containing one character from S, namely the character at position position, where \r\nthe first (leftmost) character in S is considered to be at position 0, the next one at position 1, and so on.\r\nNOTE The charAt function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.5 String.prototype.charCodeAt (pos)\r\nReturns a Number (a nonnegative integer less than 2\r\n16) representing the code unit value of the character at \r\nposition pos in the String resulting from converting this object to a String. If there is no character at that \r\nposition, the result is NaN.\r\nWhen the charCodeAt method is called with one argument pos, the following steps are taken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let position be ToInteger(pos).\r\n4. Let size be the number of characters in S.\r\n5. If position < 0 or position ≥ size, return NaN.\r\n6. Return a value of Number type, whose value is the code unit value of the character at position position in the \r\nString S, where the first (leftmost) character in S is considered to be at position 0, the next one at position 1, \r\nand so on.\r\nNOTE The charCodeAt function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.6 String.prototype.concat ( [ string1 [ , string2 [ , … ] ] ] )\r\nWhen the concat method is called with zero or more arguments string1, string2, etc., it returns a String \r\nconsisting of the characters of this object (converted to a String) followed by the characters of each of string1, \r\nstring2, etc. (where each argument is converted to a String). The result is a String value, not a String object. \r\nThe following steps are taken:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/bf03d970-c3ff-4fbb-81da-f04cb273097d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d709d7f5541dd32d4d5ee16040041275b444890a2263b6203d4e2ddb2ad960b3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 578
      },
      {
        "segments": [
          {
            "segment_id": "e3f7ae90-32b6-4e17-b6f3-1fe1c9031919",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 156,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "144 © Ecma International 2011\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let args be an internal list that is a copy of the argument list passed to this function.\r\n4. Let R be S.\r\n5. Repeat, while args is not empty\r\na. Remove the first element from args and let next be the value of that element.\r\nb. Let R be the String value consisting of the characters in the previous value of R followed by the \r\ncharacters of ToString(next).\r\n6. Return R.\r\nThe length property of the concat method is 1.\r\nNOTE The concat function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.7 String.prototype.indexOf (searchString, position)\r\nIf searchString appears as a substring of the result of converting this object to a String, at one or more positions \r\nthat are greater than or equal to position, then the index of the smallest such position is returned; \r\notherwise, -1 is returned. If position is undefined, 0 is assumed, so as to search all of the String.\r\nThe indexOf method takes two arguments, searchString and position, and performs the following steps:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let searchStr be ToString(searchString).\r\n4. Let pos be ToInteger(position). (If position is undefined, this step produces the value 0).\r\n5. Let len be the number of characters in S.\r\n6. Let start be min(max(pos, 0), len).\r\n7. Let searchLen be the number of characters in searchStr.\r\n8. Return the smallest possible integer k not smaller than start such that k+ searchLen is not greater than len, \r\nand for all nonnegative integers j less than searchLen, the character at position k+j of S is the same as the \r\ncharacter at position j of searchStr; but if there is no such integer k, then return the value -1.\r\nThe length property of the indexOf method is 1.\r\nNOTE The indexOf function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.8 String.prototype.lastIndexOf (searchString, position)\r\nIf searchString appears as a substring of the result of converting this object to a String at one or more positions \r\nthat are smaller than or equal to position, then the index of the greatest such position is returned; \r\notherwise, -1 is returned. If position is undefined, the length of the String value is assumed, so as to search \r\nall of the String.\r\nThe lastIndexOf method takes two arguments, searchString and position, and performs the following steps:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let searchStr be ToString(searchString).\r\n4. Let numPos be ToNumber(position). (If position is undefined, this step produces the value NaN).\r\n5. If numPos is NaN, let pos be +; otherwise, let pos be ToInteger(numPos).\r\n6. Let len be the number of characters in S.\r\n7. Let start min(max(pos, 0), len).\r\n8. Let searchLen be the number of characters in searchStr.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/e3f7ae90-32b6-4e17-b6f3-1fe1c9031919.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f1df0a62e92ac40fd236d4ecb670ee94c1e540d57e3d3e6a2f4a67b991b60b57",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 569
      },
      {
        "segments": [
          {
            "segment_id": "e3f7ae90-32b6-4e17-b6f3-1fe1c9031919",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 156,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "144 © Ecma International 2011\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let args be an internal list that is a copy of the argument list passed to this function.\r\n4. Let R be S.\r\n5. Repeat, while args is not empty\r\na. Remove the first element from args and let next be the value of that element.\r\nb. Let R be the String value consisting of the characters in the previous value of R followed by the \r\ncharacters of ToString(next).\r\n6. Return R.\r\nThe length property of the concat method is 1.\r\nNOTE The concat function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.7 String.prototype.indexOf (searchString, position)\r\nIf searchString appears as a substring of the result of converting this object to a String, at one or more positions \r\nthat are greater than or equal to position, then the index of the smallest such position is returned; \r\notherwise, -1 is returned. If position is undefined, 0 is assumed, so as to search all of the String.\r\nThe indexOf method takes two arguments, searchString and position, and performs the following steps:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let searchStr be ToString(searchString).\r\n4. Let pos be ToInteger(position). (If position is undefined, this step produces the value 0).\r\n5. Let len be the number of characters in S.\r\n6. Let start be min(max(pos, 0), len).\r\n7. Let searchLen be the number of characters in searchStr.\r\n8. Return the smallest possible integer k not smaller than start such that k+ searchLen is not greater than len, \r\nand for all nonnegative integers j less than searchLen, the character at position k+j of S is the same as the \r\ncharacter at position j of searchStr; but if there is no such integer k, then return the value -1.\r\nThe length property of the indexOf method is 1.\r\nNOTE The indexOf function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.8 String.prototype.lastIndexOf (searchString, position)\r\nIf searchString appears as a substring of the result of converting this object to a String at one or more positions \r\nthat are smaller than or equal to position, then the index of the greatest such position is returned; \r\notherwise, -1 is returned. If position is undefined, the length of the String value is assumed, so as to search \r\nall of the String.\r\nThe lastIndexOf method takes two arguments, searchString and position, and performs the following steps:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let searchStr be ToString(searchString).\r\n4. Let numPos be ToNumber(position). (If position is undefined, this step produces the value NaN).\r\n5. If numPos is NaN, let pos be +; otherwise, let pos be ToInteger(numPos).\r\n6. Let len be the number of characters in S.\r\n7. Let start min(max(pos, 0), len).\r\n8. Let searchLen be the number of characters in searchStr.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/e3f7ae90-32b6-4e17-b6f3-1fe1c9031919.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f1df0a62e92ac40fd236d4ecb670ee94c1e540d57e3d3e6a2f4a67b991b60b57",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 569
      },
      {
        "segments": [
          {
            "segment_id": "4b07bcca-4f45-4f4f-9238-24bbc1515bc6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 157,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 145\r\n9. Return the largest possible nonnegative integer k not larger than start such that k+ searchLen is not greater \r\nthan len, and for all nonnegative integers j less than searchLen, the character at position k+j of S is the same \r\nas the character at position j of searchStr; but if there is no such integer k, then return the value -1.\r\nThe length property of the lastIndexOf method is 1.\r\nNOTE The lastIndexOf function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.9 String.prototype.localeCompare (that)\r\nWhen the localeCompare method is called with one argument that, it returns a Number other than NaN that \r\nrepresents the result of a locale-sensitive String comparison of the this value (converted to a String) with that\r\n(converted to a String). The two Strings are S and That. The two Strings are compared in an implementation\u0002defined fashion. The result is intended to order String values in the sort order specified by the system default \r\nlocale, and will be negative, zero, or positive, depending on whether S comes before That in the sort order, the \r\nStrings are equal, or S comes after That in the sort order, respectively.\r\nBefore perform the comparisons the following steps are performed to prepare the Strings:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let That be ToString(that).\r\nThe localeCompare method, if considered as a function of two arguments this and that, is a consistent \r\ncomparison function (as defined in 15.4.4.11) on the set of all Strings. \r\nThe actual return values are implementation-defined to permit implementers to encode additional information \r\nin the value, but the function is required to define a total ordering on all Strings and to return 0 when \r\ncomparing Strings that are considered canonically equivalent by the Unicode standard.\r\nIf no language-sensitive comparison at all is available from the host environment, this function may perform a \r\nbitwise comparison.\r\nNOTE 1 The localeCompare method itself is not directly suitable as an argument to Array.prototype.sort\r\nbecause the latter requires a function of two arguments.\r\nNOTE 2 This function is intended to rely on whatever language-sensitive comparison functionality is available to the \r\nECMAScript environment from the host environment, and to compare according to the rules of the host environment‘s \r\ncurrent locale. It is strongly recommended that this function treat Strings that are canonically equivalent according to the \r\nUnicode standard as identical (in other words, compare the Strings as if they had both been converted to Normalised \r\nForm C or D first). It is also recommended that this function not honour Unicode compatibility equivalences or \r\ndecompositions.\r\nNOTE 3 The second parameter to this function is likely to be used in a future version of this standard; it is \r\nrecommended that implementations do not use this parameter position for anything else.\r\nNOTE 4 The localeCompare function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.10 String.prototype.match (regexp)\r\nWhen the match method is called with argument regexp, the following steps are taken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. If Type(regexp) is Object and the value of the [[Class]] internal property of regexp is \"RegExp\", then let rx\r\nbe regexp;\r\n4. Else, let rx be a new RegExp object created as if by the expression new RegExp(regexp) where RegExp\r\nis the standard built-in constructor with that name.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/4b07bcca-4f45-4f4f-9238-24bbc1515bc6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fdaaef14319f482c531aad65330ae54b5c0232bb66d5ae440f684be7991a3d7d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 632
      },
      {
        "segments": [
          {
            "segment_id": "4b07bcca-4f45-4f4f-9238-24bbc1515bc6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 157,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 145\r\n9. Return the largest possible nonnegative integer k not larger than start such that k+ searchLen is not greater \r\nthan len, and for all nonnegative integers j less than searchLen, the character at position k+j of S is the same \r\nas the character at position j of searchStr; but if there is no such integer k, then return the value -1.\r\nThe length property of the lastIndexOf method is 1.\r\nNOTE The lastIndexOf function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.9 String.prototype.localeCompare (that)\r\nWhen the localeCompare method is called with one argument that, it returns a Number other than NaN that \r\nrepresents the result of a locale-sensitive String comparison of the this value (converted to a String) with that\r\n(converted to a String). The two Strings are S and That. The two Strings are compared in an implementation\u0002defined fashion. The result is intended to order String values in the sort order specified by the system default \r\nlocale, and will be negative, zero, or positive, depending on whether S comes before That in the sort order, the \r\nStrings are equal, or S comes after That in the sort order, respectively.\r\nBefore perform the comparisons the following steps are performed to prepare the Strings:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let That be ToString(that).\r\nThe localeCompare method, if considered as a function of two arguments this and that, is a consistent \r\ncomparison function (as defined in 15.4.4.11) on the set of all Strings. \r\nThe actual return values are implementation-defined to permit implementers to encode additional information \r\nin the value, but the function is required to define a total ordering on all Strings and to return 0 when \r\ncomparing Strings that are considered canonically equivalent by the Unicode standard.\r\nIf no language-sensitive comparison at all is available from the host environment, this function may perform a \r\nbitwise comparison.\r\nNOTE 1 The localeCompare method itself is not directly suitable as an argument to Array.prototype.sort\r\nbecause the latter requires a function of two arguments.\r\nNOTE 2 This function is intended to rely on whatever language-sensitive comparison functionality is available to the \r\nECMAScript environment from the host environment, and to compare according to the rules of the host environment‘s \r\ncurrent locale. It is strongly recommended that this function treat Strings that are canonically equivalent according to the \r\nUnicode standard as identical (in other words, compare the Strings as if they had both been converted to Normalised \r\nForm C or D first). It is also recommended that this function not honour Unicode compatibility equivalences or \r\ndecompositions.\r\nNOTE 3 The second parameter to this function is likely to be used in a future version of this standard; it is \r\nrecommended that implementations do not use this parameter position for anything else.\r\nNOTE 4 The localeCompare function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.10 String.prototype.match (regexp)\r\nWhen the match method is called with argument regexp, the following steps are taken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. If Type(regexp) is Object and the value of the [[Class]] internal property of regexp is \"RegExp\", then let rx\r\nbe regexp;\r\n4. Else, let rx be a new RegExp object created as if by the expression new RegExp(regexp) where RegExp\r\nis the standard built-in constructor with that name.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/4b07bcca-4f45-4f4f-9238-24bbc1515bc6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fdaaef14319f482c531aad65330ae54b5c0232bb66d5ae440f684be7991a3d7d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 632
      },
      {
        "segments": [
          {
            "segment_id": "54652cec-b94f-4e81-a392-a6084993e85f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 158,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "146 © Ecma International 2011\r\n5. Let global be the result of calling the [[Get]] internal method of rx with argument \"global\".\r\n6. Let exec be the standard built-in function RegExp.prototype.exec (see 15.10.6.2)\r\n7. If global is not true, then\r\na. Return the result of calling the [[Call]] internal method of exec with rx as the this value and \r\nargument list containing S.\r\n8. Else, global is true\r\na. Call the [[Put]] internal method of rx with arguments \"lastIndex\" and 0.\r\nb. Let A be a new array created as if by the expression new Array() where Array is the standard \r\nbuilt-in constructor with that name.\r\nc. Let previousLastIndex be 0.\r\nd. Let n be 0.\r\ne. Let lastMatch be true.\r\nf. Repeat, while lastMatch is true\r\ni. Let result be the result of calling the [[Call]] internal method of exec with rx as the this\r\nvalue and argument list containing S.\r\nii. If result is null, then set lastMatch to false.\r\niii. Else, result is not null\r\n1. Let thisIndex be the result of calling the [[Get]] internal method of rx with \r\nargument \"lastIndex\".\r\n2. If thisIndex = previousLastIndex then\r\na Call the [[Put]] internal method of rx with arguments \"lastIndex\" and \r\nthisIndex+1.\r\nb Set previousLastIndex to thisIndex+1.\r\n3. Else, set previousLastIndex to thisIndex.\r\n4. Let matchStr be the result of calling the [[Get]] internal method of result with \r\nargument \"0\".\r\n5. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(n), \r\nthe Property Descriptor {[[Value]]: matchStr, [[Writable]]: true, [[Enumerable]]: \r\ntrue, [[configurable]]: true}, and false.\r\n6. Increment n.\r\ng. If n = 0, then return null.\r\nh. Return A.\r\nNOTE The match function is intentionally generic; it does not require that its this value be a String object. Therefore, \r\nit can be transferred to other kinds of objects for use as a method.\r\n15.5.4.11 String.prototype.replace (searchValue, replaceValue)\r\nFirst set string according to the following steps:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let string be the result of calling ToString, giving it the this value as its argument.\r\nIf searchValue is a regular expression (an object whose [[Class]] internal property is \"RegExp\"), do the \r\nfollowing: If searchValue.global is false, then search string for the first match of the regular expression \r\nsearchValue. If searchValue.global is true, then search string for all matches of the regular expression \r\nsearchValue. Do the search in the same manner as in String.prototype.match, including the update of \r\nsearchValue.lastIndex. Let m be the number of left capturing parentheses in searchValue (using \r\nNcapturingParens as specified in 15.10.2.1).\r\nIf searchValue is not a regular expression, let searchString be ToString(searchValue) and search string for the first \r\noccurrence of searchString. Let m be 0.\r\nIf replaceValue is a function, then for each matched substring, call the function with the following m + 3 \r\narguments. Argument 1 is the substring that matched. If searchValue is a regular expression, the next m\r\narguments are all of the captures in the MatchResult (see 15.10.2.1). Argument m + 2 is the offset within string\r\nwhere the match occurred, and argument m + 3 is string. The result is a String value derived from the original \r\ninput by replacing each matched substring with the corresponding return value of the function call, converted \r\nto a String if need be.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/54652cec-b94f-4e81-a392-a6084993e85f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=459c7fc45768294e2ce058e6412c0330b717913bcabca8d5ecb9dc4d39e6a5a5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 546
      },
      {
        "segments": [
          {
            "segment_id": "54652cec-b94f-4e81-a392-a6084993e85f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 158,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "146 © Ecma International 2011\r\n5. Let global be the result of calling the [[Get]] internal method of rx with argument \"global\".\r\n6. Let exec be the standard built-in function RegExp.prototype.exec (see 15.10.6.2)\r\n7. If global is not true, then\r\na. Return the result of calling the [[Call]] internal method of exec with rx as the this value and \r\nargument list containing S.\r\n8. Else, global is true\r\na. Call the [[Put]] internal method of rx with arguments \"lastIndex\" and 0.\r\nb. Let A be a new array created as if by the expression new Array() where Array is the standard \r\nbuilt-in constructor with that name.\r\nc. Let previousLastIndex be 0.\r\nd. Let n be 0.\r\ne. Let lastMatch be true.\r\nf. Repeat, while lastMatch is true\r\ni. Let result be the result of calling the [[Call]] internal method of exec with rx as the this\r\nvalue and argument list containing S.\r\nii. If result is null, then set lastMatch to false.\r\niii. Else, result is not null\r\n1. Let thisIndex be the result of calling the [[Get]] internal method of rx with \r\nargument \"lastIndex\".\r\n2. If thisIndex = previousLastIndex then\r\na Call the [[Put]] internal method of rx with arguments \"lastIndex\" and \r\nthisIndex+1.\r\nb Set previousLastIndex to thisIndex+1.\r\n3. Else, set previousLastIndex to thisIndex.\r\n4. Let matchStr be the result of calling the [[Get]] internal method of result with \r\nargument \"0\".\r\n5. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(n), \r\nthe Property Descriptor {[[Value]]: matchStr, [[Writable]]: true, [[Enumerable]]: \r\ntrue, [[configurable]]: true}, and false.\r\n6. Increment n.\r\ng. If n = 0, then return null.\r\nh. Return A.\r\nNOTE The match function is intentionally generic; it does not require that its this value be a String object. Therefore, \r\nit can be transferred to other kinds of objects for use as a method.\r\n15.5.4.11 String.prototype.replace (searchValue, replaceValue)\r\nFirst set string according to the following steps:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let string be the result of calling ToString, giving it the this value as its argument.\r\nIf searchValue is a regular expression (an object whose [[Class]] internal property is \"RegExp\"), do the \r\nfollowing: If searchValue.global is false, then search string for the first match of the regular expression \r\nsearchValue. If searchValue.global is true, then search string for all matches of the regular expression \r\nsearchValue. Do the search in the same manner as in String.prototype.match, including the update of \r\nsearchValue.lastIndex. Let m be the number of left capturing parentheses in searchValue (using \r\nNcapturingParens as specified in 15.10.2.1).\r\nIf searchValue is not a regular expression, let searchString be ToString(searchValue) and search string for the first \r\noccurrence of searchString. Let m be 0.\r\nIf replaceValue is a function, then for each matched substring, call the function with the following m + 3 \r\narguments. Argument 1 is the substring that matched. If searchValue is a regular expression, the next m\r\narguments are all of the captures in the MatchResult (see 15.10.2.1). Argument m + 2 is the offset within string\r\nwhere the match occurred, and argument m + 3 is string. The result is a String value derived from the original \r\ninput by replacing each matched substring with the corresponding return value of the function call, converted \r\nto a String if need be.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/54652cec-b94f-4e81-a392-a6084993e85f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=459c7fc45768294e2ce058e6412c0330b717913bcabca8d5ecb9dc4d39e6a5a5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 546
      },
      {
        "segments": [
          {
            "segment_id": "0c83558d-d881-43f2-80e2-969c5e0a33fc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 159,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 147\r\nOtherwise, let newstring denote the result of converting replaceValue to a String. The result is a String value \r\nderived from the original input String by replacing each matched substring with a String derived from newstring\r\nby replacing characters in newstring by replacement text as specified in Table 22. These $ replacements are \r\ndone left-to-right, and, once such a replacement is performed, the new replacement text is not subject to \r\nfurther replacements. For example, \"$1,$2\".replace(/(\\$(\\d))/g, \"$$1-$1$2\") returns \"$1-\r\n$11,$1-$22\". A $ in newstring that does not match any of the forms below is left as is.\r\nTable 22 — Replacement Text Symbol Substitutions\r\nCharacters Replacement text\r\n$$ $\r\n$& The matched substring.\r\n$„ The portion of string that precedes the matched substring.\r\n$‟ The portion of string that follows the matched substring.\r\n$n The n\r\nth capture, where n is a single digit in the range 1 to 9 and $n is not followed \r\nby a decimal digit. If nm and the nth capture is undefined, use the empty String \r\ninstead. If n>m, the result is implementation-defined.\r\n$nn The nn\r\nth capture, where nn is a two-digit decimal number in the range 01 to 99. If \r\nnnm and the nn\r\nth capture is undefined, use the empty String instead. If nn>m, the \r\nresult is implementation-defined.\r\nNOTE The replace function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.12 String.prototype.search (regexp)\r\nWhen the search method is called with argument regexp, the following steps are taken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let string be the result of calling ToString, giving it the this value as its argument.\r\n3. If Type(regexp) is Object and the value of the [[Class]] internal property of regexp is \"RegExp\", then let rx\r\nbe regexp;\r\n4. Else, let rx be a new RegExp object created as if by the expression new RegExp(regexp) where RegExp\r\nis the standard built-in constructor with that name.\r\n5. Search the value string from its beginning for an occurrence of the regular expression pattern rx. Let result\r\nbe a Number indicating the offset within string where the pattern matched, or –1 if there was no match. The\r\nlastIndex and global properties of regexp are ignored when performing the search. The lastIndex\r\nproperty of regexp is left unchanged.\r\n6. Return result.\r\nNOTE The search function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.13 String.prototype.slice (start, end)\r\nThe slice method takes two arguments, start and end, and returns a substring of the result of converting this \r\nobject to a String, starting from character position start and running to, but not including, character position end\r\n(or through the end of the String if end is undefined). If start is negative, it is treated as sourceLength+start\r\nwhere sourceLength is the length of the String. If end is negative, it is treated as sourceLength+end where \r\nsourceLength is the length of the String. The result is a String value, not a String object. The following steps are \r\ntaken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let len be the number of characters in S.\r\n4. Let intStart be ToInteger(start).\r\n5. If end is undefined, let intEnd be len; else let intEnd be ToInteger(end).\r\n6. If intStart is negative, let from be max(len + intStart,0); else let from be min(intStart, len).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0c83558d-d881-43f2-80e2-969c5e0a33fc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=34f34ec35fd7ccfa7facc764b29b02608e54ce859ba2c1af7af43394e08e138e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 616
      },
      {
        "segments": [
          {
            "segment_id": "0c83558d-d881-43f2-80e2-969c5e0a33fc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 159,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 147\r\nOtherwise, let newstring denote the result of converting replaceValue to a String. The result is a String value \r\nderived from the original input String by replacing each matched substring with a String derived from newstring\r\nby replacing characters in newstring by replacement text as specified in Table 22. These $ replacements are \r\ndone left-to-right, and, once such a replacement is performed, the new replacement text is not subject to \r\nfurther replacements. For example, \"$1,$2\".replace(/(\\$(\\d))/g, \"$$1-$1$2\") returns \"$1-\r\n$11,$1-$22\". A $ in newstring that does not match any of the forms below is left as is.\r\nTable 22 — Replacement Text Symbol Substitutions\r\nCharacters Replacement text\r\n$$ $\r\n$& The matched substring.\r\n$„ The portion of string that precedes the matched substring.\r\n$‟ The portion of string that follows the matched substring.\r\n$n The n\r\nth capture, where n is a single digit in the range 1 to 9 and $n is not followed \r\nby a decimal digit. If nm and the nth capture is undefined, use the empty String \r\ninstead. If n>m, the result is implementation-defined.\r\n$nn The nn\r\nth capture, where nn is a two-digit decimal number in the range 01 to 99. If \r\nnnm and the nn\r\nth capture is undefined, use the empty String instead. If nn>m, the \r\nresult is implementation-defined.\r\nNOTE The replace function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.12 String.prototype.search (regexp)\r\nWhen the search method is called with argument regexp, the following steps are taken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let string be the result of calling ToString, giving it the this value as its argument.\r\n3. If Type(regexp) is Object and the value of the [[Class]] internal property of regexp is \"RegExp\", then let rx\r\nbe regexp;\r\n4. Else, let rx be a new RegExp object created as if by the expression new RegExp(regexp) where RegExp\r\nis the standard built-in constructor with that name.\r\n5. Search the value string from its beginning for an occurrence of the regular expression pattern rx. Let result\r\nbe a Number indicating the offset within string where the pattern matched, or –1 if there was no match. The\r\nlastIndex and global properties of regexp are ignored when performing the search. The lastIndex\r\nproperty of regexp is left unchanged.\r\n6. Return result.\r\nNOTE The search function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.13 String.prototype.slice (start, end)\r\nThe slice method takes two arguments, start and end, and returns a substring of the result of converting this \r\nobject to a String, starting from character position start and running to, but not including, character position end\r\n(or through the end of the String if end is undefined). If start is negative, it is treated as sourceLength+start\r\nwhere sourceLength is the length of the String. If end is negative, it is treated as sourceLength+end where \r\nsourceLength is the length of the String. The result is a String value, not a String object. The following steps are \r\ntaken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let len be the number of characters in S.\r\n4. Let intStart be ToInteger(start).\r\n5. If end is undefined, let intEnd be len; else let intEnd be ToInteger(end).\r\n6. If intStart is negative, let from be max(len + intStart,0); else let from be min(intStart, len).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0c83558d-d881-43f2-80e2-969c5e0a33fc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=34f34ec35fd7ccfa7facc764b29b02608e54ce859ba2c1af7af43394e08e138e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 616
      },
      {
        "segments": [
          {
            "segment_id": "cc6237db-b7e1-47cb-a838-7bb2eafd7139",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 160,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "148 © Ecma International 2011\r\n7. If intEnd is negative, let to be max(len + intEnd,0); else let to be min(intEnd, len).\r\n8. Let span be max(to – from,0).\r\n9. Return a String containing span consecutive characters from S beginning with the character at position from.\r\nThe length property of the slice method is 2.\r\nNOTE The slice function is intentionally generic; it does not require that its this value be a String object. Therefore \r\nit can be transferred to other kinds of objects for use as a method.\r\n15.5.4.14 String.prototype.split (separator, limit)\r\nReturns an Array object into which substrings of the result of converting this object to a String have been \r\nstored. The substrings are determined by searching from left to right for occurrences of separator; these \r\noccurrences are not part of any substring in the returned array, but serve to divide up the String value. The \r\nvalue of separator may be a String of any length or it may be a RegExp object (i.e., an object whose [[Class]] \r\ninternal property is \"RegExp\"; see 15.10).\r\nThe value of separator may be an empty String, an empty regular expression, or a regular expression that can \r\nmatch an empty String. In this case, separator does not match the empty substring at the beginning or end of \r\nthe input String, nor does it match the empty substring at the end of the previous separator match. (For \r\nexample, if separator is the empty String, the String is split up into individual characters; the length of the result \r\narray equals the length of the String, and each substring contains one character.) If separator is a regular \r\nexpression, only the first match at a given position of the this String is considered, even if backtracking could \r\nyield a non-empty-substring match at that position. (For example, \"ab\".split(/a*?/) evaluates to the \r\narray [\"a\",\"b\"], while \"ab\".split(/a*/) evaluates to the array[\"\",\"b\"].)\r\nIf the this object is (or converts to) the empty String, the result depends on whether separator can match the \r\nempty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, \r\nwhich is the empty String.\r\nIf separator is a regular expression that contains capturing parentheses, then each time separator is matched \r\nthe results (including any undefined results) of the capturing parentheses are spliced into the output array. \r\nFor example,\r\n\"A<B>bold</B>and<CODE>coded</CODE>\".split(/<(\\/)?([^<>]+)>/)\r\nevaluates to the array\r\n[\"A\", undefined, \"B\", \"bold\", \"/\", \"B\", \"and\", undefined,\r\n\"CODE\", \"coded\", \"/\", \"CODE\", \"\"]\r\nIf separator is undefined, then the result array contains just one String, which is the this value (converted to a \r\nString). If limit is not undefined, then the output array is truncated so that it contains no more than limit\r\nelements.\r\nWhen the split method is called, the following steps are taken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let A be a new array created as if by the expression new Array()where Array is the standard built-in \r\nconstructor with that name.\r\n4. Let lengthA be 0.\r\n5. If limit is undefined, let lim = 232–1; else let lim = ToUint32(limit).\r\n6. Let s be the number of characters in S.\r\n7. Let p = 0.\r\n8. If separator is a RegExp object (its [[Class]] is \"RegExp\"), let R = separator; otherwise let R = \r\nToString(separator).\r\n9. If lim = 0, return A.\r\n10. If separator is undefined, then\r\na. Call the [[DefineOwnProperty]] internal method of A with arguments \"0\", Property Descriptor \r\n{[[Value]]: S, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/cc6237db-b7e1-47cb-a838-7bb2eafd7139.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d08161f4f97a7307f553a35e4984835773ae43278584821f7865ba7f892af286",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 600
      },
      {
        "segments": [
          {
            "segment_id": "cc6237db-b7e1-47cb-a838-7bb2eafd7139",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 160,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "148 © Ecma International 2011\r\n7. If intEnd is negative, let to be max(len + intEnd,0); else let to be min(intEnd, len).\r\n8. Let span be max(to – from,0).\r\n9. Return a String containing span consecutive characters from S beginning with the character at position from.\r\nThe length property of the slice method is 2.\r\nNOTE The slice function is intentionally generic; it does not require that its this value be a String object. Therefore \r\nit can be transferred to other kinds of objects for use as a method.\r\n15.5.4.14 String.prototype.split (separator, limit)\r\nReturns an Array object into which substrings of the result of converting this object to a String have been \r\nstored. The substrings are determined by searching from left to right for occurrences of separator; these \r\noccurrences are not part of any substring in the returned array, but serve to divide up the String value. The \r\nvalue of separator may be a String of any length or it may be a RegExp object (i.e., an object whose [[Class]] \r\ninternal property is \"RegExp\"; see 15.10).\r\nThe value of separator may be an empty String, an empty regular expression, or a regular expression that can \r\nmatch an empty String. In this case, separator does not match the empty substring at the beginning or end of \r\nthe input String, nor does it match the empty substring at the end of the previous separator match. (For \r\nexample, if separator is the empty String, the String is split up into individual characters; the length of the result \r\narray equals the length of the String, and each substring contains one character.) If separator is a regular \r\nexpression, only the first match at a given position of the this String is considered, even if backtracking could \r\nyield a non-empty-substring match at that position. (For example, \"ab\".split(/a*?/) evaluates to the \r\narray [\"a\",\"b\"], while \"ab\".split(/a*/) evaluates to the array[\"\",\"b\"].)\r\nIf the this object is (or converts to) the empty String, the result depends on whether separator can match the \r\nempty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, \r\nwhich is the empty String.\r\nIf separator is a regular expression that contains capturing parentheses, then each time separator is matched \r\nthe results (including any undefined results) of the capturing parentheses are spliced into the output array. \r\nFor example,\r\n\"A<B>bold</B>and<CODE>coded</CODE>\".split(/<(\\/)?([^<>]+)>/)\r\nevaluates to the array\r\n[\"A\", undefined, \"B\", \"bold\", \"/\", \"B\", \"and\", undefined,\r\n\"CODE\", \"coded\", \"/\", \"CODE\", \"\"]\r\nIf separator is undefined, then the result array contains just one String, which is the this value (converted to a \r\nString). If limit is not undefined, then the output array is truncated so that it contains no more than limit\r\nelements.\r\nWhen the split method is called, the following steps are taken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let A be a new array created as if by the expression new Array()where Array is the standard built-in \r\nconstructor with that name.\r\n4. Let lengthA be 0.\r\n5. If limit is undefined, let lim = 232–1; else let lim = ToUint32(limit).\r\n6. Let s be the number of characters in S.\r\n7. Let p = 0.\r\n8. If separator is a RegExp object (its [[Class]] is \"RegExp\"), let R = separator; otherwise let R = \r\nToString(separator).\r\n9. If lim = 0, return A.\r\n10. If separator is undefined, then\r\na. Call the [[DefineOwnProperty]] internal method of A with arguments \"0\", Property Descriptor \r\n{[[Value]]: S, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/cc6237db-b7e1-47cb-a838-7bb2eafd7139.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d08161f4f97a7307f553a35e4984835773ae43278584821f7865ba7f892af286",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 600
      },
      {
        "segments": [
          {
            "segment_id": "64805ab9-8bc7-4857-a39d-dbf81662df6b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 161,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 149\r\nb. Return A.\r\n11. If s = 0, then\r\na. Call SplitMatch(S, 0, R) and let z be its MatchResult result.\r\nb. If z is not failure, return A.\r\nc. Call the [[DefineOwnProperty]] internal method of A with arguments \"0\", Property Descriptor \r\n{[[Value]]: S, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\nd. Return A.\r\n12. Let q = p.\r\n13. Repeat, while q  s\r\na. Call SplitMatch(S, q, R) and let z be its MatchResult result.\r\nb. If z is failure, then let q = q+1.\r\nc. Else, z is not failure\r\ni. z must be a State. Let e be z's endIndex and let cap be z's captures array.\r\nii. If e = p, then let q = q+1.\r\niii. Else, e  p\r\n1. Let T be a String value equal to the substring of S consisting of the characters at \r\npositions p (inclusive) through q (exclusive).\r\n2. Call the [[DefineOwnProperty]] internal method of A with arguments \r\nToString(lengthA), Property Descriptor {[[Value]]: T, [[Writable]]: true, \r\n[[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n3. Increment lengthA by 1.\r\n4. If lengthA = lim, return A.\r\n5. Let p = e.\r\n6. Let i = 0.\r\n7. Repeat, while i is not equal to the number of elements in cap.\r\na Let i = i+1.\r\nb Call the [[DefineOwnProperty]] internal method of A with arguments \r\nToString(lengthA), Property Descriptor {[[Value]]: cap[i], [[Writable]]: \r\ntrue, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\nc Increment lengthA by 1.\r\nd If lengthA = lim, return A.\r\n8. Let q = p.\r\n14. Let T be a String value equal to the substring of S consisting of the characters at positions p (inclusive) \r\nthrough s (exclusive).\r\n15. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(lengthA), Property Descriptor \r\n{[[Value]]: T, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n16. Return A.\r\nThe abstract operation SplitMatch takes three parameters, a String S, an integer q, and a String or RegExp R, \r\nand performs the following in order to return a MatchResult (see 15.10.2.1):\r\n1. If R is a RegExp object (its [[Class]] is \"RegExp\"), then\r\na. Call the [[Match]] internal method of R giving it the arguments S and q, and return the MatchResult \r\nresult.\r\n2. Type(R) must be String. Let r be the number of characters in R.\r\n3. Let s be the number of characters in S.\r\n4. If q+r > s then return the MatchResult failure.\r\n5. If there exists an integer i between 0 (inclusive) and r (exclusive) such that the character at position q+i of S\r\nis different from the character at position i of R, then return failure.\r\n6. Let cap be an empty array of captures (see 15.10.2.1).\r\n7. Return the State (q+r, cap). (see 15.10.2.1)\r\nThe length property of the split method is 2.\r\nNOTE 1 The split method ignores the value of separator.global for separators that are RegExp objects.\r\nNOTE 2 The split function is intentionally generic; it does not require that its this value be a String object. Therefore, \r\nit can be transferred to other kinds of objects for use as a method.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/64805ab9-8bc7-4857-a39d-dbf81662df6b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=084dad26cc9cf60d5cb3df5ed1bb3b775bf8afd513abd9f32498585f438d74e0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 521
      },
      {
        "segments": [
          {
            "segment_id": "64805ab9-8bc7-4857-a39d-dbf81662df6b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 161,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 149\r\nb. Return A.\r\n11. If s = 0, then\r\na. Call SplitMatch(S, 0, R) and let z be its MatchResult result.\r\nb. If z is not failure, return A.\r\nc. Call the [[DefineOwnProperty]] internal method of A with arguments \"0\", Property Descriptor \r\n{[[Value]]: S, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\nd. Return A.\r\n12. Let q = p.\r\n13. Repeat, while q  s\r\na. Call SplitMatch(S, q, R) and let z be its MatchResult result.\r\nb. If z is failure, then let q = q+1.\r\nc. Else, z is not failure\r\ni. z must be a State. Let e be z's endIndex and let cap be z's captures array.\r\nii. If e = p, then let q = q+1.\r\niii. Else, e  p\r\n1. Let T be a String value equal to the substring of S consisting of the characters at \r\npositions p (inclusive) through q (exclusive).\r\n2. Call the [[DefineOwnProperty]] internal method of A with arguments \r\nToString(lengthA), Property Descriptor {[[Value]]: T, [[Writable]]: true, \r\n[[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n3. Increment lengthA by 1.\r\n4. If lengthA = lim, return A.\r\n5. Let p = e.\r\n6. Let i = 0.\r\n7. Repeat, while i is not equal to the number of elements in cap.\r\na Let i = i+1.\r\nb Call the [[DefineOwnProperty]] internal method of A with arguments \r\nToString(lengthA), Property Descriptor {[[Value]]: cap[i], [[Writable]]: \r\ntrue, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\nc Increment lengthA by 1.\r\nd If lengthA = lim, return A.\r\n8. Let q = p.\r\n14. Let T be a String value equal to the substring of S consisting of the characters at positions p (inclusive) \r\nthrough s (exclusive).\r\n15. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(lengthA), Property Descriptor \r\n{[[Value]]: T, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n16. Return A.\r\nThe abstract operation SplitMatch takes three parameters, a String S, an integer q, and a String or RegExp R, \r\nand performs the following in order to return a MatchResult (see 15.10.2.1):\r\n1. If R is a RegExp object (its [[Class]] is \"RegExp\"), then\r\na. Call the [[Match]] internal method of R giving it the arguments S and q, and return the MatchResult \r\nresult.\r\n2. Type(R) must be String. Let r be the number of characters in R.\r\n3. Let s be the number of characters in S.\r\n4. If q+r > s then return the MatchResult failure.\r\n5. If there exists an integer i between 0 (inclusive) and r (exclusive) such that the character at position q+i of S\r\nis different from the character at position i of R, then return failure.\r\n6. Let cap be an empty array of captures (see 15.10.2.1).\r\n7. Return the State (q+r, cap). (see 15.10.2.1)\r\nThe length property of the split method is 2.\r\nNOTE 1 The split method ignores the value of separator.global for separators that are RegExp objects.\r\nNOTE 2 The split function is intentionally generic; it does not require that its this value be a String object. Therefore, \r\nit can be transferred to other kinds of objects for use as a method.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/64805ab9-8bc7-4857-a39d-dbf81662df6b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=084dad26cc9cf60d5cb3df5ed1bb3b775bf8afd513abd9f32498585f438d74e0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 521
      },
      {
        "segments": [
          {
            "segment_id": "78c7d0ba-2483-4dd4-bd8f-3d7018c36635",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 162,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "150 © Ecma International 2011\r\n15.5.4.15 String.prototype.substring (start, end)\r\nThe substring method takes two arguments, start and end, and returns a substring of the result of converting \r\nthis object to a String, starting from character position start and running to, but not including, character position \r\nend of the String (or through the end of the String is end is undefined). The result is a String value, not a String \r\nobject.\r\nIf either argument is NaN or negative, it is replaced with zero; if either argument is larger than the length of the \r\nString, it is replaced with the length of the String.\r\nIf start is larger than end, they are swapped.\r\nThe following steps are taken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let len be the number of characters in S.\r\n4. Let intStart be ToInteger(start).\r\n5. If end is undefined, let intEnd be len; else let intEnd be ToInteger(end).\r\n6. Let finalStart be min(max(intStart, 0), len).\r\n7. Let finalEnd be min(max(intEnd, 0), len).\r\n8. Let from be min(finalStart, finalEnd).\r\n9. Let to be max(finalStart, finalEnd).\r\n10. Return a String whose length is to - from, containing characters from S, namely the characters with indices \r\nfrom through to 1, in ascending order.\r\nThe length property of the substring method is 2.\r\nNOTE The substring function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.16 String.prototype.toLowerCase ( )\r\nThe following steps are taken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let L be a String where each character of L is either the Unicode lowercase equivalent of the corresponding \r\ncharacter of S or the actual corresponding character of S if no Unicode lowercase equivalent exists.\r\n4. Return L.\r\nFor the purposes of this operation, the 16-bit code units of the Strings are treated as code points in the \r\nUnicode Basic Multilingual Plane. Surrogate code points are directly transferred from S to L without any \r\nmapping.\r\nThe result must be derived according to the case mappings in the Unicode character database (this explicitly \r\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it in Unicode \r\n2.1.8 and later).\r\nNOTE 1 The case mapping of some characters may produce multiple characters. In this case the result String may not \r\nbe the same length as the source String. Because both toUpperCase and toLowerCase have context-sensitive \r\nbehaviour, the functions are not symmetrical. In other words, s.toUpperCase().toLowerCase() is not necessarily \r\nequal to s.toLowerCase().\r\nNOTE 2 The toLowerCase function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/78c7d0ba-2483-4dd4-bd8f-3d7018c36635.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c03969a388673a94242c4216641050e519dd3557f8f2da718cfa613aa8a49c57",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 501
      },
      {
        "segments": [
          {
            "segment_id": "3b6a0191-5cbc-453f-8a3f-d58dbbd73ba2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 163,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 151\r\n15.5.4.17 String.prototype.toLocaleLowerCase ( )\r\nThis function works exactly the same as toLowerCase except that its result is intended to yield the correct \r\nresult for the host environment‘s current locale, rather than a locale-independent result. There will only be a \r\ndifference in the few cases (such as Turkish) where the rules for that language conflict with the regular \r\nUnicode case mappings.\r\nNOTE 1 The first parameter to this function is likely to be used in a future version of this standard; it is recommended \r\nthat implementations do not use this parameter position for anything else.\r\nNOTE 2 The toLocaleLowerCase function is intentionally generic; it does not require that its this value be a String \r\nobject. Therefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.18 String.prototype.toUpperCase ( )\r\nThis function behaves in exactly the same way as String.prototype.toLowerCase, except that \r\ncharacters are mapped to their uppercase equivalents as specified in the Unicode Character Database.\r\nNOTE The toUpperCase function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.19 String.prototype.toLocaleUpperCase ( )\r\nThis function works exactly the same as toUpperCase except that its result is intended to yield the correct \r\nresult for the host environment‘s current locale, rather than a locale-independent result. There will only be a \r\ndifference in the few cases (such as Turkish) where the rules for that language conflict with the regular \r\nUnicode case mappings.\r\nNOTE 1 The first parameter to this function is likely to be used in a future version of this standard; it is recommended \r\nthat implementations do not use this parameter position for anything else.\r\nNOTE 2 The toLocaleUpperCase function is intentionally generic; it does not require that its this value be a String \r\nobject. Therefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.20 String.prototype.trim ( )\r\nThe following steps are taken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let T be a String value that is a copy of S with both leading and trailing white space removed. The definition \r\nof white space is the union of WhiteSpace and LineTerminator.\r\n4. Return T.\r\nNOTE The trim function is intentionally generic; it does not require that its this value be a String object. Therefore, it \r\ncan be transferred to other kinds of objects for use as a method.\r\n15.5.5 Properties of String Instances\r\nString instances inherit properties from the String prototype object and their [[Class]] internal property value is \r\n\"String\". String instances also have a [[PrimitiveValue]] internal property, a length property, and a set of \r\nenumerable properties with array index names.\r\nThe [[PrimitiveValue]] internal property is the String value represented by this String object. The array index \r\nnamed properties correspond to the individual characters of the String value. A special [[GetOwnProperty]] \r\ninternal method is used to specify the number, values, and attributes of the array index named properties. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/3b6a0191-5cbc-453f-8a3f-d58dbbd73ba2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=16a3775d3532905c5fb00d3e8bd01aa38d172c1e8a2b124c2b4f734af1831f38",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 523
      },
      {
        "segments": [
          {
            "segment_id": "3b6a0191-5cbc-453f-8a3f-d58dbbd73ba2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 163,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 151\r\n15.5.4.17 String.prototype.toLocaleLowerCase ( )\r\nThis function works exactly the same as toLowerCase except that its result is intended to yield the correct \r\nresult for the host environment‘s current locale, rather than a locale-independent result. There will only be a \r\ndifference in the few cases (such as Turkish) where the rules for that language conflict with the regular \r\nUnicode case mappings.\r\nNOTE 1 The first parameter to this function is likely to be used in a future version of this standard; it is recommended \r\nthat implementations do not use this parameter position for anything else.\r\nNOTE 2 The toLocaleLowerCase function is intentionally generic; it does not require that its this value be a String \r\nobject. Therefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.18 String.prototype.toUpperCase ( )\r\nThis function behaves in exactly the same way as String.prototype.toLowerCase, except that \r\ncharacters are mapped to their uppercase equivalents as specified in the Unicode Character Database.\r\nNOTE The toUpperCase function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.19 String.prototype.toLocaleUpperCase ( )\r\nThis function works exactly the same as toUpperCase except that its result is intended to yield the correct \r\nresult for the host environment‘s current locale, rather than a locale-independent result. There will only be a \r\ndifference in the few cases (such as Turkish) where the rules for that language conflict with the regular \r\nUnicode case mappings.\r\nNOTE 1 The first parameter to this function is likely to be used in a future version of this standard; it is recommended \r\nthat implementations do not use this parameter position for anything else.\r\nNOTE 2 The toLocaleUpperCase function is intentionally generic; it does not require that its this value be a String \r\nobject. Therefore, it can be transferred to other kinds of objects for use as a method.\r\n15.5.4.20 String.prototype.trim ( )\r\nThe following steps are taken:\r\n1. Call CheckObjectCoercible passing the this value as its argument.\r\n2. Let S be the result of calling ToString, giving it the this value as its argument.\r\n3. Let T be a String value that is a copy of S with both leading and trailing white space removed. The definition \r\nof white space is the union of WhiteSpace and LineTerminator.\r\n4. Return T.\r\nNOTE The trim function is intentionally generic; it does not require that its this value be a String object. Therefore, it \r\ncan be transferred to other kinds of objects for use as a method.\r\n15.5.5 Properties of String Instances\r\nString instances inherit properties from the String prototype object and their [[Class]] internal property value is \r\n\"String\". String instances also have a [[PrimitiveValue]] internal property, a length property, and a set of \r\nenumerable properties with array index names.\r\nThe [[PrimitiveValue]] internal property is the String value represented by this String object. The array index \r\nnamed properties correspond to the individual characters of the String value. A special [[GetOwnProperty]] \r\ninternal method is used to specify the number, values, and attributes of the array index named properties. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/3b6a0191-5cbc-453f-8a3f-d58dbbd73ba2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=16a3775d3532905c5fb00d3e8bd01aa38d172c1e8a2b124c2b4f734af1831f38",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 523
      },
      {
        "segments": [
          {
            "segment_id": "a41be683-8785-487e-b58c-0de816433d5e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 164,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "152 © Ecma International 2011\r\n15.5.5.1 length\r\nThe number of characters in the String value represented by this String object.\r\nOnce a String object is created, this property is unchanging. It has the attributes { [[Writable]]: false, \r\n[[Enumerable]]: false, [[Configurable]]: false }.\r\n15.5.5.2 [[GetOwnProperty]] ( P )\r\nString objects use a variation of the [[GetOwnProperty]] internal method used for other native ECMAScript \r\nobjects (8.12.1). This special internal method provides access to named properties corresponding to the \r\nindividual characters of String objects.\r\nAssume S is a String object and P is a String.\r\nWhen the [[GetOwnProperty]] internal method of S is called with property name P, the following steps are \r\ntaken:\r\n1. Let desc be the result of calling the default [[GetOwnProperty]] internal method (8.12.1) on S with argument \r\nP.\r\n2. If desc is not undefined return desc. \r\n3. If ToString(abs(ToInteger(P))) is not the same value as P, return undefined.\r\n4. Let str be the String value of the [[PrimitiveValue]] internal property of S.\r\n5. Let index be ToInteger(P).\r\n6. Let len be the number of characters in str.\r\n7. If len ≤ index, return undefined.\r\n8. Let resultStr be a String of length 1, containing one character from str, specifically the character at position \r\nindex, where the first (leftmost) character in str is considered to be at position 0, the next one at position 1, \r\nand so on.\r\n9. Return a Property Descriptor { [[Value]]: resultStr, [[Enumerable]]: true, [[Writable]]: false, \r\n[[Configurable]]: false }\r\n15.6 Boolean Objects\r\n15.6.1 The Boolean Constructor Called as a Function\r\nWhen Boolean is called as a function rather than as a constructor, it performs a type conversion.\r\n15.6.1.1 Boolean (value)\r\nReturns a Boolean value (not a Boolean object) computed by ToBoolean(value).\r\n15.6.2 The Boolean Constructor\r\nWhen Boolean is called as part of a new expression it is a constructor: it initialises the newly created object.\r\n15.6.2.1 new Boolean (value)\r\nThe [[Prototype]] internal property of the newly constructed object is set to the original Boolean prototype \r\nobject, the one that is the initial value of Boolean.prototype (15.6.3.1).\r\nThe [[Class]] internal property of the newly constructed Boolean object is set to \"Boolean\".\r\nThe [[PrimitiveValue]] internal property of the newly constructed Boolean object is set to ToBoolean(value).\r\nThe [[Extensible]] internal property of the newly constructed object is set to true.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/a41be683-8785-487e-b58c-0de816433d5e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=45f360697158ad672d331d62d8c443fba34a93a3eae90e165a6d159d7d06f93d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 381
      },
      {
        "segments": [
          {
            "segment_id": "090c2263-c3ef-46fd-b3e5-01ee2ff88350",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 165,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 153\r\n15.6.3 Properties of the Boolean Constructor\r\nThe value of the [[Prototype]] internal property of the Boolean constructor is the Function prototype object \r\n(15.3.4).\r\nBesides the internal properties and the length property (whose value is 1), the Boolean constructor has the \r\nfollowing property:\r\n15.6.3.1 Boolean.prototype\r\nThe initial value of Boolean.prototype is the Boolean prototype object (15.6.4).\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.6.4 Properties of the Boolean Prototype Object\r\nThe Boolean prototype object is itself a Boolean object (its [[Class]] is \"Boolean\") whose value is false.\r\nThe value of the [[Prototype]] internal property of the Boolean prototype object is the standard built-in Object \r\nprototype object (15.2.4).\r\n15.6.4.1 Boolean.prototype.constructor\r\nThe initial value of Boolean.prototype.constructor is the built-in Boolean constructor.\r\n15.6.4.2 Boolean.prototype.toString ( )\r\nThe following steps are taken:\r\n1. Let B be the this value.\r\n2. If Type(B) is Boolean, then let b be B.\r\n3. Else if Type(B) is Object and the value of the [[Class]] internal property of B is \"Boolean\", then let b be \r\nthe value of the [[PrimitiveValue]] internal property of B.\r\n4. Else throw a TypeError exception.\r\n5. If b is true, then return \"true\"; else return \"false\".\r\n15.6.4.3 Boolean.prototype.valueOf ( )\r\nThe following steps are taken:\r\n1. Let B be the this value.\r\n2. If Type(B) is Boolean, then let b be B.\r\n3. Else if Type(B) is Object and the value of the [[Class]] internal property of B is \"Boolean\", then let b be \r\nthe value of the [[PrimitiveValue]] internal property of B.\r\n4. Else throw a TypeError exception.\r\n5. Return b.\r\n15.6.5 Properties of Boolean Instances\r\nBoolean instances inherit properties from the Boolean prototype object and their [[Class]] internal property \r\nvalue is \"Boolean\". Boolean instances also have a [[PrimitiveValue]] internal property.\r\nThe [[PrimitiveValue]] internal property is the Boolean value represented by this Boolean object.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/090c2263-c3ef-46fd-b3e5-01ee2ff88350.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=df9264bca3449bb787c9976ae8317ac4fc20da64fe308de8bb188746a9a8f4aa",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 312
      },
      {
        "segments": [
          {
            "segment_id": "8550799a-7604-4430-9e67-35409e76462a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 166,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "154 © Ecma International 2011\r\n15.7 Number Objects\r\n15.7.1 The Number Constructor Called as a Function\r\nWhen Number is called as a function rather than as a constructor, it performs a type conversion.\r\n15.7.1.1 Number ( [ value ] )\r\nReturns a Number value (not a Number object) computed by ToNumber(value) if value was supplied, else \r\nreturns +0.\r\n15.7.2 The Number Constructor\r\nWhen Number is called as part of a new expression it is a constructor: it initialises the newly created object.\r\n15.7.2.1 new Number ( [ value ] )\r\nThe [[Prototype]] internal property of the newly constructed object is set to the original Number prototype \r\nobject, the one that is the initial value of Number.prototype (15.7.3.1).\r\nThe [[Class]] internal property of the newly constructed object is set to \"Number\".\r\nThe [[PrimitiveValue]] internal property of the newly constructed object is set to ToNumber(value) if value was \r\nsupplied, else to +0.\r\nThe [[Extensible]] internal property of the newly constructed object is set to true.\r\n15.7.3 Properties of the Number Constructor\r\nThe value of the [[Prototype]] internal property of the Number constructor is the Function prototype object \r\n(15.3.4).\r\nBesides the internal properties and the length property (whose value is 1), the Number constructor has the \r\nfollowing properties:\r\n15.7.3.1 Number.prototype\r\nThe initial value of Number.prototype is the Number prototype object (15.7.4).\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.7.3.2 Number.MAX_VALUE\r\nThe value of Number.MAX_VALUE is the largest positive finite value of the Number type, which is \r\napproximately 1.7976931348623157  10308.\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.7.3.3 Number.MIN_VALUE\r\nThe value of Number.MIN_VALUE is the smallest positive value of the Number type, which is approximately \r\n5  10-324.\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/8550799a-7604-4430-9e67-35409e76462a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=74ca762741a65e92d32d6e6a8323673b71f4fd9c9f0bb6268462c9514d8881cc",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 300
      },
      {
        "segments": [
          {
            "segment_id": "cdb52d35-f802-4a3e-9ee4-647ecf8a4ef9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 167,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 155\r\n15.7.3.4 Number.NaN\r\nThe value of Number.NaN is NaN.\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.7.3.5 Number.NEGATIVE_INFINITY\r\nThe value of Number.NEGATIVE_INFINITY is .\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.7.3.6 Number.POSITIVE_INFINITY\r\nThe value of Number.POSITIVE_INFINITY is +.\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.7.4 Properties of the Number Prototype Object\r\nThe Number prototype object is itself a Number object (its [[Class]] is \"Number\") whose value is +0.\r\nThe value of the [[Prototype]] internal property of the Number prototype object is the standard built-in Object \r\nprototype object (15.2.4).\r\nUnless explicitly stated otherwise, the methods of the Number prototype object defined below are not generic \r\nand the this value passed to them must be either a Number value or an Object for which the value of the \r\n[[Class]] internal property is \"Number\".\r\nIn the following descriptions of functions that are properties of the Number prototype object, the phrase ―this \r\nNumber object‖ refers to either the object that is the this value for the invocation of the function or, if \r\nType(this value) is Number, an object that is created as if by the expression new Number(this value)\r\nwhere Number is the standard built-in constructor with that name. Also, the phrase ―this Number value‖ refers \r\nto either the Number value represented by this Number object, that is, the value of the [[PrimitiveValue]] \r\ninternal property of this Number object or the this value if its type is Number. A TypeError exception is \r\nthrown if the this value is neither an object for which the value of the [[Class]] internal property is \"Number\"\r\nor a value whose type is Number.\r\n15.7.4.1 Number.prototype.constructor\r\nThe initial value of Number.prototype.constructor is the built-in Number constructor.\r\n15.7.4.2 Number.prototype.toString ( [ radix ] )\r\nThe optional radix should be an integer value in the inclusive range 2 to 36. If radix not present or is undefined\r\nthe Number 10 is used as the value of radix. If ToInteger(radix) is the Number 10 then this Number value is \r\ngiven as an argument to the ToString abstract operation; the resulting String value is returned.\r\nIf ToInteger(radix) is not an integer between 2 and 36 inclusive throw a RangeError exception. If \r\nToInteger(radix) is an integer from 2 to 36, but not 10, the result is a String representation of this Number value \r\nusing the specified radix. Letters a-z are used for digits with values 10 through 35. The precise algorithm is \r\nimplementation-dependent if the radix is not 10, however the algorithm should be a generalisation of that \r\nspecified in 9.8.1.\r\nThe toString function is not generic; it throws a TypeError exception if its this value is not a Number or a \r\nNumber object. Therefore, it cannot be transferred to other kinds of objects for use as a method.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/cdb52d35-f802-4a3e-9ee4-647ecf8a4ef9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7e2ec2a1b96dd10697801b7bc093a2fdb03fadb6a10d137e81c619d053ab7e04",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 479
      },
      {
        "segments": [
          {
            "segment_id": "3281ebf3-ddff-4431-9732-70718d872b10",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 168,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "156 © Ecma International 2011\r\n15.7.4.3 Number.prototype.toLocaleString()\r\nProduces a String value that represents this Number value formatted according to the conventions of the host \r\nenvironment‘s current locale. This function is implementation-dependent, and it is permissible, but not \r\nencouraged, for it to return the same thing as toString.\r\nNOTE The first parameter to this function is likely to be used in a future version of this standard; it is recommended \r\nthat implementations do not use this parameter position for anything else.\r\n15.7.4.4 Number.prototype.valueOf ( )\r\nReturns this Number value.\r\nThe valueOf function is not generic; it throws a TypeError exception if its this value is not a Number or a \r\nNumber object. Therefore, it cannot be transferred to other kinds of objects for use as a method.\r\n15.7.4.5 Number.prototype.toFixed (fractionDigits)\r\nReturn a String containing this Number value represented in decimal fixed-point notation with fractionDigits\r\ndigits after the decimal point. If fractionDigits is undefined, 0 is assumed. Specifically, perform the following \r\nsteps:\r\n1. Let f be ToInteger(fractionDigits). (If fractionDigits is undefined, this step produces the value 0).\r\n2. If f < 0 or f > 20, throw a RangeError exception.\r\n3. Let x be this Number value.\r\n4. If x is NaN, return the String \"NaN\".\r\n5. Let s be the empty String.\r\n6. If x < 0, then\r\na. Let s be \"-\".\r\nb. Let x = –x.\r\n7. If x  1021, then\r\na. Let m = ToString(x).\r\n8. Else, x < 1021\r\na. Let n be an integer for which the exact mathematical value of n  10f– x is as close to zero as \r\npossible. If there are two such n, pick the larger n.\r\nb. If n = 0, let m be the String \"0\". Otherwise, let m be the String consisting of the digits of the \r\ndecimal representation of n (in order, with no leading zeroes).\r\nc. If f  0, then\r\ni. Let k be the number of characters in m.\r\nii. If k ≤ f, then\r\n1. Let z be the String consisting of f+1–k occurrences of the character ‗0‘.\r\n2. Let m be the concatenation of Strings z and m.\r\n3. Let k = f + 1.\r\niii. Let a be the first k–f characters of m, and let b be the remaining f characters of m.\r\niv. Let m be the concatenation of the three Strings a, \".\", and b.\r\n9. Return the concatenation of the Strings s and m.\r\nThe length property of the toFixed method is 1.\r\nIf the toFixed method is called with more than one argument, then the behaviour is undefined (see \r\nclause 15).\r\nAn implementation is permitted to extend the behaviour of toFixed for values of fractionDigits less than 0 or \r\ngreater than 20. In this case toFixed would not necessarily throw RangeError for such values.\r\nNOTE The output of toFixed may be more precise than toString for some values because toString only prints \r\nenough significant digits to distinguish the number from adjacent number values. For example, ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/3281ebf3-ddff-4431-9732-70718d872b10.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8fcb2486add3557b7180e9bb5bfc319844a016fd674533edc59b77e5394bef03",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 500
      },
      {
        "segments": [
          {
            "segment_id": "7cf08bed-9a6a-41d3-9c26-c9403ccb4b40",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 169,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 157\r\n(1000000000000000128).toString() returns \"1000000000000000100\",\r\nwhile (1000000000000000128).toFixed(0) returns \"1000000000000000128\".\r\n15.7.4.6 Number.prototype.toExponential (fractionDigits)\r\nReturn a String containing this Number value represented in decimal exponential notation with one digit before \r\nthe significand's decimal point and fractionDigits digits after the significand's decimal point. If fractionDigits is \r\nundefined, include as many significand digits as necessary to uniquely specify the Number (just like in \r\nToString except that in this case the Number is always output in exponential notation). Specifically, perform \r\nthe following steps:\r\n1. Let x be this Number value.\r\n2. Let f be ToInteger(fractionDigits).\r\n3. If x is NaN, return the String \"NaN\".\r\n4. Let s be the empty String.\r\n5. If x < 0, then\r\na. Let s be \"-\".\r\nb. Let x = –x.\r\n6. If x = +, then\r\na. Return the concatenation of the Strings s and \"Infinity\". \r\n7. If fractionDigits is not undefined and (f < 0 or f > 20), throw a RangeError exception.\r\n8. If x = 0, then\r\na. Let f = 0.\r\nb. Let m be the String consisting of f+1 occurrences of the character ‗0‘.\r\nc. Let e = 0.\r\n9. Else, x  0\r\na. If fractionDigits is not undefined, then\r\ni. Let e and n be integers such that 10f n < 10f+1 and for which the exact mathematical value \r\nof n  10e–f– x is as close to zero as possible. If there are two such sets of e and n, pick the \r\ne and n for which n  10e–fis larger.\r\nb. Else, fractionDigits is undefined\r\ni. Let e, n, and f be integers such that f  0, 10f n < 10f+1, the number value for n  10e–fis x, \r\nand f is as small as possible. Note that the decimal representation of n has f+1 digits, n is \r\nnot divisible by 10, and the least significant digit of n is not necessarily uniquely \r\ndetermined by these criteria.\r\nc. Let m be the String consisting of the digits of the decimal representation of n (in order, with no \r\nleading zeroes).\r\n10. If f  0, then\r\na. Let a be the first character of m, and let b be the remaining f characters of m.\r\nb. Let m be the concatenation of the three Strings a, \".\", and b.\r\n11. If e = 0, then \r\na. Let c = \"+\".\r\nb. Let d = \"0\".\r\n12. Else\r\na. If e > 0, then let c = \"+\".\r\nb. Else, e ≤ 0\r\ni. Let c = \"-\".\r\nii. Let e = –e.\r\nc. Let d be the String consisting of the digits of the decimal representation of e (in order, with no \r\nleading zeroes).\r\n13. Let m be the concatenation of the four Strings m, \"e\", c, and d.\r\n14. Return the concatenation of the Strings s and m.\r\nThe length property of the toExponential method is 1.\r\nIf the toExponential method is called with more than one argument, then the behaviour is undefined (see \r\nclause 15).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/7cf08bed-9a6a-41d3-9c26-c9403ccb4b40.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b2ece7a281e63791c4ba4b44060a9bad238d2b97a6296de4f1de365d9f5a2843",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 501
      },
      {
        "segments": [
          {
            "segment_id": "963db90c-2358-4b7d-a8ff-480ef8678c97",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 170,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "158 © Ecma International 2011\r\nAn implementation is permitted to extend the behaviour of toExponential for values of fractionDigits less \r\nthan 0 or greater than 20. In this case toExponential would not necessarily throw RangeError for such \r\nvalues.\r\nNOTE For implementations that provide more accurate conversions than required by the rules above, it is \r\nrecommended that the following alternative version of step 9.b.i be used as a guideline:\r\ni. Let e, n, and f be integers such that f  0, 10f n < 10f+1, the number value for n  10e–fis x, and f is as small \r\nas possible. If there are multiple possibilities for n, choose the value of n for which n  10e–fis closest in value \r\nto x. If there are two such possible values of n, choose the one that is even.\r\n15.7.4.7 Number.prototype.toPrecision (precision)\r\nReturn a String containing this Number value represented either in decimal exponential notation with one digit \r\nbefore the significand's decimal point and precision–1 digits after the significand's decimal point or in decimal \r\nfixed notation with precision significant digits. If precision is undefined, call ToString (9.8.1) instead. \r\nSpecifically, perform the following steps:\r\n1. Let x be this Number value.\r\n2. If precision is undefined, return ToString(x).\r\n3. Let p be ToInteger(precision).\r\n4. If x is NaN, return the String \"NaN\".\r\n5. Let s be the empty String.\r\n6. If x < 0, then\r\na. Let s be \"-\".\r\nb. Let x = –x.\r\n7. If x = +, then\r\na. Return the concatenation of the Strings s and \"Infinity\".\r\n8. If p < 1 or p > 21, throw a RangeError exception.\r\n9. If x = 0, then\r\na. Let m be the String consisting of p occurrences of the character ‗0‘.\r\nb. Let e = 0.\r\n10. Else x  0,\r\na. Let e and n be integers such that 10p–1 n < 10pand for which the exact mathematical value of n \r\n10e–p+1– x is as close to zero as possible. If there are two such sets of e and n, pick the e and n for \r\nwhich n  10e–p+1 is larger.\r\nb. Let m be the String consisting of the digits of the decimal representation of n (in order, with no \r\nleading zeroes).\r\nc. If e < –6 or e  p, then\r\ni. Let a be the first character of m, and let b be the remaining p–1 characters of m.\r\nii. Let m be the concatenation of the three Strings a, \".\", and b.\r\niii. If e = 0, then\r\n1. Let c = \"+\" and d = \"0\".\r\niv. Else e  0,\r\n1. If e > 0, then \r\na Let c = \"+\".\r\n2. Else e < 0,\r\na Let c = \"-\".\r\nb Let e = –e.\r\n3. Let d be the String consisting of the digits of the decimal representation of e (in \r\norder, with no leading zeroes).\r\nv. Let m be the concatenation of the five Strings s, m, \"e\", c, and d.\r\n11. If e = p–1, then return the concatenation of the Strings s and m.\r\n12. If e  0, then\r\na. Let m be the concatenation of the first e+1 characters of m, the character ‗.‘, and the remaining p–\r\n(e+1) characters of m.\r\n13. Else e < 0,\r\na. Let m be the concatenation of the String \"0.\", –(e+1) occurrences of the character ‗0‘, and the \r\nString m.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/963db90c-2358-4b7d-a8ff-480ef8678c97.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a66cebb0df04f4313819b0787170b6615796c8df4c6b38ecf03fe72fb2ddd37d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 573
      },
      {
        "segments": [
          {
            "segment_id": "963db90c-2358-4b7d-a8ff-480ef8678c97",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 170,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "158 © Ecma International 2011\r\nAn implementation is permitted to extend the behaviour of toExponential for values of fractionDigits less \r\nthan 0 or greater than 20. In this case toExponential would not necessarily throw RangeError for such \r\nvalues.\r\nNOTE For implementations that provide more accurate conversions than required by the rules above, it is \r\nrecommended that the following alternative version of step 9.b.i be used as a guideline:\r\ni. Let e, n, and f be integers such that f  0, 10f n < 10f+1, the number value for n  10e–fis x, and f is as small \r\nas possible. If there are multiple possibilities for n, choose the value of n for which n  10e–fis closest in value \r\nto x. If there are two such possible values of n, choose the one that is even.\r\n15.7.4.7 Number.prototype.toPrecision (precision)\r\nReturn a String containing this Number value represented either in decimal exponential notation with one digit \r\nbefore the significand's decimal point and precision–1 digits after the significand's decimal point or in decimal \r\nfixed notation with precision significant digits. If precision is undefined, call ToString (9.8.1) instead. \r\nSpecifically, perform the following steps:\r\n1. Let x be this Number value.\r\n2. If precision is undefined, return ToString(x).\r\n3. Let p be ToInteger(precision).\r\n4. If x is NaN, return the String \"NaN\".\r\n5. Let s be the empty String.\r\n6. If x < 0, then\r\na. Let s be \"-\".\r\nb. Let x = –x.\r\n7. If x = +, then\r\na. Return the concatenation of the Strings s and \"Infinity\".\r\n8. If p < 1 or p > 21, throw a RangeError exception.\r\n9. If x = 0, then\r\na. Let m be the String consisting of p occurrences of the character ‗0‘.\r\nb. Let e = 0.\r\n10. Else x  0,\r\na. Let e and n be integers such that 10p–1 n < 10pand for which the exact mathematical value of n \r\n10e–p+1– x is as close to zero as possible. If there are two such sets of e and n, pick the e and n for \r\nwhich n  10e–p+1 is larger.\r\nb. Let m be the String consisting of the digits of the decimal representation of n (in order, with no \r\nleading zeroes).\r\nc. If e < –6 or e  p, then\r\ni. Let a be the first character of m, and let b be the remaining p–1 characters of m.\r\nii. Let m be the concatenation of the three Strings a, \".\", and b.\r\niii. If e = 0, then\r\n1. Let c = \"+\" and d = \"0\".\r\niv. Else e  0,\r\n1. If e > 0, then \r\na Let c = \"+\".\r\n2. Else e < 0,\r\na Let c = \"-\".\r\nb Let e = –e.\r\n3. Let d be the String consisting of the digits of the decimal representation of e (in \r\norder, with no leading zeroes).\r\nv. Let m be the concatenation of the five Strings s, m, \"e\", c, and d.\r\n11. If e = p–1, then return the concatenation of the Strings s and m.\r\n12. If e  0, then\r\na. Let m be the concatenation of the first e+1 characters of m, the character ‗.‘, and the remaining p–\r\n(e+1) characters of m.\r\n13. Else e < 0,\r\na. Let m be the concatenation of the String \"0.\", –(e+1) occurrences of the character ‗0‘, and the \r\nString m.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/963db90c-2358-4b7d-a8ff-480ef8678c97.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a66cebb0df04f4313819b0787170b6615796c8df4c6b38ecf03fe72fb2ddd37d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 573
      },
      {
        "segments": [
          {
            "segment_id": "57fe9e60-9605-4a19-8fe2-15f5ba41bd1c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 171,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 159\r\n14. Return the concatenation of the Strings s and m.\r\nThe length property of the toPrecision method is 1.\r\nIf the toPrecision method is called with more than one argument, then the behaviour is undefined (see \r\nclause 15).\r\nAn implementation is permitted to extend the behaviour of toPrecision for values of precision less than 1 or \r\ngreater than 21. In this case toPrecision would not necessarily throw RangeError for such values.\r\n15.7.5 Properties of Number Instances\r\nNumber instances inherit properties from the Number prototype object and their [[Class]] internal property \r\nvalue is \"Number\". Number instances also have a [[PrimitiveValue]] internal property.\r\nThe [[PrimitiveValue]] internal property is the Number value represented by this Number object.\r\n15.8 The Math Object\r\nThe Math object is a single object that has some named properties, some of which are functions.\r\nThe value of the [[Prototype]] internal property of the Math object is the standard built-in Object prototype \r\nobject (15.2.4). The value of the [[Class]] internal property of the Math object is \"Math\".\r\nThe Math object does not have a [[Construct]] internal property; it is not possible to use the Math object as a \r\nconstructor with the new operator.\r\nThe Math object does not have a [[Call]] internal property; it is not possible to invoke the Math object as a \r\nfunction.\r\nNOTE In this specification, the phrase ―the Number value for x‖ has a technical meaning defined in 8.5.\r\n15.8.1 Value Properties of the Math Object\r\n15.8.1.1 E\r\nThe Number value for e, the base of the natural logarithms, which is approximately 2.7182818284590452354.\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.8.1.2 LN10\r\nThe Number value for the natural logarithm of 10, which is approximately 2.302585092994046.\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.8.1.3 LN2\r\nThe Number value for the natural logarithm of 2, which is approximately 0.6931471805599453.\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.8.1.4 LOG2E\r\nThe Number value for the base-2 logarithm of e, the base of the natural logarithms; this value is approximately \r\n1.4426950408889634.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/57fe9e60-9605-4a19-8fe2-15f5ba41bd1c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=98889f99e9b1219571f3d1708a166ac8392fa29e7237729c9a0c694f7c3e25f8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 353
      },
      {
        "segments": [
          {
            "segment_id": "0d1d0b32-cd06-42d2-ac3c-d39249d868f1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 172,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "160 © Ecma International 2011\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\nNOTE The value of Math.LOG2E is approximately the reciprocal of the value of Math.LN2.\r\n15.8.1.5 LOG10E\r\nThe Number value for the base-10 logarithm of e, the base of the natural logarithms; this value is \r\napproximately 0.4342944819032518.\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\nNOTE The value of Math.LOG10E is approximately the reciprocal of the value of Math.LN10.\r\n15.8.1.6 PI\r\nThe Number value for , the ratio of the circumference of a circle to its diameter, which is approximately \r\n3.1415926535897932.\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.8.1.7 SQRT1_2\r\nThe Number value for the square root of ½, which is approximately 0.7071067811865476.\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\nNOTE The value of Math.SQRT1_2 is approximately the reciprocal of the value of Math.SQRT2.\r\n15.8.1.8 SQRT2\r\nThe Number value for the square root of 2, which is approximately 1.4142135623730951.\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.8.2 Function Properties of the Math Object\r\nEach of the following Math object functions applies the ToNumber abstract operator to each of its arguments \r\n(in left-to-right order if there is more than one) and then performs a computation on the resulting Number \r\nvalue(s).\r\nIn the function descriptions below, the symbols NaN, 0, +0,  and + refer to the Number values described \r\nin 8.5.\r\nNOTE The behaviour of the functions acos, asin, atan, atan2, cos, exp, log, pow, sin, sqrt, and tan is not \r\nprecisely specified here except to require specific results for certain argument values that represent boundary cases of \r\ninterest. For other argument values, these functions are intended to compute approximations to the results of familiar \r\nmathematical functions, but some latitude is allowed in the choice of approximation algorithms. The general intent is that \r\nan implementer should be able to use the same mathematical library for ECMAScript on a given hardware platform that is \r\navailable to C programmers on that platform.\r\nAlthough the choice of algorithms is left to the implementation, it is recommended (but not specified by this standard) that \r\nimplementations use the approximation algorithms for IEEE 754 arithmetic contained in fdlibm, the freely distributable \r\nmathematical library from Sun Microsystems (http://www.netlib.org/fdlibm). \r\n15.8.2.1 abs (x)\r\nReturns the absolute value of x; the result has the same magnitude as x but has positive sign.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0d1d0b32-cd06-42d2-ac3c-d39249d868f1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=55932090ed44e7fefc8aded337c89e2ec703e161fa920d1b0cc8429e4700f898",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 411
      },
      {
        "segments": [
          {
            "segment_id": "d32772b5-89da-448e-b513-f6ebeb7a7124",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 173,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 161\r\n If x is NaN, the result is NaN.\r\n If x is 0, the result is +0.\r\n If x is , the result is +.\r\n15.8.2.2 acos (x)\r\nReturns an implementation-dependent approximation to the arc cosine of x. The result is expressed in radians \r\nand ranges from +0 to +.\r\n If x is NaN, the result is NaN.\r\n If x is greater than 1, the result is NaN.\r\n If x is less than 1, the result is NaN.\r\n If x is exactly 1, the result is +0.\r\n15.8.2.3 asin (x)\r\nReturns an implementation-dependent approximation to the arc sine of x. The result is expressed in radians \r\nand ranges from /2 to +/2.\r\n If x is NaN, the result is NaN.\r\n If x is greater than 1, the result is NaN.\r\n If x is less than –1, the result is NaN.\r\n If x is +0, the result is +0.\r\n If x is 0, the result is 0.\r\n15.8.2.4 atan (x)\r\nReturns an implementation-dependent approximation to the arc tangent of x. The result is expressed in \r\nradians and ranges from /2 to +/2.\r\n If x is NaN, the result is NaN.\r\n If x is +0, the result is +0.\r\n If x is 0, the result is 0.\r\n If x is +, the result is an implementation-dependent approximation to +/2.\r\n If x is , the result is an implementation-dependent approximation to /2.\r\n15.8.2.5 atan2 (y, x)\r\nReturns an implementation-dependent approximation to the arc tangent of the quotient y/x of the arguments y\r\nand x, where the signs of y and x are used to determine the quadrant of the result. Note that it is intentional \r\nand traditional for the two-argument arc tangent function that the argument named y be first and the argument \r\nnamed x be second. The result is expressed in radians and ranges from  to +.\r\n If either x or y is NaN, the result is NaN.\r\n If y>0 and x is +0, the result is an implementation-dependent approximation to +/2.\r\n If y>0 and x is 0, the result is an implementation-dependent approximation to +/2.\r\n If y is +0 and x>0, the result is +0.\r\n If y is +0 and x is +0, the result is +0.\r\n If y is +0 and x is 0, the result is an implementation-dependent approximation to +.\r\n If y is +0 and x<0, the result is an implementation-dependent approximation to +.\r\n If y is 0 and x>0, the result is 0.\r\n If y is 0 and x is +0, the result is 0.\r\n If y is 0 and x is 0, the result is an implementation-dependent approximation to .\r\n If y is 0 and x<0, the result is an implementation-dependent approximation to .\r\n If y<0 and x is +0, the result is an implementation-dependent approximation to /2.\r\n If y<0 and x is 0, the result is an implementation-dependent approximation to /2.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/d32772b5-89da-448e-b513-f6ebeb7a7124.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=63f8f5c660eebaf360ef1b6feed1e7d4e2c8be917dc999eee1853f261cdb49f0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 511
      },
      {
        "segments": [
          {
            "segment_id": "c708775f-7071-4c24-9f47-3871eca20e05",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 174,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "162 © Ecma International 2011\r\n If y>0 and y is finite and x is +, the result is +0.\r\n If y>0 and y is finite and x is , the result if an implementation-dependent approximation to +.\r\n If y<0 and y is finite and x is +, the result is 0.\r\n If y<0 and y is finite and x is , the result is an implementation-dependent approximation to .\r\n If y is + and x is finite, the result is an implementation-dependent approximation to +/2.\r\n If y is  and x is finite, the result is an implementation-dependent approximation to /2.\r\n If y is + and x is +, the result is an implementation-dependent approximation to +/4.\r\n If y is + and x is , the result is an implementation-dependent approximation to +3/4.\r\n If y is  and x is +, the result is an implementation-dependent approximation to /4.\r\n If y is  and x is , the result is an implementation-dependent approximation to 3/4.\r\n15.8.2.6 ceil (x)\r\nReturns the smallest (closest to ) Number value that is not less than x and is equal to a mathematical \r\ninteger. If x is already an integer, the result is x.\r\n If x is NaN, the result is NaN.\r\n If x is +0, the result is +0.\r\n If x is 0, the result is 0.\r\n If x is +, the result is +.\r\n If x is , the result is .\r\n If x is less than 0 but greater than -1, the result is 0.\r\nThe value of Math.ceil(x) is the same as the value of -Math.floor(-x).\r\n15.8.2.7 cos (x)\r\nReturns an implementation-dependent approximation to the cosine of x. The argument is expressed in radians.\r\n If x is NaN, the result is NaN.\r\n If x is +0, the result is 1.\r\n If x is 0, the result is 1.\r\n If x is +, the result is NaN.\r\n If x is , the result is NaN.\r\n15.8.2.8 exp (x)\r\nReturns an implementation-dependent approximation to the exponential function of x (e raised to the power of \r\nx, where e is the base of the natural logarithms).\r\n If x is NaN, the result is NaN.\r\n If x is +0, the result is 1.\r\n If x is 0, the result is 1.\r\n If x is +, the result is +.\r\n If x is , the result is +0.\r\n15.8.2.9 floor (x)\r\nReturns the greatest (closest to +) Number value that is not greater than x and is equal to a mathematical \r\ninteger. If x is already an integer, the result is x.\r\n If x is NaN, the result is NaN.\r\n If x is +0, the result is +0.\r\n If x is 0, the result is 0.\r\n If x is +, the result is +.\r\n If x is , the result is .",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c708775f-7071-4c24-9f47-3871eca20e05.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6d0f2db1a920a21b2160e42a1cf33188177ae13750d7b6c3710e9a03385e5882",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 497
      },
      {
        "segments": [
          {
            "segment_id": "1b4bec1b-0c3f-46c1-91b2-981bc1bf1278",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 175,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 163\r\n If x is greater than 0 but less than 1, the result is +0.\r\nNOTE The value of Math.floor(x) is the same as the value of -Math.ceil(-x).\r\n15.8.2.10 log (x)\r\n Returns an implementation-dependent approximation to the natural logarithm of x.\r\n If x is NaN, the result is NaN.\r\n If x is less than 0, the result is NaN.\r\n If x is +0 or 0, the result is .\r\n If x is 1, the result is +0.\r\n If x is +, the result is +.\r\n15.8.2.11 max ( [ value1 [ , value2 [ , … ] ] ] )\r\nGiven zero or more arguments, calls ToNumber on each of the arguments and returns the largest of the \r\nresulting values.\r\n If no arguments are given, the result is .\r\n If any value is NaN, the result is NaN.\r\n The comparison of values to determine the largest value is done as in 11.8.5 except that +0 is considered to \r\nbe larger than 0.\r\nThe length property of the max method is 2.\r\n15.8.2.12 min ( [ value1 [ , value2 [ , … ] ] ] )\r\nGiven zero or more arguments, calls ToNumber on each of the arguments and returns the smallest of the \r\nresulting values.\r\n If no arguments are given, the result is +.\r\n If any value is NaN, the result is NaN.\r\n The comparison of values to determine the smallest value is done as in 11.8.5 except that +0 is considered \r\nto be larger than 0.\r\nThe length property of the min method is 2.\r\n15.8.2.13 pow (x, y)\r\nReturns an implementation-dependent approximation to the result of raising x to the power y.\r\n If y is NaN, the result is NaN.\r\n If y is +0, the result is 1, even if x is NaN.\r\n If y is 0, the result is 1, even if x is NaN.\r\n If x is NaN and y is nonzero, the result is NaN.\r\n If abs(x)>1 and y is +, the result is +.\r\n If abs(x)>1 and y is , the result is +0.\r\n If abs(x)==1 and y is +, the result is NaN.\r\n If abs(x)==1 and y is , the result is NaN.\r\n If abs(x)<1 and y is +, the result is +0.\r\n If abs(x)<1 and y is , the result is +.\r\n If x is + and y>0, the result is +.\r\n If x is + and y<0, the result is +0.\r\n If x is  and y>0 and y is an odd integer, the result is .\r\n If x is  and y>0 and y is not an odd integer, the result is +.\r\n If x is  and y<0 and y is an odd integer, the result is 0.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/1b4bec1b-0c3f-46c1-91b2-981bc1bf1278.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0881c01f03fc9c2208500ab379eaca72cbaa2c594e0852dafbea4d3a04c26beb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 482
      },
      {
        "segments": [
          {
            "segment_id": "9043c387-8062-4a5d-8350-f27cc63b0608",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 176,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "164 © Ecma International 2011\r\n If x is  and y<0 and y is not an odd integer, the result is +0.\r\n If x is +0 and y>0, the result is +0.\r\n If x is +0 and y<0, the result is +.\r\n If x is 0 and y>0 and y is an odd integer, the result is 0.\r\n If x is 0 and y>0 and y is not an odd integer, the result is +0.\r\n If x is 0 and y<0 and y is an odd integer, the result is .\r\n If x is 0 and y<0 and y is not an odd integer, the result is +.\r\n If x<0 and x is finite and y is finite and y is not an integer, the result is NaN.\r\n15.8.2.14 random ( )\r\nReturns a Number value with positive sign, greater than or equal to 0 but less than 1, chosen randomly or \r\npseudo randomly with approximately uniform distribution over that range, using an implementation-dependent \r\nalgorithm or strategy. This function takes no arguments.\r\n15.8.2.15 round (x)\r\nReturns the Number value that is closest to x and is equal to a mathematical integer. If two integer Number \r\nvalues are equally close to x, then the result is the Number value that is closer to +. If x is already an integer, \r\nthe result is x.\r\n If x is NaN, the result is NaN.\r\n If x is +0, the result is +0.\r\n If x is 0, the result is 0.\r\n If x is +, the result is +.\r\n If x is , the result is .\r\n If x is greater than 0 but less than 0.5, the result is +0.\r\n If x is less than 0 but greater than or equal to -0.5, the result is 0.\r\nNOTE 1 Math.round(3.5) returns 4, but Math.round(–3.5) returns –3.\r\nNOTE 2 The value of Math.round(x) is the same as the value of Math.floor(x+0.5), except when x is 0 or is \r\nless than 0 but greater than or equal to -0.5; for these cases Math.round(x) returns 0, but Math.floor(x+0.5)\r\nreturns +0.\r\n15.8.2.16 sin (x)\r\nReturns an implementation-dependent approximation to the sine of x. The argument is expressed in radians.\r\n If x is NaN, the result is NaN.\r\n If x is +0, the result is +0.\r\n If x is 0, the result is 0.\r\n If x is + or , the result is NaN.\r\n15.8.2.17 sqrt (x)\r\nReturns an implementation-dependent approximation to the square root of x.\r\n If x is NaN, the result is NaN.\r\n If x is less than 0, the result is NaN.\r\n If x is +0, the result is +0.\r\n If x is 0, the result is 0.\r\n If x is +, the result is +.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/9043c387-8062-4a5d-8350-f27cc63b0608.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bf9365f8d1a8d61af05132fd9abeaaa2719837ac31db98b25f6e51d128477d45",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 475
      },
      {
        "segments": [
          {
            "segment_id": "642cf94c-c412-475b-8eec-1644424676aa",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 177,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 165\r\n15.8.2.18 tan (x)\r\nReturns an implementation-dependent approximation to the tangent of x. The argument is expressed in \r\nradians.\r\n If x is NaN, the result is NaN.\r\n If x is +0, the result is +0.\r\n If x is 0, the result is 0.\r\n If x is + or , the result is NaN.\r\n15.9 Date Objects\r\n15.9.1 Overview of Date Objects and Definitions of Abstract Operators\r\nThe following functions are abstract operations that operate on time values (defined in 15.9.1.1). Note that, in \r\nevery case, if any argument to one of these functions is NaN, the result will be NaN.\r\n15.9.1.1 Time Values and Time Range\r\nA Date object contains a Number indicating a particular instant in time to within a millisecond. Such a Number \r\nis called a time value. A time value may also be NaN, indicating that the Date object does not represent a \r\nspecific instant of time.\r\nTime is measured in ECMAScript in milliseconds since 01 January, 1970 UTC. In time values leap seconds \r\nare ignored. It is assumed that there are exactly 86,400,000 milliseconds per day. ECMAScript Number values \r\ncan represent all integers from –9,007,199,254,740,992 to 9,007,199,254,740,992; this range suffices to \r\nmeasure times to millisecond precision for any instant that is within approximately 285,616 years, either \r\nforward or backward, from 01 January, 1970 UTC.\r\nThe actual range of times supported by ECMAScript Date objects is slightly smaller: exactly –100,000,000 \r\ndays to 100,000,000 days measured relative to midnight at the beginning of 01 January, 1970 UTC. This gives \r\na range of 8,640,000,000,000,000 milliseconds to either side of 01 January, 1970 UTC.\r\nThe exact moment of midnight at the beginning of 01 January, 1970 UTC is represented by the value +0.\r\n15.9.1.2 Day Number and Time within Day\r\nA given time value t belongs to day number\r\nDay(t) = floor(t / msPerDay)\r\nwhere the number of milliseconds per day is\r\nmsPerDay = 86400000\r\nThe remainder is called the time within the day:\r\nTimeWithinDay(t) = t modulo msPerDay\r\n15.9.1.3 Year Number\r\nECMAScript uses an extrapolated Gregorian system to map a day number to a year number and to determine \r\nthe month and date within that year. In this system, leap years are precisely those which are (divisible by 4) \r\nand ((not divisible by 100) or (divisible by 400)). The number of days in year number y is therefore defined by\r\nDaysInYear(y) = 365 if (y modulo 4)  0\r\n= 366 if (y modulo 4) = 0 and (y modulo 100)  0\r\n= 365 if (y modulo 100) = 0 and (y modulo 400)  0\r\n= 366 if (y modulo 400) = 0",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/642cf94c-c412-475b-8eec-1644424676aa.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=58511142f6ed5705bb4c65afd7fcfdb3c84076d9eec55103d2d5112580ff299e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 444
      },
      {
        "segments": [
          {
            "segment_id": "b7831cdf-7144-4b5c-a307-69a2887f49ff",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 178,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "166 © Ecma International 2011\r\nAll non-leap years have 365 days with the usual number of days per month and leap years have an extra day \r\nin February. The day number of the first day of year y is given by:\r\nDayFromYear(y) = 365  (y1970) + floor((y1969)/4)  floor((y1901)/100) + floor((y1601)/400)\r\nThe time value of the start of a year is:\r\nTimeFromYear(y) = msPerDay  DayFromYear(y)\r\nA time value determines a year by:\r\nYearFromTime(t) = the largest integer y (closest to positive infinity) such that TimeFromYear(y)  t\r\nThe leap-year function is 1 for a time within a leap year and otherwise is zero:\r\nInLeapYear(t) = 0 if DaysInYear(YearFromTime(t)) = 365\r\n= 1 if DaysInYear(YearFromTime(t)) = 366\r\n15.9.1.4 Month Number\r\nMonths are identified by an integer in the range 0 to 11, inclusive. The mapping MonthFromTime(t) from a time \r\nvalue t to a month number is defined by:\r\nMonthFromTime(t) = 0 if 0  DayWithinYear(t) < 31\r\n= 1 if 31  DayWithinYear (t) < 59+InLeapYear(t)\r\n= 2 if 59+InLeapYear(t)  DayWithinYear (t) < 90+InLeapYear(t)\r\n= 3 if 90+InLeapYear(t)  DayWithinYear (t) < 120+InLeapYear(t)\r\n= 4 if 120+InLeapYear(t)  DayWithinYear (t) < 151+InLeapYear(t)\r\n= 5 if 151+InLeapYear(t)  DayWithinYear (t) < 181+InLeapYear(t)\r\n= 6 if 181+InLeapYear(t)  DayWithinYear (t) < 212+InLeapYear(t)\r\n= 7 if 212+InLeapYear(t)  DayWithinYear (t) < 243+InLeapYear(t)\r\n= 8 if 243+InLeapYear(t)  DayWithinYear (t) < 273+InLeapYear(t)\r\n= 9 if 273+InLeapYear(t)  DayWithinYear (t) < 304+InLeapYear(t)\r\n= 10 if 304+InLeapYear(t)  DayWithinYear (t) < 334+InLeapYear(t)\r\n= 11 if 334+InLeapYear(t)  DayWithinYear (t) < 365+InLeapYear(t)\r\nwhere\r\nDayWithinYear(t) = Day(t)DayFromYear(YearFromTime(t))\r\nA month value of 0 specifies January; 1 specifies February; 2 specifies March; 3 specifies April; 4 specifies \r\nMay; 5 specifies June; 6 specifies July; 7 specifies August; 8 specifies September; 9 specifies October; 10\r\nspecifies November; and 11 specifies December. Note that MonthFromTime(0) = 0, corresponding to Thursday, \r\n01 January, 1970.\r\n15.9.1.5 Date Number\r\nA date number is identified by an integer in the range 1 through 31, inclusive. The mapping DateFromTime(t) \r\nfrom a time value t to a month number is defined by:\r\nDateFromTime(t) = DayWithinYear(t)+1 if MonthFromTime(t)=0\r\n= DayWithinYear(t)30 if MonthFromTime(t)=1\r\n= DayWithinYear(t)58InLeapYear(t) if MonthFromTime(t)=2\r\n= DayWithinYear(t)89InLeapYear(t) if MonthFromTime(t)=3\r\n= DayWithinYear(t)119InLeapYear(t) if MonthFromTime(t)=4\r\n= DayWithinYear(t)150InLeapYear(t) if MonthFromTime(t)=5\r\n= DayWithinYear(t)180InLeapYear(t) if MonthFromTime(t)=6\r\n= DayWithinYear(t)211InLeapYear(t) if MonthFromTime(t)=7\r\n= DayWithinYear(t)242InLeapYear(t) if MonthFromTime(t)=8\r\n= DayWithinYear(t)272InLeapYear(t) if MonthFromTime(t)=9\r\n= DayWithinYear(t)303InLeapYear(t) if MonthFromTime(t)=10\r\n= DayWithinYear(t)333InLeapYear(t) if MonthFromTime(t)=11",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/b7831cdf-7144-4b5c-a307-69a2887f49ff.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c6658fcb85e1ba12c7b26e15e18cfdf6639dcf8b2136adff05e8f26737646c8e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 395
      },
      {
        "segments": [
          {
            "segment_id": "650bbc57-3f02-4bf9-8a9f-78cd24644e12",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 179,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 167\r\n15.9.1.6 Week Day\r\nThe weekday for a particular time value t is defined as\r\nWeekDay(t) = (Day(t) + 4) modulo 7\r\nA weekday value of 0 specifies Sunday; 1 specifies Monday; 2 specifies Tuesday; 3 specifies Wednesday; \r\n4 specifies Thursday; 5 specifies Friday; and 6 specifies Saturday. Note that WeekDay(0) = 4, corresponding to \r\nThursday, 01 January, 1970.\r\n15.9.1.7 Local Time Zone Adjustment\r\nAn implementation of ECMAScript is expected to determine the local time zone adjustment. The local time \r\nzone adjustment is a value LocalTZA measured in milliseconds which when added to UTC represents the \r\nlocal standard time. Daylight saving time is not reflected by LocalTZA. The value LocalTZA does not vary with \r\ntime but depends only on the geographic location.\r\n15.9.1.8 Daylight Saving Time Adjustment\r\nAn implementation of ECMAScript is expected to determine the daylight saving time algorithm. The algorithm \r\nto determine the daylight saving time adjustment DaylightSavingTA(t), measured in milliseconds, must depend \r\nonly on four things:\r\n(1) the time since the beginning of the year\r\nt – TimeFromYear(YearFromTime(t))\r\n(2) whether t is in a leap year\r\nInLeapYear(t)\r\n(3) the week day of the beginning of the year\r\nWeekDay(TimeFromYear(YearFromTime(t)))\r\nand (4) the geographic location.\r\nThe implementation of ECMAScript should not try to determine whether the exact time was subject to daylight \r\nsaving time, but just whether daylight saving time would have been in effect if the current daylight saving time \r\nalgorithm had been used at the time. This avoids complications such as taking into account the years that the \r\nlocale observed daylight saving time year round.\r\nIf the host environment provides functionality for determining daylight saving time, the implementation of \r\nECMAScript is free to map the year in question to an equivalent year (same leap-year-ness and same starting \r\nweek day for the year) for which the host environment provides daylight saving time information. The only \r\nrestriction is that all equivalent years should produce the same result.\r\n15.9.1.9 Local Time\r\nConversion from UTC to local time is defined by\r\nLocalTime(t) = t + LocalTZA + DaylightSavingTA(t)\r\nConversion from local time to UTC is defined by\r\nUTC(t) = t – LocalTZA – DaylightSavingTA(t – LocalTZA)\r\nNote that UTC(LocalTime(t)) is not necessarily always equal to t.\r\n15.9.1.10 Hours, Minutes, Second, and Milliseconds\r\nThe following functions are useful in decomposing time values:\r\nHourFromTime(t) = floor(t / msPerHour) modulo HoursPerDay",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/650bbc57-3f02-4bf9-8a9f-78cd24644e12.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a5f1fc9204a972a296906d2f63aaef1221566f94de725d11a846d1bcda8c5969",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 391
      },
      {
        "segments": [
          {
            "segment_id": "f455fcb9-650e-4e23-8a64-46ea4c868653",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 180,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "168 © Ecma International 2011\r\nMinFromTime(t) = floor(t / msPerMinute) modulo MinutesPerHour\r\nSecFromTime(t) = floor(t / msPerSecond) modulo SecondsPerMinute\r\nmsFromTime(t) = t modulo msPerSecond\r\nwhere\r\nHoursPerDay = 24\r\nMinutesPerHour = 60\r\nSecondsPerMinute= 60\r\nmsPerSecond = 1000\r\nmsPerMinute = 60000 = msPerSecond  SecondsPerMinute\r\nmsPerHour = 3600000 = msPerMinute  MinutesPerHour\r\n15.9.1.11 MakeTime (hour, min, sec, ms)\r\nThe operator MakeTime calculates a number of milliseconds from its four arguments, which must be \r\nECMAScript Number values. This operator functions as follows:\r\n1. If hour is not finite or min is not finite or sec is not finite or ms is not finite, return NaN.\r\n2. Let h be ToInteger(hour).\r\n3. Let m be ToInteger(min).\r\n4. Let s be ToInteger(sec).\r\n5. Let milli be ToInteger(ms).\r\n6. Let t be h * msPerHour + m * msPerMinute + s * msPerSecond + milli, performing the arithmetic according \r\nto IEEE 754 rules (that is, as if using the ECMAScript operators * and +).\r\n7. Return t.\r\n15.9.1.12 MakeDay (year, month, date)\r\nThe operator MakeDay calculates a number of days from its three arguments, which must be ECMAScript \r\nNumber values. This operator functions as follows:\r\n1. If year is not finite or month is not finite or date is not finite, return NaN.\r\n2. Let y be ToInteger(year).\r\n3. Let m be ToInteger(month).\r\n4. Let dt be ToInteger(date).\r\n5. Let ym be y + floor(m /12).\r\n6. Let mn be m modulo 12.\r\n7. Find a value t such that YearFromTime(t) == ym and MonthFromTime(t) == mn and DateFromTime(t) == 1; \r\nbut if this is not possible (because some argument is out of range), return NaN.\r\n8. Return Day(t) + dt  1.\r\n15.9.1.13 MakeDate (day, time)\r\nThe operator MakeDate calculates a number of milliseconds from its two arguments, which must be \r\nECMAScript Number values. This operator functions as follows:\r\n1. If day is not finite or time is not finite, return NaN.\r\n2. Return day  msPerDay + time.\r\n15.9.1.14 TimeClip (time)\r\nThe operator TimeClip calculates a number of milliseconds from its argument, which must be an ECMAScript \r\nNumber value. This operator functions as follows:\r\n1. If time is not finite, return NaN.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f455fcb9-650e-4e23-8a64-46ea4c868653.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fb39133540a27a9eea9fec38dcea3302d703b8c580ae1e2455840a21d65a50dd",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 358
      },
      {
        "segments": [
          {
            "segment_id": "4b3ed95c-4121-40fe-82d0-346b1fae6701",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 181,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 169\r\n2. If abs(time) > 8.64 x 1015, return NaN.\r\n3. Return an implementation-dependent choice of either ToInteger(time) or ToInteger(time) + (+0). (Adding a \r\npositive zero converts 0 to +0.)\r\nNOTE The point of step 3 is that an implementation is permitted a choice of internal representations of time values, \r\nfor example as a 64-bit signed integer or as a 64-bit floating-point value. Depending on the implementation, this internal \r\nrepresentation may or may not distinguish 0 and +0.\r\n15.9.1.15 Date Time String Format\r\nECMAScript defines a string interchange format for date-times based upon a simplification of the ISO 8601 \r\nExtended Format. The format is as follows: YYYY-MM-DDTHH:mm:ss.sssZ\r\nWhere the fields are as follows:\r\nYYYY is the decimal digits of the year 0000 to 9999 in the Gregorian calendar.\r\n- ―-‖ (hyphen) appears literally twice in the string.\r\nMM is the month of the year from 01 (January) to 12 (December).\r\nDD is the day of the month from 01 to 31.\r\nT ―T‖ appears literally in the string, to indicate the beginning of the time element .\r\nHH is the number of complete hours that have passed since midnight as two decimal digits from \r\n00 to 24.\r\n: ―:‖ (colon) appears literally twice in the string.\r\nmm is the number of complete minutes since the start of the hour as two decimal digits from 00 to \r\n59.\r\nss is the number of complete seconds since the start of the minute as two decimal digits from 00 \r\nto 59.\r\n. ―.‖ (dot) appears literally in the string.\r\nsss is the number of complete milliseconds since the start of the second as three decimal digits.\r\nZ is the time zone offset specified as ―Z‖ (for UTC) or either ―+‖ or ―-‖ followed by a time \r\nexpression HH:mm\r\nThis format includes date-only forms:\r\nYYYY\r\nYYYY-MM\r\nYYYY-MM-DD\r\nIt also includes ―date-time‖ forms that consist of one of the above date-only forms immediately followed by one \r\nof the following time forms with an optional time zone offset appended: \r\nTHH:mm\r\nTHH:mm:ss\r\nTHH:mm:ss.sss\r\nAll numbers must be base 10. If the MM or DD fields are absent ―01‖ is used as the value. If the HH, mm, or ss\r\nfields are absent ―00‖ is used as the value and the value of an absent sss field is ―000‖. The value of an \r\nabsent time zone offset is ―Z‖.\r\nIllegal values (out-of-bounds as well as syntax errors) in a format string means that the format string is not a \r\nvalid instance of this format.\r\nNOTE 1 As every day both starts and ends with midnight, the two notations 00:00 and 24:00 are available to \r\ndistinguish the two midnights that can be associated with one date. This means that the following two notations refer to \r\nexactly the same point in time: 1995-02-04T24:00 and 1995-02-05T00:00",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/4b3ed95c-4121-40fe-82d0-346b1fae6701.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=03db9420aa722a9533d7b613d1f19736275feda336cb9cf943a259791b719b0f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 469
      },
      {
        "segments": [
          {
            "segment_id": "08ba1cc3-4945-4478-969d-c20bfc2eea2d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 182,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "170 © Ecma International 2011\r\nNOTE 2 There exists no international standard that specifies abbreviations for civil time zones like CET, EST, etc. and \r\nsometimes the same abbreviation is even used for two very different time zones. For this reason, ISO 8601 and this \r\nformat specifies numeric representations of date and time.\r\n15.9.1.15.1 Extended years\r\nECMAScript requires the ability to specify 6 digit years (extended years); approximately 285,426 years, either \r\nforward or backward, from 01 January, 1970 UTC. To represent years before 0 or after 9999, ISO 8601 \r\npermits the expansion of the year representation, but only by prior agreement between the sender and the \r\nreceiver. In the simplified ECMAScript format such an expanded year representation shall have 2 extra year \r\ndigits and is always prefixed with a + or – sign. The year 0 is considered positive and hence prefixed with a + \r\nsign.\r\nNOTE Examples of extended years:\r\n-283457-03-21T15:00:59.008Z 283458 B.C.\r\n-000001-01-01T00:00:00Z 2 B.C.\r\n+000000-01-01T00:00:00Z 1 B.C.\r\n+000001-01-01T00:00:00Z 1 A.D.\r\n+001970-01-01T00:00:00Z 1970 A.D.\r\n+002009-12-15T00:00:00Z 2009 A.D.\r\n+287396-10-12T08:59:00.992Z 287396 A.D.\r\n15.9.2 The Date Constructor Called as a Function\r\nWhen Date is called as a function rather than as a constructor, it returns a String representing the current \r\ntime (UTC).\r\nNOTE The function call Date(…) is not equivalent to the object creation expression new Date(…) with the same \r\narguments.\r\n15.9.2.1 Date ( [ year [, month [, date [, hours [, minutes [, seconds [, ms ] ] ] ] ] ] ] )\r\nAll of the arguments are optional; any arguments supplied are accepted but are completely ignored. A String \r\nis created and returned as if by the expression (new Date()).toString() where Date is the standard \r\nbuilt-in constructor with that name and toString is the standard built-in method \r\nDate.prototype.toString.\r\n15.9.3 The Date Constructor\r\nWhen Date is called as part of a new expression, it is a constructor: it initialises the newly created object.\r\n15.9.3.1 new Date (year, month [, date [, hours [, minutes [, seconds [, ms ] ] ] ] ] )\r\nWhen Date is called with two to seven arguments, it computes the date from year, month, and (optionally) \r\ndate, hours, minutes, seconds and ms.\r\nThe [[Prototype]] internal property of the newly constructed object is set to the original Date prototype object, \r\nthe one that is the initial value of Date.prototype (15.9.4.1).\r\nThe [[Class]] internal property of the newly constructed object is set to \"Date\".\r\nThe [[Extensible]] internal property of the newly constructed object is set to true.\r\nThe [[PrimitiveValue]] internal property of the newly constructed object is set as follows:\r\n1. Let y be ToNumber(year).\r\n2. Let m be ToNumber(month).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/08ba1cc3-4945-4478-969d-c20bfc2eea2d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=df6d1f28e375eff9aea1dc05b3d2f064451d4971d130be536b7ebdf652f42848",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 435
      },
      {
        "segments": [
          {
            "segment_id": "390e0446-528f-42c3-8383-6ff7e8e0d8a1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 183,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 171\r\n3. If date is supplied then let dt be ToNumber(date); else let dt be 1.\r\n4. If hours is supplied then let h be ToNumber(hours); else let h be 0.\r\n5. If minutes is supplied then let min be ToNumber(minutes); else let min be 0.\r\n6. If seconds is supplied then let s be ToNumber(seconds); else let s be 0.\r\n7. If ms is supplied then let milli be ToNumber(ms); else let milli be 0.\r\n8. If y is not NaN and 0  ToInteger(y)  99, then let yr be 1900+ToInteger(y); otherwise, let yr be y.\r\n9. Let finalDate be MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli)).\r\n10. Set the [[PrimitiveValue]] internal property of the newly constructed object to TimeCli p(UTC(finalDate)).\r\n15.9.3.2 new Date (value)\r\nThe [[Prototype]] internal property of the newly constructed object is set to the original Date prototype object, \r\nthe one that is the initial value of Date.prototype (15.9.4.1).\r\nThe [[Class]] internal property of the newly constructed object is set to \"Date\".\r\nThe [[Extensible]] internal property of the newly constructed object is set to true.\r\nThe [[PrimitiveValue]] internal property of the newly constructed object is set as follows:\r\n1. Let v be ToPrimitive(value).\r\n2. If Type(v) is String, then \r\na. Parse v as a date, in exactly the same manner as for the parse method (15.9.4.2); let V be the time \r\nvalue for this date.\r\n3. Else, let V be ToNumber(v).\r\n4. Set the [[PrimitiveValue]] internal property of the newly constructed object to TimeClip(V) and return.\r\n15.9.3.3 new Date ( )\r\nThe [[Prototype]] internal property of the newly constructed object is set to the original Date prototype object, \r\nthe one that is the initial value of Date.prototype (15.9.4.1).\r\nThe [[Class]] internal property of the newly constructed object is set to \"Date\".\r\nThe [[Extensible]] internal property of the newly constructed object is set to true.\r\nThe [[PrimitiveValue]] internal property of the newly constructed object is set to the time value (UTC) \r\nidentifying the current time.\r\n15.9.4 Properties of the Date Constructor\r\nThe value of the [[Prototype]] internal property of the Date constructor is the Function prototype object (15.3.4).\r\nBesides the internal properties and the length property (whose value is 7), the Date constructor has the \r\nfollowing properties:\r\n15.9.4.1 Date.prototype\r\nThe initial value of Date.prototype is the built-in Date prototype object (15.9.5).\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.9.4.2 Date.parse (string)\r\nThe parse function applies the ToString operator to its argument and interprets the resulting String as a date \r\nand time; it returns a Number, the UTC time value corresponding to the date and time. The String may be \r\ninterpreted as a local time, a UTC time, or a time in some other time zone, depending on the contents of the \r\nString. The function first attempts to parse the format of the String according to the rules called out in Date ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/390e0446-528f-42c3-8383-6ff7e8e0d8a1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bc92850189f3b442107f06832dfb9dd70ce6cf7946d777ed7f9e0c252b0e0d5a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 485
      },
      {
        "segments": [
          {
            "segment_id": "23ba9aec-55d1-48e5-bfe2-0230ec260965",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 184,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "172 © Ecma International 2011\r\nTime String Format (15.9.1.15). If the String does not conform to that format the function may fall back to any \r\nimplementation-specific heuristics or implementation-specific date formats. Unrecognisable Strings or dates \r\ncontaining illegal element values in the format String shall cause Date.parse to return NaN.\r\nIf x is any Date object whose milliseconds amount is zero within a particular implementation of ECMAScript, \r\nthen all of the following expressions should produce the same numeric value in that implementation, if all the \r\nproperties referenced have their initial values:\r\nx.valueOf()\r\nDate.parse(x.toString())\r\nDate.parse(x.toUTCString())\r\nDate.parse(x.toISOString())\r\nHowever, the expression\r\nDate.parse(x.toLocaleString())\r\nis not required to produce the same Number value as the preceding three expressions and, in general, the \r\nvalue produced by Date.parse is implementation-dependent when given any String value that does not \r\nconform to the Date Time String Format (15.9.1.15) and that could not be produced in that implementation by \r\nthe toString or toUTCString method.\r\n15.9.4.3 Date.UTC (year, month [, date [, hours [, minutes [, seconds [, ms ] ] ] ] ] )\r\nWhen the UTC function is called with fewer than two arguments, the behaviour is implementation-dependent. \r\nWhen the UTC function is called with two to seven arguments, it computes the date from year, month and \r\n(optionally) date, hours, minutes, seconds and ms. The following steps are taken:\r\n1. Let y be ToNumber(year).\r\n2. Let m be ToNumber(month).\r\n3. If date is supplied then let dt be ToNumber(date); else let dt be 1.\r\n4. If hours is supplied then let h be ToNumber(hours); else let h be 0.\r\n5. If minutes is supplied then let min be ToNumber(minutes); else let min be 0.\r\n6. If seconds is supplied then let s be ToNumber(seconds); else let s be 0.\r\n7. If ms is supplied then let milli be ToNumber(ms); else let milli be 0.\r\n8. If y is not NaN and 0  ToInteger(y)  99, then let yr be 1900+ToInteger(y); otherwise, let yr be y.\r\n9. Return TimeClip(MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli))).\r\nThe length property of the UTC function is 7.\r\nNOTE The UTC function differs from the Date constructor in two ways: it returns a time value as a Number, rather \r\nthan creating a Date object, and it interprets the arguments in UTC rather than as local time.\r\n15.9.4.4 Date.now ( )\r\nThe now function return a Number value that is the time value designating the UTC date and time of the \r\noccurrence of the call to now.\r\n15.9.5 Properties of the Date Prototype Object\r\nThe Date prototype object is itself a Date object (its [[Class]] is \"Date\") whose [[PrimitiveValue]] is NaN.\r\nThe value of the [[Prototype]] internal property of the Date prototype object is the standard built-in Object \r\nprototype object (15.2.4).\r\nIn following descriptions of functions that are properties of the Date prototype object, the phrase ―this Date \r\nobject‖ refers to the object that is the this value for the invocation of the function. Unless explicitly noted \r\notherwise, none of these functions are generic; a TypeError exception is thrown if the this value is not an \r\nobject for which the value of the [[Class]] internal property is \"Date\". Also, the phrase ―this time value‖ refers \r\nto the Number value for the time represented by this Date object, that is, the value of the [[PrimitiveValue]] \r\ninternal property of this Date object.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/23ba9aec-55d1-48e5-bfe2-0230ec260965.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=79a858f6c6ce88a34949f8503480c9cd5f4d885d30a2aa14caf17aec98598761",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 555
      },
      {
        "segments": [
          {
            "segment_id": "23ba9aec-55d1-48e5-bfe2-0230ec260965",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 184,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "172 © Ecma International 2011\r\nTime String Format (15.9.1.15). If the String does not conform to that format the function may fall back to any \r\nimplementation-specific heuristics or implementation-specific date formats. Unrecognisable Strings or dates \r\ncontaining illegal element values in the format String shall cause Date.parse to return NaN.\r\nIf x is any Date object whose milliseconds amount is zero within a particular implementation of ECMAScript, \r\nthen all of the following expressions should produce the same numeric value in that implementation, if all the \r\nproperties referenced have their initial values:\r\nx.valueOf()\r\nDate.parse(x.toString())\r\nDate.parse(x.toUTCString())\r\nDate.parse(x.toISOString())\r\nHowever, the expression\r\nDate.parse(x.toLocaleString())\r\nis not required to produce the same Number value as the preceding three expressions and, in general, the \r\nvalue produced by Date.parse is implementation-dependent when given any String value that does not \r\nconform to the Date Time String Format (15.9.1.15) and that could not be produced in that implementation by \r\nthe toString or toUTCString method.\r\n15.9.4.3 Date.UTC (year, month [, date [, hours [, minutes [, seconds [, ms ] ] ] ] ] )\r\nWhen the UTC function is called with fewer than two arguments, the behaviour is implementation-dependent. \r\nWhen the UTC function is called with two to seven arguments, it computes the date from year, month and \r\n(optionally) date, hours, minutes, seconds and ms. The following steps are taken:\r\n1. Let y be ToNumber(year).\r\n2. Let m be ToNumber(month).\r\n3. If date is supplied then let dt be ToNumber(date); else let dt be 1.\r\n4. If hours is supplied then let h be ToNumber(hours); else let h be 0.\r\n5. If minutes is supplied then let min be ToNumber(minutes); else let min be 0.\r\n6. If seconds is supplied then let s be ToNumber(seconds); else let s be 0.\r\n7. If ms is supplied then let milli be ToNumber(ms); else let milli be 0.\r\n8. If y is not NaN and 0  ToInteger(y)  99, then let yr be 1900+ToInteger(y); otherwise, let yr be y.\r\n9. Return TimeClip(MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli))).\r\nThe length property of the UTC function is 7.\r\nNOTE The UTC function differs from the Date constructor in two ways: it returns a time value as a Number, rather \r\nthan creating a Date object, and it interprets the arguments in UTC rather than as local time.\r\n15.9.4.4 Date.now ( )\r\nThe now function return a Number value that is the time value designating the UTC date and time of the \r\noccurrence of the call to now.\r\n15.9.5 Properties of the Date Prototype Object\r\nThe Date prototype object is itself a Date object (its [[Class]] is \"Date\") whose [[PrimitiveValue]] is NaN.\r\nThe value of the [[Prototype]] internal property of the Date prototype object is the standard built-in Object \r\nprototype object (15.2.4).\r\nIn following descriptions of functions that are properties of the Date prototype object, the phrase ―this Date \r\nobject‖ refers to the object that is the this value for the invocation of the function. Unless explicitly noted \r\notherwise, none of these functions are generic; a TypeError exception is thrown if the this value is not an \r\nobject for which the value of the [[Class]] internal property is \"Date\". Also, the phrase ―this time value‖ refers \r\nto the Number value for the time represented by this Date object, that is, the value of the [[PrimitiveValue]] \r\ninternal property of this Date object.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/23ba9aec-55d1-48e5-bfe2-0230ec260965.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=79a858f6c6ce88a34949f8503480c9cd5f4d885d30a2aa14caf17aec98598761",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 555
      },
      {
        "segments": [
          {
            "segment_id": "382d4950-3025-48ad-be63-7829284e687d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 185,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 173\r\n15.9.5.1 Date.prototype.constructor\r\nThe initial value of Date.prototype.constructor is the built-in Date constructor.\r\n15.9.5.2 Date.prototype.toString ( )\r\nThis function returns a String value. The contents of the String are implementation-dependent, but are \r\nintended to represent the Date in the current time zone in a convenient, human-readable form.\r\nNOTE For any Date value d whose milliseconds amount is zero, the result of Date.parse(d.toString()) is \r\nequal to d.valueOf(). See 15.9.4.2.\r\n15.9.5.3 Date.prototype.toDateString ( )\r\nThis function returns a String value. The contents of the String are implementation-dependent, but are \r\nintended to represent the ―date‖ portion of the Date in the current time zone in a convenient, human-readable \r\nform.\r\n15.9.5.4 Date.prototype.toTimeString ( )\r\nThis function returns a String value. The contents of the String are implementation-dependent, but are \r\nintended to represent the ―time‖ portion of the Date in the current time zone in a convenient, human-readable \r\nform.\r\n15.9.5.5 Date.prototype.toLocaleString ( )\r\nThis function returns a String value. The contents of the String are implementation-dependent, but are \r\nintended to represent the Date in the current time zone in a convenient, human-readable form that \r\ncorresponds to the conventions of the host environment‘s current locale.\r\nNOTE The first parameter to this function is likely to be used in a future version of this standard; it is recommended \r\nthat implementations do not use this parameter position for anything else.\r\n15.9.5.6 Date.prototype.toLocaleDateString ( )\r\nThis function returns a String value. The contents of the String are implementation-dependent, but are \r\nintended to represent the ―date‖ portion of the Date in the current time zone in a convenient, human-readable \r\nform that corresponds to the conventions of the host environment‘s current locale.\r\nNOTE The first parameter to this function is likely to be used in a future version of this standard; it is recommended \r\nthat implementations do not use this parameter position for anything else.\r\n15.9.5.7 Date.prototype.toLocaleTimeString ( )\r\nThis function returns a String value. The contents of the String are implementation-dependent, but are \r\nintended to represent the ―time‖ portion of the Date in the current time zone in a convenient, human-readable \r\nform that corresponds to the conventions of the host environment‘s current locale.\r\nNOTE The first parameter to this function is likely to be used in a future version of this standard; it is recommended \r\nthat implementations do not use this parameter position for anything else.\r\n15.9.5.8 Date.prototype.valueOf ( )\r\nThe valueOf function returns a Number, which is this time value.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/382d4950-3025-48ad-be63-7829284e687d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=85fb4d862b9ae266669e6f5df43a3ce01fa9fed805f6c5cdf769aaf5260de227",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 405
      },
      {
        "segments": [
          {
            "segment_id": "66088561-4fd3-4e26-91b9-d286e7a3976d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 186,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "174 © Ecma International 2011\r\n15.9.5.9 Date.prototype.getTime ( )\r\n1. Return this time value.\r\n15.9.5.10 Date.prototype.getFullYear ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return YearFromTime(LocalTime(t)).\r\n15.9.5.11 Date.prototype.getUTCFullYear ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return YearFromTime(t).\r\n15.9.5.12 Date.prototype.getMonth ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return MonthFromTime(LocalTime(t)).\r\n15.9.5.13 Date.prototype.getUTCMonth ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return MonthFromTime(t).\r\n15.9.5.14 Date.prototype.getDate ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return DateFromTime(LocalTime(t)).\r\n15.9.5.15 Date.prototype.getUTCDate ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return DateFromTime(t).\r\n15.9.5.16 Date.prototype.getDay ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return WeekDay(LocalTime(t)).\r\n15.9.5.17 Date.prototype.getUTCDay ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return WeekDay(t).\r\n15.9.5.18 Date.prototype.getHours ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return HourFromTime(LocalTime(t)).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/66088561-4fd3-4e26-91b9-d286e7a3976d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=75d4c907985b587b70f584712bd8217b688a58f6add1cb8ef48b537b0ff57aa7",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "495fdd0e-6b27-496b-a3bc-13ad58cc0e44",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 187,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 175\r\n15.9.5.19 Date.prototype.getUTCHours ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return HourFromTime(t).\r\n15.9.5.20 Date.prototype.getMinutes ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return MinFromTime(LocalTime(t)).\r\n15.9.5.21 Date.prototype.getUTCMinutes ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return MinFromTime(t).\r\n15.9.5.22 Date.prototype.getSeconds ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return SecFromTime(LocalTime(t)).\r\n15.9.5.23 Date.prototype.getUTCSeconds ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return SecFromTime(t).\r\n15.9.5.24 Date.prototype.getMilliseconds ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return msFromTime(LocalTime(t)).\r\n15.9.5.25 Date.prototype.getUTCMilliseconds ( )\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return msFromTime(t).\r\n15.9.5.26 Date.prototype.getTimezoneOffset ( )\r\nReturns the difference between local time and UTC time in minutes.\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return (t  LocalTime(t)) / msPerMinute.\r\n15.9.5.27 Date.prototype.setTime (time)\r\n1. Let v be TimeClip(ToNumber(time)).\r\n2. Set the [[PrimitiveValue]] internal property of this Date object to v.\r\n3. Return v.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/495fdd0e-6b27-496b-a3bc-13ad58cc0e44.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cdc1c209e1f2da81b6574e7a68ca5d0a51b068a77ca20c67c1b952f6c6b188a6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 414
      },
      {
        "segments": [
          {
            "segment_id": "a2a3a805-ded7-4a8b-8688-50b09d1b2087",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 188,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "176 © Ecma International 2011\r\n15.9.5.28 Date.prototype.setMilliseconds (ms)\r\n1. Let t be the result of LocalTime(this time value).\r\n2. Let time be MakeTime(HourFromTime(t), MinFromTime(t), SecFromTime(t), ToNumber(ms)).\r\n3. Let u be TimeClip(UTC(MakeDate(Day(t), time))).\r\n4. Set the [[PrimitiveValue]] internal property of this Date object to u.\r\n5. Return u.\r\n15.9.5.29 Date.prototype.setUTCMilliseconds (ms)\r\n1. Let t be this time value.\r\n2. Let time be MakeTime(HourFromTime(t), MinFromTime(t), SecFromTime(t), ToNumber(ms)).\r\n3. Let v be TimeClip(MakeDate(Day(t), time)).\r\n4. Set the [[PrimitiveValue]] internal property of this Date object to v.\r\n5. Return v.\r\n15.9.5.30 Date.prototype.setSeconds (sec [, ms ] )\r\nIf ms is not specified, this behaves as if ms were specified with the value getMilliseconds().\r\n1. Let t be the result of LocalTime(this time value).\r\n2. Let s be ToNumber(sec).\r\n3. If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).\r\n4. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), MinFromTime(t), s, milli)).\r\n5. Let u be TimeClip(UTC(date)).\r\n6. Set the [[PrimitiveValue]] internal property of this Date object to u.\r\n7. Return u.\r\nThe length property of the setSeconds method is 2.\r\n15.9.5.31 Date.prototype.setUTCSeconds (sec [, ms ] )\r\nIf ms is not specified, this behaves as if ms were specified with the value getUTCMilliseconds().\r\n1. Let t be this time value.\r\n2. Let s be ToNumber(sec).\r\n3. If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).\r\n4. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), MinFromTime(t), s, milli)).\r\n5. Let v be TimeClip(date).\r\n6. Set the [[PrimitiveValue]] internal property of this Date object to v.\r\n7. Return v.\r\nThe length property of the setUTCSeconds method is 2.\r\n15.9.5.32 Date.prototype.setMinutes (min [, sec [, ms ] ] )\r\nIf sec is not specified, this behaves as if sec were specified with the value getSeconds().\r\nIf ms is not specified, this behaves as if ms were specified with the value getMilliseconds().\r\n1. Let t be the result of LocalTime(this time value).\r\n2. Let m be ToNumber(min).\r\n3. If sec is not specified, then let s be SecFromTime(t); otherwise, let s be ToNumber(sec).\r\n4. If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).\r\n5. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), m, s, milli)).\r\n6. Let u be TimeClip(UTC(date)).\r\n7. Set the [[PrimitiveValue]] internal property of this Date object to u.\r\n8. Return u.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/a2a3a805-ded7-4a8b-8688-50b09d1b2087.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=81be33b86493424e3210ea8c7ab80455d46d37da5e11efbb97878f277c450a5e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 385
      },
      {
        "segments": [
          {
            "segment_id": "55be5d09-8a2e-489d-9348-dd81b0d8af7a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 189,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 177\r\nThe length property of the setMinutes method is 3.\r\n15.9.5.33 Date.prototype.setUTCMinutes (min [, sec [, ms ] ] )\r\nIf sec is not specified, this behaves as if sec were specified with the value getUTCSeconds().\r\nIf ms is not specified, this function behaves as if ms were specified with the value return by \r\ngetUTCMilliseconds().\r\n1. Let t be this time value.\r\n2. Let m be ToNumber(min).\r\n3. If sec is not specified, then let s be SecFromTime(t); otherwise, let s be ToNumber(sec).\r\n4. If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).\r\n5. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), m, s, milli)).\r\n6. Let v be TimeClip(date).\r\n7. Set the [[PrimitiveValue]] internal property of this Date object to v.\r\n8. Return v.\r\nThe length property of the setUTCMinutes method is 3.\r\n15.9.5.34 Date.prototype.setHours (hour [, min [, sec [, ms ] ] ] )\r\nIf min is not specified, this behaves as if min were specified with the value getMinutes().\r\nIf sec is not specified, this behaves as if sec were specified with the value getSeconds().\r\nIf ms is not specified, this behaves as if ms were specified with the value getMilliseconds().\r\n1. Let t be the result of LocalTime(this time value).\r\n2. Let h be ToNumber(hour).\r\n3. If min is not specified, then let m be MinFromTime(t); otherwise, let m be ToNumber(min).\r\n4. If If sec is not specified, then let s be SecFromTime(t); otherwise, let s be ToNumber(sec).\r\n5. If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).\r\n6. Let date be MakeDate(Day(t), MakeTime(h, m, s, milli)).\r\n7. Let u be TimeClip(UTC(date)).\r\n8. Set the [[PrimitiveValue]] internal property of this Date object to u.\r\n9. Return u.\r\nThe length property of the setHours method is 4.\r\n15.9.5.35 Date.prototype.setUTCHours (hour [, min [, sec [, ms ] ] ] )\r\nIf min is not specified, this behaves as if min were specified with the value getUTCMinutes().\r\nIf sec is not specified, this behaves as if sec were specified with the value getUTCSeconds().\r\nIf ms is not specified, this behaves as if ms were specified with the value getUTCMilliseconds().\r\n1. Let t be this time value.\r\n2. Let h be ToNumber(hour).\r\n3. If min is not specified, then let m be MinFromTime(t); otherwise, let m be ToNumber(min).\r\n4. If sec is not specified, then let s be SecFromTime(t); otherwise, let s be ToNumber(sec).\r\n5. If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).\r\n6. Let newDate be MakeDate(Day(t), MakeTime(h, m, s, milli)).\r\n7. Let v be TimeClip(newDate).\r\n8. Set the [[PrimitiveValue]] internal property of this Date object to v.\r\n9. Return v.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/55be5d09-8a2e-489d-9348-dd81b0d8af7a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=72ac10e3750cb35bca1ef0dadd189015fd997012ff6bc0481d127eed7fc63214",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 454
      },
      {
        "segments": [
          {
            "segment_id": "e787db0f-5345-4336-b10e-765b8cd1cc3f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 190,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "178 © Ecma International 2011\r\nThe length property of the setUTCHours method is 4.\r\n15.9.5.36 Date.prototype.setDate (date)\r\n1. Let t be the result of LocalTime(this time value).\r\n2. Let dt be ToNumber(date).\r\n3. Let newDate be MakeDate(MakeDay(YearFromTime(t), MonthFromTime(t), dt), TimeWithinDay(t)).\r\n4. Let u be TimeClip(UTC(newDate)).\r\n5. Set the [[PrimitiveValue]] internal property of this Date object to u.\r\n6. Return u.\r\n15.9.5.37 Date.prototype.setUTCDate (date)\r\n1. Let t be this time value.\r\n2. Let dt be ToNumber(date).\r\n3. Let newDate be MakeDate(MakeDay(YearFromTime(t), MonthFromTime(t), dt), TimeWithinDay(t)).\r\n4. Let v be TimeClip(newDate).\r\n5. Set the [[PrimitiveValue]] internal property of this Date object to v.\r\n6. Return v.\r\n15.9.5.38 Date.prototype.setMonth (month [, date ] )\r\nIf date is not specified, this behaves as if date were specified with the value getDate().\r\n1. Let t be the result of LocalTime(this time value).\r\n2. Let m be ToNumber(month).\r\n3. If date is not specified, then let dt be DateFromTime(t); otherwise, let dt be ToNumber(date).\r\n4. Let newDate be MakeDate(MakeDay(YearFromTime(t), m, dt), TimeWithinDay(t)).\r\n5. Let u be TimeClip(UTC(newDate)).\r\n6. Set the [[PrimitiveValue]] internal property of this Date object to u.\r\n7. Return u.\r\nThe length property of the setMonth method is 2.\r\n15.9.5.39 Date.prototype.setUTCMonth (month [, date ] )\r\nIf date is not specified, this behaves as if date were specified with the value getUTCDate().\r\n1. Let t be this time value.\r\n2. Let m be ToNumber(month).\r\n3. If date is not specified, then let dt be DateFromTime(t); otherwise, let dt be ToNumber(date).\r\n4. Let newDate be MakeDate(MakeDay(YearFromTime(t), m, dt), TimeWithinDay(t)).\r\n5. Let v be TimeClip(newDate).\r\n6. Set the [[PrimitiveValue]] internal property of this Date object to v.\r\n7. Return v.\r\nThe length property of the setUTCMonth method is 2.\r\n15.9.5.40 Date.prototype.setFullYear (year [, month [, date ] ] )\r\nIf month is not specified, this behaves as if month were specified with the value getMonth().\r\nIf date is not specified, this behaves as if date were specified with the value getDate().\r\n1. Let t be the result of LocalTime(this time value); but if this time value is NaN, let t be +0.\r\n2. Let y be ToNumber(year).\r\n3. If month is not specified, then let m be MonthFromTime(t); otherwise, let m be ToNumber(month).\r\n4. If date is not specified, then let dt be DateFromTime(t); otherwise, let dt be ToNumber(date).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/e787db0f-5345-4336-b10e-765b8cd1cc3f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=75768813230014ba45c80027fc627448d46a1f857f7d55ee9ecd080f56b2025b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 382
      },
      {
        "segments": [
          {
            "segment_id": "30da41f8-123c-4c39-a246-adb01ddb762c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 191,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 179\r\n5. Let newDate be MakeDate(MakeDay(y, m, dt), TimeWithinDay(t)).\r\n6. Let u be TimeClip(UTC(newDate)).\r\n7. Set the [[PrimitiveValue]] internal property of this Date object to u.\r\n8. Return u.\r\nThe length property of the setFullYear method is 3.\r\n15.9.5.41 Date.prototype.setUTCFullYear (year [, month [, date ] ] )\r\nIf month is not specified, this behaves as if month were specified with the value getUTCMonth().\r\nIf date is not specified, this behaves as if date were specified with the value getUTCDate().\r\n1. Let t be this time value; but if this time value is NaN, let t be +0.\r\n2. Let y be ToNumber(year).\r\n3. If month is not specified, then let m be MonthFromTime(t); otherwise, let m be ToNumber(month).\r\n4. If date is not specified, then let dt be DateFromTime(t); otherwise, let dt be ToNumber(date).\r\n5. Let newDate be MakeDate(MakeDay(y, m, dt), TimeWithinDay(t)).\r\n6. Let v be TimeClip(newDate).\r\n7. Set the [[PrimitiveValue]] internal property of this Date object to v.\r\n8. Return v.\r\nThe length property of the setUTCFullYear method is 3.\r\n15.9.5.42 Date.prototype.toUTCString ( )\r\nThis function returns a String value. The contents of the String are implementation-dependent, but are \r\nintended to represent the Date in a convenient, human-readable form in UTC.\r\nNOTE The intent is to produce a String representation of a date that is more readable than the format specified in \r\n15.9.1.15. It is not essential that the chosen format be unambiguous or easily machine parsable. If an implementation \r\ndoes not have a preferred human-readable format it is recommended to use the format defined in 15.9.1.15 but with a \r\nspace rather than a ―T‖ used to separate the date and time elements.\r\n15.9.5.43 Date.prototype.toISOString ( )\r\nThis function returns a String value represent the instance in time represented by this Date object. The format \r\nof the String is the Date Time string format defined in 15.9.1.15. All fields are present in the String. The time \r\nzone is always UTC, denoted by the suffix Z. If the time value of this object is not a finite Number a \r\nRangeError exception is thrown.\r\n15.9.5.44 Date.prototype.toJSON ( key )\r\nThis function provides a String representation of a Date object for use by JSON.stringify (15.12.3).\r\nWhen the toJSON method is called with argument key, the following steps are taken:\r\n1. Let O be the result of calling ToObject, giving it the this value as its argument.\r\n2. Let tv be ToPrimitive(O, hint Number).\r\n3. If tv is a Number and is not finite, return null.\r\n4. Let toISO be the result of calling the [[Get]] internal method of O with argument \"toISOString\".\r\n5. If IsCallable(toISO) is false, throw a TypeError exception.\r\n6. Return the result of calling the [[Call]] internal method of toISO with O as the this value and an empty \r\nargument list.\r\nNOTE 1 The argument is ignored.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/30da41f8-123c-4c39-a246-adb01ddb762c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=72e1a1e89c6a8ca4b359c51b215b0aa6ca1e7d39206834a6b26d12a70ca13ffa",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 473
      },
      {
        "segments": [
          {
            "segment_id": "b4e9dd7f-3f79-44a5-aa90-d5bdfaec82f7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 192,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "180 © Ecma International 2011\r\nNOTE 2 The toJSON function is intentionally generic; it does not require that its this value be a Date object. Therefore, \r\nit can be transferred to other kinds of objects for use as a method. However, it does require that any such object have a \r\ntoISOString method. An object is free to use the argument key to filter its stringification. \r\n15.9.6 Properties of Date Instances\r\nDate instances inherit properties from the Date prototype object and their [[Class]] internal property value is \r\n\"Date\". Date instances also have a [[PrimitiveValue]] internal property.\r\nThe [[PrimitiveValue]] internal property is time value represented by this Date object.\r\n15.10 RegExp (Regular Expression) Objects\r\nA RegExp object contains a regular expression and the associated flags.\r\nNOTE The form and functionality of regular expressions is modelled after the regular expression facility in the Perl 5 \r\nprogramming language.\r\n15.10.1 Patterns\r\nThe RegExp constructor applies the following grammar to the input pattern String. An error occurs if the \r\ngrammar cannot interpret the String as an expansion of Pattern.\r\nSyntax\r\nPattern ::\r\nDisjunction\r\nDisjunction ::\r\nAlternative\r\nAlternative | Disjunction\r\nAlternative ::\r\n[empty]\r\nAlternative Term\r\nTerm ::\r\nAssertion\r\nAtom\r\nAtom Quantifier\r\nAssertion ::\r\n^\r\n$\r\n\\ b\r\n\\ B\r\n( ? = Disjunction )\r\n( ? ! Disjunction )\r\nQuantifier ::\r\nQuantifierPrefix\r\nQuantifierPrefix ?",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/b4e9dd7f-3f79-44a5-aa90-d5bdfaec82f7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=faa7cf46cef65725ed23fc37562b2c0a734023382a76c770f381a65b46b94e83",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "cbf66235-b12e-4944-a860-9233e00f08e5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 193,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 181\r\nQuantifierPrefix ::\r\n*\r\n+\r\n?\r\n{ DecimalDigits }\r\n{ DecimalDigits , }\r\n{ DecimalDigits , DecimalDigits }\r\nAtom ::\r\nPatternCharacter\r\n.\r\n\\ AtomEscape\r\nCharacterClass\r\n( Disjunction )\r\n( ? : Disjunction )\r\nPatternCharacter ::\r\nSourceCharacter but not one of\r\n ^ $ \\ . * + ? ( ) [ ] { } |\r\nAtomEscape ::\r\nDecimalEscape\r\nCharacterEscape\r\nCharacterClassEscape\r\nCharacterEscape ::\r\nControlEscape\r\nc ControlLetter\r\nHexEscapeSequence\r\nUnicodeEscapeSequence\r\nIdentityEscape\r\nControlEscape :: one of\r\nf n r t v\r\nControlLetter :: one of\r\na b c d e f g h i j k l m n o p q r s t u v w x y z\r\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\r\nIdentityEscape ::\r\nSourceCharacter but not IdentifierPart\r\n<ZWJ>\r\n<ZWNJ>\r\nDecimalEscape ::\r\nDecimalIntegerLiteral [lookahead  DecimalDigit]\r\nCharacterClassEscape :: one of\r\nd D s S w W\r\nCharacterClass ::\r\n[ [lookahead  {^}] ClassRanges ]\r\n[ ^ ClassRanges ]\r\nClassRanges ::\r\n[empty]\r\nNonemptyClassRanges",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/cbf66235-b12e-4944-a860-9233e00f08e5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5125a5fbc13f71ae9bb8e0cc8838a8dd4277bad76480ce24f3862693c41f4c56",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 393
      },
      {
        "segments": [
          {
            "segment_id": "954060dc-606e-4306-a7fb-4679ab0aa92a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 194,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "182 © Ecma International 2011\r\nNonemptyClassRanges ::\r\nClassAtom\r\nClassAtom NonemptyClassRangesNoDash\r\nClassAtom - ClassAtom ClassRanges\r\nNonemptyClassRangesNoDash ::\r\nClassAtom\r\nClassAtomNoDash NonemptyClassRangesNoDash\r\nClassAtomNoDash - ClassAtom ClassRanges\r\nClassAtom ::\r\n-\r\nClassAtomNoDash\r\nClassAtomNoDash ::\r\nSourceCharacter but not one of \\ or ] or -\r\n\\ ClassEscape\r\nClassEscape ::\r\nDecimalEscape\r\nb\r\nCharacterEscape\r\nCharacterClassEscape\r\n15.10.2 Pattern Semantics\r\nA regular expression pattern is converted into an internal procedure using the process described below. An \r\nimplementation is encouraged to use more efficient algorithms than the ones listed below, as long as the \r\nresults are the same. The internal procedure is used as the value of a RegExp object‘s [[Match]] internal \r\nproperty.\r\n15.10.2.1 Notation\r\nThe descriptions below use the following variables:\r\n Input is the String being matched by the regular expression pattern. The notation input[n] means \r\nthe n\r\nth character of input, where n can range between 0 (inclusive) and InputLength (exclusive).\r\n InputLength is the number of characters in the Input String.\r\n NcapturingParens is the total number of left capturing parentheses (i.e. the total number of times \r\nthe Atom :: ( Disjunction ) production is expanded) in the pattern. A left capturing parenthesis is \r\nany ( pattern character that is matched by the ( terminal of the Atom :: ( Disjunction ) production.\r\n IgnoreCase is the setting of the RegExp object's ignoreCase property.\r\n Multiline is the setting of the RegExp object‘s multiline property.\r\nFurthermore, the descriptions below use the following internal data structures:\r\n A CharSet is a mathematical set of characters.\r\n A State is an ordered pair (endIndex, captures) where endIndex is an integer and captures is an \r\ninternal array of NcapturingParens values. States are used to represent partial match states in the \r\nregular expression matching algorithms. The endIndex is one plus the index of the last input \r\ncharacter matched so far by the pattern, while captures holds the results of capturing parentheses. \r\nThe n\r\nth element of captures is either a String that represents the value obtained by the nth set of \r\ncapturing parentheses or undefined if the n\r\nth set of capturing parentheses hasn‘t been reached \r\nyet. Due to backtracking, many States may be in use at any time during the matching process.\r\n A MatchResult is either a State or the special token failure that indicates that the match failed.\r\n A Continuation procedure is an internal closure (i.e. an internal procedure with some arguments \r\nalready bound to values) that takes one State argument and returns a MatchResult result. If an ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/954060dc-606e-4306-a7fb-4679ab0aa92a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dc820e6aed2cdc2c2f52901f401768c766e7f2b737a09899f9925b4b102cc13a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 411
      },
      {
        "segments": [
          {
            "segment_id": "6de27400-398f-493d-9645-55d4d802710c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 195,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 183\r\ninternal closure references variables bound in the function that creates the closure, the closure \r\nuses the values that these variables had at the time the closure was created. The Continuation\r\nattempts to match the remaining portion (specified by the closure's already-bound arguments) of \r\nthe pattern against the input String, starting at the intermediate state given by its State argument. If \r\nthe match succeeds, the Continuation returns the final State that it reached; if the match fails, the \r\nContinuation returns failure.\r\n A Matcher procedure is an internal closure that takes two arguments -- a State and a Continuation --\r\nand returns a MatchResult result. A Matcher attempts to match a middle subpattern (specified by \r\nthe closure's already-bound arguments) of the pattern against the input String, starting at the \r\nintermediate state given by its State argument. The Continuation argument should be a closure that \r\nmatches the rest of the pattern. After matching the subpattern of a pattern to obtain a new State, \r\nthe Matcher then calls Continuation on that new State to test if the rest of the pattern can match as \r\nwell. If it can, the Matcher returns the State returned by Continuation; if not, the Matcher may try \r\ndifferent choices at its choice points, repeatedly calling Continuation until it either succeeds or all \r\npossibilities have been exhausted.\r\n An AssertionTester procedure is an internal closure that takes a State argument and returns a \r\nBoolean result. The assertion tester tests a specific condition (specified by the closure's already\u0002bound arguments) against the current place in the input String and returns true if the condition \r\nmatched or false if not.\r\n An EscapeValue is either a character or an integer. An EscapeValue is used to denote the \r\ninterpretation of a DecimalEscape escape sequence: a character ch means that the escape \r\nsequence is interpreted as the character ch, while an integer n means that the escape sequence \r\nis interpreted as a backreference to the n\r\nth set of capturing parentheses.\r\n15.10.2.2 Pattern\r\nThe production Pattern :: Disjunction evaluates as follows:\r\n1. Evaluate Disjunction to obtain a Matcher m.\r\n2. Return an internal closure that takes two arguments, a String str and an integer index, and performs the \r\nfollowing:\r\n1. Let Input be the given String str. This variable will be used throughout the algorithms in \r\n15.10.2.\r\n2. Let InputLength be the length of Input. This variable will be used throughout the algorithms \r\nin 15.10.2.\r\n3. Let c be a Continuation that always returns its State argument as a successful MatchResult.\r\n4. Let cap be an internal array of NcapturingParens undefined values, indexed 1 through \r\nNcapturingParens.\r\n5. Let x be the State (index, cap).\r\n6. Call m(x, c) and return its result.\r\nNOTE A Pattern evaluates (\"compiles\") to an internal procedure value. RegExp.prototype.exec can then apply \r\nthis procedure to a String and an offset within the String to determine whether the pattern would match starting at exactly \r\nthat offset within the String, and, if it does match, what the values of the capturing parentheses would be. The algorithms \r\nin 15.10.2 are designed so that compiling a pattern may throw a SyntaxError exception; on the other hand, once the \r\npattern is successfully compiled, applying its result internal procedure to find a match in a String cannot throw an \r\nexception (except for any host-defined exceptions that can occur anywhere such as out-of-memory).\r\n15.10.2.3 Disjunction\r\nThe production Disjunction :: Alternative evaluates by evaluating Alternative to obtain a Matcher and returning \r\nthat Matcher.\r\nThe production Disjunction :: Alternative | Disjunction evaluates as follows:\r\n1. Evaluate Alternative to obtain a Matcher m1.\r\n2. Evaluate Disjunction to obtain a Matcher m2.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/6de27400-398f-493d-9645-55d4d802710c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=205d702217348ab9c48ed3b9f59491794f907be6edf5575c2c91d56b9282dc21",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 606
      },
      {
        "segments": [
          {
            "segment_id": "6de27400-398f-493d-9645-55d4d802710c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 195,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 183\r\ninternal closure references variables bound in the function that creates the closure, the closure \r\nuses the values that these variables had at the time the closure was created. The Continuation\r\nattempts to match the remaining portion (specified by the closure's already-bound arguments) of \r\nthe pattern against the input String, starting at the intermediate state given by its State argument. If \r\nthe match succeeds, the Continuation returns the final State that it reached; if the match fails, the \r\nContinuation returns failure.\r\n A Matcher procedure is an internal closure that takes two arguments -- a State and a Continuation --\r\nand returns a MatchResult result. A Matcher attempts to match a middle subpattern (specified by \r\nthe closure's already-bound arguments) of the pattern against the input String, starting at the \r\nintermediate state given by its State argument. The Continuation argument should be a closure that \r\nmatches the rest of the pattern. After matching the subpattern of a pattern to obtain a new State, \r\nthe Matcher then calls Continuation on that new State to test if the rest of the pattern can match as \r\nwell. If it can, the Matcher returns the State returned by Continuation; if not, the Matcher may try \r\ndifferent choices at its choice points, repeatedly calling Continuation until it either succeeds or all \r\npossibilities have been exhausted.\r\n An AssertionTester procedure is an internal closure that takes a State argument and returns a \r\nBoolean result. The assertion tester tests a specific condition (specified by the closure's already\u0002bound arguments) against the current place in the input String and returns true if the condition \r\nmatched or false if not.\r\n An EscapeValue is either a character or an integer. An EscapeValue is used to denote the \r\ninterpretation of a DecimalEscape escape sequence: a character ch means that the escape \r\nsequence is interpreted as the character ch, while an integer n means that the escape sequence \r\nis interpreted as a backreference to the n\r\nth set of capturing parentheses.\r\n15.10.2.2 Pattern\r\nThe production Pattern :: Disjunction evaluates as follows:\r\n1. Evaluate Disjunction to obtain a Matcher m.\r\n2. Return an internal closure that takes two arguments, a String str and an integer index, and performs the \r\nfollowing:\r\n1. Let Input be the given String str. This variable will be used throughout the algorithms in \r\n15.10.2.\r\n2. Let InputLength be the length of Input. This variable will be used throughout the algorithms \r\nin 15.10.2.\r\n3. Let c be a Continuation that always returns its State argument as a successful MatchResult.\r\n4. Let cap be an internal array of NcapturingParens undefined values, indexed 1 through \r\nNcapturingParens.\r\n5. Let x be the State (index, cap).\r\n6. Call m(x, c) and return its result.\r\nNOTE A Pattern evaluates (\"compiles\") to an internal procedure value. RegExp.prototype.exec can then apply \r\nthis procedure to a String and an offset within the String to determine whether the pattern would match starting at exactly \r\nthat offset within the String, and, if it does match, what the values of the capturing parentheses would be. The algorithms \r\nin 15.10.2 are designed so that compiling a pattern may throw a SyntaxError exception; on the other hand, once the \r\npattern is successfully compiled, applying its result internal procedure to find a match in a String cannot throw an \r\nexception (except for any host-defined exceptions that can occur anywhere such as out-of-memory).\r\n15.10.2.3 Disjunction\r\nThe production Disjunction :: Alternative evaluates by evaluating Alternative to obtain a Matcher and returning \r\nthat Matcher.\r\nThe production Disjunction :: Alternative | Disjunction evaluates as follows:\r\n1. Evaluate Alternative to obtain a Matcher m1.\r\n2. Evaluate Disjunction to obtain a Matcher m2.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/6de27400-398f-493d-9645-55d4d802710c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=205d702217348ab9c48ed3b9f59491794f907be6edf5575c2c91d56b9282dc21",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 606
      },
      {
        "segments": [
          {
            "segment_id": "c646712f-fd71-43ac-a281-82d6c82da36d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 196,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "184 © Ecma International 2011\r\n3. Return an internal Matcher closure that takes two arguments, a State x and a Continuation c, and performs \r\nthe following:\r\n1. Call m1(x, c) and let r be its result.\r\n2. If r isn't failure, return r.\r\n3. Call m2(x, c) and return its result.\r\nNOTE The | regular expression operator separates two alternatives. The pattern first tries to match the left Alternative\r\n(followed by the sequel of the regular expression); if it fails, it tries to match the right Disjunction (followed by the sequel of \r\nthe regular expression). If the left Alternative, the right Disjunction, and the sequel all have choice points, all choices in the \r\nsequel are tried before moving on to the next choice in the left Alternative. If choices in the left Alternative are exhausted, \r\nthe right Disjunction is tried instead of the left Alternative. Any capturing parentheses inside a portion of the pattern skipped \r\nby | produce undefined values instead of Strings. Thus, for example,\r\n/a|ab/.exec(\"abc\")\r\nreturns the result \"a\" and not \"ab\". Moreover,\r\n/((a)|(ab))((c)|(bc))/.exec(\"abc\")\r\nreturns the array\r\n[\"abc\", \"a\", \"a\", undefined, \"bc\", undefined, \"bc\"]\r\nand not\r\n[\"abc\", \"ab\", undefined, \"ab\", \"c\", \"c\", undefined]\r\n15.10.2.4 Alternative\r\nThe production Alternative :: [empty] evaluates by returning a Matcher that takes two arguments, a State x and a \r\nContinuation c, and returns the result of calling c(x).\r\nThe production Alternative :: Alternative Term evaluates as follows:\r\n1. Evaluate Alternative to obtain a Matcher m1.\r\n2. Evaluate Term to obtain a Matcher m2.\r\n3. Return an internal Matcher closure that takes two arguments, a State x and a Continuation c, and performs \r\nthe following:\r\n1. Create a Continuation d that takes a State argument y and returns the result of calling m2(y, \r\nc).\r\n2. Call m1(x, d) and return its result.\r\nNOTE Consecutive Terms try to simultaneously match consecutive portions of the input String. If the left Alternative, \r\nthe right Term, and the sequel of the regular expression all have choice points, all choices in the sequel are tried before \r\nmoving on to the next choice in the right Term, and all choices in the right Term are tried before moving on to the next \r\nchoice in the left Alternative.\r\n15.10.2.5 Term\r\nThe production Term :: Assertion evaluates by returning an internal Matcher closure that takes two arguments, \r\na State x and a Continuation c, and performs the following:\r\n1. Evaluate Assertion to obtain an AssertionTester t.\r\n2. Call t(x) and let r be the resulting Boolean value.\r\n3. If r is false, return failure.\r\n4. Call c(x) and return its result.\r\nThe production Term :: Atom evaluates by evaluating Atom to obtain a Matcher and returning that Matcher.\r\nThe production Term :: Atom Quantifier evaluates as follows:\r\n1. Evaluate Atom to obtain a Matcher m.\r\n2. Evaluate Quantifier to obtain the three results: an integer min, an integer (or ) max, and Boolean greedy.\r\n3. If max is finite and less than min, then throw a SyntaxError exception.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c646712f-fd71-43ac-a281-82d6c82da36d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f990cc1db6f3de83b2b5fe806f9b49dd84f2e4954dcab03504d03bb712aaefdd",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 496
      },
      {
        "segments": [
          {
            "segment_id": "c66de5d1-3134-4354-9041-a0c6b4ac59a4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 197,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 185\r\n4. Let parenIndex be the number of left capturing parentheses in the entire regular expression that occur to the \r\nleft of this production expansion's Term. This is the total number of times the Atom :: ( Disjunction )\r\nproduction is expanded prior to this production's Term plus the total number of Atom :: ( Disjunction )\r\nproductions enclosing this Term.\r\n5. Let parenCount be the number of left capturing parentheses in the expansion of this production's Atom. This \r\nis the total number of Atom :: ( Disjunction ) productions enclosed by this production's Atom.\r\n6. Return an internal Matcher closure that takes two arguments, a State x and a Continuation c, and performs \r\nthe following:\r\n1. Call RepeatMatcher(m, min, max, greedy, x, c, parenIndex, parenCount) and return its \r\nresult.\r\nThe abstract operation RepeatMatcher takes eight parameters, a Matcher m, an integer min, an integer (or ) \r\nmax, a Boolean greedy, a State x, a Continuation c, an integer parenIndex, and an integer parenCount, and \r\nperforms the following:\r\n1. If max is zero, then call c(x) and return its result.\r\n2. Create an internal Continuation closure d that takes one State argument y and performs the following:\r\n1. If min is zero and y's endIndex is equal to x's endIndex, then return failure.\r\n2. If min is zero then let min2 be zero; otherwise let min2 be min–1.\r\n3. If max is , then let max2 be ; otherwise let max2 be max–1.\r\n4. Call RepeatMatcher(m, min2, max2, greedy, y, c, parenIndex, parenCount) and return its \r\nresult.\r\n3. Let cap be a fresh copy of x's captures internal array.\r\n4. For every integer k that satisfies parenIndex < k and k  parenIndex+parenCount, set cap[k] to undefined.\r\n5. Let e be x's endIndex.\r\n6. Let xr be the State (e, cap).\r\n7. If min is not zero, then call m(xr, d) and return its result.\r\n8. If greedy is false, then\r\na. Call c(x) and let z be its result.\r\nb. If z is not failure, return z.\r\nc. Call m(xr, d) and return its result.\r\n9. Call m(xr, d) and let z be its result.\r\n10. If z is not failure, return z.\r\n11. Call c(x) and return its result.\r\nNOTE 1 An Atom followed by a Quantifier is repeated the number of times specified by the Quantifier. A Quantifier can \r\nbe non-greedy, in which case the Atom pattern is repeated as few times as possible while still matching the sequel, or it \r\ncan be greedy, in which case the Atom pattern is repeated as many times as possible while still matching the sequel. The \r\nAtom pattern is repeated rather than the input String that it matches, so different repetitions of the Atom can match different \r\ninput substrings.\r\nNOTE 2 If the Atom and the sequel of the regular expression all have choice points, the Atom is first matched as many \r\n(or as few, if non-greedy) times as possible. All choices in the sequel are tried before moving on to the next choice in the \r\nlast repetition of Atom. All choices in the last (nth) repetition of Atom are tried before moving on to the next choice in the \r\nnext-to-last (n–1)st repetition of Atom; at which point it may turn out that more or fewer repetitions of Atom are now possible; \r\nthese are exhausted (again, starting with either as few or as many as possible) before moving on to the next choice in the \r\n(n-1)st repetition of Atom and so on.\r\nCompare\r\n/a[a-z]{2,4}/.exec(\"abcdefghi\")\r\nwhich returns \"abcde\" with\r\n/a[a-z]{2,4}?/.exec(\"abcdefghi\")\r\nwhich returns \"abc\".\r\nConsider also\r\n/(aa|aabaac|ba|b|c)*/.exec(\"aabaac\")\r\nwhich, by the choice point ordering above, returns the array\r\n[\"aaba\", \"ba\"]\r\nand not any of:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c66de5d1-3134-4354-9041-a0c6b4ac59a4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bb4760ae2ab59c0dee5189d4eae48c28badfeff8261ac5c87eca025bd12fa5ad",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 615
      },
      {
        "segments": [
          {
            "segment_id": "c66de5d1-3134-4354-9041-a0c6b4ac59a4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 197,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 185\r\n4. Let parenIndex be the number of left capturing parentheses in the entire regular expression that occur to the \r\nleft of this production expansion's Term. This is the total number of times the Atom :: ( Disjunction )\r\nproduction is expanded prior to this production's Term plus the total number of Atom :: ( Disjunction )\r\nproductions enclosing this Term.\r\n5. Let parenCount be the number of left capturing parentheses in the expansion of this production's Atom. This \r\nis the total number of Atom :: ( Disjunction ) productions enclosed by this production's Atom.\r\n6. Return an internal Matcher closure that takes two arguments, a State x and a Continuation c, and performs \r\nthe following:\r\n1. Call RepeatMatcher(m, min, max, greedy, x, c, parenIndex, parenCount) and return its \r\nresult.\r\nThe abstract operation RepeatMatcher takes eight parameters, a Matcher m, an integer min, an integer (or ) \r\nmax, a Boolean greedy, a State x, a Continuation c, an integer parenIndex, and an integer parenCount, and \r\nperforms the following:\r\n1. If max is zero, then call c(x) and return its result.\r\n2. Create an internal Continuation closure d that takes one State argument y and performs the following:\r\n1. If min is zero and y's endIndex is equal to x's endIndex, then return failure.\r\n2. If min is zero then let min2 be zero; otherwise let min2 be min–1.\r\n3. If max is , then let max2 be ; otherwise let max2 be max–1.\r\n4. Call RepeatMatcher(m, min2, max2, greedy, y, c, parenIndex, parenCount) and return its \r\nresult.\r\n3. Let cap be a fresh copy of x's captures internal array.\r\n4. For every integer k that satisfies parenIndex < k and k  parenIndex+parenCount, set cap[k] to undefined.\r\n5. Let e be x's endIndex.\r\n6. Let xr be the State (e, cap).\r\n7. If min is not zero, then call m(xr, d) and return its result.\r\n8. If greedy is false, then\r\na. Call c(x) and let z be its result.\r\nb. If z is not failure, return z.\r\nc. Call m(xr, d) and return its result.\r\n9. Call m(xr, d) and let z be its result.\r\n10. If z is not failure, return z.\r\n11. Call c(x) and return its result.\r\nNOTE 1 An Atom followed by a Quantifier is repeated the number of times specified by the Quantifier. A Quantifier can \r\nbe non-greedy, in which case the Atom pattern is repeated as few times as possible while still matching the sequel, or it \r\ncan be greedy, in which case the Atom pattern is repeated as many times as possible while still matching the sequel. The \r\nAtom pattern is repeated rather than the input String that it matches, so different repetitions of the Atom can match different \r\ninput substrings.\r\nNOTE 2 If the Atom and the sequel of the regular expression all have choice points, the Atom is first matched as many \r\n(or as few, if non-greedy) times as possible. All choices in the sequel are tried before moving on to the next choice in the \r\nlast repetition of Atom. All choices in the last (nth) repetition of Atom are tried before moving on to the next choice in the \r\nnext-to-last (n–1)st repetition of Atom; at which point it may turn out that more or fewer repetitions of Atom are now possible; \r\nthese are exhausted (again, starting with either as few or as many as possible) before moving on to the next choice in the \r\n(n-1)st repetition of Atom and so on.\r\nCompare\r\n/a[a-z]{2,4}/.exec(\"abcdefghi\")\r\nwhich returns \"abcde\" with\r\n/a[a-z]{2,4}?/.exec(\"abcdefghi\")\r\nwhich returns \"abc\".\r\nConsider also\r\n/(aa|aabaac|ba|b|c)*/.exec(\"aabaac\")\r\nwhich, by the choice point ordering above, returns the array\r\n[\"aaba\", \"ba\"]\r\nand not any of:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c66de5d1-3134-4354-9041-a0c6b4ac59a4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bb4760ae2ab59c0dee5189d4eae48c28badfeff8261ac5c87eca025bd12fa5ad",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 615
      },
      {
        "segments": [
          {
            "segment_id": "d36fff9d-cff4-490d-a78b-a773170236aa",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 198,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "186 © Ecma International 2011\r\n[\"aabaac\", \"aabaac\"]\r\n[\"aabaac\", \"c\"]\r\nThe above ordering of choice points can be used to write a regular expression that calculates the greatest common divisor \r\nof two numbers (represented in unary notation). The following example calculates the gcd of 10 and 15:\r\n\"aaaaaaaaaa,aaaaaaaaaaaaaaa\".replace(/^(a+)\\1*,\\1+$/,\"$1\")\r\nwhich returns the gcd in unary notation \"aaaaa\".\r\nNOTE 3 Step 4 of the RepeatMatcher clears Atom's captures each time Atom is repeated. We can see its behaviour in \r\nthe regular expression\r\n/(z)((a+)?(b+)?(c))*/.exec(\"zaacbbbcac\")\r\nwhich returns the array\r\n[\"zaacbbbcac\", \"z\", \"ac\", \"a\", undefined, \"c\"]\r\nand not\r\n[\"zaacbbbcac\", \"z\", \"ac\", \"a\", \"bbb\", \"c\"]\r\nbecause each iteration of the outermost * clears all captured Strings contained in the quantified Atom, which in this case \r\nincludes capture Strings numbered 2, 3, 4, and 5.\r\nNOTE 4 Step 1 of the RepeatMatcher's d closure states that, once the minimum number of repetitions has been \r\nsatisfied, any more expansions of Atom that match the empty String are not considered for further repetitions. This \r\nprevents the regular expression engine from falling into an infinite loop on patterns such as:\r\n/(a*)*/.exec(\"b\")\r\nor the slightly more complicated:\r\n/(a*)b\\1+/.exec(\"baaaac\")\r\nwhich returns the array\r\n[\"b\", \"\"]\r\n15.10.2.6 Assertion\r\nThe production Assertion :: ^ evaluates by returning an internal AssertionTester closure that takes a State \r\nargument x and performs the following:\r\n1. Let e be x's endIndex.\r\n2. If e is zero, return true.\r\n3. If Multiline is false, return false.\r\n4. If the character Input[e–1] is one of LineTerminator, return true.\r\n5. Return false.\r\nThe production Assertion :: $ evaluates by returning an internal AssertionTester closure that takes a State \r\nargument x and performs the following:\r\n1. Let e be x's endIndex.\r\n2. If e is equal to InputLength, return true.\r\n3. If multiline is false, return false.\r\n4. If the character Input[e] is one of LineTerminator, return true.\r\n5. Return false.\r\nThe production Assertion :: \\ b evaluates by returning an internal AssertionTester closure that takes a State \r\nargument x and performs the following:\r\n1. Let e be x's endIndex.\r\n2. Call IsWordChar(e–1) and let a be the Boolean result.\r\n3. Call IsWordChar(e) and let b be the Boolean result.\r\n4. If a is true and b is false, return true.\r\n5. If a is false and b is true, return true.\r\n6. Return false.\r\nThe production Assertion :: \\ B evaluates by returning an internal AssertionTester closure that takes a State \r\nargument x and performs the following:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/d36fff9d-cff4-490d-a78b-a773170236aa.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ca648cba7433b3aad1abe71027866f24e4a12f9fb4e92341c3a979e4f6fd1134",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 405
      },
      {
        "segments": [
          {
            "segment_id": "a409a445-a361-4f8d-81e8-1dd13e98cdda",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 199,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 187\r\n1. Let e be x's endIndex.\r\n2. Call IsWordChar(e–1) and let a be the Boolean result.\r\n3. Call IsWordChar(e) and let b be the Boolean result.\r\n4. If a is true and b is false, return false.\r\n5. If a is false and b is true, return false.\r\n6. Return true.\r\nThe production Assertion :: ( ? = Disjunction ) evaluates as follows:\r\n1. Evaluate Disjunction to obtain a Matcher m.\r\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation c, and performs \r\nthe following steps:\r\n1. Let d be a Continuation that always returns its State argument as a successful MatchResult.\r\n2. Call m(x, d) and let r be its result.\r\n3. If r is failure, return failure.\r\n4. Let y be r's State.\r\n5. Let cap be y's captures internal array.\r\n6. Let xe be x's endIndex.\r\n7. Let z be the State (xe, cap).\r\n8. Call c(z) and return its result.\r\nThe production Assertion :: ( ? ! Disjunction ) evaluates as follows:\r\n1. Evaluate Disjunction to obtain a Matcher m.\r\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation c, and performs \r\nthe following steps:\r\n1. Let d be a Continuation that always returns its State argument as a successful MatchResult.\r\n2. Call m(x, d) and let r be its result.\r\n3. If r isn't failure, return failure.\r\n4. Call c(x) and return its result.\r\nThe abstract operation IsWordChar takes an integer parameter e and performs the following:\r\n1. If e == –1 or e == InputLength, return false.\r\n2. Let c be the character Input[e].\r\n3. If c is one of the sixty-three characters below, return true.\r\na b c d e f g h i j k l m n o p q r s t u v w x y z\r\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\r\n0 1 2 3 4 5 6 7 8 9 _\r\n4. Return false.\r\n15.10.2.7 Quantifier\r\nThe production Quantifier :: QuantifierPrefix evaluates as follows:\r\n1. Evaluate QuantifierPrefix to obtain the two results: an integer min and an integer (or ) max.\r\n2. Return the three results min, max, and true.\r\nThe production Quantifier :: QuantifierPrefix ? evaluates as follows:\r\n1. Evaluate QuantifierPrefix to obtain the two results: an integer min and an integer (or ) max.\r\n2. Return the three results min, max, and false.\r\nThe production QuantifierPrefix :: * evaluates by returning the two results 0 and .\r\nThe production QuantifierPrefix :: + evaluates by returning the two results 1 and .",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/a409a445-a361-4f8d-81e8-1dd13e98cdda.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7eb0234229b7203333594bd5dbc283a99dac2a53a41e134daed5107ee6b031ab",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 456
      },
      {
        "segments": [
          {
            "segment_id": "8934e8f3-5a6d-47d9-9f84-7a78cf88c067",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 200,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "188 © Ecma International 2011\r\nThe production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1.\r\nThe production QuantifierPrefix :: { DecimalDigits } evaluates as follows:\r\n1. Let i be the MV of DecimalDigits (see 7.8.3).\r\n2. Return the two results i and i.\r\nThe production QuantifierPrefix :: { DecimalDigits , } evaluates as follows:\r\n1. Let i be the MV of DecimalDigits.\r\n2. Return the two results i and .\r\nThe production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as follows:\r\n1. Let i be the MV of the first DecimalDigits.\r\n2. Let j be the MV of the second DecimalDigits.\r\n3. Return the two results i and j.\r\n15.10.2.8 Atom\r\nThe production Atom :: PatternCharacter evaluates as follows:\r\n1. Let ch be the character represented by PatternCharacter.\r\n2. Let A be a one-element CharSet containing the character ch.\r\n3. Call CharacterSetMatcher(A, false) and return its Matcher result.\r\nThe production Atom :: . evaluates as follows:\r\n1. Let A be the set of all characters except LineTerminator.\r\n2. Call CharacterSetMatcher(A, false) and return its Matcher result.\r\nThe production Atom :: \\ AtomEscape evaluates by evaluating AtomEscape to obtain a Matcher and returning \r\nthat Matcher.\r\nThe production Atom :: CharacterClass evaluates as follows:\r\n1. Evaluate CharacterClass to obtain a CharSet A and a Boolean invert.\r\n2. Call CharacterSetMatcher(A, invert) and return its Matcher result.\r\nThe production Atom :: ( Disjunction ) evaluates as follows:\r\n1. Evaluate Disjunction to obtain a Matcher m.\r\n2. Let parenIndex be the number of left capturing parentheses in the entire regular expression that occur to the \r\nleft of this production expansion's initial left parenthesis. This is the total number of times the \r\nAtom :: ( Disjunction ) production is expanded prior to this production's Atom plus the total number of \r\nAtom :: ( Disjunction ) productions enclosing this Atom.\r\n3. Return an internal Matcher closure that takes two arguments, a State x and a Continuation c, and performs \r\nthe following steps:\r\n1. Create an internal Continuation closure d that takes one State argument y and performs the \r\nfollowing steps:\r\n1. Let cap be a fresh copy of y's captures internal array.\r\n2. Let xe be x's endIndex.\r\n3. Let ye be y's endIndex.\r\n4. Let s be a fresh String whose characters are the characters of Input at \r\npositions xe (inclusive) through ye (exclusive).\r\n5. Set cap[parenIndex+1] to s.\r\n6. Let z be the State (ye, cap).\r\n7. Call c(z) and return its result.\r\n2. Call m(x, d) and return its result.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/8934e8f3-5a6d-47d9-9f84-7a78cf88c067.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bef3740313ddfae89feefab4e5cfa6f7e1fad5813e025663f86825b753297ebb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 421
      },
      {
        "segments": [
          {
            "segment_id": "eba8fce2-4994-4656-b08a-cb7e708742f5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 201,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 189\r\nThe production Atom :: ( ? : Disjunction ) evaluates by evaluating Disjunction to obtain a Matcher and \r\nreturning that Matcher.\r\nThe abstract operation CharacterSetMatcher takes two arguments, a CharSet A and a Boolean flag invert, and \r\nperforms the following:\r\n1. Return an internal Matcher closure that takes two arguments, a State x and a Continuation c, and performs \r\nthe following steps:\r\n1. Let e be x's endIndex.\r\n2. If e == InputLength, return failure.\r\n3. Let ch be the character Input[e].\r\n4. Let cc be the result of Canonicalize(ch).\r\n5. If invert is false, then\r\na If there does not exist a member a of set A such that Canonicalize(a) == cc, return \r\nfailure.\r\n6. Else invert is true,\r\na If there exists a member a of set A such that Canonicalize(a) == cc, return failure.\r\n7. Let cap be x's captures internal array.\r\n8. Let y be the State (e+1, cap).\r\n9. Call c(y) and return its result.\r\nThe abstract operation Canonicalize takes a character parameter ch and performs the following steps:\r\n1. If IgnoreCase is false, return ch.\r\n2. Let u be ch converted to upper case as if by calling the standard built-in method \r\nString.prototype.toUpperCase on the one-character String ch.\r\n3. If u does not consist of a single character, return ch.\r\n4. Let cu be u's character.\r\n5. If ch's code unit value is greater than or equal to decimal 128 and cu's code unit value is less than decimal \r\n128, then return ch.\r\n6. Return cu.\r\nNOTE 1 Parentheses of the form ( Disjunction ) serve both to group the components of the Disjunction pattern \r\ntogether and to save the result of the match. The result can be used either in a backreference (\\ followed by a nonzero \r\ndecimal number), referenced in a replace String, or returned as part of an array from the regular expression matching \r\ninternal procedure. To inhibit the capturing behaviour of parentheses, use the form (?: Disjunction ) instead.\r\nNOTE 2 The form (?= Disjunction ) specifies a zero-width positive lookahead. In order for it to succeed, the pattern \r\ninside Disjunction must match at the current position, but the current position is not advanced before matching the sequel. \r\nIf Disjunction can match at the current position in several ways, only the first one is tried. Unlike other regular expression \r\noperators, there is no backtracking into a (?= form (this unusual behaviour is inherited from Perl). This only matters when \r\nthe Disjunction contains capturing parentheses and the sequel of the pattern contains backreferences to those captures.\r\nFor example,\r\n/(?=(a+))/.exec(\"baaabac\")\r\nmatches the empty String immediately after the first b and therefore returns the array:\r\n[\"\", \"aaa\"]\r\nTo illustrate the lack of backtracking into the lookahead, consider:\r\n/(?=(a+))a*b\\1/.exec(\"baaabac\")\r\nThis expression returns\r\n[\"aba\", \"a\"]\r\nand not:\r\n[\"aaaba\", \"a\"]\r\nNOTE 3 The form (?! Disjunction ) specifies a zero-width negative lookahead. In order for it to succeed, the pattern \r\ninside Disjunction must fail to match at the current position. The current position is not advanced before matching the \r\nsequel. Disjunction can contain capturing parentheses, but backreferences to them only make sense from within ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/eba8fce2-4994-4656-b08a-cb7e708742f5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=34428dbc07419bcfcf063e9ae4c6f377a7c643814a8c5c1d6ba28e73312aabca",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 523
      },
      {
        "segments": [
          {
            "segment_id": "eba8fce2-4994-4656-b08a-cb7e708742f5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 201,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 189\r\nThe production Atom :: ( ? : Disjunction ) evaluates by evaluating Disjunction to obtain a Matcher and \r\nreturning that Matcher.\r\nThe abstract operation CharacterSetMatcher takes two arguments, a CharSet A and a Boolean flag invert, and \r\nperforms the following:\r\n1. Return an internal Matcher closure that takes two arguments, a State x and a Continuation c, and performs \r\nthe following steps:\r\n1. Let e be x's endIndex.\r\n2. If e == InputLength, return failure.\r\n3. Let ch be the character Input[e].\r\n4. Let cc be the result of Canonicalize(ch).\r\n5. If invert is false, then\r\na If there does not exist a member a of set A such that Canonicalize(a) == cc, return \r\nfailure.\r\n6. Else invert is true,\r\na If there exists a member a of set A such that Canonicalize(a) == cc, return failure.\r\n7. Let cap be x's captures internal array.\r\n8. Let y be the State (e+1, cap).\r\n9. Call c(y) and return its result.\r\nThe abstract operation Canonicalize takes a character parameter ch and performs the following steps:\r\n1. If IgnoreCase is false, return ch.\r\n2. Let u be ch converted to upper case as if by calling the standard built-in method \r\nString.prototype.toUpperCase on the one-character String ch.\r\n3. If u does not consist of a single character, return ch.\r\n4. Let cu be u's character.\r\n5. If ch's code unit value is greater than or equal to decimal 128 and cu's code unit value is less than decimal \r\n128, then return ch.\r\n6. Return cu.\r\nNOTE 1 Parentheses of the form ( Disjunction ) serve both to group the components of the Disjunction pattern \r\ntogether and to save the result of the match. The result can be used either in a backreference (\\ followed by a nonzero \r\ndecimal number), referenced in a replace String, or returned as part of an array from the regular expression matching \r\ninternal procedure. To inhibit the capturing behaviour of parentheses, use the form (?: Disjunction ) instead.\r\nNOTE 2 The form (?= Disjunction ) specifies a zero-width positive lookahead. In order for it to succeed, the pattern \r\ninside Disjunction must match at the current position, but the current position is not advanced before matching the sequel. \r\nIf Disjunction can match at the current position in several ways, only the first one is tried. Unlike other regular expression \r\noperators, there is no backtracking into a (?= form (this unusual behaviour is inherited from Perl). This only matters when \r\nthe Disjunction contains capturing parentheses and the sequel of the pattern contains backreferences to those captures.\r\nFor example,\r\n/(?=(a+))/.exec(\"baaabac\")\r\nmatches the empty String immediately after the first b and therefore returns the array:\r\n[\"\", \"aaa\"]\r\nTo illustrate the lack of backtracking into the lookahead, consider:\r\n/(?=(a+))a*b\\1/.exec(\"baaabac\")\r\nThis expression returns\r\n[\"aba\", \"a\"]\r\nand not:\r\n[\"aaaba\", \"a\"]\r\nNOTE 3 The form (?! Disjunction ) specifies a zero-width negative lookahead. In order for it to succeed, the pattern \r\ninside Disjunction must fail to match at the current position. The current position is not advanced before matching the \r\nsequel. Disjunction can contain capturing parentheses, but backreferences to them only make sense from within ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/eba8fce2-4994-4656-b08a-cb7e708742f5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=34428dbc07419bcfcf063e9ae4c6f377a7c643814a8c5c1d6ba28e73312aabca",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 523
      },
      {
        "segments": [
          {
            "segment_id": "273e828c-5d9d-4ccf-aba9-61bb52b1e072",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 202,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "190 © Ecma International 2011\r\nDisjunction itself. Backreferences to these capturing parentheses from elsewhere in the pattern always return undefined\r\nbecause the negative lookahead must fail for the pattern to succeed. For example,\r\n/(.*?)a(?!(a+)b\\2c)\\2(.*)/.exec(\"baaabaac\")\r\nlooks for an a not immediately followed by some positive number n of a's, a b, another n a's (specified by the first \\2) and \r\na c. The second \\2 is outside the negative lookahead, so it matches against undefined and therefore always succeeds. \r\nThe whole expression returns the array:\r\n[\"baaabaac\", \"ba\", undefined, \"abaac\"]\r\nIn case-insignificant matches all characters are implicitly converted to upper case immediately before they are compared. \r\nHowever, if converting a character to upper case would expand that character into more than one character (such as \r\nconverting \"ß\" (\\u00DF) into \"SS\"), then the character is left as-is instead. The character is also left as-is if it is not an \r\nASCII character but converting it to upper case would make it into an ASCII character. This prevents Unicode characters \r\nsuch as \\u0131 and \\u017F from matching regular expressions such as /[a-z]/i, which are only intended to match \r\nASCII letters. Furthermore, if these conversions were allowed, then /[^\\W]/i would match each of a, b, …, h, but not i\r\nor s.\r\n15.10.2.9 AtomEscape\r\nThe production AtomEscape :: DecimalEscape evaluates as follows:\r\n1. Evaluate DecimalEscape to obtain an EscapeValue E.\r\n2. If E is a character, then\r\na. Let ch be E's character.\r\nb. Let A be a one-element CharSet containing the character ch.\r\nc. Call CharacterSetMatcher(A, false) and return its Matcher result.\r\n3. E must be an integer. Let n be that integer.\r\n4. If n=0 or n>NCapturingParens then throw a SyntaxError exception.\r\n5. Return an internal Matcher closure that takes two arguments, a State x and a Continuation c, and performs \r\nthe following:\r\n1. Let cap be x's captures internal array.\r\n2. Let s be cap[n].\r\n3. If s is undefined, then call c(x) and return its result.\r\n4. Let e be x's endIndex.\r\n5. Let len be s's length.\r\n6. Let f be e+len.\r\n7. If f>InputLength, return failure.\r\n8. If there exists an integer i between 0 (inclusive) and len (exclusive) such that \r\nCanonicalize(s[i]) is not the same character as Canonicalize(Input [e+i]), then return \r\nfailure.\r\n9. Let y be the State (f, cap).\r\n10. Call c(y) and return its result.\r\nThe production AtomEscape :: CharacterEscape evaluates as follows:\r\n1. Evaluate CharacterEscape to obtain a character ch.\r\n2. Let A be a one-element CharSet containing the character ch.\r\n3. Call CharacterSetMatcher(A, false) and return its Matcher result.\r\nThe production AtomEscape :: CharacterClassEscape evaluates as follows:\r\n1. Evaluate CharacterClassEscape to obtain a CharSet A.\r\n2. Call CharacterSetMatcher(A, false) and return its Matcher result.\r\nNOTE An escape sequence of the form \\ followed by a nonzero decimal number n matches the result of the nth set \r\nof capturing parentheses (see 15.10.2.11). It is an error if the regular expression has fewer than n capturing parentheses. \r\nIf the regular expression has n or more capturing parentheses but the nth one is undefined because it has not captured \r\nanything, then the backreference always succeeds.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/273e828c-5d9d-4ccf-aba9-61bb52b1e072.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=570268bac88337dac64167eb2634ac20ea9cfe7115d8da0aa1354a991e4fd2d2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 517
      },
      {
        "segments": [
          {
            "segment_id": "273e828c-5d9d-4ccf-aba9-61bb52b1e072",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 202,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "190 © Ecma International 2011\r\nDisjunction itself. Backreferences to these capturing parentheses from elsewhere in the pattern always return undefined\r\nbecause the negative lookahead must fail for the pattern to succeed. For example,\r\n/(.*?)a(?!(a+)b\\2c)\\2(.*)/.exec(\"baaabaac\")\r\nlooks for an a not immediately followed by some positive number n of a's, a b, another n a's (specified by the first \\2) and \r\na c. The second \\2 is outside the negative lookahead, so it matches against undefined and therefore always succeeds. \r\nThe whole expression returns the array:\r\n[\"baaabaac\", \"ba\", undefined, \"abaac\"]\r\nIn case-insignificant matches all characters are implicitly converted to upper case immediately before they are compared. \r\nHowever, if converting a character to upper case would expand that character into more than one character (such as \r\nconverting \"ß\" (\\u00DF) into \"SS\"), then the character is left as-is instead. The character is also left as-is if it is not an \r\nASCII character but converting it to upper case would make it into an ASCII character. This prevents Unicode characters \r\nsuch as \\u0131 and \\u017F from matching regular expressions such as /[a-z]/i, which are only intended to match \r\nASCII letters. Furthermore, if these conversions were allowed, then /[^\\W]/i would match each of a, b, …, h, but not i\r\nor s.\r\n15.10.2.9 AtomEscape\r\nThe production AtomEscape :: DecimalEscape evaluates as follows:\r\n1. Evaluate DecimalEscape to obtain an EscapeValue E.\r\n2. If E is a character, then\r\na. Let ch be E's character.\r\nb. Let A be a one-element CharSet containing the character ch.\r\nc. Call CharacterSetMatcher(A, false) and return its Matcher result.\r\n3. E must be an integer. Let n be that integer.\r\n4. If n=0 or n>NCapturingParens then throw a SyntaxError exception.\r\n5. Return an internal Matcher closure that takes two arguments, a State x and a Continuation c, and performs \r\nthe following:\r\n1. Let cap be x's captures internal array.\r\n2. Let s be cap[n].\r\n3. If s is undefined, then call c(x) and return its result.\r\n4. Let e be x's endIndex.\r\n5. Let len be s's length.\r\n6. Let f be e+len.\r\n7. If f>InputLength, return failure.\r\n8. If there exists an integer i between 0 (inclusive) and len (exclusive) such that \r\nCanonicalize(s[i]) is not the same character as Canonicalize(Input [e+i]), then return \r\nfailure.\r\n9. Let y be the State (f, cap).\r\n10. Call c(y) and return its result.\r\nThe production AtomEscape :: CharacterEscape evaluates as follows:\r\n1. Evaluate CharacterEscape to obtain a character ch.\r\n2. Let A be a one-element CharSet containing the character ch.\r\n3. Call CharacterSetMatcher(A, false) and return its Matcher result.\r\nThe production AtomEscape :: CharacterClassEscape evaluates as follows:\r\n1. Evaluate CharacterClassEscape to obtain a CharSet A.\r\n2. Call CharacterSetMatcher(A, false) and return its Matcher result.\r\nNOTE An escape sequence of the form \\ followed by a nonzero decimal number n matches the result of the nth set \r\nof capturing parentheses (see 15.10.2.11). It is an error if the regular expression has fewer than n capturing parentheses. \r\nIf the regular expression has n or more capturing parentheses but the nth one is undefined because it has not captured \r\nanything, then the backreference always succeeds.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/273e828c-5d9d-4ccf-aba9-61bb52b1e072.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=570268bac88337dac64167eb2634ac20ea9cfe7115d8da0aa1354a991e4fd2d2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 517
      },
      {
        "segments": [
          {
            "segment_id": "beff4478-3f6a-4454-ad47-9a890d25acb2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 203,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 191\r\n15.10.2.10 CharacterEscape\r\nThe production CharacterEscape :: ControlEscape evaluates by returning the character according to Table 23. \r\nTable 23 — ControlEscape Character Values\r\nControlEscape Code Unit Name Symbol\r\nt \\u0009 horizontal tab <HT>\r\nn \\u000A line feed (new line) <LF>\r\nv \\u000B vertical tab <VT>\r\nf \\u000C form feed <FF>\r\nr \\u000D carriage return <CR>\r\nThe production CharacterEscape :: c ControlLetter evaluates as follows:\r\n1. Let ch be the character represented by ControlLetter.\r\n2. Let i be ch's code unit value.\r\n3. Let j be the remainder of dividing i by 32.\r\n4. Return the character whose code unit value is j.\r\nThe production CharacterEscape :: HexEscapeSequence evaluates by evaluating the CV of the \r\nHexEscapeSequence (see 7.8.4) and returning its character result.\r\nThe production CharacterEscape :: UnicodeEscapeSequence evaluates by evaluating the CV of the \r\nUnicodeEscapeSequence (see 7.8.4) and returning its character result.\r\nThe production CharacterEscape :: IdentityEscape evaluates by returning the character represented by \r\nIdentityEscape.\r\n15.10.2.11 DecimalEscape\r\nThe production DecimalEscape :: DecimalIntegerLiteral [lookahead  DecimalDigit] evaluates as follows:\r\n1. Let i be the MV of DecimalIntegerLiteral.\r\n2. If i is zero, return the EscapeValue consisting of a <NUL> character (Unicode value 0000).\r\n3. Return the EscapeValue consisting of the integer i.\r\nThe definition of ―the MV of DecimalIntegerLiteral‖ is in 7.8.3.\r\nNOTE If \\ is followed by a decimal number n whose first digit is not 0, then the escape sequence is considered to be \r\na backreference. It is an error if n is greater than the total number of left capturing parentheses in the entire regular \r\nexpression. \\0 represents the <NUL> character and cannot be followed by a decimal digit.\r\n15.10.2.12 CharacterClassEscape\r\nThe production CharacterClassEscape :: d evaluates by returning the ten-element set of characters containing \r\nthe characters 0 through 9 inclusive.\r\nThe production CharacterClassEscape :: D evaluates by returning the set of all characters not included in the set \r\nreturned by CharacterClassEscape :: d.\r\nThe production CharacterClassEscape :: s evaluates by returning the set of characters containing the \r\ncharacters that are on the right-hand side of the WhiteSpace (7.2) or LineTerminator (7.3) productions.\r\nThe production CharacterClassEscape :: S evaluates by returning the set of all characters not included in the set \r\nreturned by CharacterClassEscape :: s.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/beff4478-3f6a-4454-ad47-9a890d25acb2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e8dd13bc7d2e21106a4a559f4e6e32ce638e8959220327e7f4b7613f6a35a28b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 372
      },
      {
        "segments": [
          {
            "segment_id": "baaccc62-9e51-4a60-a987-81b5374dde1f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 204,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "192 © Ecma International 2011\r\nThe production CharacterClassEscape :: w evaluates by returning the set of characters containing the sixty\u0002three characters:\r\na b c d e f g h i j k l m n o p q r s t u v w x y z\r\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\r\n0 1 2 3 4 5 6 7 8 9 _\r\nThe production CharacterClassEscape :: W evaluates by returning the set of all characters not included in the set \r\nreturned by CharacterClassEscape :: w.\r\n15.10.2.13 CharacterClass\r\nThe production CharacterClass :: [ [lookahead  {^}] ClassRanges ] evaluates by evaluating ClassRanges to \r\nobtain a CharSet and returning that CharSet and the Boolean false.\r\nThe production CharacterClass :: [ ^ ClassRanges ] evaluates by evaluating ClassRanges to obtain a CharSet \r\nand returning that CharSet and the Boolean true.\r\n15.10.2.14 ClassRanges\r\nThe production ClassRanges :: [empty] evaluates by returning the empty CharSet.\r\nThe production ClassRanges :: NonemptyClassRanges evaluates by evaluating NonemptyClassRanges to obtain a \r\nCharSet and returning that CharSet.\r\n15.10.2.15 NonemptyClassRanges\r\nThe production NonemptyClassRanges :: ClassAtom evaluates by evaluating ClassAtom to obtain a CharSet and \r\nreturning that CharSet.\r\nThe production NonemptyClassRanges :: ClassAtom NonemptyClassRangesNoDash evaluates as follows:\r\n1. Evaluate ClassAtom to obtain a CharSet A.\r\n2. Evaluate NonemptyClassRangesNoDash to obtain a CharSet B.\r\n3. Return the union of CharSets A and B.\r\nThe production NonemptyClassRanges :: ClassAtom - ClassAtom ClassRanges evaluates as follows:\r\n1. Evaluate the first ClassAtom to obtain a CharSet A.\r\n2. Evaluate the second ClassAtom to obtain a CharSet B.\r\n3. Evaluate ClassRanges to obtain a CharSet C.\r\n4. Call CharacterRange(A, B) and let D be the resulting CharSet.\r\n5. Return the union of CharSets D and C.\r\nThe abstract operation CharacterRange takes two CharSet parameters A and B and performs the following:\r\n1. If A does not contain exactly one character or B does not contain exactly one character then throw a \r\nSyntaxError exception.\r\n2. Let a be the one character in CharSet A.\r\n3. Let b be the one character in CharSet B.\r\n4. Let i be the code unit value of character a.\r\n5. Let j be the code unit value of character b.\r\n6. If i > j then throw a SyntaxError exception.\r\n7. Return the set containing all characters numbered i through j, inclusive.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/baaccc62-9e51-4a60-a987-81b5374dde1f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e60d8884afcb1989394075c92d0dc2f44fc84b838ea07be59c6641ee8c2d430f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 402
      },
      {
        "segments": [
          {
            "segment_id": "30ad8af5-7025-411c-ae13-18e0d37305a5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 205,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 193\r\n15.10.2.16 NonemptyClassRangesNoDash\r\nThe production NonemptyClassRangesNoDash :: ClassAtom evaluates by evaluating ClassAtom to obtain a \r\nCharSet and returning that CharSet.\r\nThe production NonemptyClassRangesNoDash :: ClassAtomNoDash NonemptyClassRangesNoDash evaluates as \r\nfollows:\r\n1. Evaluate ClassAtomNoDash to obtain a CharSet A.\r\n2. Evaluate NonemptyClassRangesNoDash to obtain a CharSet B.\r\n3. Return the union of CharSets A and B.\r\nThe production NonemptyClassRangesNoDash :: ClassAtomNoDash - ClassAtom ClassRanges evaluates as \r\nfollows:\r\n1. Evaluate ClassAtomNoDash to obtain a CharSet A.\r\n2. Evaluate ClassAtom to obtain a CharSet B.\r\n3. Evaluate ClassRanges to obtain a CharSet C.\r\n4. Call CharacterRange(A, B) and let D be the resulting CharSet.\r\n5. Return the union of CharSets D and C.\r\nNOTE 1 ClassRanges can expand into single ClassAtoms and/or ranges of two ClassAtoms separated by dashes. In the \r\nlatter case the ClassRanges includes all characters between the first ClassAtom and the second ClassAtom, inclusive; an \r\nerror occurs if either ClassAtom does not represent a single character (for example, if one is \\w) or if the first ClassAtom's\r\ncode unit value is greater than the second ClassAtom's code unit value.\r\nNOTE 2 Even if the pattern ignores case, the case of the two ends of a range is significant in determining which \r\ncharacters belong to the range. Thus, for example, the pattern /[E-F]/i matches only the letters E, F, e, and f, while the \r\npattern /[E-f]/i matches all upper and lower-case ASCII letters as well as the symbols [, \\, ], ^, _, and `.\r\nNOTE 3 A - character can be treated literally or it can denote a range. It is treated literally if it is the first or last character \r\nof ClassRanges, the beginning or end limit of a range specification, or immediately follows a range specification.\r\n15.10.2.17 ClassAtom\r\nThe production ClassAtom :: - evaluates by returning the CharSet containing the one character -.\r\nThe production ClassAtom :: ClassAtomNoDash evaluates by evaluating ClassAtomNoDash to obtain a CharSet \r\nand returning that CharSet.\r\n15.10.2.18 ClassAtomNoDash\r\nThe production ClassAtomNoDash :: SourceCharacter but not one of \\ or ] or - evaluates by returning a one\u0002element CharSet containing the character represented by SourceCharacter.\r\nThe production ClassAtomNoDash :: \\ ClassEscape evaluates by evaluating ClassEscape to obtain a CharSet \r\nand returning that CharSet.\r\n15.10.2.19 ClassEscape\r\nThe production ClassEscape :: DecimalEscape evaluates as follows:\r\n1. Evaluate DecimalEscape to obtain an EscapeValue E.\r\n2. If E is not a character then throw a SyntaxError exception.\r\n3. Let ch be E's character.\r\n4. Return the one-element CharSet containing the character ch.\r\nThe production ClassEscape :: b evaluates by returning the CharSet containing the one character <BS> \r\n(Unicode value 0008).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/30ad8af5-7025-411c-ae13-18e0d37305a5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=89a9d3961780221a3dae735d0aa97b18e5a8b0e600a1ddc14e1086263d1628c3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 434
      },
      {
        "segments": [
          {
            "segment_id": "9c528f3f-2e26-4baa-9d33-a0fff0e26ac2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 206,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "194 © Ecma International 2011\r\nThe production ClassEscape :: CharacterEscape evaluates by evaluating CharacterEscape to obtain a character \r\nand returning a one-element CharSet containing that character.\r\nThe production ClassEscape :: CharacterClassEscape evaluates by evaluating CharacterClassEscape to obtain a \r\nCharSet and returning that CharSet.\r\nNOTE A ClassAtom can use any of the escape sequences that are allowed in the rest of the regular expression \r\nexcept for \\b, \\B, and backreferences. Inside a CharacterClass, \\b means the backspace character, while \\B and \r\nbackreferences raise errors. Using a backreference inside a ClassAtom causes an error.\r\n15.10.3 The RegExp Constructor Called as a Function\r\n15.10.3.1 RegExp(pattern, flags)\r\nIf pattern is an object R whose [[Class]] internal property is \"RegExp\" and flags is undefined, then return R\r\nunchanged. Otherwise call the standard built-in RegExp constructor (15.10.4.1) as if by the expression new\r\nRegExp(pattern, flags) and return the object constructed by that constructor.\r\n15.10.4 The RegExp Constructor\r\nWhen RegExp is called as part of a new expression, it is a constructor: it initialises the newly created object.\r\n15.10.4.1 new RegExp(pattern, flags)\r\nIf pattern is an object R whose [[Class]] internal property is \"RegExp\" and flags is undefined, then let P be the \r\npattern used to construct R and let F be the flags used to construct R. If pattern is an object R whose [[Class]] \r\ninternal property is \"RegExp\" and flags is not undefined, then throw a TypeError exception. Otherwise, let P\r\nbe the empty String if pattern is undefined and ToString(pattern) otherwise, and let F be the empty String if \r\nflags is undefined and ToString(flags) otherwise.\r\nIf the characters of P do not have the syntactic form Pattern, then throw a SyntaxError exception. Otherwise \r\nlet the newly constructed object have a [[Match]] internal property obtained by evaluating (\"compiling\") the\r\ncharacters of P as a Pattern as described in 15.10.2. \r\nIf F contains any character other than \"g\", \"i\", or \"m\", or if it contains the same character more than once, \r\nthen throw a SyntaxError exception. \r\nIf a SyntaxError exception is not thrown, then: \r\nLet S be a String in the form of a Pattern equivalent to P, in which certain characters are escaped as described \r\nbelow. S may or may not be identical to P or pattern; however, the internal procedure that would result from \r\nevaluating S as a Pattern must behave identically to the internal procedure given by the constructed object's \r\n[[Match]] internal property. \r\nThe characters / occurring in the pattern shall be escaped in S as necessary to ensure that the String value \r\nformed by concatenating the Strings \"/\", S, \"/\", and F can be parsed (in an appropriate lexical context) as a \r\nRegularExpressionLiteral that behaves identically to the constructed regular expression. For example, if P is \r\n\"/\", then S could be \"\\/\" or \"\\u002F\", among other possibilities, but not \"/\", because /// followed by F\r\nwould be parsed as a SingleLineComment rather than a RegularExpressionLiteral. If P is the empty String, this \r\nspecification can be met by letting S be \"(?:)\". \r\nThe following properties of the newly constructed object are data properties with the attributes that are \r\nspecified in 15.10.7. The [[Value]] of each property is set as follows:\r\nThe source property of the newly constructed object is set to S.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/9c528f3f-2e26-4baa-9d33-a0fff0e26ac2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d5347c990c2ac5c0845024db8d72b74c43576af5d6d9777b31cb33645e056f55",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 539
      },
      {
        "segments": [
          {
            "segment_id": "9c528f3f-2e26-4baa-9d33-a0fff0e26ac2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 206,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "194 © Ecma International 2011\r\nThe production ClassEscape :: CharacterEscape evaluates by evaluating CharacterEscape to obtain a character \r\nand returning a one-element CharSet containing that character.\r\nThe production ClassEscape :: CharacterClassEscape evaluates by evaluating CharacterClassEscape to obtain a \r\nCharSet and returning that CharSet.\r\nNOTE A ClassAtom can use any of the escape sequences that are allowed in the rest of the regular expression \r\nexcept for \\b, \\B, and backreferences. Inside a CharacterClass, \\b means the backspace character, while \\B and \r\nbackreferences raise errors. Using a backreference inside a ClassAtom causes an error.\r\n15.10.3 The RegExp Constructor Called as a Function\r\n15.10.3.1 RegExp(pattern, flags)\r\nIf pattern is an object R whose [[Class]] internal property is \"RegExp\" and flags is undefined, then return R\r\nunchanged. Otherwise call the standard built-in RegExp constructor (15.10.4.1) as if by the expression new\r\nRegExp(pattern, flags) and return the object constructed by that constructor.\r\n15.10.4 The RegExp Constructor\r\nWhen RegExp is called as part of a new expression, it is a constructor: it initialises the newly created object.\r\n15.10.4.1 new RegExp(pattern, flags)\r\nIf pattern is an object R whose [[Class]] internal property is \"RegExp\" and flags is undefined, then let P be the \r\npattern used to construct R and let F be the flags used to construct R. If pattern is an object R whose [[Class]] \r\ninternal property is \"RegExp\" and flags is not undefined, then throw a TypeError exception. Otherwise, let P\r\nbe the empty String if pattern is undefined and ToString(pattern) otherwise, and let F be the empty String if \r\nflags is undefined and ToString(flags) otherwise.\r\nIf the characters of P do not have the syntactic form Pattern, then throw a SyntaxError exception. Otherwise \r\nlet the newly constructed object have a [[Match]] internal property obtained by evaluating (\"compiling\") the\r\ncharacters of P as a Pattern as described in 15.10.2. \r\nIf F contains any character other than \"g\", \"i\", or \"m\", or if it contains the same character more than once, \r\nthen throw a SyntaxError exception. \r\nIf a SyntaxError exception is not thrown, then: \r\nLet S be a String in the form of a Pattern equivalent to P, in which certain characters are escaped as described \r\nbelow. S may or may not be identical to P or pattern; however, the internal procedure that would result from \r\nevaluating S as a Pattern must behave identically to the internal procedure given by the constructed object's \r\n[[Match]] internal property. \r\nThe characters / occurring in the pattern shall be escaped in S as necessary to ensure that the String value \r\nformed by concatenating the Strings \"/\", S, \"/\", and F can be parsed (in an appropriate lexical context) as a \r\nRegularExpressionLiteral that behaves identically to the constructed regular expression. For example, if P is \r\n\"/\", then S could be \"\\/\" or \"\\u002F\", among other possibilities, but not \"/\", because /// followed by F\r\nwould be parsed as a SingleLineComment rather than a RegularExpressionLiteral. If P is the empty String, this \r\nspecification can be met by letting S be \"(?:)\". \r\nThe following properties of the newly constructed object are data properties with the attributes that are \r\nspecified in 15.10.7. The [[Value]] of each property is set as follows:\r\nThe source property of the newly constructed object is set to S.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/9c528f3f-2e26-4baa-9d33-a0fff0e26ac2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d5347c990c2ac5c0845024db8d72b74c43576af5d6d9777b31cb33645e056f55",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 539
      },
      {
        "segments": [
          {
            "segment_id": "c9b66f59-0006-4d2e-a9e9-40938f4e38d3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 207,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 195\r\nThe global property of the newly constructed object is set to a Boolean value that is true if F contains the \r\ncharacter \"g\" and false otherwise.\r\nThe ignoreCase property of the newly constructed object is set to a Boolean value that is true if F contains \r\nthe character \"i\" and false otherwise.\r\nThe multiline property of the newly constructed object is set to a Boolean value that is true if F contains \r\nthe character \"m\" and false otherwise.\r\nThe lastIndex property of the newly constructed object is set to 0.\r\nThe [[Prototype]] internal property of the newly constructed object is set to the standard built-in RegExp \r\nprototype object as specified in 15.10.6.\r\nThe [[Class]] internal property of the newly constructed object is set to \"RegExp\".\r\nNOTE If pattern is a StringLiteral, the usual escape sequence substitutions are performed before the String is \r\nprocessed by RegExp. If pattern must contain an escape sequence to be recognised by RegExp, any backslash \r\n\\ characters must be escaped within the StringLiteral to prevent them being removed when the contents of the StringLiteral\r\nare formed.\r\n15.10.5 Properties of the RegExp Constructor\r\nThe value of the [[Prototype]] internal property of the RegExp constructor is the standard built-in Function \r\nprototype object (15.3.4).\r\nBesides the internal properties and the length property (whose value is 2), the RegExp constructor has the \r\nfollowing properties:\r\n15.10.5.1 RegExp.prototype\r\nThe initial value of RegExp.prototype is the RegExp prototype object (15.10.6).\r\nThis property shall have the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.10.6 Properties of the RegExp Prototype Object\r\nThe value of the [[Prototype]] internal property of the RegExp prototype object is the standard built-in Object \r\nprototype object (15.2.4). The RegExp prototype object is itself a regular expression object; its [[Class]] is \r\n\"RegExp\". The initial values of the RegExp prototype object‘s data properties (15.10.7) are set as if the \r\nobject was created by the expression new RegExp() where RegExp is that standard built-in constructor with \r\nthat name.\r\nThe RegExp prototype object does not have a valueOf property of its own; however, it inherits the valueOf\r\nproperty from the Object prototype object.\r\nIn the following descriptions of functions that are properties of the RegExp prototype object, the phrase ―this \r\nRegExp object‖ refers to the object that is the this value for the invocation of the function; a TypeError\r\nexception is thrown if the this value is not an object or an object for which the value of the [[Class]] internal \r\nproperty is not \"RegExp\".\r\n15.10.6.1 RegExp.prototype.constructor\r\nThe initial value of RegExp.prototype.constructor is the standard built-in RegExp constructor.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c9b66f59-0006-4d2e-a9e9-40938f4e38d3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=452c906cabb31931cb7d7c27962c7942106feeaede821049c8ade23927399da3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 430
      },
      {
        "segments": [
          {
            "segment_id": "30841f46-d463-4217-975f-e6f126a3dce5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 208,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "196 © Ecma International 2011\r\n15.10.6.2 RegExp.prototype.exec(string)\r\nPerforms a regular expression match of string against the regular expression and returns an Array object \r\ncontaining the results of the match, or null if string did not match.\r\nThe String ToString(string) is searched for an occurrence of the regular expression pattern as follows:\r\n1. Let R be this RegExp object.\r\n2. Let S be the value of ToString(string).\r\n3. Let length be the length of S.\r\n4. Let lastIndex be the result of calling the [[Get]] internal method of R with argument \"lastIndex\".\r\n5. Let i be the value of ToInteger(lastIndex).\r\n6. Let global be the result of calling the [[Get]] internal method of R with argument \"global\".\r\n7. If global is false, then let i = 0.\r\n8. Let matchSucceeded be false.\r\n9. Repeat, while matchSucceeded is false\r\na. If i < 0 or i > length, then\r\ni. Call the [[Put]] internal method of R with arguments \"lastIndex\", 0, and true.\r\nii. Return null.\r\nb. Call the [[Match]] internal method of R with arguments S and i.\r\nc. If [[Match]] returned failure, then \r\ni. Let i = i+1.\r\nd. else \r\ni. Let r be the State result of the call to [[Match]].\r\nii. Set matchSucceeded to true.\r\n10. Let e be r's endIndex value.\r\n11. If global is true,\r\na. Call the [[Put]] internal method of R with arguments \"lastIndex\", e, and true.\r\n12. Let n be the length of r's captures array. (This is the same value as 15.10.2.1's NCapturingParens.)\r\n13. Let A be a new array created as if by the expression new Array() where Array is the standard built-in \r\nconstructor with that name.\r\n14. Let matchIndex be i.\r\n15. Call the [[DefineOwnProperty]] internal method of A with arguments \"index\", Property Descriptor \r\n{[[Value]]: matchIndex, [[Writable]: true, [[Enumerable]]: true, [[Configurable]]: true}, and true.\r\n16. Call the [[DefineOwnProperty]] internal method of A with arguments \"input\", Property Descriptor \r\n{[[Value]]: S, [[Writable]: true, [[Enumerable]]: true, [[Configurable]]: true}, and true.\r\n17. Call the [[DefineOwnProperty]] internal method of A with arguments \"length\", Property Descriptor \r\n{[[Value]]: n + 1}, and true.\r\n18. Let matchedSubstr be the matched substring (i.e. the portion of S between offset i inclusive and offset e\r\nexclusive).\r\n19. Call the [[DefineOwnProperty]] internal method of A with arguments \"0\", Property Descriptor {[[Value]]: \r\nmatchedSubstr, [[Writable]: true, [[Enumerable]]: true, [[Configurable]]: true}, and true.\r\n20. For each integer i such that i > 0 and i  n\r\na. Let captureI be i\r\nth element of r's captures array.\r\nb. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(i), Property \r\nDescriptor {[[Value]]: captureI, [[Writable]: true, [[Enumerable]]: true, [[Configurable]]: true}, \r\nand true.\r\n21. Return A.\r\n15.10.6.3 RegExp.prototype.test(string)\r\nThe following steps are taken:\r\n1. Let match be the result of evaluating the RegExp.prototype.exec (15.10.6.2) algorithm upon this \r\nRegExp object using string as the argument.\r\n2. If match is not null, then return true; else return false.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/30841f46-d463-4217-975f-e6f126a3dce5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e255f8f7e264d2ef81cb196a37cac9ef87ed4f3a902e5c842e925643964ed5b7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 480
      },
      {
        "segments": [
          {
            "segment_id": "3da65ccd-5843-4be7-89fe-c5f3a45ffd58",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 209,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 197\r\n15.10.6.4 RegExp.prototype.toString()\r\nReturn the String value formed by concatenating the Strings \"/\", the String value of the source property of \r\nthis RegExp object, and \"/\"; plus \"g\" if the global property is true, \"i\" if the ignoreCase property is true, \r\nand \"m\" if the multiline property is true.\r\nNOTE The returned String has the form of a RegularExpressionLiteral that evaluates to another RegExp object with \r\nthe same behaviour as this object.\r\n15.10.7 Properties of RegExp Instances\r\nRegExp instances inherit properties from the RegExp prototype object and their [[Class]] internal property \r\nvalue is \"RegExp\". RegExp instances also have a [[Match]] internal property and a length property.\r\nThe value of the [[Match]] internal property is an implementation dependent representation of the Pattern of the \r\nRegExp object.\r\nRegExp instances also have the following properties.\r\n15.10.7.1 source\r\nThe value of the source property is a String in the form of a Pattern representing the current regular \r\nexpression. This property shall have the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: \r\nfalse }.\r\n15.10.7.2 global\r\nThe value of the global property is a Boolean value indicating whether the flags contained the character “g”. \r\nThis property shall have the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.10.7.3 ignoreCase\r\nThe value of the ignoreCase property is a Boolean value indicating whether the flags contained the \r\ncharacter “i”. This property shall have the attributes { [[Writable]]: false, [[Enumerable]]: false, \r\n[[Configurable]]: false }.\r\n15.10.7.4 multiline\r\nThe value of the multiline property is a Boolean value indicating whether the flags contained the character \r\n“m”. This property shall have the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.10.7.5 lastIndex\r\nThe value of the lastIndex property specifies the String position at which to start the next match. It is \r\ncoerced to an integer when used (see 15.10.6.2). This property shall have the attributes { [[Writable]]: true, \r\n[[Enumerable]]: false, [[Configurable]]: false }.\r\nNOTE Unlike the other standard built-in properties of RegExp instances, lastIndex is writable.\r\n15.11 Error Objects\r\nInstances of Error objects are thrown as exceptions when runtime errors occur. The Error objects may also \r\nserve as base objects for user-defined exception classes.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/3da65ccd-5843-4be7-89fe-c5f3a45ffd58.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=970628fd3df18b7ac27c6fccfe56f624969fba42d64470a88486bb68f4a0749c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 358
      },
      {
        "segments": [
          {
            "segment_id": "d9541c67-ec17-4725-b5d3-694be5751747",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 210,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "198 © Ecma International 2011\r\n15.11.1 The Error Constructor Called as a Function\r\nWhen Error is called as a function rather than as a constructor, it creates and initialises a new Error object. \r\nThus the function call Error(…) is equivalent to the object creation expression new Error(…) with the \r\nsame arguments.\r\n15.11.1.1 Error (message)\r\nThe [[Prototype]] internal property of the newly constructed object is set to the original Error prototype object, \r\nthe one that is the initial value of Error.prototype (15.11.3.1).\r\nThe [[Class]] internal property of the newly constructed object is set to \"Error\".\r\nThe [[Extensible]] internal property of the newly constructed object is set to true.\r\nIf the argument message is not undefined, the message own property of the newly constructed object is set to \r\nToString(message). \r\n15.11.2 The Error Constructor\r\nWhen Error is called as part of a new expression, it is a constructor: it initialises the newly created object.\r\n15.11.2.1 new Error (message)\r\nThe [[Prototype]] internal property of the newly constructed object is set to the original Error prototype object, \r\nthe one that is the initial value of Error.prototype (15.11.3.1).\r\nThe [[Class]] internal property of the newly constructed Error object is set to \"Error\".\r\nThe [[Extensible]] internal property of the newly constructed object is set to true.\r\nIf the argument message is not undefined, the message own property of the newly constructed object is set to \r\nToString(message). \r\n15.11.3 Properties of the Error Constructor\r\nThe value of the [[Prototype]] internal property of the Error constructor is the Function prototype object (15.3.4).\r\nBesides the internal properties and the length property (whose value is 1), the Error constructor has the \r\nfollowing property:\r\n15.11.3.1 Error.prototype\r\nThe initial value of Error.prototype is the Error prototype object (15.11.4).\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.11.4 Properties of the Error Prototype Object\r\nThe Error prototype object is itself an Error object (its [[Class]] is \"Error\").\r\nThe value of the [[Prototype]] internal property of the Error prototype object is the standard built-in Object \r\nprototype object (15.2.4).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/d9541c67-ec17-4725-b5d3-694be5751747.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=393b6bc21122bd2682aafc71ee107d530af21dc9c6bd90d055e197383c0ff0d9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 337
      },
      {
        "segments": [
          {
            "segment_id": "603c0884-a142-46a8-aad8-bb4ad2065c88",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 211,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 199\r\n15.11.4.1 Error.prototype.constructor\r\nThe initial value of Error.prototype.constructor is the built-in Error constructor.\r\n15.11.4.2 Error.prototype.name\r\nThe initial value of Error.prototype.name is \"Error\".\r\n15.11.4.3 Error.prototype.message\r\nThe initial value of Error.prototype.message is the empty String.\r\n15.11.4.4 Error.prototype.toString ( )\r\nThe following steps are taken:\r\n1. Let O be the this value.\r\n2. If Type(O) is not Object, throw a TypeError exception.\r\n3. Let name be the result of calling the [[Get]] internal method of O with argument \"name\".\r\n4. If name is undefined, then let name be \"Error\"; else let name be ToString(name).\r\n5. Let msg be the result of calling the [[Get]] internal method of O with argument \"message\".\r\n6. If msg is undefined, then let msg be the empty String; else let msg be ToString(msg).\r\n7. If msg is undefined, then let msg be the empty String; else let msg be ToString(msg).\r\n8. If name is the empty String, return msg.\r\n9. If msg is the empty String, return name.\r\n10. Return the result of concatenating name, \":\", a single space character, and msg.\r\n15.11.5 Properties of Error Instances\r\nError instances inherit properties from the Error prototype object and their [[Class]] internal property value is \r\n\"Error\". Error instances have no special properties.\r\n15.11.6 Native Error Types Used in This Standard\r\nOne of the NativeError objects below is thrown when a runtime error is detected. All of these objects share the \r\nsame structure, as described in 15.11.7.\r\n15.11.6.1 EvalError\r\nThis exception is not currently used within this specification. This object remains for compatibility with previous \r\neditions of this specification.\r\n15.11.6.2 RangeError\r\nIndicates a numeric value has exceeded the allowable range. See 15.4.2.2, 15.4.5.1, 15.7.4.2, 15.7.4.5, \r\n15.7.4.6, 15.7.4.7, and 15.9.5.43.\r\n15.11.6.3 ReferenceError\r\nIndicate that an invalid reference value has been detected. See 8.7.1, 8.7.2, 10.2.1, 10.2.1.1.4, 10.2.1.2.4, \r\nand 11.13.1.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/603c0884-a142-46a8-aad8-bb4ad2065c88.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d383d81ee6085e1ff17e67bcb686085d22f40eee7a75ccb9940268a61aba1de5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 301
      },
      {
        "segments": [
          {
            "segment_id": "8b5c7fa6-3101-4a61-900d-77c8cbb0d594",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 212,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "200 © Ecma International 2011\r\n15.11.6.4 SyntaxError\r\nIndicates that a parsing error has occurred. See 11.1.5, 11.3.1, 11.3.2, 11.4.1, 11.4.4, 11.4.5, 11.13.1, 11.13.2, \r\n12.2.1, 12.10.1, 12.14.1, 13.1, 15.1.2.1, 15.3.2.1, 15.10.2.2, 15.10.2.5, 15.10.2.9, 15.10.2.15, 15.10.2.19,\r\n15.10.4.1, and 15.12.2.\r\n15.11.6.5 TypeError\r\nIndicates the actual type of an operand is different than the expected type. See 8.6.2, 8.7.2, 8.10.5, 8.12.5, \r\n8.12.7, 8.12.8, 8.12.9, 9.9, 9.10, 10.2.1, 10.2.1.1.3, 10.6, 11.2.2, 11.2.3, 11.4.1, 11.8.6, 11.8.7, 11.3.1, 13.2, \r\n13.2.3, 15, 15.2.3.2, 15.2.3.3, 15.2.3.4, 15.2.3.5, 15.2.3.6, 15.2.3.7, 15.2.3.8, 15.2.3.9, 15.2.3.10, 15.2.3.11, \r\n15.2.3.12, 15.2.3.13, 15.2.3.14, 15.2.4.3, 15.3.4.2, 15.3.4.3, 15.3.4.4, 15.3.4.5, 15.3.4.5.2, 15.3.4.5.3, 15.3.5, \r\n15.3.5.3, 15.3.5.4, 15.4.4.3, 15.4.4.11, 15.4.4.16, 15.4.4.17, 15.4.4.18, 15.4.4.19, 15.4.4.20, 15.4.4.21, \r\n15.4.4.22, 15.4.5.1, 15.5.4.2, 15.5.4.3, 15.6.4.2, 15.6.4.3, 15.7.4, 15.7.4.2, 15.7.4.4, 15.9.5, 15.9.5.44, \r\n15.10.4.1, 15.10.6, 15.11.4.4 and 15.12.3.\r\n15.11.6.6 URIError\r\nIndicates that one of the global URI handling functions was used in a way that is incompatible with its \r\ndefinition. See 15.1.3.\r\n15.11.7 NativeError Object Structure\r\nWhen an ECMAScript implementation detects a runtime error, it throws an instance of one of the NativeError\r\nobjects defined in 15.11.6. Each of these objects has the structure described below, differing only in the name \r\nused as the constructor name instead of NativeError, in the name property of the prototype object, and in the \r\nimplementation-defined message property of the prototype object.\r\nFor each error object, references to NativeError in the definition should be replaced with the appropriate error \r\nobject name from 15.11.6.\r\n15.11.7.1 NativeError Constructors Called as Functions\r\nWhen a NativeError constructor is called as a function rather than as a constructor, it creates and initialises a \r\nnew object. A call of the object as a function is equivalent to calling it as a constructor with the same \r\narguments.\r\n15.11.7.2 NativeError (message)\r\nThe [[Prototype]] internal property of the newly constructed object is set to the prototype object for this error \r\nconstructor. The [[Class]] internal property of the newly constructed object is set to \"Error\". The \r\n[[Extensible]] internal property of the newly constructed object is set to true.\r\nIf the argument message is not undefined, the message own property of the newly constructed object is set to \r\nToString(message).\r\n15.11.7.3 The NativeError Constructors\r\nWhen a NativeError constructor is called as part of a new expression, it is a constructor: it initialises the newly \r\ncreated object.\r\n15.11.7.4 new NativeError (message)\r\nThe [[Prototype]] internal property of the newly constructed object is set to the prototype object for this \r\nNativeError constructor. The [[Class]] internal property of the newly constructed object is set to \"Error\". The \r\n[[Extensible]] internal property of the newly constructed object is set to true.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/8b5c7fa6-3101-4a61-900d-77c8cbb0d594.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5efbe4d5373c8cc1390c27123fdcfc7f96848098c6b4b9ed7855f1b888d7bfea",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 421
      },
      {
        "segments": [
          {
            "segment_id": "23a3b5cb-97ec-444d-9698-2cde0b542361",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 213,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 201\r\nIf the argument message is not undefined, the message own property of the newly constructed object is set to \r\nToString(message). \r\n15.11.7.5 Properties of the NativeError Constructors\r\nThe value of the [[Prototype]] internal property of a NativeError constructor is the Function prototype object \r\n(15.3.4).\r\nBesides the internal properties and the length property (whose value is 1), each NativeError constructor has \r\nthe following property:\r\n15.11.7.6 NativeError.prototype\r\nThe initial value of NativeError.prototype is a NativeError prototype object (15.11.7.7). Each NativeError\r\nconstructor has a separate prototype object.\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\r\n15.11.7.7 Properties of the NativeError Prototype Objects\r\nEach NativeError prototype object is an Error object (its [[Class]] is \"Error\").\r\nThe value of the [[Prototype]] internal property of each NativeError prototype object is the standard built-in \r\nError prototype object (15.11.4).\r\n15.11.7.8 NativeError.prototype.constructor\r\nThe initial value of the constructor property of the prototype for a given NativeError constructor is the \r\nNativeError constructor function itself (15.11.7).\r\n15.11.7.9 NativeError.prototype.name\r\nThe initial value of the name property of the prototype for a given NativeError constructor is the name of the \r\nconstructor (the name used instead of NativeError).\r\n15.11.7.10 NativeError.prototype.message\r\nThe initial value of the message property of the prototype for a given NativeError constructor is the empty \r\nString.\r\nNOTE The prototypes for the NativeError constructors do not themselves provide a toString function, but \r\ninstances of errors will inherit it from the Error prototype object.\r\n15.11.7.11 Properties of NativeError Instances\r\nNativeError instances inherit properties from their NativeError prototype object and their [[Class]] internal \r\nproperty value is \"Error\". NativeError instances have no special properties.\r\n15.12 The JSON Object\r\nThe JSON object is a single object that contains two functions, parse and stringify, that are used to parse \r\nand construct JSON texts. The JSON Data Interchange Format is described in RFC 4627 \r\n<http://www.ietf.org/rfc/rfc4627.txt>. The JSON interchange format used in this specification is exactly that \r\ndescribed by RFC 4627 with two exceptions:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/23a3b5cb-97ec-444d-9698-2cde0b542361.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=80c1b616f44d5daa1a4c85f6459f393d51be13781a8a56f81bca72cde8f679b5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 324
      },
      {
        "segments": [
          {
            "segment_id": "c9864e62-4f63-4ab1-8a4c-c19633a9ffc4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 214,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "202 © Ecma International 2011\r\n The top level JSONText production of the ECMAScript JSON grammar may consist of any JSONValue\r\nrather than being restricted to being a JSONObject or a JSONArray as specified by RFC 4627. \r\n Conforming implementations of JSON.parse and JSON.stringify must support the exact interchange \r\nformat described in this specification without any deletions or extensions to the format. This differs \r\nfrom RFC 4627 which permits a JSON parser to accept non-JSON forms and extensions.\r\nThe value of the [[Prototype]] internal property of the JSON object is the standard built-in Object prototype \r\nobject (15.2.4). The value of the [[Class]] internal property of the JSON object is \"JSON\". The value of the \r\n[[Extensible]] internal property of the JSON object is set to true.\r\nThe JSON object does not have a [[Construct]] internal property; it is not possible to use the JSON object as a \r\nconstructor with the new operator.\r\nThe JSON object does not have a [[Call]] internal property; it is not possible to invoke the JSON object as a \r\nfunction.\r\n15.12.1 The JSON Grammar \r\nJSON.stringify produces a String that conforms to the following JSON grammar. JSON.parse accepts a String \r\nthat conforms to the JSON grammar.\r\n15.12.1.1 The JSON Lexical Grammar\r\nJSON is similar to ECMAScript source text in that it consists of a sequence of characters conforming to the \r\nrules of SourceCharacter. The JSON Lexical Grammar defines the tokens that make up a JSON text similar to \r\nthe manner that the ECMAScript lexical grammar defines the tokens of an ECMAScript source text. The JSON \r\nLexical grammar only recognises the white space character specified by the production JSONWhiteSpace. The \r\nJSON lexical grammar shares some productions with the ECMAScript lexical grammar. All nonterminal \r\nsymbols of the grammar that do not begin with the characters ―JSON‖ are defined by productions of the \r\nECMAScript lexical grammar.\r\nSyntax\r\nJSONWhiteSpace ::\r\n<TAB>\r\n<CR>\r\n<LF>\r\n<SP>\r\nJSONString ::\r\n\" JSONStringCharactersopt \"\r\nJSONStringCharacters ::\r\nJSONStringCharacter JSONStringCharactersopt\r\nJSONStringCharacter ::\r\nSourceCharacter but not one of \" or \\ or U+0000 through U+001F\r\n\\ JSONEscapeSequence\r\nJSONEscapeSequence ::\r\nJSONEscapeCharacter\r\nUnicodeEscapeSequence \r\nJSONEscapeCharacter :: one of\r\n\" / \\ b f n r t\r\nJSONNumber ::\r\n-opt DecimalIntegerLiteral JSONFractionopt ExponentPartopt",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c9864e62-4f63-4ab1-8a4c-c19633a9ffc4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fda70b15d1c140a6d400a0586acd62d8665d01a8312f0de58faac9112b8b2ad6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 359
      },
      {
        "segments": [
          {
            "segment_id": "2f9ad511-acbd-4c78-b046-d37a15b9dbef",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 215,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 203\r\nJSONFraction ::\r\n. DecimalDigits\r\nJSONNullLiteral ::\r\nNullLiteral\r\nJSONBooleanLiteral ::\r\nBooleanLiteral\r\n15.12.1.2 The JSON Syntactic Grammar\r\nThe JSON Syntactic Grammar defines a valid JSON text in terms of tokens defined by the JSON lexical \r\ngrammar. The goal symbol of the grammar is JSONText. \r\nSyntax\r\nJSONText :\r\nJSONValue\r\nJSONValue :\r\nJSONNullLiteral\r\nJSONBooleanLiteral\r\nJSONObject\r\nJSONArray\r\nJSONString\r\nJSONNumber\r\nJSONObject :\r\n{ }\r\n{ JSONMemberList }\r\nJSONMember :\r\nJSONString : JSONValue\r\nJSONMemberList :\r\nJSONMember \r\nJSONMemberList , JSONMember \r\nJSONArray :\r\n[ ]\r\n[ JSONElementList ]\r\nJSONElementList :\r\nJSONValue\r\nJSONElementList , JSONValue\r\n15.12.2 parse ( text [ , reviver ] )\r\nThe parse function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The \r\nJSON format is a restricted form of ECMAScript literal. JSON objects are realized as ECMAScript objects. \r\nJSON arrays are realized as ECMAScript arrays. JSON strings, numbers, booleans, and null are realized as \r\nECMAScript Strings, Numbers, Booleans, and null. JSON uses a more limited set of white space characters \r\nthan WhiteSpace and allows Unicode code points U+2028 and U+2029 to directly appear in JSONString literals \r\nwithout using an escape sequence. The process of parsing is similar to 11.1.4 and 11.1.5 as constrained by \r\nthe JSON grammar.\r\nThe optional reviver parameter is a function that takes two parameters, (key and value). It can filter and \r\ntransform the results. It is called with each of the key/value pairs produced by the parse, and its return value is \r\nused instead of the original value. If it returns what it received, the structure is not modified. If it returns \r\nundefined then the property is deleted from the result.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/2f9ad511-acbd-4c78-b046-d37a15b9dbef.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a4471d3438ce03f6a8118b2a30a838532be3ff872f3ecd2833c076c8d630d670",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 268
      },
      {
        "segments": [
          {
            "segment_id": "22326586-11a5-49ff-af75-819287607fd4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 216,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "204 © Ecma International 2011\r\n1. Let JText be ToString(text).\r\n2. Parse JText using the grammars in 15.12.1. Throw a SyntaxError exception if JText did not conform to the \r\nJSON grammar for the goal symbol JSONText. \r\n3. Let unfiltered be the result of parsing and evaluating JText as if it was the source text of an ECMAScript \r\nProgram but using JSONString in place of StringLiteral. Note that since JText conforms to the JSON \r\ngrammar this result will be either a primitive value or an object that is defined by either an ArrayLiteral or \r\nan ObjectLiteral.\r\n4. If IsCallable(reviver) is true, then\r\na. Let root be a new object created as if by the expression new Object(), where Object is the \r\nstandard built-in constructor with that name.\r\nb. Call the [[DefineOwnProperty]] internal method of root with the empty String, the \r\nPropertyDescriptor {[[Value]]: unfiltered, [[Writable]]: true, [[Enumerable]]: true, \r\n[[Configurable]]: true}, and false as arguments.\r\nc. Return the result of calling the abstract operation Walk, passing root and the empty String. The \r\nabstract operation Walk is described below.\r\n5. Else\r\na. Return unfiltered.\r\nThe abstract operation Walk is a recursive abstract operation that takes two parameters: a holder object and \r\nthe String name of a property in that object. Walk uses the value of reviver that was originally passed to the \r\nabove parse function.\r\n1. Let val be the result of calling the [[Get]] internal method of holder with argument name.\r\n2. If val is an object, then\r\na. If the [[Class]] internal property of val is \"Array\"\r\ni. Set I to 0.\r\nii. Let len be the result of calling the [[Get]] internal method of val with argument \"length\".\r\niii. Repeat while I < len, \r\n1. Let newElement be the result of calling the abstract operation Walk, passing val and \r\nToString(I).\r\n2. If newElement is undefined, then\r\na Call the [[Delete]] internal method of val with ToString(I) and false as \r\narguments. \r\n3. Else\r\na Call the [[DefineOwnProperty]] internal method of val with arguments \r\nToString(I), the Property Descriptor {[[Value]]: newElement, [[Writable]]: \r\ntrue, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n4. Add 1 to I.\r\nb. Else\r\ni. Let keys be an internal List of String values consisting of the names of all the own \r\nproperties of val whose [[Enumerable]] attribute is true. The ordering of the Strings should \r\nbe the same as that used by the Object.keys standard built-in function.\r\nii. For each String P in keys do, \r\n1. Let newElement be the result of calling the abstract operation Walk, passing val and \r\nP. \r\n2. If newElement is undefined, then\r\na Call the [[Delete]] internal method of val with P and false as arguments. \r\n3. Else\r\na Call the [[DefineOwnProperty]] internal method of val with arguments P, \r\nthe Property Descriptor {[[Value]]: newElement, [[Writable]]: true, \r\n[[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n3. Return the result of calling the [[Call]] internal method of reviver passing holder as the this value and with \r\nan argument list consisting of name and val.\r\nIt is not permitted for a conforming implementation of JSON.parse to extend the JSON grammars. If an \r\nimplementation wishes to support a modified or extended JSON interchange format it must do so by defining a \r\ndifferent parse function. \r\nNOTE In the case where there are duplicate name Strings within an object, lexically preceding values for the same \r\nkey shall be overwritten.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/22326586-11a5-49ff-af75-819287607fd4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d41fcf161cfd9e6cd6f9d964bcab9a9692e0cbb33b46718baf1a8331e121ddef",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 555
      },
      {
        "segments": [
          {
            "segment_id": "22326586-11a5-49ff-af75-819287607fd4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 216,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "204 © Ecma International 2011\r\n1. Let JText be ToString(text).\r\n2. Parse JText using the grammars in 15.12.1. Throw a SyntaxError exception if JText did not conform to the \r\nJSON grammar for the goal symbol JSONText. \r\n3. Let unfiltered be the result of parsing and evaluating JText as if it was the source text of an ECMAScript \r\nProgram but using JSONString in place of StringLiteral. Note that since JText conforms to the JSON \r\ngrammar this result will be either a primitive value or an object that is defined by either an ArrayLiteral or \r\nan ObjectLiteral.\r\n4. If IsCallable(reviver) is true, then\r\na. Let root be a new object created as if by the expression new Object(), where Object is the \r\nstandard built-in constructor with that name.\r\nb. Call the [[DefineOwnProperty]] internal method of root with the empty String, the \r\nPropertyDescriptor {[[Value]]: unfiltered, [[Writable]]: true, [[Enumerable]]: true, \r\n[[Configurable]]: true}, and false as arguments.\r\nc. Return the result of calling the abstract operation Walk, passing root and the empty String. The \r\nabstract operation Walk is described below.\r\n5. Else\r\na. Return unfiltered.\r\nThe abstract operation Walk is a recursive abstract operation that takes two parameters: a holder object and \r\nthe String name of a property in that object. Walk uses the value of reviver that was originally passed to the \r\nabove parse function.\r\n1. Let val be the result of calling the [[Get]] internal method of holder with argument name.\r\n2. If val is an object, then\r\na. If the [[Class]] internal property of val is \"Array\"\r\ni. Set I to 0.\r\nii. Let len be the result of calling the [[Get]] internal method of val with argument \"length\".\r\niii. Repeat while I < len, \r\n1. Let newElement be the result of calling the abstract operation Walk, passing val and \r\nToString(I).\r\n2. If newElement is undefined, then\r\na Call the [[Delete]] internal method of val with ToString(I) and false as \r\narguments. \r\n3. Else\r\na Call the [[DefineOwnProperty]] internal method of val with arguments \r\nToString(I), the Property Descriptor {[[Value]]: newElement, [[Writable]]: \r\ntrue, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n4. Add 1 to I.\r\nb. Else\r\ni. Let keys be an internal List of String values consisting of the names of all the own \r\nproperties of val whose [[Enumerable]] attribute is true. The ordering of the Strings should \r\nbe the same as that used by the Object.keys standard built-in function.\r\nii. For each String P in keys do, \r\n1. Let newElement be the result of calling the abstract operation Walk, passing val and \r\nP. \r\n2. If newElement is undefined, then\r\na Call the [[Delete]] internal method of val with P and false as arguments. \r\n3. Else\r\na Call the [[DefineOwnProperty]] internal method of val with arguments P, \r\nthe Property Descriptor {[[Value]]: newElement, [[Writable]]: true, \r\n[[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n3. Return the result of calling the [[Call]] internal method of reviver passing holder as the this value and with \r\nan argument list consisting of name and val.\r\nIt is not permitted for a conforming implementation of JSON.parse to extend the JSON grammars. If an \r\nimplementation wishes to support a modified or extended JSON interchange format it must do so by defining a \r\ndifferent parse function. \r\nNOTE In the case where there are duplicate name Strings within an object, lexically preceding values for the same \r\nkey shall be overwritten.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/22326586-11a5-49ff-af75-819287607fd4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d41fcf161cfd9e6cd6f9d964bcab9a9692e0cbb33b46718baf1a8331e121ddef",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 555
      },
      {
        "segments": [
          {
            "segment_id": "33dc129a-ede9-4e38-ba7e-608b34a9ae20",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 217,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 205\r\n15.12.3 stringify ( value [ , replacer [ , space ] ] )\r\nThe stringify function returns a String in JSON format representing an ECMAScript value. It can take three \r\nparameters. The first parameter is required. The value parameter is an ECMAScript value, which is usually an \r\nobject or array, although it can also be a String, Boolean, Number or null. The optional replacer parameter is \r\neither a function that alters the way objects and arrays are stringified, or an array of Strings and Numbers that \r\nacts as a white list for selecting the object properties that will be stringified. The optional space parameter is a \r\nString or Number that allows the result to have white space injected into it to improve human readability.\r\nThese are the steps in stringifying an object:\r\n1. Let stack be an empty List.\r\n2. Let indent be the empty String.\r\n3. Let PropertyList and ReplacerFunction be undefined.\r\n4. If Type(replacer) is Object, then\r\na. If IsCallable(replacer) is true, then\r\ni. Let ReplacerFunction be replacer.\r\nb. Else if the [[Class]] internal property of replacer is \"Array\", then\r\ni. Let PropertyList be an empty internal List\r\nii. For each value v of a property of replacer that has an array index property name. The \r\nproperties are enumerated in the ascending array index order of their names.\r\n1. Let item be undefined.\r\n2. If Type(v) is String then let item be v.\r\n3. Else if Type(v) is Number then let item be ToString(v).\r\n4. Else if Type(v) is Object then,\r\na If the [[Class]] internal property of v is \"String\" or \"Number\" then let \r\nitem be ToString(v).\r\n5. If item is not undefined and item is not currently an element of PropertyList then,\r\na Append item to the end of PropertyList.\r\n5. If Type(space) is Object then,\r\na. If the [[Class]] internal property of space is \"Number\" then,\r\ni. Let space be ToNumber(space).\r\nb. Else if the [[Class]] internal property of space is \"String\" then,\r\ni. Let space be ToString(space).\r\n6. If Type(space) is Number\r\na. Let space be min(10, ToInteger(space)).\r\nb. Set gap to a String containing space space characters. This will be the empty String if space is less \r\nthan 1.\r\n7. Else if Type(space) is String\r\na. If the number of characters in space is 10 or less, set gap to space otherwise set gap to a String\r\nconsisting of the first 10 characters of space.\r\n8. Else\r\na. Set gap to the empty String.\r\n9. Let wrapper be a new object created as if by the expression new Object(), where Object is the \r\nstandard built-in constructor with that name.\r\n10. Call the [[DefineOwnProperty]] internal method of wrapper with arguments the empty String, the Property \r\nDescriptor {[[Value]]: value, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n11. Return the result of calling the abstract operation Str with the empty String and wrapper.\r\nThe abstract operation Str(key, holder) has access to ReplacerFunction from the invocation of the stringify\r\nmethod. Its algorithm is as follows:\r\n1. Let value be the result of calling the [[Get]] internal method of holder with argument key.\r\n2. If Type(value) is Object, then\r\na. Let toJSON be the result of calling the [[Get]] internal method of value with argument \"toJSON\".\r\nb. If IsCallable(toJSON) is true\r\ni. Let value be the result of calling the [[Call]] internal method of toJSON passing value as the \r\nthis value and with an argument list consisting of key.\r\n3. If ReplacerFunction is not undefined, then",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/33dc129a-ede9-4e38-ba7e-608b34a9ae20.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=736a1ad1c3d5e7ed800dbe72418f101d0fd9206db817d59a7fac6ba9dc5a938d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 584
      },
      {
        "segments": [
          {
            "segment_id": "33dc129a-ede9-4e38-ba7e-608b34a9ae20",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 217,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 205\r\n15.12.3 stringify ( value [ , replacer [ , space ] ] )\r\nThe stringify function returns a String in JSON format representing an ECMAScript value. It can take three \r\nparameters. The first parameter is required. The value parameter is an ECMAScript value, which is usually an \r\nobject or array, although it can also be a String, Boolean, Number or null. The optional replacer parameter is \r\neither a function that alters the way objects and arrays are stringified, or an array of Strings and Numbers that \r\nacts as a white list for selecting the object properties that will be stringified. The optional space parameter is a \r\nString or Number that allows the result to have white space injected into it to improve human readability.\r\nThese are the steps in stringifying an object:\r\n1. Let stack be an empty List.\r\n2. Let indent be the empty String.\r\n3. Let PropertyList and ReplacerFunction be undefined.\r\n4. If Type(replacer) is Object, then\r\na. If IsCallable(replacer) is true, then\r\ni. Let ReplacerFunction be replacer.\r\nb. Else if the [[Class]] internal property of replacer is \"Array\", then\r\ni. Let PropertyList be an empty internal List\r\nii. For each value v of a property of replacer that has an array index property name. The \r\nproperties are enumerated in the ascending array index order of their names.\r\n1. Let item be undefined.\r\n2. If Type(v) is String then let item be v.\r\n3. Else if Type(v) is Number then let item be ToString(v).\r\n4. Else if Type(v) is Object then,\r\na If the [[Class]] internal property of v is \"String\" or \"Number\" then let \r\nitem be ToString(v).\r\n5. If item is not undefined and item is not currently an element of PropertyList then,\r\na Append item to the end of PropertyList.\r\n5. If Type(space) is Object then,\r\na. If the [[Class]] internal property of space is \"Number\" then,\r\ni. Let space be ToNumber(space).\r\nb. Else if the [[Class]] internal property of space is \"String\" then,\r\ni. Let space be ToString(space).\r\n6. If Type(space) is Number\r\na. Let space be min(10, ToInteger(space)).\r\nb. Set gap to a String containing space space characters. This will be the empty String if space is less \r\nthan 1.\r\n7. Else if Type(space) is String\r\na. If the number of characters in space is 10 or less, set gap to space otherwise set gap to a String\r\nconsisting of the first 10 characters of space.\r\n8. Else\r\na. Set gap to the empty String.\r\n9. Let wrapper be a new object created as if by the expression new Object(), where Object is the \r\nstandard built-in constructor with that name.\r\n10. Call the [[DefineOwnProperty]] internal method of wrapper with arguments the empty String, the Property \r\nDescriptor {[[Value]]: value, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n11. Return the result of calling the abstract operation Str with the empty String and wrapper.\r\nThe abstract operation Str(key, holder) has access to ReplacerFunction from the invocation of the stringify\r\nmethod. Its algorithm is as follows:\r\n1. Let value be the result of calling the [[Get]] internal method of holder with argument key.\r\n2. If Type(value) is Object, then\r\na. Let toJSON be the result of calling the [[Get]] internal method of value with argument \"toJSON\".\r\nb. If IsCallable(toJSON) is true\r\ni. Let value be the result of calling the [[Call]] internal method of toJSON passing value as the \r\nthis value and with an argument list consisting of key.\r\n3. If ReplacerFunction is not undefined, then",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/33dc129a-ede9-4e38-ba7e-608b34a9ae20.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=736a1ad1c3d5e7ed800dbe72418f101d0fd9206db817d59a7fac6ba9dc5a938d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 584
      },
      {
        "segments": [
          {
            "segment_id": "0b4b5aa9-a576-4454-89e9-bf7b34dffe03",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 218,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "206 © Ecma International 2011\r\na. Let value be the result of calling the [[Call]] internal method of ReplacerFunction passing holder as \r\nthe this value and with an argument list consisting of key and value.\r\n4. If Type(value) is Object then,\r\na. If the [[Class]] internal property of value is \"Number\" then,\r\ni. Let value be ToNumber(value).\r\nb. Else if the [[Class]] internal property of value is \"String\" then,\r\ni. Let value be ToString(value).\r\nc. Else if the [[Class]] internal property of value is \"Boolean\" then,\r\ni. Let value be the value of the [[PrimitiveValue]] internal property of value.\r\n5. If value is null then return \"null\".\r\n6. If value is true then return \"true\".\r\n7. If value is false then return \"false\".\r\n8. If Type(value) is String, then return the result of calling the abstract operation Quote with argument value.\r\n9. If Type(value) is Number\r\na. If value is finite then return ToString(value).\r\nb. Else, return \"null\".\r\n10. If Type(value) is Object, and IsCallable(value) is false\r\na. If the [[Class]] internal property of value is \"Array\" then\r\ni. Return the result of calling the abstract operation JA with argument value.\r\nb. Else, return the result of calling the abstract operation JO with argument value.\r\n11. Return undefined.\r\nThe abstract operation Quote(value) wraps a String value in double quotes and escapes characters within it. \r\n1. Let product be the double quote character.\r\n2. For each character C in value\r\na. If C is the double quote character or the backslash character\r\ni. Let product be the concatenation of product and the backslash character.\r\nii. Let product be the concatenation of product and C.\r\nb. Else if C is backspace, formfeed, newline, carriage return, or tab\r\ni. Let product be the concatenation of product and the backslash character.\r\nii. Let abbrev be the character corresponding to the value of C as follows:\r\nbackspace \"b\"\r\nformfeed \"f\"\r\nnewline \"n\"\r\ncarriage return \"r\"\r\ntab \"t\"\r\niii. Let product be the concatenation of product and abbrev.\r\nc. Else if C is a control character having a code unit value less than the space character\r\ni. Let product be the concatenation of product and the backslash character.\r\nii. Let product be the concatenation of product and \"u\".\r\niii. Let hex be the result of converting the numeric code unit value of C to a String of four \r\nhexadecimal digits.\r\niv. Let product be the concatenation of product and hex.\r\nd. Else\r\ni. Let product be the concatenation of product and C.\r\n3. Let product be the concatenation of product and the double quote character.\r\n4. Return product.\r\nThe abstract operation JO(value) serializes an object. It has access to the stack, indent, gap, PropertyList,\r\nReplacerFunction, and space of the invocation of the stringify method.\r\n1. If stack contains value then throw a TypeError exception because the structure is cyclical.\r\n2. Append value to stack.\r\n3. Let stepback be indent.\r\n4. Let indent be the concatenation of indent and gap.\r\n5. If PropertyList is not undefined, then\r\na. Let K be PropertyList.\r\n6. Else",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0b4b5aa9-a576-4454-89e9-bf7b34dffe03.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=50ab7c285a43aad2d5b2753ea157806eebc85dc5bc329fbae695b91de1900237",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 507
      },
      {
        "segments": [
          {
            "segment_id": "5abc6287-27d1-47af-b351-f7c9d4b5e8d9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 219,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 207\r\na. Let K be an internal List of Strings consisting of the names of all the own properties of value whose \r\n[[Enumerable]] attribute is true. The ordering of the Strings should be the same as that used by the \r\nObject.keys standard built-in function.\r\n7. Let partial be an empty List.\r\n8. For each element P of K.\r\na. Let strP be the result of calling the abstract operation Str with arguments P and value.\r\nb. If strP is not undefined\r\ni. Let member be the result of calling the abstract operation Quote with argument P.\r\nii. Let member be the concatenation of member and the colon character.\r\niii. If gap is not the empty String\r\n1. Let member be the concatenation of member and the space character.\r\niv. Let member be the concatenation of member and strP.\r\nv. Append member to partial.\r\n9. If partial is empty, then\r\na. Let final be \"{}\".\r\n10. Else\r\na. If gap is the empty String\r\ni. Let properties be a String formed by concatenating all the element Strings of partial with \r\neach adjacent pair of Strings separated with the comma character. A comma is not inserted \r\neither before the first String or after the last String. \r\nii. Let final be the result of concatenating \"{\", properties, and \"}\".\r\nb. Else gap is not the empty String\r\ni. Let separator be the result of concatenating the comma character, the line feed character, \r\nand indent.\r\nii. Let properties be a String formed by concatenating all the element Strings of partial with \r\neach adjacent pair of Strings separated with separator. The separator String is not inserted \r\neither before the first String or after the last String.\r\niii. Let final be the result of concatenating \"{\", the line feed character, indent, properties, the \r\nline feed character, stepback, and \"}\".\r\n11. Remove the last element of stack.\r\n12. Let indent be stepback.\r\n13. Return final.\r\nThe abstract operation JA(value) serializes an array. It has access to the stack, indent, gap, and space of the \r\ninvocation of the stringify method. The representation of arrays includes only the elements between zero and \r\narray.length – 1 inclusive. Named properties are excluded from the stringification. An array is stringified as \r\nan open left bracket, elements separated by comma, and a closing right bracket.\r\n1. If stack contains value then throw a TypeError exception because the structure is cyclical.\r\n2. Append value to stack.\r\n3. Let stepback be indent.\r\n4. Let indent be the concatenation of indent and gap.\r\n5. Let partial be an empty List.\r\n6. Let len be the result of calling the [[Get]] internal method of value with argument \"length\".\r\n7. Let index be 0.\r\n8. Repeat while index < len\r\na. Let strP be the result of calling the abstract operation Str with arguments ToString(index) and value. \r\nb. If strP is undefined\r\ni. Append \"null\" to partial.\r\nc. Else\r\ni. Append strP to partial.\r\nd. Increment index by 1.\r\n9. If partial is empty ,then\r\na. Let final be \"[]\".\r\n10. Else\r\na. If gap is the empty String\r\ni. Let properties be a String formed by concatenating all the element Strings of partial with \r\neach adjacent pair of Strings separated with the comma character. A comma is not inserted \r\neither before the first String or after the last String. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/5abc6287-27d1-47af-b351-f7c9d4b5e8d9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f0236952685947c8661ab7b26b236c88905f1463f2603ae92bbe3a9d53a53eeb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 556
      },
      {
        "segments": [
          {
            "segment_id": "5abc6287-27d1-47af-b351-f7c9d4b5e8d9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 219,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 207\r\na. Let K be an internal List of Strings consisting of the names of all the own properties of value whose \r\n[[Enumerable]] attribute is true. The ordering of the Strings should be the same as that used by the \r\nObject.keys standard built-in function.\r\n7. Let partial be an empty List.\r\n8. For each element P of K.\r\na. Let strP be the result of calling the abstract operation Str with arguments P and value.\r\nb. If strP is not undefined\r\ni. Let member be the result of calling the abstract operation Quote with argument P.\r\nii. Let member be the concatenation of member and the colon character.\r\niii. If gap is not the empty String\r\n1. Let member be the concatenation of member and the space character.\r\niv. Let member be the concatenation of member and strP.\r\nv. Append member to partial.\r\n9. If partial is empty, then\r\na. Let final be \"{}\".\r\n10. Else\r\na. If gap is the empty String\r\ni. Let properties be a String formed by concatenating all the element Strings of partial with \r\neach adjacent pair of Strings separated with the comma character. A comma is not inserted \r\neither before the first String or after the last String. \r\nii. Let final be the result of concatenating \"{\", properties, and \"}\".\r\nb. Else gap is not the empty String\r\ni. Let separator be the result of concatenating the comma character, the line feed character, \r\nand indent.\r\nii. Let properties be a String formed by concatenating all the element Strings of partial with \r\neach adjacent pair of Strings separated with separator. The separator String is not inserted \r\neither before the first String or after the last String.\r\niii. Let final be the result of concatenating \"{\", the line feed character, indent, properties, the \r\nline feed character, stepback, and \"}\".\r\n11. Remove the last element of stack.\r\n12. Let indent be stepback.\r\n13. Return final.\r\nThe abstract operation JA(value) serializes an array. It has access to the stack, indent, gap, and space of the \r\ninvocation of the stringify method. The representation of arrays includes only the elements between zero and \r\narray.length – 1 inclusive. Named properties are excluded from the stringification. An array is stringified as \r\nan open left bracket, elements separated by comma, and a closing right bracket.\r\n1. If stack contains value then throw a TypeError exception because the structure is cyclical.\r\n2. Append value to stack.\r\n3. Let stepback be indent.\r\n4. Let indent be the concatenation of indent and gap.\r\n5. Let partial be an empty List.\r\n6. Let len be the result of calling the [[Get]] internal method of value with argument \"length\".\r\n7. Let index be 0.\r\n8. Repeat while index < len\r\na. Let strP be the result of calling the abstract operation Str with arguments ToString(index) and value. \r\nb. If strP is undefined\r\ni. Append \"null\" to partial.\r\nc. Else\r\ni. Append strP to partial.\r\nd. Increment index by 1.\r\n9. If partial is empty ,then\r\na. Let final be \"[]\".\r\n10. Else\r\na. If gap is the empty String\r\ni. Let properties be a String formed by concatenating all the element Strings of partial with \r\neach adjacent pair of Strings separated with the comma character. A comma is not inserted \r\neither before the first String or after the last String. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/5abc6287-27d1-47af-b351-f7c9d4b5e8d9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f0236952685947c8661ab7b26b236c88905f1463f2603ae92bbe3a9d53a53eeb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 556
      },
      {
        "segments": [
          {
            "segment_id": "6d67be61-54bc-492a-9ef1-f512e01eb5ce",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 220,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "208 © Ecma International 2011\r\nii. Let final be the result of concatenating \"[\", properties, and \"]\".\r\nb. Else\r\ni. Let separator be the result of concatenating the comma character, the line feed character, \r\nand indent.\r\nii. Let properties be a String formed by concatenating all the element Strings of partial with \r\neach adjacent pair of Strings separated with separator. The separator String is not inserted \r\neither before the first String or after the last String.\r\niii. Let final be the result of concatenating \"[\", the line feed character, indent, properties, the \r\nline feed character, stepback, and \"]\".\r\n11. Remove the last element of stack.\r\n12. Let indent be stepback.\r\n13. Return final.\r\nNOTE 1 JSON structures are allowed to be nested to any depth, but they must be acyclic. If value is or contains a cyclic \r\nstructure, then the stringify function must throw a TypeError exception. This is an example of a value that cannot be \r\nstringified:\r\na = [];\r\na[0] = a;\r\nmy_text = JSON.stringify(a); // This must throw an TypeError.\r\nNOTE 2 Symbolic primitive values are rendered as follows:\r\n The null value is rendered in JSON text as the String null.\r\n The undefined value is not rendered.\r\n The true value is rendered in JSON text as the String true.\r\n The false value is rendered in JSON text as the String false.\r\nNOTE 3 String values are wrapped in double quotes. The characters \" and \\ are escaped with \\ prefixes. Control \r\ncharacters are replaced with escape sequences \\uHHHH, or with the shorter forms, \\b (backspace), \\f (formfeed), \\n\r\n(newline), \\r (carriage return), \\t (tab).\r\nNOTE 4 Finite numbers are stringified as if by calling ToString(number). NaN and Infinity regardless of sign are \r\nrepresented as the String null.\r\nNOTE 5 Values that do not have a JSON representation (such as undefined and functions) do not produce a String. \r\nInstead they produce the undefined value. In arrays these values are represented as the String null. In objects an \r\nunrepresentable value causes the property to be excluded from stringification.\r\nNOTE 6 An object is rendered as an opening left brace followed by zero or more properties, separated with commas, \r\nclosed with a right brace. A property is a quoted String representing the key or property name, a colon, and then the \r\nstringified property value. An array is rendered as an opening left bracket followed by zero or more values, separated with \r\ncommas, closed with a right bracket.\r\n16 Errors\r\nAn implementation must report most errors at the time the relevant ECMAScript language construct is \r\nevaluated. An early error is an error that can be detected and reported prior to the evaluation of any construct \r\nin the Program containing the error. An implementation must report early errors in a Program prior to the first \r\nevaluation of that Program. Early errors in eval code are reported at the time eval is called but prior to \r\nevaluation of any construct within the eval code. All errors that are not early errors are runtime errors.\r\nAn implementation must treat any instance of the following kinds of errors as an early error:\r\n Any syntax error.\r\n Attempts to define an ObjectLiteral that has multiple get property assignments with the same name or \r\nmultiple set property assignments with the same name.\r\n Attempts to define an ObjectLiteral that has both a data property assignment and a get or set property \r\nassignment with the same name.\r\n Errors in regular expression literals that are not implementation-defined syntax extensions.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/6d67be61-54bc-492a-9ef1-f512e01eb5ce.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=771708b2ed94a66f0a08d1487d5646420050860a8d3017626ce3f0b9a83e4a76",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 586
      },
      {
        "segments": [
          {
            "segment_id": "6d67be61-54bc-492a-9ef1-f512e01eb5ce",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 220,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "208 © Ecma International 2011\r\nii. Let final be the result of concatenating \"[\", properties, and \"]\".\r\nb. Else\r\ni. Let separator be the result of concatenating the comma character, the line feed character, \r\nand indent.\r\nii. Let properties be a String formed by concatenating all the element Strings of partial with \r\neach adjacent pair of Strings separated with separator. The separator String is not inserted \r\neither before the first String or after the last String.\r\niii. Let final be the result of concatenating \"[\", the line feed character, indent, properties, the \r\nline feed character, stepback, and \"]\".\r\n11. Remove the last element of stack.\r\n12. Let indent be stepback.\r\n13. Return final.\r\nNOTE 1 JSON structures are allowed to be nested to any depth, but they must be acyclic. If value is or contains a cyclic \r\nstructure, then the stringify function must throw a TypeError exception. This is an example of a value that cannot be \r\nstringified:\r\na = [];\r\na[0] = a;\r\nmy_text = JSON.stringify(a); // This must throw an TypeError.\r\nNOTE 2 Symbolic primitive values are rendered as follows:\r\n The null value is rendered in JSON text as the String null.\r\n The undefined value is not rendered.\r\n The true value is rendered in JSON text as the String true.\r\n The false value is rendered in JSON text as the String false.\r\nNOTE 3 String values are wrapped in double quotes. The characters \" and \\ are escaped with \\ prefixes. Control \r\ncharacters are replaced with escape sequences \\uHHHH, or with the shorter forms, \\b (backspace), \\f (formfeed), \\n\r\n(newline), \\r (carriage return), \\t (tab).\r\nNOTE 4 Finite numbers are stringified as if by calling ToString(number). NaN and Infinity regardless of sign are \r\nrepresented as the String null.\r\nNOTE 5 Values that do not have a JSON representation (such as undefined and functions) do not produce a String. \r\nInstead they produce the undefined value. In arrays these values are represented as the String null. In objects an \r\nunrepresentable value causes the property to be excluded from stringification.\r\nNOTE 6 An object is rendered as an opening left brace followed by zero or more properties, separated with commas, \r\nclosed with a right brace. A property is a quoted String representing the key or property name, a colon, and then the \r\nstringified property value. An array is rendered as an opening left bracket followed by zero or more values, separated with \r\ncommas, closed with a right bracket.\r\n16 Errors\r\nAn implementation must report most errors at the time the relevant ECMAScript language construct is \r\nevaluated. An early error is an error that can be detected and reported prior to the evaluation of any construct \r\nin the Program containing the error. An implementation must report early errors in a Program prior to the first \r\nevaluation of that Program. Early errors in eval code are reported at the time eval is called but prior to \r\nevaluation of any construct within the eval code. All errors that are not early errors are runtime errors.\r\nAn implementation must treat any instance of the following kinds of errors as an early error:\r\n Any syntax error.\r\n Attempts to define an ObjectLiteral that has multiple get property assignments with the same name or \r\nmultiple set property assignments with the same name.\r\n Attempts to define an ObjectLiteral that has both a data property assignment and a get or set property \r\nassignment with the same name.\r\n Errors in regular expression literals that are not implementation-defined syntax extensions.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/6d67be61-54bc-492a-9ef1-f512e01eb5ce.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=771708b2ed94a66f0a08d1487d5646420050860a8d3017626ce3f0b9a83e4a76",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 586
      },
      {
        "segments": [
          {
            "segment_id": "eac5b43d-91ee-4c94-bf2c-319a4835138b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 221,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 209\r\n Attempts in strict mode code to define an ObjectLiteral that has multiple data property assignments \r\nwith the same name.\r\n The occurrence of a WithStatement in strict mode code.\r\n The occurrence of an Identifier value appearing more than once within a FormalParameterList of an \r\nindividual strict mode FunctionDeclaration or FunctionExpression.\r\n Improper uses of return, break, and continue.\r\n Attempts to call PutValue on any value for which an early determination can be made that the value is \r\nnot a Reference (for example, executing the assignment statement 3=4).\r\nAn implementation shall not treat other kinds of errors as early errors even if the compiler can prove that a \r\nconstruct cannot execute without error under any circumstances. An implementation may issue an early \r\nwarning in such a case, but it should not report the error until the relevant construct is actually executed. \r\nAn implementation shall report all errors as specified, except for the following:\r\n An implementation may extend program syntax and regular expression pattern or flag \r\nsyntax. To permit this, all operations (such as calling eval, using a regular expression \r\nliteral, or using the Function or RegExp constructor) that are allowed to throw \r\nSyntaxError are permitted to exhibit implementation-defined behaviour instead of throwing \r\nSyntaxError when they encounter an implementation-defined extension to the program \r\nsyntax or regular expression pattern or flag syntax.\r\n An implementation may provide additional types, values, objects, properties, and functions \r\nbeyond those described in this specification. This may cause constructs (such as looking up \r\na variable in the global scope) to have implementation-defined behaviour instead of \r\nthrowing an error (such as ReferenceError).\r\n An implementation may define behaviour other than throwing RangeError for toFixed, \r\ntoExponential, and toPrecision when the fractionDigits or precision argument is \r\noutside the specified range.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/eac5b43d-91ee-4c94-bf2c-319a4835138b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=937c9243bcc25a003cf974d91e29c116dbf5a07ad72d676df5aa16c1b0bf4730",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "8782f177-87af-4330-a174-a45e93aa225e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 222,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "210 © Ecma International 2011",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/8782f177-87af-4330-a174-a45e93aa225e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=52e12227cfd20baa56482c8d645c4344905d447ebcdb1ed4e569149e02d2991b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "7c4518bb-393a-4ce7-92d3-04d1e3b805ca",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 223,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 211\r\nAnnex A\r\n(informative)\r\nGrammar Summary\r\nA.1 Lexical Grammar\r\nSourceCharacter :: See clause 6\r\nany Unicode code unit\r\nInputElementDiv :: See clause 7\r\nWhiteSpace\r\nLineTerminator\r\nComment\r\nToken\r\nDivPunctuator\r\nInputElementRegExp :: See clause 7\r\nWhiteSpace\r\nLineTerminator\r\nComment\r\nToken\r\nRegularExpressionLiteral\r\nWhiteSpace :: See 7.2\r\n<TAB>\r\n<VT>\r\n<FF>\r\n<SP>\r\n<NBSP>\r\n<BOM>\r\n<USP>\r\nLineTerminator :: See 7.3\r\n<LF>\r\n<CR>\r\n<LS>\r\n<PS>\r\nLineTerminatorSequence :: See 7.3\r\n<LF>\r\n<CR> [lookahead  <LF> ]\r\n<LS>\r\n<PS>\r\n<CR> <LF>\r\nComment :: See 7.4\r\nMultiLineComment\r\nSingleLineComment",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/7c4518bb-393a-4ce7-92d3-04d1e3b805ca.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8c702023c44ced6921885fd8d6658e04b525e5a456313a158dba56cc818a90e7",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ec35284e-c7a0-4c8b-8223-1aeeb9939ab7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 224,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "212 © Ecma International 2011\r\nMultiLineComment :: See 7.4\r\n/* MultiLineCommentCharsopt */\r\nMultiLineCommentChars :: See 7.4\r\nMultiLineNotAsteriskChar MultiLineCommentCharsopt\r\n* PostAsteriskCommentCharsopt\r\nPostAsteriskCommentChars :: See 7.4\r\nMultiLineNotForwardSlashOrAsteriskChar MultiLineCommentCharsopt\r\n* PostAsteriskCommentCharsopt\r\nMultiLineNotAsteriskChar :: See 7.4\r\nSourceCharacter but not *\r\nMultiLineNotForwardSlashOrAsteriskChar :: See 7.4\r\nSourceCharacter but not one of / or *\r\nSingleLineComment :: See 7.4\r\n// SingleLineCommentCharsopt\r\nSingleLineCommentChars :: See 7.4\r\nSingleLineCommentChar SingleLineCommentCharsopt\r\nSingleLineCommentChar :: See 7.4\r\nSourceCharacter but not LineTerminator\r\nToken :: See 7.5\r\nIdentifierName\r\nPunctuator\r\nNumericLiteral\r\nStringLiteral\r\nIdentifier :: See 7.6\r\nIdentifierName but not ReservedWord\r\nIdentifierName :: See 7.6\r\nIdentifierStart\r\nIdentifierName IdentifierPart\r\nIdentifierStart :: See 7.6\r\nUnicodeLetter\r\n$\r\n_\r\n\\ UnicodeEscapeSequence",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/ec35284e-c7a0-4c8b-8223-1aeeb9939ab7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7de8c8b48b896856c1aaddade831e239db2f7e9e618c22ae2cbc30b08d5c446f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 484
      },
      {
        "segments": [
          {
            "segment_id": "dc0c0224-4526-4359-aa0f-db65c73c3aff",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 225,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 213\r\nIdentifierPart :: See 7.6\r\nIdentifierStart\r\nUnicodeCombiningMark\r\nUnicodeDigit\r\nUnicodeConnectorPunctuation\r\n<ZWNJ>\r\n<ZWJ>\r\nUnicodeLetter :: See 7.6\r\nany character in the Unicode categories ―Uppercase letter (Lu)‖, ―Lowercase letter \r\n(Ll)‖, ―Titlecase letter (Lt)‖, ―Modifier letter (Lm)‖, ―Other letter (Lo)‖, or ―Letter \r\nnumber (Nl)‖.\r\nUnicodeCombiningMark :: See 7.6\r\nany character in the Unicode categories ―Non-spacing mark (Mn)‖ or ―Combining \r\nspacing mark (Mc)‖\r\nUnicodeDigit :: See 7.6\r\nany character in the Unicode category ―Decimal number (Nd)‖\r\nUnicodeConnectorPunctuation :: See 7.6\r\nany character in the Unicode category ―Connector punctuation (Pc)‖\r\nReservedWord :: See 7.6.1\r\nKeyword\r\nFutureReservedWord\r\nNullLiteral\r\nBooleanLiteral\r\nKeyword :: one of See 7.6.1.1\r\nbreak do instanceof typeof\r\ncase else new var\r\ncatch finally return void\r\ncontinue for switch while\r\ndebugger function this with\r\ndefault if throw\r\ndelete in try\r\nFutureReservedWord :: one of See 7.6.1.2\r\nclass enum extends super\r\nconst export import\r\nThe following tokens are also considered to be FutureReservedWords when parsing strict mode \r\ncode (see 10.1.1).\r\nimplements let private public\r\ninterface package protected static\r\nyield",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/dc0c0224-4526-4359-aa0f-db65c73c3aff.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=522eb4137ce5e2fcd5014d75d16bc5cb8b7751ce3e04fd158b61ec022f59d7ed",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f2f27a7e-158f-4c90-9808-521740067708",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 226,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "214 © Ecma International 2011\r\nPunctuator :: one of See 7.7\r\n{ } ( ) [ ]\r\n. ; , < > <=\r\n>= == != === !==\r\n+ - * % ++ --\r\n<< >> >>> & | ^\r\n! ~ && || ? :\r\n= += -= *= %= <<=\r\n>>= >>>= &= |= ^=\r\nDivPunctuator :: one of See 7.7\r\n/ /=\r\nLiteral :: See 7.8\r\nNullLiteral\r\nBooleanLiteral\r\nNumericLiteral\r\nStringLiteral\r\nRegularExpressionLiteral\r\nNullLiteral :: See 7.8.1\r\nnull\r\nBooleanLiteral :: See 7.8.2\r\ntrue\r\nfalse\r\nNumericLiteral :: See 7.8.3\r\nDecimalLiteral\r\nHexIntegerLiteral\r\nDecimalLiteral :: See 7.8.3\r\nDecimalIntegerLiteral . DecimalDigitsopt ExponentPartopt\r\n. DecimalDigits ExponentPartopt\r\nDecimalIntegerLiteral ExponentPartopt\r\nDecimalIntegerLiteral :: See 7.8.3\r\n0\r\nNonZeroDigit DecimalDigitsopt\r\nDecimalDigits :: See 7.8.3\r\nDecimalDigit\r\nDecimalDigits DecimalDigit\r\nDecimalDigit :: one of See 7.8.3\r\n0 1 2 3 4 5 6 7 8 9",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/f2f27a7e-158f-4c90-9808-521740067708.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a42cf6bb75a88dc4c1ea8570db1cf58b774dc7af5e09be8f50d49a0e7f6b413e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "52b0c4af-3b78-4524-be14-ef33a345bbc8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 227,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 215\r\nNonZeroDigit :: one of See 7.8.3\r\n1 2 3 4 5 6 7 8 9\r\nExponentPart :: See 7.8.3\r\nExponentIndicator SignedInteger\r\nExponentIndicator :: one of See 7.8.3\r\ne E\r\nSignedInteger :: See 7.8.3\r\nDecimalDigits\r\n+ DecimalDigits\r\n- DecimalDigits\r\nHexIntegerLiteral :: See 7.8.3\r\n0x HexDigit\r\n0X HexDigit\r\nHexIntegerLiteral HexDigit\r\nHexDigit :: one of See 7.8.3\r\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\r\nStringLiteral :: See 7.8.4\r\n\" DoubleStringCharactersopt \"\r\n' SingleStringCharactersopt '\r\nDoubleStringCharacters :: See 7.8.4\r\nDoubleStringCharacter DoubleStringCharactersopt\r\nSingleStringCharacters :: See 7.8.4\r\nSingleStringCharacter SingleStringCharactersopt\r\nDoubleStringCharacter :: See 7.8.4\r\nSourceCharacter but not one of \" or \\ or LineTerminator\r\n\\ EscapeSequence\r\nLineContinuation\r\nSingleStringCharacter :: See 7.8.4\r\nSourceCharacter but not one of ' or \\ or LineTerminator\r\n\\ EscapeSequence\r\nLineContinuation\r\nLineContinuation :: See 7.8.4\r\n\\ LineTerminatorSequence\r\nEscapeSequence :: See 7.8.4\r\nCharacterEscapeSequence\r\n0 [lookahead  DecimalDigit]\r\nHexEscapeSequence\r\nUnicodeEscapeSequence\r\nCharacterEscapeSequence :: See 7.8.4\r\nSingleEscapeCharacter\r\nNonEscapeCharacter\r\nSingleEscapeCharacter :: one of See 7.8.4\r\n' \" \\ b f n r t v",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/52b0c4af-3b78-4524-be14-ef33a345bbc8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7af2c8e25fb392838dd6acb6150b4b445b6f03a8419760b29bec03f147099eb5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 475
      },
      {
        "segments": [
          {
            "segment_id": "595b998c-5988-4a71-837d-7c9dfd8ee218",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 228,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "216 © Ecma International 2011\r\nNonEscapeCharacter :: See 7.8.4\r\nSourceCharacter but not one of EscapeCharacter or LineTerminator\r\nEscapeCharacter :: See 7.8.4\r\nSingleEscapeCharacter\r\nDecimalDigit\r\nx\r\nu\r\nHexEscapeSequence :: See 7.8.4\r\nx HexDigit HexDigit\r\nUnicodeEscapeSequence :: See 7.8.4\r\nu HexDigit HexDigit HexDigit HexDigit\r\nRegularExpressionLiteral :: See 7.8.5\r\n/ RegularExpressionBody / RegularExpressionFlags\r\nRegularExpressionBody :: See 7.8.5\r\nRegularExpressionFirstChar RegularExpressionChars\r\nRegularExpressionChars :: See 7.8.5\r\n[empty]\r\nRegularExpressionChars RegularExpressionChar\r\nRegularExpressionFirstChar :: See 7.8.5\r\nRegularExpressionNonTerminator but not one of * or \\ or / or [\r\nRegularExpressionBackslashSequence\r\nRegularExpressionClass\r\nRegularExpressionChar :: See 7.8.5\r\nRegularExpressionNonTerminator but not \\ or / or [\r\nRegularExpressionBackslashSequence\r\nRegularExpressionClass\r\nRegularExpressionBackslashSequence :: See 7.8.5\r\n\\ RegularExpressionNonTerminator\r\nRegularExpressionNonTerminator :: See 7.8.5\r\nSourceCharacter but not LineTerminator\r\nRegularExpressionClass :: See 7.8.5\r\n[ RegularExpressionClassChars ]\r\nRegularExpressionClassChars :: See 7.8.5\r\n[empty]\r\nRegularExpressionClassChars RegularExpressionClassChar\r\nRegularExpressionClassChar :: See 7.8.5\r\nRegularExpressionNonTerminator but not ] or \\\r\nRegularExpressionBackslashSequence",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/595b998c-5988-4a71-837d-7c9dfd8ee218.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3ef97595c4544438c27ea85ee92c313807f016bb594fcdb83cee448821a17e91",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0e077d38-88fb-472b-ab74-f1eaa354c927",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 229,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 217\r\nRegularExpressionFlags :: See 7.8.5\r\n[empty]\r\nRegularExpressionFlags IdentifierPart\r\nA.2 Number Conversions\r\nStringNumericLiteral ::: See 9.3.1\r\nStrWhiteSpaceopt\r\nStrWhiteSpaceopt StrNumericLiteral StrWhiteSpaceopt\r\nStrWhiteSpace ::: See 9.3.1\r\nStrWhiteSpaceChar StrWhiteSpaceopt\r\nStrWhiteSpaceChar ::: See 9.3.1\r\nWhiteSpace\r\nLineTerminator\r\nStrNumericLiteral ::: See 9.3.1\r\nStrDecimalLiteral\r\nHexIntegerLiteral\r\nStrDecimalLiteral ::: See 9.3.1\r\nStrUnsignedDecimalLiteral\r\n+ StrUnsignedDecimalLiteral\r\n- StrUnsignedDecimalLiteral\r\nStrUnsignedDecimalLiteral ::: See 9.3.1\r\nInfinity\r\nDecimalDigits . DecimalDigitsopt ExponentPartopt\r\n. DecimalDigits ExponentPartopt\r\nDecimalDigits ExponentPartopt\r\nDecimalDigits ::: See 9.3.1\r\nDecimalDigit\r\nDecimalDigits DecimalDigit\r\nDecimalDigit ::: one of See 9.3.1\r\n0 1 2 3 4 5 6 7 8 9\r\nExponentPart ::: See 9.3.1\r\nExponentIndicator SignedInteger\r\nExponentIndicator ::: one of See 9.3.1\r\ne E\r\nSignedInteger ::: See 9.3.1\r\nDecimalDigits\r\n+ DecimalDigits\r\n- DecimalDigits",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0e077d38-88fb-472b-ab74-f1eaa354c927.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=aa012a62fcbb97c49214c4728445cd2e27050beb6a2b52704731cc69d03c67b8",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "8e174436-273d-4ea9-9f94-b7206a4183b0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 230,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "218 © Ecma International 2011\r\nHexIntegerLiteral ::: See 9.3.1\r\n0x HexDigit\r\n0X HexDigit\r\nHexIntegerLiteral HexDigit\r\nHexDigit ::: one of See 9.3.1\r\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\r\nA.3 Expressions\r\nPrimaryExpression : See 11.1\r\nthis\r\nIdentifier\r\nLiteral\r\nArrayLiteral\r\nObjectLiteral\r\n( Expression )\r\nArrayLiteral : See 11.1.4\r\n[ Elisionopt ]\r\n[ ElementList ]\r\n[ ElementList , Elisionopt ]\r\nElementList : See 11.1.4\r\nElisionopt AssignmentExpression\r\nElementList , Elisionopt AssignmentExpression\r\nElision : See 11.1.4\r\n,\r\nElision ,\r\nObjectLiteral : See 11.1.5\r\n{ }\r\n{ PropertyNameAndValueList }\r\n{ PropertyNameAndValueList , }\r\nPropertyNameAndValueList : See 11.1.5\r\nPropertyAssignment\r\nPropertyNameAndValueList , PropertyAssignment\r\nPropertyAssignment : See 11.1.5\r\nPropertyName : AssignmentExpression\r\nget PropertyName ( ) { FunctionBody }\r\nset PropertyName ( PropertySetParameterList ) { FunctionBody }\r\nPropertyName : See 11.1.5\r\nIdentifierName\r\nStringLiteral\r\nNumericLiteral\r\nPropertySetParameterList : See 11.1.5\r\nIdentifier",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/8e174436-273d-4ea9-9f94-b7206a4183b0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4eb4bdd650e52c47afbc7770a56a871bf01f2f3fb5db0f6502b8a6dcf0ea181a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c6ec744b-6bc6-4fe6-b17d-3cd3908f44f6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 231,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 219\r\nMemberExpression : See 11.2\r\nPrimaryExpression\r\nFunctionExpression\r\nMemberExpression [ Expression ]\r\nMemberExpression . IdentifierName\r\nnew MemberExpression Arguments\r\nNewExpression : See 11.2\r\nMemberExpression\r\nnew NewExpression\r\nCallExpression : See 11.2\r\nMemberExpression Arguments\r\nCallExpression Arguments\r\nCallExpression [ Expression ]\r\nCallExpression . IdentifierName\r\nArguments : See 11.2\r\n( )\r\n( ArgumentList )\r\nArgumentList : See 11.2\r\nAssignmentExpression\r\nArgumentList , AssignmentExpression\r\nLeftHandSideExpression : See 11.2\r\nNewExpression\r\nCallExpression\r\nPostfixExpression : See 11.3\r\nLeftHandSideExpression\r\nLeftHandSideExpression [no LineTerminator here] ++\r\nLeftHandSideExpression [no LineTerminator here] --\r\nUnaryExpression : See 11.4\r\nPostfixExpression\r\ndelete UnaryExpression\r\nvoid UnaryExpression\r\ntypeof UnaryExpression\r\n++ UnaryExpression\r\n-- UnaryExpression\r\n+ UnaryExpression\r\n- UnaryExpression\r\n~ UnaryExpression\r\n! UnaryExpression\r\nMultiplicativeExpression : See 11.5\r\nUnaryExpression\r\nMultiplicativeExpression * UnaryExpression\r\nMultiplicativeExpression / UnaryExpression\r\nMultiplicativeExpression % UnaryExpression",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c6ec744b-6bc6-4fe6-b17d-3cd3908f44f6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6d1a86bca7f7abf6fbfb0617fc73a5a272a57cfe00fc88f8c9f03d734210e57f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 505
      },
      {
        "segments": [
          {
            "segment_id": "ff4c51a4-fd0f-4f18-80e8-144acbb7d04d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 232,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "220 © Ecma International 2011\r\nAdditiveExpression : See 11.6\r\nMultiplicativeExpression\r\nAdditiveExpression + MultiplicativeExpression\r\nAdditiveExpression - MultiplicativeExpression\r\nShiftExpression : See 11.7\r\nAdditiveExpression\r\nShiftExpression << AdditiveExpression\r\nShiftExpression >> AdditiveExpression\r\nShiftExpression >>> AdditiveExpression\r\nRelationalExpression : See 11.8\r\nShiftExpression\r\nRelationalExpression < ShiftExpression\r\nRelationalExpression > ShiftExpression\r\nRelationalExpression <= ShiftExpression\r\nRelationalExpression >= ShiftExpression\r\nRelationalExpression instanceof ShiftExpression\r\nRelationalExpression in ShiftExpression\r\nRelationalExpressionNoIn : See 11.8\r\nShiftExpression\r\nRelationalExpressionNoIn < ShiftExpression\r\nRelationalExpressionNoIn > ShiftExpression\r\nRelationalExpressionNoIn <= ShiftExpression\r\nRelationalExpressionNoIn >= ShiftExpression\r\nRelationalExpressionNoIn instanceof ShiftExpression\r\nEqualityExpression : See 11.9\r\nRelationalExpression\r\nEqualityExpression == RelationalExpression\r\nEqualityExpression != RelationalExpression\r\nEqualityExpression === RelationalExpression\r\nEqualityExpression !== RelationalExpression\r\nEqualityExpressionNoIn : See 11.9\r\nRelationalExpressionNoIn\r\nEqualityExpressionNoIn == RelationalExpressionNoIn\r\nEqualityExpressionNoIn != RelationalExpressionNoIn\r\nEqualityExpressionNoIn === RelationalExpressionNoIn\r\nEqualityExpressionNoIn !== RelationalExpressionNoIn\r\nBitwiseANDExpression : See 11.10\r\nEqualityExpression\r\nBitwiseANDExpression & EqualityExpression\r\nBitwiseANDExpressionNoIn : See 11.10\r\nEqualityExpressionNoIn\r\nBitwiseANDExpressionNoIn & EqualityExpressionNoIn",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/ff4c51a4-fd0f-4f18-80e8-144acbb7d04d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3e6055e59054e5f55afb39b35798ed4fbd175fdbff8b0c3b6cd504ad40f7e3ff",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "68fc732a-3a5a-4499-9a8e-28c0a6778550",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 233,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 221\r\nBitwiseXORExpression : See 11.10\r\nBitwiseANDExpression\r\nBitwiseXORExpression ^ BitwiseANDExpression\r\nBitwiseXORExpressionNoIn : See 11.10\r\nBitwiseANDExpressionNoIn\r\nBitwiseXORExpressionNoIn ^ BitwiseANDExpressionNoIn\r\nBitwiseORExpression : See 11.10\r\nBitwiseXORExpression\r\nBitwiseORExpression | BitwiseXORExpression\r\nBitwiseORExpressionNoIn : See 11.10\r\nBitwiseXORExpressionNoIn\r\nBitwiseORExpressionNoIn | BitwiseXORExpressionNoIn\r\nLogicalANDExpression : See 11.11\r\nBitwiseORExpression\r\nLogicalANDExpression && BitwiseORExpression\r\nLogicalANDExpressionNoIn : See 11.11\r\nBitwiseORExpressionNoIn\r\nLogicalANDExpressionNoIn && BitwiseORExpressionNoIn\r\nLogicalORExpression : See 11.11\r\nLogicalANDExpression\r\nLogicalORExpression || LogicalANDExpression\r\nLogicalORExpressionNoIn : See 11.11\r\nLogicalANDExpressionNoIn\r\nLogicalORExpressionNoIn || LogicalANDExpressionNoIn\r\nConditionalExpression : See 11.12\r\nLogicalORExpression\r\nLogicalORExpression ? AssignmentExpression : AssignmentExpression\r\nConditionalExpressionNoIn : See 11.12\r\nLogicalORExpressionNoIn\r\nLogicalORExpressionNoIn ? AssignmentExpression : AssignmentExpressionNoIn\r\nAssignmentExpression : See 11.13\r\nConditionalExpression\r\nLeftHandSideExpression = AssignmentExpression \r\nLeftHandSideExpression AssignmentOperator AssignmentExpression\r\nAssignmentExpressionNoIn : See 11.13\r\nConditionalExpressionNoIn\r\nLeftHandSideExpression = AssignmentExpressionNoIn\r\nLeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/68fc732a-3a5a-4499-9a8e-28c0a6778550.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b833b2294ced18e0febdf08a2a8de359f71f4f4f596b7d850e88753f211cba1a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c24d1857-3034-4229-875f-63017c4073a1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 234,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "222 © Ecma International 2011\r\nAssignmentOperator : one of See 11.13\r\n*= /= %= += -= <<= >>= >>>= &= ^= |=\r\nExpression : See 11.14\r\nAssignmentExpression\r\nExpression , AssignmentExpression\r\nExpressionNoIn : See 11.14\r\nAssignmentExpressionNoIn\r\nExpressionNoIn , AssignmentExpressionNoIn\r\nA.4 Statements\r\nStatement : See clause 12\r\nBlock\r\nVariableStatement\r\nEmptyStatement\r\nExpressionStatement\r\nIfStatement\r\nIterationStatement\r\nContinueStatement\r\nBreakStatement\r\nReturnStatement\r\nWithStatement\r\nLabelledStatement\r\nSwitchStatement\r\nThrowStatement\r\nTryStatement\r\nDebuggerStatement\r\nBlock : See 12.1\r\n{ StatementListopt }\r\nStatementList : See 12.1\r\nStatement\r\nStatementList Statement\r\nVariableStatement : See 12.2\r\nvar VariableDeclarationList ;\r\nVariableDeclarationList : See 12.2\r\nVariableDeclaration\r\nVariableDeclarationList , VariableDeclaration\r\nVariableDeclarationListNoIn : See 12.2\r\nVariableDeclarationNoIn\r\nVariableDeclarationListNoIn , VariableDeclarationNoIn\r\nVariableDeclaration : See 12.2\r\nIdentifier Initialiseropt\r\nVariableDeclarationNoIn : See 12.2\r\nIdentifier InitialiserNoInopt",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c24d1857-3034-4229-875f-63017c4073a1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bdb2cc5773296992dd4552ce739791f9338dd3b3f09374ba452c7bf5728bfcdb",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6446df80-285e-4a80-9e22-d4dd090996ee",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 235,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 223\r\nInitialiser : See 12.2\r\n= AssignmentExpression\r\nInitialiserNoIn : See 12.2\r\n= AssignmentExpressionNoIn\r\nEmptyStatement : See 12.3\r\n;\r\nExpressionStatement : See 12.4\r\n[lookahead  {{, function}] Expression ;\r\nIfStatement : See 12.5\r\nif ( Expression ) Statement else Statement\r\nif ( Expression ) Statement\r\nIterationStatement : See 12.6\r\ndo Statement while ( Expression );\r\nwhile ( Expression ) Statement\r\nfor (ExpressionNoInopt; Expressionopt ; Expressionopt ) Statement\r\nfor ( var VariableDeclarationListNoIn; Expressionopt ; Expressionopt ) Statement\r\nfor ( LeftHandSideExpression in Expression ) Statement\r\nfor ( var VariableDeclarationNoIn in Expression ) Statement\r\nContinueStatement : See 12.7\r\ncontinue ;\r\ncontinue [no LineTerminator here] Identifier ;\r\nBreakStatement : See 12.8\r\nbreak ;\r\nbreak [no LineTerminator here] Identifier ;\r\nReturnStatement : See 12.9\r\nreturn ;\r\nreturn [no LineTerminator here] Expression ;\r\nWithStatement : See 12.10\r\nwith ( Expression ) Statement\r\nSwitchStatement : See 12.11\r\nswitch ( Expression ) CaseBlock\r\nCaseBlock : See 12.11\r\n{ CaseClausesopt }\r\n{ CaseClausesopt DefaultClause CaseClausesopt }\r\nCaseClauses : See 12.11\r\nCaseClause\r\nCaseClauses CaseClause",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/6446df80-285e-4a80-9e22-d4dd090996ee.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8059e0c0e66f920a69c74b04604fecbc26ffd306ee90e490c488161e9bbf8876",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 510
      },
      {
        "segments": [
          {
            "segment_id": "c58c7e42-c7b7-4bfd-8d3a-badfa103a5c6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 236,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "224 © Ecma International 2011\r\nCaseClause : See 12.11\r\ncase Expression : StatementListopt\r\nDefaultClause : See 12.11\r\ndefault : StatementListopt\r\nLabelledStatement : See 12.12\r\nIdentifier : Statement\r\nThrowStatement : See 12.13\r\nthrow [no LineTerminator here] Expression ;\r\nTryStatement : See 12.14\r\ntry Block Catch\r\ntry Block Finally\r\ntry Block Catch Finally\r\nCatch : See 12.14\r\ncatch ( Identifier ) Block\r\nFinally : See 12.14\r\nfinally Block\r\nDebuggerStatement : See 12.15\r\ndebugger ;\r\nA.5 Functions and Programs\r\nFunctionDeclaration : See clause 13\r\nfunction Identifier ( FormalParameterListopt ) { FunctionBody }\r\nFunctionExpression : See clause 13\r\nfunction Identifieropt ( FormalParameterListopt ) { FunctionBody }\r\nFormalParameterList : See clause 13\r\nIdentifier\r\nFormalParameterList , Identifier\r\nFunctionBody : See clause 13\r\nSourceElementsopt\r\nProgram : See clause 14\r\nSourceElementsopt\r\nSourceElements : See clause 14\r\nSourceElement\r\nSourceElements SourceElement",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/c58c7e42-c7b7-4bfd-8d3a-badfa103a5c6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=92008274d945a0a285a09e06e031d892c40b68dbe2afa8988d3d2563a988d9f7",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0bb3a672-1a15-4e32-9f26-84a2affd6afc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 237,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 225\r\nSourceElement : See clause 14\r\nStatement\r\nFunctionDeclaration\r\nA.6 Universal Resource Identifier Character Classes\r\nuri ::: See 15.1.3\r\nuriCharactersopt\r\nuriCharacters ::: See 15.1.3\r\nuriCharacter uriCharactersopt\r\nuriCharacter ::: See 15.1.3\r\nuriReserved\r\nuriUnescaped\r\nuriEscaped\r\nuriReserved ::: one of See 15.1.3\r\n; / ? : @ & = + $ ,\r\nuriUnescaped ::: See 15.1.3\r\nuriAlpha\r\nDecimalDigit\r\nuriMark\r\nuriEscaped ::: See 15.1.3\r\n% HexDigit HexDigit\r\nuriAlpha ::: one of See 15.1.3\r\na b c d e f g h i j k l m n o p q r s t u v w x y z\r\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\r\nuriMark ::: one of See 15.1.3\r\n- _ . ! ~ * ' ( )\r\nA.7 Regular Expressions\r\nPattern :: See 15.10.1\r\nDisjunction\r\nDisjunction :: See 15.10.1\r\nAlternative\r\nAlternative | Disjunction\r\nAlternative :: See 15.10.1\r\n[empty]\r\nAlternative Term",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/0bb3a672-1a15-4e32-9f26-84a2affd6afc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d53a6ad015b44f5bdec14e6376276406d0d1547ea9b589eb720d2a5577f08be7",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fedd2a36-a61a-4433-aea9-43abe2b7bbe7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 238,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "226 © Ecma International 2011\r\nTerm :: See 15.10.1\r\nAssertion\r\nAtom\r\nAtom Quantifier\r\nAssertion :: See 15.10.1\r\n^\r\n$\r\n\\ b\r\n\\ B\r\n( ? = Disjunction )\r\n( ? ! Disjunction )\r\nQuantifier :: See 15.10.1\r\nQuantifierPrefix\r\nQuantifierPrefix ?\r\nQuantifierPrefix :: See 15.10.1\r\n*\r\n+\r\n?\r\n{ DecimalDigits }\r\n{ DecimalDigits , }\r\n{ DecimalDigits , DecimalDigits }\r\nAtom :: See 15.10.1\r\nPatternCharacter\r\n.\r\n\\ AtomEscape\r\nCharacterClass\r\n( Disjunction )\r\n( ? : Disjunction )\r\nPatternCharacter :: See 15.10.1\r\nSourceCharacter but not one of-\r\n ^ $ \\ . * + ? ( ) [ ] { } |\r\nAtomEscape :: See 15.10.1\r\nDecimalEscape\r\nCharacterEscape\r\nCharacterClassEscape\r\nCharacterEscape :: See 15.10.1\r\nControlEscape\r\nc ControlLetter\r\nHexEscapeSequence\r\nUnicodeEscapeSequence\r\nIdentityEscape\r\nControlEscape :: one of See 15.10.1\r\nf n r t v",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/fedd2a36-a61a-4433-aea9-43abe2b7bbe7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b6dd755bf229e60528ee95368839caed11efa748b693b7c134458a6b6cc40bd2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 420
      },
      {
        "segments": [
          {
            "segment_id": "4786e471-0c78-4126-9ab0-aa30fdf9dd79",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 239,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 227\r\nControlLetter :: one of See 15.10.1\r\na b c d e f g h i j k l m n o p q r s t u v w x y z\r\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\r\nIdentityEscape :: See 15.10.1\r\nSourceCharacter but not IdentifierPart\r\n<ZWJ>\r\n<ZWNJ>\r\nDecimalEscape :: See 15.10.1\r\nDecimalIntegerLiteral [lookahead  DecimalDigit]\r\nCharacterClassEscape :: one of See 15.10.1\r\nd D s S w W\r\nCharacterClass :: See 15.10.1\r\n[ [lookahead  {^}] ClassRanges ]\r\n[ ^ ClassRanges ]\r\nClassRanges :: See 15.10.1\r\n[empty]\r\nNonemptyClassRanges\r\nNonemptyClassRanges :: See 15.10.1\r\nClassAtom\r\nClassAtom NonemptyClassRangesNoDash\r\nClassAtom – ClassAtom ClassRanges\r\nNonemptyClassRangesNoDash :: See 15.10.1\r\nClassAtom\r\nClassAtomNoDash NonemptyClassRangesNoDash\r\nClassAtomNoDash – ClassAtom ClassRanges\r\nClassAtom :: See 15.10.1\r\n-\r\nClassAtomNoDash\r\nClassAtomNoDash :: See 15.10.1\r\nSourceCharacter but not one of \\ or ] or -\r\n\\ ClassEscape\r\nClassEscape :: See 15.10.1\r\nDecimalEscape\r\nb\r\nCharacterEscape\r\nCharacterClassEscape",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/4786e471-0c78-4126-9ab0-aa30fdf9dd79.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f9c879098e9960b934f27e80af65ebdc80344c39ab36c0aa2dd8d9173681fac2",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "07cb5d28-e1db-4fb8-98d7-cf96e97a5a4f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 240,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "228 © Ecma International 2011\r\nA.8 JSON\r\nA.8.1 JSON Lexical Grammar\r\nJSONWhiteSpace :: See 15.12.1.1\r\n<TAB>\r\n<CR>\r\n<LF>\r\n<SP>\r\nJSONString :: See 15.12.1.1\r\n\" JSONStringCharactersopt \"\r\nJSONStringCharacters :: See 15.12.1.1\r\nJSONStringCharacter JSONStringCharactersopt\r\nJSONStringCharacter :: See 15.12.1.1\r\nSourceCharacter but not one of \" or \\ or U+0000 through U+001F\r\n\\ JSONEscapeSequence\r\nJSONEscapeSequence :: See 15.12.1.1\r\nJSONEscapeCharacter\r\nUnicodeEscapeSequence \r\nJSONEscapeCharacter :: one of See 15.12.1.1\r\n\" / \\ b f n r t\r\nJSONNumber :: See 15.12.1.1\r\n-opt DecimalIntegerLiteral JSONFractionopt ExponentPartopt\r\nJSONFraction :: See 15.12.1.1\r\n. DecimalDigits\r\nJSONNullLiteral :: See 15.12.1.1\r\nNullLiteral\r\nJSONBooleanLiteral :: See 15.12.1.1\r\nBooleanLiteral\r\nA.8.2 JSON Syntactic Grammar\r\nJSONText : See 15.12.1.2\r\nJSONValue\r\nJSONValue : See 15.12.1.2\r\nJSONNullLiteral\r\nJSONBooleanLiteral\r\nJSONObject\r\nJSONArray\r\nJSONString\r\nJSONNumber\r\nJSONObject : See 15.12.1.2\r\n{ }\r\n{ JSONMemberList }\r\nJSONMember : See 15.12.1.2\r\nJSONString : JSONValue",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/07cb5d28-e1db-4fb8-98d7-cf96e97a5a4f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fd65f12256a74ee9581fe295a9b3e352366ec5993de542ed92f09914dd756b30",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e10f71d3-5bc2-4103-9afb-fcb2074ea52c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 241,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 229\r\nJSONMemberList : See 15.12.1.2\r\nJSONMember \r\nJSONMemberList , JSONMember \r\nJSONArray : See 15.12.1.2\r\n[ ]\r\n[ JSONElementList ]\r\nJSONElementList : See 15.12.1.2\r\nJSONValue\r\nJSONElementList , JSONValue",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/e10f71d3-5bc2-4103-9afb-fcb2074ea52c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b79631757122d869a76f7388c7cd5b1aa0307a7c59c5a8c6bb34953a8dd0b9f5",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fc103327-39bf-4c8d-b58d-49c9d15fe24a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 242,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "230 © Ecma International 2011",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/fc103327-39bf-4c8d-b58d-49c9d15fe24a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ddec4e592c873795117f9cf0f5857f28a9ca5e5293bc6873ee8c03169a8b6a99",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 329
      },
      {
        "segments": [
          {
            "segment_id": "87f91b4f-c26f-46ab-b0b4-62065fafa735",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 243,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 231\r\nAnnex B\r\n(informative)\r\nCompatibility\r\nB.1 Additional Syntax\r\nPast editions of ECMAScript have included additional syntax and semantics for specifying octal literals and \r\noctal escape sequences. These have been removed from this edition of ECMAScript. This non-normative \r\nannex presents uniform syntax and semantics for octal literals and octal escape sequences for compatibility \r\nwith some older ECMAScript programs.\r\nB.1.1 Numeric Literals\r\nThe syntax and semantics of 7.8.3 can be extended as follows except that this extension is not allowed for \r\nstrict mode code:\r\nSyntax\r\nNumericLiteral ::\r\nDecimalLiteral\r\nHexIntegerLiteral\r\nOctalIntegerLiteral\r\nOctalIntegerLiteral ::\r\n0 OctalDigit\r\nOctalIntegerLiteral OctalDigit\r\nOctalDigit :: one of\r\n0 1 2 3 4 5 6 7\r\nSemantics\r\n The MV of NumericLiteral :: OctalIntegerLiteral is the MV of OctalIntegerLiteral.\r\n The MV of OctalDigit :: 0 is 0.\r\n The MV of OctalDigit :: 1 is 1.\r\n The MV of OctalDigit :: 2 is 2.\r\n The MV of OctalDigit :: 3 is 3.\r\n The MV of OctalDigit :: 4 is 4.\r\n The MV of OctalDigit :: 5 is 5.\r\n The MV of OctalDigit :: 6 is 6.\r\n The MV of OctalDigit :: 7 is 7.\r\n The MV of OctalIntegerLiteral :: 0 OctalDigit is the MV of OctalDigit.\r\n The MV of OctalIntegerLiteral :: OctalIntegerLiteral OctalDigit is (the MV of OctalIntegerLiteral\r\ntimes 8) plus the MV of OctalDigit.\r\nB.1.2 String Literals\r\nThe syntax and semantics of 7.8.4 can be extended as follows except that this extension is not allowed for \r\nstrict mode code:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/87f91b4f-c26f-46ab-b0b4-62065fafa735.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4c8a8d6506e97fbce3aa8230b037c364e7977614e72cc6883ede85bbf5fb233a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 253
      },
      {
        "segments": [
          {
            "segment_id": "914f16e1-dc34-4eb7-9897-56829a263dfb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 244,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "232 © Ecma International 2011\r\nSyntax\r\nEscapeSequence ::\r\nCharacterEscapeSequence\r\nOctalEscapeSequence\r\nHexEscapeSequence\r\nUnicodeEscapeSequence\r\nOctalEscapeSequence ::\r\nOctalDigit [lookahead  DecimalDigit]\r\nZeroToThree OctalDigit [lookahead  DecimalDigit]\r\nFourToSeven OctalDigit\r\nZeroToThree OctalDigit OctalDigit\r\nZeroToThree :: one of\r\n0 1 2 3\r\nFourToSeven :: one of\r\n4 5 6 7\r\nSemantics\r\n The CV of EscapeSequence :: OctalEscapeSequence is the CV of the OctalEscapeSequence.\r\n The CV of OctalEscapeSequence :: OctalDigit [lookahead  DecimalDigit] is the character whose code unit \r\nvalue is the MV of the OctalDigit.\r\n The CV of OctalEscapeSequence :: ZeroToThree OctalDigit [lookahead  DecimalDigit] is the character whose \r\ncode unit value is (8 times the MV of the ZeroToThree) plus the MV of the OctalDigit.\r\n The CV of OctalEscapeSequence :: FourToSeven OctalDigit is the character whose code unit value is (8 \r\ntimes the MV of the FourToSeven) plus the MV of the OctalDigit.\r\n The CV of OctalEscapeSequence :: ZeroToThree OctalDigit OctalDigit is the character whose code unit \r\nvalue is (64 (that is, 82) times the MV of the ZeroToThree) plus (8 times the MV of the first OctalDigit) \r\nplus the MV of the second OctalDigit.\r\n The MV of ZeroToThree :: 0 is 0.\r\n The MV of ZeroToThree :: 1 is 1.\r\n The MV of ZeroToThree :: 2 is 2.\r\n The MV of ZeroToThree :: 3 is 3.\r\n The MV of FourToSeven :: 4 is 4.\r\n The MV of FourToSeven :: 5 is 5.\r\n The MV of FourToSeven :: 6 is 6.\r\n The MV of FourToSeven :: 7 is 7.\r\nB.2 Additional Properties\r\nSome implementations of ECMAScript have included additional properties for some of the standard native \r\nobjects. This non-normative annex suggests uniform semantics for such properties without making the \r\nproperties or their semantics part of this standard.\r\nB.2.1 escape (string)\r\nThe escape function is a property of the global object. It computes a new version of a String value in which \r\ncertain characters have been replaced by a hexadecimal escape sequence.\r\nFor those characters being replaced whose code unit value is 0xFF or less, a two-digit escape sequence of \r\nthe form %xx is used. For those characters being replaced whose code unit value is greater than 0xFF, a four\u0002digit escape sequence of the form %uxxxx is used.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/914f16e1-dc34-4eb7-9897-56829a263dfb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7961bf8babc1f0210c764009325020b880a4ba85e9e1ca3949d24e9f6afd48a2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 375
      },
      {
        "segments": [
          {
            "segment_id": "3dd99544-c7a9-461d-a9a3-ca3905222e6c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 245,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 233\r\nWhen the escape function is called with one argument string, the following steps are taken:\r\n1. Call ToString(string).\r\n2. Compute the number of characters in Result(1).\r\n3. Let R be the empty string.\r\n4. Let k be 0.\r\n5. If k equals Result(2), return R.\r\n6. Get the character (represented as a 16-bit unsigned integer) at position k within Result(1).\r\n7. If Result(6) is one of the 69 nonblank characters\r\n“ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@*_+-./”\r\nthen go to step 13.\r\n8. If Result(6), is less than 256, go to step 11.\r\n9. Let S be a String containing six characters “%uwxyz” where wxyz are four hexadecimal digits encoding the \r\nvalue of Result(6).\r\n10. Go to step 14.\r\n11. Let S be a String containing three characters “%xy” where xy are two hexadecimal digits encoding the value \r\nof Result(6).\r\n12. Go to step 14.\r\n13. Let S be a String containing the single character Result(6).\r\n14. Let R be a new String value computed by concatenating the previous value of R and S.\r\n15. Increase k by 1.\r\n16. Go to step 5.\r\nNOTE The encoding is partly based on the encoding described in RFC 1738, but the entire encoding specified in this \r\nstandard is described above without regard to the contents of RFC 1738. This encoding does not reflect changes to RFC \r\n1738 made by RFC 3986.\r\nB.2.2 unescape (string)\r\nThe unescape function is a property of the global object. It computes a new version of a String value in which \r\neach escape sequence of the sort that might be introduced by the escape function is replaced with the \r\ncharacter that it represents.\r\nWhen the unescape function is called with one argument string, the following steps are taken:\r\n1. Call ToString(string).\r\n2. Compute the number of characters in Result(1).\r\n3. Let R be the empty String.\r\n4. Let k be 0.\r\n5. If k equals Result(2), return R.\r\n6. Let c be the character at position k within Result(1).\r\n7. If c is not %, go to step 18.\r\n8. If k is greater than Result(2)6, go to step 14.\r\n9. If the character at position k+1 within Result(1) is not u, go to step 14.\r\n10. If the four characters at positions k+2, k+3, k+4, and k+5 within Result(1) are not all hexadecimal digits, go \r\nto step 14.\r\n11. Let c be the character whose code unit value is the integer represented by the four hexadecimal digits at \r\npositions k+2, k+3, k+4, and k+5 within Result(1).\r\n12. Increase k by 5.\r\n13. Go to step 18.\r\n14. If k is greater than Result(2)3, go to step 18.\r\n15. If the two characters at positions k+1 and k+2 within Result(1) are not both hexadecimal digits, go to step \r\n18.\r\n16. Let c be the character whose code unit value is the integer represented by two zeroes plus the two \r\nhexadecimal digits at positions k+1 and k+2 within Result(1).\r\n17. Increase k by 2.\r\n18. Let R be a new String value computed by concatenating the previous value of R and c.\r\n19. Increase k by 1.\r\n20. Go to step 5.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/3dd99544-c7a9-461d-a9a3-ca3905222e6c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1119ec3a5aee03470e5d9ffb3e96a31c5c4e6fe73aa0c81819a7e6e7d3e7df37",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 522
      },
      {
        "segments": [
          {
            "segment_id": "3dd99544-c7a9-461d-a9a3-ca3905222e6c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 245,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 233\r\nWhen the escape function is called with one argument string, the following steps are taken:\r\n1. Call ToString(string).\r\n2. Compute the number of characters in Result(1).\r\n3. Let R be the empty string.\r\n4. Let k be 0.\r\n5. If k equals Result(2), return R.\r\n6. Get the character (represented as a 16-bit unsigned integer) at position k within Result(1).\r\n7. If Result(6) is one of the 69 nonblank characters\r\n“ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@*_+-./”\r\nthen go to step 13.\r\n8. If Result(6), is less than 256, go to step 11.\r\n9. Let S be a String containing six characters “%uwxyz” where wxyz are four hexadecimal digits encoding the \r\nvalue of Result(6).\r\n10. Go to step 14.\r\n11. Let S be a String containing three characters “%xy” where xy are two hexadecimal digits encoding the value \r\nof Result(6).\r\n12. Go to step 14.\r\n13. Let S be a String containing the single character Result(6).\r\n14. Let R be a new String value computed by concatenating the previous value of R and S.\r\n15. Increase k by 1.\r\n16. Go to step 5.\r\nNOTE The encoding is partly based on the encoding described in RFC 1738, but the entire encoding specified in this \r\nstandard is described above without regard to the contents of RFC 1738. This encoding does not reflect changes to RFC \r\n1738 made by RFC 3986.\r\nB.2.2 unescape (string)\r\nThe unescape function is a property of the global object. It computes a new version of a String value in which \r\neach escape sequence of the sort that might be introduced by the escape function is replaced with the \r\ncharacter that it represents.\r\nWhen the unescape function is called with one argument string, the following steps are taken:\r\n1. Call ToString(string).\r\n2. Compute the number of characters in Result(1).\r\n3. Let R be the empty String.\r\n4. Let k be 0.\r\n5. If k equals Result(2), return R.\r\n6. Let c be the character at position k within Result(1).\r\n7. If c is not %, go to step 18.\r\n8. If k is greater than Result(2)6, go to step 14.\r\n9. If the character at position k+1 within Result(1) is not u, go to step 14.\r\n10. If the four characters at positions k+2, k+3, k+4, and k+5 within Result(1) are not all hexadecimal digits, go \r\nto step 14.\r\n11. Let c be the character whose code unit value is the integer represented by the four hexadecimal digits at \r\npositions k+2, k+3, k+4, and k+5 within Result(1).\r\n12. Increase k by 5.\r\n13. Go to step 18.\r\n14. If k is greater than Result(2)3, go to step 18.\r\n15. If the two characters at positions k+1 and k+2 within Result(1) are not both hexadecimal digits, go to step \r\n18.\r\n16. Let c be the character whose code unit value is the integer represented by two zeroes plus the two \r\nhexadecimal digits at positions k+1 and k+2 within Result(1).\r\n17. Increase k by 2.\r\n18. Let R be a new String value computed by concatenating the previous value of R and c.\r\n19. Increase k by 1.\r\n20. Go to step 5.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/3dd99544-c7a9-461d-a9a3-ca3905222e6c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1119ec3a5aee03470e5d9ffb3e96a31c5c4e6fe73aa0c81819a7e6e7d3e7df37",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 522
      },
      {
        "segments": [
          {
            "segment_id": "2642a78d-5595-41a8-ab56-96e9006e6d17",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 246,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "234 © Ecma International 2011\r\nB.2.3 String.prototype.substr (start, length)\r\nThe substr method takes two arguments, start and length, and returns a substring of the result of converting \r\nthe this object to a String, starting from character position start and running for length characters (or through \r\nthe end of the String if length is undefined). If start is negative, it is treated as (sourceLength+start) where \r\nsourceLength is the length of the String. The result is a String value, not a String object. The following steps are \r\ntaken:\r\n1. Call ToString, giving it the this value as its argument.\r\n2. Call ToInteger(start).\r\n3. If length is undefined, use +; otherwise call ToInteger(length).\r\n4. Compute the number of characters in Result(1).\r\n5. If Result(2) is positive or zero, use Result(2); else use max(Result(4)+Result(2),0).\r\n6. Compute min(max(Result(3),0), Result(4)–Result(5)).\r\n7. If Result(6)  0, return the empty String ―‖.\r\n8. Return a String containing Result(6) consecutive characters from Result(1) beginning with the character at \r\nposition Result(5).\r\nThe length property of the substr method is 2.\r\nNOTE The substr function is intentionally generic; it does not require that its this value be a String object. \r\nTherefore it can be transferred to other kinds of objects for use as a method.\r\nB.2.4 Date.prototype.getYear ( )\r\nNOTE The getFullYear method is preferred for nearly all purposes, because it avoids the ―year 2000 problem.‖\r\nWhen the getYear method is called with no arguments, the following steps are taken:\r\n1. Let t be this time value.\r\n2. If t is NaN, return NaN.\r\n3. Return YearFromTime(LocalTime(t))  1900.\r\nB.2.5 Date.prototype.setYear (year)\r\nNOTE The setFullYear method is preferred for nearly all purposes, because it avoids the ―year 2000 problem.‖\r\nWhen the setYear method is called with one argument year, the following steps are taken:\r\n1. Let t be the result of LocalTime(this time value); but if this time value is NaN, let t be +0.\r\n2. Call ToNumber(year).\r\n3. If Result(2) is NaN, set the [[PrimitiveValue]] internal property of the this value to NaN and return NaN.\r\n4. If Result(2) is not NaN and 0  ToInteger(Result(2))  99 then Result(4) is ToInteger(Result(2)) + 1900. \r\nOtherwise, Result(4) is Result(2).\r\n5. Compute MakeDay(Result(4), MonthFromTime(t), DateFromTime(t)).\r\n6. Compute UTC(MakeDate(Result(5), TimeWithinDay(t))).\r\n7. Set the [[PrimitiveValue]] internal property of the this value to TimeClip(Result(6)).\r\n8. Return the value of the [[PrimitiveValue]] internal property of the this value.\r\nB.2.6 Date.prototype.toGMTString ( )\r\nNOTE The property toUTCString is preferred. The toGMTString property is provided principally for compatibility \r\nwith old code. It is recommended that the toUTCString property be used in new ECMAScript code.\r\nThe Function object that is the initial value of Date.prototype.toGMTString is the same Function object \r\nthat is the initial value of Date.prototype.toUTCString.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/2642a78d-5595-41a8-ab56-96e9006e6d17.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a06ab77e1fabe40ce8dfe23e983220975916b3c7a418a1ad019ecd67591750a0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 448
      },
      {
        "segments": [
          {
            "segment_id": "fc0e2fbe-0187-4af2-a0f9-4649fb9bae6e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 247,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 235\r\nAnnex C\r\n(informative)\r\nThe Strict Mode of ECMAScript\r\nThe strict mode restriction and exceptions\r\n The identifiers \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \r\n\"public\", \"static\", and \"yield\" are classified as FutureReservedWord tokens within strict \r\nmode code. (7.6.12).\r\n A conforming implementation, when processing strict mode code, may not extend the syntax \r\nof NumericLiteral (7.8.3) to include OctalIntegerLiteral as described in B.1.1.\r\n A conforming implementation, when processing strict mode code (see 10.1.1), may not \r\nextend the syntax of EscapeSequence to include OctalEscapeSequence as described in B.1.2.\r\n Assignment to an undeclared identifier or otherwise unresolvable reference does not create a \r\nproperty in the global object. When a simple assignment occurs within strict mode code, its \r\nLeftHandSide must not evaluate to an unresolvable Reference. If it does a ReferenceError\r\nexception is thrown (8.7.2). The LeftHandSide also may not be a reference to a data property \r\nwith the attribute value {[[Writable]]:false}, to an accessor property with the attribute value \r\n{[[Set]]:undefined}, nor to a non-existent property of an object whose [[Extensible]] internal \r\nproperty has the value false. In these cases a TypeError exception is thrown (11.13.1).\r\n The identifier eval or arguments may not appear as the LeftHandSideExpression of an \r\nAssignment operator (11.13) or of a PostfixExpression (11.3) or as the UnaryExpression\r\noperated upon by a Prefix Increment (11.4.4) or a Prefix Decrement (11.4.5) operator. \r\n Arguments objects for strict mode functions define non-configurable accessor properties \r\nnamed \"caller\" and \"callee\" which throw a TypeError exception on access (10.6).\r\n Arguments objects for strict mode functions do not dynamically share their array indexed \r\nproperty values with the corresponding formal parameter bindings of their functions. (10.6).\r\n For strict mode functions, if an arguments object is created the binding of the local identifier \r\narguments to the arguments object is immutable and hence may not be the target of an \r\nassignment expression. (10.5).\r\n It is a SyntaxError if strict mode code contains an ObjectLiteral with more than one definition \r\nof any data property (11.1.5).\r\n It is a SyntaxError if the Identifier \"eval\" or the Identifier \"arguments\" occurs as the\r\nIdentifier in a PropertySetParameterList of a PropertyAssignment that is contained in strict code \r\nor if its FunctionBody is strict code (11.1.5).\r\n Strict mode eval code cannot instantiate variables or functions in the variable environment of \r\nthe caller to eval. Instead, a new variable environment is created and that environment is \r\nused for declaration binding instantiation for the eval code (10.4.2).\r\n If this is evaluated within strict mode code, then the this value is not coerced to an object. A \r\nthis value of null or undefined is not converted to the global object and primitive values are \r\nnot converted to wrapper objects. The this value passed via a function call (including calls \r\nmade using Function.prototype.apply and Function.prototype.call) do not \r\ncoerce the passed this value to an object (10.4.3, 11.1.1, 15.3.4.3, 15.3.4.4).\r\n When a delete operator occurs within strict mode code, a SyntaxError is thrown if its \r\nUnaryExpression is a direct reference to a variable, function argument, or function \r\nname(11.4.1).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/fc0e2fbe-0187-4af2-a0f9-4649fb9bae6e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=64a7ee43bbd024b7328747915f9f7ffcc160ee2c0e2e0d7b4dd9e07675121934",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 511
      },
      {
        "segments": [
          {
            "segment_id": "7cc01b7b-7ee7-4417-8959-636a3a6dafa4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 248,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "236 © Ecma International 2011\r\n When a delete operator occurs within strict mode code, a TypeError is thrown if the \r\nproperty to be deleted has the attribute { [[Configurable]]:false } (11.4.1).\r\n It is a SyntaxError if a VariableDeclaration or VariableDeclarationNoIn occurs within strict code \r\nand its Identifier is eval or arguments (12.2.1).\r\n Strict mode code may not include a WithStatement. The occurrence of a WithStatement in such \r\na context is an SyntaxError (12.10).\r\n It is a SyntaxError if a TryStatement with a Catch occurs within strict code and the Identifier of the \r\nCatch production is eval or arguments (12.14.1)\r\n It is a SyntaxError if the identifier eval or arguments appears within a FormalParameterList of a \r\nstrict mode FunctionDeclaration or FunctionExpression (13.1)\r\n A strict mode function may not have two or more formal parameters that have the same \r\nname. An attempt to create such a function using a FunctionDeclaration, FunctionExpression, or \r\nFunction constructor is a SyntaxError (13.1, 15.3.2).\r\n An implementation may not extend, beyond that defined in this specification, the meanings \r\nwithin strict mode functions of properties named caller or arguments of function \r\ninstances. ECMAScript code may not create or modify properties with these names on \r\nfunction objects that correspond to strict mode functions (10.6, 13.2, 15.3.4.5.3).\r\n It is a SyntaxError to use within strict mode code the identifiers eval or arguments as the \r\nIdentifier of a FunctionDeclaration or FunctionExpression or as a formal parameter name (13.1). \r\nAttempting to dynamically define such a strict mode function using the Function constructor \r\n(15.3.2) will throw a SyntaxError exception.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/7cc01b7b-7ee7-4417-8959-636a3a6dafa4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fe21ea7418715fbeba62b0bd9642cf9266719adada399557ead543c04ded2ec1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 263
      },
      {
        "segments": [
          {
            "segment_id": "d20b5efe-72b4-4240-831c-0ba6ee16199a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 249,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 237\r\nAnnex D\r\n(informative)\r\nCorrections and Clarifications in the 5th Edition\r\nwith Possible 3\r\nrd Edition Compatibility Impact\r\nThroughout: In the Edition 3 specification the meaning of phrases such as ―as if by the expression new \r\nArray()‖ are subject to misinterpretation. In the Edition 5 specification text for all internal references and \r\ninvocations of standard built-in objects and methods has been clarified by making it explicit that the intent is \r\nthat the actual built-in object is to be used rather than the current dynamic value of the correspondingly named \r\nproperty. \r\n11.8.2, 11.8.3, 11.8.5: ECMAScript generally uses a left to right evaluation order, however the Edition 3 \r\nspecification language for the > and <= operators resulted in a partial right to left order. The specification has \r\nbeen corrected for these operators such that it now specifies a full left to right evaluation order. However, this \r\nchange of order is potentially observable if side-effects occur during the evaluation process.\r\n11.1.4: Edition 5 clarifies the fact that a trailing comma at the end of an ArrayInitialiser does not add to the \r\nlength of the array. This is not a semantic change from Edition 3 but some implementations may have \r\npreviously misinterpreted this.\r\n11.2.3: Edition 5 reverses the order of steps 2 and 3 of the algorithm. The original order as specified in \r\nEditions 1 through 3 was incorrectly specified such that side-effects of evaluating Arguments could affect the \r\nresult of evaluating MemberExpression.\r\n12.4: In Edition 3, an object is created, as if by new Object()to serve as the scope for resolving the name of \r\nthe exception parameter passed to a catch clause of a try statement. If the actual exception object is a \r\nfunction and it is called from within the catch clause, the scope object will be passed as the this value of the \r\ncall. The body of the function can then define new properties on its this value and those property names \r\nbecome visible identifiers bindings within the scope of the catch clause after the function returns. In Edition 5, \r\nwhen an exception parameter is called as a function, undefined is passed as the this value.\r\n13: In Edition 3, the algorithm for the production FunctionExpression with an Identifier adds an object created as \r\nif by new Object() to the scope chain to serve as a scope for looking up the name of the function. The \r\nidentifier resolution rules (10.1.4 in Edition 3) when applied to such an object will, if necessary, follow the \r\nobject‘s prototype chain when attempting to resolve an identifier. This means all the properties of \r\nObject.prototype are visible as identifiers within that scope. In practice most implementations of Edition 3 \r\nhave not implemented this semantics. Edition 5 changes the specified semantics by using a Declarative \r\nEnvironment Record to bind the name of the function.\r\n14: In Edition 3, the algorithm for the production SourceElements : SourceElements SourceElement did not correctly \r\npropagate statement result values in the same manner as Block. This could result in the eval function \r\nproducing an incorrect result when evaluating a Program text. In practice most implementations of Edition 3 \r\nhave implemented the correct propagation rather than what was specified in Edition 5.\r\n15.10.6: RegExp.prototype is now a RegExp object rather than an instance of Object. The value of its [[Class]] \r\ninternal property which is observable using Object.prototype.toString is now ―RegExp‖ rather than ―Object‖.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/d20b5efe-72b4-4240-831c-0ba6ee16199a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e7d61b84366756de77e40afe9b813ca608f08a8a68af812a48fa20a78d0f748a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 564
      },
      {
        "segments": [
          {
            "segment_id": "d20b5efe-72b4-4240-831c-0ba6ee16199a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 249,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 237\r\nAnnex D\r\n(informative)\r\nCorrections and Clarifications in the 5th Edition\r\nwith Possible 3\r\nrd Edition Compatibility Impact\r\nThroughout: In the Edition 3 specification the meaning of phrases such as ―as if by the expression new \r\nArray()‖ are subject to misinterpretation. In the Edition 5 specification text for all internal references and \r\ninvocations of standard built-in objects and methods has been clarified by making it explicit that the intent is \r\nthat the actual built-in object is to be used rather than the current dynamic value of the correspondingly named \r\nproperty. \r\n11.8.2, 11.8.3, 11.8.5: ECMAScript generally uses a left to right evaluation order, however the Edition 3 \r\nspecification language for the > and <= operators resulted in a partial right to left order. The specification has \r\nbeen corrected for these operators such that it now specifies a full left to right evaluation order. However, this \r\nchange of order is potentially observable if side-effects occur during the evaluation process.\r\n11.1.4: Edition 5 clarifies the fact that a trailing comma at the end of an ArrayInitialiser does not add to the \r\nlength of the array. This is not a semantic change from Edition 3 but some implementations may have \r\npreviously misinterpreted this.\r\n11.2.3: Edition 5 reverses the order of steps 2 and 3 of the algorithm. The original order as specified in \r\nEditions 1 through 3 was incorrectly specified such that side-effects of evaluating Arguments could affect the \r\nresult of evaluating MemberExpression.\r\n12.4: In Edition 3, an object is created, as if by new Object()to serve as the scope for resolving the name of \r\nthe exception parameter passed to a catch clause of a try statement. If the actual exception object is a \r\nfunction and it is called from within the catch clause, the scope object will be passed as the this value of the \r\ncall. The body of the function can then define new properties on its this value and those property names \r\nbecome visible identifiers bindings within the scope of the catch clause after the function returns. In Edition 5, \r\nwhen an exception parameter is called as a function, undefined is passed as the this value.\r\n13: In Edition 3, the algorithm for the production FunctionExpression with an Identifier adds an object created as \r\nif by new Object() to the scope chain to serve as a scope for looking up the name of the function. The \r\nidentifier resolution rules (10.1.4 in Edition 3) when applied to such an object will, if necessary, follow the \r\nobject‘s prototype chain when attempting to resolve an identifier. This means all the properties of \r\nObject.prototype are visible as identifiers within that scope. In practice most implementations of Edition 3 \r\nhave not implemented this semantics. Edition 5 changes the specified semantics by using a Declarative \r\nEnvironment Record to bind the name of the function.\r\n14: In Edition 3, the algorithm for the production SourceElements : SourceElements SourceElement did not correctly \r\npropagate statement result values in the same manner as Block. This could result in the eval function \r\nproducing an incorrect result when evaluating a Program text. In practice most implementations of Edition 3 \r\nhave implemented the correct propagation rather than what was specified in Edition 5.\r\n15.10.6: RegExp.prototype is now a RegExp object rather than an instance of Object. The value of its [[Class]] \r\ninternal property which is observable using Object.prototype.toString is now ―RegExp‖ rather than ―Object‖.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/d20b5efe-72b4-4240-831c-0ba6ee16199a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e7d61b84366756de77e40afe9b813ca608f08a8a68af812a48fa20a78d0f748a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 564
      },
      {
        "segments": [
          {
            "segment_id": "9c0d59d5-3217-498a-9af6-b7b2a0b3bf60",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 250,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "238 © Ecma International 2011",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/9c0d59d5-3217-498a-9af6-b7b2a0b3bf60.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d6c07e66380dfd63a2f4ed6ac65ee4294e8f319457b81f838f1781c80a5ff32b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "18d25ad2-4958-4f5b-b418-6e8baa1bf310",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 251,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 239\r\nAnnex E\r\n(informative)\r\nAdditions and Changes in the 5th Edition that\r\nIntroduce Incompatibilities with the 3rd Edition\r\n7.1: Unicode format control characters are no longer stripped from ECMAScript source text before processing. \r\nIn Edition 5, if such a character appears in a StringLiteral or RegularExpressionLiteral the character will be \r\nincorporated into the literal where in Edition 3 the character would not be incorporated into the literal.\r\n7.2: Unicode character <BOM> is now treated as whitespace and its presence in the middle of what appears \r\nto be an identifier could result in a syntax error which would not have occurred in Edition 3\r\n7.3: Line terminator characters that are preceded by an escape sequence are now allowed within a string \r\nliteral token. In Edition 3 a syntax error would have been produced.\r\n7.8.5: Regular expression literals now return a unique object each time the literal is evaluated. This change is \r\ndetectable by any programs that test the object identity of such literal values or that are sensitive to the shared \r\nside effects.\r\n7.8.5: Edition 5 requires early reporting of any possible RegExp constructor errors that would be produced \r\nwhen converting a RegularExpressionLiteral to a RegExp object. Prior to Edition 5 implementations were \r\npermitted to defer the reporting of such errors until the actual execution time creation of the object.\r\n7.8.5: In Edition 5 unescaped ―/‖ characters may appear as a CharacterClass in a regular expression literal. In \r\nEdition 3 such a character would have been interpreted as the final character of the literal.\r\n10.4.2: In Edition 5, indirect calls to the eval function use the global environment as both the variable \r\nenvironment and lexical environment for the eval code. In Edition 3, the variable and lexical environments of \r\nthe caller of an indirect eval was used as the environments for the eval code.\r\n15.4.4: In Edition 5 all methods of Array.prototype are intentionally generic. In Edition 3 toString and \r\ntoLocaleString were not generic and would throw a TypeError exception if applied to objects that were \r\nnot instances of Array.\r\n10.6: In Edition 5 the array indexed properties of argument objects that correspond to actual formal \r\nparameters are enumerable. In Edition 3, such properties were not enumerable.\r\n10.6: In Edition 5 the value of the [[Class]] internal property of an arguments object is \"Arguments\". In \r\nEdition 3, it was \"Object\". This is observable if toString is called as a method of an arguments object. \r\n12.6.4: for-in statements no longer throw a TypeError if the in expression evaluates to null or undefined. \r\nInstead, the statement behaves as if the value of the expression was an object with no enumerable properties.\r\n15: In Edition 5, the following new properties are defined on built-in objects that exist in Edition 3: \r\nObject.getPrototypeOf, Object.getOwnPropertyDescriptor, Object.getOwnPropertyNames, \r\nObject.create, Object.defineProperty, Object.defineProperties, Object.seal, \r\nObject.freeze, Object.preventExtensions, Object.isSealed, Object.isFrozen, \r\nObject.isExtensible, Object.keys, Function.prototype.bind, Array.prototype.indexOf,\r\nArray.prototype.lastIndexOf, Array.prototype.every, Array.prototype.some, \r\nArray.prototype.forEach, Array.prototype.map, Array.prototype.filter, \r\nArray.prototype.reduce, Array.prototype.reduceRight, String.prototype.trim, Date.now, \r\nDate.prototype.toISOString, Date.prototype.toJSON.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/18d25ad2-4958-4f5b-b418-6e8baa1bf310.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e921ea541da5c76cde239f15db859d024b7f6c755176076b1bd3612ed5b20b44",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 492
      },
      {
        "segments": [
          {
            "segment_id": "fb37ad19-028b-438a-86da-41285519f92e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 252,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "240 © Ecma International 2011\r\n15: Implementations are now required to ignore extra arguments to standard built-in methods unless \r\notherwise explicitly specified. In Edition 3 the handling of extra arguments was unspecified and \r\nimplementations were explicitly allowed to throw a TypeError exception.\r\n15.1.1: The value properties NaN, Infinity, and undefined of the Global Object have been changed to be \r\nread-only properties.\r\n15.1.2.1. Implementations are no longer permitted to restrict the use of eval in ways that are not a direct call. \r\nIn addition, any invocation of eval that is not a direct call uses the global environment as its variable \r\nenvironment rather than the caller‘s variable environment.\r\n15.1.2.2: The specification of the function parseInt no longer allows implementations to treat Strings \r\nbeginning with a 0 character as octal values.\r\n15.3.4.3: In Edition 3, a TypeError is thrown if the second argument passed to \r\nFunction.prototype.apply is neither an array object nor an arguments object. In Edition 5, the second \r\nargument may be any kind of generic array-like object that has a valid length property.\r\n15.3.4.3, 15.3.4.4: In Edition 3 passing undefined or null as the first argument to either \r\nFunction.prototype.apply or Function.prototype.call causes the global object to be passed to \r\nthe indirectly invoked target function as the this value. If the first argument is a primitive value the result of \r\ncalling ToObject on the primitive value is passed as the this value. In Edition 5, these transformations are not \r\nperformed and the actual first argument value is passed as the this value. This difference will normally be \r\nunobservable to existing ECMAScript Edition 3 code because a corresponding transformation takes place \r\nupon activation of the target function. However, depending upon the implementation, this difference may be \r\nobservable by host object functions called using apply or call. In addition, invoking a standard built-in \r\nfunction in this manner with null or undefined passed as the this value will in many cases cause behaviour in \r\nEdition 5 implementations that differ from Edition 3 behaviour. In particular, in Edition 5 built-in functions that \r\nare specified to actually use the passed this value as an object typically throw a TypeError exception if \r\npassed null or undefined as the this value.\r\n15.3.5.2: In Edition 5, the prototype property of Function instances is not enumerable. In Edition 3, this \r\nproperty was enumerable.\r\n15.5.5.2: In Edition 5, the individual characters of a String object‘s [[PrimitiveValue] may be accessed as array \r\nindexed properties of the String object. These properties are non-writable and non-configurable and shadow \r\nany inherited properties with the same names. In Edition 3, these properties did not exist and ECMAScript \r\ncode could dynamically add and remove writable properties with such names and could access inherited \r\nproperties with such names. \r\n15.9.4.2: Date.parse is now required to first attempt to parse its argument as an ISO format string. \r\nPrograms that use this format but depended upon implementation specific behaviour (including failure) may \r\nbehave differently.\r\n15.10.2.12: In Edition 5, \\s now additionally matches <BOM>.\r\n15.10.4.1: In Edition 3, the exact form of the String value of the source property of an object created by the \r\nRegExp constructor is implementation defined. In Edition 5, the String must conform to certain specified \r\nrequirements and hence may be different from that produced by an Edition 3 implementation.\r\n15.10.6.4: In Edition 3, the result of RegExp.prototype.toString need not be derived from the value of \r\nthe RegExp object‘s source property. In Edition 5 the result must be derived from the source property in a \r\nspecified manner and hence may be different from the result produced by an Edition 3 implementation.\r\n15.11.2.1, 15.11.4.3: In Edition 5, if an initial value for the message property of an Error object is not \r\nspecified via the Error constructor the initial value of the property is the empty String. In Edition 3, such an \r\ninitial value is implementation defined.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/fb37ad19-028b-438a-86da-41285519f92e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cb416d8b403986094e934cc9cde98767b6e3f348237b950dc4e1fd4d48cce307",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 637
      },
      {
        "segments": [
          {
            "segment_id": "fb37ad19-028b-438a-86da-41285519f92e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 252,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "240 © Ecma International 2011\r\n15: Implementations are now required to ignore extra arguments to standard built-in methods unless \r\notherwise explicitly specified. In Edition 3 the handling of extra arguments was unspecified and \r\nimplementations were explicitly allowed to throw a TypeError exception.\r\n15.1.1: The value properties NaN, Infinity, and undefined of the Global Object have been changed to be \r\nread-only properties.\r\n15.1.2.1. Implementations are no longer permitted to restrict the use of eval in ways that are not a direct call. \r\nIn addition, any invocation of eval that is not a direct call uses the global environment as its variable \r\nenvironment rather than the caller‘s variable environment.\r\n15.1.2.2: The specification of the function parseInt no longer allows implementations to treat Strings \r\nbeginning with a 0 character as octal values.\r\n15.3.4.3: In Edition 3, a TypeError is thrown if the second argument passed to \r\nFunction.prototype.apply is neither an array object nor an arguments object. In Edition 5, the second \r\nargument may be any kind of generic array-like object that has a valid length property.\r\n15.3.4.3, 15.3.4.4: In Edition 3 passing undefined or null as the first argument to either \r\nFunction.prototype.apply or Function.prototype.call causes the global object to be passed to \r\nthe indirectly invoked target function as the this value. If the first argument is a primitive value the result of \r\ncalling ToObject on the primitive value is passed as the this value. In Edition 5, these transformations are not \r\nperformed and the actual first argument value is passed as the this value. This difference will normally be \r\nunobservable to existing ECMAScript Edition 3 code because a corresponding transformation takes place \r\nupon activation of the target function. However, depending upon the implementation, this difference may be \r\nobservable by host object functions called using apply or call. In addition, invoking a standard built-in \r\nfunction in this manner with null or undefined passed as the this value will in many cases cause behaviour in \r\nEdition 5 implementations that differ from Edition 3 behaviour. In particular, in Edition 5 built-in functions that \r\nare specified to actually use the passed this value as an object typically throw a TypeError exception if \r\npassed null or undefined as the this value.\r\n15.3.5.2: In Edition 5, the prototype property of Function instances is not enumerable. In Edition 3, this \r\nproperty was enumerable.\r\n15.5.5.2: In Edition 5, the individual characters of a String object‘s [[PrimitiveValue] may be accessed as array \r\nindexed properties of the String object. These properties are non-writable and non-configurable and shadow \r\nany inherited properties with the same names. In Edition 3, these properties did not exist and ECMAScript \r\ncode could dynamically add and remove writable properties with such names and could access inherited \r\nproperties with such names. \r\n15.9.4.2: Date.parse is now required to first attempt to parse its argument as an ISO format string. \r\nPrograms that use this format but depended upon implementation specific behaviour (including failure) may \r\nbehave differently.\r\n15.10.2.12: In Edition 5, \\s now additionally matches <BOM>.\r\n15.10.4.1: In Edition 3, the exact form of the String value of the source property of an object created by the \r\nRegExp constructor is implementation defined. In Edition 5, the String must conform to certain specified \r\nrequirements and hence may be different from that produced by an Edition 3 implementation.\r\n15.10.6.4: In Edition 3, the result of RegExp.prototype.toString need not be derived from the value of \r\nthe RegExp object‘s source property. In Edition 5 the result must be derived from the source property in a \r\nspecified manner and hence may be different from the result produced by an Edition 3 implementation.\r\n15.11.2.1, 15.11.4.3: In Edition 5, if an initial value for the message property of an Error object is not \r\nspecified via the Error constructor the initial value of the property is the empty String. In Edition 3, such an \r\ninitial value is implementation defined.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/fb37ad19-028b-438a-86da-41285519f92e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cb416d8b403986094e934cc9cde98767b6e3f348237b950dc4e1fd4d48cce307",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 637
      },
      {
        "segments": [
          {
            "segment_id": "148c195b-0803-4915-89d2-d23e95f348d6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 253,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 241\r\n15.11.4.4: In Edition 3, the result of Error.prototype.toString is implementation defined. In Edition 5, \r\nthe result is fully specified and hence may differ from some Edition 3 implementations.\r\n15.12: In Edition 5, the name JSON is defined in the global environment. In Edition 3, testing for the presence \r\nof that name will show it to be undefined unless it is defined by the program or implementation.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/148c195b-0803-4915-89d2-d23e95f348d6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3d4dfc45a4751258fe0d2fe6f0a892dda261004d9fda6a7cb3d470d7a19b4aed",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "641c44bf-5fc4-4bc1-9a2b-bfe03454f3bd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 254,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "242 © Ecma International 2011",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/641c44bf-5fc4-4bc1-9a2b-bfe03454f3bd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=eb236f3c6962f4cde2fa8716a85af1a81cc0779348278e0fed0f5773f83305ed",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "bd465afe-fcec-4d26-9eee-8eaa55f4bc3a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 255,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 243\r\nAnnex F\r\n(informative)\r\nTechnically Significant Corrections and Clarifications in the 5.1 Edition\r\n7.8.4: CV definitions added for DoubleStringCharacter :: LineContinuation and SingleStringCharacter ::\r\nLineContinuation.\r\n10.2.1.1.3: The argument S is not ignored. It controls whether an exception is thrown when attempting to set \r\nan immutable binding.\r\n10.2.1.2.2: In algorithm step 5, true is passed as the last argument to [[DefineOwnProperty]].\r\n10.5: Former algorithm step 5.e is now 5.f and a new step 5.e was added to restore compatibility with 3rd\r\nEdition when redefining global functions.\r\n11.5.3: In the final bullet item, use of IEEE 754 round-to-nearest mode is specified.\r\n12.6.3: Missing ToBoolean restored in step 3.a.ii of both algorithms.\r\n12.6.4: Additional final sentences in each of the last two paragraphs clarify certain property enumeration\r\nrequirements.\r\n12.7, 12.8, 12.9: BNF modified to clarify that a continue or break statement without an Identifier or a \r\nreturn statement without an Expression may have a LineTerminator before the semi-colon.\r\n12.14: Step 3 of algorithm 1 and step 2.a of algorithm 3 are corrected such that the value field of B is passed \r\nas a parameter rather than B itself.\r\n15.1.2.2: In step 2 of algorithm, clarify that S may be the empty string.\r\n15.1.2.3: In step 2 of algorithm clarify that trimmedString may be the empty string.\r\n15.1.3: Added notes clarifying that ECMAScript‘s URI syntax is based upon RFC 2396 and not the newer \r\nRFC 3986. In the algorithm for Decode, a step was removed that immediately preceded the current step \r\n4.d.vii.10.a because it tested for a condition that cannot occur.\r\n15.2.3.7: Corrected use of variable P in steps 5 and 6 of algorithm.\r\n15.2.4.2: Edition 5 handling of undefined and null as this value caused existing code to fail. Specification \r\nmodified to maintain compatibility with such code. New steps 1 and 2 added to the algorithm.\r\n15.3.4.3: Steps 5 and 7 of Edition 5 algorithm have been deleted because they imposed requirements upon \r\nthe argArray argument that are inconsistent with other uses of generic array-like objects.\r\n15.4.4.12: In step 9.a, incorrect reference to relativeStart was replaced with a reference to actualStart. \r\n15.4.4.15: Clarified that the default value for fromIndex is the length minus 1 of the array.\r\n15.4.4.18: In step 9 of the algorithm, undefined is now the specified return value.\r\n15.4.4.22: In step 9.c.ii the first argument to the [[Call]] internal method has been changed to undefined for \r\nconsistency with the definition of Array.prototype.reduce.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/bd465afe-fcec-4d26-9eee-8eaa55f4bc3a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2524487b6c990d4524834a35e26da1dc3845883ba94f3781f5e8aa8950830760",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 482
      },
      {
        "segments": [
          {
            "segment_id": "dff382cd-519d-4e00-bd32-6b095a44ee85",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 256,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "244 © Ecma International 2011\r\n15.4.5.1: In Algorithm steps 3.l.ii and 3.l.iii the variable name was inverted resulting in an incorrectly inverted \r\ntest.\r\n15.5.4.9: Normative requirement concerning canonically equivalent strings deleted from paragraph following \r\nalgorithm because it is listed as a recommendation in NOTE 2.\r\n15.5.4.14: In split algorithm step 11.a and 13.a, the positional order of the arguments to SplitMatch was\r\ncorrected to match the actual parameter signature of SplitMatch. In step 13.a.iii.7.d, lengthA replaces A.length.\r\n15.5.5.2: In first paragraph, removed the implication that the individual character property access had ―array \r\nindex‖ semantics. Modified algorithm steps 3 and 5 such that they do not enforce ―array index‖ requirement.\r\n15.9.1.15: Specified legal value ranges for fields that lacked them. Eliminated ―time-only‖ formats. Specified \r\ndefault values for all optional fields.\r\n15.10.2.2: The step numbers of the algorithm for the internal closure produced by step 2 were incorrectly \r\nnumbered in a manner that implied that they were steps of the outer algorithm.\r\n15.10.2.6: In the abstract operation IsWordChar the first character in the list in step 3 is ―a‖ rather than ―A‖.\r\n15.10.2.8: In the algorithm for the closure returned by the abstract operation CharacterSetMatcher, the variable \r\ndefined by step 3 and passed as an argument in step 4 was renamed to ch in order to avoid a name conflict \r\nwith a formal parameter of the closure.\r\n15.10.6.2: Step 9.e was deleted because It performed an extra increment of i.\r\n15.11.1.1: Removed requirement that the message own property is set to the empty String when the message\r\nargument is undefined.\r\n15.11.1.2: Removed requirement that the message own property is set to the empty String when the message\r\nargument is undefined.\r\n15.11.4.4: Steps 6-10 modified/added to correctly deal with missing or empty message property value.\r\n15.11.1.2: Removed requirement that the message own property is set to the empty String when the message\r\nargument is undefined.\r\n15.12.3: In step 10.b.iii of the JA internal operation, the last element of the concatenation is ―]‖.\r\nB.2.1: Added to NOTE that the encoding is based upon RFC 1738 rather than the newer RFC 3986.\r\nAnnex C: An item was added corresponding to 7.6.12 regarding FutureReservedWords in strict mode.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/dff382cd-519d-4e00-bd32-6b095a44ee85.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4c643ec83a8320e67d2e3026574ea2d2690992df2b2cf0d6597ff39736f7a5ad",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a752207b-6c82-4c10-8f54-efe31a412514",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 257,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011 245\r\nBibliography\r\n[1] IEEE Std 754-2008: IEEE Standard for Floating-Point Arithmetic. Institute of Electrical and Electronic \r\nEngineers, New York (2008)\r\n[2] The Unicode Consortium. The Unicode Standard, Version 3.0, defined by: The Unicode Standard, \r\nVersion 3.0 (Reading, MA, Addison-Wesley, 2000. ISBN 0-201-61633-5)\r\n[3] Unicode Inc. (2010), Unicode Technical Report #15: Unicode Normalization Forms\r\n[4] ISO 8601:2004(E) Data elements and interchange formats – Information interchange --\r\nRepresentation of dates and times\r\n[5] RFC 1738 \"Uniform Resource Locators (URL)\", available at <http://tools.ietf.org/html/rfc1738>\r\n[6] RFC 2396 \"Uniform Resource Identifiers (URI): Generic Syntax\", available at \r\n<http://tools.ietf.org/html/rfc2396>\r\n[7] RFC 3629 \"UTF-8, a transformation format of ISO 10646\", available at \r\n<http://tools.ietf.org/html/rfc3629>\r\n[8] RFC 4627 \"The application/json Media Type for JavaScript Object Notation (JSON)\" , available at \r\n<http://tools.ietf.org/html/rfc4627>",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/a752207b-6c82-4c10-8f54-efe31a412514.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=699b84265c7a538d0490943b7360e363cee41fe8b996eaf07c3e43919bf8289f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ef2cdf50-1615-4e20-bc78-52375a6c25e6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.32,
              "height": 841.92
            },
            "page_number": 258,
            "page_width": 595.32,
            "page_height": 841.92,
            "content": "© Ecma International 2011",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/1d84b8c4-c8f3-4930-b85c-171b2e9f62fd/images/ef2cdf50-1615-4e20-bc78-52375a6c25e6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T042048Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cfd6d1659be5a34168cd235d9e81f8a516a6a8a08da1fd93265651c70e6d9844",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 490
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "Field Value: ECMAScript Language Specification\n"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Ecma International\n"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "2011\n"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "```json\n{\n  \"location\": null\n}\n```\n"
        }
      ]
    }
  }
}