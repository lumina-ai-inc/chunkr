{
  "file_name": "Interval hash tree - An efficient index structure for searching object queries in large image databases (caivd99).pdf",
  "task_id": "bff09df1-5621-4899-9629-dd3b1d50a780",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "555a371a-fc01-4172-b553-a92afd982fb0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 1,
            "page_width": 612,
            "page_height": 792,
            "content": "Interval hash tree: An e\u000ecient index structure for searching ob ject\r\nqueries in large image databases\r\nT. F. Syeda-Mahmood, P. Raghav an,N. Megiddo\r\nIBM Almaden Research Center\r\n650 Harry Road, San Jose, CA 95120\r\nstf,raghav an,megiddo@almaden.ibm.com\r\nAbstract\r\nAs image databases grow large in size, index structures\r\nfor fast navigation become important. In particular, when\r\nthe goal is to lo cate obje ct queries in image databases under\r\nchanges in pose, occlusions and spurious data, traditional\r\nindex structures use d in databases b ecome unsuitable. This\r\npaper presents a novel index structur e cal led the interval\r\nhash tree, for lo cating multi-region obje ct queries in image\r\ndatabases. The utility of the index structure is demonstrated\r\nfor query localization in a large image database. 1. In troduction\r\nAs image databases grow large in size, index structures\r\nfor fast na vigation become important. In particular, when\r\nthe goal is to robustly locate ob ject queries under changes\r\nin imaging conditions, e\u000ecient index structures are needed\r\nthat can consolidate information within and across images\r\nin a compact and e\u000eciently searc hable form to avoid a lin\u0002ear searc h of the database. This problem is often recognized\r\nbut has not been explicitly addressed. Current approaches\r\nrely on conv en tional spatial access structures suc h as R\u0002trees[4], R\u0003\r\n-trees[1], R+-trees[8], SR-trees[5], SS-tree[11],K\u0002D-B trees[7], etc. F or example, R-trees and their varian ts,\r\nassume the ob ject-containing region in the image can be en\u0002closed by bounding rectangles and focus on e\u000ecient group\u0002ing of the enclosing rectangles at successive lev els to yield\r\na balanced search tree that is optimized for disk accesses.\r\nThe search for ob ject queries in such index structures in\u0002volv es \fnding all database rectangles that ov erlap a query\r\nrectangle. Under changes in pose, the bounding rectangles\r\nundergo considerable change including translation, so that\r\nthe search using these index structures no longer yields a\r\nmatch to the query. Moreov er, when the ob ject query con\u0002sists of multiple regions, the spatial layout of regions is\r\nnot adequately taken in to account through bounding rect\u0002angles. Hence traditional index structures are not directly\r\napplicable for the general ob ject localization problem unless\r\nthe spatial layout of regions can be modeled.\r\nIn this paper, we present a nov el geometric index struc\u0002ture called the interval hash tree for locating multi-region\r\nob ject queries in image databases. Speci\fcally, the interval\r\nhash tree (IHT) is a tw o-w ay interval tree in which the la y\u0002out of regions in images of a database is represented in an\r\na\u000ene-invarian t fashion through a\u000ene intervals computed\r\nwith respect to chosen basis features. Localizing ob ject\r\nqueries in volv es represen ting the query a\u000ene intervals also\r\nas an in terval hash tree, and \fnding database intervals that\r\nov erlap with the a\u000ene intervals represented at each node of\r\nthe query IHT through careful tree exploration. The ov er- all goal of such indexing is to accumulate evidence for the\r\nmost common occurrence of basis features.\r\nThe interval hash tree has sev eral desirable properties.\r\nFirst, by representing ob ject layout information using a\u000ene\r\nintervals rather than bounding rectangles, the localization\r\nis made a\u000ene-invariant. Secondly, by building su\u000ecient re\u0002dundancy in the representation of a\u000ene intervals, tolerance\r\nto occlusions and background clutter is achieved. Third, us\u0002ing a balanced binary search tree based on median-based\r\npartitioning of a\u000ene space, the search for o v erlapping inter\u0002vals for a single query interval is made e\u000ecient. Finally, by\r\nconsolidating the search for query a\u000ene intervals through\r\nquery IHT, repeated exploration of database IHT can be\r\navoided.\r\n2. Localizing ob jects through region hash\u0002ing\r\nTo motivate the need for IHT, we brie\ry review the tech\u0002nique of representing and recognizing ob jects.\r\nIt is well-kno wn that the shape of a 2d ob ject can be de\u0002scribed in an a\u000ene-invarian t fashion by recording the a\u000ene\r\ncoordinates of features within ob ject computed with respect\r\nto a triple of basis features chosen as an ob ject-based refer\u0002ence frame[6]. A simpler yet e\u000bective way of describing their\r\nrelativ e location is by recording the a\u000ene interval, i.e., the\r\n2d-interval in which a\u000ene coordinates of features lie w.r.t to\r\nthe c hosen basis triple. Since such intervals bound the a\u000ene\r\ncoordinates, they are also a\u000ene-invariant. The uniqueness\r\nof the a\u000ene intervals is not guaranteed though, since tw o di\u000berent distributions of a\u000ene coordinates could be bound\r\nb y the same interval. However, the c hance of this can be\r\nminimized if we accumulate evidence from multiple ob ject\r\nregion pairs. Thus one way of recognizing or localizing an\r\nob ject is to hash for, i.e., \fnd evidence for as many common\r\na\u000ene intervals betw een the query regionpairs and region\r\npairs in candidate images, in a manner similar to geomet\u0002ric hashing[6] and is termed region hashing. In practice, to\r\n0-7695-0695-X/00 $10.00 (c) 2000 IEEE \r\nAuthorized licensed use limited to: KnowledgeGate from IBM Market Insights. Downloaded on July 20, 2009 at 17:59 from IEEE Xplore. Restrictions apply. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bff09df1-5621-4899-9629-dd3b1d50a780/images/555a371a-fc01-4172-b553-a92afd982fb0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041628Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=206bbadf7796176ec81f9a06cd55ad46056cf7247743f29464ac97f1a8d143a0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 834
      },
      {
        "segments": [
          {
            "segment_id": "555a371a-fc01-4172-b553-a92afd982fb0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 1,
            "page_width": 612,
            "page_height": 792,
            "content": "Interval hash tree: An e\u000ecient index structure for searching ob ject\r\nqueries in large image databases\r\nT. F. Syeda-Mahmood, P. Raghav an,N. Megiddo\r\nIBM Almaden Research Center\r\n650 Harry Road, San Jose, CA 95120\r\nstf,raghav an,megiddo@almaden.ibm.com\r\nAbstract\r\nAs image databases grow large in size, index structures\r\nfor fast navigation become important. In particular, when\r\nthe goal is to lo cate obje ct queries in image databases under\r\nchanges in pose, occlusions and spurious data, traditional\r\nindex structures use d in databases b ecome unsuitable. This\r\npaper presents a novel index structur e cal led the interval\r\nhash tree, for lo cating multi-region obje ct queries in image\r\ndatabases. The utility of the index structure is demonstrated\r\nfor query localization in a large image database. 1. In troduction\r\nAs image databases grow large in size, index structures\r\nfor fast na vigation become important. In particular, when\r\nthe goal is to robustly locate ob ject queries under changes\r\nin imaging conditions, e\u000ecient index structures are needed\r\nthat can consolidate information within and across images\r\nin a compact and e\u000eciently searc hable form to avoid a lin\u0002ear searc h of the database. This problem is often recognized\r\nbut has not been explicitly addressed. Current approaches\r\nrely on conv en tional spatial access structures suc h as R\u0002trees[4], R\u0003\r\n-trees[1], R+-trees[8], SR-trees[5], SS-tree[11],K\u0002D-B trees[7], etc. F or example, R-trees and their varian ts,\r\nassume the ob ject-containing region in the image can be en\u0002closed by bounding rectangles and focus on e\u000ecient group\u0002ing of the enclosing rectangles at successive lev els to yield\r\na balanced search tree that is optimized for disk accesses.\r\nThe search for ob ject queries in such index structures in\u0002volv es \fnding all database rectangles that ov erlap a query\r\nrectangle. Under changes in pose, the bounding rectangles\r\nundergo considerable change including translation, so that\r\nthe search using these index structures no longer yields a\r\nmatch to the query. Moreov er, when the ob ject query con\u0002sists of multiple regions, the spatial layout of regions is\r\nnot adequately taken in to account through bounding rect\u0002angles. Hence traditional index structures are not directly\r\napplicable for the general ob ject localization problem unless\r\nthe spatial layout of regions can be modeled.\r\nIn this paper, we present a nov el geometric index struc\u0002ture called the interval hash tree for locating multi-region\r\nob ject queries in image databases. Speci\fcally, the interval\r\nhash tree (IHT) is a tw o-w ay interval tree in which the la y\u0002out of regions in images of a database is represented in an\r\na\u000ene-invarian t fashion through a\u000ene intervals computed\r\nwith respect to chosen basis features. Localizing ob ject\r\nqueries in volv es represen ting the query a\u000ene intervals also\r\nas an in terval hash tree, and \fnding database intervals that\r\nov erlap with the a\u000ene intervals represented at each node of\r\nthe query IHT through careful tree exploration. The ov er- all goal of such indexing is to accumulate evidence for the\r\nmost common occurrence of basis features.\r\nThe interval hash tree has sev eral desirable properties.\r\nFirst, by representing ob ject layout information using a\u000ene\r\nintervals rather than bounding rectangles, the localization\r\nis made a\u000ene-invariant. Secondly, by building su\u000ecient re\u0002dundancy in the representation of a\u000ene intervals, tolerance\r\nto occlusions and background clutter is achieved. Third, us\u0002ing a balanced binary search tree based on median-based\r\npartitioning of a\u000ene space, the search for o v erlapping inter\u0002vals for a single query interval is made e\u000ecient. Finally, by\r\nconsolidating the search for query a\u000ene intervals through\r\nquery IHT, repeated exploration of database IHT can be\r\navoided.\r\n2. Localizing ob jects through region hash\u0002ing\r\nTo motivate the need for IHT, we brie\ry review the tech\u0002nique of representing and recognizing ob jects.\r\nIt is well-kno wn that the shape of a 2d ob ject can be de\u0002scribed in an a\u000ene-invarian t fashion by recording the a\u000ene\r\ncoordinates of features within ob ject computed with respect\r\nto a triple of basis features chosen as an ob ject-based refer\u0002ence frame[6]. A simpler yet e\u000bective way of describing their\r\nrelativ e location is by recording the a\u000ene interval, i.e., the\r\n2d-interval in which a\u000ene coordinates of features lie w.r.t to\r\nthe c hosen basis triple. Since such intervals bound the a\u000ene\r\ncoordinates, they are also a\u000ene-invariant. The uniqueness\r\nof the a\u000ene intervals is not guaranteed though, since tw o di\u000berent distributions of a\u000ene coordinates could be bound\r\nb y the same interval. However, the c hance of this can be\r\nminimized if we accumulate evidence from multiple ob ject\r\nregion pairs. Thus one way of recognizing or localizing an\r\nob ject is to hash for, i.e., \fnd evidence for as many common\r\na\u000ene intervals betw een the query regionpairs and region\r\npairs in candidate images, in a manner similar to geomet\u0002ric hashing[6] and is termed region hashing. In practice, to\r\n0-7695-0695-X/00 $10.00 (c) 2000 IEEE \r\nAuthorized licensed use limited to: KnowledgeGate from IBM Market Insights. Downloaded on July 20, 2009 at 17:59 from IEEE Xplore. Restrictions apply. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bff09df1-5621-4899-9629-dd3b1d50a780/images/555a371a-fc01-4172-b553-a92afd982fb0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041628Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=206bbadf7796176ec81f9a06cd55ad46056cf7247743f29464ac97f1a8d143a0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 834
      },
      {
        "segments": [
          {
            "segment_id": "a4f56ca8-e662-4921-83bd-070693725bbe",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 2,
            "page_width": 612,
            "page_height": 792,
            "content": "accoun t for occlusions and region segmentation errors that\r\nshrink the image a\u000ene intervals to become a subset of the\r\ncorresponding ob ject a\u000ene intervals, region hashing actu\u0002ally looks for ov erlap rather than exact registration of a\u000ene\r\nintervals.\r\nIn summary, to localize a multi-region query ob ject us\u0002ing region hashing, we represen t the spatial layout of region\r\npairs on query ob ject as well as images of the database\r\nthrough a\u000ene in tervals, and look for as many database\r\na\u000ene intervals that o v erlap with query a\u000ene intervals. F or each such common interval found, the count of the associ\u0002ated image basis feature set can be updated. A t the end\r\nof this process, the top hit image basis features and their\r\nassociated enclosing image regions can be declared as cor\u0002responding to query basis feature set and the associated\r\nquery region pairs, thus localizing the query ob ject.\r\n3. In terval Hash T rees\r\nF rom the abov e formulation, it is clear that the most\r\ncomputationally intensiv e part of ob ject localization is the\r\nprocess of determining database intervals that o v erlap with\r\nquery a\u000ene intervals. We now present an index structure\r\ncalled the interval hash tree to address the abov e problem.\r\nAn interval hash tree(IHT) is a t w o-dimensional interval\r\ntree. It extends the concept of 1d interval trees kno wn in\r\ncomputational geometry [2, 3] to organizing a set of 2d in\u0002tervals as balanced binary search trees. Speci\fcally, it uses\r\nthe \frst coordinate of intervals, namely, the x coordinate\r\nand organizes the x-end points of in tervals as a regular in\u0002terval tree (called x-in terval tree)1 The cen tral branch of\r\nthe this tree at each node is modi\fed to be another interval\r\ntree, no w on the secondcoordinate, i.e., the y-coordinate\r\n(called a y-interval tree).\r\nT o construct an in terval hash tree, a\u000ene intervals are\r\nsorted based on the \frst coordinate (i.e. the \u000b coordinate).\r\nLet the sorted set of intervals be denoted by I. Let Xmid\r\nbe the median end poin t in set I. We split the in terval I\r\nin to three subsets, namely, Ixlef t, Ixright, and Ixmid, to\r\ncorrespond to the set of in tervals whose left and righ t x- end points are to left of Xmid, to the right of Xmid, and\r\nwhose left x-end point is to the left and right x-end points are to the righ t of Xmid respectiv ely. A bounding rect\u0002angle for the a\u000ene coordinates spanned b y the set I can\r\nadditionally be included for ease of searching at the node.\r\nThe interval Ixmid then forms the central branch of a node\r\nof the x-interval tree and the Ixlef t and Ixright form left\r\nand right subtrees. Eac h of the left and right subtrees are\r\nrecursiv ely constructed in a similar manner by repeatedly\r\npicking their median x-end point and splitting into the three\r\nsubsets explained abov e. The central branc h of each node\r\nof the x-interval tree is similarly organized as a y-interval\r\ntree using the y-end poin ts of the set Ixmid. The corre- sponding set Lybelow to Ixlef t is sorted in increasing order\r\n1F or ease of notation w e refer to the coordinates as x and\r\ny coordinates. In the case of a\u000ene intervals for region hash\u0002ing, the x-coordinate corresponds to the \u000b coordinate, and the\r\ny-coordinate corresponds to the \f coordinate. F or other appli\u0002cations there may be other coordinate interpretations.\r\nwhile Lyabove is sorted in decreasing order to enable range\r\nsearching. Note that unlike in the case of non-leaf nodes of\r\nthe x-interval tree, the data associated with a\u000ene intervals\r\nis listed under the central branch of a node in the y-interval\r\ntree. In the case of region hashing, this data constitutes the\r\nimage index,the region index, and the basis triple index,\r\nnecessary for query localization.\r\nFigure 1c depicts an interval hash tree for a set of a\u000ene\r\nintervals. These in tervals are obtained b y pairing region\r\nmarked 1 on the ob ject depicted in Figure 1a w.r.t. to all\r\nother marked regions on the ob ject. The a\u000ene in tervals\r\nthemselves are indicated in Figure 1b. Here xlij,xrij stand\r\nfor the left and right end points of the a\u000ene in terval of\r\nregion j computed w.r.t. a basis triple in region i (in this\r\ncase, the middle basis triple on region 1's contour). The\r\nempty branches of the tree are denoted by circles and single\r\ninterval branches by the interval itself. Although the lists\r\nIxmid and Iymid are indicated at the nodes for purpose of\r\nillustration, only the median point Xmid (Ymid) and the\r\nbounding rectangle of the intervals under a tree node are\r\nstored at each node. For a leaf node, this reduces to the\r\na\u000ene interval itself.\r\n3.1. Searching In terval hash trees\r\nWe now address the problem of searching for all database\r\nintervals that ov erlap with a given set of query intervals.\r\nThe basic idea is to organize the a\u000ene intervals of the query\r\nalso as an interval hash tree, and perform a careful simul\u0002taneous search of database and query IHT in a way that\r\nmaintains the property that a database interval that o ver\u0002laps more than one query interval is disco vered only once.\r\nTo perform this search, we use a version of the IHT con\u0002struction that retains the bounding box of all a\u000ene intervals\r\nunder a tree node (x or y-tree node) as part of the node in\u0002formation. Using this additional piece of information and\r\na pre-order trav ersal at both the x and y query IHT levels,\r\nnodes of the query IHT are successively searched against the\r\nnodes of the database IHT. If we denote the x and y-interval\r\ntrees at the current query node by Vqx and Vqy), then the\r\norder of exploration is Vqx > fVqy ; Lcy(Vqy ); Rcy(Vqy)g\r\nfollowed b y Lcx(Vqx) and Rcx(Vqx). F or each suc h ex- ploration against a database IHT node Vd, w e use the\r\nbounding rectangle range (Qlx; Qrx; Qby; Qay) to deter\u0002mine which of the subtrees to explore. F or example, if\r\nQlx < Xmid(Vxd) < Qly then matching intervals can be\r\nfound in either the y-interval tree under Vxd i.e. Vyd, or the\r\nleft and right subtrees Lcx(Vxd) and Rcx(Vd) of Vxd. Specif\u0002ically , the algorithm uses the range (Qby; Qay), and the\r\nrelativ e placement of the median point of query y-interval\r\ntree Y mid(Vqy) w.r.t the median point Y mid(Vyd) of the\r\ndatabase node to decide the order of exploration. F or ex\u0002ample if Qby \u0014 Y mid(Vyd) \u0014 Qay, and Iymid(V qy) >\r\nIymid(V yd), then b y w alking along Lybelow(V qy) and\r\nlyabove(Vyd) from their top-most end point, we can report\r\nall database intervals that contain the current query end\r\npoint.\r\n2\r\n0-7695-0695-X/00 $10.00 (c) 2000 IEEE \r\nAuthorized licensed use limited to: KnowledgeGate from IBM Market Insights. Downloaded on July 20, 2009 at 17:59 from IEEE Xplore. Restrictions apply. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bff09df1-5621-4899-9629-dd3b1d50a780/images/a4f56ca8-e662-4921-83bd-070693725bbe.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041628Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0f0fba3b56a3eef8e6de20ef5780e025ce2fe0db9405cdc74f3b0194226f8cde",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 1169
      },
      {
        "segments": [
          {
            "segment_id": "a4f56ca8-e662-4921-83bd-070693725bbe",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 2,
            "page_width": 612,
            "page_height": 792,
            "content": "accoun t for occlusions and region segmentation errors that\r\nshrink the image a\u000ene intervals to become a subset of the\r\ncorresponding ob ject a\u000ene intervals, region hashing actu\u0002ally looks for ov erlap rather than exact registration of a\u000ene\r\nintervals.\r\nIn summary, to localize a multi-region query ob ject us\u0002ing region hashing, we represen t the spatial layout of region\r\npairs on query ob ject as well as images of the database\r\nthrough a\u000ene in tervals, and look for as many database\r\na\u000ene intervals that o v erlap with query a\u000ene intervals. F or each such common interval found, the count of the associ\u0002ated image basis feature set can be updated. A t the end\r\nof this process, the top hit image basis features and their\r\nassociated enclosing image regions can be declared as cor\u0002responding to query basis feature set and the associated\r\nquery region pairs, thus localizing the query ob ject.\r\n3. In terval Hash T rees\r\nF rom the abov e formulation, it is clear that the most\r\ncomputationally intensiv e part of ob ject localization is the\r\nprocess of determining database intervals that o v erlap with\r\nquery a\u000ene intervals. We now present an index structure\r\ncalled the interval hash tree to address the abov e problem.\r\nAn interval hash tree(IHT) is a t w o-dimensional interval\r\ntree. It extends the concept of 1d interval trees kno wn in\r\ncomputational geometry [2, 3] to organizing a set of 2d in\u0002tervals as balanced binary search trees. Speci\fcally, it uses\r\nthe \frst coordinate of intervals, namely, the x coordinate\r\nand organizes the x-end points of in tervals as a regular in\u0002terval tree (called x-in terval tree)1 The cen tral branch of\r\nthe this tree at each node is modi\fed to be another interval\r\ntree, no w on the secondcoordinate, i.e., the y-coordinate\r\n(called a y-interval tree).\r\nT o construct an in terval hash tree, a\u000ene intervals are\r\nsorted based on the \frst coordinate (i.e. the \u000b coordinate).\r\nLet the sorted set of intervals be denoted by I. Let Xmid\r\nbe the median end poin t in set I. We split the in terval I\r\nin to three subsets, namely, Ixlef t, Ixright, and Ixmid, to\r\ncorrespond to the set of in tervals whose left and righ t x- end points are to left of Xmid, to the right of Xmid, and\r\nwhose left x-end point is to the left and right x-end points are to the righ t of Xmid respectiv ely. A bounding rect\u0002angle for the a\u000ene coordinates spanned b y the set I can\r\nadditionally be included for ease of searching at the node.\r\nThe interval Ixmid then forms the central branch of a node\r\nof the x-interval tree and the Ixlef t and Ixright form left\r\nand right subtrees. Eac h of the left and right subtrees are\r\nrecursiv ely constructed in a similar manner by repeatedly\r\npicking their median x-end point and splitting into the three\r\nsubsets explained abov e. The central branc h of each node\r\nof the x-interval tree is similarly organized as a y-interval\r\ntree using the y-end poin ts of the set Ixmid. The corre- sponding set Lybelow to Ixlef t is sorted in increasing order\r\n1F or ease of notation w e refer to the coordinates as x and\r\ny coordinates. In the case of a\u000ene intervals for region hash\u0002ing, the x-coordinate corresponds to the \u000b coordinate, and the\r\ny-coordinate corresponds to the \f coordinate. F or other appli\u0002cations there may be other coordinate interpretations.\r\nwhile Lyabove is sorted in decreasing order to enable range\r\nsearching. Note that unlike in the case of non-leaf nodes of\r\nthe x-interval tree, the data associated with a\u000ene intervals\r\nis listed under the central branch of a node in the y-interval\r\ntree. In the case of region hashing, this data constitutes the\r\nimage index,the region index, and the basis triple index,\r\nnecessary for query localization.\r\nFigure 1c depicts an interval hash tree for a set of a\u000ene\r\nintervals. These in tervals are obtained b y pairing region\r\nmarked 1 on the ob ject depicted in Figure 1a w.r.t. to all\r\nother marked regions on the ob ject. The a\u000ene in tervals\r\nthemselves are indicated in Figure 1b. Here xlij,xrij stand\r\nfor the left and right end points of the a\u000ene in terval of\r\nregion j computed w.r.t. a basis triple in region i (in this\r\ncase, the middle basis triple on region 1's contour). The\r\nempty branches of the tree are denoted by circles and single\r\ninterval branches by the interval itself. Although the lists\r\nIxmid and Iymid are indicated at the nodes for purpose of\r\nillustration, only the median point Xmid (Ymid) and the\r\nbounding rectangle of the intervals under a tree node are\r\nstored at each node. For a leaf node, this reduces to the\r\na\u000ene interval itself.\r\n3.1. Searching In terval hash trees\r\nWe now address the problem of searching for all database\r\nintervals that ov erlap with a given set of query intervals.\r\nThe basic idea is to organize the a\u000ene intervals of the query\r\nalso as an interval hash tree, and perform a careful simul\u0002taneous search of database and query IHT in a way that\r\nmaintains the property that a database interval that o ver\u0002laps more than one query interval is disco vered only once.\r\nTo perform this search, we use a version of the IHT con\u0002struction that retains the bounding box of all a\u000ene intervals\r\nunder a tree node (x or y-tree node) as part of the node in\u0002formation. Using this additional piece of information and\r\na pre-order trav ersal at both the x and y query IHT levels,\r\nnodes of the query IHT are successively searched against the\r\nnodes of the database IHT. If we denote the x and y-interval\r\ntrees at the current query node by Vqx and Vqy), then the\r\norder of exploration is Vqx > fVqy ; Lcy(Vqy ); Rcy(Vqy)g\r\nfollowed b y Lcx(Vqx) and Rcx(Vqx). F or each suc h ex- ploration against a database IHT node Vd, w e use the\r\nbounding rectangle range (Qlx; Qrx; Qby; Qay) to deter\u0002mine which of the subtrees to explore. F or example, if\r\nQlx < Xmid(Vxd) < Qly then matching intervals can be\r\nfound in either the y-interval tree under Vxd i.e. Vyd, or the\r\nleft and right subtrees Lcx(Vxd) and Rcx(Vd) of Vxd. Specif\u0002ically , the algorithm uses the range (Qby; Qay), and the\r\nrelativ e placement of the median point of query y-interval\r\ntree Y mid(Vqy) w.r.t the median point Y mid(Vyd) of the\r\ndatabase node to decide the order of exploration. F or ex\u0002ample if Qby \u0014 Y mid(Vyd) \u0014 Qay, and Iymid(V qy) >\r\nIymid(V yd), then b y w alking along Lybelow(V qy) and\r\nlyabove(Vyd) from their top-most end point, we can report\r\nall database intervals that contain the current query end\r\npoint.\r\n2\r\n0-7695-0695-X/00 $10.00 (c) 2000 IEEE \r\nAuthorized licensed use limited to: KnowledgeGate from IBM Market Insights. Downloaded on July 20, 2009 at 17:59 from IEEE Xplore. Restrictions apply. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bff09df1-5621-4899-9629-dd3b1d50a780/images/a4f56ca8-e662-4921-83bd-070693725bbe.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041628Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0f0fba3b56a3eef8e6de20ef5780e025ce2fe0db9405cdc74f3b0194226f8cde",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 1169
      },
      {
        "segments": [
          {
            "segment_id": "cd60c850-b9a2-46d0-86bc-7e8b4e9dc6b3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 3,
            "page_width": 612,
            "page_height": 792,
            "content": "−20 −15 −10 −5 0 5 −25\r\n−20\r\n−15\r\n−10\r\n−5\r\n0\r\n5\r\nalpha\r\nbeta\r\naffine intervals for region pairs (1 1 magenta) (1 2 red) (1 3 green) (1 4 blue) (1 5 cyan)\r\nFigure 1: Illustration of a\u000ene in terv alsand their corresponding interval hash tree. (a) regions on an example\r\nob ject (b) The a\u000ene interv als of the spatial lay out of all regions w.r.t. region 1 using the middle basis triple from\r\nthose on the boundary curve of region 1. (c) In terval hash tree for the a\u000ene intervals in (b).\r\nFigure 2: Illustration of IHT search using a set of query a\u000ene interv als. (a) The a\u000ene interv als of database shown\r\nin red. A\u000ene interv als of a sample query ob ject are shown in blue. The orthogonal pro jections used to form the\r\nquery interval hash tree are labeled. (b) The interval hash tree of the query in (a). The database IHT in this\r\nexample is the one shown in \fgure 1c.\r\nS.No. Query regions Query intervals P ercentage database touched\r\na\u000ene intervals IHT nodes Images\r\n1. 5 200 14.5 12.3 2.3\r\n2. 6 144 13.9 23.4 4.3\r\n3. 4 64 13.3 15.2 1.2\r\n4. 9 324 25.4 34.5 5.7\r\n5. 7 196 17.9 16.3 9.8\r\n6. 10 400 27.4 44.2 15.4\r\nTable 1: Illustration of e\u000bectiveness of indexing using IHT. The complexity of the query is indicated by the number\r\nof query regions. Here four basis features per query region were used to generate the query a\u000ene interv als. The\r\nfraction of the database touched is shown in terms of a\u000ene intervals touched, the IHT nodes actually visited and\r\nthe images indexed.\r\n3\r\n0-7695-0695-X/00 $10.00 (c) 2000 IEEE \r\nAuthorized licensed use limited to: KnowledgeGate from IBM Market Insights. Downloaded on July 20, 2009 at 17:59 from IEEE Xplore. Restrictions apply. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bff09df1-5621-4899-9629-dd3b1d50a780/images/cd60c850-b9a2-46d0-86bc-7e8b4e9dc6b3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041628Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6423aaf879124bd409691ee16ef7c9b5792a0d753acf9db6b66c7802cbfe1633",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 310
      },
      {
        "segments": [
          {
            "segment_id": "f53b2782-e88d-421f-9565-f88848053cc5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 4,
            "page_width": 612,
            "page_height": 792,
            "content": "In addition, we can report,without further searc h, this\r\nov erlap to hold for all query intervals in Vxq whose bottom\u0002end points are belo w the curren t query end poin t. This\r\ncritical step avoids the repetitious search for multiple query\r\nintervals. We illustrate IHT search through an example in Figure 2.\r\nThe database IHT is shown in Figure 1c. The correspond\u0002ing a\u000ene in tervals are redra wn in red in Figure 2a. F or\r\nsearching in this tree, we select a query whose a\u000ene inter- vals are as shown in Figure 2a colored in blue. The corre\u0002sponding query IHT is shown in Figure 2b. A node number\r\nis assignedto eac h node in the tw o trees to illustrate the\r\norder of navigation. The order in which nodes will be exam\u0002ined and the ov erlap disco v ered is sho wn in Figure 2c.We\r\nencourage the reader to walk through this example using\r\nthe algorithm to con\frm the result. Note that the left or\r\nthe righ t subtree branches are left out during some recur\u0002siv e trav ersals (eg. (q2,v7) (q2,v6) but not (q2,v5)). Also\r\nnote that the ov erlap of region-pair (pt,14) is automatically\r\nderiv ed from the ov erlap of region pair (ps,14) without ex\u0002plicit search. Note also that all ov erlapping in tervals are\r\nfound by this process.\r\n3.2 Region hashing using IHT\r\nSince the purpose of designing the IHT was to demonstrate\r\nits use for query localization, w e evaluated the indexing\r\nperformance of IHT for use in region hashing. The exper\u0002iments were conducted on a database of images assembled\r\nfrom multiple sources. These include: the MPEG-7 test\r\ndata set (4000 images), the HIPS dataset from University\r\nof Michigan (200 images), the COREL database (500 im\u0002ages), the Kodak PhotoCD database (500 images), and a\r\nhome-brewed dataset (400 images) assembled for 2d and\r\n3d ob jects depicted in the presence of occlusion and clutter\r\nunder indoor \rorescent and tungsten light sources. Some of\r\nthe database images were obtained by placing ob jects from\r\none collection (eg. HIPS collection) in di\u000berent settings to\r\ngenerate images. Eac h of the images of the database, and\r\nthe query ob jects underwent similar image processing and\r\nfeature extraction to generate the a\u000ene intervals needed\r\nfor IHT. Speci\fcally, regions in images of the database and\r\nqueries were extracted using color information. We adopted\r\nan approach based on surface color classes to detect and\r\nrecognize color regions as described in[10, 9]. Next, images\r\nare processed using an edge detector to form curves, which\r\nare segmented at zero crossings to generate corner features.\r\nThe enclosing region information is associated with the cor- ners. T riples of adjacent corner features are used to form\r\nbasis sets (using both directions of curv e ordering). F or\r\neach distinct pair of regions on the ob ject, a\u000ene coordi\u0002nates of corner features on curves on the boundaries of one\r\nregion are computed w.r.t each basis triple on the other re\u0002gion. The a\u000ene intervals are used to construct a database\r\nIHT. Similar processing is done on the query features to\r\ngenerate a query IHT. Each node of the query IHT w as used to search for ov erlapping intervals in the database IHT\r\nas indicated in Section . A histogram of the indexed basis\r\ntriples is tak en and the maxima noted. The basis triples,\r\nand their associated images corresponding to the peaks of\r\nthe basis histogram are taken as potential locations where\r\nthe query ob ject is present.\r\n4. Results\r\nWe now report on the indexing performance of IHT in\r\ncomparison with region hashing without an index structure.\r\nFirst, we show that the use of index structure results in a\r\nsmall fraction of the database being examined as compared\r\nto linear search. Next, w e sho w that the indexing time\r\nperformance is not signi\fcantly impacted by paging issues\r\nbecause the size of ov erall structure for most database sizes,\r\nis small enough to \ft in main memory. E\u000bect of indexing using IHT\r\nTo evaluate the e\u000bect of indexing, we searched for a total\r\nof 200 ob ject queries against the 5600 image database and\r\nnoted the fraction of the database touched by indexing. The\r\nfraction of database touched was noted using three param\u0002eters, namely, the percentage of a\u000ene intervals that were\r\nfound to ov erlap, the percentage of IHT nodes touched, and\r\nthe percentage of images indexed. The result for a few sam\u0002ple queries is listed in Table 1. Here the query complexity\r\nis indicated by its number of regions. Also, four basis fea\u0002tures were used to generate the query a\u000ene intervals. As\r\ncan be seen from Column 6 of this table, only a small frac\u0002tion of the images are touched as against linear search that\r\nw ould examine all the images for possible matches. Also,\r\nfrom Column 4, w e notice that the fraction of a\u000ene in\u0002tervals touched though larger than the number of images\r\ntouched, is still small indicating that only a small number\r\nof image locations are examined as potential candidates for containing the query ob ject. Finally, the number of IHT\r\nnodes visited remains less than 50% indicating the worst\u0002case searc h scenario in IHT is rarely reached.\r\nE\u000bect of indexing on precision and recall\r\nSince fewer database images are touched one can expect\r\nthat the precision using IHT indexing would be higher.\r\nF alse positives may still be present among the indexed im\u0002ages since the discov ery of o verlapping a\u000ene intervals does\r\nnot guarantee the evidence for an ob ject. As for recall, w e note that since all ov erlapping database intervals are\r\nfound during search, there should be no false negatives in\r\ntheory . In practice, ho w ever, depending on the manner\r\nin which a\u000ene intervals are computed (using one or more\r\nbasis triples per region pair), the database a\u000ene intervals may not come up as a match to query a\u000ene intervals if\r\nthere are no corresponding basis features. F alse negatives are also possible since the region hashing technique ranks\r\nthe indexed images w.r.t their relevance to the query, and\r\ncan prune the matches returned by indexing. To evaluate\r\nthe e\u000bect of IHT indexing on the precision and recall of\r\n4\r\n0-7695-0695-X/00 $10.00 (c) 2000 IEEE \r\nAuthorized licensed use limited to: KnowledgeGate from IBM Market Insights. Downloaded on July 20, 2009 at 17:59 from IEEE Xplore. Restrictions apply. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bff09df1-5621-4899-9629-dd3b1d50a780/images/f53b2782-e88d-421f-9565-f88848053cc5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041628Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=05eddb991ecaed5939a894bc64a8a607a714a7c920f4bc2518e5c7a722291646",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 1071
      },
      {
        "segments": [
          {
            "segment_id": "f53b2782-e88d-421f-9565-f88848053cc5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 4,
            "page_width": 612,
            "page_height": 792,
            "content": "In addition, we can report,without further searc h, this\r\nov erlap to hold for all query intervals in Vxq whose bottom\u0002end points are belo w the curren t query end poin t. This\r\ncritical step avoids the repetitious search for multiple query\r\nintervals. We illustrate IHT search through an example in Figure 2.\r\nThe database IHT is shown in Figure 1c. The correspond\u0002ing a\u000ene in tervals are redra wn in red in Figure 2a. F or\r\nsearching in this tree, we select a query whose a\u000ene inter- vals are as shown in Figure 2a colored in blue. The corre\u0002sponding query IHT is shown in Figure 2b. A node number\r\nis assignedto eac h node in the tw o trees to illustrate the\r\norder of navigation. The order in which nodes will be exam\u0002ined and the ov erlap disco v ered is sho wn in Figure 2c.We\r\nencourage the reader to walk through this example using\r\nthe algorithm to con\frm the result. Note that the left or\r\nthe righ t subtree branches are left out during some recur\u0002siv e trav ersals (eg. (q2,v7) (q2,v6) but not (q2,v5)). Also\r\nnote that the ov erlap of region-pair (pt,14) is automatically\r\nderiv ed from the ov erlap of region pair (ps,14) without ex\u0002plicit search. Note also that all ov erlapping in tervals are\r\nfound by this process.\r\n3.2 Region hashing using IHT\r\nSince the purpose of designing the IHT was to demonstrate\r\nits use for query localization, w e evaluated the indexing\r\nperformance of IHT for use in region hashing. The exper\u0002iments were conducted on a database of images assembled\r\nfrom multiple sources. These include: the MPEG-7 test\r\ndata set (4000 images), the HIPS dataset from University\r\nof Michigan (200 images), the COREL database (500 im\u0002ages), the Kodak PhotoCD database (500 images), and a\r\nhome-brewed dataset (400 images) assembled for 2d and\r\n3d ob jects depicted in the presence of occlusion and clutter\r\nunder indoor \rorescent and tungsten light sources. Some of\r\nthe database images were obtained by placing ob jects from\r\none collection (eg. HIPS collection) in di\u000berent settings to\r\ngenerate images. Eac h of the images of the database, and\r\nthe query ob jects underwent similar image processing and\r\nfeature extraction to generate the a\u000ene intervals needed\r\nfor IHT. Speci\fcally, regions in images of the database and\r\nqueries were extracted using color information. We adopted\r\nan approach based on surface color classes to detect and\r\nrecognize color regions as described in[10, 9]. Next, images\r\nare processed using an edge detector to form curves, which\r\nare segmented at zero crossings to generate corner features.\r\nThe enclosing region information is associated with the cor- ners. T riples of adjacent corner features are used to form\r\nbasis sets (using both directions of curv e ordering). F or\r\neach distinct pair of regions on the ob ject, a\u000ene coordi\u0002nates of corner features on curves on the boundaries of one\r\nregion are computed w.r.t each basis triple on the other re\u0002gion. The a\u000ene intervals are used to construct a database\r\nIHT. Similar processing is done on the query features to\r\ngenerate a query IHT. Each node of the query IHT w as used to search for ov erlapping intervals in the database IHT\r\nas indicated in Section . A histogram of the indexed basis\r\ntriples is tak en and the maxima noted. The basis triples,\r\nand their associated images corresponding to the peaks of\r\nthe basis histogram are taken as potential locations where\r\nthe query ob ject is present.\r\n4. Results\r\nWe now report on the indexing performance of IHT in\r\ncomparison with region hashing without an index structure.\r\nFirst, we show that the use of index structure results in a\r\nsmall fraction of the database being examined as compared\r\nto linear search. Next, w e sho w that the indexing time\r\nperformance is not signi\fcantly impacted by paging issues\r\nbecause the size of ov erall structure for most database sizes,\r\nis small enough to \ft in main memory. E\u000bect of indexing using IHT\r\nTo evaluate the e\u000bect of indexing, we searched for a total\r\nof 200 ob ject queries against the 5600 image database and\r\nnoted the fraction of the database touched by indexing. The\r\nfraction of database touched was noted using three param\u0002eters, namely, the percentage of a\u000ene intervals that were\r\nfound to ov erlap, the percentage of IHT nodes touched, and\r\nthe percentage of images indexed. The result for a few sam\u0002ple queries is listed in Table 1. Here the query complexity\r\nis indicated by its number of regions. Also, four basis fea\u0002tures were used to generate the query a\u000ene intervals. As\r\ncan be seen from Column 6 of this table, only a small frac\u0002tion of the images are touched as against linear search that\r\nw ould examine all the images for possible matches. Also,\r\nfrom Column 4, w e notice that the fraction of a\u000ene in\u0002tervals touched though larger than the number of images\r\ntouched, is still small indicating that only a small number\r\nof image locations are examined as potential candidates for containing the query ob ject. Finally, the number of IHT\r\nnodes visited remains less than 50% indicating the worst\u0002case searc h scenario in IHT is rarely reached.\r\nE\u000bect of indexing on precision and recall\r\nSince fewer database images are touched one can expect\r\nthat the precision using IHT indexing would be higher.\r\nF alse positives may still be present among the indexed im\u0002ages since the discov ery of o verlapping a\u000ene intervals does\r\nnot guarantee the evidence for an ob ject. As for recall, w e note that since all ov erlapping database intervals are\r\nfound during search, there should be no false negatives in\r\ntheory . In practice, ho w ever, depending on the manner\r\nin which a\u000ene intervals are computed (using one or more\r\nbasis triples per region pair), the database a\u000ene intervals may not come up as a match to query a\u000ene intervals if\r\nthere are no corresponding basis features. F alse negatives are also possible since the region hashing technique ranks\r\nthe indexed images w.r.t their relevance to the query, and\r\ncan prune the matches returned by indexing. To evaluate\r\nthe e\u000bect of IHT indexing on the precision and recall of\r\n4\r\n0-7695-0695-X/00 $10.00 (c) 2000 IEEE \r\nAuthorized licensed use limited to: KnowledgeGate from IBM Market Insights. Downloaded on July 20, 2009 at 17:59 from IEEE Xplore. Restrictions apply. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bff09df1-5621-4899-9629-dd3b1d50a780/images/f53b2782-e88d-421f-9565-f88848053cc5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041628Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=05eddb991ecaed5939a894bc64a8a607a714a7c920f4bc2518e5c7a722291646",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 1071
      },
      {
        "segments": [
          {
            "segment_id": "54fcec2d-a055-4c09-b008-6ef4e0c32ca6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 5,
            "page_width": 612,
            "page_height": 792,
            "content": "Query Query Occurrences Occurences\r\nin top 20 pairs\r\n1. 17 14\r\n2. 8 5\r\n3. 11 7\r\n4. 16 10\r\n5. 13 9\r\n6. 2 2\r\nTable 2: Illustration of precision and recall using IHT\r\nin region hashing.\r\nDatabase size Avg. # regions a\u000ene intervals IHT nodes\r\n100 13.6 21496 1849\r\n500 17.8 88420 6752\r\n1000 19.56 362454 9122\r\n2000 24.3 980980 12239\r\n5600 26.5 3932600 48315\r\nTable 3: Illustration of storage size of IHT.\r\nregion hashing, we noted the number of query occurrences\r\nin the database for each query tested. We also recorded\r\nthe n umber of indexed occurrences using IHT in the top 20\r\nmatches declared. The result for a few sample queries is\r\nindicated in Table 2. As can be seen, the use of IHT does\r\nnot adversely a\u000bect the precision and recall performance of\r\nregion hashing.\r\nStorage performance\r\nT o estimate the amount of storage used b y the index\r\nstructure, we gradually increased the size of our database\r\nfrom 100 images onw ards until the en tire 5600 image\r\ndatabase w as populated in the IHT. The result is shown\r\nin Table 3. As can be seen, the number of a\u000ene intervals\r\ngrows quadratically with the number of regions in images,\r\nand linearly with the number of images. The number of IHT\r\nnodes remains a few Mbytes, a size small enough to avoid\r\nexcessive paging problems relating to I/O. As database size\r\nbecomes increasingly larger, how ev er, w e expect it to face\r\npaging problems.\r\nIndexing time performance\r\nEven though fewer images are indexed using IHT, this\r\nw ould not be an adv an tageunless the actual time per\u0002formance of IHT indexing w as good as w ell. As men- tioned abov e, the size of the interval hash tree for even the\r\nlarge collection of images we tested was a few megabytes,\r\nmaking it possible to index images without any paging\u0002related I/O problems. The av erage indexing time using a\r\nC/C++ implementation on a Windows NT platform (200\r\nMhz CPU and 250Mbytes paging size) involv ed processing\r\nof the query features which was about 0.5 second, followed\r\nby the retrieval which was about 1.2 seconds.\r\n5. Conclusions\r\nIn this paper we hav e presented a nov el index structure\r\ncalled the interval hash tree for localizing 2d ob ject queries\r\nin image databases. We ha v e sho wn b y using this index\r\nstructure, ob jects can be localized under changes in pose,\r\nocclusions and in the presence of scene clutter. We hav e\r\nsho wn that the number of images that are searched is dra\u0002matically reduced by the use of interval hash trees.\r\nReferences\r\n[1] N. Beckmann et al. The r\u0003\r\n-tree: An e\u000ecient and ro\u0002bust access method for points and rectangles. In Proc. ACM SIGMOD, pages 322{331, 1990.\r\n[2] T.H. Cormen, C.E. Lieserson, and R.L. Rivest. In\u0002troduction to A lgorithms. New York: McGraw Hill,\r\nCambridge: MIT Press, 1990.\r\n[3] M. de Berg, M. van Kreveld, M. Overmars, and\r\nO. Schwarzk opf. Computational Geometry. Berlin:\r\nSpringer Verlag, 1997.\r\n[4] A. Guttman. R-trees: A dynamic index structure for\r\nspatial searc hing. In Proc. ACM SIGMOD, pages 47{\r\n57, 1984.\r\n[5] N. Katayama and S. Satoh. The sr tree: An in\u0002dex structure for high-dimensional nearest neighbor\r\nqueries. In Proc. ACM SIGMOD, pages 369{380, 1997.\r\n[6] Y. Lamdan and H.J. Wolfson. Geometric hashing: A\r\ngeneral and e\u000ecient model-based recognition scheme.\r\nIn Pr oceedings of the International Conference on Computer Vision, pages 218{249, 1988.\r\n[7] J.T. Robinson. The k-d-b-tree: A search structure\r\nfor large multidimensional dynamic indexes. In Pr oc.\r\nACM SIGMOD, pages 10{18, 1981.\r\n[8] T. Sellis, N. Roussopoulos, and C. Faloutsos. The\r\nr+\r\n-tree: A dynamic index for multi-dimensional ob\u0002jects. In Pr oceedings of Conf. on Very Large Databases, pages 507{518, 1987.\r\n[9] T. Syeda-Mahmood. Indexing of topics using foils. In\r\nIEEE Conf. on Computer Vision and Pattern R ecog\u0002nition, 2000.\r\n[10] T.F. Syeda-Mahmood and Y-Q. Cheng. Indexing col\u0002ored surfaces in images. In Proceedings Int. Conf. on\r\nPattern Recognition, 1996.\r\n[11] D.A. White and R. Jain. Similarity indexing with the\r\nss-tree. In Proc. 12th Intl. Conf. on Data Engineering, pages 516{523, 1996.\r\n5\r\n0-7695-0695-X/00 $10.00 (c) 2000 IEEE \r\nAuthorized licensed use limited to: KnowledgeGate from IBM Market Insights. Downloaded on July 20, 2009 at 17:59 from IEEE Xplore. Restrictions apply. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bff09df1-5621-4899-9629-dd3b1d50a780/images/54fcec2d-a055-4c09-b008-6ef4e0c32ca6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041628Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=92f867ca074134a51807fb6ab5cac26778d54dde9dc536aa2b279c185f0666d6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 718
      },
      {
        "segments": [
          {
            "segment_id": "54fcec2d-a055-4c09-b008-6ef4e0c32ca6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 5,
            "page_width": 612,
            "page_height": 792,
            "content": "Query Query Occurrences Occurences\r\nin top 20 pairs\r\n1. 17 14\r\n2. 8 5\r\n3. 11 7\r\n4. 16 10\r\n5. 13 9\r\n6. 2 2\r\nTable 2: Illustration of precision and recall using IHT\r\nin region hashing.\r\nDatabase size Avg. # regions a\u000ene intervals IHT nodes\r\n100 13.6 21496 1849\r\n500 17.8 88420 6752\r\n1000 19.56 362454 9122\r\n2000 24.3 980980 12239\r\n5600 26.5 3932600 48315\r\nTable 3: Illustration of storage size of IHT.\r\nregion hashing, we noted the number of query occurrences\r\nin the database for each query tested. We also recorded\r\nthe n umber of indexed occurrences using IHT in the top 20\r\nmatches declared. The result for a few sample queries is\r\nindicated in Table 2. As can be seen, the use of IHT does\r\nnot adversely a\u000bect the precision and recall performance of\r\nregion hashing.\r\nStorage performance\r\nT o estimate the amount of storage used b y the index\r\nstructure, we gradually increased the size of our database\r\nfrom 100 images onw ards until the en tire 5600 image\r\ndatabase w as populated in the IHT. The result is shown\r\nin Table 3. As can be seen, the number of a\u000ene intervals\r\ngrows quadratically with the number of regions in images,\r\nand linearly with the number of images. The number of IHT\r\nnodes remains a few Mbytes, a size small enough to avoid\r\nexcessive paging problems relating to I/O. As database size\r\nbecomes increasingly larger, how ev er, w e expect it to face\r\npaging problems.\r\nIndexing time performance\r\nEven though fewer images are indexed using IHT, this\r\nw ould not be an adv an tageunless the actual time per\u0002formance of IHT indexing w as good as w ell. As men- tioned abov e, the size of the interval hash tree for even the\r\nlarge collection of images we tested was a few megabytes,\r\nmaking it possible to index images without any paging\u0002related I/O problems. The av erage indexing time using a\r\nC/C++ implementation on a Windows NT platform (200\r\nMhz CPU and 250Mbytes paging size) involv ed processing\r\nof the query features which was about 0.5 second, followed\r\nby the retrieval which was about 1.2 seconds.\r\n5. Conclusions\r\nIn this paper we hav e presented a nov el index structure\r\ncalled the interval hash tree for localizing 2d ob ject queries\r\nin image databases. We ha v e sho wn b y using this index\r\nstructure, ob jects can be localized under changes in pose,\r\nocclusions and in the presence of scene clutter. We hav e\r\nsho wn that the number of images that are searched is dra\u0002matically reduced by the use of interval hash trees.\r\nReferences\r\n[1] N. Beckmann et al. The r\u0003\r\n-tree: An e\u000ecient and ro\u0002bust access method for points and rectangles. In Proc. ACM SIGMOD, pages 322{331, 1990.\r\n[2] T.H. Cormen, C.E. Lieserson, and R.L. Rivest. In\u0002troduction to A lgorithms. New York: McGraw Hill,\r\nCambridge: MIT Press, 1990.\r\n[3] M. de Berg, M. van Kreveld, M. Overmars, and\r\nO. Schwarzk opf. Computational Geometry. Berlin:\r\nSpringer Verlag, 1997.\r\n[4] A. Guttman. R-trees: A dynamic index structure for\r\nspatial searc hing. In Proc. ACM SIGMOD, pages 47{\r\n57, 1984.\r\n[5] N. Katayama and S. Satoh. The sr tree: An in\u0002dex structure for high-dimensional nearest neighbor\r\nqueries. In Proc. ACM SIGMOD, pages 369{380, 1997.\r\n[6] Y. Lamdan and H.J. Wolfson. Geometric hashing: A\r\ngeneral and e\u000ecient model-based recognition scheme.\r\nIn Pr oceedings of the International Conference on Computer Vision, pages 218{249, 1988.\r\n[7] J.T. Robinson. The k-d-b-tree: A search structure\r\nfor large multidimensional dynamic indexes. In Pr oc.\r\nACM SIGMOD, pages 10{18, 1981.\r\n[8] T. Sellis, N. Roussopoulos, and C. Faloutsos. The\r\nr+\r\n-tree: A dynamic index for multi-dimensional ob\u0002jects. In Pr oceedings of Conf. on Very Large Databases, pages 507{518, 1987.\r\n[9] T. Syeda-Mahmood. Indexing of topics using foils. In\r\nIEEE Conf. on Computer Vision and Pattern R ecog\u0002nition, 2000.\r\n[10] T.F. Syeda-Mahmood and Y-Q. Cheng. Indexing col\u0002ored surfaces in images. In Proceedings Int. Conf. on\r\nPattern Recognition, 1996.\r\n[11] D.A. White and R. Jain. Similarity indexing with the\r\nss-tree. In Proc. 12th Intl. Conf. on Data Engineering, pages 516{523, 1996.\r\n5\r\n0-7695-0695-X/00 $10.00 (c) 2000 IEEE \r\nAuthorized licensed use limited to: KnowledgeGate from IBM Market Insights. Downloaded on July 20, 2009 at 17:59 from IEEE Xplore. Restrictions apply. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bff09df1-5621-4899-9629-dd3b1d50a780/images/54fcec2d-a055-4c09-b008-6ef4e0c32ca6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041628Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=92f867ca074134a51807fb6ab5cac26778d54dde9dc536aa2b279c185f0666d6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 718
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "Interval hash tree: An efficient index structure for searching object queries in large image databases\n"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "T. F. Syeda-Mahmood, P. Raghavan, N. Megiddo\n"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "2000-07-20\n"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "\"image database\"\n"
        }
      ]
    }
  }
}