{
  "file_name": "LATEX for Computer Scientists - 15th May 2006.pdf",
  "task_id": "482ff77f-479c-44bd-9f75-3060e0acb4f2",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "72d3418e-f61d-4f14-9345-ea3fc1b32090",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 1,
            "page_width": 595,
            "page_height": 842,
            "content": "LATEX for Computer Scientists\r\nLes Kitchen\r\nThe University of Melbourne\r\nDepartment of Computer Science and Software Engineering\r\nhttp://www.cs.mu.oz.au/~ljk/\r\n15 May 2006\r\n\rc 2003, 2006, Leslie John Kitchen. You may\r\nmake and distribute unmodified copies of this\r\ndocument in its entirety for non-commercial\r\npurposes. In particular, any copies must include\r\nthis copyright notice and the CVS Id string on the\r\nlast page. (These conditions are inspired by those\r\nused by the ACM.)\r\nPlease be aware that this document, in its present\r\nstate, is work in progress. It is provided, as is, in\r\nthe hope that it will be a useful aid in learning\r\nLATEX. It may still contain errors, and is certainly\r\nincomplete and in need of some re-organization.\r\nSee corresponding LATEX source file for details on\r\ndistribution conditions for source files. The source\r\nfiles will normally be available via the author’s\r\nwebpage, at the URL given above. Note that the\r\ndistribution conditions may change: Do not\r\nassume that distribution conditions for future\r\nversions will be identical to those for the current\r\nversion.\r\nThis document is based on a document\r\ncalled Intermediate LATEX prepared for a\r\nSchool of Graduate Studies course at the\r\nbeginning of 2003. The main changes are\r\naddition of some additional material, and\r\na change of emphasis towards a\r\nComputer Science readership. Having\r\nsaid that, I point out that this document\r\nis now approximately twice the size of the\r\ndocument it was based on.\r\nNon-trivial changes since last version are marked\r\nin the margins: small changes by an arrow\r\npointing to the affected text; extended changes by\r\na down-pointing arrow at the beginning of the\r\nchange, and an up-pointing arrow at the end.\r\nContents\r\n1 What is LATEX? 3\r\n1.1 A simple example . . . . . . . . . . . 3\r\n1.2 Well, what is it? . . . . . . . . . . . 3\r\n1.3 History . . . . . . . . . . . . . . . . 3\r\n1.4 TEX and LATEX . . . . . . . . . . . . 4\r\n1.5 What’s good about LATEX? . . . . . 4\r\n1.6 What’s “bad” about LATEX? . . . . . 4\r\n1.7 Summing up . . . . . . . . . . . . . 5\r\n2 Philosophy 5\r\n2.1 What I can achieve here . . . . . . . 5\r\n2.2 Levels at which you can use LATEX . 5\r\n2.3 Learning to use LATEX . . . . . . . . 5\r\n3 Basic LATEX 6\r\n3.1 Processing . . . . . . . . . . . . . . . 6\r\n3.2 Associated files and re-running . . . 6\r\n3.3 Characters to pages . . . . . . . . . 7\r\n3.4 Input conventions . . . . . . . . . . . 8\r\n3.5 Combinations . . . . . . . . . . . . . 8\r\n3.6 Commands . . . . . . . . . . . . . . 9\r\n3.7 Environments . . . . . . . . . . . . . 10\r\n3.8 After-sentence space . . . . . . . . . 10\r\n3.9 Accents and symbols . . . . . . . . . 11\r\n3.10 Declarations, grouping, and scope . . 11\r\n3.11 Appearance of type . . . . . . . . . . 11\r\n3.12 Text justification . . . . . . . . . . . 13\r\n3.13 Line and page breaks . . . . . . . . . 14\r\n3.14 Displays . . . . . . . . . . . . . . . . 15\r\n3.15 Lists . . . . . . . . . . . . . . . . . . 15\r\n3.16 Overall source document structure . 16\r\n3.17 Document class . . . . . . . . . . . . 16\r\n3.18 Packages . . . . . . . . . . . . . . . . 17\r\n3.19 Front stuff . . . . . . . . . . . . . . . 17\r\n1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/72d3418e-f61d-4f14-9345-ea3fc1b32090.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=baf9c96effaedbdd9aabe5367e70959ec0f80d8c7ffa0c6f73b115f6dc352b7e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 721
      },
      {
        "segments": [
          {
            "segment_id": "72d3418e-f61d-4f14-9345-ea3fc1b32090",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 1,
            "page_width": 595,
            "page_height": 842,
            "content": "LATEX for Computer Scientists\r\nLes Kitchen\r\nThe University of Melbourne\r\nDepartment of Computer Science and Software Engineering\r\nhttp://www.cs.mu.oz.au/~ljk/\r\n15 May 2006\r\n\rc 2003, 2006, Leslie John Kitchen. You may\r\nmake and distribute unmodified copies of this\r\ndocument in its entirety for non-commercial\r\npurposes. In particular, any copies must include\r\nthis copyright notice and the CVS Id string on the\r\nlast page. (These conditions are inspired by those\r\nused by the ACM.)\r\nPlease be aware that this document, in its present\r\nstate, is work in progress. It is provided, as is, in\r\nthe hope that it will be a useful aid in learning\r\nLATEX. It may still contain errors, and is certainly\r\nincomplete and in need of some re-organization.\r\nSee corresponding LATEX source file for details on\r\ndistribution conditions for source files. The source\r\nfiles will normally be available via the author’s\r\nwebpage, at the URL given above. Note that the\r\ndistribution conditions may change: Do not\r\nassume that distribution conditions for future\r\nversions will be identical to those for the current\r\nversion.\r\nThis document is based on a document\r\ncalled Intermediate LATEX prepared for a\r\nSchool of Graduate Studies course at the\r\nbeginning of 2003. The main changes are\r\naddition of some additional material, and\r\na change of emphasis towards a\r\nComputer Science readership. Having\r\nsaid that, I point out that this document\r\nis now approximately twice the size of the\r\ndocument it was based on.\r\nNon-trivial changes since last version are marked\r\nin the margins: small changes by an arrow\r\npointing to the affected text; extended changes by\r\na down-pointing arrow at the beginning of the\r\nchange, and an up-pointing arrow at the end.\r\nContents\r\n1 What is LATEX? 3\r\n1.1 A simple example . . . . . . . . . . . 3\r\n1.2 Well, what is it? . . . . . . . . . . . 3\r\n1.3 History . . . . . . . . . . . . . . . . 3\r\n1.4 TEX and LATEX . . . . . . . . . . . . 4\r\n1.5 What’s good about LATEX? . . . . . 4\r\n1.6 What’s “bad” about LATEX? . . . . . 4\r\n1.7 Summing up . . . . . . . . . . . . . 5\r\n2 Philosophy 5\r\n2.1 What I can achieve here . . . . . . . 5\r\n2.2 Levels at which you can use LATEX . 5\r\n2.3 Learning to use LATEX . . . . . . . . 5\r\n3 Basic LATEX 6\r\n3.1 Processing . . . . . . . . . . . . . . . 6\r\n3.2 Associated files and re-running . . . 6\r\n3.3 Characters to pages . . . . . . . . . 7\r\n3.4 Input conventions . . . . . . . . . . . 8\r\n3.5 Combinations . . . . . . . . . . . . . 8\r\n3.6 Commands . . . . . . . . . . . . . . 9\r\n3.7 Environments . . . . . . . . . . . . . 10\r\n3.8 After-sentence space . . . . . . . . . 10\r\n3.9 Accents and symbols . . . . . . . . . 11\r\n3.10 Declarations, grouping, and scope . . 11\r\n3.11 Appearance of type . . . . . . . . . . 11\r\n3.12 Text justification . . . . . . . . . . . 13\r\n3.13 Line and page breaks . . . . . . . . . 14\r\n3.14 Displays . . . . . . . . . . . . . . . . 15\r\n3.15 Lists . . . . . . . . . . . . . . . . . . 15\r\n3.16 Overall source document structure . 16\r\n3.17 Document class . . . . . . . . . . . . 16\r\n3.18 Packages . . . . . . . . . . . . . . . . 17\r\n3.19 Front stuff . . . . . . . . . . . . . . . 17\r\n1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/72d3418e-f61d-4f14-9345-ea3fc1b32090.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=baf9c96effaedbdd9aabe5367e70959ec0f80d8c7ffa0c6f73b115f6dc352b7e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 721
      },
      {
        "segments": [
          {
            "segment_id": "535397f2-9b21-4e55-9fd3-438016066311",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 2,
            "page_width": 595,
            "page_height": 842,
            "content": "3.20 Document sectioning . . . . . . . . . 17\r\n3.21 Layout of a LATEX source file . . . . 18\r\n4 Breaking Up Your Document 1 18\r\n4.1 \\input . . . . . . . . . . . . . . . . . 18\r\n5 Roll-Your-Own 19\r\n5.1 Commands . . . . . . . . . . . . . . 19\r\n5.2 Environments . . . . . . . . . . . . . 21\r\n5.3 “Theorems” . . . . . . . . . . . . . . 21\r\n6 Customization 22\r\n6.1 Customization . . . . . . . . . . . . 22\r\n7 Cross References 22\r\n7.1 Labels and references . . . . . . . . . 22\r\n7.2 Mechanics of cross references . . . . 23\r\n8 Footnotes 23\r\n8.1 Footnotes . . . . . . . . . . . . . . . 23\r\n9 Floats: Tables and Figures 24\r\n9.1 Floats . . . . . . . . . . . . . . . . . 24\r\n10 Tabulars and Tables 24\r\n10.1 Tabulars and tables . . . . . . . . . 24\r\n11 Mathematics 26\r\n11.1 Math mode . . . . . . . . . . . . . . 26\r\n11.2 Subscripts and superscripts . . . . . 27\r\n11.3 A menagerie of symbols and operators 27\r\n11.4 “Large” delimiters . . . . . . . . . . 28\r\n11.5 Arrays . . . . . . . . . . . . . . . . . 28\r\n11.6 Equations . . . . . . . . . . . . . . . 28\r\n12 Boxes, Lengths, Space, Counters 29\r\n12.1 Caveat . . . . . . . . . . . . . . . . . 29\r\n12.2 Lengths . . . . . . . . . . . . . . . . 29\r\n12.3 Boxes . . . . . . . . . . . . . . . . . 30\r\n12.4 Space and rules . . . . . . . . . . . . 30\r\n12.5 Counters . . . . . . . . . . . . . . . . 31\r\n13 Graphics: Images and Diagrams 31\r\n13.1 The picture environment . . . . . . 31\r\n13.2 Graphics operators . . . . . . . . . . 31\r\n13.3 Including graphics . . . . . . . . . . 32\r\n14 Breaking Up Your Document 2: 32\r\n14.1 \\include . . . . . . . . . . . . . . . 32\r\n15 Bibliography 33\r\n15.1 DIY: thebibliography . . . . . . . 33\r\n15.2 Using BibTEX . . . . . . . . . . . . . 33\r\n15.3 Running bibtex . . . . . . . . . . . 34\r\n16 Collaborative Document Development 34\r\n16.1 Version control—CVS . . . . . . . . 34\r\n16.2 Build tools—make . . . . . . . . . . 35\r\n16.3 Automatic generation of LATEX . . . 36\r\n17 Miscellaneous Topics 37\r\n17.1 Index and glossary . . . . . . . . . . 37\r\n17.2 Verbatim text . . . . . . . . . . . . . 37\r\n17.3 Multilingual LATEX . . . . . . . . . . 38\r\n17.4 LATEX and the Web . . . . . . . . . . 38\r\n17.5 PostScript fonts . . . . . . . . . . . . 38\r\n17.6 Page style and headings . . . . . . . 39\r\n17.7 Color . . . . . . . . . . . . . . . . . . 39\r\n17.8 Hyphenation . . . . . . . . . . . . . 39\r\n17.9 Fragile versus robust commands . . . 40\r\n17.10Some additional useful free programs 41\r\n17.11LATEX debugging . . . . . . . . . . . 41\r\n17.12More advanced programming features 41\r\n17.13Tips’n’tricks . . . . . . . . . . . . . . 41\r\n17.14What’s missing? . . . . . . . . . . . 45\r\n17.15Learning and getting more . . . . . . 45\r\n17.16TEX’s limitations . . . . . . . . . . . 46\r\n17.17TEXmacs and Lilypond . . . . . . . 46\r\nA Behind The Scenes: How It’s Done 47\r\nA.1 Listing of ljk-latex.bib . . . . . . 47\r\n2",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/535397f2-9b21-4e55-9fd3-438016066311.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6c3c97837a7262857854bba2e03d7d5e22dc92d4551d3fe4561de1ac144de4b2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 817
      },
      {
        "segments": [
          {
            "segment_id": "535397f2-9b21-4e55-9fd3-438016066311",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 2,
            "page_width": 595,
            "page_height": 842,
            "content": "3.20 Document sectioning . . . . . . . . . 17\r\n3.21 Layout of a LATEX source file . . . . 18\r\n4 Breaking Up Your Document 1 18\r\n4.1 \\input . . . . . . . . . . . . . . . . . 18\r\n5 Roll-Your-Own 19\r\n5.1 Commands . . . . . . . . . . . . . . 19\r\n5.2 Environments . . . . . . . . . . . . . 21\r\n5.3 “Theorems” . . . . . . . . . . . . . . 21\r\n6 Customization 22\r\n6.1 Customization . . . . . . . . . . . . 22\r\n7 Cross References 22\r\n7.1 Labels and references . . . . . . . . . 22\r\n7.2 Mechanics of cross references . . . . 23\r\n8 Footnotes 23\r\n8.1 Footnotes . . . . . . . . . . . . . . . 23\r\n9 Floats: Tables and Figures 24\r\n9.1 Floats . . . . . . . . . . . . . . . . . 24\r\n10 Tabulars and Tables 24\r\n10.1 Tabulars and tables . . . . . . . . . 24\r\n11 Mathematics 26\r\n11.1 Math mode . . . . . . . . . . . . . . 26\r\n11.2 Subscripts and superscripts . . . . . 27\r\n11.3 A menagerie of symbols and operators 27\r\n11.4 “Large” delimiters . . . . . . . . . . 28\r\n11.5 Arrays . . . . . . . . . . . . . . . . . 28\r\n11.6 Equations . . . . . . . . . . . . . . . 28\r\n12 Boxes, Lengths, Space, Counters 29\r\n12.1 Caveat . . . . . . . . . . . . . . . . . 29\r\n12.2 Lengths . . . . . . . . . . . . . . . . 29\r\n12.3 Boxes . . . . . . . . . . . . . . . . . 30\r\n12.4 Space and rules . . . . . . . . . . . . 30\r\n12.5 Counters . . . . . . . . . . . . . . . . 31\r\n13 Graphics: Images and Diagrams 31\r\n13.1 The picture environment . . . . . . 31\r\n13.2 Graphics operators . . . . . . . . . . 31\r\n13.3 Including graphics . . . . . . . . . . 32\r\n14 Breaking Up Your Document 2: 32\r\n14.1 \\include . . . . . . . . . . . . . . . 32\r\n15 Bibliography 33\r\n15.1 DIY: thebibliography . . . . . . . 33\r\n15.2 Using BibTEX . . . . . . . . . . . . . 33\r\n15.3 Running bibtex . . . . . . . . . . . 34\r\n16 Collaborative Document Development 34\r\n16.1 Version control—CVS . . . . . . . . 34\r\n16.2 Build tools—make . . . . . . . . . . 35\r\n16.3 Automatic generation of LATEX . . . 36\r\n17 Miscellaneous Topics 37\r\n17.1 Index and glossary . . . . . . . . . . 37\r\n17.2 Verbatim text . . . . . . . . . . . . . 37\r\n17.3 Multilingual LATEX . . . . . . . . . . 38\r\n17.4 LATEX and the Web . . . . . . . . . . 38\r\n17.5 PostScript fonts . . . . . . . . . . . . 38\r\n17.6 Page style and headings . . . . . . . 39\r\n17.7 Color . . . . . . . . . . . . . . . . . . 39\r\n17.8 Hyphenation . . . . . . . . . . . . . 39\r\n17.9 Fragile versus robust commands . . . 40\r\n17.10Some additional useful free programs 41\r\n17.11LATEX debugging . . . . . . . . . . . 41\r\n17.12More advanced programming features 41\r\n17.13Tips’n’tricks . . . . . . . . . . . . . . 41\r\n17.14What’s missing? . . . . . . . . . . . 45\r\n17.15Learning and getting more . . . . . . 45\r\n17.16TEX’s limitations . . . . . . . . . . . 46\r\n17.17TEXmacs and Lilypond . . . . . . . 46\r\nA Behind The Scenes: How It’s Done 47\r\nA.1 Listing of ljk-latex.bib . . . . . . 47\r\n2",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/535397f2-9b21-4e55-9fd3-438016066311.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6c3c97837a7262857854bba2e03d7d5e22dc92d4551d3fe4561de1ac144de4b2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 817
      },
      {
        "segments": [
          {
            "segment_id": "5ffea5ec-3b34-4c21-ae64-92ad1e432a29",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 3,
            "page_width": 595,
            "page_height": 842,
            "content": "1 What is LATEX?\r\n1.1 A simple example\r\n\\documentclass[12pt,a4paper]{article}\r\n% This is a comment\r\n\\title{A Simple Example}\r\n\\author{I. M. Weird\\thanks\r\n{Nobody you know.}}\r\n\\begin{document}\r\n\\maketitle\r\n\\begin{abstract}\r\nYou shouldn’t read this paper anyway.\r\n\\end{abstract}\r\n\\tableofcontents\r\n\\section{Something Important}\r\n{\\LARGE Hello world!}\r\n\\section{Filler}\r\nThe quick brown fox\r\njumps over the lazy dog.\r\nThe quick brown fox\r\njumps\r\nover the lazy dog.\r\n\\end{document}\r\nproduces after processing the printed or displayed\r\noutput shown in Figure 1.\r\n1.2 Well, what is it?\r\nLATEX is in effect a programming language for\r\ncreating quality typeset documents, designed so\r\nthat most of the time you use it like a high-level\r\n(declarative) markup language.\r\nIt thus has some commonality with other markup\r\nlanguages like HTML, but is intrinsically more\r\npowerful and more oriented towards quality\r\ntypesetting.\r\n1.3 History\r\n• Before (electronic) computers, (human)\r\neditors would mark up a manuscript with\r\ninstructions to the (human) printers on how\r\nto typeset the document.\r\n• Donald Knuth initially developed TEX (along\r\nwith MetaFont) in the late 1970s.\r\n• TEX is basically a high-quality programmable\r\ntypesetting engine, combining the text of the\r\nA Simple Example\r\nI. M. Weird∗\r\nApril 24, 2006\r\nAbstract\r\nYou shouldn’t read this paper anyway.\r\nContents\r\n1 Something Important 1\r\n2 Filler 1\r\n1 Something Important\r\nHello world!\r\n2 Filler\r\nThe quick brown fox jumps over the lazy dog.\r\nThe quick brown fox jumps over the lazy dog.\r\n∗Nobody you know.\r\n1\r\nFigure 1: Sample LATEX output.\r\n3",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/5ffea5ec-3b34-4c21-ae64-92ad1e432a29.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1fe48aa9b3a0bc148653dbb528b4d2cc2b7518f180657ab59ca91d2c7a721583",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 237
      },
      {
        "segments": [
          {
            "segment_id": "fcbea708-1500-4a43-9758-7d6a18d11d56",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 4,
            "page_width": 595,
            "page_height": 842,
            "content": "document with embedded markup to specify\r\nthe formatting automatically.\r\n• MetaFont is a system for designing new\r\nfonts.\r\n• Knuth provided a “format” called plain TEX\r\nas a layer on top of raw TEX.\r\n• Plain TEX provided many convenient\r\nfeatures, but was still somewhat difficult and\r\nunforgiving.\r\n• Leslie Lamport built LATEX on top of TEX in\r\nthe early 1980s to provide better, cleaner\r\nsupport for document production.\r\n• That first released version was LATEX 2.09.\r\n• Current version is LATEX 2ε.\r\n• LATEX version 3 is in the offing.\r\n1.4 TEX and LATEX\r\n• LATEX is built on top of TEX.\r\n• These days, pretty much all usage of TEX is\r\nvia LATEX.1\r\n• Almost all features of plain TEX are\r\naccessible in LATEX, but are generally used\r\nonly by wizards, and are mostly hidden from\r\nordinary users.\r\n• From here I’ll speak mainly about LATEX, but\r\nremember TEX is always in the background.\r\n1.5 What’s good about LATEX?\r\nAll are somewhat inter-related.\r\n• High quality typesetting, especially for\r\nmathematics.\r\n• Simple text representation:\r\n– Create and modify with any text editor.\r\n– Suitable for version control (CVS,\r\nsubversion).\r\n1One notable exception is texinfo, which the GNU\r\nproject uses to produce “info” documentation from TEX\r\nsources.\r\n– Scripts can generate LATEX\r\nautomatically.\r\n• Cross-platform.\r\n• Stability and compatibility is a major\r\nstrength.\r\n• Largely “declarative”.\r\n• Configurable, extensible and programmable.\r\n• Suitable for collaborative document\r\ndevelopment.\r\n• Can be used with build tools like make.\r\n• Large, active community of users and\r\ncontributors.\r\n• Many plug-in packages available.\r\n• Multilingual.\r\n• Editor support (e.g. latex-mode in emacs).\r\n• GUI interfaces (TeXshop, WinShell) and\r\nWYSIWYG front ends (Lyx).\r\n• Non-proprietary.\r\n• Free!\r\n• Distributed under a GNU-like\r\n2 Free Software\r\nlicence.\r\n1.6 What’s “bad” about LATEX?\r\n• Less immediate feedback compared with\r\nWYSIWYG.3\r\n• Lots of braces to match. . .\r\n– . . .though syntax-aware editors can help\r\na lot.\r\n• Power of programming can also bring the\r\nheadache of debugging.\r\n2One feature of the LATEX licence is that if you modify a\r\nstandard file, you must call it by a different name. This is\r\nto avoid compatibility problems where people might think\r\nthey’re using say a standard package, but are in fact getting\r\na mutant.\r\n3WYSIWYG stands for “What You See Is What You\r\nGet”, which however also means “What You See Is All\r\nYou’ve Got”.\r\n4",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/fcbea708-1500-4a43-9758-7d6a18d11d56.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1c1bf1a93a4488615b1528e4e746aae96734584ddd90dce7e3d1253a80faf323",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 400
      },
      {
        "segments": [
          {
            "segment_id": "8e19d98a-3c45-4d4c-8919-149bad4446ad",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 5,
            "page_width": 595,
            "page_height": 842,
            "content": "• A lot to learn to fully master LATEX, though\r\nyou can do most simple document structures\r\nfairly intuitively.\r\n• Sometimes default settings are over\r\nfussy—though this is configurable (as is\r\nalmost everything in LATEX).\r\n• Arguably extra typing initially, though this\r\ncost is in the long term greatly outweighed by\r\nsavings in maintenance and modification.\r\n• Probably not worth the overhead for simple\r\none-off things like letters (unless you set great\r\nstore by beautiful typesetting even for your\r\ncorrespondence), but then true LATEX\r\ndevotees use it even for their shopping lists.\r\n1.7 Summing up\r\n• LATEX separates logical structuring from\r\nvisual formatting.\r\n• LATEX is particularly good for large-scale\r\ndocuments which will have a long lifetime of\r\nrevisions, and will have to be distributed in\r\nvarious formats and versions.\r\n• While LATEX can provide groovey typesetting,\r\nthat’s no substitute for good organization\r\nand clear expression.\r\n• LATEX, however, can assist greatly by taking\r\ncare of a lot of the bookkeeping involved in\r\nproducing an effectively presented document.\r\n2 Philosophy\r\n2.1 What I can achieve here\r\nLATEX is way too big to cover in just a couple of\r\nhours!\r\n• Show you how some things work.\r\n• Show you how to do some things.\r\n• Give you an idea of what’s possible.\r\n• Point you to some references.\r\n• Prepare you to learn and experiment on your\r\nown.\r\nI’ll concentrate more on what you have to do\r\nrather than how LATEX does it—though knowing\r\nhow it works can help your understanding.\r\n2.2 Levels at which you can use\r\nLATEX\r\n1. Straight, ordinary LATEX.\r\n2. Minor customization of ordinary classes and\r\npackages, via options and parameter settings.\r\n3. Defining your own commands, environments,\r\netc.\r\n4. Use of various contributed packages, etc.,\r\nsome in the standard distribution, some you\r\nhave to download yourself4.\r\n5. “Getting under the bonnet”: redefining\r\nLATEX’s standard commands to do what you\r\nwant; creating your own packages and classes,\r\netc.\r\nI won’t touch on 5.\r\n2.3 Learning to use LATEX\r\n• Learning to use LATEX is like learning a\r\nlanguage: it is learning a language:\r\n– Grammar, vocabulary, idioms,. . . and\r\npractice, practice, practice.\r\n• What it costs you:\r\n– Some effort in learning and looking\r\nthings up, especially to start with.\r\n– A less immediate way of doing things,\r\nlike making a bowl out of ceramic\r\ninstead of plasticine: You don’t really\r\nknow how the ceramic bowl will turn out\r\nuntil you’ve fired it in the kiln.\r\n• What you gain:\r\n– Much greater expressiveness and control\r\nthan with WYSIWYG.\r\n– A record of how you did things.\r\n4Almost everything available in the TEX world is on the\r\nTEXLive CD [10].\r\n5",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/8e19d98a-3c45-4d4c-8919-149bad4446ad.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bd91848c4dfee5e5247c8e3a6eb3976f9be7e0af5c9a8a9d4bf17832244eb2ac",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 446
      },
      {
        "segments": [
          {
            "segment_id": "6b72ed56-775c-49d3-8028-9f1d11d6ce37",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 6,
            "page_width": 595,
            "page_height": 842,
            "content": "– By looking at other people’s LATEX\r\nsources, you can find out how they did\r\nthings, and learn how to do it yourself.\r\n– All the technical and aesthetic benefits\r\nof LATEX in typography, especially\r\nmathematics.\r\n– Membership in the global community of\r\nLATEX users.\r\n• LATEX shines most for large documents that\r\nhave to undergo revisions and reformatting\r\nfor different purposes: e.g., chapters of a\r\nthesis redone for journal publication.\r\n• A good frame of mind to have is that when\r\nyou create a LATEX document, you’re not\r\ncreating just that one-off document, but\r\nyou’re creating (or at least preparing for) all\r\nthe future versions of that document.\r\nThis can require a little forethought and\r\nplanning.\r\n• LATEX is very linguistic: you name things\r\nrather than point at them.\r\n3 Basic LATEX\r\n3.1 Processing\r\n• Starts out with LATEX source file typically\r\nwith extension .tex (though .ltx is\r\nsometimes used).\r\n• E.g., latex foo.tex (or latex foo — latex\r\nprovides a default extension of .tex if not\r\ngiven).\r\n• Main product is the corresponding DVI\r\n(“device independent”) file, in this case\r\nfoo.dvi.\r\n• The DVI file describes where each character\r\nglyph and graphic goes on each page.\r\n• The DVI file can be viewed directly using a\r\nDVI viewer like xdvi.\r\n• More often, the DVI file is converted to\r\nPostScript using dvips.\r\n• The resulting .ps file can be:\r\n– viewed using a PostScript viewer, like gv\r\nor GSView (which provide GUIs on top\r\nof Ghostscript),\r\n– printed on most laser printers,\r\n– “distilled” to PDF using Adobe Acrobat\r\nDistiller, or the free ps2pdf (which\r\ncomes with Ghostscript).\r\n• There is also a variant program pdflatex,\r\nwhich produces PDF directly from LATEX\r\nsource.\r\n3.2 Associated files and re-running\r\nThere are a number of files associated with the\r\nprocessing of a .tex file. Some of the most\r\nimportant are:\r\n.aux The auxiliary file, which latex uses to keep\r\ntrack of cross-referencing and similar\r\ninformation.\r\n.log The log file, which contains an even more\r\ndetailed account of processing than is written\r\nto standard output.\r\n.toc, .lof, .lot Used for information\r\nrespectively for the Table of Contents, List of\r\nFigures, and List of Tables.\r\n.bbl The bibliography created by bibtex, and\r\nused by latex.\r\nThere are a number of other files associated with\r\nprocessing of bibliography, index and glossary.\r\nA few things to note:\r\n• latex is strictly one-pass: To cope with\r\nforward references, like cross-references to\r\nlater sections, and page numbers in the table\r\nof contents, latex makes use of information\r\ngathered on the previous run in the .aux,\r\n.toc files, etc.\r\n• This means that after a significant change to\r\nthe document, it can take two runs5 of latex\r\nto get cross-references, etc., perfectly correct.\r\n5Those theoretically inclined will see that this is a kind\r\nof fixed-point iteration. It’s actually possible to construct\r\npathological LATEX documents that never converge. I’ve\r\nnever known this to happen in practice, but constructing\r\nsuch a document is an interesting brain-teaser.\r\n6",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/6b72ed56-775c-49d3-8028-9f1d11d6ce37.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=197ade6acb794adcec37380b2f595340de7de523f0ea4476bbbf63c0e8bb43ac",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 498
      },
      {
        "segments": [
          {
            "segment_id": "7849dd1e-10f8-44ee-a78f-3126260f0235",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 7,
            "page_width": 595,
            "page_height": 842,
            "content": "(On the first run, latex was still using\r\ncross-reference information generated before\r\nthe change.)\r\n• Symptoms of this are messages from latex\r\nlike “There were undefined references” or\r\n“Cross-references may have changed, rerun\r\nlatex to get cross-references right”.\r\n• Some people superstitiously always run latex\r\ntwice, or make use of scripts (usually called\r\nsomething like makeltx or latexmake), which\r\niterate running latex until the\r\ncross-references stabilize. See also notes\r\nabout using latex under make.\r\n• In practice, this is rarely a problem. You\r\nreally only need perfectly correct\r\ncross-references in the final version. When\r\nyou’re actively developing a document, it\r\nusually doesn’t matter if the cross-references\r\nare a little out of synch.\r\n• Which associated files are actually produced\r\ndepends on what features you ask for. For\r\nexample, if you don’t have\r\n\\tableofcontents, then no .toc file is\r\nproduced.\r\n3.3 Characters to pages\r\nAs the engine underneath LATEX, TEX works at a\r\nnumber of levels to produce the typeset output.\r\nTo simplify the real story a bit:\r\n• At the lowest level, TEX deals with boxes.\r\n• Boxes are mostly the glyphs for printed\r\ncharacters and symbols, but they may be\r\nother things like graphics.\r\n• Most of TEX’s work is in creating a\r\nhierarchical assemblage of boxes from the\r\ninput to produce an aesthetically typeset\r\nresult.\r\n• Character boxes get assembled into word\r\nboxes.\r\n• Word boxes get assembled into line boxes.\r\n• Line boxes get assembled into paragraph\r\nboxes.\r\n• Paragraph boxes get output onto pages.\r\n• In between the boxes goes adjustable space,\r\nwhich TEX can stretch or shrink (within\r\nlimits) to achieve the best looking output.\r\n• In TEX-speak, for historical reasons, these\r\nadjustable spaces are called glue, but they’re\r\nprobably better conceptualized as being like\r\ninvisible springs.\r\n• The main unit of TEX’s typesetting is the\r\nparagraph. TEX makes its decisions about\r\nwhere to break the text of a paragraph into\r\nlines using a quite sophisticated algorithm,\r\nwhich tries to optimize the appearance of the\r\nentire paragraph, taking into account a\r\nnumber of typographic factors.\r\n• These typographic factors are assigned\r\nvarious numeric weights. TEX has well-chosen\r\ndefault values. Most of LATEX’s layout effects,\r\nlike centering and flush right, are achieved\r\nnot by using a different algorithm, but merely\r\nby altering the parameters of TEX’s\r\nparagraph algorithm.\r\n• Because of this, a change at the end of a\r\nparagraph can actually affect the line\r\nbreaking at the beginning, because of the way\r\nit shifts the balance of the optimization.\r\n• This whole-paragraph approach is one of the\r\nreasons why TEX’s typesetting looks so good,\r\nbut also why it’s difficult to do a proper\r\nWYSIWYG version of TEX or LATEX.\r\n• One consequence is that the typesetting of a\r\nparagraph is controlled by the settings in\r\neffect at the end of the paragraph (when\r\nTEX’s algorithm kicks in). This affects the\r\nuse of declarations like \\sloppy: the scope of\r\nthe declaration must include the blank line\r\n(or \\par) that ends the paragraph. See [7,\r\np. 94f] for more details.\r\n• TEX’s multi-factor approach can be subtle.\r\nSometimes you may see TEX produce\r\nsomething that looks like a no-no, like having\r\na word protrude slightly into the right margin\r\nwhen you wanted fully justified text.\r\nInvariably, this is because the alternative line\r\n7",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/7849dd1e-10f8-44ee-a78f-3126260f0235.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2480d678d3400ea983ea470dd574fd0535292f7a475f27ae964d035daadd6e9a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 546
      },
      {
        "segments": [
          {
            "segment_id": "7849dd1e-10f8-44ee-a78f-3126260f0235",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 7,
            "page_width": 595,
            "page_height": 842,
            "content": "(On the first run, latex was still using\r\ncross-reference information generated before\r\nthe change.)\r\n• Symptoms of this are messages from latex\r\nlike “There were undefined references” or\r\n“Cross-references may have changed, rerun\r\nlatex to get cross-references right”.\r\n• Some people superstitiously always run latex\r\ntwice, or make use of scripts (usually called\r\nsomething like makeltx or latexmake), which\r\niterate running latex until the\r\ncross-references stabilize. See also notes\r\nabout using latex under make.\r\n• In practice, this is rarely a problem. You\r\nreally only need perfectly correct\r\ncross-references in the final version. When\r\nyou’re actively developing a document, it\r\nusually doesn’t matter if the cross-references\r\nare a little out of synch.\r\n• Which associated files are actually produced\r\ndepends on what features you ask for. For\r\nexample, if you don’t have\r\n\\tableofcontents, then no .toc file is\r\nproduced.\r\n3.3 Characters to pages\r\nAs the engine underneath LATEX, TEX works at a\r\nnumber of levels to produce the typeset output.\r\nTo simplify the real story a bit:\r\n• At the lowest level, TEX deals with boxes.\r\n• Boxes are mostly the glyphs for printed\r\ncharacters and symbols, but they may be\r\nother things like graphics.\r\n• Most of TEX’s work is in creating a\r\nhierarchical assemblage of boxes from the\r\ninput to produce an aesthetically typeset\r\nresult.\r\n• Character boxes get assembled into word\r\nboxes.\r\n• Word boxes get assembled into line boxes.\r\n• Line boxes get assembled into paragraph\r\nboxes.\r\n• Paragraph boxes get output onto pages.\r\n• In between the boxes goes adjustable space,\r\nwhich TEX can stretch or shrink (within\r\nlimits) to achieve the best looking output.\r\n• In TEX-speak, for historical reasons, these\r\nadjustable spaces are called glue, but they’re\r\nprobably better conceptualized as being like\r\ninvisible springs.\r\n• The main unit of TEX’s typesetting is the\r\nparagraph. TEX makes its decisions about\r\nwhere to break the text of a paragraph into\r\nlines using a quite sophisticated algorithm,\r\nwhich tries to optimize the appearance of the\r\nentire paragraph, taking into account a\r\nnumber of typographic factors.\r\n• These typographic factors are assigned\r\nvarious numeric weights. TEX has well-chosen\r\ndefault values. Most of LATEX’s layout effects,\r\nlike centering and flush right, are achieved\r\nnot by using a different algorithm, but merely\r\nby altering the parameters of TEX’s\r\nparagraph algorithm.\r\n• Because of this, a change at the end of a\r\nparagraph can actually affect the line\r\nbreaking at the beginning, because of the way\r\nit shifts the balance of the optimization.\r\n• This whole-paragraph approach is one of the\r\nreasons why TEX’s typesetting looks so good,\r\nbut also why it’s difficult to do a proper\r\nWYSIWYG version of TEX or LATEX.\r\n• One consequence is that the typesetting of a\r\nparagraph is controlled by the settings in\r\neffect at the end of the paragraph (when\r\nTEX’s algorithm kicks in). This affects the\r\nuse of declarations like \\sloppy: the scope of\r\nthe declaration must include the blank line\r\n(or \\par) that ends the paragraph. See [7,\r\np. 94f] for more details.\r\n• TEX’s multi-factor approach can be subtle.\r\nSometimes you may see TEX produce\r\nsomething that looks like a no-no, like having\r\na word protrude slightly into the right margin\r\nwhen you wanted fully justified text.\r\nInvariably, this is because the alternative line\r\n7",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/7849dd1e-10f8-44ee-a78f-3126260f0235.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2480d678d3400ea983ea470dd574fd0535292f7a475f27ae964d035daadd6e9a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 546
      },
      {
        "segments": [
          {
            "segment_id": "d9580ae1-b0d7-4454-b09a-9c0d9b93e5b4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 8,
            "page_width": 595,
            "page_height": 842,
            "content": "breaks would have been worse in the overall\r\nassessment.\r\n• Another consequence of TEX’s approach is\r\nthat very little in TEX’s typesetting is\r\nabsolute. For example, the “unbreakable\r\nspace” ~ does not actually forbid a line break.\r\nIt merely assigns a very high penalty to\r\nbreaking at that point. In normal situations,\r\nTEX’s algorithm will avoid breaking there to\r\navoid incurring the penalty in the\r\noptimization.\r\n• In doing its job TEX also has to break apart\r\nboxes it has already made. For example, it\r\nmay need to break a word box to hyphenate a\r\nword to get a better line break. Or it may\r\nneed to break a paragraph between two lines\r\nto get a good page break.\r\n3.4 Input conventions\r\n• LATEX input is an ordinary text file, which\r\nmixes the content of the document with\r\nmarkup to process it.\r\n• The input conventions are reminiscent of the\r\nUnix shell (though not the same), in that\r\nsome characters are “ordinary”, while some\r\nare “special” and trigger special treatment.\r\n• Most characters (letters, numbers,\r\npunctuation) are “ordinary”, and represent\r\nthemselves.\r\n• The following characters are “special”:\r\n$ Switches TEX into math mode.\r\n\\ Indicates a command.\r\n{ } Indicate grouping and enclose the actual\r\narguments of a command.\r\n~ Unbreakable interword space.\r\n^ Indicate respectively subscripts and\r\nsuperscripts in math mode.\r\n# Used for formal arguments of a command.\r\n& Separates cells in rows of a table.\r\n% Indicates a comment. The comment runs\r\nfrom the % to the end of line (a bit like\r\nC++ // comments).\r\n• The characters @ [ ] can be used in ordinary\r\ntext, but behave specially in certain\r\ncircumstances.\r\n• The characters + - = < > are mainly used in\r\nmath mode, and there behave as you’d\r\nexpect. They can be used in ordinary text,\r\nbut may not always give what you expect in\r\nthat in some fonts that character code is\r\nassigned to a printed character different from\r\nwhat’s on the keyboard. < > gives ¡ ¿.\r\n• As with most programming languages,\r\nwhitespace and newlines are used to delimit\r\ntokens. Additional whitespace and newlines\r\nbeyond this have no effect, though they can\r\nbe used for source layout.\r\n• One exception is that a one or more\r\nconsecutive blank lines indicate a paragraph\r\nbreak.6\r\n• A consequence of all this is that you can’t\r\nnormally get extra horizontal whitespace on\r\nthe page by typing extra spaces into your\r\nLATEX source. Nor can you get extra vertical\r\nwhitespace by putting in extra blank lines.\r\nThese effects have to be achieved by invoking\r\nexplicit commands.\r\n3.5 Combinations\r\nSome combinations of otherwise ordinary\r\ncharacters are treated specially:\r\n• ‘‘ and ’’ give proper opening and closing\r\n(double) quotation marks, aka “inverted\r\ncommas”. (Don’t use \", the typewriter\r\ndouble quote!)7\r\n• Similarly, ‘ and ’ give single quotes. (The\r\nlatter also gives an apostrophe in ordinary\r\ntext and a prime in math mode).\r\n6A blank line is thus equivalent to the command \\par,\r\nand in some circumstances it’s clearer to use the explicit\r\n\\par command.\r\n7\r\nIn emacs’s latex-mode you can type in \", because that\r\nkey is bound to a command that automatically inserts the\r\nappropriate LATEX opening or closing quotation marks de\u0002pending on the context. By way of clarification, ‘ is the\r\nASCII grave accent, aka “backtick”, top-left on most key\u0002boards; ’ is the “single-quote” or apostrophe, just right of\r\nsemicolon on most keyboards. Actually, if you use type\u0002writer double quote, \", you get a proper closing double quo\u0002tation mark.\r\n8",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/d9580ae1-b0d7-4454-b09a-9c0d9b93e5b4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b1541c3a7bbbdf9bdd3d6ac6c01bdc64746130ce388ca126290bb4e030d15646",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 589
      },
      {
        "segments": [
          {
            "segment_id": "d9580ae1-b0d7-4454-b09a-9c0d9b93e5b4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 8,
            "page_width": 595,
            "page_height": 842,
            "content": "breaks would have been worse in the overall\r\nassessment.\r\n• Another consequence of TEX’s approach is\r\nthat very little in TEX’s typesetting is\r\nabsolute. For example, the “unbreakable\r\nspace” ~ does not actually forbid a line break.\r\nIt merely assigns a very high penalty to\r\nbreaking at that point. In normal situations,\r\nTEX’s algorithm will avoid breaking there to\r\navoid incurring the penalty in the\r\noptimization.\r\n• In doing its job TEX also has to break apart\r\nboxes it has already made. For example, it\r\nmay need to break a word box to hyphenate a\r\nword to get a better line break. Or it may\r\nneed to break a paragraph between two lines\r\nto get a good page break.\r\n3.4 Input conventions\r\n• LATEX input is an ordinary text file, which\r\nmixes the content of the document with\r\nmarkup to process it.\r\n• The input conventions are reminiscent of the\r\nUnix shell (though not the same), in that\r\nsome characters are “ordinary”, while some\r\nare “special” and trigger special treatment.\r\n• Most characters (letters, numbers,\r\npunctuation) are “ordinary”, and represent\r\nthemselves.\r\n• The following characters are “special”:\r\n$ Switches TEX into math mode.\r\n\\ Indicates a command.\r\n{ } Indicate grouping and enclose the actual\r\narguments of a command.\r\n~ Unbreakable interword space.\r\n^ Indicate respectively subscripts and\r\nsuperscripts in math mode.\r\n# Used for formal arguments of a command.\r\n& Separates cells in rows of a table.\r\n% Indicates a comment. The comment runs\r\nfrom the % to the end of line (a bit like\r\nC++ // comments).\r\n• The characters @ [ ] can be used in ordinary\r\ntext, but behave specially in certain\r\ncircumstances.\r\n• The characters + - = < > are mainly used in\r\nmath mode, and there behave as you’d\r\nexpect. They can be used in ordinary text,\r\nbut may not always give what you expect in\r\nthat in some fonts that character code is\r\nassigned to a printed character different from\r\nwhat’s on the keyboard. < > gives ¡ ¿.\r\n• As with most programming languages,\r\nwhitespace and newlines are used to delimit\r\ntokens. Additional whitespace and newlines\r\nbeyond this have no effect, though they can\r\nbe used for source layout.\r\n• One exception is that a one or more\r\nconsecutive blank lines indicate a paragraph\r\nbreak.6\r\n• A consequence of all this is that you can’t\r\nnormally get extra horizontal whitespace on\r\nthe page by typing extra spaces into your\r\nLATEX source. Nor can you get extra vertical\r\nwhitespace by putting in extra blank lines.\r\nThese effects have to be achieved by invoking\r\nexplicit commands.\r\n3.5 Combinations\r\nSome combinations of otherwise ordinary\r\ncharacters are treated specially:\r\n• ‘‘ and ’’ give proper opening and closing\r\n(double) quotation marks, aka “inverted\r\ncommas”. (Don’t use \", the typewriter\r\ndouble quote!)7\r\n• Similarly, ‘ and ’ give single quotes. (The\r\nlatter also gives an apostrophe in ordinary\r\ntext and a prime in math mode).\r\n6A blank line is thus equivalent to the command \\par,\r\nand in some circumstances it’s clearer to use the explicit\r\n\\par command.\r\n7\r\nIn emacs’s latex-mode you can type in \", because that\r\nkey is bound to a command that automatically inserts the\r\nappropriate LATEX opening or closing quotation marks de\u0002pending on the context. By way of clarification, ‘ is the\r\nASCII grave accent, aka “backtick”, top-left on most key\u0002boards; ’ is the “single-quote” or apostrophe, just right of\r\nsemicolon on most keyboards. Actually, if you use type\u0002writer double quote, \", you get a proper closing double quo\u0002tation mark.\r\n8",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/d9580ae1-b0d7-4454-b09a-9c0d9b93e5b4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b1541c3a7bbbdf9bdd3d6ac6c01bdc64746130ce388ca126290bb4e030d15646",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 589
      },
      {
        "segments": [
          {
            "segment_id": "1e284cda-fc6c-4ff5-a2a4-32865a1e856f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 9,
            "page_width": 595,
            "page_height": 842,
            "content": "• In ordinary text, - gives an intra-word\r\nhyphen, -- gives an en dash used for ranges\r\nlike “17–42”, and --- gives an em\r\ndash—used for sentence punctuation.\r\nIn math mode - gives a minus sign, as in\r\n−x − y (produced by $-x-y$), which is\r\ndifferent again.8\r\n• Less obviously, certain combinations, like fi\r\nand fl give proper typographic ligatures:\r\n“fi”, “fl”—not “fi”, “fl”.\r\n• Note that you get the ellipsis “. . . ” by the\r\ncommand \\ldots (for “low dots”). Typing\r\nthree dots ... in your source gives dots too\r\nclose together for English typographic\r\nconventions, “...”. This is a case where\r\nsomething you’d expect to be done by a\r\ncombination isn’t. (There are a number of\r\nother dots commands available only in math\r\nmode.)\r\n3.6 Commands\r\n• Commands come in two varieties:\r\n1. \\ followed by a single non-letter\r\ncharacter\r\n2. \\ followed by a sequence of letters\r\n• Examples of the first kind: \\$ \\& \\% \\# \\ \\{\r\n\\} produce respectively $ & % # { }; while\r\n\\, produces a “thin” space.9\r\n• Examples of the second kind: \\S, \\P and\r\n\\copyright, which produce respectively the\r\nsection, paragraph and copyright symbols, §,\r\n¶ and \rc ; \\maketitle, which produces the\r\ndocument title, and \\large which switches to\r\nlarge font size, and \\Large, which switches to\r\nan even larger font size.\r\n• Note that such command names can consist\r\nonly of letters (not even digits), and are\r\ncase-sensitive.\r\n8\r\nIf you look closely, you can see that LATEX puts different\r\nspace around the minus sign depending on whether it’s a\r\nunary or binary operator.\r\n9The thin space is useful for quotes within quotes, to\r\ngive a little separation between an outer double quote and\r\nan inner single quote, like:\r\n“ ‘Work’ is a four-letter word”, said John.\r\n• Command-name delimiting:\r\n– The name of the command runs until\r\nthe first non-letter.\r\n– Often this will be some punctuation, but\r\nmay be whitespace.\r\n– If the command name is terminated by\r\nwhitespace, then all this whitespace is\r\ngobbled up.\r\n– This creates a problem if we want some\r\nwhite space in the output after the\r\nresult of the command.\r\n– Various solutions are presented later.\r\n• Arguments:\r\n– Most commands take one or more\r\narguments.\r\n– Arguments follow the command name\r\nand are enclosed in braces.\r\n– The outer braces just enclose the\r\nargument and are stripped away before\r\nthe argument is actually passed to the\r\ncommand.\r\n– Any given command has a fixed arity\r\n(number of arguments that it accepts).\r\nBut see later point.\r\n– LATEX checks and generally complains if\r\na command is given insufficient\r\narguments. Additional arguments will\r\nnot be passed to the command, and in\r\ngeneral will end up being treated as\r\nfollowing text that just happens to have\r\nbeen put in grouping braces.\r\n• Optional arguments:\r\n– Quite a few commands also accept\r\noptional arguments.\r\n– The optional arguments if supplied are\r\nenclosed in square brackets, and usually\r\nbut not always come before the\r\nobligatory arguments.\r\n– If an optional argument is not supplied,\r\nthen some default is used.\r\n– There’s the potential problem that some\r\nordinary text with square brackets\r\nfollowing the command may be mistaken\r\n9",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/1e284cda-fc6c-4ff5-a2a4-32865a1e856f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1fdc82b9df483cbc4f9482dcdf1d7aad8890ec084b7eb06ab4704c695b506199",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 538
      },
      {
        "segments": [
          {
            "segment_id": "1e284cda-fc6c-4ff5-a2a4-32865a1e856f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 9,
            "page_width": 595,
            "page_height": 842,
            "content": "• In ordinary text, - gives an intra-word\r\nhyphen, -- gives an en dash used for ranges\r\nlike “17–42”, and --- gives an em\r\ndash—used for sentence punctuation.\r\nIn math mode - gives a minus sign, as in\r\n−x − y (produced by $-x-y$), which is\r\ndifferent again.8\r\n• Less obviously, certain combinations, like fi\r\nand fl give proper typographic ligatures:\r\n“fi”, “fl”—not “fi”, “fl”.\r\n• Note that you get the ellipsis “. . . ” by the\r\ncommand \\ldots (for “low dots”). Typing\r\nthree dots ... in your source gives dots too\r\nclose together for English typographic\r\nconventions, “...”. This is a case where\r\nsomething you’d expect to be done by a\r\ncombination isn’t. (There are a number of\r\nother dots commands available only in math\r\nmode.)\r\n3.6 Commands\r\n• Commands come in two varieties:\r\n1. \\ followed by a single non-letter\r\ncharacter\r\n2. \\ followed by a sequence of letters\r\n• Examples of the first kind: \\$ \\& \\% \\# \\ \\{\r\n\\} produce respectively $ & % # { }; while\r\n\\, produces a “thin” space.9\r\n• Examples of the second kind: \\S, \\P and\r\n\\copyright, which produce respectively the\r\nsection, paragraph and copyright symbols, §,\r\n¶ and \rc ; \\maketitle, which produces the\r\ndocument title, and \\large which switches to\r\nlarge font size, and \\Large, which switches to\r\nan even larger font size.\r\n• Note that such command names can consist\r\nonly of letters (not even digits), and are\r\ncase-sensitive.\r\n8\r\nIf you look closely, you can see that LATEX puts different\r\nspace around the minus sign depending on whether it’s a\r\nunary or binary operator.\r\n9The thin space is useful for quotes within quotes, to\r\ngive a little separation between an outer double quote and\r\nan inner single quote, like:\r\n“ ‘Work’ is a four-letter word”, said John.\r\n• Command-name delimiting:\r\n– The name of the command runs until\r\nthe first non-letter.\r\n– Often this will be some punctuation, but\r\nmay be whitespace.\r\n– If the command name is terminated by\r\nwhitespace, then all this whitespace is\r\ngobbled up.\r\n– This creates a problem if we want some\r\nwhite space in the output after the\r\nresult of the command.\r\n– Various solutions are presented later.\r\n• Arguments:\r\n– Most commands take one or more\r\narguments.\r\n– Arguments follow the command name\r\nand are enclosed in braces.\r\n– The outer braces just enclose the\r\nargument and are stripped away before\r\nthe argument is actually passed to the\r\ncommand.\r\n– Any given command has a fixed arity\r\n(number of arguments that it accepts).\r\nBut see later point.\r\n– LATEX checks and generally complains if\r\na command is given insufficient\r\narguments. Additional arguments will\r\nnot be passed to the command, and in\r\ngeneral will end up being treated as\r\nfollowing text that just happens to have\r\nbeen put in grouping braces.\r\n• Optional arguments:\r\n– Quite a few commands also accept\r\noptional arguments.\r\n– The optional arguments if supplied are\r\nenclosed in square brackets, and usually\r\nbut not always come before the\r\nobligatory arguments.\r\n– If an optional argument is not supplied,\r\nthen some default is used.\r\n– There’s the potential problem that some\r\nordinary text with square brackets\r\nfollowing the command may be mistaken\r\n9",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/1e284cda-fc6c-4ff5-a2a4-32865a1e856f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1fdc82b9df483cbc4f9482dcdf1d7aad8890ec084b7eb06ab4704c695b506199",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 538
      },
      {
        "segments": [
          {
            "segment_id": "920a5b53-29cd-4d9e-a330-244acba91d96",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 10,
            "page_width": 595,
            "page_height": 842,
            "content": "for an optional argument. The solution\r\nis to enclose that text inside grouping\r\nbraces, which protects it from being\r\ninterpreted as an optional argument.\r\n• With rare exceptions, paragraph breaks are\r\nnot permitted in command arguments. This\r\nis a deliberate safety feature, to catch missing\r\nclosing braces on arguments. It triggers\r\nLATEX’s “Runaway argument?” error\r\nmesssage. The idea is that command\r\narguments should generally be fairly small\r\nchunks of material, and if you encounter a\r\nparagraph break it’s more likely because the\r\nargument isn’t properly closed.\r\n3.7 Environments\r\n• To provide handling of chunks of material\r\nbigger than can reasonably be passed as\r\ncommand arguments, LATEX also provides\r\nenviroments.\r\n• Environments are invoked by two matching\r\ncommands, \\begin and \\end.\r\n• They each take as argument the name of the\r\nenvironment (no backslash).\r\n• The text between the \\begin and the\r\ncorrresponding \\end is affected by the\r\nformatting of that environment.\r\n• The \\begin and \\end must nest properly.\r\n• For some environments, the \\begin command\r\ntakes additional arguments to control the\r\nformatting of the environment.\r\n• Environments provide local scope for\r\ndeclarations. (That is, the effect of non-global\r\ndeclarations made inside an environment are\r\nundone at the end of that environment.)\r\n3.8 After-sentence space\r\n• In typography (at least in English-speaking\r\ncountries) it’s conventional to put a little\r\nextra space after punctuation that ends a\r\nsentence. (Usually a full stop.)\r\n• But figuring out what is a sentence is way\r\nbeyond a mere program.\r\n• So LATEX follows a rule which works correctly\r\nalmost all the time, and has the advantage of\r\nbeing simple and predictable, so you can\r\neasily tell when you need to over-ride LATEX.\r\n• If the full stop comes after an upper-case\r\nletter, then LATEX assumes it’s marking\r\ninitials (like N.S.W.) and treats the following\r\nspace as ordinary interword space.\r\n• If the full stop comes after a lower-case letter,\r\nthen it’s treated as marking the end of a\r\nsentence, and extra following space is\r\ninserted.\r\n• This extra space isn’t fixed. Like many spaces\r\nin LATEX it’s stretchable (or squashable) as\r\nneeded to optimize the typesetting, but in\r\ngeneral it’s larger than an ordinary\r\ninter-word space.\r\n• What about when LATEX gets it wrong?\r\n– Putting a \\ (yes, that’s a backslash\r\nfollowed by a space) immediately after\r\nthe full stop puts an ordinary interword\r\nspace there, even if the preceding letter\r\nwas lower case.\r\nThis is useful for abbreviations inside a\r\nsentence.\r\n– Putting a \\@ immediately before the full\r\nstop forces it to be treated as\r\nend-of-sentence punctuation, making the\r\nfollowing space bigger.\r\n• This adjustment may be necessary even when\r\nother punctuation, like parens and quotes,\r\nintervenes between the full stop and the\r\nfollowing space.\r\n• Similarly for other sentence punctuation:\r\nquestion mark, exclamation mark and colon.\r\n• Don’t lose too much sleep over this. If you\r\nget it wrong, at worst you’ll have a little bit\r\ntoo much or too little space after some\r\npunctuation, which probably only a dedicated\r\ntypographer will notice, not your average\r\npunter.\r\n10",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/920a5b53-29cd-4d9e-a330-244acba91d96.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f9d05b0a3c29c72aa789b6c47ebf16170810f295e373f455d69bd3bb62908acd",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 508
      },
      {
        "segments": [
          {
            "segment_id": "6eaf399e-ad8d-47dd-96c5-837053b125ed",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 11,
            "page_width": 595,
            "page_height": 842,
            "content": "3.9 Accents and symbols\r\n• There are a relatively small number of\r\nsymbols, such as the ¶ and § already\r\nmentioned, available in ordinary text. In our\r\nDepartment, \\o, which produces ø, comes in\r\nhandy for names like Søndergaard.\r\n• A huge number of symbols (numbering in the\r\nthousands) are available, but mostly only in\r\nmath mode.\r\nThis is not a serious impediment, since you\r\ncan always switch temporarily into math\r\nmode to get any symbol as you need it. See\r\nlater.\r\n• There are a number of commands for putting\r\nvarious accents on letters, etc., in ordinary\r\ntext (and many more in math mode).\r\n• For example: \\‘{e}, \\’{e}, \\^{a}, \\\"{o},\r\n\\c{c} produce `e, ´e, a, ˆ o, ¨ c¸ respectively.\r\n• To put accents on the letters “i” and “j” you\r\nneed to use the dotless versions, produced by\r\nthe commands \\i and \\j, respectively like ¯ı\r\nfrom \\={\\i}.\r\n• Such commands are adequate for small\r\nchunks of non-English text needing accents,\r\nbut not for producing whole non-English\r\ndocuments. For that see later.\r\n3.10 Declarations, grouping, and\r\nscope\r\n• Some commands produce some sort of\r\noutput, such as the commands to produce\r\nspecial symbols or even tables of contents.\r\n• But many commands just change LATEX’s\r\nstate: They are declarations.\r\n• It’d be a pain if every time you had a\r\ndeclaration you had to later put in another\r\ndeclaration to restore LATEX to its previous\r\nstate (which you might not even know).\r\n• Therefore, almost all declarations in LATEX\r\nare local to some scope: They have their\r\neffect when processed, but only temporarily\r\n— their effects are undone and the original\r\nstate restored on leaving that scope.\r\n• Scope is provided by environments and by\r\ngrouping braces.10\r\n• There are, however, a small number of\r\ndeclarations which are global and do not obey\r\nthese local scoping rules. One of these is\r\n\\pagestyle, for instance.\r\n3.11 Appearance of type\r\n• LATEX provides a number of ways of changing\r\nthe appearance of the type.\r\n• Used with judgement (and not overdone)\r\nsuch control of appearance can aid\r\nunderstanding, by providing consistent, visual\r\ntypographic markers.\r\n• Type size:\r\n{\\tiny tiny}\r\n{\\scriptsize scriptsize}\r\n{\\footnotesize footnotesize}\r\n{\\small small}\r\n{\\normalsize normalsize}\r\n{\\large large}\r\n{\\Large Large}\r\n{\\LARGE LARGE}\r\n{\\huge huge}\r\n{\\Huge Huge}\r\nproduces\r\ntiny scriptsize footnotesize small normalsize large\r\nLarge LARGE hugeHuge\r\nNote, sizes are relative to the base size of the\r\ndocument, which normally can be 10pt\r\n(default), or 11pt or 12pt, as specified as\r\noption to \\documentclass.\r\n10Except, of course for the outer braces that enclose a\r\ncommand argument, which are stripped away before the ar\u0002gument is passed to the command. The outermost braces\r\naround the body of a command definition are likewise outer\u0002most braces around the arguments of the \\newcommand com\u0002mand and so are stripped away when the command is de\u0002fined, and don’t provide scoping. This is necessary so that\r\na command can expand, say, to a declaration and still have\r\neffect. Analogous remarks apply to the two bodies of an\r\nenvironment definition.\r\n11",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/6eaf399e-ad8d-47dd-96c5-837053b125ed.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=aa86e36e9c490cf1a6be5c3b3eb17164428cca2b62ceb78c10cfcf2328f2c073",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 503
      },
      {
        "segments": [
          {
            "segment_id": "2c7e0bfe-5ad2-40e7-93e7-7ab1dd2535a1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 12,
            "page_width": 595,
            "page_height": 842,
            "content": "• Type style can be done via declarations:\r\n{\\rm Roman}\r\n{\\it Italic}\r\n{\\bf Boldface}\r\n{\\sf Sans Serif}\r\n{\\sl Slanted}\r\n{\\sc Small Caps}\r\n{\\tt Teletype or typewriter}\r\nproduces\r\nRoman Italic Boldface Sans Serif Slanted\r\nSmall Caps Teletype or typewriter\r\n• Or, usually more conveniently, via commands\r\nwith an argument.\r\n\\textrm{Roman}\r\n\\textit{Italic}\r\n\\textbf{Boldface}\r\n\\textsf{Sans Serif}\r\n\\textsl{Slanted}\r\n\\textsc{Small Caps}\r\n\\texttt{Teletype or typewriter}\r\nproduces\r\nRoman Italic Boldface Sans Serif Slanted\r\nSmall Caps Teletype or typewriter\r\n• Almost always, the command versions are\r\npreferable, since they take care automatically\r\nof the so-called italic correction:\r\nNormal {\\it italic text} back.\r\n\\\\\r\nNormal \\textit{italic text} back.\r\n\\\\\r\nNormal {\\it italic text\\/} back.\r\nproduces\r\nNormal italic text back.\r\nNormal italic text back.\r\nNormal italic text back.\r\nIt’s subtle, but, in the first line, because of\r\nthe oblique italic font the “t” of “text” leans\r\na bit too close to the “b” of “back”. In the\r\nsecond and third lines a tiny bit of extra\r\nspace is added, either automatically by the\r\n\\textit command, or explicitly by the italic\r\ncorrection \\/ command.\r\n• However, the declaration forms are more\r\nconvenient if you’re applying the type-style\r\nchange to a whole chunk of text, like an\r\nentire environment.\r\n• Subject to availability of fonts, these type\r\nstyles can be combined:\r\nOrdinary \\textit{italic}\r\nor \\texttt{typewriter}\r\n\\\\\r\n\\textbf{Bold \\textit{italic}\r\nor \\texttt{typewriter}}\r\nproduces\r\nOrdinary italic or typewriter\r\nBold italic or typewriter\r\nFor some font families, not all combinations\r\nmay be available.\r\n• You really should never use such\r\ntype-changing commands in the body of your\r\ndocument.\r\n• Rather, if some identifiable part of your\r\ndocument needs special typographic\r\ntreatment, you should define a command (or\r\nenvironment) for it. (See later.) You do the\r\ntype changing in the definition of the\r\ncommand, then tag the text in your\r\ndocument that needs the special treatment\r\nwith this command.\r\n• An important exception to this is the \\emph\r\ncommand. It is really more like semantic\r\nmarkup, indicating that the text is to be\r\nemphasized, by the normal convention of\r\nputting it in italics. It has the corresponding\r\n\\em declaration, which is useful for\r\nemphasizing larger blocks of text (like an\r\nentire environment).\r\n12",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/2c7e0bfe-5ad2-40e7-93e7-7ab1dd2535a1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a2cb56cd84a2ca145025c2f7da37d60055aa2630cd06dea67ba980478919f15d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 356
      },
      {
        "segments": [
          {
            "segment_id": "3831136c-f653-4d53-b00c-9cceb489514c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 13,
            "page_width": 595,
            "page_height": 842,
            "content": "\\emph{The convention is that\r\n\\emph{emphasized} text within\r\nemphasized text is set in\r\n\\emph{roman} style.}\r\nproduces\r\nThe convention is that emphasized text\r\nwithin emphasized text is set in roman style.\r\n• Never use underlining! Underlining was used\r\nto indicate emphasis on limited archaic\r\ndevices like typewriters. It really has no place\r\nin proper typesetting, and (depending on how\r\nit’s done) can cause numerous problems. If\r\nthe underline is just below the baseline, it can\r\ninterfere with descenders11 and severely affect\r\nlegibility. If the underline is positioned so as\r\nto avoid interfering either with descenders (or\r\nwith ascenders12 on the next line), it requires\r\nintroducing some additional space between\r\nthe affected lines, which breaks up the visual\r\nunity of the paragraph. It’s even worse when\r\nan underlined word gets hyphenated across\r\ntwo lines, because then more lines are\r\naffected.\r\nIn normal text, you can use \\emph; in\r\nmathematics you can use conventions like\r\n\\boldmath, to indicate things like vectors,\r\nwhich are conventionally underlined in typed\r\nor handwritten manuscripts.\r\nWell, I exaggerate by saying never. There are\r\nsome rare situations in which it might make\r\nsense to use underlining. For example, it can\r\nprovide an additional means of indicating\r\nconsistent distinctions in mathematics, once\r\nyou’ve used up all you can with changes of\r\ntypeface and accents. And perhaps even in\r\nordinary text you might want underlining for\r\nsome special indicative purpose, with all its\r\nproblems. To this end, LATEX does have some\r\nfacilities and packages for underlining, both\r\nin ordinary text and in mathematics.\r\n11A descender is that part of letters, like “g” and “q”,\r\nthat goes below the baseline.\r\n12An ascender is that part of lower-case letters, like “b”\r\nand “k”, that goes above the height of a lower-case “x”.\r\n• There are additional type size and style\r\nfeatures available in math mode.\r\n3.12 Text justification\r\n• Normally, LATEX fully justifies the output\r\ntext, on left and right.\r\n• Other forms of justification can be achieved\r\nby the center, flushleft, and flushright\r\nenvironments.\r\n\\par\r\nHow to Dominate Men,\r\nSubjugate Women, and\r\nStupefy Children\r\nby\r\nSalvador Dali\r\n\\par\r\nproduces\r\nHow to Dominate Men, Subjugate Women,\r\nand Stupefy Children by Salvador Dali\r\n\\begin{flushleft}\r\nHow to Dominate Men,\r\nSubjugate Women, and\r\nStupefy Children\r\nby\r\nSalvador Dali\r\n\\end{flushleft}\r\nproduces\r\nHow to Dominate Men, Subjugate Women,\r\nand Stupefy Children by Salvador Dali\r\n\\begin{flushright}\r\nHow to Dominate Men,\r\nSubjugate Women, and\r\nStupefy Children\r\nby\r\nSalvador Dali\r\n\\end{flushright}\r\nproduces\r\n13",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/3831136c-f653-4d53-b00c-9cceb489514c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b2e53ef4d202e62a027c3494178506f3e21b67bd69d9feb22cc4723c056f3aa2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 401
      },
      {
        "segments": [
          {
            "segment_id": "52584817-2485-4d6a-b083-05b766e7fb5c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 14,
            "page_width": 595,
            "page_height": 842,
            "content": "How to Dominate Men, Subjugate Women,\r\nand Stupefy Children by Salvador Dali\r\n\\begin{center}\r\nHow to Dominate Men,\r\nSubjugate Women, and\r\nStupefy Children\r\nby\r\nSalvador Dali\r\n\\end{center}\r\nproduces\r\nHow to Dominate Men, Subjugate Women,\r\nand Stupefy Children by Salvador Dali\r\nThe text is a chapter heading from [2].\r\n• There are corresponding declarations,\r\n\\centering, \\raggedright, and\r\n\\raggedleft. They aren’t often used, but\r\ncome in handy sometimes.\r\nIn fact, I’ve come to appreciate their\r\nhandiness more recently. The environment\r\nforms, as well as altering TEX’s formatting\r\nparameters to achieve their effects, also\r\nintroduce some vertical space above and\r\nbelow the formatted text. In most cases, like\r\na hand-formatted centered heading, this is\r\nwhat you want. The declaration forms just\r\nalter the formatting parameters, without\r\nintroducing the extra vertical space. This can\r\nbe useful, particularly when you’re defining\r\nyour own formatting environments, when you\r\nwant the layout effects without the space.\r\n• As usual, you should normally avoid using\r\nsuch explicit justification changes in the body\r\nof your document. If some identifiable part of\r\nyour document needs such special treatment,\r\ndo it via a user-defined command or\r\nenvironment.\r\n3.13 Line and page breaks\r\n• The \\\\ command normally gives a line break\r\n(without starting a new paragraph). It’s\r\nparticularly handy in centered text, where\r\nusually we want to control the division into\r\nlines.\r\n\\begin{center}\r\nHow to Dominate Men, \\\\\r\nSubjugate Women, and \\\\\r\nStupefy Children\r\n\\\\ by \\\\\r\nSalvador Dali\r\n\\end{center}\r\nproduces\r\nHow to Dominate Men,\r\nSubjugate Women, and\r\nStupefy Children\r\nby\r\nSalvador Dali\r\n• The \\\\ command can take an optional length\r\nargument, which specifies how much\r\nadditional vertical whitespace to insert after\r\nthe line break.\r\n• There’s also a “starred” form \\\\*, which\r\ninhibits a page break at the line break. With\r\ncare, it can be used to keep separate lines\r\ntogether on the same page, although there\r\nare perhaps better ways of achieving this.\r\n• Normally, LATEX does a good job of deciding\r\non page breaks, but you can force them if\r\nnecessary:\r\n\\newpage Goes to a new page (new column\r\nin two-column mode).\r\n\\clearpage Goes to a new page.\r\n\\cleardoublepage Like \\clearpage, but in\r\ntwo-sided printing takes us to an\r\nodd-numbered (right-hand) page,\r\ninserting a blank left-hand page if\r\nnecessary.\r\nBoth the “clear” forms also force out any\r\naccumulated floats.\r\n• There are also various commands to\r\nencourage or discourage line or page breaks\r\nat a given point: \\linebreak, \\nolinebreak,\r\n\\pagebreak, \\nopagebeak. They each take\r\nan optional argument, a number 0 to 4, to\r\nspecify the degree of encouragement or\r\ndiscouragement.\r\n14",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/52584817-2485-4d6a-b083-05b766e7fb5c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b4a5754cabc9f3f7db051f8cfc9e5d6e695e3f6f68791710cebee65cf3d1da13",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 423
      },
      {
        "segments": [
          {
            "segment_id": "61b720da-3f46-4696-a9ee-e0196d558ba7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 15,
            "page_width": 595,
            "page_height": 842,
            "content": "3.14 Displays\r\n• Often text needs to be set apart visually, or\r\n“displayed”\r\n• LATEX provides several environments for these\r\npurposes:\r\nquote For short quotations.\r\nquotation For longer (multi-paragraph)\r\nquotations.\r\nverse For verse and poetry.\r\n• There are also environments for displaying\r\nmathematics, which will be described\r\nseparately.\r\n3.15 Lists\r\n• LATEX provides a number of environments for\r\nlists of items:\r\nitemize For itemized (bulleted) lists.\r\nenumerate For numbered lists.\r\ndescription For tagged “description” lists.\r\n• Within the list, each item is begun with an\r\n\\item command.\r\n• In a description environment, the optional\r\nargument to \\item provides the term to be\r\ndescribed.\r\n•\r\n\\begin{enumerate}\r\n\\item First item, which has a\r\nnested itemized list\r\n\\begin{itemize}\r\n\\item First nested item\r\n\\item Second nested item\r\n\\end{itemize}\r\n\\item Second item\r\n\\end{enumerate}\r\nproduces\r\n1. First item, which has a nested itemized\r\nlist\r\n– First nested item\r\n– Second nested item\r\n2. Second item\r\n•\r\nThree animals you should\r\nknow about are:\r\n\\begin{description}\r\n\\item[gnat]\r\nA small animal, found\r\nin the North Woods,\r\nthat causes no end of\r\ntrouble.\r\n\\item[gnu]\r\nA large animal, found in\r\ncrossword puzzles,\r\nthat causes no end of trouble.\r\n\\item[armadillo]\r\nA medium-sized animal,\r\nnamed after a\r\nmedium-sized Texas city.\r\n\\end{description}\r\nproduces\r\nThree animals you should know about are:\r\ngnat A small animal, found in the North\r\nWoods, that causes no end of trouble.\r\ngnu A large animal, found in crossword puz\u0002zles, that causes no end of trouble.\r\narmadillo A medium-sized animal, named\r\nafter a medium-sized Texas city.\r\n(This example is take from [7].)\r\n• These environments nest gracefully (up to\r\nfour deep, at least).\r\n• The “bullets” and number style depend on\r\nthe level.\r\n• As with most things in LATEX, the formatting\r\nof these environments is highly configurable,\r\nthough the default serves for almost all\r\npurposes.\r\n• There are also some lower-level list primitives\r\nfor defining your own list structures.\r\n• Many standard LATEX environments are\r\nactually defined in this way as trivial,\r\none-item lists.\r\n15",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/61b720da-3f46-4696-a9ee-e0196d558ba7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7db4e1001398c28c33279e3db3d77bb19d6bbfc1240594ccb35c2386765ee2de",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 325
      },
      {
        "segments": [
          {
            "segment_id": "58c84c4b-78c4-44e1-a289-52180b152f0b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 16,
            "page_width": 595,
            "page_height": 842,
            "content": "3.16 Overall source document\r\nstructure\r\n• LATEX documents follow a consistent\r\nstructure:\r\n\\documentclass[a4paper]{article}\r\npreamble\r\n\\begin{document}\r\nbody\r\n\\end{document}\r\n• In the preamble go various declarations to\r\nload packages, set various document\r\nparameters, and define new commands and\r\nenvironments, etc.\r\n• Nothing in the preamble should generate any\r\ntext.\r\n• In the body goes the actual text of the\r\ndocument, which may be lengthy and spread\r\nover several files.\r\n3.17 Document class\r\n• Aside from whitespace and comments, and\r\nsome uncommon constructs we won’t describe\r\nhere, every LATEX document has to start with\r\na \\documentclass declaration.13\r\n• The \\documentclass declaration tells LATEX\r\nwhat kind of document it is. The standard\r\ndocument classes are:\r\narticle An article, such as a conference\r\npaper or journal article. Use this when\r\nnothing else fits.\r\nreport For something longer, like a technical\r\nreport.\r\nbook For a full-scale book.\r\nslides Originally for overhead\r\ntransparencies. Nowadays probably\r\nmore useful for producing say PDF\r\n“slides” to be displayed on screen.\r\n13It is actually possible to \\input the \\documentclass dec\u0002laration. This can sometimes be useful for automatically\r\ngenerated documents.\r\nAutomatically chooses appropriate big\r\nfonts.14\r\nletter For letters (like you put in an\r\nenvelope with a postage stamp).\r\n• Additional classes have been developed by\r\nvarious organizations, like publishers and\r\nprofessional societies, for specific purposes,\r\nlike to ensure that all papers submitted to a\r\nparticular conference are formatted in a\r\nconsistent way.\r\n• The class determines the overall formatting of\r\nthe document, and may make class-specific\r\ncommands and environments available.\r\n• Options can be used to modify the standard\r\nsettings for that document class. Commonly\r\nused are:\r\n11pt 12pt To set the document with a base\r\ntype size of 11 or 12 points, instead of\r\nthe default 10 points.\r\na4paper To format for A4 paper, instead of\r\nthe default U.S. Letter size.\r\noneside twoside To format respectively for\r\none-sided or two-sided printing.\r\nIn two-sided printing, LATEX uses\r\ndifferent margins for odd-numbered\r\n(right-hand) and even-numbered\r\n(left-hand) pages. In one-sided printing,\r\nall pages are treated as right-hand pages.\r\nThe default for book is twoside; the\r\ndefault for article and report is\r\noneside.\r\ntwocolumn Format for two-column pages.\r\nlandscape Format for landscape printing.\r\n• Not all options apply to all classes: for\r\nexample, you can’t have two-column slides.\r\n(Well, not via the standard class options.)\r\n• Options like a4paper, twoside and\r\nlandscape usually affect only LATEX’s\r\nformatting of pages. It will sometimes take\r\nfurther downstream intervention to get the\r\n14There are a number of packages, like texpower, prosper,\r\nand foiltex, designed to support presentations, with some\r\nsupport for animations and transitions in the generated\r\nPDF.\r\n16",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/58c84c4b-78c4-44e1-a289-52180b152f0b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8e6c6490699aa56fb0ceaf06af7bab5910618e3e45a780c7c79ea97bb638137c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 431
      },
      {
        "segments": [
          {
            "segment_id": "ab45e513-7827-496e-9904-05e30f83ae83",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 17,
            "page_width": 595,
            "page_height": 842,
            "content": "actual printer or on-screen display program\r\nto respect them.\r\n• For would-be wizards: Classes are defined by\r\n.cls files, which are just files of LATEX\r\ndefinitions following special conventions.\r\nThey are looked up and loaded following the\r\nsame TEXINPUTS path as \\input. If you’re\r\ncurious, you can look at the standard\r\ndocument classes to see how they’re done.\r\nBeware, they’ll usually contain quite a lot of\r\nlow-level TEX commands. Try something like\r\nlocate article.cls to find out where\r\nthey’re stored on your system.\r\n3.18 Packages\r\n• LATEX comes with a huge number of standard\r\nand contributed “packages”, which provide\r\nextra facilities.\r\n• As as rule, if you encounter some typographic\r\nproblem, almost always there’s an existing\r\npackage to do the job.\r\n• Packages are loaded with the \\usepackage\r\ncommand.\r\n• Its arguments are a list of package names,\r\nseparated by commas (no spaces), though\r\nusually it’s cleaner to load just a single\r\npackage with each call.\r\n\\usepackage{color,graphicx}\r\nLoads both the color and graphicx\r\npackages.\r\n• \\usepackage can take an optional argument,\r\nwhich gives a comma-separated list of options\r\nwhich are passed to the packages.\r\n\\usepackage[french]{babel}\r\nLoads the babel package (which provides\r\nmultilingual support), passing it the french\r\noption, to set French as the default language.\r\n• For would-be wizards: As with classes,\r\npackages are defined by files of LATEX\r\ndefinitions. For historical reasons, since they\r\nwere formerly called “styles”, they have\r\nextension .sty. If you’re curious, try\r\nsomething like locate color.sty to find\r\nwhere the standard packages live on your\r\nsystem, so you can take a look at how they’re\r\ndone. Again, beware, they’ll usually contain a\r\nlot of low-level TEX.\r\n3.19 Front stuff\r\n• \\maketitle produces the document’s title in\r\nthe appropriate format for the document\r\nclass.\r\n• It draws on information from the \\title,\r\n\\author, and optionally \\date declarations\r\nin the preamble.\r\n• The information for separate authors is\r\nseparated by \\and.\r\n• Multiple lines for an author (say to give\r\naddress) can be obtained by \\\\.\r\n• Inside the arguments of \\title and \\author\r\nthings like acknowledgements and affiliations\r\ncan be given by the \\thanks command\r\n(whose argument will normally end up as a\r\nfootnote).\r\n• The abstract is produced by the abstract\r\nenvironment.\r\n• The table of contents, list of figures, and list\r\nof tables are produced, respectively, by the\r\n\\tableofcontents, \\listoffigures and\r\n\\listoftables commands.\r\n3.20 Document sectioning\r\n• LATEX provides a hierarchical organization of\r\nsectioning commands—from highest to\r\nlowest:\r\nCommand Level\r\n\\chapter 0\r\n\\section 1\r\n\\subsection 2\r\n\\subsubsection 3\r\n\\paragraph 4\r\n\\subparagraph 5\r\n17",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/ab45e513-7827-496e-9904-05e30f83ae83.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5554ac140a87e267dfc0fe50c69a9e5d8c2077c6064842bb1426cd0c1b7e8248",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 419
      },
      {
        "segments": [
          {
            "segment_id": "016f103d-cb7e-40d2-bf39-40c1717d8fcc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 18,
            "page_width": 595,
            "page_height": 842,
            "content": "• To maintain the hierarchy, any sectional unit\r\nmust be contained in the next higher unit.\r\n• However, there is no \\chapter command\r\ndefined in the article class, so for articles\r\n\\section is the highest-level sectioning\r\ncommand. (This is intended to make it easier\r\nto include an article as a chapter of a book.)\r\n• Sectional units are normally numbered\r\nautomatically: A sectioning command\r\nincrements the number for that sectioning\r\nlevel, and resets the numbers for lower-level\r\nsectional units. “Lower-level” means bigger\r\n(deeper) level numbers.\r\n• Sectioning commands take an argument\r\nwhich provides the heading for the sectional\r\nunit, the corresponding entry for the table of\r\ncontents, and a running head for the page\r\n(for some page styles).\r\n• They can also take an optional argument\r\nwhich is used for the table of contents and\r\nrunning head for the situations when you\r\nwant it to be different from the heading.\r\nA common reason is that for a long section\r\nheading, too long to fit in the column width,\r\nyou might want to introduce a \\\\ to put the\r\nline break where you want it, but not have\r\nthe line break in the table of contents or\r\nrunning head.\r\n• There are also “starred” forms, like\r\n\\section*, which are unnumbered, and\r\nproduce no entry in the table of contents.\r\n• Few documents use the full range: many will\r\nuse only say \\section and \\subsection.\r\n• The table of contents is produced by the\r\n\\tableofcontents command.\r\n• The names of the \\paragraph and\r\n\\subparagraph commands are perhaps\r\nunfortunate. They are different from LATEX’s\r\nnotion of a typeset paragraph (as indicated\r\nby blank line or \\par command). A\r\n\\paragraph sectional unit may actually\r\nconsist of several typeset paragraphs.\r\n• The \\appendix command normally doesn’t\r\nproduce any output, but it changes the\r\nnumbering of sectional units to be suitable\r\nfor an appendix. For example, in the article\r\nclass, the \\appendix command changes the\r\n\\section command to number sections by\r\nletters, “A”, “B”, “C”. . .\r\n• There is a rarely used, higher-level sectioning\r\ncommand \\part at level −1. It’s anomalous\r\nin that a new \\part doesn’t reset lower-level\r\ncounters (\\chapter or \\section, depending\r\non the document class).\r\n• There are two user-settable counters\r\nsecnumdepth and tocdepth, which control\r\nthe level at which sectional units are\r\nnumbered and entered in the table of\r\ncontents.\r\n3.21 Layout of a LATEX source file\r\n• Layout (whitespace, indentation, line\r\nbreaking) in the LATEX source file is largely\r\nignored.\r\n• However, you should pay attention to layout\r\nto enhance readability of the LATEX source, as\r\nyou would say for a C program. For example,\r\nthe layout of the items in an itemized list\r\nshould approximate the indentation of the\r\nfinal typeset output.\r\n• The comment % also magically eats all\r\nleading whitespace from the beginning of the\r\nnext line. This can be very useful to layout\r\nand indent the LATEX by lines without\r\nintroducing extra spaces into the output.15\r\n• Needless to say, a LATEX source file should\r\ninclude reasonable comments, as they will\r\nhelp the reader.\r\n4 Breaking Up Your\r\nDocument 1\r\n4.1 \\input\r\n• Keeping the whole of a large document in a\r\nsingle file can be unwieldy.\r\n15A comment % can’t occur inside a command name.\r\n18",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/016f103d-cb7e-40d2-bf39-40c1717d8fcc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1778dc2acabed81e04d8c73a1e5a2968d2ddcc99c2c15e99fab816524e0b2887",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 541
      },
      {
        "segments": [
          {
            "segment_id": "016f103d-cb7e-40d2-bf39-40c1717d8fcc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 18,
            "page_width": 595,
            "page_height": 842,
            "content": "• To maintain the hierarchy, any sectional unit\r\nmust be contained in the next higher unit.\r\n• However, there is no \\chapter command\r\ndefined in the article class, so for articles\r\n\\section is the highest-level sectioning\r\ncommand. (This is intended to make it easier\r\nto include an article as a chapter of a book.)\r\n• Sectional units are normally numbered\r\nautomatically: A sectioning command\r\nincrements the number for that sectioning\r\nlevel, and resets the numbers for lower-level\r\nsectional units. “Lower-level” means bigger\r\n(deeper) level numbers.\r\n• Sectioning commands take an argument\r\nwhich provides the heading for the sectional\r\nunit, the corresponding entry for the table of\r\ncontents, and a running head for the page\r\n(for some page styles).\r\n• They can also take an optional argument\r\nwhich is used for the table of contents and\r\nrunning head for the situations when you\r\nwant it to be different from the heading.\r\nA common reason is that for a long section\r\nheading, too long to fit in the column width,\r\nyou might want to introduce a \\\\ to put the\r\nline break where you want it, but not have\r\nthe line break in the table of contents or\r\nrunning head.\r\n• There are also “starred” forms, like\r\n\\section*, which are unnumbered, and\r\nproduce no entry in the table of contents.\r\n• Few documents use the full range: many will\r\nuse only say \\section and \\subsection.\r\n• The table of contents is produced by the\r\n\\tableofcontents command.\r\n• The names of the \\paragraph and\r\n\\subparagraph commands are perhaps\r\nunfortunate. They are different from LATEX’s\r\nnotion of a typeset paragraph (as indicated\r\nby blank line or \\par command). A\r\n\\paragraph sectional unit may actually\r\nconsist of several typeset paragraphs.\r\n• The \\appendix command normally doesn’t\r\nproduce any output, but it changes the\r\nnumbering of sectional units to be suitable\r\nfor an appendix. For example, in the article\r\nclass, the \\appendix command changes the\r\n\\section command to number sections by\r\nletters, “A”, “B”, “C”. . .\r\n• There is a rarely used, higher-level sectioning\r\ncommand \\part at level −1. It’s anomalous\r\nin that a new \\part doesn’t reset lower-level\r\ncounters (\\chapter or \\section, depending\r\non the document class).\r\n• There are two user-settable counters\r\nsecnumdepth and tocdepth, which control\r\nthe level at which sectional units are\r\nnumbered and entered in the table of\r\ncontents.\r\n3.21 Layout of a LATEX source file\r\n• Layout (whitespace, indentation, line\r\nbreaking) in the LATEX source file is largely\r\nignored.\r\n• However, you should pay attention to layout\r\nto enhance readability of the LATEX source, as\r\nyou would say for a C program. For example,\r\nthe layout of the items in an itemized list\r\nshould approximate the indentation of the\r\nfinal typeset output.\r\n• The comment % also magically eats all\r\nleading whitespace from the beginning of the\r\nnext line. This can be very useful to layout\r\nand indent the LATEX by lines without\r\nintroducing extra spaces into the output.15\r\n• Needless to say, a LATEX source file should\r\ninclude reasonable comments, as they will\r\nhelp the reader.\r\n4 Breaking Up Your\r\nDocument 1\r\n4.1 \\input\r\n• Keeping the whole of a large document in a\r\nsingle file can be unwieldy.\r\n15A comment % can’t occur inside a command name.\r\n18",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/016f103d-cb7e-40d2-bf39-40c1717d8fcc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1778dc2acabed81e04d8c73a1e5a2968d2ddcc99c2c15e99fab816524e0b2887",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 541
      },
      {
        "segments": [
          {
            "segment_id": "fc2fb98f-6deb-4d6e-809e-fee294f44d0b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 19,
            "page_width": 595,
            "page_height": 842,
            "content": "• \\input{file } acts as if the contents of file\r\nfile appeared at this point.\r\n• Analogous to #include in C.\r\n• If file lacks an extension, .tex is provided\r\n\\input{defns.ltx} inputs the file\r\ndefns.ltx\r\n\\input{defns} and \\input{defns.tex}\r\nboth input the file defns.tex\r\n• The file is searched for first in the current\r\ndirectory (folder), and then in standard\r\nLATEX system directories.\r\n(This can be modified using the TEXINPUTS\r\nenvironment variable.)\r\nexport TEXINPUTS=.:$(HOME)/tex:\r\nTwo nifty features: The trailing colon means\r\nthat LATEX searches the standard LATEX\r\nsystem directories after those you’ve\r\nspecified. If a directory ends with a double\r\nslash //, then it’s searched recursively (that\r\nis, into subdirectories as well).\r\n• Inputted files can also contain \\input, and in\r\nturn input further files.\r\n• Main uses\r\n– Breaking a large document into\r\nmanageable pieces\r\n– Re-use of chunks of LATEX across\r\nmultiple documents\r\n∗ An important table or complicated\r\ndiagram used across several papers\r\n∗ Especially a file containing your own\r\ncommand definitions and other\r\npersonal customizations\r\n– Division of labor amongst collaborators:\r\neach can work on own part\r\n• See also \\include in §14\r\n5 Roll-Your-Own\r\n5.1 Commands\r\n• LATEX provides many commands built-in, but\r\nalso provides a facility for users to define\r\ntheir own commands, which work almost\r\nexactly like those built-in.\r\n• New commands are defined using\r\n\\newcommand, which takes two arguments:\r\nThe first is the name of the new command\r\n(with backslash); the second is the body of\r\nthe new command’s definition — what each\r\ninstance of the new command is replaced\r\nwith.16\r\n• Something like cross between a #define and\r\na function definition in C, because (LATEX\r\nbeing in effect an interpreted language)\r\nthere’s no distinction between the\r\ncompilation and run-time phases.\r\n• E.g.\r\n\\newcommand{\\PhoneNo}%\r\n{+61-3-9234-5678}\r\nMy phone number is \\PhoneNo.\r\nNote difference between\r\naa\\PhoneNo aa\r\nor\r\naa{\\PhoneNo}aa\r\nand\r\naa\\PhoneNo\\ aa\r\nor\r\naa{\\PhoneNo} aa\r\nor\r\naa\\PhoneNo{} aa\r\nproduces\r\nMy phone number is +61-3-9234-5678. Note\r\ndifference between aa+61-3-9234-5678aa\r\nor aa+61-3-9234-5678aa and aa+61-3-\r\n9234-5678 aa or aa+61-3-9234-5678 aa or\r\naa+61-3-9234-5678 aa\r\n16Underneath, TEX uses a lower-level command-definition\r\nfacility, the most important part of which is the command\r\n\\def. It’s sometimes used in package definitions, since it’s\r\nmore efficient than \\newcommand, because it’s at a lower level\r\nand does less checking. It’s interesting to note, though, that\r\n\\def uses a more general pattern-matching mechanism for\r\npassing arguments.\r\n19",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/fc2fb98f-6deb-4d6e-809e-fee294f44d0b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=74e3e12d0915f1d8ee5a82ff7d60fcc88f23580bb24dba87e369d3c0e4a3a522",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 391
      },
      {
        "segments": [
          {
            "segment_id": "57310029-3e39-4b81-85f8-87e069e2c424",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 20,
            "page_width": 595,
            "page_height": 842,
            "content": "As mentioned for built-in commands, and it\r\napplies as well to user-defined commands,\r\nwhen the command name is terminated by a\r\nspace, LATEX eats up all the following\r\nwhitespace, so the following “aa” in the\r\nsecond instance above comes out right up\r\nagainst the expansion of the command. If you\r\nreally want the space to be there, you need to\r\nuse one of the contrivances listed here\r\n(although the xspace package can in most\r\ncases make this unnecessary). Note that you\r\ncouldn’t have written \\PhoneNoaa because\r\nLATEX would have treated that as the name of\r\na different, presumably undefined, command.\r\n• Your own commands can also take (up to\r\nnine) arguments:\r\n\\newcommand{\\Shout}[1]{\\textbf{#1!}}\r\nI shouted ‘‘\\Shout{Keep quiet}’’\r\nto the class.\r\nThey yelled back\r\n‘‘\\Shout{Go away}’’.\r\nproduces\r\nI shouted “Keep quiet!” to the class. They\r\nyelled back “Go away!”.\r\n\\newcommand{\\TwoByTwo}[4]%\r\n% Two-by-two matrix in row order\r\n% Works only in math mode!\r\n{\\left(\\begin{array}{cc}\r\n#1 & #2 \\\\\r\n#3 & #4\r\n\\end{array}\\right)%\r\n}\r\n\\newcommand{\\ct}{\\cos\\theta}\r\n\\newcommand{\\st}{\\sin\\theta}\r\n\\[\r\nR_\\theta =\r\n\\TwoByTwo{\\ct}{\\st}{-\\st}{\\ct}\r\n\\]\r\nproduces\r\nRθ =\r\n\u0012\r\ncos θ sin θ\r\n− sin θ cos θ\r\n\u0013\r\n• The expected number of arguments is given\r\nas an optional argument after the new\r\ncommand name. This is what LATEX uses to\r\ncheck that sufficient arguments are provided\r\nat each call.\r\n• Command definitions can be put almost\r\nanywhere in the document, but it’s good\r\npractice to collect them all together in the\r\npreamble (makes changing easier), and even\r\nbetter to put them in separate files of\r\ndefinitions, which are inputted in the\r\npreamble.\r\n• You can define your own commands for\r\nconvenient abbreviations, e.g., after\r\n\\newcommand{\\bi}{\\begin{itemize}}\r\n\\newcommand{\\ei}{\\end{itemize}}\r\n\\bi\r\n\\item blah\r\n\\item blah blah\r\n\\ei\r\nproduces\r\n– blah\r\n– blah blah\r\n• More importantly, user-defined commands\r\nprovide flexibility and abstraction:\r\nIf your phone number changes, you only need\r\nto change it in one place, in your shared file\r\nof definitions.\r\nThis is the software engineering principle of\r\nsingle point of control.\r\nSimilarly if you needed to change the format\r\nfor shouting (say to Huge size) or the format\r\nof matrices (say to use square brackets).\r\nEspecially important if you’re dealing with\r\nlarge documents that may run to hundreds of\r\npages, with LATEX source spread over many\r\nfiles.\r\n• Another use of user-defined commands is\r\nanalogous to a “stub” function in C. Suppose\r\n20",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/57310029-3e39-4b81-85f8-87e069e2c424.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bd3a9915b179dea073d2bfec9ad78a7a598622fae1c5aff8245370fb61494467",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 385
      },
      {
        "segments": [
          {
            "segment_id": "df656225-a702-42db-a81e-cb4278d44cb3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 21,
            "page_width": 595,
            "page_height": 842,
            "content": "parts of your document need to be typeset in\r\na particular way, but you don’t yet know how\r\nto do it. You can invent a command to do\r\nthat, provide a temporary, stub definition of\r\nthat command, then push on with developing\r\nyour document content using that command.\r\nThe stub definition can be very simple,\r\nmaybe something like\r\n\\newcommand{\\complicated}[4]%\r\n{*** #1 * #2 * #3 * #4 ***}\r\nLater on, you can replace the stub definition\r\nwith the real one, and you shouldn’t need to\r\nmake any changes to the body of your\r\ndocument.\r\n• User-defined commands can also have one\r\noptional argument (not covered here).\r\n• \\newcommand will give an error if the\r\ncommand already exists.\r\n• To redefine an existing command, use the\r\nanalogous \\renewcommand. This is used\r\nparticularly for document customization.\r\n• Less often used, but still handy to know\r\nabout is \\providecommand, which is kind-of\r\nlike the opposite of \\renewcommand. If the\r\ncommand doesn’t exist, it gets defined, but if\r\nthe command already exists, then nothing\r\nhappens. It can be used to make sure a piece\r\nof LATEX will work, even in an environment\r\nwhere you don’t know whether certain\r\ncommands it uses have been defined or not.\r\nThe \\providecommand provides a “default”\r\ndefinition, but one which will be over-ridden\r\nby an already existing definition.\r\n• Such commands (however defined) are often\r\nreferred to as “macros”, because they’re\r\nanalogous to macros in other languages and\r\napplications like spreadsheets.\r\n5.2 Environments\r\n• Analogously, LATEX lets you define your own\r\nenvironments, for example:\r\n\\newenvironment{Warning}[1]%\r\n{\\color{#1}\r\n\\hrule\\smallskip\r\n\\begin{center}\r\n\\large Warning\r\n\\end{center}\\em}%\r\n{\\smallskip\\hrule}\r\n\\begin{Warning}{red}\r\nIf you go down to the woods\r\ntoday, you’d better not go\r\nalone.\r\n\\end{Warning}\r\nproduces\r\nWarning\r\nIf you go down to the woods today, you’d bet\u0002ter not go alone.\r\n• The environment definition has two\r\nbrace-enclosed parts: The first part goes in\r\nfront of the environment’s contents; the\r\nsecond part goes after it.\r\n• Note that environment arguments can be\r\nused only in the front part.\r\n• Pretty much everything said above about\r\nuser-defined commands applies to\r\nuser-defined environments.\r\n• Environments are more appropriate if you’re\r\ndoing things with large chunks of text, or\r\nwith the few things that aren’t allowed inside\r\ncommand arguments (paragraph breaks and\r\nverbatim text).\r\n• There’s an analogous \\renewenvironment for\r\nredefining existing environments.\r\n5.3 “Theorems”\r\n• Especially in mathematics, there are\r\nidentifiable, numbered chunks of material,\r\nlike theorems, lemmas, corollaries, proofs. . .\r\n• In other fields, there may be chunks like\r\ncommentaries or recommendations, exercises,\r\nor such.\r\n21",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/df656225-a702-42db-a81e-cb4278d44cb3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=25d6f86391190b5782ba789e5262dd4413dde4c40609161d2b8947c6dbf241e6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 418
      },
      {
        "segments": [
          {
            "segment_id": "22fbb3c1-8493-4bb0-a7ba-ab21b43124eb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 22,
            "page_width": 595,
            "page_height": 842,
            "content": "• LATEX provides the \\newtheorem command as\r\na convenient way of defining such\r\n“theorem-like” environments.\r\n• For example,\r\n\\newtheorem{rec}{Recommendation}\r\n\\begin{rec}\r\n\\label{rec:preamble}\r\nPut all your command, environment,\r\nand theorem definitions in the\r\npreamble.\r\n\\end{rec}\r\n\\begin{rec}[For mariners]\r\n\\label{rec:chrono}\r\nNever go to sea with\r\ntwo chronometers.\r\n\\end{rec}\r\nRecommendations~\\ref{rec:preamble}\r\nand~\\ref{rec:chrono} are\r\ncompletely unrelated.\r\nproduces\r\nRecommendation 1 Put all your com\u0002mand, environment, and theorem definitions\r\nin the preamble.\r\nRecommendation 2 (For mariners)\r\nNever go to sea with two chronometers.\r\nRecommendations 1 and 2 are completely un\u0002related.\r\n• Notice that a \\label inside a “theorem” picks\r\nup its number for cross reference by \\ref.\r\n• Optional arguments to \\newtheorem can\r\ncontrol numbering: either within some\r\nsectional unit, or in the same sequence as\r\nanother “theorem”.\r\n• Reference [4, p. 252ff] describes ways to\r\ncustomize the presentation of “theorems”.\r\n6 Customization\r\n6.1 Customization\r\nYou can customize your documents in various\r\nways:\r\n• By using various classes and packages, and\r\nsetting options to them, e.g., the twocolumn\r\noption supported by almost all document\r\nclasses.\r\n• By redefining various lengths and commands\r\nthat LATEX “advertises” can be modified.\r\n• Do this with respect, though, in that the\r\nstandard settings were generally designed by\r\ntypographic experts: Your modifications are\r\nlikely to be less good.\r\nFor example, LATEX’s standard page layout\r\nhas rather wide margins. People are often\r\ntempted to go for narrower margins, in order\r\nto fit more on a page, and save paper.\r\nUnfortunately, the resulting long lines, with\r\nmany words, can be difficult to read. (This,\r\nof course, is with one-column layout in mind.)\r\n• Wizards can delve into LATEX internals and\r\nredefine the effect of standard LATEX\r\nconstructs. Doing this requires considerable\r\nknowledge: Something like the \\section\r\ncommand does quite a lot of work behind the\r\nscenes in terms of layout and formatting, as\r\nwell as house-keeping like setting\r\ntable-of-contents entries and page headers,\r\nplus being adaptable to different language\r\nenvironments.\r\n7 Cross References\r\n7.1 Labels and references\r\n• You mark a place in your document with\r\n\\label.\r\n17\r\n• You refer to that place from elsewhere with\r\n\\ref to get the section, subsection, figure,\r\ntable, item number, etc.\r\n• With \\pageref to get the page number\r\n17While the labels can be pretty arbitrary strings, it’s con\u0002ventional to prefix a label with some indication of what sort\r\nof thing it is. So sec:foo would be a reference to a section.\r\nSimilarly for eqn:foo, fig:foo, tab:foo, itm:foo, which\r\nwould, respectively be references to an equation, a figure,\r\na table, and a list item. Beware, though, that in certain\r\npackages for German, the colon is an active character, and\r\nusing it in label names can cause problems.\r\n22",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/22fbb3c1-8493-4bb0-a7ba-ab21b43124eb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7743752e463ad866bd555a20eee8bd8bb0ecd5a1bc7c8c703ed4d1b79bc5974d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 439
      },
      {
        "segments": [
          {
            "segment_id": "bb0a9c6c-7c22-4ee4-a065-be1749ab3fe0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 23,
            "page_width": 595,
            "page_height": 842,
            "content": "• E.g. with\r\n\\section{Natural History of Gnus}\r\n\\label{sec:gnus}\r\nHere we describe gnus.\r\nthen elsewhere\r\nInformation about gnus can be\r\nfound in Section~\\ref{sec:gnus}\r\non page~\\pageref{sec:gnus}.\r\nproduces\r\nInformation about gnus can be found in Sec\u0002tion 3 on page 42.\r\n• \\vref of the varioref package provides more\r\npowerful cross-references: includes page\r\nreference only if it’s to a different page.\r\nE.g.\r\n\\usepackage{varioref}\r\n...\r\nSee Table∼\\vref{tab:data}.\r\ncan produce (among other variants)\r\nSee Table 4.2.\r\nSee Table 4.2 on the previous page.\r\nSee Table 4.2 on the facing page.\r\nSee Table 4.2 on page 66.\r\ndepending on relative position of the\r\nreferenced table.\r\n• The hyperref package can turn cross\r\nreferences into clickable hyperlinks in PDF\r\n(and HTML) output.\r\n7.2 Mechanics of cross references\r\n• \\ref picks up cross-reference information\r\nwritten to the .aux file by \\label on the\r\nprevious run.\r\n• So, after a big change, it may take two runs\r\nof LATEX to get cross references exactly right.\r\n• But normally, you don’t need to bother, since\r\nyou only need exactly correct cross references\r\nin the final version.\r\n• It may seem that \\label magically knows\r\nwhat kind of thing it’s in (figure, section,\r\nsubsection, etc.). In fact each of these\r\nconstructs sets some counter to be the current\r\n“ref” (using \\refstepcounter or equivalent),\r\nand \\label just simple-mindedly picks up\r\nthe printed representation of this “ref”\r\ncounter. The cleverness is in the enclosing\r\nconstruct, not in the \\label command itself.\r\nOne conseqence of this is that if you want to\r\nput a cross reference say to a section, then\r\nthe corresponding \\label command has to be\r\ninside that section (i.e., after the \\section\r\ncommand), but not inside any lower-level\r\nconstruct, like a subsection or figure.\r\n8 Footnotes\r\n8.1 Footnotes\r\nWe saw gnus\\footnote{A gnu is\r\nan an animal often found in\r\ncrossword puzzles.} and gnats.\r\nproduces\r\nWe saw gnus1 and gnats.\r\n1A gnu is an an animal often found in crossword puz\u0002zles.\r\nThere are number of customizations and packages\r\nfor changing the placement, numbering, and\r\nformatting of footnotes.\r\n23",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/bb0a9c6c-7c22-4ee4-a065-be1749ab3fe0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7622a60df448b011a313bf149383b6d1dbc2e42cbf124a53c22ef7c360db31de",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 335
      },
      {
        "segments": [
          {
            "segment_id": "3237e43a-f907-4b3c-98f1-3f28e73de23b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 24,
            "page_width": 595,
            "page_height": 842,
            "content": "9 Floats: Tables and Figures\r\n9.1 Floats\r\n• With normal text, LATEX inserts page breaks\r\nas needed to produce properly filled pages.\r\n• But some things can’t reasonably be split\r\nacross page breaks, like images, diagrams,\r\ntables, program listings.\r\n• Keeping such a thing in sequence with the\r\nnormal text could leave a big ugly white\r\npatch if it didn’t fit on the current page.\r\n• So typographically we use floats, which can\r\n“float” through the text to a suitable place\r\nwhere they fit.\r\n• Standard LATEX provides two kinds of floats,\r\nthe figure and table environments.\r\n• The two float environments work in exactly\r\nthe same way. The only differences are:\r\n– Convention: figures are used for\r\ndiagrams and images; tables are used for\r\npresentation of tabular data.\r\n– Figures and tables are numbered and\r\ncaptioned differently, and have their\r\nrespective \\listoffigures and\r\n\\listoftables.\r\n• E.g.\r\n\\begin{figure}\r\n\\begin{center}\r\n\\resizebox{0.5\\linewidth}{!}\r\n{\\includegraphics{daylesford.eps}}\r\n\\end{center}\r\n\\caption{View of Daylesford Lake.}\r\n\\label{fig:daylesford}\r\n\\end{figure}\r\nwill float the figure, Figure 2, (in this case an\r\nEPS image) to a suitable position.\r\n• table is completely analogous, except that\r\nits content is conventionally a tabular\r\nenvironment.\r\nFigure 2: View of Daylesford Lake.\r\n• Both figure and table accept an optional\r\nargument by which you can express your own\r\npreference for positioning:\r\n\\begin{figure}[htbp!].\r\nBut until you know what you’re doing, you’re\r\nfar better off accepting LATEX’s standard\r\npositioning rules.\r\n• There are variant figure* and table* forms,\r\nwhich give full-width floats even in\r\ntwo-column layout.\r\nNormal forms give just single-column width\r\nfloats.\r\n• You can define new categories of floats, for\r\nthings like program listings that don’t really\r\nfit in either of the tables or figures categories.\r\n10 Tabulars and Tables\r\n10.1 Tabulars and tables\r\n• Data laid out in a table can be very\r\nimportant for visual presentation.\r\n• Since the name “table” is already used for the\r\nfloating table environment, the name\r\n“tabular” is used for the environment that\r\ncreates tabular data.\r\n• A tabular environment creates a TEX box\r\n(just like a big letter) so it might need\r\nadditional formatting to be wrapped around\r\nit.\r\n24",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/3237e43a-f907-4b3c-98f1-3f28e73de23b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4c61256a8459e53fade9a4f8c14ce3aa4e9db64a303ebb7f5c6fb2aca6e57b7b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 350
      },
      {
        "segments": [
          {
            "segment_id": "a52cf9a2-ddfb-4362-807c-4e75580eedc6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 25,
            "page_width": 595,
            "page_height": 842,
            "content": "• For example,\r\nA tabular\r\n\\begin{tabular}[b]{l r}\r\nInitials & Age \\\\\r\nLJK & 52 \\\\\r\nACK & 16 \\\\\r\n\\end{tabular}\r\nmight be set in-line.\r\nproduces\r\nA tabular\r\nInitials Age\r\nLJK 52\r\nACK 16 might be set in\u0002line.\r\n• The common column specifiers are:\r\nl r c p{}, respectively for left-aligned,\r\nright-aligned, centered, and paragraph\r\n(“wrapped”) items. The p specifier takes a\r\nlength argument, which gives the desired\r\nwidth. The @{} specifier can be used to\r\noverride the default outside and inter-column\r\nspace. See the various examples to get an\r\nidea of how these work. A vertical bar |\r\nmakes a vertical line (either between columns,\r\nor as part of a frame around the table). The\r\ncommand \\hline puts a horizontal line\r\nbetween rows of a table (across all columns),\r\nwhile \\cline{c1-c2} puts the horizontal line\r\nacross only some columns.\r\n• More usually, a tabular is big enough to need\r\nto be set inside a floating table environment.\r\nSo the LATEX in Figure 3 produces Table 1,\r\nfloated to a suitable place.\r\n• There is also tabular* environment, which\r\ntakes an additional width argument and\r\nstretches the table to fill that width. (But\r\nonly if the table contains stretchable\r\ninter-column space.)\r\n• There are also additional packages, such as\r\nlongtable, supertabular, colortbl, and\r\ntabularx, which provide tables with\r\nadditional features, like tables which span\r\nmultiple pages, have colored backgrounds,\r\nand proportionally assigned column widths.\r\n\\begin{table*}\r\n\\begin{center}\r\n\\begin{tabular}\r\n{| l c p{0.25\\linewidth} |}\r\n\\hline\r\nName & Formula & Comment \\\\\r\n\\hline\r\nSodium Chloride &\r\nNaCl &\r\nCommon salt.\r\nChief solid consistuent of seawater.\r\n\\\\\r\nMagnesium Sulphate &\r\nMg${}_2$SO${}_4$ &\r\nHydrated form is Epsom Salts.\r\n\\\\\r\nCalcium Fluoride &\r\nCaF${}_2$ &\r\nOccurs as fluorospar.\r\n\\\\\r\n\\hline\r\n\\end{tabular}\r\n\\end{center}\r\n\\caption{Selected salts.}\r\n\\label{tab:salts}\r\n\\end{table*}\r\nFigure 3: LATEX to produce Table 1.\r\n25",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/a52cf9a2-ddfb-4362-807c-4e75580eedc6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1189b5ccf8e15b16b3963e8cdba76cff14797568fc53d48d759f623d282694db",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 297
      },
      {
        "segments": [
          {
            "segment_id": "c80c58a6-48cd-4e3b-b17e-843b41c8c247",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 26,
            "page_width": 595,
            "page_height": 842,
            "content": "Name Formula Comment\r\nSodium Chloride NaCl Common salt. Chief solid\r\nconsistuent of seawater.\r\nMagnesium Sulphate Mg2SO4 Hydrated form is Epsom\r\nSalts.\r\nCalcium Fluoride CaF2 Occurs as fluorospar.\r\nTable 1: Selected salts.\r\n• There is also a tabbing environment, which\r\nhas some limited use.\r\n11 Mathematics\r\n11.1 Math mode\r\n• Mathematics in TEX/LATEX is processed in a\r\nspecial mode, math mode.\r\n• Some features, like superscripts, subscripts,\r\nand most special symbols are available only\r\nin math mode.\r\n• Math comes in two flavors: inline and display\r\n• Inline math is delimited by:\r\n$. . . $\r\n\\(. . . \\)\r\nor, more verbosely, by\r\n\\begin{math}. . . \\end{math}\r\nThe $. . . $ notation is inherited from TEX.\r\nIt’s convenient, but treacherous, since missing\r\na dollar sign can cause a large-scale mess. It\r\nis commonly used, and is probably OK for\r\nsimple formulas.\r\n• Display math is delimited by:\r\n\\[. . . \\]\r\n\\begin{displaymath}. . . \\end{displaymath}\r\nAnd also by a number of other environments\r\nwhich give equation formatting and\r\nnumbering.\r\n• For example:\r\nThe inline formula\r\n$\\sum_{i=1}^n x_i^2$\r\ncan be displayed as\r\n\\[\r\n\\sum_{i=1}^n x_i^2\r\n\\]\r\nNote the difference in\r\nsize and formatting.\r\nproduces\r\nThe inline formula Pn\r\ni=1 x\r\n2\r\ni\r\ncan be displayed\r\nas\r\nXn\r\ni=1\r\nx\r\n2\r\ni\r\nNote the difference in size and formatting.\r\n• A lot of things work differently in math\r\nmode. Most noticeable is that, aside from\r\ntheir use to separate tokens, spaces are\r\nignored in math mode. (In ordinary text, a\r\nspace normally gives an inter-word space — it\r\ndoesn’t in math mode.) LATEX uses its own\r\nspacing rules in math mode, which\r\nincorporate a lot of knowledge about\r\nmathematical typesetting (like different\r\nspacing around the same symbol depending\r\non whether it’s being used as a unary or\r\nbinary operator). So $- x - y z$ and\r\n$-x-yz$ both produce −x − yz.\r\nBest advice is to just write the content of the\r\nformula, and leave it to LATEX to determine\r\nthe spacing. There are special spacing\r\ncommands to use in math mode, but\r\ngenerally you should use them only on rare\r\noccasions to fine-tune the spacing in the\r\nformula, when LATEX’s rules haven’t got the\r\naesthetics quite right.\r\n26",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/c80c58a6-48cd-4e3b-b17e-843b41c8c247.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=06fda578b3908fa2128cae7f383d88b101b8ebf8035575439d1a450e3eb1a14a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 368
      },
      {
        "segments": [
          {
            "segment_id": "e5f4a724-6833-4d88-ab8e-1490c3ed98f4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 27,
            "page_width": 595,
            "page_height": 842,
            "content": "→ In almost all cases, LATEX knows more about\r\nmathematical typesetting than you do.\r\n11.2 Subscripts and superscripts\r\n• In math mode, subscripts are indicated by _\r\nand superscripts by ^\r\n• Grouping is important:\r\nNote the difference between\r\n$a^n+k_j-1$ and $a^{n+k}_{j-1}$.\r\nproduces\r\nNote the difference between a\r\nn + kj − 1 and\r\na\r\nn+k\r\nj−1\r\n.\r\n• Note:\r\n${}^4_2$He\r\nproduces\r\n4\r\n2He\r\nwhere we’ve put the subscript and superscript\r\non “nothing”, indicated by the empty pair of\r\ngrouping braces.\r\n11.3 A menagerie of symbols and\r\noperators\r\n• LATEX supports a huge number of\r\nmathematical symbols and operators, far\r\nmore than can be mentioned here.\r\n$\\alpha$ $\\xi$ $\\Xi$ $\\theta$ $\\phi$\r\n\\[\r\nn! = \\prod_{k=1}^{n} k\r\n\\]\r\n\\[\r\n\\sin^2\\theta + \\cos^2\\theta = 1\r\n\\]\r\n\\[\r\n\\log \\sqrt[n]{x} = \\frac{\\log x}{n}\r\n\\]\r\nCompare $log$ with $\\log$\r\nand with $\\mbox{log}$. \\\\\r\nCompare $difference$\r\nwith \\emph{difference}. \\\\\r\nCompare $k$ with k.\r\nproduces\r\nα ξ Ξ θ φ\r\nn! =\r\nYn\r\nk=1\r\nk\r\nsin2θ + cos2θ = 1\r\nlog √n x =\r\nlog x\r\nn\r\nCompare log with log and with log.\r\nCompare difference with difference.\r\nCompare k with k.\r\nNotice that in math mode, a sequence of\r\nletters is treated as the mathematical product\r\nof single-letter variables. So log in math\r\nmode doesn’t get you the name of the log\r\nfunction, (which is conventionally typeset in\r\nroman type). The best way of doing this is to\r\nuse the command \\log. Similarly for \\cos,\r\n\\sin, etc. The \\mbox command sets its\r\nargument in roman type, even inside a\r\nmathematical formula, so can be used for\r\n“log-like” functions which aren’t pre-defined,\r\nand also for introducing a few words of text\r\ninside a formula, like “if” and “otherwise”.\r\n(The various AMS LATEX packages provide\r\nslightly better ways of doing this, though.)\r\n• This also means that putting a word inside\r\ndollar signs is not a shortcut for emphasizing\r\nit via italics. The font used and letter spacing\r\n27",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/e5f4a724-6833-4d88-ab8e-1490c3ed98f4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5826cfd30047427a5e67124f25963e3cf531a00276d3259f38baba8ae52538d2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 322
      },
      {
        "segments": [
          {
            "segment_id": "6f90f0b3-3a8c-4769-ac84-17e82c9eaeab",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 28,
            "page_width": 595,
            "page_height": 842,
            "content": "will be different. Conversely, if you refer to a\r\nvariable from your formula in running text,\r\nyou need to put it inside dollar signs, so that\r\nit will be typeset consistently as a\r\nmathematical variable, not as an ordinary\r\nletter.\r\n11.4 “Large” delimiters\r\n\\begin{displaymath}\r\n{\\left( \\frac{x+1}{x+2} \\right)}\r\n^ 2\r\n\\end{displaymath}\r\nproduces\r\n\u0012\r\nx + 1\r\nx + 2\r\n\u00132\r\nAlso works with other “bracketing” delimiters,\r\nlike (. . . ), [. . . ], \\lbrace. . . \\rbrace, |. . . |,\r\n\\|. . . \\|, etc., plus “.” (see how equation 1 in\r\n§11.6 below is done).\r\n11.5 Arrays\r\nThe array environment is analogous to the\r\ntabular environment, but in math mode.\r\nFor example,\r\n\\[\r\nI =\r\n\\left(\r\n\\begin{array}{cccc}\r\n1 & 0 & \\ldots & 0 \\\\\r\n0 & 1 & & 0 \\\\\r\n\\vdots & & \\ddots & \\vdots \\\\\r\n0 & 0 & \\ldots & 1\r\n\\end{array}\r\n\\right)\r\n= \\left(\\delta_{ij}\\right)\r\n\\]\r\nproduces\r\nI =\r\n\r\n\r\n1 0 . . . 0\r\n0 1 0\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n0 0 . . . 1\r\n\r\n\r\n= (δij )\r\n11.6 Equations\r\n• The equation environment displays a\r\nformula and gives it an equation number,\r\nwhich can be labelled and referred to.\r\nFor example:\r\n\\begin{equation}\r\n|x| = \\left\\lbrace\r\n\\begin{array}{r l}\r\nx & \\mbox{if }x \\ge 0 \\\\\r\n-x & \\mbox{otherwise}\r\n\\end{array}\r\n\\right.\r\n\\label{eqn:abs}\r\n\\end{equation}\r\nproduces\r\n|x| =\r\n\u001a\r\nx if x ≥ 0\r\n−x otherwise (1)\r\nAnd elsewhere\r\nEquation~\\ref{eqn:abs} defines\r\nthe absolute value.\r\nproduces\r\nEquation 1 defines the absolute value.\r\n• The eqnarray environment displays\r\nnumbered equations aligned in something like\r\na three-column array:\r\n\\begin{eqnarray}\r\nx & = & at^2 + bt + c \\\\\r\ny & = & dt^2 \\nonumber \\\\\r\n& & \\mbox{} + et + f\r\n\\end{eqnarray}\r\n28",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/6f90f0b3-3a8c-4769-ac84-17e82c9eaeab.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=80a632295e862755362b1e054675e0b94cb0bc1899a1aa34d990b8a75196e100",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 299
      },
      {
        "segments": [
          {
            "segment_id": "cbab584b-fe74-4f66-82f9-af90da96d192",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 29,
            "page_width": 595,
            "page_height": 842,
            "content": "produces\r\nx = at2 + bt + c (2)\r\ny = dt2\r\n+ et + f (3)\r\n• A subtle point is that the empty \\mbox is to\r\nforce LATEX to treat the leading plus sign on\r\nthe the line as a binary operator, and space it\r\nappropriately.\r\n• There is even more support for math layout\r\nand symbols in the AMS LATEX packages\r\n(that’s the American Mathematical Society,\r\nlike the ACM of mathematics).\r\n12 Boxes, Lengths, Space,\r\nCounters\r\n12.1 Caveat\r\n• The concepts and commands described here\r\ncan be very powerful tools for low-level\r\nformatting.\r\n• However, you should almost never use them\r\nin the body of your document.\r\n• If you have some meaningful piece of your\r\ndocument that needs formatting in a\r\nparticular way, you should almost always\r\ndefine an appropriate command or\r\nenvironment for that piece.\r\n• Use the low-level formatting commands only\r\nin the definition of that command or\r\nenvironment.\r\n• Use the command or environment in the\r\nbody of your document.\r\n• This, in keeping with the general principle,\r\ninsulates the body of your document from\r\nformatting changes: separating formatting\r\nfrom content.\r\n12.2 Lengths\r\n• Lengths in TEX, which LATEX rides upon, are\r\nrather rich; however, to simplify a little:\r\n• Lengths can be rigid, a definite size, for which\r\na unit must be specified (even if the length is\r\nzero).\r\n• Some of the units used in TEX are pt for\r\nprinters’ points18, mm for millimeters, cm for\r\ncentimeters, and in for inches.\r\n• Particularly useful are the printers’ measures\r\nem and ex, being respectively the nominal\r\nwidth of an ‘M’ and the nominal height of an\r\n‘x’ in the current font.\r\nThese provide lengths that scale up and down\r\nnaturally with the choice of font size.\r\n• Lengths can be negative.\r\n• LATEX provides numerous predefined lengths.\r\n– Some are “read-only”—just for\r\ninformation\r\nFor example, \\linewidth, the width of\r\nthe current environment (width of text\r\non a normal page, width of current\r\ncolumn in multicolumn layout or\r\nminipage).\r\n– Most can be modified, for customization.\r\nFor example\r\n\\setlength{\\parindent}{0pt}\r\nsets the paragraph indent to zero.\r\nFor example\r\n\\setlength{\\parindent}{2em}\r\nwould let the paragraph indent vary\r\nwith the font.\r\n• You can create your own new lengths, e.g.:\r\n\\newlength{\\figwidth}\r\n18There is also pp for PostScript points, which are slightly\r\nlarger.\r\n29",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/cbab584b-fe74-4f66-82f9-af90da96d192.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4bafa06c834eb79729664bb06f1aecff9a07cb247d8f45b646f2507bda7059ba",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 386
      },
      {
        "segments": [
          {
            "segment_id": "053b59a7-0eab-4fed-af9b-f74e5f151dcf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 30,
            "page_width": 595,
            "page_height": 842,
            "content": "• Lengths can be a multiple of an existing\r\nlength, e.g.:\r\n\\setlength{\\figwidth}{0.5\\linewidth}\r\nwould set the length \\figwidth to half the\r\ncurrent \\linewidth.\r\n• Length can be rubber, or stretchable.\r\nThere’s a stretchable length called \\fill,\r\nand \\stretch{r}, which has r times the\r\nstretchability of \\fill.\r\nStretchable lengths are really more like gas\r\nunder pressure: They expand to fill available\r\nspace, sometimes in competition with other\r\nstretchable lengths.\r\n12.3 Boxes\r\n• In TEX a box is a rectangle of something.\r\n• It might be as simple as a single character, or\r\nas complicated as table or a diagram.\r\n• The main work of TEX is to “glue” boxes\r\ntogether into bigger boxes (e.g. letters into\r\nwords, words into lines, lines into\r\nparagraphs), and arrange them properly on\r\nthe page.\r\n• As we’ve seen, the tabular environment\r\nmakes a box.\r\n• More simply, \\mbox makes a box out of its\r\ntext argument.\r\n• \\fbox is like \\mbox, but it puts a frame\r\naround its box.\r\n• \\makebox and \\framebox are fancier versions,\r\nwhich permit specification of width and\r\nalignment.\r\n• The \\raisebox command can be used to\r\nraise (or lower) a box and also lie to TEX\r\nabout how big it is, that is make TEX treat it\r\nas if its size were different from what it really\r\nis. This can be useful for fine-tuning layout.\r\n• The \\parbox command and minipage\r\nenvironment set material in a certain width\r\nand make a box out of it\r\n• You can also save already typeset material\r\ninto a named box, and re-use it. Relevant are\r\nthe \\newsavebox, \\sbox, \\savebox, and\r\n\\usebox commands, and the lrbox\r\nenvironment. This has a number of uses, for\r\nexample:\r\n– If you have say a complicated logo\r\ngenerated by internal LATEX commands\r\nrepeated on every page, say as part of\r\nthe page head, then it will save a lot of\r\nprocessing time if you save the logo into\r\na named box and re-use it, rather than\r\nregenerate it every time (as would\r\nhappen if you did it via a command).\r\n– Similarly, say if you want to put CVS\r\nkeyword expansions into the foot of\r\nevery page. Because of the dollar signs\r\n(and other unpredictable active\r\ncharacters that might appear in file\r\nnames, like underscores), you have to\r\ncapture the CVS keyword inside say a\r\n\\verb, but you can’t pass these around.\r\nThe solution is to make a saved box of\r\nthe CVS keyword using the lrbox\r\nenvironment, and then use this box\r\nwherever needed.19\r\n12.4 Space and rules\r\n• \\hspace{w} produces a horizontal space of\r\nwidth w.\r\nThis space, though, is removed if it’s at the\r\nbeginning or end of a line.\r\nThe \\hspace* form gives space that is never\r\nremoved.\r\n• \\vspace{h} produces a vertical space of\r\nheight h.\r\nThis space, though, is removed if it’s at the\r\nbeginning or end of a page.\r\nThe \\vspace* form gives space that is never\r\nremoved.\r\n• In either case, the length can be negative\r\n(brings things closer together, even\r\noverlapping), or stretchable (useful for\r\nrelative placement).\r\n19There are packages to facilitate tyepsetting of CVS or\r\nsubversion keywords.\r\n30",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/053b59a7-0eab-4fed-af9b-f74e5f151dcf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6a7c99a1fe339c11728251350d5a50f8d718c860f7dc566dad16c1da1cbfdabf",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 519
      },
      {
        "segments": [
          {
            "segment_id": "053b59a7-0eab-4fed-af9b-f74e5f151dcf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 30,
            "page_width": 595,
            "page_height": 842,
            "content": "• Lengths can be a multiple of an existing\r\nlength, e.g.:\r\n\\setlength{\\figwidth}{0.5\\linewidth}\r\nwould set the length \\figwidth to half the\r\ncurrent \\linewidth.\r\n• Length can be rubber, or stretchable.\r\nThere’s a stretchable length called \\fill,\r\nand \\stretch{r}, which has r times the\r\nstretchability of \\fill.\r\nStretchable lengths are really more like gas\r\nunder pressure: They expand to fill available\r\nspace, sometimes in competition with other\r\nstretchable lengths.\r\n12.3 Boxes\r\n• In TEX a box is a rectangle of something.\r\n• It might be as simple as a single character, or\r\nas complicated as table or a diagram.\r\n• The main work of TEX is to “glue” boxes\r\ntogether into bigger boxes (e.g. letters into\r\nwords, words into lines, lines into\r\nparagraphs), and arrange them properly on\r\nthe page.\r\n• As we’ve seen, the tabular environment\r\nmakes a box.\r\n• More simply, \\mbox makes a box out of its\r\ntext argument.\r\n• \\fbox is like \\mbox, but it puts a frame\r\naround its box.\r\n• \\makebox and \\framebox are fancier versions,\r\nwhich permit specification of width and\r\nalignment.\r\n• The \\raisebox command can be used to\r\nraise (or lower) a box and also lie to TEX\r\nabout how big it is, that is make TEX treat it\r\nas if its size were different from what it really\r\nis. This can be useful for fine-tuning layout.\r\n• The \\parbox command and minipage\r\nenvironment set material in a certain width\r\nand make a box out of it\r\n• You can also save already typeset material\r\ninto a named box, and re-use it. Relevant are\r\nthe \\newsavebox, \\sbox, \\savebox, and\r\n\\usebox commands, and the lrbox\r\nenvironment. This has a number of uses, for\r\nexample:\r\n– If you have say a complicated logo\r\ngenerated by internal LATEX commands\r\nrepeated on every page, say as part of\r\nthe page head, then it will save a lot of\r\nprocessing time if you save the logo into\r\na named box and re-use it, rather than\r\nregenerate it every time (as would\r\nhappen if you did it via a command).\r\n– Similarly, say if you want to put CVS\r\nkeyword expansions into the foot of\r\nevery page. Because of the dollar signs\r\n(and other unpredictable active\r\ncharacters that might appear in file\r\nnames, like underscores), you have to\r\ncapture the CVS keyword inside say a\r\n\\verb, but you can’t pass these around.\r\nThe solution is to make a saved box of\r\nthe CVS keyword using the lrbox\r\nenvironment, and then use this box\r\nwherever needed.19\r\n12.4 Space and rules\r\n• \\hspace{w} produces a horizontal space of\r\nwidth w.\r\nThis space, though, is removed if it’s at the\r\nbeginning or end of a line.\r\nThe \\hspace* form gives space that is never\r\nremoved.\r\n• \\vspace{h} produces a vertical space of\r\nheight h.\r\nThis space, though, is removed if it’s at the\r\nbeginning or end of a page.\r\nThe \\vspace* form gives space that is never\r\nremoved.\r\n• In either case, the length can be negative\r\n(brings things closer together, even\r\noverlapping), or stretchable (useful for\r\nrelative placement).\r\n19There are packages to facilitate tyepsetting of CVS or\r\nsubversion keywords.\r\n30",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/053b59a7-0eab-4fed-af9b-f74e5f151dcf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6a7c99a1fe339c11728251350d5a50f8d718c860f7dc566dad16c1da1cbfdabf",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 519
      },
      {
        "segments": [
          {
            "segment_id": "f1fef73b-85fc-41e3-9f3f-913fad9390e8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 31,
            "page_width": 595,
            "page_height": 842,
            "content": "• There are various predefined useful spaces of\r\nconvenient sizes, horizontal: \\, (thin space),\r\n\\quad (1em wide), \\qquad (2em wide),\r\n\\hfill (stretchable); vertical: \\smallskip,\r\n\\medskip, \\bigskip, \\vfill (stretchable).\r\n• Not quite spaces, but similarly “stretchable”\r\nand handy are \\dotfill and \\hrulefill.\r\n• A rule is a rectangular blob of ink.\r\nAmong other uses, it can make horizontal\r\nand vertical lines.\r\n\\rule{5em}{1pt}\r\n\\rule[1ex]{5em}{1pt}\r\n\\rule[-1ex]{5em}{1pt}\r\n\\rule{2pt}{1.0cm}\r\nproduces\r\nA very useful special case is a rule with zero\r\nwidth, called a strut. It is invisible, but takes\r\nup room vertically, and can be used for\r\npositioning, especially in places where explicit\r\nvertical spaces can’t be used, such as in\r\nmathematical formulas.\r\n\\fbox{plain box}\r\n\\fbox{\\rule[-2ex]{0pt}{4ex}%\r\nbox with strut}\r\nproduces\r\nplain box box with strut\r\nSimilarly for zero-height rules, though they’re\r\nprobably less useful.\r\n12.5 Counters\r\n• Counters are like integer variables: they’re\r\nwhat LATEX uses behind the scenes to number\r\nsections, pages, etc.\r\n• You can create your own counters,\r\nmanipulate them, and use them to number\r\nyour own entities (like say an exam question\r\nenvironment).\r\n• Relevant commands are: \\newcounter,\r\n\\setcounter, \\addtocounter, \\value,\r\n\\stepcounter, \\refstepcounter\r\n• Also \\thectr and \\arabic, \\roman, \\Roman,\r\n\\alph, \\Alph, \\fnsymbol\r\n• For example, to have all your chapter\r\nnumbers (and references) be in upper-case\r\nRoman numerals, you can say\r\n\\renewcommand{\\thechapter}%\r\n{\\Roman{chapter}}\r\nin the preamble. Don’t get carried away with\r\nthis, though.\r\n13 Graphics: Images and\r\nDiagrams\r\n13.1 The picture environment\r\n• Standard LATEX provides the picture\r\nenvironment.\r\n• It’s adequate for simple “box and arrow”\r\ndiagrams and has the advantage that it uses\r\nonly the facilities of LATEX and doesn’t rely\r\non any external drivers.\r\n• Some visual GUI diagram editors, like xfig,\r\ncan export in the form of LATEX picture\r\nenvironments.\r\n• But for most uses, it’s too limited and\r\ncumbersome.\r\n• Various packages, like eepic, provide a ←\r\npicture environment with extended\r\ncapabilities.\r\n13.2 Graphics operators\r\n• Originally there was the graphics package,\r\nbut now the graphicx package is almost\r\nalways used, since it provides additional\r\nfeatures.\r\n31",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/f1fef73b-85fc-41e3-9f3f-913fad9390e8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d59555dbdc4f36709e022b8260dfe40c6eeba3b5f01c0e85ca5179c4f7e75b66",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 332
      },
      {
        "segments": [
          {
            "segment_id": "31c88793-29f5-4bba-9246-87d7edcef789",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 32,
            "page_width": 595,
            "page_height": 842,
            "content": "• \\scalebox\r\n• \\resizebox\r\n• \\rotatebox\r\n• For example,\r\nsleep \\\\\r\n\\scalebox{2}{sleep} \\\\\r\n\\scalebox{1}[2]{sleep} \\\\\r\n\\resizebox{5em}{2em}{sleep} \\\\\r\n\\resizebox{5em}{!}{sleep} \\\\\r\n\\rotatebox{30}{sleep}\r\n\\rotatebox{-30}{sleep}\r\nproduces\r\nsleep\r\nsleep\r\nsleep\r\nsleep\r\nsleep\r\nsleepsleep\r\n• These rely on capabilities beyond DVI, by\r\npassing “specials”\r\n• They work with dvips and pdflatex, but\r\nmay not work with other drivers.\r\n• The pstricks package provides very powerful\r\nfacilities for creating graphics, but works only\r\nwith PostScript output.\r\n13.3 Including graphics\r\n• Use \\includegraphics.\r\n• Many graphics and image formats are\r\nsupported: for example, PDF, EPS\r\n(Encapsulated Postscript), PNG, JPEG, GIF.\r\n• EPS requires using a PostScript driver, like\r\ndvips.\r\n• PDF requires the use of pdflatex.\r\n• See Figure 2 and the LATEX for it on page 24.\r\n• The graphic can be resized and rotated via\r\nthe graphics commands mentioned above, or\r\nvia special keyword arguments to the\r\n\\includegraphics command provided by\r\ngraphicx.\r\n• If you don’t specify a file extension in\r\n\\includegraphics, then LATEX searches\r\nthrough a (configurable) list of possible\r\nextensions.\r\nThis means that under some conditions, you\r\ndon’t need to commit to the particular\r\ngraphics format in your document: For\r\nFigure 2, I could have said just\r\n\\includegraphics{daylesford}, and LATEX\r\nwould have picked up what was available (in\r\nthis case EPS).\r\n• Generally, in order process the graphic\r\nproperly LATEX needs access to its “bounding\r\nbox” (which describes how big it is). Formats\r\nlike EPS and (encapsulated) PDF store this\r\ninformation in the file in a form that LATEX\r\ncan access. But for other formats you may\r\nhave to take additional steps to tell LATEX\r\nabout the bounding box.\r\n14 Breaking Up Your\r\nDocument 2:\r\n14.1 \\include\r\n• Running latex on a large document can be\r\nvery time-consuming, especially when you’re\r\ndeveloping a document and need to run\r\nlatex often to debug your document.\r\n• In rare cases, a document can be so big that\r\nit exceeds your computer’s memory capacity\r\nto process it all in one go.\r\n• You could break up your document into\r\npieces, and \\input these pieces from a\r\ntop-level document, then comment-out\r\n\\inputs for all but the pieces you’re actively\r\nworking on. But this is cumbersome, and\r\nmesses up cross references.\r\n32",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/31c88793-29f5-4bba-9246-87d7edcef789.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0dd29610bc14f3fef01a4c89ff8aa0c88c4ee1dc8e73989041010eb7b8c83c5e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 363
      },
      {
        "segments": [
          {
            "segment_id": "ac5b2d6f-40ed-4886-9069-4db73dee071c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 33,
            "page_width": 595,
            "page_height": 842,
            "content": "• \\include provides this capability, but in a\r\nmuch more convenient way.\r\n• \\include acts like \\input, but for each file it\r\nreads in, it maintains its cross-referencing\r\ninformation in its own corresponding\r\nindividual .aux file.\r\n• In the preamble, you can put an\r\n\\includeonly command, giving it a\r\ncomma-separated list of included files.\r\nOnly those files are processed, but they use\r\n(mostly correct) cross-reference and\r\npage-number information from the .aux files\r\nfrom previous runs.\r\n• For example, on the simple top-level\r\ndocument:\r\n\\documentclass{article}\r\n\\includeonly{experiments,results}\r\n\\begin{document}\r\n\\include{front}\r\n\\include{introduction}\r\n\\include{experiments}\r\n\\include{results}\r\n\\include{conclusions}\r\n\\end{document}\r\nlatex would process and produce output\r\nfrom only the files experiments.tex and\r\nresults.tex.\r\n• One restriction is that the output of an\r\n\\included file must always start a new page.\r\nSince \\included files almost always are\r\ntop-level pieces, like chapters, which start on\r\na new page anyway, this is hardly ever a\r\nproblem in practice.\r\nIf the pieces don’t naturally start on a new\r\npage, like sections of an article, then you can\r\n\\include them during development, and turn\r\nthem into \\input for the final runs.\r\n15 Bibliography\r\n15.1 DIY: thebibliography\r\n• LATEX provides a thebibliography\r\nenvironment for formatting bibliographies\r\n• You can use it directly, but it’s only really\r\nviable for the simplest cases\r\n15.2 Using BibTEX\r\n• Much better is to have your bibliography\r\nautomatically generated and formatted.\r\n• Where you want your bibliography, you put\r\n\\bibliography{list of biblio\r\ndatabases }.\r\nThe argument is a comma-separated list of\r\nspecial databases (.bib files) to use for\r\nbibliographic information.\r\nMany bibliographic databases are already\r\navailable in BibTEX format. They may be a\r\nshared resource of a research group. The\r\nonline database CiteSeer provides BibTEX\r\nentries.\r\nUsually, though, you’ll need to create at least\r\nsome BibTEX entries of your own.\r\n• You also need to specify\r\n\\bibliographystyle{style } where style\r\nspecifies the style you want for your\r\nbibliography.\r\nLATEX’s standard bibliography styles are\r\nplain, unsrt, alpha, and abbrv.\r\nPlus there are numerous contributed styles,\r\nincluding those required for various journals.\r\nWriting new bibliography styles can be done,\r\nbut it’s a job for wizards. More feasible is to\r\nmake small modifications of existing styles.\r\nThe LATEX book [7] says that the\r\n\\bibliographystyle declaration can go\r\nanywhere after \\begin{document}, but I’ve\r\nhad it work as expected when put in the\r\npreamble.\r\nFor example,\r\n\\bibliographystyle{plain}\r\n\\bibliography{ljk-latex}\r\nappears towards the end of this document.\r\n• In your document you cite a paper using the\r\n\\cite command giving a unique identifier for\r\neach paper:\r\n33",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/ac5b2d6f-40ed-4886-9069-4db73dee071c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2f2cd280116f5eca65750f704a44238feb079eecb6ab7ec022d3bbdf532454a2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 411
      },
      {
        "segments": [
          {
            "segment_id": "33715832-4b6b-4df5-8fed-d6f46b4e9069",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 34,
            "page_width": 595,
            "page_height": 842,
            "content": "Stuff about bibliography can be\r\nfound in~%\r\n\\cite[\\S4.3 \\& Appendix~B]%\r\n{latex-adps},\r\nand in~\\cite[Ch.\\ 13]{latex-comp}.\r\nThe most important {\\LaTeX} book\r\nis~\\cite{latex-adps}. Very useful\r\nis~\\cite{latex-comp}, while\r\nmore specialized books are~%\r\n\\cite{latex-gracomp,latex-webcomp}.\r\nA huge amount of information is\r\navailable on~\\cite{texliveCD},\r\nincluding~%\r\n\\cite{lshort,UKtexfaq,texlive-guide}.\r\nproduces\r\nStuff about bibliography can be found in [7,\r\n§4.3 & Appendix B], and in [4, Ch. 13].\r\nThe most important LATEX book is [7]. Very\r\nuseful is [4], while more specialized books\r\nare [6, 5].\r\nA huge amount of information is available\r\non [10], including [8, 3, 9].\r\nwhere the references are to papers in the\r\nbibliography.\r\n• \\nocite causes a reference to be listed in the\r\nbibliography without putting a citation in the\r\ntext.\r\nThe form \\nocite{*} pulls in all the papers\r\nfrom the listed databases. It’s useful for\r\npreparing stand-alone bibliographies, though\r\nperhaps the biblist package is better for\r\nthis purpose.\r\n• Extended bibliographic facilities are provided\r\nby a number of packages, including natbib,\r\ncite, citesort, overcite, chicago,\r\nchapterbib, bibunits. See [4].\r\n15.3 Running bibtex\r\n• Getting your bibliography and citations\r\ncompletely correct may take up to four steps:\r\n1. Run latex once on your document.\r\nlatex will complain about undefined\r\ncitations and references, but this is\r\nnormal.\r\nOn this pass latex records the\r\nidentifiers of the cited papers in the\r\n.aux file.\r\n2. Run bibtex. It reads the .aux file,\r\nsearches the databases for the cited\r\npapers, and writes the formatted\r\nbibliography to the corresponding .bbl\r\nfile.\r\n3. Run latex again. It will pick up the\r\nbibliography automatically and put it at\r\nthe indicated place, but it may still\r\ncomplain about undefined references.\r\n4. Run latex a third time, to finally\r\nresolve any references to the\r\nbibliography.\r\n• Note that it’s probably cleanest if the\r\ncommand argument is the base of the .tex\r\nfile, like latex foo and bibtex foo for\r\nfoo.tex—latex looks at the corresponding\r\n.tex file, and bibtex looks at the\r\ncorresponding .aux file.\r\n• Of course, you only need to go through this\r\nfull process if you’re starting from scratch,\r\nand you want a final version.\r\n• During development you normally only need\r\nto run bibtex when you’ve added new\r\ncitations (or removed old ones).\r\n• If you just run latex once, at worst your\r\ncitation numbers may be temporarily out of\r\nsynch. This is usually acceptable during\r\ndevelopment.\r\n16 Collaborative Document\r\nDevelopment\r\n16.1 Version control—CVS\r\n• LATEX has two important characteristics:\r\n1. Sources are ordinary text files\r\n34",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/33715832-4b6b-4df5-8fed-d6f46b4e9069.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=67430ba7629acefcf2025ecf8cf2446c7b253d6390a09111cc133d4601eace16",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 405
      },
      {
        "segments": [
          {
            "segment_id": "c4f5a078-396b-4544-9510-ddbaecc13f30",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 35,
            "page_width": 595,
            "page_height": 842,
            "content": "2. A large document can be broken across\r\na number of files, using \\input,\r\n\\include, and \\includegraphics.\r\n• These make LATEX documents particularly\r\nsuited for being put under a version-control\r\nsystem like CVS or subversion, with all the\r\nbenefits that brings, such as:\r\n– Team development: Shared repository\r\nwith individual checked-out workspaces,\r\npossibly on remote machines.\r\n– Version control and branching.\r\n– Tracking and documentation of rationale\r\nfor changes via log messages.\r\n– Diffs for focussing on changes.\r\n– . . .\r\n• Just a few things to note:\r\n– Because CVS diffs are line based, it’s\r\nnot a good idea to make unnecessary\r\nchanges to the line structure of your\r\nsource, since they make the real diffs\r\nhard to locate.\r\nFor example, if you change a few words\r\nin a paragraph in the source file, it’s not\r\na good idea to re-fill that paragraph in\r\nyour text editor (say by M-Q in emacs).\r\nSome text editors, on Windoze in\r\nparticular, store text paragraphs as\r\nsingle long lines, and just wrap them to\r\nfit for the display. If you change a single\r\ncharacter of that paragraph, the whole\r\nparagraph will show up as a diff line,\r\nagain making it hard to see the real\r\ndifferences.\r\n– Because $ is an active character in\r\nLATEX, it takes some contrivance to get\r\nCVS keyword substitutions, like $Id$ to\r\nwork. Sure, you can easily put them\r\ninside a comment, but getting the CVS\r\nstuff to print in the document is trickier.\r\nIt can be done—see how it’s done in the\r\nsource of this document to get some\r\n→ ideas, or use one of the packages\r\nproviding this facility.\r\n– Remember, if you’re checking-in other\r\ndocument source files, like images, which\r\nare binary, not text, then you’ll need to\r\nspecify -kb on the cvs add command.\r\n16.2 Build tools—make\r\n• Because all the LATEX-related processors, like\r\nlatex, bibtex, dvips, etc., are\r\nshell-invokable programs, it’s very convenient\r\nto use a build tool, like make to generate your\r\nfinal documents.\r\n• With GNU make, you can write makefile rules\r\nlike:20\r\n%.dvi : %.tex ; latex $<\r\n%.ps : %.dvi ; dvips -t a4 -o $@ $<\r\n%.pdf : %.ps ; ps2pdf $< $@\r\nOr, if you prefer to go direct to PDF:\r\n%.pdf : %.tex ; pdflatex $<\r\n• If your top-level LATEX document includes\r\nother files (whether LATEX or graphics), then\r\nyou can specify them as additional\r\ndependencies of the corresponding DVI file\r\n(or PDF file if you go straight to PDF).\r\n• It is possible to generate such dependencies\r\nautomatically. There are a few Perl scripts\r\naround that purport to do this. I’ve even\r\nwritten one myself. But they aren’t entirely\r\nsatisfactory. Problems:\r\n– In C, all #includes are visible in the\r\nsource file, while in LATEX an \\input\r\nmay result from the expansion of a\r\nuser-defined command, which may\r\ninvolve some arbitrary computation. So\r\nyou can’t completely find out what’s\r\ninput except by almost fully simulating\r\nlatex.\r\n– Having automatically generated .tex\r\nfiles (such as is done by transfig) can\r\ninteract badly with latex’s search along\r\nits search path given by the environment\r\n20In most cases, it’s better also to provide the -Ppdf option\r\nto dvips, so dvips chooses font representations that convert\r\nbetter into PDF.\r\n35",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/c4f5a078-396b-4544-9510-ddbaecc13f30.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c25f89154b7c5845b933e9de5a75ebebcce00f4bc576669a2221559eb26a625e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 544
      },
      {
        "segments": [
          {
            "segment_id": "c4f5a078-396b-4544-9510-ddbaecc13f30",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 35,
            "page_width": 595,
            "page_height": 842,
            "content": "2. A large document can be broken across\r\na number of files, using \\input,\r\n\\include, and \\includegraphics.\r\n• These make LATEX documents particularly\r\nsuited for being put under a version-control\r\nsystem like CVS or subversion, with all the\r\nbenefits that brings, such as:\r\n– Team development: Shared repository\r\nwith individual checked-out workspaces,\r\npossibly on remote machines.\r\n– Version control and branching.\r\n– Tracking and documentation of rationale\r\nfor changes via log messages.\r\n– Diffs for focussing on changes.\r\n– . . .\r\n• Just a few things to note:\r\n– Because CVS diffs are line based, it’s\r\nnot a good idea to make unnecessary\r\nchanges to the line structure of your\r\nsource, since they make the real diffs\r\nhard to locate.\r\nFor example, if you change a few words\r\nin a paragraph in the source file, it’s not\r\na good idea to re-fill that paragraph in\r\nyour text editor (say by M-Q in emacs).\r\nSome text editors, on Windoze in\r\nparticular, store text paragraphs as\r\nsingle long lines, and just wrap them to\r\nfit for the display. If you change a single\r\ncharacter of that paragraph, the whole\r\nparagraph will show up as a diff line,\r\nagain making it hard to see the real\r\ndifferences.\r\n– Because $ is an active character in\r\nLATEX, it takes some contrivance to get\r\nCVS keyword substitutions, like $Id$ to\r\nwork. Sure, you can easily put them\r\ninside a comment, but getting the CVS\r\nstuff to print in the document is trickier.\r\nIt can be done—see how it’s done in the\r\nsource of this document to get some\r\n→ ideas, or use one of the packages\r\nproviding this facility.\r\n– Remember, if you’re checking-in other\r\ndocument source files, like images, which\r\nare binary, not text, then you’ll need to\r\nspecify -kb on the cvs add command.\r\n16.2 Build tools—make\r\n• Because all the LATEX-related processors, like\r\nlatex, bibtex, dvips, etc., are\r\nshell-invokable programs, it’s very convenient\r\nto use a build tool, like make to generate your\r\nfinal documents.\r\n• With GNU make, you can write makefile rules\r\nlike:20\r\n%.dvi : %.tex ; latex $<\r\n%.ps : %.dvi ; dvips -t a4 -o $@ $<\r\n%.pdf : %.ps ; ps2pdf $< $@\r\nOr, if you prefer to go direct to PDF:\r\n%.pdf : %.tex ; pdflatex $<\r\n• If your top-level LATEX document includes\r\nother files (whether LATEX or graphics), then\r\nyou can specify them as additional\r\ndependencies of the corresponding DVI file\r\n(or PDF file if you go straight to PDF).\r\n• It is possible to generate such dependencies\r\nautomatically. There are a few Perl scripts\r\naround that purport to do this. I’ve even\r\nwritten one myself. But they aren’t entirely\r\nsatisfactory. Problems:\r\n– In C, all #includes are visible in the\r\nsource file, while in LATEX an \\input\r\nmay result from the expansion of a\r\nuser-defined command, which may\r\ninvolve some arbitrary computation. So\r\nyou can’t completely find out what’s\r\ninput except by almost fully simulating\r\nlatex.\r\n– Having automatically generated .tex\r\nfiles (such as is done by transfig) can\r\ninteract badly with latex’s search along\r\nits search path given by the environment\r\n20In most cases, it’s better also to provide the -Ppdf option\r\nto dvips, so dvips chooses font representations that convert\r\nbetter into PDF.\r\n35",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/c4f5a078-396b-4544-9510-ddbaecc13f30.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c25f89154b7c5845b933e9de5a75ebebcce00f4bc576669a2221559eb26a625e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 544
      },
      {
        "segments": [
          {
            "segment_id": "c08cb483-26e7-416a-9f53-d00bedeaf035",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 36,
            "page_width": 595,
            "page_height": 842,
            "content": "variable TEXINPUTS. Suppose you\r\n\\input a file that doesn’t exist yet but\r\nis supposed to be created as needed in\r\nthe current directory. The path search\r\nfor dependencies might find another file\r\nby the same name elsewhere on the\r\nsearch path, and take that as satisfying\r\nthe dependency. And make will therefore\r\nnever trigger creation of that needed\r\n.tex file.\r\nOne better solution to this is to grovel\r\nthrough the .log file, and parse out the\r\nmessages that latex writes there when it\r\nreads a file. An even better solution (though\r\nstill not perfect) would be to redefine LATEX’s\r\nvarious input commands so that they write\r\nthe dependencies to a file in proper makefile\r\nformat. Anyone feel like writing such a\r\npackage?\r\nA less strenuous solution would be to define\r\nyour own variant versions of the commands,\r\nsay \\Input, \\Include, and\r\n\\Includegraphics, which call the underlying\r\nLATEX commands, but also record what file\r\nhas been read. Then always use your variant\r\nversions in your document. Still not a perfect\r\nsolution. . .\r\n• One aspect of LATEX which make doesn’t\r\nhandle well is that LATEX actually entails\r\nsome circular dependencies, which\r\nfundamentally violates make’s mode of\r\noperation, which assumes (reasonably enough\r\nfor most compilers) that the dependency\r\ngraph is acyclic. Most obviously, latex both\r\nneeds and produces the .aux files.\r\nFurthermore, latex needs the .bbl file\r\nproduced by bibtex, but bibtex needs the\r\n.aux file produced by latex.\r\nThe pragmatic solution is to express just the\r\n“mainstream” dependencies in the makefile,\r\nlike of the DVI file on the top-level and\r\ninputted LATEX and graphics files, and be\r\nprepared occasionally to intervene by hand:\r\n↓ Use something like make -W foo.tex\r\nfoo.dvi to get make to act is if foo.tex had\r\nbeen changed, thus forcing a re-run to resolve\r\n↑ cross-references. Or remove the DVI file. Or,\r\nless elegant, but simpler, just type and delete\r\na character in your source file, then save it\r\nand remake (you’ll probably be editing it\r\nanyway). Likewise, have a target to force\r\nrunning of bibtex as needed.\r\n• Another issue is that, even if latex\r\nencounters errors, it will still usually create a\r\nDVI file (if only a partial one), “successfully”\r\nfrom make’s point of view.\r\nIf the target you’re aiming to create is a say a\r\nPostScript file using dvips, then even after\r\nyou’ve modified the LATEX sources to fix the\r\nerrors, make will still think that the\r\nPostScript file is up to date with respect to\r\nthe current DVI file. Again, the pragmatic\r\nsolution is to force rebuilding.\r\n• As well as using make to control running\r\nlatex, you can also use it to control other\r\ntransformations of files that contribute to\r\nyour document, for example:\r\n– Automated conversion of diagrams\r\nproduced by xfig into EPS using\r\ntransfig. Much more convenient than\r\nalways needing to invoke the “export”\r\nfunction in the GUI.\r\n– Automated processing of images, say for\r\ncontrast enhancement for better\r\npresentation using programs from the\r\npbmplus/netpbm or ImageMagick\r\npackages. You may need to do different\r\nkinds of enhancement for different\r\npurposes for all your images.\r\n16.3 Automatic generation of LATEX\r\n• It’s reasonably straightforward to write\r\nscripts (especially Perl scripts) or programs\r\nto generate LATEX, either complete\r\nstand-alone documents, or fragments that can\r\nbe inputted into other LATEX documents.\r\n• This has numerous uses. For example,\r\n– If you have a lot of numeric data, you\r\ncan write a script to wrap the\r\nappropriate LATEX around the data to\r\nformat it nicely into a table (using the\r\ntabular environment). Be warned, this\r\noften involves a lot of backslashes, since\r\n36",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/c08cb483-26e7-416a-9f53-d00bedeaf035.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0441a4cd1afe690923a26a94cad8819c0bce5bcd2b04e6f586a02dfb144348d1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 600
      },
      {
        "segments": [
          {
            "segment_id": "c08cb483-26e7-416a-9f53-d00bedeaf035",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 36,
            "page_width": 595,
            "page_height": 842,
            "content": "variable TEXINPUTS. Suppose you\r\n\\input a file that doesn’t exist yet but\r\nis supposed to be created as needed in\r\nthe current directory. The path search\r\nfor dependencies might find another file\r\nby the same name elsewhere on the\r\nsearch path, and take that as satisfying\r\nthe dependency. And make will therefore\r\nnever trigger creation of that needed\r\n.tex file.\r\nOne better solution to this is to grovel\r\nthrough the .log file, and parse out the\r\nmessages that latex writes there when it\r\nreads a file. An even better solution (though\r\nstill not perfect) would be to redefine LATEX’s\r\nvarious input commands so that they write\r\nthe dependencies to a file in proper makefile\r\nformat. Anyone feel like writing such a\r\npackage?\r\nA less strenuous solution would be to define\r\nyour own variant versions of the commands,\r\nsay \\Input, \\Include, and\r\n\\Includegraphics, which call the underlying\r\nLATEX commands, but also record what file\r\nhas been read. Then always use your variant\r\nversions in your document. Still not a perfect\r\nsolution. . .\r\n• One aspect of LATEX which make doesn’t\r\nhandle well is that LATEX actually entails\r\nsome circular dependencies, which\r\nfundamentally violates make’s mode of\r\noperation, which assumes (reasonably enough\r\nfor most compilers) that the dependency\r\ngraph is acyclic. Most obviously, latex both\r\nneeds and produces the .aux files.\r\nFurthermore, latex needs the .bbl file\r\nproduced by bibtex, but bibtex needs the\r\n.aux file produced by latex.\r\nThe pragmatic solution is to express just the\r\n“mainstream” dependencies in the makefile,\r\nlike of the DVI file on the top-level and\r\ninputted LATEX and graphics files, and be\r\nprepared occasionally to intervene by hand:\r\n↓ Use something like make -W foo.tex\r\nfoo.dvi to get make to act is if foo.tex had\r\nbeen changed, thus forcing a re-run to resolve\r\n↑ cross-references. Or remove the DVI file. Or,\r\nless elegant, but simpler, just type and delete\r\na character in your source file, then save it\r\nand remake (you’ll probably be editing it\r\nanyway). Likewise, have a target to force\r\nrunning of bibtex as needed.\r\n• Another issue is that, even if latex\r\nencounters errors, it will still usually create a\r\nDVI file (if only a partial one), “successfully”\r\nfrom make’s point of view.\r\nIf the target you’re aiming to create is a say a\r\nPostScript file using dvips, then even after\r\nyou’ve modified the LATEX sources to fix the\r\nerrors, make will still think that the\r\nPostScript file is up to date with respect to\r\nthe current DVI file. Again, the pragmatic\r\nsolution is to force rebuilding.\r\n• As well as using make to control running\r\nlatex, you can also use it to control other\r\ntransformations of files that contribute to\r\nyour document, for example:\r\n– Automated conversion of diagrams\r\nproduced by xfig into EPS using\r\ntransfig. Much more convenient than\r\nalways needing to invoke the “export”\r\nfunction in the GUI.\r\n– Automated processing of images, say for\r\ncontrast enhancement for better\r\npresentation using programs from the\r\npbmplus/netpbm or ImageMagick\r\npackages. You may need to do different\r\nkinds of enhancement for different\r\npurposes for all your images.\r\n16.3 Automatic generation of LATEX\r\n• It’s reasonably straightforward to write\r\nscripts (especially Perl scripts) or programs\r\nto generate LATEX, either complete\r\nstand-alone documents, or fragments that can\r\nbe inputted into other LATEX documents.\r\n• This has numerous uses. For example,\r\n– If you have a lot of numeric data, you\r\ncan write a script to wrap the\r\nappropriate LATEX around the data to\r\nformat it nicely into a table (using the\r\ntabular environment). Be warned, this\r\noften involves a lot of backslashes, since\r\n36",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/c08cb483-26e7-416a-9f53-d00bedeaf035.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0441a4cd1afe690923a26a94cad8819c0bce5bcd2b04e6f586a02dfb144348d1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 600
      },
      {
        "segments": [
          {
            "segment_id": "6b570521-b78d-44ee-bfce-abb92db23a39",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 37,
            "page_width": 595,
            "page_height": 842,
            "content": "in both C and Perl you need to\r\nbackslash-escape a backslash in order to\r\nget it printed in the output.\r\n– Suppose you have certain constants\r\n(numeric or string) that must appear\r\nconsistently in both program source\r\ncode and in documentation. (“The\r\nmaximum length of a address field is 128\r\ncharacters.”) Rather than type them in\r\ntwice, with the risk of inconsistencies,\r\nyou can create a simple configuration file\r\nwhich defines these constants, and then\r\nwrite scripts to generate consistently\r\nboth C header files of #defines, and\r\nLATEX input files of \\newcommand\r\ndefinitions. For example, from\r\nsomething like:\r\nADDRMAX 128\r\nyou’d generate both\r\n#define ADDRMAX 128\r\nfor C, and\r\n\\newcommand{\\ADDRMAX}{128}\r\nfor LATEX.\r\n• Generation of LATEX from XML is mentioned\r\nelsewhere.\r\n• There are a number of packages that support\r\nconditional text in LATEX, conceptually\r\nsimilar to #ifdef in C, without getting into\r\nfull programmability of LATEX (for which see\r\nbelow). The optional package is probably\r\nthe best of these.\r\n• If you need to produce LATEX documents in a\r\nnumber of different formats, rather than\r\ncontinually editing, you can put all your\r\ncontent into files to be inputted, and\r\nautomatically generate various top-level\r\nLATEX files, each of which say defines various\r\ndifferent settings in the preamble, and then\r\ninputs the content in the body.\r\n• Actually the opposite: For the Image\r\nUnderstanding Environment, it was necessary,\r\nfrom a common description to generate both\r\ndocumentation and boilerplate C++ code to\r\nsupport some extensions to C++. LATEX/TEX\r\nwas an obvious choice for the first task\r\n(generating documentation). But then the\r\nimplementors realised they could also use\r\nLATEX/TEX for the second task: code\r\ngeneration. (This uses some lower-level\r\nfeatures by which TEX can open and read and\r\nwrite files.) This is the only case I know of of\r\nan (admittedly simple) compiler written in\r\nTEX!\r\n17 Miscellaneous Topics\r\n17.1 Index and glossary\r\n• For a large work, like a book, a good index is\r\nessential.\r\n• LATEX provides support for preparing an\r\nindex:\r\n– Put \\usepackage{makeidx} and\r\n\\makeindex in the preamble\r\n– Attach \\index with index entry for each\r\nplace you want indexed, e.g.\r\nA gnat\\index{gnat} with\r\ngnarled wings gnashed ...\r\n(From [7, p. 75].)\r\n– Put \\printindex where you want the\r\nindex\r\n– You also need to run the makeindex\r\nprogram to process the raw output from\r\nthe \\index commands into a formatted\r\nindex (somewhat analogous to bibtex).\r\n• There are analogous facilities for preparation\r\nof a glossary\r\n• For more information, see [7, §4.5] and [4,\r\nCh. 12].\r\n17.2 Verbatim text\r\n• Sometimes you want LATEX not to interpret\r\nall its special characters.\r\n• Especially if you want to give computer\r\nprogram listings, or LATEX examples.\r\n37",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/6b570521-b78d-44ee-bfce-abb92db23a39.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2914e935463fbf5fc315b53de287f025961350d8277ea4ec064f407c135214e2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 447
      },
      {
        "segments": [
          {
            "segment_id": "687a14db-3d9d-40ca-8435-c313fd2562c6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 38,
            "page_width": 595,
            "page_height": 842,
            "content": "• You can “escape” these characters, but it gets\r\ntedious.\r\n• The verbatim environment typsets a chunk\r\nof raw text in typewriter font, obeying lines,\r\nand treating all characters literally.\r\n• The \\verb command does this for short\r\npieces of text.\r\n• For example,\r\nOrdinary {\\LaTeX}\r\non a new line?\r\n\\begin{verbatim}\r\nOrdinary {\\LaTeX}\r\non a new line?\r\n\\end{verbatim}\r\n\\verb+#$_^\\{}+\r\nproduces\r\nOrdinary LATEX on a new line?\r\nOrdinary {\\LaTeX}\r\non a new line?\r\n#$_^\\{}\r\n• Because these change the way LATEX reads in\r\ntext, they’re restricted: can’t be passed in\r\narguments to commands.\r\n• There is also the alltt environment, which\r\nallows some limited LATEX processing.\r\n• Not to be used for visual formatting!\r\nFor that use say the tabular or tabbing\r\nenvironments.\r\n→ • The moreverb and fancyverb packages\r\nprovide additional verbatim support,\r\nincluding input from a file and line\r\nnumbering.\r\n17.3 Multilingual LATEX\r\n• LATEX can support other languages in a\r\nnumber of ways:\r\n– Allowing language specific\r\ncustomization, e.g. \\chapter produces\r\n“Chapitre” in French\r\n– Allow other characters and accents\r\n∗ Via special markup, like \\\"{o} for o¨\r\n(only viable for small usage)\r\n∗ Via special transliteration schemes\r\n(as used for some Indian languages).\r\nMay need auxiliary programs.\r\n∗ By accepting other character sets\r\nand encodings (e.g. Chinese,\r\nUnicode). May require a special\r\nversion of the latex program.\r\n• See, in particular, the babel package.\r\n• This is an area in flux.\r\n17.4 LATEX and the Web\r\n• There are several ways of putting LATEX\r\ndocuments on the Web:\r\n– As PDF, either produced directly using\r\nthe variant pdflatex, or via PostScript\r\nusing dvips21 and pdf2ps (free as part\r\nof ghostscript) or Acrobat Distiller.\r\n– By conversion to HTML using\r\nLATEX2HTML or tex4ht (or to XML).\r\n– Via special browser plugins that support\r\n(a variant of) LATEX, like IBM’s\r\nTechexplorer.\r\n– All have their pros and cons. . .\r\n– All have ways of adding clickable\r\nhypertext links to your document, both\r\ninternal and external (to the Web).\r\n• It’s possible to go the other way: from XML\r\nto generate LATEX automatically for nice\r\ntypesetting of information extracted say from\r\na database.\r\n17.5 PostScript fonts\r\n• By default, LATEX uses the Computer Modern\r\nfamily of fonts designed by Donald Knuth\r\noriginally for TEX.\r\n• These give ordinary LATEX documents a\r\nsubtlely distinctive look.\r\n21As mentioned earlier, best with the -Ppdf option.\r\n38",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/687a14db-3d9d-40ca-8435-c313fd2562c6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=14ea6f48177166621bfeb67c22cd6b10e37e439c55488176629010df02e03b6b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 394
      },
      {
        "segments": [
          {
            "segment_id": "5e311ba2-d1d3-4ae6-9d09-95b915825cf3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 39,
            "page_width": 595,
            "page_height": 842,
            "content": "• LATEX can make use of many other kinds of\r\nfonts, but setting it up is technically\r\ndemanding.\r\n• However, there are some packages which give\r\nyou pretty simple access to a number of\r\nPostScript font families (provided they’re\r\navailable on your system).\r\nThis document could be set in the standard\r\nPostScript Times, Helvetica, and Courier\r\nfonts by\r\n\\usepackage{times}\r\n• Before you do this too freely, keep in mind\r\nthat most of the many mathematical symbols\r\nare usually available only in one of the\r\nComputer Modern fonts. So, even if you\r\nchoose a different font family for the main\r\ntext of your document, any mathematics will\r\nstill use Computer Modern. This can cause\r\nsome subtle stylistic clashes.\r\n• Because of the work involved in creating a\r\nfont, many fonts are proprietary and must be\r\nlicensed. Still, there are a large number of\r\nfreely available fonts.\r\n17.6 Page style and headings\r\n• Standard LATEX supports a number of page\r\nstyles: plain, empty, headings, and\r\nmyheadings (the last used in conjunction\r\nwith \\markright and \\markboth commands).\r\n• They are set globally with the\r\n\\pagestyle{style } command.\r\n• The \\thispagestyle{style } sets the page\r\nstyle temporarily for just the current page.\r\n• The page numbering can be set via the\r\n\\pagenumbering{num style }, where\r\nnum style can be arabic, roman, Roman,\r\nalph, or Alph. It also resets the page counter\r\nto 1.\r\n• There is also a titlepage environment,\r\nwhich produces an “empty” style page. This\r\nis for doing title pages more complicated than\r\ncan be done with \\maketitle.\r\n• Other packages, like pagestyle and\r\nfancyheadings provide more facilities, like\r\nthree-part titles for the head and foot of each\r\npage.\r\n17.7 Color\r\n• \\usepackage{color}\r\n• Some predefined color names, like red,\r\ngreen, blue. . .\r\n• You can define your own named colors, in\r\nRBG, CMYK, or grayscale.\r\n• Use them for text and boxes.\r\n• For example, the LATEX input shown in\r\nFigure 4 produces the following output:\r\nSome red text and some blue text.\r\nText in SpringGreen\r\nSome text in a pale blue box.\r\nWhite on blue in a gray frame\r\nPredefined colors: black white red\r\ngreen blue yellow cyan magenta\r\n• Can also set the background color of the page\r\nusing \\pagecolor{color }.\r\n17.8 Hyphenation\r\n• If typesetting could only break lines between\r\nwords, then it would be very hard to get nice\r\nfully justified paragraphs.\r\n• So sometimes a word is broken and\r\nhyphenated at a suitable point.\r\n• LATEX’s automatic hyphenation algorithm\r\ngenerally works very well, but sometimes it\r\nneeds help.\r\n• Locally, you can insert the discretionary\r\nhyphen command \\- into a word that’s\r\ngiving trouble. This inhibits any other\r\nhyphenation, so you’ll generally need to put\r\n39",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/5e311ba2-d1d3-4ae6-9d09-95b915825cf3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=87751c55e5d289ddbfd2fc1ccf54a592de374139a3c23d901a8269b0e2b3baa2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 451
      },
      {
        "segments": [
          {
            "segment_id": "d97e6785-f82a-429c-a0b8-e2c9bfac3a83",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 40,
            "page_width": 595,
            "page_height": 842,
            "content": "\\definecolor{paleyellow}%\r\n{rgb}{1.0,1.0,0.7}\r\n\\definecolor{paleblue}%\r\n{cmyk}{0.1,0.1,0.0,0.0}\r\n\\definecolor{midgray}{gray}{0.5}\r\nSome \\textcolor{red}{red text}\r\nand some {\\color{blue} blue text}.\r\n\\noindent\r\n\\textcolor[named]{SpringGreen}%\r\n{Text in SpringGreen}\r\n\\noindent\r\n\\colorbox{paleblue}%\r\n{Some text in a pale blue box.}\r\n{\r\n\\setlength{\\fboxrule}{3pt}\r\n\\setlength{\\fboxsep}{5pt}\r\n\\noindent\r\n\\fcolorbox{midgray}{blue}%\r\n{\\color{white}\r\nWhite on blue in a gray frame}\r\n}\r\n{\\large\r\n\\noindent\r\nPredefined colors:\r\n\\textcolor{black}{black}\r\n\\colorbox{black}{%\r\n\\textcolor{white}{white}}\r\n\\textcolor{red}{red}\r\n\\textcolor{green}{green}\r\n\\textcolor{blue}{blue}\r\n\\textcolor{yellow}{yellow}\r\n\\textcolor{cyan}{cyan}\r\n\\textcolor{magenta}{magenta}\r\n}\r\nFigure 4: LATEX to produce sample color output.\r\nmultiple \\-s into the word, at all reasonable\r\nhyphenation points.22\r\n• Globally, you can use the \\hyphenation\r\ncommand to declare the allowed hyphenation\r\npoints for a word whenever it’s used. The\r\nargument is a space-separated list of words,\r\neach with hyphens at the allowed\r\nhyphenation points.\r\n17.9 Fragile versus robust\r\ncommands\r\n• Things in LATEX (including command\r\narguments) are subject to multiple steps of\r\nprocessing.\r\n• Some arguments are special—because of the\r\nway they’re handled, they’re subject to a\r\ndouble dose of processing.\r\nAn example is the heading argument to a\r\nsectioning command. It’s processed once by\r\nthe sectioning command, but it’s also stored\r\nand gets reprocessed over again when inserted\r\ninto the table of contents.\r\nSuch an argument is called a moving\r\nargument.\r\n• Most LATEX commands stand up fine to this\r\ndouble processing—they are called robust.\r\n• However, some commands, because of the\r\nway they’re implemented, don’t work when\r\nsubject to this double processing—they are\r\ncalled fragile.\r\n• So, you can’t use a fragile command directly\r\nin a moving argument.\r\n• This means that when reading about a\r\ncommand you may need to pay attention to\r\nwhether it’s robust or fragile.\r\n• If you do need to use fragile commands in a\r\nmoving argument, you can “protect” them by\r\nputting \\protect immediately in front of\r\nevery fragile command (including those that\r\nare in arguments to other commands).\r\n22Remember that while the word may now need hyphen\u0002ation only at one point, future changes elsewhere, like chang\u0002ing the wording of the paragraph, or changing margins, may\r\nrequire different hyphenation.\r\n40",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/d97e6785-f82a-429c-a0b8-e2c9bfac3a83.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=be9255113e02d912908363aa2de9eaf7073f5ff455b6be832593f92c33b6a299",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 323
      },
      {
        "segments": [
          {
            "segment_id": "86cd155b-5b64-4b5d-8bb9-b38ca3a5166c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 41,
            "page_width": 595,
            "page_height": 842,
            "content": "• Most robust commands are unaffected by\r\n\\protect, so if you’re unsure about whether\r\na command is fragile or robust, there’s usually\r\nno harm in putting in the \\protect anyway.\r\n• But more usually, you don’t bother putting in\r\n\\protect until you need to in response to\r\nerror messages from LATEX. (Though, coming\r\nfrom deep inside LATEX the resulting error\r\nmessages are often obscure.)\r\n17.10 Some additional useful free\r\nprograms\r\nxdvi X-based DVI viewer.\r\nGhostscript (gs) PostScript/PDF interpreter,\r\nconverter and viewer. The programs gv and\r\nGSView are GUI wrappers around gs. The\r\nGhostscript package comes with many\r\nPostscript-based conversion programs,\r\nPostScript to various image formats, and to\r\nand from PDF.\r\ndvips Converts DVI to PostScript.23\r\npbmplus/netpbm A collection of image\r\nconversion and processing utilities.\r\nImageMagick is similar, arguably better.\r\nxfig and dia GUI programs for drawing 2D\r\ndiagrams. Can export to various formats\r\nsupported by LATEX.\r\ntransfig fig2dev Converts xfig’s .fig files\r\ninto various formats supported by LATEX.\r\nActually, fig2dev is the work-horse, callable\r\nas a command-line utility (say in makefiles)\r\nto do the conversions, while transfig is a\r\n23Here is as good a place as any to point out that the\r\nLATEX system does not keep complete information about all\r\nits fonts. This would take up too much space. In practice,\r\nthe full font information is generated as needed (by Meta\u0002Font). It is cached, however, and re-used on subsequent\r\nruns. So if you’re the first person in a while to use a particu\u0002lar font (and size) on your machine, then you’ll see (and have\r\nto wait for) MetaFont in action generating the full font de\u0002scriptions. It turns out (obvious if you think about it) that\r\nLATEX doesn’t need to know all the information about the\r\nfont, just sufficient to be able to decide where on the page\r\neach character can fit. So, it’s only when you run later pro\u0002grams, like dvips and xdvi, which need this full information\r\n(like the actual letter shape), that you might see MetaFont\r\nrunning.\r\nutility for creating makefiles to do the\r\nconversions.\r\nAbiWord and gnumeric These are respectively\r\na word-processor (like MS Word) and a\r\nspreadsheet (like MS Excel). They can read\r\nthe corresponding MS formats, and also\r\nexport LATEX. Unfortunately, by then all the\r\nsemantic markup has been lost (one of the\r\nadvantages of LATEX). Still, they have some\r\nuse if you’ve been given a document in some\r\nMS format and need to make some use of it\r\nin the LATEX world.\r\nThere are many others. . .\r\n17.11 LATEX debugging\r\nMaking sense of logs, warnings and error\r\nmessages, etc.\r\nSorry, this section still has to be written.\r\nIn the meantime, refer to [7, Chapter 8].\r\n17.12 More advanced programming\r\nfeatures\r\n• While it’s designed to look most of the time\r\nlike a declarative markup language, LATEX\r\n(because it’s built on top of TEX) is in fact a\r\nfully fledged programming language.\r\n• The ifthen package provides control\r\nstructures like if-then-else and loops.\r\n• The calc package provides facilities for\r\nmaking calculations with counters and lengths\r\nmuch easier—it lets you write expressions.\r\n• The truly intrepid can delve into the arcane\r\nunderlying programming facilities of TEX.\r\n17.13 Tips’n’tricks\r\nThis section is far from complete.\r\nThe main thing is not just to learn the\r\nparticular list of tricks given here, but to\r\ndevelop a sense of what’s possible.\r\n1. When creating a LATEX document for the first\r\ntime, it’s a good idea to run latex fairly\r\nfrequently, so that your search for the\r\n41",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/86cd155b-5b64-4b5d-8bb9-b38ca3a5166c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ef33a9a188ef75c3f00e19b7f12f1be3a393a38972650bfb04f79e5394b5389a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 580
      },
      {
        "segments": [
          {
            "segment_id": "86cd155b-5b64-4b5d-8bb9-b38ca3a5166c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 41,
            "page_width": 595,
            "page_height": 842,
            "content": "• Most robust commands are unaffected by\r\n\\protect, so if you’re unsure about whether\r\na command is fragile or robust, there’s usually\r\nno harm in putting in the \\protect anyway.\r\n• But more usually, you don’t bother putting in\r\n\\protect until you need to in response to\r\nerror messages from LATEX. (Though, coming\r\nfrom deep inside LATEX the resulting error\r\nmessages are often obscure.)\r\n17.10 Some additional useful free\r\nprograms\r\nxdvi X-based DVI viewer.\r\nGhostscript (gs) PostScript/PDF interpreter,\r\nconverter and viewer. The programs gv and\r\nGSView are GUI wrappers around gs. The\r\nGhostscript package comes with many\r\nPostscript-based conversion programs,\r\nPostScript to various image formats, and to\r\nand from PDF.\r\ndvips Converts DVI to PostScript.23\r\npbmplus/netpbm A collection of image\r\nconversion and processing utilities.\r\nImageMagick is similar, arguably better.\r\nxfig and dia GUI programs for drawing 2D\r\ndiagrams. Can export to various formats\r\nsupported by LATEX.\r\ntransfig fig2dev Converts xfig’s .fig files\r\ninto various formats supported by LATEX.\r\nActually, fig2dev is the work-horse, callable\r\nas a command-line utility (say in makefiles)\r\nto do the conversions, while transfig is a\r\n23Here is as good a place as any to point out that the\r\nLATEX system does not keep complete information about all\r\nits fonts. This would take up too much space. In practice,\r\nthe full font information is generated as needed (by Meta\u0002Font). It is cached, however, and re-used on subsequent\r\nruns. So if you’re the first person in a while to use a particu\u0002lar font (and size) on your machine, then you’ll see (and have\r\nto wait for) MetaFont in action generating the full font de\u0002scriptions. It turns out (obvious if you think about it) that\r\nLATEX doesn’t need to know all the information about the\r\nfont, just sufficient to be able to decide where on the page\r\neach character can fit. So, it’s only when you run later pro\u0002grams, like dvips and xdvi, which need this full information\r\n(like the actual letter shape), that you might see MetaFont\r\nrunning.\r\nutility for creating makefiles to do the\r\nconversions.\r\nAbiWord and gnumeric These are respectively\r\na word-processor (like MS Word) and a\r\nspreadsheet (like MS Excel). They can read\r\nthe corresponding MS formats, and also\r\nexport LATEX. Unfortunately, by then all the\r\nsemantic markup has been lost (one of the\r\nadvantages of LATEX). Still, they have some\r\nuse if you’ve been given a document in some\r\nMS format and need to make some use of it\r\nin the LATEX world.\r\nThere are many others. . .\r\n17.11 LATEX debugging\r\nMaking sense of logs, warnings and error\r\nmessages, etc.\r\nSorry, this section still has to be written.\r\nIn the meantime, refer to [7, Chapter 8].\r\n17.12 More advanced programming\r\nfeatures\r\n• While it’s designed to look most of the time\r\nlike a declarative markup language, LATEX\r\n(because it’s built on top of TEX) is in fact a\r\nfully fledged programming language.\r\n• The ifthen package provides control\r\nstructures like if-then-else and loops.\r\n• The calc package provides facilities for\r\nmaking calculations with counters and lengths\r\nmuch easier—it lets you write expressions.\r\n• The truly intrepid can delve into the arcane\r\nunderlying programming facilities of TEX.\r\n17.13 Tips’n’tricks\r\nThis section is far from complete.\r\nThe main thing is not just to learn the\r\nparticular list of tricks given here, but to\r\ndevelop a sense of what’s possible.\r\n1. When creating a LATEX document for the first\r\ntime, it’s a good idea to run latex fairly\r\nfrequently, so that your search for the\r\n41",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/86cd155b-5b64-4b5d-8bb9-b38ca3a5166c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ef33a9a188ef75c3f00e19b7f12f1be3a393a38972650bfb04f79e5394b5389a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 580
      },
      {
        "segments": [
          {
            "segment_id": "e218ce47-23db-4897-9b77-327a6abbc989",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 42,
            "page_width": 595,
            "page_height": 842,
            "content": "inevitable errors can be focussed on the new\r\nstuff you’ve added since the last error-free\r\nrun. For this, \\includeonly comes in very\r\nhandy, since only that part of the document\r\nyou’re actively working on needs to be fully\r\nprocessed.\r\nHow often you need to run latex depends on\r\nhow complicated is what you’re typing. If it’s\r\njust simple textual material, you might go on\r\nfor pages without rerunning latex. For\r\ncomplicated mathematics you might rerun\r\nlatex after adding only a few symbols, to\r\nbuild up the formula bit by bit.\r\n2. For something really complicated, you might\r\neven create a “mini-document”, which\r\ncontains the preamble of your actual\r\ndocument, and whose document body\r\ncontains only the difficult piece of LATEX\r\nyou’re working on. You can re-run latex on\r\nthis mini-document very quickly, and speed\r\nup your development cycle. Then you can cut\r\nand paste the working stuff into your real\r\ndocument—or better, keep your experimental\r\nLATEX in a separate file and use \\input to\r\nread it into both your mini and real\r\ndocuments.\r\n3. If you put a \\label just before the\r\n\\end{document}, then the pageref for this\r\nlabel will give the number of pages in the\r\ndocument. It can then be used, say in\r\nconjunction with the fancyheadings\r\npackage, to give page numbers like “Page m\r\nof n”. To get this to work perfectly, you have\r\nto attach the \\label to the last non-space\r\nthing, otherwise there’s a small chance that\r\nLATEX might put a page break immediately\r\nafter the non-space thing, before it fully\r\nprocesses the label, so the label might end up\r\non an extraneous apparently all-blank page of\r\nits own, making the page count one higher\r\nthan it should be.\r\nIn fact, this is a special case of a more general\r\nissue. If you want to give a pageref to some\r\nconstruct, say a sectioning command, then\r\nyou need to put the \\label immediately after\r\nthat construct (without any intervening\r\nspace), to ensure that no page break can\r\ncome between the construct and the\r\nprocessing of the label. The only exception to\r\nthis is the captions of floating environments\r\nlike figures and tables: Since no page break\r\ncan come inside the float, the label can come\r\nanywhere after the caption (even after\r\nintervening whitespace).\r\nIn a similar vein, keep in mind that the\r\nreferences for a figure or table are set by the\r\n\\caption. So, if you mistakenly put the\r\n\\label before the caption then it will\r\nprobably pick up the reference to the\r\nsurrounding section at time of processing.\r\n4. Handy is \\ensuremath, which sets its\r\nargument in math mode regardless of whether\r\nyou’re already in math mode or not. Its main\r\npurpose is in defining commands which can\r\nbe used in or out of math mode. For\r\nexample, if you want to use some math-mode\r\nfeature like a special symbol in ordinary text:\r\n\\newcommand{\\love}%\r\n{$\\heartsuit$}\r\nUsed in ordinary text, the first dollar sign\r\nputs you in math mode, making the\r\n\\heartsuit symbol ♥ available, and the\r\nsecond dollar sign takes you to back to\r\nordinary text mode (so called “LR”, “left to\r\nright”, mode). But if you happened\r\nunsuspectingly to use this command in math\r\nmode, weird things would happen: the first\r\ndollar sign would take you out of math mode,\r\nand you’d get an error, because the\r\n\\heartsuit symbol is available only in math\r\nmode. Defining the command instead as\r\n\\newcommand{\\love}%\r\n{\\ensuremath{\\heartsuit}}\r\nsolves the problem: it would work as intended\r\nin either context.\r\n5. The tabular environment is far more useful\r\nthan you might think: don’t think of it as\r\nbeing restricted to conventional tables.\r\nFor example, suppose you want a particular\r\nrow/column layout of some images. You\r\n42",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/e218ce47-23db-4897-9b77-327a6abbc989.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=328435ea3455e1f62ab48b8b982112fb2c347e3eaa8ed9eef3d80745fa778256",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 616
      },
      {
        "segments": [
          {
            "segment_id": "e218ce47-23db-4897-9b77-327a6abbc989",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 42,
            "page_width": 595,
            "page_height": 842,
            "content": "inevitable errors can be focussed on the new\r\nstuff you’ve added since the last error-free\r\nrun. For this, \\includeonly comes in very\r\nhandy, since only that part of the document\r\nyou’re actively working on needs to be fully\r\nprocessed.\r\nHow often you need to run latex depends on\r\nhow complicated is what you’re typing. If it’s\r\njust simple textual material, you might go on\r\nfor pages without rerunning latex. For\r\ncomplicated mathematics you might rerun\r\nlatex after adding only a few symbols, to\r\nbuild up the formula bit by bit.\r\n2. For something really complicated, you might\r\neven create a “mini-document”, which\r\ncontains the preamble of your actual\r\ndocument, and whose document body\r\ncontains only the difficult piece of LATEX\r\nyou’re working on. You can re-run latex on\r\nthis mini-document very quickly, and speed\r\nup your development cycle. Then you can cut\r\nand paste the working stuff into your real\r\ndocument—or better, keep your experimental\r\nLATEX in a separate file and use \\input to\r\nread it into both your mini and real\r\ndocuments.\r\n3. If you put a \\label just before the\r\n\\end{document}, then the pageref for this\r\nlabel will give the number of pages in the\r\ndocument. It can then be used, say in\r\nconjunction with the fancyheadings\r\npackage, to give page numbers like “Page m\r\nof n”. To get this to work perfectly, you have\r\nto attach the \\label to the last non-space\r\nthing, otherwise there’s a small chance that\r\nLATEX might put a page break immediately\r\nafter the non-space thing, before it fully\r\nprocesses the label, so the label might end up\r\non an extraneous apparently all-blank page of\r\nits own, making the page count one higher\r\nthan it should be.\r\nIn fact, this is a special case of a more general\r\nissue. If you want to give a pageref to some\r\nconstruct, say a sectioning command, then\r\nyou need to put the \\label immediately after\r\nthat construct (without any intervening\r\nspace), to ensure that no page break can\r\ncome between the construct and the\r\nprocessing of the label. The only exception to\r\nthis is the captions of floating environments\r\nlike figures and tables: Since no page break\r\ncan come inside the float, the label can come\r\nanywhere after the caption (even after\r\nintervening whitespace).\r\nIn a similar vein, keep in mind that the\r\nreferences for a figure or table are set by the\r\n\\caption. So, if you mistakenly put the\r\n\\label before the caption then it will\r\nprobably pick up the reference to the\r\nsurrounding section at time of processing.\r\n4. Handy is \\ensuremath, which sets its\r\nargument in math mode regardless of whether\r\nyou’re already in math mode or not. Its main\r\npurpose is in defining commands which can\r\nbe used in or out of math mode. For\r\nexample, if you want to use some math-mode\r\nfeature like a special symbol in ordinary text:\r\n\\newcommand{\\love}%\r\n{$\\heartsuit$}\r\nUsed in ordinary text, the first dollar sign\r\nputs you in math mode, making the\r\n\\heartsuit symbol ♥ available, and the\r\nsecond dollar sign takes you to back to\r\nordinary text mode (so called “LR”, “left to\r\nright”, mode). But if you happened\r\nunsuspectingly to use this command in math\r\nmode, weird things would happen: the first\r\ndollar sign would take you out of math mode,\r\nand you’d get an error, because the\r\n\\heartsuit symbol is available only in math\r\nmode. Defining the command instead as\r\n\\newcommand{\\love}%\r\n{\\ensuremath{\\heartsuit}}\r\nsolves the problem: it would work as intended\r\nin either context.\r\n5. The tabular environment is far more useful\r\nthan you might think: don’t think of it as\r\nbeing restricted to conventional tables.\r\nFor example, suppose you want a particular\r\nrow/column layout of some images. You\r\n42",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/e218ce47-23db-4897-9b77-327a6abbc989.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=328435ea3455e1f62ab48b8b982112fb2c347e3eaa8ed9eef3d80745fa778256",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 616
      },
      {
        "segments": [
          {
            "segment_id": "8e6d8fad-efab-4b36-a279-8347362dece4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 43,
            "page_width": 595,
            "page_height": 842,
            "content": "make a figure environment so the whole\r\nthing can float. The contents of the figure\r\nenvironment is a tabular environment, which\r\ngives you the row/column layout inside the\r\ntop-level figure. The actual cells of the\r\ntabular \\includegraphics the images.\r\nThere’s nothing to stop a figure from having\r\nmultiple captions, so each sub-image can have\r\nits own separate caption, though sometimes\r\nyou need to play tricks with minipage\r\nenvironments to make sure LATEX is in the\r\ncorrect mode when processing the captions.\r\nFor this sort of thing, the subfigure package\r\nmay be helpful. See [4].\r\n6. The main obvious use of the \\multicolumn\r\ncommand in a tabular is to make a cell that\r\nspans multiple columns. But it has many\r\nother uses, for example, you can use a\r\none-column \\multicolumn to make a centered\r\nheading over an otherwise p{} column.\r\n7. Usually the cleanest way to get a more\r\ncomplicated tabular arrangement is to use\r\nnested tabulars—that is, tabulars whose cells\r\nare in turn tabulars.24 In cases like this it’s\r\ngenerally better if the internal tabulars have\r\n@{} at either end of their column\r\nspecification to suppress the space that’s\r\nnormally put around a free-standing tabular,\r\nsince the inner tabular will already be getting\r\nthe ordinary intercolumn space from the\r\nouter tabular.\r\nThe output shown in Figure 5 is produced by\r\nthe LATEX shown in Figure 6 (which also\r\ndemonstrates next point). Note that the\r\nlayout is constructed from a three-column\r\none-row outer tabular. Each cell is in turn\r\nconstructed by a nested tabular: First a fairly\r\nsimple table of numbers with a trick for\r\naligning the decimal points, then a\r\none-column, three-row layout of images, last\r\na one-cell tabular containing some rotated\r\ntext. (You can see that for a one-row tabular,\r\nlike the outer tabular here, the choice of\r\n24You can play dirty tricks in tabulars with things like\r\nstruts and negative vertical space to control positioning—\r\nlike to make something contained in one cell actually print\r\nin the cell above it. But this is very messy and fragile, and\r\nnot recommended unless you have no other choice.\r\n\\begin{figure*}\r\n\\newcommand{\\Img}[1]%\r\n{\\resizebox{#1}{!}%\r\n{\\includegraphics%\r\n{daylesford.eps}}}\r\n\\begin{center}\r\n\\begin{tabular}{rlr}\r\n\\begin{tabular}{|l r@{$\\cdot$}l|}\r\n\\hline\r\n\\multicolumn{3}{|c|}%\r\n{\\bf Approximations} \\\\\r\n$\\pi$ & 3&14159254\\ldots \\\\\r\n$e$ & 2&71828\\ldots \\\\\r\n$e^\\pi$ & 23&14069263\\ldots \\\\\r\n\\hline\r\n\\end{tabular}\r\n&\r\n\\begin{tabular}{@{}c@{}}\r\n\\Img{8em} \\\\ \\Img{4em} \\\\ \\Img{2em}\r\n\\end{tabular}\r\n&\r\n\\begin{tabular}{@{}c@{}}\r\n\\rotatebox{90}{This extraneous\r\ntext is provided by a rotated box.}\r\n\\end{tabular}\r\n\\end{tabular}\r\n\\end{center}\r\n\\caption{Using nested\r\n\\texttt{tabular}s for layout.}\r\n\\label{fig:tabular}\r\n\\end{figure*}\r\nFigure 6: LATEX to produce Figure 5.\r\n43",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/8e6d8fad-efab-4b36-a279-8347362dece4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9aa8e5f698b99ff04dd6575b617a09424a14f96931953ae6ccea11ba3648467c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 413
      },
      {
        "segments": [
          {
            "segment_id": "382b6dea-76c1-4786-afac-2690b78de26e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 44,
            "page_width": 595,
            "page_height": 842,
            "content": "Approximations\r\nπ 3·14159254. . .\r\ne 2·71828. . .\r\ne\r\nπ 23·14069263. . .\r\nThis extraneous text is provided\r\nb\r\ny a rotated\r\nbox.\r\nFigure 5: Using nested tabulars for layout.\r\ncolumn alignments, like l, c, r, doesn’t really\r\nmatter, since each cell will completely fill its\r\ncolumn width.)\r\nThis strategy is summarized in Les’s LATEX\r\nProverb:\r\nUsually, the solution to problems\r\nwith tabulars is: more tabulars.\r\n8. One way of getting a column of numbers\r\naligned on their decimal points is to use a\r\ncolumn specifier like r@{$\\cdot$}l: the\r\ninteger parts end up right justified in one\r\ncolumn, the decimal fractions left-justified in\r\nthe next, and the usual inter-column space is\r\nreplaced by the decimal point. See Figure 5.\r\nThere are, of course, other ways. . .\r\n9. Knuth decreed that the origin for a TEX page\r\nbe 1 inch down and 1 inch in from the top\r\nleft corner of the page. (This was to fit with\r\nthe common American practice of 1 inch\r\nmargins all around.) This offset can cause\r\nsome confusion. Setting the length\r\n\\topmargin to 0pt gives you a 1 inch top\r\nmargin. To get a smaller top margin, you\r\nhave to make \\topmargin a suitable negative\r\nlength. Similarly for \\oddsidemargin and\r\n\\evensidemargin. There are some packages\r\nto simplify the setting of margins and other\r\npage-layout parameters.\r\n10. TEX measures the page from the top left\r\n(with the 1 inch offsets). PostScript’s\r\ncoordinate system is from the bottom left\r\ncorner. So to convert properly from DVI to\r\nPostScript, a program like dvips needs to\r\nknow the actual height of the page. (Think\r\nabout it in terms of the coordinate\r\ntransformation.) In many (not all)\r\ninstallations, the default setup for dvips is\r\nfor U.S. Letter size paper. If you print the\r\nresulting PostScript output on A4 paper, it\r\nwill be wrongly offset on the page. The way\r\nto fix this is to set the paper size explicitly\r\nusing the -t a4 option to dvips, or in your\r\nown .dvipsrc configuration file. (Read the\r\ndvips man pages.)\r\n11. Postscript printing in landscape format will\r\nrequire a -t landscape special option to\r\ndvips.\r\n12. The packages picinpar, floatfig, and\r\nwrapfig provide different ways of getting\r\n44",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/382b6dea-76c1-4786-afac-2690b78de26e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=694a27393dec57eb3ced76746f605bee66104c251a2bf8f483f308cf81b933df",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 368
      },
      {
        "segments": [
          {
            "segment_id": "747eac5a-dfc9-4371-a409-378af045c272",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 45,
            "page_width": 595,
            "page_height": 842,
            "content": "figures which the text “wraps” around.\r\nAgain, see [4].\r\n13. The url package provides some commands to\r\nfacilitate typesetting of URLs, similar long\r\nfile pathnames, and email addresses. See [3].\r\nMore simply, the TEX command \\slash\r\nproduces a slash after which TEX can put a\r\nline break if it needs to. Useful for constructs\r\nlike “and/or”. The \\linebreak[0] construct\r\ncan also come in handy in similar situations,\r\nto give LATEX a hint as to where it might\r\nbreak something that’s too long to fit on a\r\nline.\r\n14. Standard LATEX provides for only one-column\r\nor two-column printing. The multicol\r\npackage permits more flexible and more\r\ngeneral multi-column printing (though this\r\nshould not be taken to extremes). See [4].\r\n15. Occasionally, the associated files, like .aux\r\ncan get messed up, creating mysterious errors\r\non the next run. One way in which this can\r\nhappen is when you’re switching between\r\nlatex and pdflatex. Even though they’re\r\nboth LATEX, the two versions write slightly\r\ndifferent information to the .aux files, which\r\ncan confuse the other. The solution to this is\r\njust to remove the .aux files and start afresh.\r\n16. Anything after \\end{document} in the source\r\nfile is ignored. It can provide a useful place\r\nfor parking stuff that you don’t want to be\r\nprocessed, but want to keep around for\r\npossible future use.\r\n17. That environment arguments can be used\r\nonly in the first “front” part of an\r\nenvironment is a consequence of how\r\nenvironments are implemented. It ends up\r\nbeing more a minor annoyance than a real\r\ndefect. If you need variable content in the\r\nsecond “tail” part, you can always store it\r\nsomehow in the first part (perhaps in a\r\nnamed box), then retrieve in the second part.\r\n18. Plug for xdvi and gv: Both xdvi and gv are\r\nset up to work well in development. When\r\ntheir window is exposed/deiconified, they\r\ncheck whether the file they’re viewing has\r\nbeen updated, and if so, reload it, as far as\r\npossible at the same position in the file. This\r\nmeans that when you’re developing a\r\ndocument, you surely don’t start up a new\r\nxdvi or gv for each edit cycle (which would\r\ntypically load afresh at page one); instead,\r\nyou keep the same xdvi or gv process\r\nrunning, and let it reload and redisplay after\r\neach latex run the part of the document\r\nyou’re currently working on. This isn’t\r\nWYSIWYG, but can give you reasonably\r\ntight feedback.\r\nNote that xdvi can display embedded\r\nPostScript (EPS) figures in a DVI file. It\r\ndoes this by calling gs as what in current\r\nparlance would be called a “plug-in”.\r\n17.14 What’s missing?\r\n• Probably quite a lot. . .\r\n• . . . but less than there used to be.\r\n17.15 Learning and getting more\r\n• The file sample2e.tex in the standard LATEX\r\ndistribution illustrates many features of\r\nLATEX.\r\n• If you don’t want to spend money on books,\r\nthe “Not So Short Introduction to\r\nLATEX 2ε” [8] and the “TEX FAQ” [3] on the\r\nTEXLive CD [10] are very good starting\r\npoints. This document (or future versions)\r\nshould be available via\r\nhttp://www.cs.mu.oz.au/~ljk/latex.html.\r\n• There is also another LATEX introduction\r\naccessible via the MU-CSA website. (I don’t\r\nhave the URL handy.)\r\n• The LATEX “Bible” is Leslie Lamport’s LATEX:\r\nA Document Preparation System[7].\r\nIt covers “standard” LATEX and is probably\r\nan indispensable reference for regular LATEX\r\nusers.\r\n• The TEXlive CD [10] and CTAN [1]\r\n(Comprehensive TEX Archive Network) are\r\nsources for a vast quantity of LATEX\r\ndistributions, packages, and associated\r\nsoftware and documentation.\r\n45",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/747eac5a-dfc9-4371-a409-378af045c272.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f3faeec9b1fa1e892338bc5bd268a2f764dc1775b91508e0cb561eaf6eef29a0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 591
      },
      {
        "segments": [
          {
            "segment_id": "747eac5a-dfc9-4371-a409-378af045c272",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 45,
            "page_width": 595,
            "page_height": 842,
            "content": "figures which the text “wraps” around.\r\nAgain, see [4].\r\n13. The url package provides some commands to\r\nfacilitate typesetting of URLs, similar long\r\nfile pathnames, and email addresses. See [3].\r\nMore simply, the TEX command \\slash\r\nproduces a slash after which TEX can put a\r\nline break if it needs to. Useful for constructs\r\nlike “and/or”. The \\linebreak[0] construct\r\ncan also come in handy in similar situations,\r\nto give LATEX a hint as to where it might\r\nbreak something that’s too long to fit on a\r\nline.\r\n14. Standard LATEX provides for only one-column\r\nor two-column printing. The multicol\r\npackage permits more flexible and more\r\ngeneral multi-column printing (though this\r\nshould not be taken to extremes). See [4].\r\n15. Occasionally, the associated files, like .aux\r\ncan get messed up, creating mysterious errors\r\non the next run. One way in which this can\r\nhappen is when you’re switching between\r\nlatex and pdflatex. Even though they’re\r\nboth LATEX, the two versions write slightly\r\ndifferent information to the .aux files, which\r\ncan confuse the other. The solution to this is\r\njust to remove the .aux files and start afresh.\r\n16. Anything after \\end{document} in the source\r\nfile is ignored. It can provide a useful place\r\nfor parking stuff that you don’t want to be\r\nprocessed, but want to keep around for\r\npossible future use.\r\n17. That environment arguments can be used\r\nonly in the first “front” part of an\r\nenvironment is a consequence of how\r\nenvironments are implemented. It ends up\r\nbeing more a minor annoyance than a real\r\ndefect. If you need variable content in the\r\nsecond “tail” part, you can always store it\r\nsomehow in the first part (perhaps in a\r\nnamed box), then retrieve in the second part.\r\n18. Plug for xdvi and gv: Both xdvi and gv are\r\nset up to work well in development. When\r\ntheir window is exposed/deiconified, they\r\ncheck whether the file they’re viewing has\r\nbeen updated, and if so, reload it, as far as\r\npossible at the same position in the file. This\r\nmeans that when you’re developing a\r\ndocument, you surely don’t start up a new\r\nxdvi or gv for each edit cycle (which would\r\ntypically load afresh at page one); instead,\r\nyou keep the same xdvi or gv process\r\nrunning, and let it reload and redisplay after\r\neach latex run the part of the document\r\nyou’re currently working on. This isn’t\r\nWYSIWYG, but can give you reasonably\r\ntight feedback.\r\nNote that xdvi can display embedded\r\nPostScript (EPS) figures in a DVI file. It\r\ndoes this by calling gs as what in current\r\nparlance would be called a “plug-in”.\r\n17.14 What’s missing?\r\n• Probably quite a lot. . .\r\n• . . . but less than there used to be.\r\n17.15 Learning and getting more\r\n• The file sample2e.tex in the standard LATEX\r\ndistribution illustrates many features of\r\nLATEX.\r\n• If you don’t want to spend money on books,\r\nthe “Not So Short Introduction to\r\nLATEX 2ε” [8] and the “TEX FAQ” [3] on the\r\nTEXLive CD [10] are very good starting\r\npoints. This document (or future versions)\r\nshould be available via\r\nhttp://www.cs.mu.oz.au/~ljk/latex.html.\r\n• There is also another LATEX introduction\r\naccessible via the MU-CSA website. (I don’t\r\nhave the URL handy.)\r\n• The LATEX “Bible” is Leslie Lamport’s LATEX:\r\nA Document Preparation System[7].\r\nIt covers “standard” LATEX and is probably\r\nan indispensable reference for regular LATEX\r\nusers.\r\n• The TEXlive CD [10] and CTAN [1]\r\n(Comprehensive TEX Archive Network) are\r\nsources for a vast quantity of LATEX\r\ndistributions, packages, and associated\r\nsoftware and documentation.\r\n45",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/747eac5a-dfc9-4371-a409-378af045c272.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f3faeec9b1fa1e892338bc5bd268a2f764dc1775b91508e0cb561eaf6eef29a0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 591
      },
      {
        "segments": [
          {
            "segment_id": "3cb5ae21-5f40-49ba-aed5-33ae5530eb63",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 46,
            "page_width": 595,
            "page_height": 842,
            "content": "• The LATEX Companion [4] is a very helpful\r\nreference for those who want to do more\r\nsophisticated things with LATEX.\r\nIt describes many of the additional packages\r\nthat extend the powers of LATEX, and shows\r\nhow to modify LATEX internals, for example\r\nhow to change the formatting of section\r\nheadings.\r\n• Reference [6] treats more advanced graphics,\r\nincluding such things as typesetting musical\r\nscores and chemical structural formulas.\r\n• Reference [5] shows how to put LATEX\r\ndocuments on the Web.\r\n17.16 TEX’s limitations\r\n• TEX was originally developed nearly 30 years\r\nago. That it’s held up so well is a tribute to\r\nDonald Knuth’s conception.\r\n• However, TEX and thus LATEX do have some\r\nintrinsic limitations.\r\n• For example, because of the way they’re\r\ninternally encoded, TEX can use at most 256\r\ndifferent counter variables, and at most 256\r\ndifferent dimension variables. Very few\r\ndocuments, even the size of books, bump into\r\nthese limits. But very complicated documents\r\nthat use many packages, [4] is an example,\r\ncan run into trouble, and require special\r\ntechniques.\r\n• Similarly, TEX was set up to use 8-bit\r\ncharacters (leading edge at the time, when\r\nmany computers still used 6-bit characters).\r\nHandling bigger character sets, like Unicode,\r\nrequires special versions of TEX.\r\n17.17 TEXmacs and Lilypond\r\n• TEXmacs provides similar functionality to\r\nLATEX through a scriptable WYSIWYG\r\ninterface modelled on emacs.\r\n• TEXmacs is different from LATEX: it has its\r\nown representation that overcomes the\r\nhistorical limitations inherited from TEX.\r\n• However, it corresponds closely with LATEX in\r\nthat any TEXmacs document can be\r\nexported as LATEX, and any reasonable LATEX\r\ndocument can be imported into TEXmacs\r\nwith only little work (mainly to provide\r\nTEXmacs definitions of non-standard\r\ncommands).\r\n• TEXmacs also uses TEX’s font machinery to\r\nproduce high-quality typesetting, particularly\r\nof mathematics.\r\n• TEXmacs can also be run in batch mode, and\r\nhas an open external plain-text\r\nrepresentation,25 and so has much the same\r\nadvantages as LATEX in this regard.\r\n• A nifty feature of TEXmacs is the ability to\r\nrun an interactive terminal session inside a\r\ndocument. This is particularly useful for\r\ninteracting with a symbolic algebra system,\r\nlike maxima, with the results of the session\r\nincorporated into the document.\r\n• The GNU musical typesetting engine,\r\nLilypond, is a front-end for LATEX.\r\n• It’s worth mentioning that both TEXmacs\r\nand Lilypond use Scheme (Guile) as their\r\ninternal scripting language.\r\nReferences\r\n[1] Comprehensive TEX archive network. Central\r\nwebsite is http://www.ctan.org; Australian\r\nmirror is\r\nhttp://mirror.aarnet.edu.au/pub/CTAN/.\r\n[2] Salvador Dali. The Unspeakable Confessions\r\nof Salvador Dali, as told to Andr´e Parinaud.\r\nW.H. Allen, London, 1976. Translated from\r\nthe French by Harold J. Salemson.\r\n[3] The UK TEX FAQ: Your 244 Questions\r\nAnswered, 2002. In file\r\nFAQ/english/newfaq.pdf on [10].\r\n25TEXmacs actually has three different text representa\u0002tions: TEXmacs’s own representation, which is like XML\r\nbut much more compact; full XML; and as Scheme list data,\r\nwhich is very convenient for processing TEXmacs documents\r\nin Scheme.\r\n46",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/3cb5ae21-5f40-49ba-aed5-33ae5530eb63.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d9c90b39a20d3d747613e13bfc04f9416aa11fa03d0bce3df37c80f76f70510e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 488
      },
      {
        "segments": [
          {
            "segment_id": "7302a22b-a4c5-49f8-9290-6436706a076c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 47,
            "page_width": 595,
            "page_height": 842,
            "content": "[4] Michel Goossens, Frank Mittelbach, and\r\nAlexander Samarin. The LATEX Companion.\r\nAddison-Wesley, Boston, 1993.\r\n[5] Michel Goossens and Sebastian Rahtz. The\r\nLATEX Web Companion: Integrating TEX,\r\nHTML and XML. Addison-Wesley, Reading,\r\nMassachusetts, 1999.\r\n[6] Michel Goossens, Sebastian Rahtz, and Frank\r\nMittelbach. The LATEX Graphics Companion:\r\nIllustrating Documents with TEX and\r\nPostScript. Addison-Wesley, Boston, 1997.\r\n[7] Leslie Lamport. LATEX: A Document\r\nPreparation System. Addison-Wesley,\r\nReading, Massachusetts, 2nd edition, 1994.\r\nThe LATEX “Bible”.\r\n[8] Tobias Oetiker, Hubert Partl, Irene Hyna,\r\nand Elisabeth Schegl. The Not So Short\r\nIntroduction to LATEX 2ε: Or LATEX 2ε in 95\r\nMinutes, 2001. Version 3.20, in file texmf/\r\ndoc/guides/lshort-english/lshort.pdf\r\non [10].\r\n[9] Sebastian Rahtz. The TEX Live Guide, 7th\r\nedition, 2002. In directory\r\ntexmf/doc/tldoc/english/File on [10] in\r\nPDF and HTML.\r\n[10] TEXLive CD. Available from various sources.\r\nA Behind The Scenes: How\r\nIt’s Done\r\nA.1 Listing of ljk-latex.bib\r\n@string{aw = \"Addison-Wesley\"}\r\n@book{latex-adps,\r\ntitle = {\\LaTeX: A Document Preparation\r\nSystem},\r\nauthor = {Leslie Lamport},\r\npublisher = aw,\r\naddress = {Reading, Massachusetts},\r\nyear = 1994,\r\nedition = {2nd},\r\nnote = {The {\\LaTeX} ‘‘Bible’’},\r\nisbn = {0-201-52983-1}\r\n}\r\n@book{latex-comp,\r\ntitle = {The {\\LaTeX} Companion},\r\nauthor = {Michel Goossens\r\nand Frank Mittelbach\r\nand Alexander Samarin},\r\npublisher = aw,\r\naddress = \"Boston\",\r\nyear = 1993,\r\nisbn = {0-201-54199-8}\r\n}\r\n@book{latex-gracomp,\r\ntitle = {The {\\LaTeX} Graphics Companion:\r\nIllustrating Documents with\r\n{\\TeX} and PostScript},\r\nauthor = {Michel Goossens\r\nand Sebastian Rahtz\r\nand Frank Mittelbach},\r\npublisher = aw,\r\naddress = \"Boston\",\r\nyear = 1997,\r\nisbn = {0-201-85469-4}\r\n}\r\n@book{latex-webcomp,\r\ntitle = {The {\\LaTeX} Web Companion:\r\nIntegrating {\\TeX}, HTML and XML},\r\nauthor = {Michel Goossens\r\nand Sebastian Rahtz},\r\npublisher = aw,\r\naddress = {Reading, Massachusetts},\r\nyear = 1999,\r\nisbn = {0-201-43311-7}\r\n}\r\n@manual{UKtexfaq,\r\ntitle = {The UK {\\TeX} FAQ:\r\nYour 244~Questions Answered},\r\neditor = {Robin Fairbairns},\r\nkey = {Fairbairns, Robin},\r\nyear = 2002, mon = may,\r\nnote = {In file\r\n\\path{FAQ/english/newfaq.pdf}\r\non~\\cite{texliveCD}}\r\n}\r\n@manual{lshort,\r\ntitle = {The Not So Short Introduction\r\nto {\\LaTeXe}:\r\nOr {\\LaTeXe} in 95 Minutes},\r\nauthor = {Tobias Oetiker and Hubert Partl\r\nand Irene Hyna and Elisabeth Schegl},\r\nyear = 2001, mon = aug,\r\nnote = {Version~3.20, in file\r\n\\path{texmf/doc/guides/lshort-english/lshort.pdf}\r\non~\\cite{texliveCD}}\r\n}\r\n@manual{texlive-guide,\r\ntitle = {The {\\TeX} Live Guide},\r\nedition = {7th},\r\nauthor = {Sebastian Rahtz},\r\nyear = 2002, mon = may,\r\nnote = {In directory\r\n\\path{texmf/doc/tldoc/english/File}\r\n47",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/7302a22b-a4c5-49f8-9290-6436706a076c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fa4caf1e739e5c2b09d57f9e091db6aa6e7fbba95fbf515ae54c53e92d88aed1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0b473043-e1d7-45f3-8684-9a1a82f90e7d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 48,
            "page_width": 595,
            "page_height": 842,
            "content": "on~\\cite{texliveCD} in PDF and HTML}\r\n}\r\n@misc{texliveCD,\r\ntitle = {{\\TeX}{L}ive {CD}},\r\nkey = {TeX Live CD},\r\nnote = {Available from various sources.}\r\n}\r\n@book{dali,\r\ntitle = {The Unspeakable Confessions of\r\n{Salvador} {Dali}, as told to\r\n{Andr\\’{e}} {Parinaud}},\r\nauthor = {Salvador Dali},\r\npublisher = {W.H. Allen},\r\naddress = {London},\r\nyear = 1976,\r\nnote = {Translated from the French\r\nby Harold J.~Salemson.},\r\nisbn = {0-491-01955-6}\r\n}\r\n@misc{CTAN,\r\ntitle = {Comprehensive {\\TeX}\r\nArchive Network},\r\nkey = {CTAN},\r\nnote = {Central website is\r\n\\url{http://www.ctan.org};\r\nAustralian mirror is\r\n\\url{http://mirror.aarnet.edu.au/pub/CTAN/}}\r\n}\r\n$Id: latex_cs.tex,v 1.22 2006/04/23 15:46:30 ljk Exp $\r\n48",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/482ff77f-479c-44bd-9f75-3060e0acb4f2/images/0b473043-e1d7-45f3-8684-9a1a82f90e7d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041730Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=09d47ee72701c54ec15180157b3ce68ff73fa044daf9af92e1840afe92c0565d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 469
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "No response"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Leslie John Kitchen"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "\"15 May 2006\"\n"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "The University of Melbourne\nDepartment of Computer Science and Software Engineering"
        }
      ]
    }
  }
}