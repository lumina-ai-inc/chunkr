{
  "file_name": "Managing the Development of Large Software Systems - 1970 (waterfall).pdf",
  "task_id": "a2e477fe-e97b-45c8-9791-ff7d57d38663",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "0095f7e9-d1dc-47df-9549-3389ea5f720f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 1,
            "page_width": 612,
            "page_height": 792,
            "content": "MANAGING THE DEVELOPMENT OF LARGE SOFTWARE SYSTEMS \r\nDr. Winston W. Rovce \r\nINTRODUCTION \r\nl am going to describe my pe,-.~onal views about managing large software developments. I have had \r\nvarious assignments during the past nit,.: years, mostly concerned with the development of software packages \r\nfor spacecraft mission planning, commanding and post-flight analysis. In these assignments I have experienced \r\ndifferent degrees of successwith respect to arriving at an operational state, on-time, and within costs. I have \r\nbecome prejudiced by my experiences and I am going to relate some of these prejudices in this presentation. \r\nCOMPUTER PROGRAM DEVELOPMENT FUNCTIONS \r\nThere are two essential steps common to all computer program developments, regardless of size or \r\ncomplexity. There is first an analysis step, followed second by a coding step as depicted in Figure 1. This sort \r\nof very simple implementation concept is in fact all that is required if the effort is sufficiently small and if the \r\nfinal product is to be operated by those who built it - as is typically done with computer programs for internal \r\nuse. It is also the kind of development effort for which most customers are happy to pay, since both steps \r\ninvolve genuinely creative work which directly contributes to the usefulness of the final product. An \r\nimplementation plan to manufacture 13rger software systems, and keyed only to these steps, however, is doomed \r\n• tofailure. Many additional development steps are required, none contribute as directly to the final product as \r\nanalysis and coding, and all drive up the development costs. Customer personnel typically would rather not pay \r\nfor them, and development personnel would rather not implement them. The prime function of management \r\nis to sell these concepts to both groups and then enforce compliance on the part of development personnel. \r\nANALYSIS \r\nCODING \r\nFigure 1. Implementation steps to deliver a small computer program for internal operations. \r\nA more grandiose approach to software development is illustrated in Figure 2. The analysis and coding \r\nsteps are still in the picture, but they are preceded by two levels of requirements analysis, are separated by a \r\nprogram design step, and followed by a testing step. These additions are treated separately from analysis and \r\ncoding because they are distinctly different in the way they are executed. They must be planned and staffed \r\ndifferently for best utilization of program resources. \r\nFigure 3 portrays the iterative relationship between successive development phases for this scheme. \r\nThe ordering of steps is based on the following concept: that as each step progresses and the design is further \r\ndetailed, there is an iteration with the preceding and succeeding steps but rarely with the more remote steps in \r\nthe sequence. The virtue of all of this is that as the design proceeds the change process is scoped down to \r\nmanageable limits. At any point in the design process after the requirements analysis is completed there exists \r\na firm and c~seup~ moving baseline to whi(:h to ~turn in the event of unforeseen design difficulties. What we \r\nhave is an effective fallback position that tends to maximize the extent of early work that is salvageable and \r\npreserved. \r\nReprinted from Proceedings, IEEE WESCON, August 1970, pages 1-9. \r\nCo_pyright © 1_9_70 by The Institute of Electrical and Electronics Et)gineers,, .328 \r\nInc. Originally published by TRW. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/a2e477fe-e97b-45c8-9791-ff7d57d38663/images/0095f7e9-d1dc-47df-9549-3389ea5f720f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f3d0b8a1c243691566bd18114b43c60013af5417cea61c3d4caac55273522878",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 539
      },
      {
        "segments": [
          {
            "segment_id": "0095f7e9-d1dc-47df-9549-3389ea5f720f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 1,
            "page_width": 612,
            "page_height": 792,
            "content": "MANAGING THE DEVELOPMENT OF LARGE SOFTWARE SYSTEMS \r\nDr. Winston W. Rovce \r\nINTRODUCTION \r\nl am going to describe my pe,-.~onal views about managing large software developments. I have had \r\nvarious assignments during the past nit,.: years, mostly concerned with the development of software packages \r\nfor spacecraft mission planning, commanding and post-flight analysis. In these assignments I have experienced \r\ndifferent degrees of successwith respect to arriving at an operational state, on-time, and within costs. I have \r\nbecome prejudiced by my experiences and I am going to relate some of these prejudices in this presentation. \r\nCOMPUTER PROGRAM DEVELOPMENT FUNCTIONS \r\nThere are two essential steps common to all computer program developments, regardless of size or \r\ncomplexity. There is first an analysis step, followed second by a coding step as depicted in Figure 1. This sort \r\nof very simple implementation concept is in fact all that is required if the effort is sufficiently small and if the \r\nfinal product is to be operated by those who built it - as is typically done with computer programs for internal \r\nuse. It is also the kind of development effort for which most customers are happy to pay, since both steps \r\ninvolve genuinely creative work which directly contributes to the usefulness of the final product. An \r\nimplementation plan to manufacture 13rger software systems, and keyed only to these steps, however, is doomed \r\n• tofailure. Many additional development steps are required, none contribute as directly to the final product as \r\nanalysis and coding, and all drive up the development costs. Customer personnel typically would rather not pay \r\nfor them, and development personnel would rather not implement them. The prime function of management \r\nis to sell these concepts to both groups and then enforce compliance on the part of development personnel. \r\nANALYSIS \r\nCODING \r\nFigure 1. Implementation steps to deliver a small computer program for internal operations. \r\nA more grandiose approach to software development is illustrated in Figure 2. The analysis and coding \r\nsteps are still in the picture, but they are preceded by two levels of requirements analysis, are separated by a \r\nprogram design step, and followed by a testing step. These additions are treated separately from analysis and \r\ncoding because they are distinctly different in the way they are executed. They must be planned and staffed \r\ndifferently for best utilization of program resources. \r\nFigure 3 portrays the iterative relationship between successive development phases for this scheme. \r\nThe ordering of steps is based on the following concept: that as each step progresses and the design is further \r\ndetailed, there is an iteration with the preceding and succeeding steps but rarely with the more remote steps in \r\nthe sequence. The virtue of all of this is that as the design proceeds the change process is scoped down to \r\nmanageable limits. At any point in the design process after the requirements analysis is completed there exists \r\na firm and c~seup~ moving baseline to whi(:h to ~turn in the event of unforeseen design difficulties. What we \r\nhave is an effective fallback position that tends to maximize the extent of early work that is salvageable and \r\npreserved. \r\nReprinted from Proceedings, IEEE WESCON, August 1970, pages 1-9. \r\nCo_pyright © 1_9_70 by The Institute of Electrical and Electronics Et)gineers,, .328 \r\nInc. Originally published by TRW. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/a2e477fe-e97b-45c8-9791-ff7d57d38663/images/0095f7e9-d1dc-47df-9549-3389ea5f720f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f3d0b8a1c243691566bd18114b43c60013af5417cea61c3d4caac55273522878",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 539
      },
      {
        "segments": [
          {
            "segment_id": "f470ed59-60f6-48d7-9d4b-30c549c99d62",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 2,
            "page_width": 612,
            "page_height": 792,
            "content": "I SYSTE M \r\nI ANALYSIS \r\nPROGRAM DESIGN \r\nI coo,.o \r\nTESTING \r\nI OPERATIONS \r\nFigure 2. Implementation steps to develop a large computer program for delivery to a customer. \r\nI believe in this concept, but the implementation described above is risky and invites failure. The \r\nproblem is illustrated in Figure 4. The testing phase which occurs at the end of the development cycle is the \r\nfirst event for which timing, storage, input/output transfers, etc., are experienced as distinguished from \r\nanalyzed. These phenomena are not precisely analyzable. They are not the solutions to the standard partial \r\ndifferential equations of mathematical physics for instance. Yet if these phenomena fail to satisfy the various \r\nexternal constraints, then invariably a major redesign is required. A simple octal patch or redo of some isolated \r\ncode will not fix these kinds of difficulties. The required design changes are likely to be so disruptive that the \r\nsoftware requirements upon which the design is based and which provides the rationale for everything are \r\nviolated. Either the requirements must be modified, or a substantial change in the design is required. In effect \r\nthe development process has returned to the origin and one can expect up to a lO0-percent overrun in schedule \r\nand/or costs. \r\nOne might note that there has been a skipping-over of the analysis and code phases. One cannot, of \r\ncourse, produce software without these steps, but generally these phases are managed with relative ease and \r\nhave little impact on requirements, design, and testing. In my experience there are whole departments \r\nconsumed with the analysis of orbit mechanics, spacecraft attitude determination, mathematical optimization \r\nof payload activity and so forth, but when these departments have completed their difficult and complex work, \r\nthe resultant program steps involvea few lines of serial arithmetic code. If in the execution of their difficult \r\nand complex work the analysts have made a mistake, the correction is invariably implemented by a minor \r\nchange in the code with no disruptive feedback into the other development bases. \r\nHowever, I believe the illustrated approach to be fundamentally sound. The remainder of this \r\ndiscussion presents five additional features that must be added to this basic approach to eliminate most of the \r\ndevelopment risks. \r\n329 ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/a2e477fe-e97b-45c8-9791-ff7d57d38663/images/f470ed59-60f6-48d7-9d4b-30c549c99d62.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=df7390e72fbeba4945b33215e6475166a0fb1a42ff6a22624b393dbbcd088a5e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "4aad9b98-5b67-4e52-a1fe-326fc712f71b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 3,
            "page_width": 612,
            "page_height": 792,
            "content": "I SYSTEM ! \r\nREQUIREMENTSIBI~ \r\n~\"'i so,w.,~ I \r\nANALYSIS \r\n~1111~ I pRI~OGRAM \r\n~lll I CODING Ii \r\nTESTING \r\nOPERATIONS \r\nFigure 3. Hopefully, the ~terat=ve interact=on between the various phases is confined to successive steps. \r\nI SYSTEM \"1 .~oo,.~-,..Sl.,~ \r\nI so,w..~ !. \r\nI ANALYSIS \r\nPROGRAM \r\nDESIGN \r\nI coo,.G I,~ \r\n! TESTING I \r\nI O .ATO.S ! \r\nFigure 4. Unfortunately, for the process illustrated, the design iterations are never confined to the successive steps. \r\n330 ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/a2e477fe-e97b-45c8-9791-ff7d57d38663/images/4aad9b98-5b67-4e52-a1fe-326fc712f71b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=305c086acbb8e128e0b1989fdf198043aab77c7988fcbc5c60ce667c4fa383e6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 434
      },
      {
        "segments": [
          {
            "segment_id": "5336606e-58c4-4f7f-b055-68a9c54d28a4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 4,
            "page_width": 612,
            "page_height": 792,
            "content": "STEP 1: PROGRAM DESIGN COMES FIRST \r\nThe first step towards a fix is illustrated in Figure 5. A preliminary program design phase has been \r\ninserted between the software requirements generation phase and the analysis phase. This procedure can be \r\ncriticized on the basis that the program designer is forced to design in the relative vacuum of initial software \r\nrequirements without any existing analysis..As a result, his preliminary design may be substantially in error as \r\ncompared to his design if he were to wait until the analysis was complete. This criticism is correct but it misses \r\nthe point. By this technique the program designer assures that the software will not fail because of storage, \r\ntiming, and data flux reasons. As the analysis proceeds in the succeeding phase the program designer must \r\nimpose on the analyst the storage, timing, and operational constraints in such a way that he senses the \r\nconsequences. When he justifiably requires more of this kind of resource in order to implement his equations \r\nit must be simultaneously snatched from his analyst compatriots. In this way all the analysts and all the \r\nprogram designers will contribute to a meaningful design process which will culminate in the proper allocation \r\nof execution time and storage resources. If the total resources to be applied are insufficient or if the embryo \r\noperational design is wrong it will be recognized at this earlier stage and the iteration with requhements and \r\npreliminary design can be redone before final design, coding and test commences. \r\nHow is this procedure implemented? The following steps are required. \r\n1) Begin the design process with program designers, not analysts or programmers. \r\n2) Design, define and allocate the data processing modes even at the risk of being wrong. Allocate \r\nprocessing, functions, design the data base, define data base processing, allocate execution time, define \r\ninterfaces and processing modes with the operating system, describe input and output processing, and define \r\npreliminary operating procedures. \r\n3) Write an overview document that is understandable, informative and current. Each and every \r\nworker must have an elemental understanding of the system. At least one person must have a deep understand\u0002ing of the system which comes partially from having had to write an overview document. \r\n/ ALLOCATE ~ A DESCRIBE / sO..oOO,,. / c % \r\nI \r\nFigure 5. Step 1 : Insure that a preliminary program design is complete before analysis begins. \r\n331 ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/a2e477fe-e97b-45c8-9791-ff7d57d38663/images/5336606e-58c4-4f7f-b055-68a9c54d28a4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1892c9ff47fcd820b93cbd3b0c6cdfb8ea00b3828a094ee0fadc593e6d423668",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 393
      },
      {
        "segments": [
          {
            "segment_id": "8252fb65-2316-4ecd-988a-b867bfd70772",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 5,
            "page_width": 612,
            "page_height": 792,
            "content": "STEP2: DOCUMENT THE DESIGN \r\nAt this point it is appropriate to raise the issue of - \"how much documentation?\" My own view is \r\n\"quite a lot;\" certainly more than most programmers, analysts, or program designers are willing to do if left to \r\ntheir own devices. The first rule of managing software development is ruthless enforcement of documentation \r\nrequirements. \r\nOccasionally I am called upon to review the progress of other software design efforts. My first step is \r\nto investigate the state of the documentation, If the documentation is in serious default my first \r\nrecommendation is simple. Replace project management. Stop all activities not related to documentation. \r\nBring the documentation up to acceptable standards. Management of software is simply impossible withouta \r\nvery high degree of documentation. As an example, let me offer the following estimates for comparison. In \r\norder to procure a 5 million dollar hardware device, I would expect that a 30 page specification would provide \r\nadequate detail to control the procurement. In order to procure5 million dollars of software Iwould estimate \r\n~ 1[,00 pa~e specification is about right in order to achieve comparable control, \r\nWhy so much documentation? \r\n1) Each designer must communicate with interfacing designers, with his management and possibly \r\nwith thecustorner. A verbal record is too intangible to provide an adequate basis for an interface or manage\u0002mentdecision. An acceptable written description forces the designer to take an unequivocal position and \r\nprovide tangible evidence of completion. It prevents the designer from hiding behind the-\"l am90-percent \r\nfinished\" - syndrome month after month. \r\n2) During the early phase of software development the documentation i.sthe specification and i._~.s the \r\ndesign. Until coding begins these three nouns (documentation, specification, design) denoteasingtething. If \r\nthe documentation is bad the design is bad. If the documentation does not yet exist there is as yet no design, \r\nonly people thinking and talking about the design which is of some value, but not much. \r\n3) The real monetary value of good documentation begins downstream in the development process \r\nduring the testing phase and continues through operations and redesign. The value of documentation can be \r\ndescribed in terms of three concrete, tangible situations that every program manager faces. \r\na) During the testing phase, with good documentation the manager can concentrate personnel on the \r\nmistakes in the program. Without good documentation every mistake, large or small, is analyzed by one man \r\nwho probably made the mistake in the first place because he is the only man who understands the program area. \r\nb) During the operational phase, with good documentation the manager can use operation-oriented \r\npersonnel to operate the program and to do a better job, cheaper. Without good documentation the software \r\nmust be operated by those who built it. Generally these people are relatively disinterested in operations and do \r\nnot do as effective a job as operations-oriented personnel. It should be pointed out in this connection that in \r\nan operational situation, if there is some hangup the software is always blamed first. In order either to absolve \r\nthe software or to fix the blame, the software documentation must speak clearly. \r\nc) Following initial operations, when system improvements are in order, good documentation permits \r\neffective redesign, updating, and retrofitting in the field. If documentation does not exist, generally the entire \r\nexisting framework of operating software must be junked, even for relatively modest changes. \r\nFigure 6 shows a documentation plan which is keyed to the steps previously shown. Note that six \r\ndocuments are produced, and at the time of delivery of the final product, Documents No, 1, No. 3, No. 4, \r\nNo. 5, and No. 6 are updated and current. \r\n332 ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/a2e477fe-e97b-45c8-9791-ff7d57d38663/images/8252fb65-2316-4ecd-988a-b867bfd70772.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ca810e0f87b3f362f700b1b3e8e723fb72f81d268a4f05d3379b5a0df1be9381",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 599
      },
      {
        "segments": [
          {
            "segment_id": "8252fb65-2316-4ecd-988a-b867bfd70772",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 5,
            "page_width": 612,
            "page_height": 792,
            "content": "STEP2: DOCUMENT THE DESIGN \r\nAt this point it is appropriate to raise the issue of - \"how much documentation?\" My own view is \r\n\"quite a lot;\" certainly more than most programmers, analysts, or program designers are willing to do if left to \r\ntheir own devices. The first rule of managing software development is ruthless enforcement of documentation \r\nrequirements. \r\nOccasionally I am called upon to review the progress of other software design efforts. My first step is \r\nto investigate the state of the documentation, If the documentation is in serious default my first \r\nrecommendation is simple. Replace project management. Stop all activities not related to documentation. \r\nBring the documentation up to acceptable standards. Management of software is simply impossible withouta \r\nvery high degree of documentation. As an example, let me offer the following estimates for comparison. In \r\norder to procure a 5 million dollar hardware device, I would expect that a 30 page specification would provide \r\nadequate detail to control the procurement. In order to procure5 million dollars of software Iwould estimate \r\n~ 1[,00 pa~e specification is about right in order to achieve comparable control, \r\nWhy so much documentation? \r\n1) Each designer must communicate with interfacing designers, with his management and possibly \r\nwith thecustorner. A verbal record is too intangible to provide an adequate basis for an interface or manage\u0002mentdecision. An acceptable written description forces the designer to take an unequivocal position and \r\nprovide tangible evidence of completion. It prevents the designer from hiding behind the-\"l am90-percent \r\nfinished\" - syndrome month after month. \r\n2) During the early phase of software development the documentation i.sthe specification and i._~.s the \r\ndesign. Until coding begins these three nouns (documentation, specification, design) denoteasingtething. If \r\nthe documentation is bad the design is bad. If the documentation does not yet exist there is as yet no design, \r\nonly people thinking and talking about the design which is of some value, but not much. \r\n3) The real monetary value of good documentation begins downstream in the development process \r\nduring the testing phase and continues through operations and redesign. The value of documentation can be \r\ndescribed in terms of three concrete, tangible situations that every program manager faces. \r\na) During the testing phase, with good documentation the manager can concentrate personnel on the \r\nmistakes in the program. Without good documentation every mistake, large or small, is analyzed by one man \r\nwho probably made the mistake in the first place because he is the only man who understands the program area. \r\nb) During the operational phase, with good documentation the manager can use operation-oriented \r\npersonnel to operate the program and to do a better job, cheaper. Without good documentation the software \r\nmust be operated by those who built it. Generally these people are relatively disinterested in operations and do \r\nnot do as effective a job as operations-oriented personnel. It should be pointed out in this connection that in \r\nan operational situation, if there is some hangup the software is always blamed first. In order either to absolve \r\nthe software or to fix the blame, the software documentation must speak clearly. \r\nc) Following initial operations, when system improvements are in order, good documentation permits \r\neffective redesign, updating, and retrofitting in the field. If documentation does not exist, generally the entire \r\nexisting framework of operating software must be junked, even for relatively modest changes. \r\nFigure 6 shows a documentation plan which is keyed to the steps previously shown. Note that six \r\ndocuments are produced, and at the time of delivery of the final product, Documents No, 1, No. 3, No. 4, \r\nNo. 5, and No. 6 are updated and current. \r\n332 ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/a2e477fe-e97b-45c8-9791-ff7d57d38663/images/8252fb65-2316-4ecd-988a-b867bfd70772.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ca810e0f87b3f362f700b1b3e8e723fb72f81d268a4f05d3379b5a0df1be9381",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 599
      },
      {
        "segments": [
          {
            "segment_id": "fddd3374-03be-4f46-8453-a0a535bd46de",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 6,
            "page_width": 612,
            "page_height": 792,
            "content": "/, \r\nI0: wZ \r\n/oo i ,~ g ~ \r\nIrl .. o i0 . i \r\nIIII ~,- ,,*,1 = \r\n• . ~ \r\nilll ~$~ z~_~ m u, \r\nE \r\nX \r\nE \r\n8 \r\n\"0 \r\n~, Ill N .~- \r\nr\" \r\n.2 / \" \r\nz_ ,,,. ~ ~ E \r\n~OLU \r\na. .~ \r\nN \r\nN \r\nIZ ,~,- w i-,<~ \r\nt\u0002LL \r\n333 ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/a2e477fe-e97b-45c8-9791-ff7d57d38663/images/fddd3374-03be-4f46-8453-a0a535bd46de.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5517e3ac6701a948f09bce2cde3dfd32f54ec2718120ff065790ba0c677f52fb",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "62297b93-9501-4c3c-9ea7-eb87cd42d2d8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 7,
            "page_width": 612,
            "page_height": 792,
            "content": "STEP 3: DO IT TWICE \r\nAfter documentation, the second most important criterion for success revolves around whether the \r\nproduct is totally original. If the computer program in question is being developed for the first time, arrange \r\nmatters so that the version finally delivered to the customer for operational deployment is actually the second \r\nversion insofar as critical design/operations areas are concerned. Figure 7 iltustrates how this might be carried \r\nout by means of a simulation. Note that it is simply the entire process done in miniature, toatime scale that \r\nis relatively small with respect to the overall effort. The nature of this effort can vary widely depending \r\nprimarily on the overall time scale and the nature of the critical problem areas to be modeled. If the effort runs \r\n30 months then this early development ofapilot model might be scheduled for 10 months. For this schedule, \r\nfairly formal controls, documentation procedures, etc., can be utilized. If, however, the overall effort were \r\nreduced to 12 months, then the pilot effort could be compressed to three months perhaps, in order to gain \r\nsufficient leverage on the mainline development. In this case a very special kind of broad competence is \r\nrequired on the part of the personnel involved. They must have an intuitive feel for analysis, coding, and \r\nprogram design. They must quickly sense the trouble spots in the design, model them, model their alternatives, \r\nforget the straightforward aspects of the design which aren't worth studying at this early point, and finally \r\narrive at an error-free program. In either case the point of all this, as with a simulation, is that questions of \r\ntiming, storage, etc. which are otherwise matters of judgment, can now be studied with precision. Without \r\nthis simulation the project manager is at the mercy of human judgment. With the simulation he can at least \r\nperform experimental tests of some key hypotheses and scope down what remains for human judgment, which \r\nin the area of computer program design (as in the estimation of takeoff gross weight, costs to complete, or the \r\ndaily double) is invariably and seriously optimistic. \r\nI I,,, \r\n1 I \r\nANALYSIS I \r\n! PROGRAM I \r\nI DES,GN I \r\n-U coo,.o I \r\nLI .,s.,.o \r\nUSAGE \r\nPRELIMINARY I% PROGRAM DESIGN \r\nANALYSIS \r\ni PROGRAM DESIGN \r\nTESTING \r\n[ OPERATIONS \r\nFigure 7. Step 3: Attempt to do the job twice - the first result provides an early simulation of the final product. \r\n334 ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/a2e477fe-e97b-45c8-9791-ff7d57d38663/images/62297b93-9501-4c3c-9ea7-eb87cd42d2d8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9b94116cd4fcd62decfe041b27af113d0b22bad9e64f44cb3fa1585fc9ad14b2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 454
      },
      {
        "segments": [
          {
            "segment_id": "c29ef8eb-967e-40bb-99d3-930f8df272aa",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 8,
            "page_width": 612,
            "page_height": 792,
            "content": "STEP 4: PLAN, CONTROL AND MONITOR TESTING \r\nWithout question the biggest user of project resources, whether it be manpower, computer time, or \r\nmanagement judgment, is the test phase. It is the phase of greatest risk in terms of dollars and schedule. It \r\noccurs at the latest point in the schedule when backup alternatives are least available, if at all. \r\nThe previous three recommendations to design the program before beginning analysis and coding, to \r\ndocument it completely, and to build a pilot model are all aimed at uncovering and solving problems before \r\nentering the test phase. However, even after doing these things there is stillatest phase and there are still \r\nimportant things to be done. Figure 81ists some additional aspects to testing. In planning for testing, Iwould \r\nsuggest the following for consideration. \r\n1) Many parts of the test process are best handled by test specialists who did not necessarily \r\ncontribute to the original design. If it is argued that only the designer can perform a thorough test because \r\nonly he understands the area he built, this is a sure sign of a failure to document properly. With good \r\ndocumentation it is feasible to use specialists in software product assurance who will, in my judgment, do a \r\nbetter job of testing than the designer. \r\n2) Most errors are of an obvious nature that carl be easily spotted by visual inspection. Every bit \r\nof an analysis and every bit of code should be subjected to a simple visual scan by a second party who did not \r\ndo the original analysis or code but who would spot things like dropped minus signs, missing factors of two, \r\njumps to wrong addresses, etc., which are in the nature of proofrea0ing the analysis and code. Do not use the \r\ncomputer to detect this kind of thing - it is too expensive. \r\n3) Test every logic path in the computer program at least once with some kind of numerical check. If \r\nIwereacustomer, Iwould not accept delivery until this procedure was completed and certified. This step will \r\nuncover the majority of coding errors. \r\nWhile this test procedure sounds simple, for a large, complex computer program it is relatively difficult \r\nto plow through every logic path with controlled values of input. In fact there are those who will argue that it \r\nis very nearly impossible. In spite of this Iwould persist in my recommendation that every logic path be \r\nsubjected to at least one authentic check. \r\n4) After the simple errors (which are in the majority, and which obscure the big mistakes) are removed, \r\nthen it is time to turn over the software to the test area for checkout purposes. At the proper time during the \r\ncourse of development and in the hands of the proper person the computer itself is the best device for \r\ncheckout. Key management decisions are: when is the time and who is the person to do final checkout? \r\nSTEP 5: INVOLVE THE CUSTOMER \r\nFor some reason what a software design is going to do is subject to wide interpretation even after \r\nprevious agreement. It is important to involve the customer ina formal way so that he has committed \r\nhimself at earlier points before final delivery. To give the contractor free rein between requirement \r\ndefinition and operation is inviting trouble. Figure g indicates three points following requirementsdefinition \r\nwhere the insight, judgment, and commitment of the customer carl bolster the development effort. \r\nSUMMARY \r\nFigure 10 summarizes the five steps that I feel necessary to transform a risky development process \r\ninto one that will provide the desired product. I would emphasize that each item costs some additional sum \r\nof money. If the relatively simpler process without the five complexities described here would work \r\nsuccessfully, then of course the additional money is not well spent. Ii, my experience, however, the simpler \r\nmethod has never worked on large software development efforts and the costs to recover far exceeded those \r\nrequired to finance the five-step process listed. \r\n335 ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/a2e477fe-e97b-45c8-9791-ff7d57d38663/images/c29ef8eb-967e-40bb-99d3-930f8df272aa.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3fd6d49b563ae8ba4999d03d53f5dfe9bb2297fc900792d388b8a85594338457",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 657
      },
      {
        "segments": [
          {
            "segment_id": "c29ef8eb-967e-40bb-99d3-930f8df272aa",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 8,
            "page_width": 612,
            "page_height": 792,
            "content": "STEP 4: PLAN, CONTROL AND MONITOR TESTING \r\nWithout question the biggest user of project resources, whether it be manpower, computer time, or \r\nmanagement judgment, is the test phase. It is the phase of greatest risk in terms of dollars and schedule. It \r\noccurs at the latest point in the schedule when backup alternatives are least available, if at all. \r\nThe previous three recommendations to design the program before beginning analysis and coding, to \r\ndocument it completely, and to build a pilot model are all aimed at uncovering and solving problems before \r\nentering the test phase. However, even after doing these things there is stillatest phase and there are still \r\nimportant things to be done. Figure 81ists some additional aspects to testing. In planning for testing, Iwould \r\nsuggest the following for consideration. \r\n1) Many parts of the test process are best handled by test specialists who did not necessarily \r\ncontribute to the original design. If it is argued that only the designer can perform a thorough test because \r\nonly he understands the area he built, this is a sure sign of a failure to document properly. With good \r\ndocumentation it is feasible to use specialists in software product assurance who will, in my judgment, do a \r\nbetter job of testing than the designer. \r\n2) Most errors are of an obvious nature that carl be easily spotted by visual inspection. Every bit \r\nof an analysis and every bit of code should be subjected to a simple visual scan by a second party who did not \r\ndo the original analysis or code but who would spot things like dropped minus signs, missing factors of two, \r\njumps to wrong addresses, etc., which are in the nature of proofrea0ing the analysis and code. Do not use the \r\ncomputer to detect this kind of thing - it is too expensive. \r\n3) Test every logic path in the computer program at least once with some kind of numerical check. If \r\nIwereacustomer, Iwould not accept delivery until this procedure was completed and certified. This step will \r\nuncover the majority of coding errors. \r\nWhile this test procedure sounds simple, for a large, complex computer program it is relatively difficult \r\nto plow through every logic path with controlled values of input. In fact there are those who will argue that it \r\nis very nearly impossible. In spite of this Iwould persist in my recommendation that every logic path be \r\nsubjected to at least one authentic check. \r\n4) After the simple errors (which are in the majority, and which obscure the big mistakes) are removed, \r\nthen it is time to turn over the software to the test area for checkout purposes. At the proper time during the \r\ncourse of development and in the hands of the proper person the computer itself is the best device for \r\ncheckout. Key management decisions are: when is the time and who is the person to do final checkout? \r\nSTEP 5: INVOLVE THE CUSTOMER \r\nFor some reason what a software design is going to do is subject to wide interpretation even after \r\nprevious agreement. It is important to involve the customer ina formal way so that he has committed \r\nhimself at earlier points before final delivery. To give the contractor free rein between requirement \r\ndefinition and operation is inviting trouble. Figure g indicates three points following requirementsdefinition \r\nwhere the insight, judgment, and commitment of the customer carl bolster the development effort. \r\nSUMMARY \r\nFigure 10 summarizes the five steps that I feel necessary to transform a risky development process \r\ninto one that will provide the desired product. I would emphasize that each item costs some additional sum \r\nof money. If the relatively simpler process without the five complexities described here would work \r\nsuccessfully, then of course the additional money is not well spent. Ii, my experience, however, the simpler \r\nmethod has never worked on large software development efforts and the costs to recover far exceeded those \r\nrequired to finance the five-step process listed. \r\n335 ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/a2e477fe-e97b-45c8-9791-ff7d57d38663/images/c29ef8eb-967e-40bb-99d3-930f8df272aa.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3fd6d49b563ae8ba4999d03d53f5dfe9bb2297fc900792d388b8a85594338457",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 657
      },
      {
        "segments": [
          {
            "segment_id": "82f201cc-2a6f-4136-8428-120ac148fbc5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 9,
            "page_width": 612,
            "page_height": 792,
            "content": "l ~ \r\n~m~ I T \r\n_~ L_ ~.L \r\nI wSig I ~o_~E, _ I \" o ~ .~ \r\nO..va W \r\nr \r\n/, \r\n336 \r\nr\u0002E \r\n2 \r\no \r\n'1 \r\nE \r\n8 \r\nt\u0002O \r\nE \r\n\"O \r\nE \r\no \r\nE \r\n8 \r\nt\u0002e,. \r\nQ.. \r\n,m \r\nLL ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/a2e477fe-e97b-45c8-9791-ff7d57d38663/images/82f201cc-2a6f-4136-8428-120ac148fbc5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=99a027b0586852ee936e27d12f7583943129f64ae322b147b6d1f49fd12a67f3",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "eb6f9973-0c54-4e0c-bf26-5fdf3900232d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 10,
            "page_width": 612,
            "page_height": 792,
            "content": "C \r\nl Q. / \r\n(/) \r\nI-- \r\nz~ \r\ni,,. ua ,~L \r\nr.n rr n \r\nIn .J \r\nii1 \r\n,< \r\nz \r\n< \r\nE \r\n337 \r\nZ \r\no_ \r\nI.- \r\n< \r\nr,- \r\nill \r\nQ. \r\no \r\n/'L__J (.- \r\nr\u00020 (J \r\nf\u0002t.- \r\n0 \r\n.E \r\n~n \r\nE \r\nE \r\n>o \r\n+.~ \r\nI \r\nE \r\no \r\nE \r\n4.., \r\no \r\nr\u0002Q. \r\nc~ \r\nii ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/a2e477fe-e97b-45c8-9791-ff7d57d38663/images/eb6f9973-0c54-4e0c-bf26-5fdf3900232d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a6d6ffe7fc42e315c2a12aa2d56cd154a0fda658f31f7a7e62ee14dcd22a5c8d",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "7906b940-2805-43f2-aaed-3529e6b47751",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 11,
            "page_width": 612,
            "page_height": 792,
            "content": "I | \r\nI ' \r\nI I \r\n:i] . ~ ' \r\nl l \r\ne ~$ ~ ~ i \r\nn |~ ~ u 8( \r\nI I .. I s\"\" \r\nO0 0@' \r\n0 O° ~ \r\nd \r\np@@@@@@~S. \r\nI w \r\nR \r\nI.L. \r\n338 ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/a2e477fe-e97b-45c8-9791-ff7d57d38663/images/7906b940-2805-43f2-aaed-3529e6b47751.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=76c5840abfe9c996d34d585d8b2ea9aa789a1e1c833b9ecf56af56b2d07e7540",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 129
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "Managing the Development of Large Software Systems\n"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Dr. Winston W. Rovce\n"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "I could not find information about the `date_published` field within the provided text.  The document discusses software development practices but does not contain details about a specific \"date_published\" field.\n"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "No location is mentioned in the document.\n"
        }
      ]
    }
  }
}