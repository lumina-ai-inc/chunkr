{
  "file_name": "Linear Road - A Stream Data Management Benchmark (2004).pdf",
  "task_id": "4e20fb55-429d-46a0-84cb-07119d5fb65e",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "ad3ef071-7ce8-4ace-a294-f7173ac914ac",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 1,
            "page_width": 612,
            "page_height": 792,
            "content": "Linear Road: A Stream Data Management Benchmark\r\nArvind Arasu∗\r\nStanford University\r\narvinda@cs.stanford.edu\r\nMitch Cherniack†‡\r\nBrandeis University\r\nmfc@cs.brandeis.edu\r\nEduardo Galvez†\r\nBrandeis University\r\neddie@cs.brandeis.edu\r\nDavid Maier§\r\nOHSU/OGI\r\nmaier@cse.ogi.edu\r\nAnurag S. Maskey†\r\nBrandeis University\r\nanurag@cs.brandeis.edu\r\nEsther Ryvkina‡\r\nBrandeis University\r\nessie@cs.brandeis.edu\r\nMichael Stonebraker\r\nMIT\r\nstonebraker@csail.mit.edu\r\nRichard Tibbetts\r\nMIT\r\ntibbetts@mit.edu\r\nAbstract\r\nThis paper specifies the Linear Road Benchmark for\r\nStream Data Management Systems (SDMS). Stream Data\r\nManagement Systems process streaming data by executing\r\ncontinuous and historical queries while producing query re\u0002sults in real-time. This benchmark makes it possible to com\u0002pare the performance characteristics of SDMS’ relative to\r\neach other and to alternative (e.g., Relational Database)\r\nsystems. Linear Road has been endorsed as an SDMS\r\nbenchmark by the developers of both the Aurora [1] (out\r\nof Brandeis University, Brown University and MIT) and\r\nSTREAM [8] (out of Stanford University) stream systems.\r\nLinear Road simulates a toll system for the motor vehi\u0002cle expressways of a large metropolitan area. The tolling\r\nsystem uses “variable tolling” [6, 11, 9]: an increasingly\r\nprevalent tolling technique that uses such dynamic factors\r\nas traffic congestion and accident proximity to calculate toll\r\ncharges. Linear Road specifies a variable tolling system\r\nfor a fictional urban area including such features as acci\u0002dent detection and alerts, traffic congestion measurements,\r\ntoll calculations and historical queries. After specifying the\r\nbenchmark, we describe experimental results involving two\r\nimplementations: one using a commercially available Re\u0002lational Database and the other using Aurora. Our results\r\nshow that a dedicated Stream Data Management System\r\ncan outperform a Relational Database by at least a factor\r\nof 5 on streaming data applications.\r\n∗ This material is based on work supported by the National Science\r\nFoundation under Grant Nos. IIS-0118173 and IIS-9817799 (*), IIS\u00020086057 (†), IIS-0325525 (‡) and IIS-0086002 (§).\r\nPermission to copy without fee all or part of this material is granted pro\u0002vided that the copies are not made or distributed for direct commercial\r\nadvantage, the VLDB copyright notice and the title of the publication and\r\nits date appear, and notice is given that copying is by permission of the\r\nVery Large Data Base Endowment. To copy otherwise, or to republish,\r\nrequires a fee and/or special permission from the Endowment.\r\nProceedings of the 30th VLDB Conference,\r\nToronto, Canada, 2004\r\n1 Introduction\r\nIn this paper we introduce the Linear Road Benchmark\r\nfor Stream Data Management Systems (SDMS).\r\nStream data management has become a highly active re\u0002search area and has inspired the development of several pro\u0002totype systems including Aurora [1], STREAM [8], Tele\u0002graphCQ [4] and Niagara [5]. However, up until now there\r\nhas been no way to compare the performance characteristics\r\nof these systems either to each other or to traditional data\r\nmanagement systems configured to process streaming data\r\n(e.g., a Relational DBMS configured with triggers). Linear\r\nRoad is designed to measure how well a system can meet\r\nreal-time query response requirements in processing high\u0002volume streaming and historical data. It has been endorsed\r\nby the developers of Aurora (out of Brandeis University,\r\nBrown University and MIT) and STREAM (out of Stan\u0002ford University) as a basis for performance comparisons of\r\nstream processing approaches.\r\nIn this paper, we use Linear Road to compare the per\u0002formance of an SDMS (Aurora) to a Relational Database\r\nconfigured to process stream data inputs.1 Of course, our\r\nimplementation of Linear Road over a Relational Database\r\nmay not be optimal, and thus we invite others to implement\r\nLinear Road and report their numbers. Nonetheless, we be\u0002lieve that the results reported here show that a dedicated\r\nSDMS is far-better suited than a Relational Database for\r\nsupporting streaming data applications.\r\nStreaming data poses unique challenges to the design\r\nof a benchmark. For queries over this data to be mean\u0002ingful, the input data must have semantic validity and not\r\njust be random. Because most stream queries are continu\u0002ous, performance metrics should be based on response time\r\nrather than completion time. The benchmark must be veri\u0002fiable even though results returned may vary depending on\r\nwhen they are generated. And the absence of a query lan\u00021We did not get performance numbers for STREAM in time to in\u0002clude them in this paper. However, these numbers and a description of\r\nthe STREAM implementation of Linear Road will be available on the\r\nSTREAM Linear Road web page [10].",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/ad3ef071-7ce8-4ace-a294-f7173ac914ac.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=75c0b5338713fb7516eadff695c59b846440057c75bd2c7f4285331f33fa9222",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 695
      },
      {
        "segments": [
          {
            "segment_id": "ad3ef071-7ce8-4ace-a294-f7173ac914ac",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 1,
            "page_width": 612,
            "page_height": 792,
            "content": "Linear Road: A Stream Data Management Benchmark\r\nArvind Arasu∗\r\nStanford University\r\narvinda@cs.stanford.edu\r\nMitch Cherniack†‡\r\nBrandeis University\r\nmfc@cs.brandeis.edu\r\nEduardo Galvez†\r\nBrandeis University\r\neddie@cs.brandeis.edu\r\nDavid Maier§\r\nOHSU/OGI\r\nmaier@cse.ogi.edu\r\nAnurag S. Maskey†\r\nBrandeis University\r\nanurag@cs.brandeis.edu\r\nEsther Ryvkina‡\r\nBrandeis University\r\nessie@cs.brandeis.edu\r\nMichael Stonebraker\r\nMIT\r\nstonebraker@csail.mit.edu\r\nRichard Tibbetts\r\nMIT\r\ntibbetts@mit.edu\r\nAbstract\r\nThis paper specifies the Linear Road Benchmark for\r\nStream Data Management Systems (SDMS). Stream Data\r\nManagement Systems process streaming data by executing\r\ncontinuous and historical queries while producing query re\u0002sults in real-time. This benchmark makes it possible to com\u0002pare the performance characteristics of SDMS’ relative to\r\neach other and to alternative (e.g., Relational Database)\r\nsystems. Linear Road has been endorsed as an SDMS\r\nbenchmark by the developers of both the Aurora [1] (out\r\nof Brandeis University, Brown University and MIT) and\r\nSTREAM [8] (out of Stanford University) stream systems.\r\nLinear Road simulates a toll system for the motor vehi\u0002cle expressways of a large metropolitan area. The tolling\r\nsystem uses “variable tolling” [6, 11, 9]: an increasingly\r\nprevalent tolling technique that uses such dynamic factors\r\nas traffic congestion and accident proximity to calculate toll\r\ncharges. Linear Road specifies a variable tolling system\r\nfor a fictional urban area including such features as acci\u0002dent detection and alerts, traffic congestion measurements,\r\ntoll calculations and historical queries. After specifying the\r\nbenchmark, we describe experimental results involving two\r\nimplementations: one using a commercially available Re\u0002lational Database and the other using Aurora. Our results\r\nshow that a dedicated Stream Data Management System\r\ncan outperform a Relational Database by at least a factor\r\nof 5 on streaming data applications.\r\n∗ This material is based on work supported by the National Science\r\nFoundation under Grant Nos. IIS-0118173 and IIS-9817799 (*), IIS\u00020086057 (†), IIS-0325525 (‡) and IIS-0086002 (§).\r\nPermission to copy without fee all or part of this material is granted pro\u0002vided that the copies are not made or distributed for direct commercial\r\nadvantage, the VLDB copyright notice and the title of the publication and\r\nits date appear, and notice is given that copying is by permission of the\r\nVery Large Data Base Endowment. To copy otherwise, or to republish,\r\nrequires a fee and/or special permission from the Endowment.\r\nProceedings of the 30th VLDB Conference,\r\nToronto, Canada, 2004\r\n1 Introduction\r\nIn this paper we introduce the Linear Road Benchmark\r\nfor Stream Data Management Systems (SDMS).\r\nStream data management has become a highly active re\u0002search area and has inspired the development of several pro\u0002totype systems including Aurora [1], STREAM [8], Tele\u0002graphCQ [4] and Niagara [5]. However, up until now there\r\nhas been no way to compare the performance characteristics\r\nof these systems either to each other or to traditional data\r\nmanagement systems configured to process streaming data\r\n(e.g., a Relational DBMS configured with triggers). Linear\r\nRoad is designed to measure how well a system can meet\r\nreal-time query response requirements in processing high\u0002volume streaming and historical data. It has been endorsed\r\nby the developers of Aurora (out of Brandeis University,\r\nBrown University and MIT) and STREAM (out of Stan\u0002ford University) as a basis for performance comparisons of\r\nstream processing approaches.\r\nIn this paper, we use Linear Road to compare the per\u0002formance of an SDMS (Aurora) to a Relational Database\r\nconfigured to process stream data inputs.1 Of course, our\r\nimplementation of Linear Road over a Relational Database\r\nmay not be optimal, and thus we invite others to implement\r\nLinear Road and report their numbers. Nonetheless, we be\u0002lieve that the results reported here show that a dedicated\r\nSDMS is far-better suited than a Relational Database for\r\nsupporting streaming data applications.\r\nStreaming data poses unique challenges to the design\r\nof a benchmark. For queries over this data to be mean\u0002ingful, the input data must have semantic validity and not\r\njust be random. Because most stream queries are continu\u0002ous, performance metrics should be based on response time\r\nrather than completion time. The benchmark must be veri\u0002fiable even though results returned may vary depending on\r\nwhen they are generated. And the absence of a query lan\u00021We did not get performance numbers for STREAM in time to in\u0002clude them in this paper. However, these numbers and a description of\r\nthe STREAM implementation of Linear Road will be available on the\r\nSTREAM Linear Road web page [10].",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/ad3ef071-7ce8-4ace-a294-f7173ac914ac.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=75c0b5338713fb7516eadff695c59b846440057c75bd2c7f4285331f33fa9222",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 695
      },
      {
        "segments": [
          {
            "segment_id": "a077eeb4-a85a-4f9a-b238-83d3891d39d1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 2,
            "page_width": 612,
            "page_height": 792,
            "content": "guage standard for stream queries means that the bench\u0002mark queries must be specified in a more general, though\r\nunambiguous way. Linear Road has been designed to meet\r\neach of these challenges.\r\nLinear Road simulates an urban expressway system\r\nwhere tolls are determined according to such dynamic fac\u0002tors as congestion and accident proximity. Linear Road’s\r\ntraffic-based orientation is inspired by the increasing preva\u0002lence of variable tolling (also known as congestion pricing)\r\n[6, 11, 9] in urban traffic systems. Traffic congestion in\r\nmajor metropolitan areas is an increasing problem as ex\u0002pressways cannot be built fast enough to keep traffic flow\u0002ing freely at peak periods. The idea behind variable tolling\r\nis to issue tolls that vary according to time-dependent fac\u0002tors such as congestion levels and accident proximity, with\r\nthe motivation of charging higher tolls during peak traffic\r\nperiods to discourage vehicles from using the roads and ex\u0002acerbating the congestion. Variable tolling is becoming an\r\nincreasingly popular option for urban planners due to its ef\u0002fectiveness in reducing traffic congestion and to recent ad\u0002vances in microsensor technology that make it feasible. Illi\u0002nois, California, and Finland have pilot programs utilizing\r\nthis concept. Moreover, both London and Singapore charge\r\ntolls at peak periods to let vehicles enter the downtown area\r\nusing similar reasoning.\r\nWe begin in Section 2 by presenting the unique chal\u0002lenges that stream data introduces in designing a benchmark\r\nand describing the ways that Linear Road addresses those\r\nchallenges. In Section 3, we specify the benchmark require\u0002ments. In Section 4, we describe experiments involving two\r\nimplementations of the benchmark: one using a commer\u0002cially available Relational Database (which we call “System\r\nX”), and one using Aurora. As we will show, a dedicated\r\nSDMS can outperform a Relational Database in supporting\r\nstream data applications by at least a factor of 5.\r\n2 Challenges\r\nStreaming data poses the following unique challenges to\r\nthe design of a benchmark:\r\nSemantically Valid Input: Input data to a stream bench\u0002mark should not be purely random but should have some\r\nsemantic validity. A typical stream presents discrete mea\u0002surements of a continuous activity (e.g., the movements of\r\nsoldiers). The content of a stream should be consistent with\r\nthis activity. For example, if the positions of a soldier are\r\nreported every 15 minutes, the positions of two consecutive\r\nreports should not differ by more than how far a soldier can\r\ntravel in that time. To ensure semantic validity, input data to\r\na stream benchmark should be produced using simulation.\r\nContinuous Query (CQ) Performance Metrics: Stream\r\nqueries are predominantly continuous, and therefore the\r\ntypical database benchmark metric of “completion time” is\r\ninappropriate given that such queries never complete. In\u0002stead, more appropriate metrics for streams are:\r\n• Response Time: What is the average or maximum dif\u0002ference between the time that an input arrives to an\r\nSDMS and the time when an SDMS outputs a com\u0002puted response?\r\n• Supported Query Load: How much input can a stream\r\nsystem process while still meeting specified response\r\ntimes and correctness constraints?\r\nMany Correct Results: Any benchmark implementation\r\nshould be validated to ensure that it produces results consis\u0002tent with the benchmark specification. However, continuous\r\nqueries results may depend upon evolving historical state or\r\nthe arrival order tuples on a stream, and therefore several\r\ndifferent results for the same query may be “correct”. Vali\u0002dation should account for queries that have multiple correct\r\nanswers.\r\nNo Query Language: There exists no standard query lan\u0002guage for streaming systems, and therefore the query re\u0002quirements for a stream benchmark should be language\u0002agnostic, yet have a clear semantics.\r\nLinear Road has been designed to meet each of the chal\u0002lenges listed above. The benchmark simulates an urban ex\u0002pressway system where toll charges are determined dynam\u0002ically. Input data consists of a stream of position reports\r\nand historical query requests. Position reports specify the\r\nlocation of a vehicle on an expressway and are emitted by\r\neach vehicle every 30 seconds. A historical query request is\r\nissued by a vehicle with some fixed probability every time\r\nit emits a position report.\r\nThe benchmark requires processing a set of continuous\r\nand historical queries over this input stream. In processing\r\nposition reports, a system must:\r\n• maintain statistics about the number of vehicles and\r\naverage speed on each segment of each expressway on\r\na per minute basis,\r\n• detect accidents and alert drivers of the accidents, and\r\n• dynamically calculate toll charges based on segment\r\nstatistics and proximate accidents, and notify and as\u0002sess vehicles of these charges.\r\nIn processing a historical query request, a system will report\r\nan account balance, a total of all assessed tolls on a given\r\nexpressway on a given day, or an estimated travel time and\r\ncost for a journey on an expressway. Each query answer\r\nmust satisfy the response time and correctness requirements\r\nspecified in this document, and the throughput that a system\r\ncan sustain in meeting these requirements (as measured in\r\nthe number of expressways, L of input it processes) consti\u0002tutes the benchmark score (its L-Rating).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/a077eeb4-a85a-4f9a-b238-83d3891d39d1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1723f07f24e31999f613c91988ee66a70db38a1dde8084d1ae986a5ce7235212",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 817
      },
      {
        "segments": [
          {
            "segment_id": "a077eeb4-a85a-4f9a-b238-83d3891d39d1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 2,
            "page_width": 612,
            "page_height": 792,
            "content": "guage standard for stream queries means that the bench\u0002mark queries must be specified in a more general, though\r\nunambiguous way. Linear Road has been designed to meet\r\neach of these challenges.\r\nLinear Road simulates an urban expressway system\r\nwhere tolls are determined according to such dynamic fac\u0002tors as congestion and accident proximity. Linear Road’s\r\ntraffic-based orientation is inspired by the increasing preva\u0002lence of variable tolling (also known as congestion pricing)\r\n[6, 11, 9] in urban traffic systems. Traffic congestion in\r\nmajor metropolitan areas is an increasing problem as ex\u0002pressways cannot be built fast enough to keep traffic flow\u0002ing freely at peak periods. The idea behind variable tolling\r\nis to issue tolls that vary according to time-dependent fac\u0002tors such as congestion levels and accident proximity, with\r\nthe motivation of charging higher tolls during peak traffic\r\nperiods to discourage vehicles from using the roads and ex\u0002acerbating the congestion. Variable tolling is becoming an\r\nincreasingly popular option for urban planners due to its ef\u0002fectiveness in reducing traffic congestion and to recent ad\u0002vances in microsensor technology that make it feasible. Illi\u0002nois, California, and Finland have pilot programs utilizing\r\nthis concept. Moreover, both London and Singapore charge\r\ntolls at peak periods to let vehicles enter the downtown area\r\nusing similar reasoning.\r\nWe begin in Section 2 by presenting the unique chal\u0002lenges that stream data introduces in designing a benchmark\r\nand describing the ways that Linear Road addresses those\r\nchallenges. In Section 3, we specify the benchmark require\u0002ments. In Section 4, we describe experiments involving two\r\nimplementations of the benchmark: one using a commer\u0002cially available Relational Database (which we call “System\r\nX”), and one using Aurora. As we will show, a dedicated\r\nSDMS can outperform a Relational Database in supporting\r\nstream data applications by at least a factor of 5.\r\n2 Challenges\r\nStreaming data poses the following unique challenges to\r\nthe design of a benchmark:\r\nSemantically Valid Input: Input data to a stream bench\u0002mark should not be purely random but should have some\r\nsemantic validity. A typical stream presents discrete mea\u0002surements of a continuous activity (e.g., the movements of\r\nsoldiers). The content of a stream should be consistent with\r\nthis activity. For example, if the positions of a soldier are\r\nreported every 15 minutes, the positions of two consecutive\r\nreports should not differ by more than how far a soldier can\r\ntravel in that time. To ensure semantic validity, input data to\r\na stream benchmark should be produced using simulation.\r\nContinuous Query (CQ) Performance Metrics: Stream\r\nqueries are predominantly continuous, and therefore the\r\ntypical database benchmark metric of “completion time” is\r\ninappropriate given that such queries never complete. In\u0002stead, more appropriate metrics for streams are:\r\n• Response Time: What is the average or maximum dif\u0002ference between the time that an input arrives to an\r\nSDMS and the time when an SDMS outputs a com\u0002puted response?\r\n• Supported Query Load: How much input can a stream\r\nsystem process while still meeting specified response\r\ntimes and correctness constraints?\r\nMany Correct Results: Any benchmark implementation\r\nshould be validated to ensure that it produces results consis\u0002tent with the benchmark specification. However, continuous\r\nqueries results may depend upon evolving historical state or\r\nthe arrival order tuples on a stream, and therefore several\r\ndifferent results for the same query may be “correct”. Vali\u0002dation should account for queries that have multiple correct\r\nanswers.\r\nNo Query Language: There exists no standard query lan\u0002guage for streaming systems, and therefore the query re\u0002quirements for a stream benchmark should be language\u0002agnostic, yet have a clear semantics.\r\nLinear Road has been designed to meet each of the chal\u0002lenges listed above. The benchmark simulates an urban ex\u0002pressway system where toll charges are determined dynam\u0002ically. Input data consists of a stream of position reports\r\nand historical query requests. Position reports specify the\r\nlocation of a vehicle on an expressway and are emitted by\r\neach vehicle every 30 seconds. A historical query request is\r\nissued by a vehicle with some fixed probability every time\r\nit emits a position report.\r\nThe benchmark requires processing a set of continuous\r\nand historical queries over this input stream. In processing\r\nposition reports, a system must:\r\n• maintain statistics about the number of vehicles and\r\naverage speed on each segment of each expressway on\r\na per minute basis,\r\n• detect accidents and alert drivers of the accidents, and\r\n• dynamically calculate toll charges based on segment\r\nstatistics and proximate accidents, and notify and as\u0002sess vehicles of these charges.\r\nIn processing a historical query request, a system will report\r\nan account balance, a total of all assessed tolls on a given\r\nexpressway on a given day, or an estimated travel time and\r\ncost for a journey on an expressway. Each query answer\r\nmust satisfy the response time and correctness requirements\r\nspecified in this document, and the throughput that a system\r\ncan sustain in meeting these requirements (as measured in\r\nthe number of expressways, L of input it processes) consti\u0002tutes the benchmark score (its L-Rating).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/a077eeb4-a85a-4f9a-b238-83d3891d39d1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1723f07f24e31999f613c91988ee66a70db38a1dde8084d1ae986a5ce7235212",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 817
      },
      {
        "segments": [
          {
            "segment_id": "6c2cdb0f-3905-471e-8836-427600245bf7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 3,
            "page_width": 612,
            "page_height": 792,
            "content": "(0, 0) (527999,0)\r\nExpressway 0\r\nExpressway 1\r\nExpressway 2\r\nExpressway 3\r\nExpressway 4\r\nExpressway 5\r\nExpressway 6\r\nExpressway 7\r\nExpressway 8\r\nExpressway 9\r\n(263999,0)\r\nW E\r\nN\r\nS\r\n(0, 263999)\r\n(0, 527999)\r\nFigure 1. The Geometry of Linear City\r\nLinear Road meets the above challenges of an SDMS\r\nbenchmark:\r\n• Semantically Valid Input: The input data to Linear\r\nRoad is generated by the publicly available traffic sim\u0002ulator, MITSIM [12]. We describe the details of the\r\nsimulated data in Section 3.1.1.\r\n• CQ Performance Metrics: The L-Rating associated\r\nwith Linear Road is a measure of supported query load\r\nin that it is a measure of the amount of input that an\r\nSDMS can process (as measured in number of express\u0002ways) while still meeting response time and correct\u0002ness constraints (as specified in Section 3).\r\n• Many Correct Results: For all queries that depend on\r\nsome evolving state (e.g., account balance queries that\r\ndepend on a table that is updated with every toll as\u0002sessed), variation in response times can mean that mul\u0002tiple answers could be returned that are “correct”. Lin\u0002ear Road includes two such queries, and validation for\r\neach of those considers all possible valid answers.\r\n• No Query Language: All Linear Road queries are\r\nspecified formally in the predicate calculus rather than\r\na specific stream query language.\r\n3 The Linear Road Benchmark\r\nLinear City is a fictional metropolitan area that is the ur\u0002ban setting for the Linear Road benchmark. The city en\u0002compasses an area that is 100 miles wide and 100 miles\r\nlong, and is divided into a grid such that the origin is the\r\nsouthwestern most point in the city, and coordinate (x, y)\r\nLane 0 (Entrance) Lane 4 (Exit)\r\nEastbound →\r\nLane 4 (Exit) Lane 0 (Entrance)\r\n← Westbound\r\n1 mile\r\nLane 1 (Travel)\r\nLane 2 (Travel)\r\nLane 3 (Travel)\r\nLane 3 (Travel)\r\nLane 2 (Travel)\r\nLane 1 (Travel)\r\nFigure 2. An Example Expressway Segment\r\nis x feet east and y feet north of the origin. Linear City\r\ncontains 10 parallel expressways numbered from 0-9 and\r\nrunning horizontally 10 miles apart, as illustrated in Fig\u0002ure 1. (For simplicity, there are no expressways that run\r\nvertically.) Each expressway has four lanes in each (east\r\nand west) direction: 3 travel lanes (lanes #1-3) and one lane\r\ndevoted to entrance (lane #0) and exit (lane #4) ramps. Each\r\nexpressway has 100 entrance ramps and 100 exit ramps in\r\neach direction, dividing it into 100 mile-long segments. Fig\u0002ure 2 shows an example segment.\r\nEvery vehicle in Linear City is equipped with a sensor\r\nthat emits a position report that identifies the vehicle’s ex\u0002act coordinates every 30 seconds. (We assume that posi\u0002tion reports specify coordinates with 100% accuracy.) Posi\u0002tion reports are processed to generate statistics about traffic\r\nconditions on every segment of every expressway for every\r\nminute, including average vehicle speed, number of vehi\u0002cles and existence of accidents. These statistics are used\r\nto determine toll charges for variable tolling. In addition,\r\nvehicles can issue queries to find out their current account\r\nbalance with the expressway system, total tolls assessed on\r\na given day and expressway, and travel time estimates.\r\nFor simplicity, we make the following assumptions about\r\nposition reports:\r\n1. No Clock Skew: A global clock is assumed as the basis\r\nfor position report timestamps of all vehicles.\r\n2. No Position Interpolation: The position of any vehicle\r\nat any time t is assumed to be exactly the position re\u0002ported by that vehicle between times (t − 30 sec, t], or\r\nunknown if no position report was emitted within that\r\nrange.\r\n3. Instantaneous Delivery: A position report with times\u0002tamp t is made available to a stream processing system\r\nexactly t seconds after the start of the simulation. This\r\nis guaranteed by the data driver.\r\nWhile simplistic, we justify these assumptions by pointing\r\nout that the purpose of the benchmark suite is to serve as a\r\nstress-test of systems performing stream processing and not\r\nto accurately model traffic patterns.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/6c2cdb0f-3905-471e-8836-427600245bf7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c7c8cf5d44d977ae988e651f0426f6f880be4b3a3769673e0aebae9fc79699c5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 652
      },
      {
        "segments": [
          {
            "segment_id": "6c2cdb0f-3905-471e-8836-427600245bf7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 3,
            "page_width": 612,
            "page_height": 792,
            "content": "(0, 0) (527999,0)\r\nExpressway 0\r\nExpressway 1\r\nExpressway 2\r\nExpressway 3\r\nExpressway 4\r\nExpressway 5\r\nExpressway 6\r\nExpressway 7\r\nExpressway 8\r\nExpressway 9\r\n(263999,0)\r\nW E\r\nN\r\nS\r\n(0, 263999)\r\n(0, 527999)\r\nFigure 1. The Geometry of Linear City\r\nLinear Road meets the above challenges of an SDMS\r\nbenchmark:\r\n• Semantically Valid Input: The input data to Linear\r\nRoad is generated by the publicly available traffic sim\u0002ulator, MITSIM [12]. We describe the details of the\r\nsimulated data in Section 3.1.1.\r\n• CQ Performance Metrics: The L-Rating associated\r\nwith Linear Road is a measure of supported query load\r\nin that it is a measure of the amount of input that an\r\nSDMS can process (as measured in number of express\u0002ways) while still meeting response time and correct\u0002ness constraints (as specified in Section 3).\r\n• Many Correct Results: For all queries that depend on\r\nsome evolving state (e.g., account balance queries that\r\ndepend on a table that is updated with every toll as\u0002sessed), variation in response times can mean that mul\u0002tiple answers could be returned that are “correct”. Lin\u0002ear Road includes two such queries, and validation for\r\neach of those considers all possible valid answers.\r\n• No Query Language: All Linear Road queries are\r\nspecified formally in the predicate calculus rather than\r\na specific stream query language.\r\n3 The Linear Road Benchmark\r\nLinear City is a fictional metropolitan area that is the ur\u0002ban setting for the Linear Road benchmark. The city en\u0002compasses an area that is 100 miles wide and 100 miles\r\nlong, and is divided into a grid such that the origin is the\r\nsouthwestern most point in the city, and coordinate (x, y)\r\nLane 0 (Entrance) Lane 4 (Exit)\r\nEastbound →\r\nLane 4 (Exit) Lane 0 (Entrance)\r\n← Westbound\r\n1 mile\r\nLane 1 (Travel)\r\nLane 2 (Travel)\r\nLane 3 (Travel)\r\nLane 3 (Travel)\r\nLane 2 (Travel)\r\nLane 1 (Travel)\r\nFigure 2. An Example Expressway Segment\r\nis x feet east and y feet north of the origin. Linear City\r\ncontains 10 parallel expressways numbered from 0-9 and\r\nrunning horizontally 10 miles apart, as illustrated in Fig\u0002ure 1. (For simplicity, there are no expressways that run\r\nvertically.) Each expressway has four lanes in each (east\r\nand west) direction: 3 travel lanes (lanes #1-3) and one lane\r\ndevoted to entrance (lane #0) and exit (lane #4) ramps. Each\r\nexpressway has 100 entrance ramps and 100 exit ramps in\r\neach direction, dividing it into 100 mile-long segments. Fig\u0002ure 2 shows an example segment.\r\nEvery vehicle in Linear City is equipped with a sensor\r\nthat emits a position report that identifies the vehicle’s ex\u0002act coordinates every 30 seconds. (We assume that posi\u0002tion reports specify coordinates with 100% accuracy.) Posi\u0002tion reports are processed to generate statistics about traffic\r\nconditions on every segment of every expressway for every\r\nminute, including average vehicle speed, number of vehi\u0002cles and existence of accidents. These statistics are used\r\nto determine toll charges for variable tolling. In addition,\r\nvehicles can issue queries to find out their current account\r\nbalance with the expressway system, total tolls assessed on\r\na given day and expressway, and travel time estimates.\r\nFor simplicity, we make the following assumptions about\r\nposition reports:\r\n1. No Clock Skew: A global clock is assumed as the basis\r\nfor position report timestamps of all vehicles.\r\n2. No Position Interpolation: The position of any vehicle\r\nat any time t is assumed to be exactly the position re\u0002ported by that vehicle between times (t − 30 sec, t], or\r\nunknown if no position report was emitted within that\r\nrange.\r\n3. Instantaneous Delivery: A position report with times\u0002tamp t is made available to a stream processing system\r\nexactly t seconds after the start of the simulation. This\r\nis guaranteed by the data driver.\r\nWhile simplistic, we justify these assumptions by pointing\r\nout that the purpose of the benchmark suite is to serve as a\r\nstress-test of systems performing stream processing and not\r\nto accurately model traffic patterns.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/6c2cdb0f-3905-471e-8836-427600245bf7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c7c8cf5d44d977ae988e651f0426f6f880be4b3a3769673e0aebae9fc79699c5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 652
      },
      {
        "segments": [
          {
            "segment_id": "82edcfe9-a497-4f19-b37e-dfeb370db677",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 4,
            "page_width": 612,
            "page_height": 792,
            "content": "3.1 Linear Road Input\r\nInput data for the Linear Road benchmark is generated\r\nby the MIT Traffic Simulator (MITSIM) [12] and stored in\r\nflat files. A separate data driver is responsible for reading\r\nthese files and delivering this data in a manner simulating\r\nits arrival in real-time.\r\n3.1.1 Simulation\r\nPosition reports are generated according to the following\r\ntraffic model followed by the traffic simulator. The simula\u0002tor generates a set of vehicles, each of which completes at\r\nleast one vehicle trip: a journey that begins at an entry ramp\r\non some segment and finishes at an exit ramp on some seg\u0002ment on the same expressway.2\r\nIn making a vehicle trip, a\r\nvehicle is placed on the entrance ramp and accelerates at a\r\nrate allowed by the other traffic. It then merges onto the ex\u0002pressway and moves towards its destination at a rate deter\u0002mined by the degree of traffic congestion. When the vehicle\r\nreaches its destination, it moves to the exit ramp and decel\u0002erates. For each trip, the selected source location of a vehi\u0002cle is uniformly distributed over all of the possible entrance\r\nramps on the chosen expressway. The exit ramp is normally\r\ndistributed with a mean segment location in the middle of\r\nthe expressway (i.e., segment #50) and with a standard devi\u0002ation of 20 miles. Hence, vehicles have an affinity for exit\u0002ing in the downtown area. Once on the expressway, each ve\u0002hicle proceeds according to a standard traffic spacing model\r\nbuilt into the traffic simulator.\r\nThe simulator ensures that every vehicle emits a posi\u0002tion report every 30 seconds, staggering them so that at ev\u0002ery second, roughly 1\r\n30 of the reports for vehicles currently\r\non the expressway are emitted. Every position report has a\r\ntimestamp, which is an integer count of seconds since the\r\nstart of the simulation. A vehicle never travels faster than\r\n100 MPH, and therefore it will emit at least one position\r\nreport from every segment it travels in. Further, every vehi\u0002cle is guaranteed to average 40 MPH or less when entering\r\nand exiting an expressway and therefore it will emit at least\r\none position report from an entrance ramp and one position\r\nreport from an exit ramp for every vehicle trip.\r\nThe simulator generates one accident in a random loca\u0002tion on each expressway for every 20 minutes of position re\u0002ports. An accident occurs when two vehicles are “stopped”\r\nat the same position at the same time. A vehicle is stopped\r\nwhen it reports the same position in 4 consecutive position\r\nreports. Once an accident occurs in a given segment, traf\u0002fic proceeds in that segment at a reduced speed determined\r\nby the traffic spacing model. The accident takes anywhere\r\nfrom 10-20 minutes to be cleared once it is detected. Un\u0002til the accident clears, the vehicles involved in the accident\r\ncontinue to emit position reports. After either of the vehi\u0002cles emits a position report that reveals that it has moved\r\n2Note that some vehicles may not complete their vehicle trips by the\r\nend of the simulation period.\r\nfrom the site of the accident, the accident is assumed to be\r\ncleared.\r\nWith 1% probability, every emitted position report is ac\u0002companied by a historical query request from the same ve\u0002hicle. Of historical query requests, 50% are requests for\r\naccount balances, 10% are requests for total daily tolls on a\r\ngiven day and expressway, and 40% are requests for travel\r\ntime predictions. We specify how these historical queries\r\nshould be processed in Section 3.2.3.\r\n3.1.2 Stream Data\r\nThe stream data generated by the simulator consists of four\r\ntypes of tuples: Position Reports and historical query re\u0002quests for Account Balances, Daily Expenditures and Travel\r\nTime Estimation.\r\nPosition Reports\r\nA position report is a tuple of the form,\r\n(Type = 0, Time, VID, Spd, XWay, Lane, Dir, Seg, Pos)\r\nsuch that Type = 0 identifies this tuple as a position report,\r\nTime (0 . . . 10799)\r\n3\r\nis a timestamp identifying the time at\r\nwhich the position report was emitted, VID (0 . . . MAXINT)\r\nis an integer vehicle identifier identifying the vehicle that\r\nemitted the position report, Spd (0 . . . 100) is an integer re\u0002flecting the speed of the vehicle (in MPH) at the time the\r\nposition report is emitted, and XWay, Lane, Dir, Seg and\r\nPos are the following functions over the vehicle’s (x, y) co\u0002ordinates:\r\n• XWay (0 . . . L−1) identifies the expressway from which\r\nthe position report is emitted\r\n• Lane (0 . . . 4) identifies the lane of the expressway\r\nfrom which the position report is emitted (0 if it is\r\nan entrance ramp (ENTRY), 1 − 3 if it is a travel lane\r\n(TRAVEL) and 4 if it is an exit ramp (EXIT)).\r\n• Dir (0 . . . 1) indicates the direction (0 for Eastbound\r\nand 1 for Westbound) in which the vehicle is traveling\r\nwhen it emits its position report,\r\n• Seg (0 . . . 99) identifies the mile-long segment from\r\nwhich the position report is emitted, and\r\n• Pos (0 . . . 527999) identifies the horizontal position\r\nof the vehicle as a measure of the number of feet\r\nfrom the westernmost point on the expressway (i.e.,\r\nPos = x).4\r\n3There are 10800 seconds in a 3 hour simulation period.\r\n4Strictly speaking Seg is redundant given that position reports include\r\nPos. However, several benchmark computations depend upon a vehicle’s\r\nsegment number, and therefore for convenience we include it in input po\u0002sition reports.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/82edcfe9-a497-4f19-b37e-dfeb370db677.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9fa06e186eb562f85cb87ac430e9e2dba29056030b5409a3637e38406d912b1e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 905
      },
      {
        "segments": [
          {
            "segment_id": "82edcfe9-a497-4f19-b37e-dfeb370db677",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 4,
            "page_width": 612,
            "page_height": 792,
            "content": "3.1 Linear Road Input\r\nInput data for the Linear Road benchmark is generated\r\nby the MIT Traffic Simulator (MITSIM) [12] and stored in\r\nflat files. A separate data driver is responsible for reading\r\nthese files and delivering this data in a manner simulating\r\nits arrival in real-time.\r\n3.1.1 Simulation\r\nPosition reports are generated according to the following\r\ntraffic model followed by the traffic simulator. The simula\u0002tor generates a set of vehicles, each of which completes at\r\nleast one vehicle trip: a journey that begins at an entry ramp\r\non some segment and finishes at an exit ramp on some seg\u0002ment on the same expressway.2\r\nIn making a vehicle trip, a\r\nvehicle is placed on the entrance ramp and accelerates at a\r\nrate allowed by the other traffic. It then merges onto the ex\u0002pressway and moves towards its destination at a rate deter\u0002mined by the degree of traffic congestion. When the vehicle\r\nreaches its destination, it moves to the exit ramp and decel\u0002erates. For each trip, the selected source location of a vehi\u0002cle is uniformly distributed over all of the possible entrance\r\nramps on the chosen expressway. The exit ramp is normally\r\ndistributed with a mean segment location in the middle of\r\nthe expressway (i.e., segment #50) and with a standard devi\u0002ation of 20 miles. Hence, vehicles have an affinity for exit\u0002ing in the downtown area. Once on the expressway, each ve\u0002hicle proceeds according to a standard traffic spacing model\r\nbuilt into the traffic simulator.\r\nThe simulator ensures that every vehicle emits a posi\u0002tion report every 30 seconds, staggering them so that at ev\u0002ery second, roughly 1\r\n30 of the reports for vehicles currently\r\non the expressway are emitted. Every position report has a\r\ntimestamp, which is an integer count of seconds since the\r\nstart of the simulation. A vehicle never travels faster than\r\n100 MPH, and therefore it will emit at least one position\r\nreport from every segment it travels in. Further, every vehi\u0002cle is guaranteed to average 40 MPH or less when entering\r\nand exiting an expressway and therefore it will emit at least\r\none position report from an entrance ramp and one position\r\nreport from an exit ramp for every vehicle trip.\r\nThe simulator generates one accident in a random loca\u0002tion on each expressway for every 20 minutes of position re\u0002ports. An accident occurs when two vehicles are “stopped”\r\nat the same position at the same time. A vehicle is stopped\r\nwhen it reports the same position in 4 consecutive position\r\nreports. Once an accident occurs in a given segment, traf\u0002fic proceeds in that segment at a reduced speed determined\r\nby the traffic spacing model. The accident takes anywhere\r\nfrom 10-20 minutes to be cleared once it is detected. Un\u0002til the accident clears, the vehicles involved in the accident\r\ncontinue to emit position reports. After either of the vehi\u0002cles emits a position report that reveals that it has moved\r\n2Note that some vehicles may not complete their vehicle trips by the\r\nend of the simulation period.\r\nfrom the site of the accident, the accident is assumed to be\r\ncleared.\r\nWith 1% probability, every emitted position report is ac\u0002companied by a historical query request from the same ve\u0002hicle. Of historical query requests, 50% are requests for\r\naccount balances, 10% are requests for total daily tolls on a\r\ngiven day and expressway, and 40% are requests for travel\r\ntime predictions. We specify how these historical queries\r\nshould be processed in Section 3.2.3.\r\n3.1.2 Stream Data\r\nThe stream data generated by the simulator consists of four\r\ntypes of tuples: Position Reports and historical query re\u0002quests for Account Balances, Daily Expenditures and Travel\r\nTime Estimation.\r\nPosition Reports\r\nA position report is a tuple of the form,\r\n(Type = 0, Time, VID, Spd, XWay, Lane, Dir, Seg, Pos)\r\nsuch that Type = 0 identifies this tuple as a position report,\r\nTime (0 . . . 10799)\r\n3\r\nis a timestamp identifying the time at\r\nwhich the position report was emitted, VID (0 . . . MAXINT)\r\nis an integer vehicle identifier identifying the vehicle that\r\nemitted the position report, Spd (0 . . . 100) is an integer re\u0002flecting the speed of the vehicle (in MPH) at the time the\r\nposition report is emitted, and XWay, Lane, Dir, Seg and\r\nPos are the following functions over the vehicle’s (x, y) co\u0002ordinates:\r\n• XWay (0 . . . L−1) identifies the expressway from which\r\nthe position report is emitted\r\n• Lane (0 . . . 4) identifies the lane of the expressway\r\nfrom which the position report is emitted (0 if it is\r\nan entrance ramp (ENTRY), 1 − 3 if it is a travel lane\r\n(TRAVEL) and 4 if it is an exit ramp (EXIT)).\r\n• Dir (0 . . . 1) indicates the direction (0 for Eastbound\r\nand 1 for Westbound) in which the vehicle is traveling\r\nwhen it emits its position report,\r\n• Seg (0 . . . 99) identifies the mile-long segment from\r\nwhich the position report is emitted, and\r\n• Pos (0 . . . 527999) identifies the horizontal position\r\nof the vehicle as a measure of the number of feet\r\nfrom the westernmost point on the expressway (i.e.,\r\nPos = x).4\r\n3There are 10800 seconds in a 3 hour simulation period.\r\n4Strictly speaking Seg is redundant given that position reports include\r\nPos. However, several benchmark computations depend upon a vehicle’s\r\nsegment number, and therefore for convenience we include it in input po\u0002sition reports.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/82edcfe9-a497-4f19-b37e-dfeb370db677.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9fa06e186eb562f85cb87ac430e9e2dba29056030b5409a3637e38406d912b1e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 905
      },
      {
        "segments": [
          {
            "segment_id": "2fee7304-1331-40f7-b1b7-b0c974e4a288",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 5,
            "page_width": 612,
            "page_height": 792,
            "content": "Historical Query Requests\r\nA historical query request is either:\r\n• Account Balance: a request for the vehicle’s current\r\naccount balance,\r\n• Daily Expenditure: a request for the vehicle’s total\r\ntolls on a specified expressway, on a specified day in\r\nthe previous 10 weeks,\r\n• Travel Time: a request for an estimated toll and travel\r\ntime for a journey on a given expressway on a given\r\nday of the week, at a given time.\r\nAccount balance requests are tuples of the form,\r\n(Type = 2, Time, VID, QID)\r\nsuch that Type identifies this tuple as an account balance\r\nrequest, Time is the time of the request, VID is the vehicle\r\nmaking the request, and QID is an integer query identifier.\r\nDaily expenditure requests are tuples of the form,\r\n(Type = 3, Time, VID, XWay, QID, Day)\r\nsuch that Type identifies this tuple as an daily expenditure\r\nrequest, Time is the time of the request, VID is the vehicle\r\nmaking the request, QID is the query identifier, and XWay\r\nand Day (1 . . . 69) identify the expressway and the day (1\r\nis yesterday, 69 is 10 weeks ago) for which an expenditure\r\ntotal is desired. Travel time requests are tuples of the form,\r\n(Type = 4, Time, VID, XWay, QID, Sinit, Send, DOW, TOD)\r\nsuch that Time is the time of the request, VID is the vehicle\r\nmaking the request, QID is a query identifier, XWay is the\r\nexpressway upon which the journey occurs (from segment\r\nSinit to segment Send), and DOW (1 . . . 7) and TOD (1 . . . 1440)\r\nspecify the day of the week and minute number in the day\r\nwhen the journey would take place.\r\nTo avoid the complication of unpredictable event deliv\u0002ery order, the four types of input tuples are multiplexed to\u0002gether into a single stream of tuples consisting of the union\r\nof all fields. In order, these are: Type, Time, VID, Spd,\r\nXWay, Lane, Dir, Seg, Pos, QID, Sinit, Send, DOW, TOD and\r\nDay. Linear Road implementations can use the Type field\r\nto determine which fields are relevant for a given tuple.\r\n3.1.3 Historical Data\r\nHistorical data summarizing 10 weeks worth of tolling his\u0002tory must be maintained by the system to answer historical\r\nquery requests that refer to data dating prior to the start of\r\nthe simulation. This data includes account data for all ve\u0002hicles as well as toll charges and average speeds for every\r\nsegment of every expressway for every minute over the pre\u0002vious 10 weeks. The historical data generator constructs\r\ntwo flat text files of comma separated values:\r\n• File TollHistory consists of tuples of the form,\r\n(VID, Day, XWay, Tolls)\r\nsuch that there is one entry for every vehicle that uses\r\nan expressway during the 3 hour simulation (VID) for\r\nevery day in the previous 10 weeks (Day) and every ex\u0002pressway (XWay). For every (VID, Day, XWay) combi\u0002nation, Tolls is the total amount in tolls spent on the\r\nexpressway on day Day by vehicle VID.\r\n• File SegmentHistory consists of tuples of the form,\r\n(Day, Min, XWay, Dir, Seg, Lav, Cnt, Toll)\r\nsuch that there is one entry for every day, Day, minute\r\nMin, expressway, XWay, direction, Dir and segment,\r\nSeg. The values of Lav, Cnt and Toll for each such\r\nentry reflect the average speed, number of vehicles and\r\ntoll charge for the given segment on the given express\u0002way at the given time.\r\nImplementations of Linear Road can bulk load this data into\r\nany storage system and can do so offline so that the time for\r\nbulk loading is not included in the time to run the bench\u0002mark.\r\n3.2 Linear Road Requirements\r\nThe Linear Road benchmark requires processing a fixed\r\nset of continuous and historical queries. These queries and\r\ntheir response time and accuracy requirements are discussed\r\nin detail below. Queries are described informally and spec\u0002ified formally in the predicate calculus.\r\nResponse time checks require that every output tuple, p,\r\ninclude two timestamps: one that identifies the time that p\r\nwas emitted (p.Emit) and one that is the timestamp of the\r\ninput tuple that triggered p to be generated (p.Time). Emit\r\nrequires every system implementing Linear Road to invoke\r\na system call to get the current time immediately prior to\r\nemitting p as output. Time is the timestamp of the input\r\nresulting in p’s generation. For example, for any toll notifi\u0002cation, p, p.Time is the timestamp of the first position report\r\nfrom the same vehicle reporting its position in the segment\r\nfor which the toll applies. This timestamp is generated by\r\nthe simulator, and the data driver ensures that this times\u0002tamp is the time the tuple is made available to the stream\r\nprocessing system.\r\n3.2.1 Toll Processing\r\nSystems implementing Linear Road must calculate a toll\r\nevery time a vehicle reports a position in a new segment,\r\nand notify the driver of this toll. Toll calculations are deter\u0002mined on the basis of the current congestion on the segment\r\n(as measured in terms of the number of vehicles and the\r\naverage speed in the segment) as well as the proximity of\r\naccidents. We make a distinction between toll notifications",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/2fee7304-1331-40f7-b1b7-b0c974e4a288.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b315304296b14a4a58e870cf00e83c9d04ad34c7fc553b978958c86d861c082a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 850
      },
      {
        "segments": [
          {
            "segment_id": "2fee7304-1331-40f7-b1b7-b0c974e4a288",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 5,
            "page_width": 612,
            "page_height": 792,
            "content": "Historical Query Requests\r\nA historical query request is either:\r\n• Account Balance: a request for the vehicle’s current\r\naccount balance,\r\n• Daily Expenditure: a request for the vehicle’s total\r\ntolls on a specified expressway, on a specified day in\r\nthe previous 10 weeks,\r\n• Travel Time: a request for an estimated toll and travel\r\ntime for a journey on a given expressway on a given\r\nday of the week, at a given time.\r\nAccount balance requests are tuples of the form,\r\n(Type = 2, Time, VID, QID)\r\nsuch that Type identifies this tuple as an account balance\r\nrequest, Time is the time of the request, VID is the vehicle\r\nmaking the request, and QID is an integer query identifier.\r\nDaily expenditure requests are tuples of the form,\r\n(Type = 3, Time, VID, XWay, QID, Day)\r\nsuch that Type identifies this tuple as an daily expenditure\r\nrequest, Time is the time of the request, VID is the vehicle\r\nmaking the request, QID is the query identifier, and XWay\r\nand Day (1 . . . 69) identify the expressway and the day (1\r\nis yesterday, 69 is 10 weeks ago) for which an expenditure\r\ntotal is desired. Travel time requests are tuples of the form,\r\n(Type = 4, Time, VID, XWay, QID, Sinit, Send, DOW, TOD)\r\nsuch that Time is the time of the request, VID is the vehicle\r\nmaking the request, QID is a query identifier, XWay is the\r\nexpressway upon which the journey occurs (from segment\r\nSinit to segment Send), and DOW (1 . . . 7) and TOD (1 . . . 1440)\r\nspecify the day of the week and minute number in the day\r\nwhen the journey would take place.\r\nTo avoid the complication of unpredictable event deliv\u0002ery order, the four types of input tuples are multiplexed to\u0002gether into a single stream of tuples consisting of the union\r\nof all fields. In order, these are: Type, Time, VID, Spd,\r\nXWay, Lane, Dir, Seg, Pos, QID, Sinit, Send, DOW, TOD and\r\nDay. Linear Road implementations can use the Type field\r\nto determine which fields are relevant for a given tuple.\r\n3.1.3 Historical Data\r\nHistorical data summarizing 10 weeks worth of tolling his\u0002tory must be maintained by the system to answer historical\r\nquery requests that refer to data dating prior to the start of\r\nthe simulation. This data includes account data for all ve\u0002hicles as well as toll charges and average speeds for every\r\nsegment of every expressway for every minute over the pre\u0002vious 10 weeks. The historical data generator constructs\r\ntwo flat text files of comma separated values:\r\n• File TollHistory consists of tuples of the form,\r\n(VID, Day, XWay, Tolls)\r\nsuch that there is one entry for every vehicle that uses\r\nan expressway during the 3 hour simulation (VID) for\r\nevery day in the previous 10 weeks (Day) and every ex\u0002pressway (XWay). For every (VID, Day, XWay) combi\u0002nation, Tolls is the total amount in tolls spent on the\r\nexpressway on day Day by vehicle VID.\r\n• File SegmentHistory consists of tuples of the form,\r\n(Day, Min, XWay, Dir, Seg, Lav, Cnt, Toll)\r\nsuch that there is one entry for every day, Day, minute\r\nMin, expressway, XWay, direction, Dir and segment,\r\nSeg. The values of Lav, Cnt and Toll for each such\r\nentry reflect the average speed, number of vehicles and\r\ntoll charge for the given segment on the given express\u0002way at the given time.\r\nImplementations of Linear Road can bulk load this data into\r\nany storage system and can do so offline so that the time for\r\nbulk loading is not included in the time to run the bench\u0002mark.\r\n3.2 Linear Road Requirements\r\nThe Linear Road benchmark requires processing a fixed\r\nset of continuous and historical queries. These queries and\r\ntheir response time and accuracy requirements are discussed\r\nin detail below. Queries are described informally and spec\u0002ified formally in the predicate calculus.\r\nResponse time checks require that every output tuple, p,\r\ninclude two timestamps: one that identifies the time that p\r\nwas emitted (p.Emit) and one that is the timestamp of the\r\ninput tuple that triggered p to be generated (p.Time). Emit\r\nrequires every system implementing Linear Road to invoke\r\na system call to get the current time immediately prior to\r\nemitting p as output. Time is the timestamp of the input\r\nresulting in p’s generation. For example, for any toll notifi\u0002cation, p, p.Time is the timestamp of the first position report\r\nfrom the same vehicle reporting its position in the segment\r\nfor which the toll applies. This timestamp is generated by\r\nthe simulator, and the data driver ensures that this times\u0002tamp is the time the tuple is made available to the stream\r\nprocessing system.\r\n3.2.1 Toll Processing\r\nSystems implementing Linear Road must calculate a toll\r\nevery time a vehicle reports a position in a new segment,\r\nand notify the driver of this toll. Toll calculations are deter\u0002mined on the basis of the current congestion on the segment\r\n(as measured in terms of the number of vehicles and the\r\naverage speed in the segment) as well as the proximity of\r\naccidents. We make a distinction between toll notifications",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/2fee7304-1331-40f7-b1b7-b0c974e4a288.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b315304296b14a4a58e870cf00e83c9d04ad34c7fc553b978958c86d861c082a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 850
      },
      {
        "segments": [
          {
            "segment_id": "7249c2d9-43da-4615-ae63-1ee2c928f44a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 6,
            "page_width": 612,
            "page_height": 792,
            "content": "and toll assessments, which happen at different times. Ev\u0002ery time a vehicle issues its first position report from a seg\u0002ment, a toll for that segment is calculated and the vehicle\r\nis notified of that toll. Every time a position report iden\u0002tifies a vehicle as crossing from one segment into another,\r\nthe toll reported for the segment being exited is assessed to\r\nthe vehicle’s account. Thus, a toll calculation for one seg\u0002ment often is concurrent with an account being debited for\r\nthe previous segment. If the vehicle exits at the exit ramp of\r\na segment, the toll for that segment is not charged.\r\nToll Notifications\r\nTable 1 expresses the conditions, output, recipients and re\u0002sponse time requirements for toll notifications. The formal\u0002ization is in terms of the set, P, of all position reports, and\r\nuses the following shorthand notation:\r\n• For any position report, p ∈ P,\r\n←\r\np identifies the posi\u0002tion report that was emitted by the same vehicle during\r\nthe same vehicle trip immediately prior to p.\r\n5 Because\r\nevery vehicle emits a position report every 30 seconds\r\nduring a vehicle trip, this can be defined formally as:\r\n←\r\np = q ∈ P s.t.\r\n(q . VID = p . VID ∧ p . Time − q . Time = 30).\r\n• Similarly for any position report p ∈ P,\r\n→\r\np identifies\r\nthe position report during the same vehicle trip emitted\r\nimmediately following p:\r\n→\r\np = q ∈ P s.t.\r\n(q . VID = p . VID ∧ q . Time − p . Time = 30).\r\n• For any vehicle identifier v and time t, Lasti (v, t) de\u0002notes the i\r\nth position report emitted by v prior to t:6\r\nLasti (v, t) = p ∈ P s.t.\r\n(p . VID = v ∧ (30(i − 1) ≤ t − p . Time < 30i).\r\nFor example, by the “No Position Interpolation” as\u0002sumption, the current position of v at time t is always\r\nLast1 (v, t).\r\n• For any timestamp, t (defined as an integer number of\r\nseconds since the start of the simulation), the “minute\r\nnumber of t” (M(t)) is the minute number in which t\r\nfalls. That is,\r\nM(t) = b\r\nt\r\n60\r\nc + 1.\r\nNote that the first minute of the simulation is minute\r\nnumber 1.\r\n5Obviously, this is undefined for the first position report of every vehi\u0002cle trip.\r\n6This function is defined for t and v provided that at time t, v was in\r\nthe midst of a vehicle trip that began at least i position reports ago.\r\nTrigger Position report, q\r\nPreconditions q . Seg 6=\r\n←\r\nq . Seg, l 6= EXIT\r\nOutput (Type: 0, VID: v, Time: t, Emit: t\r\n0\r\nSpd: Lav (M(t), x, s, d),\r\nToll: Toll (M(t), x, s, d))\r\nRecipient v\r\nResponse t\r\n0 − t ≤ 5 Sec\r\nTable 1. Toll Notification Requirements\r\nThe trigger for a toll notification to vehicle v of a charge\r\nfor traveling in segment s is a position report, q =\r\n(Type: 0, Time: t, VID: v, Spd: spd,\r\nXWay: x, Seg: s, Pos: p, Lane: l, Dir: d).\r\nAs stated in Table 1, q triggers a toll notification if it re\u0002ports that v is in a new segment since the last position re\u0002port, but not in an exit lane. The tuple output consists of\r\nfields Type = 0 (identifying this tuple as a toll notification),\r\nVID (identifying the vehicle being notified of the toll), Time\r\n(specifying the time that q was emitted), Emit (specifying\r\nthe time the toll notification is emitted), Speed (specifying\r\nthe 5-minute average speed in the segment) and Toll (spec\u0002ifying the calculated toll). The recipient of the notification\r\nis v, and the response time requirement is 5 seconds be\u0002tween the time the position report was emitted (t) and the\r\ntime the toll notification is sent (t\r\n0\r\n).\r\nThe values calculated for fields Spd and Toll are ex\u0002pressed in terms of the functions, Lav and Toll defined in\r\nTable 2. Lav (short for “Latest Average Velocity”) com\u0002putes the average speed on some expressway x, segment s\r\nand direction d by averaging vehicle speeds over the 5 min\u0002utes that precede minute m = M(t). Minute averages are\r\nexpressed with the function Avgs (m, x, s, d) that specifies\r\nthe average speed of all vehicles that emitted a position re\u0002port from segment s of expressway x in direction d during\r\nminute m. Note that some vehicles might emit two posi\u0002tion reports during this minute. This is accounted for in\r\nAvgsv (v, m, x, s, d) which calculates the average speed of\r\nvehicle v according to all of the position reports it emits\r\nduring minute m. Finally, cars (m, x, s, d) returns the set\r\nof all vehicles that emit position reports from segment s on\r\nexpressway x while traveling in direction d during minute\r\nm. Note that we use the notation, p .(XWay; Seg; Dir) =\r\n(x; s; d) as shorthand for\r\np . XWay = x ∧ p . Seg = s ∧ p . Dir = d,\r\nand use {| . . . |} to denote the contents of a bag.\r\nBy default, the value of Toll at time t for a segment is\r\nbased on the average speed and number of vehicles report\u0002ing from the segment during minute M(t)−1. Specifically,\r\nif the LAV for the time interval from minute M(t) − 5 to\r\nM(t)− 1 is greater than or equal to 40 MPH, or if the num\u0002ber of vehicles on the segment (numvehicles) was 50 or\r\nless during minute M(t)−1, no toll is assessed. Otherwise,",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/7249c2d9-43da-4615-ae63-1ee2c928f44a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1b4f97f6f5a971821a7faa60b24754562927ec071ef8cd42e5d8fb12a9b8446e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 932
      },
      {
        "segments": [
          {
            "segment_id": "7249c2d9-43da-4615-ae63-1ee2c928f44a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 6,
            "page_width": 612,
            "page_height": 792,
            "content": "and toll assessments, which happen at different times. Ev\u0002ery time a vehicle issues its first position report from a seg\u0002ment, a toll for that segment is calculated and the vehicle\r\nis notified of that toll. Every time a position report iden\u0002tifies a vehicle as crossing from one segment into another,\r\nthe toll reported for the segment being exited is assessed to\r\nthe vehicle’s account. Thus, a toll calculation for one seg\u0002ment often is concurrent with an account being debited for\r\nthe previous segment. If the vehicle exits at the exit ramp of\r\na segment, the toll for that segment is not charged.\r\nToll Notifications\r\nTable 1 expresses the conditions, output, recipients and re\u0002sponse time requirements for toll notifications. The formal\u0002ization is in terms of the set, P, of all position reports, and\r\nuses the following shorthand notation:\r\n• For any position report, p ∈ P,\r\n←\r\np identifies the posi\u0002tion report that was emitted by the same vehicle during\r\nthe same vehicle trip immediately prior to p.\r\n5 Because\r\nevery vehicle emits a position report every 30 seconds\r\nduring a vehicle trip, this can be defined formally as:\r\n←\r\np = q ∈ P s.t.\r\n(q . VID = p . VID ∧ p . Time − q . Time = 30).\r\n• Similarly for any position report p ∈ P,\r\n→\r\np identifies\r\nthe position report during the same vehicle trip emitted\r\nimmediately following p:\r\n→\r\np = q ∈ P s.t.\r\n(q . VID = p . VID ∧ q . Time − p . Time = 30).\r\n• For any vehicle identifier v and time t, Lasti (v, t) de\u0002notes the i\r\nth position report emitted by v prior to t:6\r\nLasti (v, t) = p ∈ P s.t.\r\n(p . VID = v ∧ (30(i − 1) ≤ t − p . Time < 30i).\r\nFor example, by the “No Position Interpolation” as\u0002sumption, the current position of v at time t is always\r\nLast1 (v, t).\r\n• For any timestamp, t (defined as an integer number of\r\nseconds since the start of the simulation), the “minute\r\nnumber of t” (M(t)) is the minute number in which t\r\nfalls. That is,\r\nM(t) = b\r\nt\r\n60\r\nc + 1.\r\nNote that the first minute of the simulation is minute\r\nnumber 1.\r\n5Obviously, this is undefined for the first position report of every vehi\u0002cle trip.\r\n6This function is defined for t and v provided that at time t, v was in\r\nthe midst of a vehicle trip that began at least i position reports ago.\r\nTrigger Position report, q\r\nPreconditions q . Seg 6=\r\n←\r\nq . Seg, l 6= EXIT\r\nOutput (Type: 0, VID: v, Time: t, Emit: t\r\n0\r\nSpd: Lav (M(t), x, s, d),\r\nToll: Toll (M(t), x, s, d))\r\nRecipient v\r\nResponse t\r\n0 − t ≤ 5 Sec\r\nTable 1. Toll Notification Requirements\r\nThe trigger for a toll notification to vehicle v of a charge\r\nfor traveling in segment s is a position report, q =\r\n(Type: 0, Time: t, VID: v, Spd: spd,\r\nXWay: x, Seg: s, Pos: p, Lane: l, Dir: d).\r\nAs stated in Table 1, q triggers a toll notification if it re\u0002ports that v is in a new segment since the last position re\u0002port, but not in an exit lane. The tuple output consists of\r\nfields Type = 0 (identifying this tuple as a toll notification),\r\nVID (identifying the vehicle being notified of the toll), Time\r\n(specifying the time that q was emitted), Emit (specifying\r\nthe time the toll notification is emitted), Speed (specifying\r\nthe 5-minute average speed in the segment) and Toll (spec\u0002ifying the calculated toll). The recipient of the notification\r\nis v, and the response time requirement is 5 seconds be\u0002tween the time the position report was emitted (t) and the\r\ntime the toll notification is sent (t\r\n0\r\n).\r\nThe values calculated for fields Spd and Toll are ex\u0002pressed in terms of the functions, Lav and Toll defined in\r\nTable 2. Lav (short for “Latest Average Velocity”) com\u0002putes the average speed on some expressway x, segment s\r\nand direction d by averaging vehicle speeds over the 5 min\u0002utes that precede minute m = M(t). Minute averages are\r\nexpressed with the function Avgs (m, x, s, d) that specifies\r\nthe average speed of all vehicles that emitted a position re\u0002port from segment s of expressway x in direction d during\r\nminute m. Note that some vehicles might emit two posi\u0002tion reports during this minute. This is accounted for in\r\nAvgsv (v, m, x, s, d) which calculates the average speed of\r\nvehicle v according to all of the position reports it emits\r\nduring minute m. Finally, cars (m, x, s, d) returns the set\r\nof all vehicles that emit position reports from segment s on\r\nexpressway x while traveling in direction d during minute\r\nm. Note that we use the notation, p .(XWay; Seg; Dir) =\r\n(x; s; d) as shorthand for\r\np . XWay = x ∧ p . Seg = s ∧ p . Dir = d,\r\nand use {| . . . |} to denote the contents of a bag.\r\nBy default, the value of Toll at time t for a segment is\r\nbased on the average speed and number of vehicles report\u0002ing from the segment during minute M(t)−1. Specifically,\r\nif the LAV for the time interval from minute M(t) − 5 to\r\nM(t)− 1 is greater than or equal to 40 MPH, or if the num\u0002ber of vehicles on the segment (numvehicles) was 50 or\r\nless during minute M(t)−1, no toll is assessed. Otherwise,",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/7249c2d9-43da-4615-ae63-1ee2c928f44a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1b4f97f6f5a971821a7faa60b24754562927ec071ef8cd42e5d8fb12a9b8446e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 932
      },
      {
        "segments": [
          {
            "segment_id": "38b6673a-e12a-40c1-85d5-24235997cbc0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 7,
            "page_width": 612,
            "page_height": 792,
            "content": "the default toll is determined by the formula,\r\n2 × (numvehicles − 50)2.\r\nThe basic intuition is to raise tolls when congestion is high\r\nso as to discourage drivers from contributing to worse con\u0002gestion.\r\nThe toll calculation described above is issued for seg\u0002ment s unless an accident was detected 0-4 segments down\u0002stream of s as of minute M(t). In this case, no toll is\r\ncharged. Accident detection is discussed in Section 3.2.2.\r\nToll Assessments\r\nEvery time a position report identifies a vehicle as crossing\r\nfrom one segment into the next, the toll charge quoted to\r\nthe vehicle when it first entered the segment that it is now\r\nleaving is assessed to the vehicle’s account. Systems imple\u0002menting Linear Road must keep track of all tolls assessed\r\nso that it can answer Account Balance queries that report\r\nthe current balance of a vehicle, Daily Expenditure queries\r\nthat report the total tolls assessed on a given expressway on\r\na given day for a given vehicle, and Travel Time Estimation\r\nqueries that use previous toll charges to estimate tolls for\r\ngiven segments on future days and times.\r\n3.2.2 Accident Processing\r\nSystems implementing Linear Road must detect accidents\r\non the expressways as they occur (detection), and subse\u0002quently alert all vehicles in the vicinity (notification). As\r\nwas discussed in Section 3.2.1, accident detection should\r\nalso result in a reduction in tolls that are assessed within 5\r\nsegments upstream.\r\nAccident Detection\r\nA stream processing system should detect an accident on a\r\ngiven segment whenever two or more vehicles are stopped\r\nin that segment at the same lane and position. A vehicle is\r\nconsidered stopped if four consecutive position reports from\r\nthis vehicle come from the same position (i.e., the same ex\u0002pressway, lane, position and direction). This is expressed\r\nformally in Table 3 with the predicates Stop and Acc . Pred\u0002icate Stop (v, t, x, l, p, d) holds if the four most recent posi\u0002tions reports from v as of time t are from the same location.\r\nPredicate Acc (t, x, p, d) holds if there were two vehicles\r\nstopped as of time t at the same position p of expressway x\r\nin direction d.\r\nAccident Notification\r\nOnce an accident is detected, every vehicle that enters into\r\na segment in the vicinity of the accident must be notified so\r\nthat these vehicles have the opportunity to exit the express\u0002way and avoid the resulting congestion. The exact require\u0002ments for accident notification are summarized in Table 4.\r\nTrigger Position report, q\r\nPrecondition ∃s\r\n0\r\n,0≤i≤4 (s\r\n0 = Dn (q . Seg, d, i) ∧\r\nAcc in Seg (M(t) − 1, x, s0, d)),\r\nq . Seg 6=\r\n←\r\nq . Seg, l 6= EXIT\r\nOutput (Type: 1, Time: t, Emit: t\r\n0\r\n, Seg: s\r\n0\r\n)\r\nRecipients v\r\nResponse t\r\n0 − t ≤ 5 Sec\r\nTable 4. Accident Alert Requirements\r\nThe trigger for an accident notification is a position report\r\nq =\r\n(Type: 0, Time: t, VID: v, Spd: spd,\r\nXWay: x, Seg: s, Pos: p, Lane: l, Dir: d),\r\nthat identifies a vehicle entering a segment 0 to 4 segments\r\nupstream of some accident location, but only if q was emit\u0002ted no earlier than the minute following the minute when the\r\naccident occurred, and no later than the minute the accident\r\nis cleared. This is expressed using the predicate\r\nAcc in Seg (m, x, Dn (s, d, i))\r\nthat holds if there was an accident in the segment that is ex\u0002actly i segments downstream of s, in expressway x and in\r\nthe travel lanes for direction d during minute m.\r\n7 The tu\u0002ple output consists of the fields, Type = 1 (identifying this\r\ntuple as an accident alert), Time (specifying the time that q\r\nwas emitted), Emit (specifying the time the notification is\r\nemitted), and Seg (specifying the segment where the acci\u0002dent occurred). The response time requirement is 5 seconds\r\nbetween the time that q was emitted (t) and the time the\r\naccident notification is sent (t\r\n0\r\n).\r\nNote that for a given accident, multiple accident notifi\u0002cations may be sent to the same vehicle if that vehicle does\r\nnot exit the expressway and instead enters segments bring\u0002ing it closer to the site of the accident. Repeated notifica\u0002tions are intentional, as this allows for vehicles that enter\r\none of these segments after the accident occurs to be no\u0002tified of the accident. Also, once a vehicle stops receiving\r\naccident notifications, it can assume that it has either passed\r\nthe accident location or that the accident has been cleared.\r\n3.2.3 Historical Query Processing\r\nAside from the continuous queries involving toll and acci\u0002dent notifications, systems implementing Linear Road must\r\nalso be able to respond to historical query requests issued by\r\nvehicles. There are three types of historical queries. These\r\nare described below.\r\nAccount Balance Queries\r\nA customer traveling on some expressway can request his\r\naccount balance at any time. At the start of the simulation,\r\n7The segment that is i segments downstream of s Dn(s,d,i) is MIN\r\n(s + i, 99) if the direction is eastbound (d = 0) and MAX (s − i, 0)\r\notherwise.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/38b6673a-e12a-40c1-85d5-24235997cbc0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ab7691ff67facfb124cc46aca700b0295c07bae0c8efe2ba26e3585249365333",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 847
      },
      {
        "segments": [
          {
            "segment_id": "38b6673a-e12a-40c1-85d5-24235997cbc0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 7,
            "page_width": 612,
            "page_height": 792,
            "content": "the default toll is determined by the formula,\r\n2 × (numvehicles − 50)2.\r\nThe basic intuition is to raise tolls when congestion is high\r\nso as to discourage drivers from contributing to worse con\u0002gestion.\r\nThe toll calculation described above is issued for seg\u0002ment s unless an accident was detected 0-4 segments down\u0002stream of s as of minute M(t). In this case, no toll is\r\ncharged. Accident detection is discussed in Section 3.2.2.\r\nToll Assessments\r\nEvery time a position report identifies a vehicle as crossing\r\nfrom one segment into the next, the toll charge quoted to\r\nthe vehicle when it first entered the segment that it is now\r\nleaving is assessed to the vehicle’s account. Systems imple\u0002menting Linear Road must keep track of all tolls assessed\r\nso that it can answer Account Balance queries that report\r\nthe current balance of a vehicle, Daily Expenditure queries\r\nthat report the total tolls assessed on a given expressway on\r\na given day for a given vehicle, and Travel Time Estimation\r\nqueries that use previous toll charges to estimate tolls for\r\ngiven segments on future days and times.\r\n3.2.2 Accident Processing\r\nSystems implementing Linear Road must detect accidents\r\non the expressways as they occur (detection), and subse\u0002quently alert all vehicles in the vicinity (notification). As\r\nwas discussed in Section 3.2.1, accident detection should\r\nalso result in a reduction in tolls that are assessed within 5\r\nsegments upstream.\r\nAccident Detection\r\nA stream processing system should detect an accident on a\r\ngiven segment whenever two or more vehicles are stopped\r\nin that segment at the same lane and position. A vehicle is\r\nconsidered stopped if four consecutive position reports from\r\nthis vehicle come from the same position (i.e., the same ex\u0002pressway, lane, position and direction). This is expressed\r\nformally in Table 3 with the predicates Stop and Acc . Pred\u0002icate Stop (v, t, x, l, p, d) holds if the four most recent posi\u0002tions reports from v as of time t are from the same location.\r\nPredicate Acc (t, x, p, d) holds if there were two vehicles\r\nstopped as of time t at the same position p of expressway x\r\nin direction d.\r\nAccident Notification\r\nOnce an accident is detected, every vehicle that enters into\r\na segment in the vicinity of the accident must be notified so\r\nthat these vehicles have the opportunity to exit the express\u0002way and avoid the resulting congestion. The exact require\u0002ments for accident notification are summarized in Table 4.\r\nTrigger Position report, q\r\nPrecondition ∃s\r\n0\r\n,0≤i≤4 (s\r\n0 = Dn (q . Seg, d, i) ∧\r\nAcc in Seg (M(t) − 1, x, s0, d)),\r\nq . Seg 6=\r\n←\r\nq . Seg, l 6= EXIT\r\nOutput (Type: 1, Time: t, Emit: t\r\n0\r\n, Seg: s\r\n0\r\n)\r\nRecipients v\r\nResponse t\r\n0 − t ≤ 5 Sec\r\nTable 4. Accident Alert Requirements\r\nThe trigger for an accident notification is a position report\r\nq =\r\n(Type: 0, Time: t, VID: v, Spd: spd,\r\nXWay: x, Seg: s, Pos: p, Lane: l, Dir: d),\r\nthat identifies a vehicle entering a segment 0 to 4 segments\r\nupstream of some accident location, but only if q was emit\u0002ted no earlier than the minute following the minute when the\r\naccident occurred, and no later than the minute the accident\r\nis cleared. This is expressed using the predicate\r\nAcc in Seg (m, x, Dn (s, d, i))\r\nthat holds if there was an accident in the segment that is ex\u0002actly i segments downstream of s, in expressway x and in\r\nthe travel lanes for direction d during minute m.\r\n7 The tu\u0002ple output consists of the fields, Type = 1 (identifying this\r\ntuple as an accident alert), Time (specifying the time that q\r\nwas emitted), Emit (specifying the time the notification is\r\nemitted), and Seg (specifying the segment where the acci\u0002dent occurred). The response time requirement is 5 seconds\r\nbetween the time that q was emitted (t) and the time the\r\naccident notification is sent (t\r\n0\r\n).\r\nNote that for a given accident, multiple accident notifi\u0002cations may be sent to the same vehicle if that vehicle does\r\nnot exit the expressway and instead enters segments bring\u0002ing it closer to the site of the accident. Repeated notifica\u0002tions are intentional, as this allows for vehicles that enter\r\none of these segments after the accident occurs to be no\u0002tified of the accident. Also, once a vehicle stops receiving\r\naccident notifications, it can assume that it has either passed\r\nthe accident location or that the accident has been cleared.\r\n3.2.3 Historical Query Processing\r\nAside from the continuous queries involving toll and acci\u0002dent notifications, systems implementing Linear Road must\r\nalso be able to respond to historical query requests issued by\r\nvehicles. There are three types of historical queries. These\r\nare described below.\r\nAccount Balance Queries\r\nA customer traveling on some expressway can request his\r\naccount balance at any time. At the start of the simulation,\r\n7The segment that is i segments downstream of s Dn(s,d,i) is MIN\r\n(s + i, 99) if the direction is eastbound (d = 0) and MAX (s − i, 0)\r\notherwise.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/38b6673a-e12a-40c1-85d5-24235997cbc0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ab7691ff67facfb124cc46aca700b0295c07bae0c8efe2ba26e3585249365333",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 847
      },
      {
        "segments": [
          {
            "segment_id": "dbf5837f-a9eb-47c2-8059-73caf2b6b83d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 8,
            "page_width": 612,
            "page_height": 792,
            "content": "cars (m, x, s, d) = {p . VID | p ∈ P, m = M(p . Time), p .(XWay; Seg; Dir) = (x; s; d)}\r\nAvgsv (v, m, x, s, d) = AVG ({|p . Spd | p ∈ P, p . VID = v, m = M(p . Time), p .(XWay; Seg; Dir) = (x; s; d)|})\r\nAvgs (m, x, s, d) = AVG ({|Avgsv (v, m, x, s, d) | v ∈ cars (m, x, s, d)|})\r\nLav (m, x, s, d) = bAVG ({|Avgs (m − 1, x, s, d), . . . , Avgs (m − 5, x, s, d)|})c\r\nToll (m, x, s, d) =\r\n\r\n\r\n\r\n2 · (|cars (m − 1, t, x, s, d)| − 50)2\r\nif Lav (m, x, s, d) < 40 and\r\n|cars (m − 1, x, s, d)| > 50 and\r\n∀0≤i≤4 (¬(Acc in Seg (m − 1, x, Dn (s, d, i))))\r\n0, otherwise\r\nTable 2. Notation Used to Define Tolls\r\nStop (v, t, x, l, p, d) ⇔ ∀1≤i≤4 (Lasti (v, t).(XWay; Lane; Pos; Dir) = (x; l; p; d))\r\nAcc (t, x, p, d) ⇔ ∃v1,v2,l (l = TRAVEL ∧ v1 6= v2 ∧ Stop (v1, t, x, l, p, d) ∧ Stop (v2, t, x, l, p, d))\r\nAcc in Seg (m, x, s, d) ⇔ ∃p,t (t ∈ m ∧ Acc (t, x, p, d) ∧ b p\r\n5280 c = s)\r\nTable 3. Notation Used to Define Accidents\r\nevery vehicle’s account balance is zero, and thereafter the\r\naccount balance at time t is the sum of all tolls assessed as of\r\nt. The requirements for account balance historical queries\r\nare summarized in Table 5. A historical query to return an\r\naccount balance for a given vehicle is triggered by a request\r\ntuple a =\r\n(Type: 2, Time: t, VID: v, QID: q).\r\nThe tuple output consists of the fields, Type = 2 (identi\u0002fying this tuple as an account balance), Time (specifying\r\nthe time that a was emitted), Emit (specifying the time the\r\nquery response is emitted), QID (identifying the query that\r\nissued the request), Bal (the account balance calculated),\r\nand ResultTime (the time at which Bal was last updated).\r\nThe balance is the sum of all tolls that were charged to the\r\nvehicle’s account. This is expressed in terms of tollset: the\r\nset of all position reports that resulted in a toll charge be\u0002ing assessed. A subset of the position reports that generated\r\nalerts, tollset (v) consists of those position reports issued\r\nfrom some segment (s) whose subsequent position reports\r\nindicated that the vehicle did not exit the expressway from\r\nsegment s. More formally,\r\ntollset (v) =\r\n{p ∈ P | p . VID = v, p . Seg 6=\r\n→\r\np . Seg,\r\np .(XWay; Dir) = (x; d)}.\r\nFunction Toll specifies the toll calculation as described in\r\nTable 2.\r\nThat Linear Road requires answering account balance\r\nqueries means that the tolls charged to each vehicle must be\r\nmaintained in a timely fashion. Thus, the most substantial\r\noverhead resulting from inclusion of this historical query\r\ncomes not from the cost of answering it but from the cost\r\nof maintaining the data required to answer it. The response\r\nTrigger Account balance request, a\r\nCondition -\r\nOutput (Type: 2, Time: t, Emit: t\r\n0\r\n,\r\nResultTime: τ, QID: q,\r\nBal:\r\nP\r\np ∈ tollset(v),\r\np.Time ≤ τ,\r\np . Seg 6= Last1 (v, t).Seg\r\n(f(p))) s.t.\r\nf(p) =\r\nToll (M(p . Time), p . XWay, p . Seg, p . Dir)\r\nRecipient v\r\nResponse t\r\n0 − t ≤ 5 Sec\r\nAccuracy τ ≥ t − 60 Sec\r\nTable 5. Account Balance Requirements\r\ntime requirement is 5 seconds from the time the historical\r\nquery request is issued to the time a response is emitted.\r\nThe accuracy requirement specifies that the returned bal\u0002ance must have been accurate at some time, τ, in the 60\r\nseconds prior to the time when the account balance request\r\nis issued. (Given that tolls can be issued at most once per\r\nemitted position report, this means the query has up to 3\r\npossible correct answers.) This interval gives the stream\r\nprocessing system some flexibility as to when to update the\r\nbalance of a vehicle as a result of assessing a toll. If a query\r\nrequest at time t is concurrent with some toll charges that\r\nhave yet to be assessed to a vehicle’s account, the system\r\nmight choose to process the historical query before updat\u0002ing the account balance (potentially producing a result that\r\nis accurate for some time τ < t), or waiting until the tolls\r\nhave been assessed.\r\nDaily Expenditure Queries\r\nA second historical query that can be issued in Linear Road\r\nis one that requests the sum of tolls spent on some express-",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/dbf5837f-a9eb-47c2-8059-73caf2b6b83d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c3ac235c5815a4ce66a8534f46a362c4a8aa1aabd52ef3c6ac21e657c039deb1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 798
      },
      {
        "segments": [
          {
            "segment_id": "dbf5837f-a9eb-47c2-8059-73caf2b6b83d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 8,
            "page_width": 612,
            "page_height": 792,
            "content": "cars (m, x, s, d) = {p . VID | p ∈ P, m = M(p . Time), p .(XWay; Seg; Dir) = (x; s; d)}\r\nAvgsv (v, m, x, s, d) = AVG ({|p . Spd | p ∈ P, p . VID = v, m = M(p . Time), p .(XWay; Seg; Dir) = (x; s; d)|})\r\nAvgs (m, x, s, d) = AVG ({|Avgsv (v, m, x, s, d) | v ∈ cars (m, x, s, d)|})\r\nLav (m, x, s, d) = bAVG ({|Avgs (m − 1, x, s, d), . . . , Avgs (m − 5, x, s, d)|})c\r\nToll (m, x, s, d) =\r\n\r\n\r\n\r\n2 · (|cars (m − 1, t, x, s, d)| − 50)2\r\nif Lav (m, x, s, d) < 40 and\r\n|cars (m − 1, x, s, d)| > 50 and\r\n∀0≤i≤4 (¬(Acc in Seg (m − 1, x, Dn (s, d, i))))\r\n0, otherwise\r\nTable 2. Notation Used to Define Tolls\r\nStop (v, t, x, l, p, d) ⇔ ∀1≤i≤4 (Lasti (v, t).(XWay; Lane; Pos; Dir) = (x; l; p; d))\r\nAcc (t, x, p, d) ⇔ ∃v1,v2,l (l = TRAVEL ∧ v1 6= v2 ∧ Stop (v1, t, x, l, p, d) ∧ Stop (v2, t, x, l, p, d))\r\nAcc in Seg (m, x, s, d) ⇔ ∃p,t (t ∈ m ∧ Acc (t, x, p, d) ∧ b p\r\n5280 c = s)\r\nTable 3. Notation Used to Define Accidents\r\nevery vehicle’s account balance is zero, and thereafter the\r\naccount balance at time t is the sum of all tolls assessed as of\r\nt. The requirements for account balance historical queries\r\nare summarized in Table 5. A historical query to return an\r\naccount balance for a given vehicle is triggered by a request\r\ntuple a =\r\n(Type: 2, Time: t, VID: v, QID: q).\r\nThe tuple output consists of the fields, Type = 2 (identi\u0002fying this tuple as an account balance), Time (specifying\r\nthe time that a was emitted), Emit (specifying the time the\r\nquery response is emitted), QID (identifying the query that\r\nissued the request), Bal (the account balance calculated),\r\nand ResultTime (the time at which Bal was last updated).\r\nThe balance is the sum of all tolls that were charged to the\r\nvehicle’s account. This is expressed in terms of tollset: the\r\nset of all position reports that resulted in a toll charge be\u0002ing assessed. A subset of the position reports that generated\r\nalerts, tollset (v) consists of those position reports issued\r\nfrom some segment (s) whose subsequent position reports\r\nindicated that the vehicle did not exit the expressway from\r\nsegment s. More formally,\r\ntollset (v) =\r\n{p ∈ P | p . VID = v, p . Seg 6=\r\n→\r\np . Seg,\r\np .(XWay; Dir) = (x; d)}.\r\nFunction Toll specifies the toll calculation as described in\r\nTable 2.\r\nThat Linear Road requires answering account balance\r\nqueries means that the tolls charged to each vehicle must be\r\nmaintained in a timely fashion. Thus, the most substantial\r\noverhead resulting from inclusion of this historical query\r\ncomes not from the cost of answering it but from the cost\r\nof maintaining the data required to answer it. The response\r\nTrigger Account balance request, a\r\nCondition -\r\nOutput (Type: 2, Time: t, Emit: t\r\n0\r\n,\r\nResultTime: τ, QID: q,\r\nBal:\r\nP\r\np ∈ tollset(v),\r\np.Time ≤ τ,\r\np . Seg 6= Last1 (v, t).Seg\r\n(f(p))) s.t.\r\nf(p) =\r\nToll (M(p . Time), p . XWay, p . Seg, p . Dir)\r\nRecipient v\r\nResponse t\r\n0 − t ≤ 5 Sec\r\nAccuracy τ ≥ t − 60 Sec\r\nTable 5. Account Balance Requirements\r\ntime requirement is 5 seconds from the time the historical\r\nquery request is issued to the time a response is emitted.\r\nThe accuracy requirement specifies that the returned bal\u0002ance must have been accurate at some time, τ, in the 60\r\nseconds prior to the time when the account balance request\r\nis issued. (Given that tolls can be issued at most once per\r\nemitted position report, this means the query has up to 3\r\npossible correct answers.) This interval gives the stream\r\nprocessing system some flexibility as to when to update the\r\nbalance of a vehicle as a result of assessing a toll. If a query\r\nrequest at time t is concurrent with some toll charges that\r\nhave yet to be assessed to a vehicle’s account, the system\r\nmight choose to process the historical query before updat\u0002ing the account balance (potentially producing a result that\r\nis accurate for some time τ < t), or waiting until the tolls\r\nhave been assessed.\r\nDaily Expenditure Queries\r\nA second historical query that can be issued in Linear Road\r\nis one that requests the sum of tolls spent on some express-",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/dbf5837f-a9eb-47c2-8059-73caf2b6b83d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c3ac235c5815a4ce66a8534f46a362c4a8aa1aabd52ef3c6ac21e657c039deb1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 798
      },
      {
        "segments": [
          {
            "segment_id": "f3d30217-eaac-4779-a57f-8ccecf2ced4e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 9,
            "page_width": 612,
            "page_height": 792,
            "content": "Trigger Daily Expenditure request, d\r\nCondition -\r\nOutput (Type: 3, Time: t, Emit: t\r\n0\r\n, QID: q,\r\nBal:\r\nP\r\np ∈ tollset(v),\r\nDay(p.Time) = d,\r\np.XWay = x\r\n(f(p))) s.t.\r\nf(p) =\r\nToll (M(p . Time), p . XWay, p . Seg, p . Dir)))\r\nRecipients v\r\nResponse t\r\n0 − t ≤ 10 Sec\r\nTable 6. Daily Expenditure Requirements\r\nway on some day in the last 10 weeks (not including the\r\ncurrent day or any day which ended within 5 minutes of\r\nt). The requirements for daily expenditure historical queries\r\nare summarized in Table 6. A historical query to return an\r\naccount balance for a given vehicle is triggered by a request\r\ntuple d =\r\n(Type: 3, Time: t, VID: v, QID: q, XWay: x, Day: n).\r\nThe tuple output consists of the fields, Type = 3 (identify\u0002ing this tuple as a daily expenditure report), Time (specify\u0002ing the time that d was emitted), Emit (specifying the time\r\nthe query response is emitted), QID (identifying the query\r\nthat issued the request), and Bal which is the account bal\u0002ance calculated. The value of Bal is the sum of all tolls\r\nfrom expressway x on day n that were charged to the vehi\u0002cle’s account.\r\nTo be able to respond to daily expenditure queries, sys\u0002tems implementing Linear Road must maintain 10 weeks\r\nworth of toll data per vehicle and expressway. Given the\r\napproximately 150,000 vehicles generated in a 3 hour sim\u0002ulation, this amounts to 150, 000 · L · 70 (roughly between\r\n10 million and 100 million) rows.\r\nTravel Time Estimation Queries\r\nA historical query to return a time travel estimate is trig\u0002gered by a request tuple z =\r\n(Type: 4, Time: t, VID: v, QID: q,\r\nXWay: x, Sinit: i, Send: e,\r\nDOW: d, TOD: y)\r\n.\r\nIn response, the system responds with a tuple of the form,\r\n(Type : 4, QID : q, TravelTime : r1, Toll : r2)\r\nsuch that r1 and r2 are respectively, the predicted travel\r\ntime and toll charge for the vehicle journey calculated on\r\nthe basis of statistics maintained over the previous 10 weeks\r\nin the manner described below.\r\nLet z be a request for a travel time and toll charge es\u0002timate for a journey from segment i to segment e on ex\u0002pressway x starting on day d and time y. Now, let tj be the\r\nexpected arrival time at segment j (i ≤ j ≤ e). Then,\r\nyi = y, and\r\nyj+1 = yj + tav(x, j, d, tj ) (i < j ≤ e)\r\nwhere tav(Xway, Seg, DOW, T OD) computes the ex\u0002pected travel time from average vehicle speed for 10 weeks\r\nof data, for a given expressway, segment, day and time.\r\nThen, the expected travel time, r1 = ye and the expected\r\ntoll is\r\nr2 =\r\nXe−1\r\nj=1\r\ncav(x, j, d, yj )\r\nwhere cav(Xway, Seg, DOW, T OD) computes the ex\u0002pected toll from average vehicle speed and number of ve\u0002hicles for a given expressway, segment, day and time, using\r\nTable 2.\r\nSystems implementing Linear Road must maintain 10\r\nweeks worth of statistical data for each segment on the Lin\u0002ear Road expressways. The data that must be maintained\r\nfor each of the L × 200 segments includes a count of the\r\nnumber of vehicles in the segment and the Lav . Note that\r\n10 weeks of historical data at 1 minute granularity for ev\u0002ery segment requires maintaining 200 · L · 10 · 7 · 24 · 60\r\n(roughly between 20 million and 200 million) rows. The\r\nresponse time requirement for the travel time query is 30\r\nseconds.\r\n3.3 Running the Benchmark\r\nAside from this document, the Linear Road benchmark\r\nweb site [7] makes available four tools to assist researchers\r\nin the implementation of Linear Road:\r\n• A historical data generator that generates a set of flat\r\nfiles containing historical toll data summarizing tolling\r\nactivity over the 10 weeks prior to the simulation run,\r\n• A traffic simulator (based on MITSIMLab [12]) that\r\ngenerates a set of flat files containing streaming input\r\ndata for the benchmark,\r\n• A data driver that delivers the data generated by the\r\ntraffic simulator to a system in real-time, and\r\n• A validator that verifies the correctness of query re\u0002sults as well as ensuring that response-time require\u0002ments are met.\r\nThe purpose of the benchmark is to determine the L\u0002rating of a stream processing system: the maximum scale\r\nfactor at which the system can respond to the specified set\r\nof continuous and historical queries while meeting their re\u0002sponse time and accuracy requirements. It is assumed that\r\nthe benchmark will be run with increasingly larger scale\r\nfactors until one is found for which the requirements cannot\r\nbe met. Once the queries are formulated in a given system,\r\nthe benchmark is executed according to the steps below:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/f3d30217-eaac-4779-a57f-8ccecf2ced4e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=64d27277ad748ef4b9ca6c6af4152f77d2d6f06961c44342bfd7eb6c6d0c5ea3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 797
      },
      {
        "segments": [
          {
            "segment_id": "f3d30217-eaac-4779-a57f-8ccecf2ced4e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 9,
            "page_width": 612,
            "page_height": 792,
            "content": "Trigger Daily Expenditure request, d\r\nCondition -\r\nOutput (Type: 3, Time: t, Emit: t\r\n0\r\n, QID: q,\r\nBal:\r\nP\r\np ∈ tollset(v),\r\nDay(p.Time) = d,\r\np.XWay = x\r\n(f(p))) s.t.\r\nf(p) =\r\nToll (M(p . Time), p . XWay, p . Seg, p . Dir)))\r\nRecipients v\r\nResponse t\r\n0 − t ≤ 10 Sec\r\nTable 6. Daily Expenditure Requirements\r\nway on some day in the last 10 weeks (not including the\r\ncurrent day or any day which ended within 5 minutes of\r\nt). The requirements for daily expenditure historical queries\r\nare summarized in Table 6. A historical query to return an\r\naccount balance for a given vehicle is triggered by a request\r\ntuple d =\r\n(Type: 3, Time: t, VID: v, QID: q, XWay: x, Day: n).\r\nThe tuple output consists of the fields, Type = 3 (identify\u0002ing this tuple as a daily expenditure report), Time (specify\u0002ing the time that d was emitted), Emit (specifying the time\r\nthe query response is emitted), QID (identifying the query\r\nthat issued the request), and Bal which is the account bal\u0002ance calculated. The value of Bal is the sum of all tolls\r\nfrom expressway x on day n that were charged to the vehi\u0002cle’s account.\r\nTo be able to respond to daily expenditure queries, sys\u0002tems implementing Linear Road must maintain 10 weeks\r\nworth of toll data per vehicle and expressway. Given the\r\napproximately 150,000 vehicles generated in a 3 hour sim\u0002ulation, this amounts to 150, 000 · L · 70 (roughly between\r\n10 million and 100 million) rows.\r\nTravel Time Estimation Queries\r\nA historical query to return a time travel estimate is trig\u0002gered by a request tuple z =\r\n(Type: 4, Time: t, VID: v, QID: q,\r\nXWay: x, Sinit: i, Send: e,\r\nDOW: d, TOD: y)\r\n.\r\nIn response, the system responds with a tuple of the form,\r\n(Type : 4, QID : q, TravelTime : r1, Toll : r2)\r\nsuch that r1 and r2 are respectively, the predicted travel\r\ntime and toll charge for the vehicle journey calculated on\r\nthe basis of statistics maintained over the previous 10 weeks\r\nin the manner described below.\r\nLet z be a request for a travel time and toll charge es\u0002timate for a journey from segment i to segment e on ex\u0002pressway x starting on day d and time y. Now, let tj be the\r\nexpected arrival time at segment j (i ≤ j ≤ e). Then,\r\nyi = y, and\r\nyj+1 = yj + tav(x, j, d, tj ) (i < j ≤ e)\r\nwhere tav(Xway, Seg, DOW, T OD) computes the ex\u0002pected travel time from average vehicle speed for 10 weeks\r\nof data, for a given expressway, segment, day and time.\r\nThen, the expected travel time, r1 = ye and the expected\r\ntoll is\r\nr2 =\r\nXe−1\r\nj=1\r\ncav(x, j, d, yj )\r\nwhere cav(Xway, Seg, DOW, T OD) computes the ex\u0002pected toll from average vehicle speed and number of ve\u0002hicles for a given expressway, segment, day and time, using\r\nTable 2.\r\nSystems implementing Linear Road must maintain 10\r\nweeks worth of statistical data for each segment on the Lin\u0002ear Road expressways. The data that must be maintained\r\nfor each of the L × 200 segments includes a count of the\r\nnumber of vehicles in the segment and the Lav . Note that\r\n10 weeks of historical data at 1 minute granularity for ev\u0002ery segment requires maintaining 200 · L · 10 · 7 · 24 · 60\r\n(roughly between 20 million and 200 million) rows. The\r\nresponse time requirement for the travel time query is 30\r\nseconds.\r\n3.3 Running the Benchmark\r\nAside from this document, the Linear Road benchmark\r\nweb site [7] makes available four tools to assist researchers\r\nin the implementation of Linear Road:\r\n• A historical data generator that generates a set of flat\r\nfiles containing historical toll data summarizing tolling\r\nactivity over the 10 weeks prior to the simulation run,\r\n• A traffic simulator (based on MITSIMLab [12]) that\r\ngenerates a set of flat files containing streaming input\r\ndata for the benchmark,\r\n• A data driver that delivers the data generated by the\r\ntraffic simulator to a system in real-time, and\r\n• A validator that verifies the correctness of query re\u0002sults as well as ensuring that response-time require\u0002ments are met.\r\nThe purpose of the benchmark is to determine the L\u0002rating of a stream processing system: the maximum scale\r\nfactor at which the system can respond to the specified set\r\nof continuous and historical queries while meeting their re\u0002sponse time and accuracy requirements. It is assumed that\r\nthe benchmark will be run with increasingly larger scale\r\nfactors until one is found for which the requirements cannot\r\nbe met. Once the queries are formulated in a given system,\r\nthe benchmark is executed according to the steps below:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/f3d30217-eaac-4779-a57f-8ccecf2ced4e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=64d27277ad748ef4b9ca6c6af4152f77d2d6f06961c44342bfd7eb6c6d0c5ea3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 797
      },
      {
        "segments": [
          {
            "segment_id": "a2b3b704-1821-44a5-b331-c544bdb69bab",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 10,
            "page_width": 612,
            "page_height": 792,
            "content": "1. The historical data generator is run to generate flat\r\nfiles consisting of 10 weeks worth of historical data.\r\nOffline, this data can be loaded into the system’s stor\u0002age facility of choice.\r\n2. The traffic simulator is run to generate L flat files, each\r\nof which consists of 3 hours of traffic data and histori\u0002cal query requests from vehicles reporting from a sin\u0002gle expressway during rush hour. The data driver is\r\nthen invoked to deliver this data in a manner simulat\u0002ing its arrival in real-time.\r\n3. The system running the benchmark is configured to\r\ngenerate a flat file containing all output tuples (with\r\ntimestamps reflecting the times of their generation and\r\nthe times of the input tuples that triggered their gener\u0002ation) in response to the queries defined in the bench\u0002mark.\r\n4. The validation tool is used to check the response times\r\nand accuracy of generated output to see if they meet\r\nthe requirements of the benchmark.\r\nA system achieves an L-rating for the benchmark if it meets\r\nits response time and accuracy constraints while supporting\r\nL expressways worth of input.\r\nSystems implementing Linear Road must direct their\r\noutput into a single flat file. Validation involves compar\u0002ing the system’s output with that generated as a reference\r\nset by the validation tool for the given input. The valida\u0002tion tool will read output from the flat files generated by the\r\nstream system and check the results to see if they meet the\r\nresponse time and accuracy requirements described previ\u0002ously. It is expected that most systems will produce accurate\r\noutput, but will for some scale factor, be unable to continue\r\nmeeting the response time constraints. When reporting its\r\nL-rating, a system should also specify the hardware config\u0002uration over which it ran.\r\n4 Implementations & Experiments\r\nIn this section, we describe two implementations of the\r\nLinear Road benchmark and compare their relative perfor\u0002mance. The first implementation is over a pre-release com\u0002mercialization of Aurora [1] and is described in Section 4.1.\r\nThe second implementation is over a commercially avail\u0002able Relational Database (System X) and is described in\r\nSection 4.2. Both systems were run on the same 3 GHz\r\nPentium box with 2 GB RAM and running Linux. We com\u0002pare the performance of these two implementations in Sec\u0002tion 4.3 and show that a dedicated stream processing engine\r\ncan outperform a Relational Database for streaming data ap\u0002plications (as measured in their respective scale factors) by\r\na factor of 5.8\r\n8The Aurora system we use in the benchmark is still a pre-Beta version\r\nof the commercial product, and we anticipate that this improvement factor\r\nwill increase as the product matures.\r\nOf the queries included in the benchmark, the Travel\r\nTime Estimation query is by far the most complex and diffi\u0002cult to express. Neither of the benchmark implementations\r\ndescribed below supports this query and requests in the in\u0002put for this type of query are ignored.\r\n4.1 Linear Road in Aurora\r\nAurora uses a workflow-like boxes-and-arrows model\r\nfor constructing queries over stream data [2]. The Aurora\r\nimplementation of Linear Road consists of a query network\r\nof roughly 60 boxes and the following shared tables:\r\n• Vehicle Information: Including, for every vehicle, such\r\nthings as its last known location (expressway # + posi\u0002tion + direction) and its account balance,\r\n• Stopped Cars: Including all locations where cars are\r\nstopped and the cars involved,\r\n• Accidents: Including all segments in close proximity\r\nto an accident and the time of the accident,\r\n• Segment Statistics: Including for every segment of ev\u0002ery expressway, and for every minute in the last 5 min\u0002utes, and\r\n• Toll History: For every vehicle, expressway and day\r\nover the previous 10 weeks, the total tolls spent on the\r\nexpressway.\r\nHistorical query requests are each handled separately\r\nfrom position reports, and each require 1-2 boxes to read\r\nfrom the appropriate tables (Vehicle Information for the ac\u0002count balance query and Toll History for the daily expendi\u0002ture query) and process the results.\r\nPosition reports are processed by three consecutive sub\u0002networks of the query network:\r\n1. Subnetwork #1 is responsible for detecting and record\u0002ing when cars are stopped, and if for the ones that are,\r\nif they are in an accident. This subnetwork reads and\r\nwrites the Stopped Cars, Accidents and Vehicle Infor\u0002mation tables.\r\n2. Subnetwork #2 is responsible for maintaining statistics\r\nfor every segment of every expressway with 1 minute\r\ngranularity. This subnetwork reads from the Accidents\r\ntable and writes to the Segment Statistics table.\r\n3. Subnetwork #3 is responsible for calculating and emit\u0002ting tolls for those position reports that show a vehicle\r\nthat has crossed into a new segment, and for emitting\r\naccident alerts for those position reports that show that\r\nthe vehicle has entered a segment within 5 segments\r\nupstream of a recent accident. This subnetwork reads\r\nfrom the Segment Statistics table and emits results (toll\r\nnotifications and accident alerts) to an output stream.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/a2b3b704-1821-44a5-b331-c544bdb69bab.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=46ff6a66baeea0cdea91c8a0ccfcf01c0b7e2569a1c229bcc1bb376227e57b3e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 803
      },
      {
        "segments": [
          {
            "segment_id": "a2b3b704-1821-44a5-b331-c544bdb69bab",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 10,
            "page_width": 612,
            "page_height": 792,
            "content": "1. The historical data generator is run to generate flat\r\nfiles consisting of 10 weeks worth of historical data.\r\nOffline, this data can be loaded into the system’s stor\u0002age facility of choice.\r\n2. The traffic simulator is run to generate L flat files, each\r\nof which consists of 3 hours of traffic data and histori\u0002cal query requests from vehicles reporting from a sin\u0002gle expressway during rush hour. The data driver is\r\nthen invoked to deliver this data in a manner simulat\u0002ing its arrival in real-time.\r\n3. The system running the benchmark is configured to\r\ngenerate a flat file containing all output tuples (with\r\ntimestamps reflecting the times of their generation and\r\nthe times of the input tuples that triggered their gener\u0002ation) in response to the queries defined in the bench\u0002mark.\r\n4. The validation tool is used to check the response times\r\nand accuracy of generated output to see if they meet\r\nthe requirements of the benchmark.\r\nA system achieves an L-rating for the benchmark if it meets\r\nits response time and accuracy constraints while supporting\r\nL expressways worth of input.\r\nSystems implementing Linear Road must direct their\r\noutput into a single flat file. Validation involves compar\u0002ing the system’s output with that generated as a reference\r\nset by the validation tool for the given input. The valida\u0002tion tool will read output from the flat files generated by the\r\nstream system and check the results to see if they meet the\r\nresponse time and accuracy requirements described previ\u0002ously. It is expected that most systems will produce accurate\r\noutput, but will for some scale factor, be unable to continue\r\nmeeting the response time constraints. When reporting its\r\nL-rating, a system should also specify the hardware config\u0002uration over which it ran.\r\n4 Implementations & Experiments\r\nIn this section, we describe two implementations of the\r\nLinear Road benchmark and compare their relative perfor\u0002mance. The first implementation is over a pre-release com\u0002mercialization of Aurora [1] and is described in Section 4.1.\r\nThe second implementation is over a commercially avail\u0002able Relational Database (System X) and is described in\r\nSection 4.2. Both systems were run on the same 3 GHz\r\nPentium box with 2 GB RAM and running Linux. We com\u0002pare the performance of these two implementations in Sec\u0002tion 4.3 and show that a dedicated stream processing engine\r\ncan outperform a Relational Database for streaming data ap\u0002plications (as measured in their respective scale factors) by\r\na factor of 5.8\r\n8The Aurora system we use in the benchmark is still a pre-Beta version\r\nof the commercial product, and we anticipate that this improvement factor\r\nwill increase as the product matures.\r\nOf the queries included in the benchmark, the Travel\r\nTime Estimation query is by far the most complex and diffi\u0002cult to express. Neither of the benchmark implementations\r\ndescribed below supports this query and requests in the in\u0002put for this type of query are ignored.\r\n4.1 Linear Road in Aurora\r\nAurora uses a workflow-like boxes-and-arrows model\r\nfor constructing queries over stream data [2]. The Aurora\r\nimplementation of Linear Road consists of a query network\r\nof roughly 60 boxes and the following shared tables:\r\n• Vehicle Information: Including, for every vehicle, such\r\nthings as its last known location (expressway # + posi\u0002tion + direction) and its account balance,\r\n• Stopped Cars: Including all locations where cars are\r\nstopped and the cars involved,\r\n• Accidents: Including all segments in close proximity\r\nto an accident and the time of the accident,\r\n• Segment Statistics: Including for every segment of ev\u0002ery expressway, and for every minute in the last 5 min\u0002utes, and\r\n• Toll History: For every vehicle, expressway and day\r\nover the previous 10 weeks, the total tolls spent on the\r\nexpressway.\r\nHistorical query requests are each handled separately\r\nfrom position reports, and each require 1-2 boxes to read\r\nfrom the appropriate tables (Vehicle Information for the ac\u0002count balance query and Toll History for the daily expendi\u0002ture query) and process the results.\r\nPosition reports are processed by three consecutive sub\u0002networks of the query network:\r\n1. Subnetwork #1 is responsible for detecting and record\u0002ing when cars are stopped, and if for the ones that are,\r\nif they are in an accident. This subnetwork reads and\r\nwrites the Stopped Cars, Accidents and Vehicle Infor\u0002mation tables.\r\n2. Subnetwork #2 is responsible for maintaining statistics\r\nfor every segment of every expressway with 1 minute\r\ngranularity. This subnetwork reads from the Accidents\r\ntable and writes to the Segment Statistics table.\r\n3. Subnetwork #3 is responsible for calculating and emit\u0002ting tolls for those position reports that show a vehicle\r\nthat has crossed into a new segment, and for emitting\r\naccident alerts for those position reports that show that\r\nthe vehicle has entered a segment within 5 segments\r\nupstream of a recent accident. This subnetwork reads\r\nfrom the Segment Statistics table and emits results (toll\r\nnotifications and accident alerts) to an output stream.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/a2b3b704-1821-44a5-b331-c544bdb69bab.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=46ff6a66baeea0cdea91c8a0ccfcf01c0b7e2569a1c229bcc1bb376227e57b3e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 803
      },
      {
        "segments": [
          {
            "segment_id": "27d18024-0257-4e23-9993-b0b43b453994",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 11,
            "page_width": 612,
            "page_height": 792,
            "content": "The subnetworks listed above are connected in sequence.\r\nSynchronization primitives between them ensure that no\r\nposition report with timestamp t is processed by Subnet\u0002work #3 before all position reports with timestamps of t -\r\n1 minute or less have been processed by Subnetworks #1\r\nand #2. The box-at-a-time scheduler of Aurora [3] is con\u0002strained only by these primitives and the availability of in\u0002puts to boxes when deciding what boxes are eligible to be\r\nscheduled.\r\n4.2 Linear Road in System X\r\nWe built two implementations of Linear Road over Sys\u0002tem X. The first is a trigger-based implementation that uses\r\nthe built-in trigger facility of System X to process position\r\nreports and historical query requests as they arrive. The\r\nsecond is a polling-based implementation that uses a data\r\ndriver written in Perl to preload a dedicated relation with\r\na second’s worth of position reports every second and sub\u0002sequently invoke a System X stored procedure. For both\r\nimplementations, recovery logging was turned off. Because\r\nthe polling-based implementation allows for batch process\u0002ing of position reports, sensitivity analysis showed that it\r\nperformed much better than the trigger-based implementa\u0002tion and therefore, only the polling-based implementation\r\nis presented here.\r\nThe Linear Road implementation over System X has\r\nmuch the same structure as the Linear Road implementation\r\nover Aurora. A stored procedure of roughly 300 lines of\r\nqueries and accompanying code, this implementation also\r\nuses tables to store vehicle information, stopped cars, acci\u0002dents, segment statistics and toll history. As well, there is\r\nan additional table to hold all input tuples delivered by the\r\ndriver in the last second, and an additional table to receive\r\nthe output results.\r\nAs with Aurora, historical queries are handled separately\r\n(with simple SQL queries). Position reports follow the same\r\nsequence of processing as with Aurora: first detect acci\u0002dents; then generate statistics and calculate and emit toll\r\nand accident alerts. As much as possible, tuples are pro\u0002cessed in batch mode. For example, after the arrival of a\r\nminute’s worth of position reports, a query is run over these\r\nposition reports to determine all segment statistics for that\r\nminute.\r\n4.3 Results\r\nIn this section, we present experimental results from run\u0002ning the Aurora and System X implementations of Linear\r\nRoad with varying numbers of expressways.\r\n4.3.1 Scale Factor\r\nTable 7 shows the L-factors achieved by Aurora and System\r\nX running Linear Road. An expressway’s worth of input\r\ndata consists of roughly 12 million position reports, 60,000\r\nSystem X Aurora\r\n0.5 2.5\r\nTable 7. L-Ratings for Linear Road\r\naccount balance query requests and 12,000 daily expendi\u0002ture requests delivered in 3 hours. The corresponding out\u0002put consists of roughly 2 million toll alerts and 28,000 ac\u0002cident alerts (as well as one historical query output for each\r\nhistorical query request). Therefore, on average, the Sys\u0002tem X implementation processed roughly 560 input tuples\r\nper second (delivering an average throughput of 100 tuples\r\nper second) while meeting the response time requirements\r\nof Linear Road, while Aurora processed roughly 2800 input\r\ntuples per second (delivering an average throughput of 486\r\ntuples per second) for a factor of 5 performance gain.9\r\nTable 8 shows the maximum response times for toll no\u0002tifications for every run of System X and Aurora. For any\r\ngiven run, these numbers show the highest response time\r\nfor an output toll notification such that the response time\r\nfor any output q is equal to q.Emit − q.Time. Note that\r\nbecause timestamps are in the granularity of a second, the\r\nreported response times may be off by up to a second. That\r\nis, a response time of k calculated in this way indicates\r\nthat the actual response time is some time, t, such that\r\nk − 1 Sec < t < k + 1 Sec.\r\nOne can observe from this table that when either sys\u0002tem first fails to meet the benchmark requirements for some\r\nnumber of expressways, it fails substantially. Aurora suc\u0002ceeds with 2.5 expressways but has a worst-case response\r\ntime of roughly 3 minutes with 3 expressways. System\r\nX succeeds with 0.5 expressways but has a worst-case re\u0002sponse time of roughly 33 minutes for 1.0 expressway. The\r\ndegree to which a system fails depends on how early during\r\nthe 3 hour run the system first starts to fall behind (i.e., the\r\nfirst input that fails to meet the response time requirements).\r\nWhen this occurs, it must be the case that input tuples are\r\nbeing backed up on the input queue and soon it becomes the\r\ncase that response time requirements fail before processing\r\neven begins for these inputs. Aurora first fails with 3 ex\u0002pressways in processing an input position report with times\u0002tamp, 7931 (roughly 2.3 hours into the benchmark), and\r\ntherefore tuples are only accumulating in the input queue\r\nfor the last 40 min or so of the run. System X first fails with\r\n1 expressway in processing an input position report with\r\ntimestamp, 4761 (roughly 1.3 hours into the benchmark),\r\nand therefore tuples are accumulating in the input queue for\r\nthe last hour and 40 minutes of the run. Because System X\r\nfails earlier in its run, its worst-case response time is much\r\nhigher. Note that when run with 1.5 and 2 expressways,\r\nSystem X fails even sooner and with many more input tu\u0002ples idling in the input queues, and reports worst-case re\u0002sponse times of roughly 4.5 and 14.5 hours respectively.\r\n9Because System X was unable to meet the benchmark requirements\r\nfor 1 expressway, results were generated at the granularity of half of an\r\nexpressway.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/27d18024-0257-4e23-9993-b0b43b453994.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0ccb4e6c8e3880016e43bf2a145ce809f0bd41dd423848f862c0e075da5568f0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 905
      },
      {
        "segments": [
          {
            "segment_id": "27d18024-0257-4e23-9993-b0b43b453994",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 11,
            "page_width": 612,
            "page_height": 792,
            "content": "The subnetworks listed above are connected in sequence.\r\nSynchronization primitives between them ensure that no\r\nposition report with timestamp t is processed by Subnet\u0002work #3 before all position reports with timestamps of t -\r\n1 minute or less have been processed by Subnetworks #1\r\nand #2. The box-at-a-time scheduler of Aurora [3] is con\u0002strained only by these primitives and the availability of in\u0002puts to boxes when deciding what boxes are eligible to be\r\nscheduled.\r\n4.2 Linear Road in System X\r\nWe built two implementations of Linear Road over Sys\u0002tem X. The first is a trigger-based implementation that uses\r\nthe built-in trigger facility of System X to process position\r\nreports and historical query requests as they arrive. The\r\nsecond is a polling-based implementation that uses a data\r\ndriver written in Perl to preload a dedicated relation with\r\na second’s worth of position reports every second and sub\u0002sequently invoke a System X stored procedure. For both\r\nimplementations, recovery logging was turned off. Because\r\nthe polling-based implementation allows for batch process\u0002ing of position reports, sensitivity analysis showed that it\r\nperformed much better than the trigger-based implementa\u0002tion and therefore, only the polling-based implementation\r\nis presented here.\r\nThe Linear Road implementation over System X has\r\nmuch the same structure as the Linear Road implementation\r\nover Aurora. A stored procedure of roughly 300 lines of\r\nqueries and accompanying code, this implementation also\r\nuses tables to store vehicle information, stopped cars, acci\u0002dents, segment statistics and toll history. As well, there is\r\nan additional table to hold all input tuples delivered by the\r\ndriver in the last second, and an additional table to receive\r\nthe output results.\r\nAs with Aurora, historical queries are handled separately\r\n(with simple SQL queries). Position reports follow the same\r\nsequence of processing as with Aurora: first detect acci\u0002dents; then generate statistics and calculate and emit toll\r\nand accident alerts. As much as possible, tuples are pro\u0002cessed in batch mode. For example, after the arrival of a\r\nminute’s worth of position reports, a query is run over these\r\nposition reports to determine all segment statistics for that\r\nminute.\r\n4.3 Results\r\nIn this section, we present experimental results from run\u0002ning the Aurora and System X implementations of Linear\r\nRoad with varying numbers of expressways.\r\n4.3.1 Scale Factor\r\nTable 7 shows the L-factors achieved by Aurora and System\r\nX running Linear Road. An expressway’s worth of input\r\ndata consists of roughly 12 million position reports, 60,000\r\nSystem X Aurora\r\n0.5 2.5\r\nTable 7. L-Ratings for Linear Road\r\naccount balance query requests and 12,000 daily expendi\u0002ture requests delivered in 3 hours. The corresponding out\u0002put consists of roughly 2 million toll alerts and 28,000 ac\u0002cident alerts (as well as one historical query output for each\r\nhistorical query request). Therefore, on average, the Sys\u0002tem X implementation processed roughly 560 input tuples\r\nper second (delivering an average throughput of 100 tuples\r\nper second) while meeting the response time requirements\r\nof Linear Road, while Aurora processed roughly 2800 input\r\ntuples per second (delivering an average throughput of 486\r\ntuples per second) for a factor of 5 performance gain.9\r\nTable 8 shows the maximum response times for toll no\u0002tifications for every run of System X and Aurora. For any\r\ngiven run, these numbers show the highest response time\r\nfor an output toll notification such that the response time\r\nfor any output q is equal to q.Emit − q.Time. Note that\r\nbecause timestamps are in the granularity of a second, the\r\nreported response times may be off by up to a second. That\r\nis, a response time of k calculated in this way indicates\r\nthat the actual response time is some time, t, such that\r\nk − 1 Sec < t < k + 1 Sec.\r\nOne can observe from this table that when either sys\u0002tem first fails to meet the benchmark requirements for some\r\nnumber of expressways, it fails substantially. Aurora suc\u0002ceeds with 2.5 expressways but has a worst-case response\r\ntime of roughly 3 minutes with 3 expressways. System\r\nX succeeds with 0.5 expressways but has a worst-case re\u0002sponse time of roughly 33 minutes for 1.0 expressway. The\r\ndegree to which a system fails depends on how early during\r\nthe 3 hour run the system first starts to fall behind (i.e., the\r\nfirst input that fails to meet the response time requirements).\r\nWhen this occurs, it must be the case that input tuples are\r\nbeing backed up on the input queue and soon it becomes the\r\ncase that response time requirements fail before processing\r\neven begins for these inputs. Aurora first fails with 3 ex\u0002pressways in processing an input position report with times\u0002tamp, 7931 (roughly 2.3 hours into the benchmark), and\r\ntherefore tuples are only accumulating in the input queue\r\nfor the last 40 min or so of the run. System X first fails with\r\n1 expressway in processing an input position report with\r\ntimestamp, 4761 (roughly 1.3 hours into the benchmark),\r\nand therefore tuples are accumulating in the input queue for\r\nthe last hour and 40 minutes of the run. Because System X\r\nfails earlier in its run, its worst-case response time is much\r\nhigher. Note that when run with 1.5 and 2 expressways,\r\nSystem X fails even sooner and with many more input tu\u0002ples idling in the input queues, and reports worst-case re\u0002sponse times of roughly 4.5 and 14.5 hours respectively.\r\n9Because System X was unable to meet the benchmark requirements\r\nfor 1 expressway, results were generated at the granularity of half of an\r\nexpressway.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/27d18024-0257-4e23-9993-b0b43b453994.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0ccb4e6c8e3880016e43bf2a145ce809f0bd41dd423848f862c0e075da5568f0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 905
      },
      {
        "segments": [
          {
            "segment_id": "a5e16609-11de-4a0a-b8da-62427318f1a3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 12,
            "page_width": 612,
            "page_height": 792,
            "content": "XWays System X Aurora\r\n0.5 3 1\r\n1.0 2031 1\r\n1.5 16346 1\r\n2.0 52443 2\r\n2.5 - 2\r\n3.0 - 196\r\nTable 8. Max Response Times for Tolls (Sec)\r\n4.3.2 Discussion\r\nOur results suggest that a dedicated SDMS can outperform\r\na Relational Database system in processing stream data by\r\nat least a factor of 5. If the response time requirements\r\nwere made more strict (e.g., 3 seconds for toll alerts rather\r\nthan 5 seconds), then Aurora still meets the requirements\r\nfor 2.5 expressways, but System X may then fail to meet\r\nthe response time requirements for 0.5 expressways. Un\u0002fortunately, the 1 second granularity of timestamps we used\r\nstopped us from confirming this result in time for the pa\u0002per deadline, and thus only the factor of 5 improvement is\r\nknown with certainty.\r\nThe purpose of this benchmark is to stimulate creative\r\nthought on how to meet the challenges of large scale stream\u0002ing data applications. To this end, the goal of our ini\u0002tial experiments described above, was to see how a stream\r\ndata management system that was architected for exactly\r\nthese kinds of applications, would compare to a relational\r\ndatabase system that was configured to process queries in\r\nresponse to pushed data. Our numbers suggest that a dedi\u0002cated SDMS is far better suited for stream data applications\r\nthan a relational database. We readily acknowledge that our\r\nimplementation of Linear Road in a Relational Database\r\nmay not be optimal, and so we invite others to implement\r\nthis benchmark and report their numbers.\r\n5 Conclusions\r\nThis paper presents Linear Road: a benchmark and ac\u0002companying toolkit for comparing the capabilities of sys\u0002tems that perform stream data management. Linear Road is\r\ninspired by the increasing prevalence of “variable tolling”\r\nin highways systems throughout the world. Based on a fic\u0002tional urban area with a simple geometry, Linear Road sim\u0002ulates a traffic monitoring system that maintains current and\r\nhistorical statistics over each 1 mile segment of each ex\u0002pressway, detects and alerts drivers of accidents, calculates\r\ntolls based on segment statistics, accidents and frequency\r\nof use, and supports historical queries that report account\r\nbalances, daily expenditures and predicted travel times and\r\ntolls.\r\nAfter outlining the challenges in formulating a stream\r\ndata benchmark in Section 2 and describing the benchmark\r\nitself in Section 3, we described two implementations of\r\nLinear Road: one using a commercially available Relational\r\nDatabase system (“System X”), and the other using a pre\u0002release commercialization of Aurora. Our experimental re\u0002sults showed that Aurora has an L-factor of 2.5, whereas\r\nSystem X has an L-factor of 0.5, thus showing a factor of 5\r\nperformance gain resulting from using a dedicated Stream\r\nData Management System to process stream data. In fact,\r\nthe performance gain is likely higher than this, but time con\u0002straints before the paper deadline did not allow us to refine\r\nour time precision to establish this for certain.\r\nBeyond serving as a basis for comparison, the purpose of\r\nthis benchmark is to stimulate creative thought in the design\r\nof Stream Data Management Systems. We invite others to\r\nrun the benchmark on their own systems and contribute to\r\nthis discussion.\r\nReferences\r\n[1] D. Abadi, D. Carney, U. Cetintemel, M. Cherniack, C. Convey,\r\nS. Lee, M. Stonebraker, N. Tatbul, and S. Zdonik. Aurora: A new\r\nmodel and architecture for data stream management. VLDB Journal,\r\n12(3), August 2003.\r\n[2] D. Carney, U. Cetintemel, M. Cherniack, C. Convey, S. Lee, G. Sei\u0002dman, M. Stonebraker, N. Tatbul, and S. B. Zdonik. Monitoring\r\nStreams - A New Class of Data Management Applications. In Pro\u0002ceedings of 28th International Conference on Very Large Data Bases\r\n(VLDB ’02), pages 215–226, Hong Kong, China, August 2002.\r\n[3] D. Carney, U. Cetintemel, A. Rasin, S. B. Zdonik, M. Cherniack,\r\nand M. Stonebraker. Operator Scheduling in a Data Stream Man\u0002ager. In Proceedings of 29th International Conference on Very Large\r\nData Bases (VLDB ’03), pages 838–849, Berlin, Germany, Septem\u0002ber 2003.\r\n[4] S. Chandrasekaran, O. Cooper, A. Deshpande, M. J. Franklin, J. M.\r\nHellerstein, W. Hong, S. Krishnamurthy, S. R. Madden, V. Raman,\r\nF. Reiss, and M. A. Shah. Telegraphcq: Continuous dataflow pro\u0002cessing for an uncertain world. In M. Stonebraker, J. Gray, and\r\nD. DeWitt, editors, Proceedings of the 1st Biennial Conference on\r\nInnovative Database Research (CIDR), Asilomar, CA, January 2003.\r\n[5] J. Chen, D. J. DeWitt, F. Tian, and Y. Wang. NiagaraCQ: A scal\u0002able continuous query system for internet databases. In J. N. Wei\u0002dong Chen and P. Bernstein, editors, Proceedings of the Special In\u0002terest Group on Management of Data (SIGMOD), Dallas, Tx, June\r\n2000.\r\n[6] Conjestion Pricing: A Report From Intelligent\r\nTransportation Systems (ITS, May 2002. URL:\r\nwww.path.berkeley.edu/ leap/TTM/Demand Manage/pricing.html.\r\n[7] The Linear Road Benchmark Website, 2004. URL:\r\nhttp://www.cs.brandeis.edu/linearroad/.\r\n[8] R. Motwani, J. Widom, A. Arasu, B. Babcock, S. Babu, M. Datar,\r\nG. Manku, C. Olsten, J. Rosenstein, and R. Varma. Query process\u0002ing, resource management, and approximation in a data stream man\u0002agement system. In M. Stonebraker, J. Gray, and D. DeWitt, editors,\r\nProceedings of the 1st Biennial Conference on Innovative Database\r\nResearch (CIDR), Asilomar, CA, January 2003.\r\n[9] R. W. Poole. HOT Lanes Prompted by Federal Program, November\r\n2002. URL: http://www.rppi.org/federalhotlanes.html.\r\n[10] STREAM project page for Linear Road Benchmark, 2004. URL:\r\nhttp://www-db.stanford.edu/stream/cql-benchmark.html.\r\n[11] A Guide for Hot Lane Development: A U.S. De\u0002partment of Transportation Federal Highway Ad\u0002ministration White Paper. , March 2003. URL:\r\nwww.itsdocs.fhwa.dot.gov/JPODOCS/REPTS TE/13668.html.\r\n[12] Q. Yang and H. N. Koutsopoulos. A Microscopic Traffic Simulator\r\nFor Evaluation of Dynamic Traffic Management Systems. Trans\u0002portation Research C, 4(3):113–129, June 1996.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/a5e16609-11de-4a0a-b8da-62427318f1a3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=51918512729be8d037730304b5d6adbe35181161766d85ba1bdb2faeee4eb9d9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 900
      },
      {
        "segments": [
          {
            "segment_id": "a5e16609-11de-4a0a-b8da-62427318f1a3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 12,
            "page_width": 612,
            "page_height": 792,
            "content": "XWays System X Aurora\r\n0.5 3 1\r\n1.0 2031 1\r\n1.5 16346 1\r\n2.0 52443 2\r\n2.5 - 2\r\n3.0 - 196\r\nTable 8. Max Response Times for Tolls (Sec)\r\n4.3.2 Discussion\r\nOur results suggest that a dedicated SDMS can outperform\r\na Relational Database system in processing stream data by\r\nat least a factor of 5. If the response time requirements\r\nwere made more strict (e.g., 3 seconds for toll alerts rather\r\nthan 5 seconds), then Aurora still meets the requirements\r\nfor 2.5 expressways, but System X may then fail to meet\r\nthe response time requirements for 0.5 expressways. Un\u0002fortunately, the 1 second granularity of timestamps we used\r\nstopped us from confirming this result in time for the pa\u0002per deadline, and thus only the factor of 5 improvement is\r\nknown with certainty.\r\nThe purpose of this benchmark is to stimulate creative\r\nthought on how to meet the challenges of large scale stream\u0002ing data applications. To this end, the goal of our ini\u0002tial experiments described above, was to see how a stream\r\ndata management system that was architected for exactly\r\nthese kinds of applications, would compare to a relational\r\ndatabase system that was configured to process queries in\r\nresponse to pushed data. Our numbers suggest that a dedi\u0002cated SDMS is far better suited for stream data applications\r\nthan a relational database. We readily acknowledge that our\r\nimplementation of Linear Road in a Relational Database\r\nmay not be optimal, and so we invite others to implement\r\nthis benchmark and report their numbers.\r\n5 Conclusions\r\nThis paper presents Linear Road: a benchmark and ac\u0002companying toolkit for comparing the capabilities of sys\u0002tems that perform stream data management. Linear Road is\r\ninspired by the increasing prevalence of “variable tolling”\r\nin highways systems throughout the world. Based on a fic\u0002tional urban area with a simple geometry, Linear Road sim\u0002ulates a traffic monitoring system that maintains current and\r\nhistorical statistics over each 1 mile segment of each ex\u0002pressway, detects and alerts drivers of accidents, calculates\r\ntolls based on segment statistics, accidents and frequency\r\nof use, and supports historical queries that report account\r\nbalances, daily expenditures and predicted travel times and\r\ntolls.\r\nAfter outlining the challenges in formulating a stream\r\ndata benchmark in Section 2 and describing the benchmark\r\nitself in Section 3, we described two implementations of\r\nLinear Road: one using a commercially available Relational\r\nDatabase system (“System X”), and the other using a pre\u0002release commercialization of Aurora. Our experimental re\u0002sults showed that Aurora has an L-factor of 2.5, whereas\r\nSystem X has an L-factor of 0.5, thus showing a factor of 5\r\nperformance gain resulting from using a dedicated Stream\r\nData Management System to process stream data. In fact,\r\nthe performance gain is likely higher than this, but time con\u0002straints before the paper deadline did not allow us to refine\r\nour time precision to establish this for certain.\r\nBeyond serving as a basis for comparison, the purpose of\r\nthis benchmark is to stimulate creative thought in the design\r\nof Stream Data Management Systems. We invite others to\r\nrun the benchmark on their own systems and contribute to\r\nthis discussion.\r\nReferences\r\n[1] D. Abadi, D. Carney, U. Cetintemel, M. Cherniack, C. Convey,\r\nS. Lee, M. Stonebraker, N. Tatbul, and S. Zdonik. Aurora: A new\r\nmodel and architecture for data stream management. VLDB Journal,\r\n12(3), August 2003.\r\n[2] D. Carney, U. Cetintemel, M. Cherniack, C. Convey, S. Lee, G. Sei\u0002dman, M. Stonebraker, N. Tatbul, and S. B. Zdonik. Monitoring\r\nStreams - A New Class of Data Management Applications. In Pro\u0002ceedings of 28th International Conference on Very Large Data Bases\r\n(VLDB ’02), pages 215–226, Hong Kong, China, August 2002.\r\n[3] D. Carney, U. Cetintemel, A. Rasin, S. B. Zdonik, M. Cherniack,\r\nand M. Stonebraker. Operator Scheduling in a Data Stream Man\u0002ager. In Proceedings of 29th International Conference on Very Large\r\nData Bases (VLDB ’03), pages 838–849, Berlin, Germany, Septem\u0002ber 2003.\r\n[4] S. Chandrasekaran, O. Cooper, A. Deshpande, M. J. Franklin, J. M.\r\nHellerstein, W. Hong, S. Krishnamurthy, S. R. Madden, V. Raman,\r\nF. Reiss, and M. A. Shah. Telegraphcq: Continuous dataflow pro\u0002cessing for an uncertain world. In M. Stonebraker, J. Gray, and\r\nD. DeWitt, editors, Proceedings of the 1st Biennial Conference on\r\nInnovative Database Research (CIDR), Asilomar, CA, January 2003.\r\n[5] J. Chen, D. J. DeWitt, F. Tian, and Y. Wang. NiagaraCQ: A scal\u0002able continuous query system for internet databases. In J. N. Wei\u0002dong Chen and P. Bernstein, editors, Proceedings of the Special In\u0002terest Group on Management of Data (SIGMOD), Dallas, Tx, June\r\n2000.\r\n[6] Conjestion Pricing: A Report From Intelligent\r\nTransportation Systems (ITS, May 2002. URL:\r\nwww.path.berkeley.edu/ leap/TTM/Demand Manage/pricing.html.\r\n[7] The Linear Road Benchmark Website, 2004. URL:\r\nhttp://www.cs.brandeis.edu/linearroad/.\r\n[8] R. Motwani, J. Widom, A. Arasu, B. Babcock, S. Babu, M. Datar,\r\nG. Manku, C. Olsten, J. Rosenstein, and R. Varma. Query process\u0002ing, resource management, and approximation in a data stream man\u0002agement system. In M. Stonebraker, J. Gray, and D. DeWitt, editors,\r\nProceedings of the 1st Biennial Conference on Innovative Database\r\nResearch (CIDR), Asilomar, CA, January 2003.\r\n[9] R. W. Poole. HOT Lanes Prompted by Federal Program, November\r\n2002. URL: http://www.rppi.org/federalhotlanes.html.\r\n[10] STREAM project page for Linear Road Benchmark, 2004. URL:\r\nhttp://www-db.stanford.edu/stream/cql-benchmark.html.\r\n[11] A Guide for Hot Lane Development: A U.S. De\u0002partment of Transportation Federal Highway Ad\u0002ministration White Paper. , March 2003. URL:\r\nwww.itsdocs.fhwa.dot.gov/JPODOCS/REPTS TE/13668.html.\r\n[12] Q. Yang and H. N. Koutsopoulos. A Microscopic Traffic Simulator\r\nFor Evaluation of Dynamic Traffic Management Systems. Trans\u0002portation Research C, 4(3):113–129, June 1996.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4e20fb55-429d-46a0-84cb-07119d5fb65e/images/a5e16609-11de-4a0a-b8da-62427318f1a3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041233Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=51918512729be8d037730304b5d6adbe35181161766d85ba1bdb2faeee4eb9d9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 900
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "```json\n{\"title\": \"Linear Road: A Stream Data Management Benchmark\"}\n```"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Arvind Arasu, Mitch Cherniack, Eduardo Galvez, David Maier, Anurag S. Maskey, Esther Ryvkina, Michael Stonebraker, Richard Tibbetts\n"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "```json\n{\"Field Name\": \"date_published\",\n\"Field Description\": \"The publication date of the document\",\n\"Field Type\": \"string\",\n\"Field Value\": \"2004\"}\n```"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "```json\n{\"location\": \"expressway\"}\n```"
        }
      ]
    }
  }
}