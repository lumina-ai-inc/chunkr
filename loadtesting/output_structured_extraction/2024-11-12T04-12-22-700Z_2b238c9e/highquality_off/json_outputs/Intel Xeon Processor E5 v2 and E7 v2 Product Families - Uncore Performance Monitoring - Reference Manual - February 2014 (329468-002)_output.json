{
  "file_name": "Intel Xeon Processor E5 v2 and E7 v2 Product Families - Uncore Performance Monitoring - Reference Manual - February 2014 (329468-002).pdf",
  "task_id": "5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "bc18c6dd-12ba-44ee-b67a-642d9f7d25ac",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 1,
            "page_width": 612,
            "page_height": 792,
            "content": "Intel® Xeon® Processor E5 v2 and E7 v2\r\nProduct Families Uncore Performance\r\nMonitoring Reference Manual\r\nReference Number: 329468-002\r\nFebruary 2014",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/bc18c6dd-12ba-44ee-b67a-642d9f7d25ac.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cda5007ca265d90c492bd63d1243136c3f77d7c4b8ff0a6c1f845985032ea619",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "968475b9-611c-49c9-98e6-2748698a7803",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 2,
            "page_width": 612,
            "page_height": 792,
            "content": "2 Reference Number: 329468-002\r\nINFORMATION IN THIS DOCUMENT IS PROVIDED IN CONNECTION WITH INTEL PRODUCTS. NO LICENSE, EXPRESS OR IMPLIED,\r\nBY ESTOPPEL OR OTHERWISE, TO ANY INTELLECTUAL PROPERTY RIGHTS IS GRANTED BY THIS DOCUMENT. EXCEPT AS PROVID\u0002ED IN INTEL'S TERMS AND CONDITIONS OF SALE FOR SUCH PRODUCTS, INTEL ASSUMES NO LIABILITY WHATSOEVER AND INTEL\r\nDISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY, RELATING TO SALE AND/OR USE OF INTEL PRODUCTS INCLUDING LIABILITY\r\nOR WARRANTIES RELATING TO FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR INFRINGEMENT OF ANY PATENT,\r\nCOPYRIGHT OR OTHER INTELLECTUAL PROPERTY RIGHT. \r\nA “Mission Critical Application” is any application in which failure of the Intel Product could result, directly or indirectly, in personal\r\ninjury or death. SHOULD YOU PURCHASE OR USE INTEL'S PRODUCTS FOR ANY SUCH MISSION CRITICAL APPLICATION, YOU\r\nSHALL INDEMNIFY AND HOLD INTEL AND ITS SUBSIDIARIES, SUBCONTRACTORS AND AFFILIATES, AND THE DIRECTORS, OFFI\u0002CERS, AND EMPLOYEES OF EACH, HARMLESS AGAINST ALL CLAIMS COSTS, DAMAGES, AND EXPENSES AND REASONABLE AT\u0002TORNEYS' FEES ARISING OUT OF, DIRECTLY OR INDIRECTLY, ANY CLAIM OF PRODUCT LIABILITY, PERSONAL INJURY, OR DEATH\r\nARISING IN ANY WAY OUT OF SUCH MISSION CRITICAL APPLICATION, WHETHER OR NOT INTEL OR ITS SUBCONTRACTOR WAS\r\nNEGLIGENT IN THE DESIGN, MANUFACTURE, OR WARNING OF THE INTEL PRODUCT OR ANY OF ITS PARTS. \r\nIntel may make changes to specifications and product descriptions at any time, without notice. Designers must not rely on the\r\nabsence or characteristics of any features or instructions marked “reserved” or “undefined”. Intel reserves these for future defi\u0002nition and shall have no responsibility whatsoever for conflicts or incompatibilities arising from future changes to them. The infor\u0002mation here is subject to change without notice. Do not finalize a design with this information. \r\nThe products described in this document may contain design defects or errors known as errata which may cause the product to\r\ndeviate from published specifications. Current characterized errata are available on request. \r\nIntel® 64 architecture requires a system with a 64-bit enabled processor, chipset, BIOS and software. Performance will vary de\u0002pending on the specific hardware and software you use. Consult your PC manufacturer for more information. For more information,\r\nvisit http://www.intel.com/info/em64t.\r\nContact your local Intel sales office or your distributor to obtain the latest specifications and before placing your product order.\r\nCopies of documents which have an order number and are referenced in this document, or other Intel literature, may be obtained\r\nby calling 1-800-548-4725, or go to: http://www.intel.com/design/literature.htm\r\nIntel, the Intel logo and Xeon are trademarks of Intel Corporation in the U.S. and/or other countries.\r\n*Other names and brands may be claimed as the property of others.\r\nCopyright © 1997-2014 Intel Corporation. All rights reserved. Intel Corporation",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/968475b9-611c-49c9-98e6-2748698a7803.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=79a81f764bf036e753d7c45acfd7171e408a22344b2a74db139e93c4da0ebbca",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 458
      },
      {
        "segments": [
          {
            "segment_id": "e8f96e79-3ca4-4434-96d9-7de0fe12aa93",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 3,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 3\r\nContents\r\n1 Introduction ..............................................................................................................5\r\n1.1 Introduction .......................................................................................................5\r\n1.2 Uncore PMON Overview........................................................................................7\r\n1.3 Section References ..............................................................................................8\r\n1.4 Uncore PMON - Typical Control/Counter Logic .........................................................9\r\n1.5 Uncore PMU Summary Tables ............................................................................. 10\r\n1.6 On Parsing and Using Derived Events ................................................................... 13\r\n1.6.1 On Common Terms found in Derived Events .............................................. 14\r\n2 Uncore Performance Monitoring .............................................................................. 15\r\n2.1 Uncore Per-Socket Performance Monitoring Control................................................ 15\r\n2.1.1 Counter Overflow ................................................................................... 15\r\n2.1.1.1 Freezing on Counter Overflow..................................................... 15\r\n2.1.1.2 PMI on Counter Overflow ........................................................... 15\r\n2.1.2 Setting up a Monitoring Session ............................................................... 15\r\n2.1.3 Reading the Sample Interval.................................................................... 17\r\n2.1.4 Enabling a New Sample Interval from Frozen Counters ................................ 18\r\n2.1.5 Global Performance Monitors ................................................................... 18\r\n2.1.5.1 Global PMON Global Control/Status Registers................................ 18\r\n2.2 UBox Performance Monitoring ............................................................................. 20\r\n2.2.1 Overview of the UBox ............................................................................. 20\r\n2.2.2 UBox Performance Monitoring Overview .................................................... 21\r\n2.2.2.1 UBox PMON Registers - On Overflow and the Consequences \r\n(PMI/Freeze) ............................................................................ 21\r\n2.2.3 UBox Performance Monitors ..................................................................... 21\r\n2.2.3.1 UBox Box Level PMON State ....................................................... 22\r\n2.2.3.2 UBox PMON state - Counter/Control Pairs..................................... 22\r\n2.2.4 UBOX Box Events Ordered By Code .......................................................... 24\r\n2.2.5 UBOX Box Performance Monitor Event List ................................................. 24\r\n2.3 Cacheing Agent (Cbo) Performance Monitoring ...................................................... 25\r\n2.3.1 Overview of the CBo ............................................................................... 25\r\n2.3.2 CBo Performance Monitoring Overview ...................................................... 26\r\n2.3.2.1 Special Note on CBo Occupancy Events........................................ 26\r\n2.3.3 CBo Performance Monitors....................................................................... 26\r\n2.3.3.1 CBo Box Level PMON State......................................................... 32\r\n2.3.3.2 UCBo PMON state - Counter/Control Pairs .................................... 33\r\n2.3.3.3 CBo Filter Registers (Cn_MSR_PMON_BOX_FILTER{0,1}) ............... 34\r\n2.3.4 CBo Performance Monitoring Events.......................................................... 36\r\n2.3.4.1 An Overview: ........................................................................... 36\r\n2.3.4.2 Acronyms frequently used in CBo Events: .................................... 37\r\n2.3.4.3 The Queues: ............................................................................ 37\r\n2.3.5 CBO Box Events Ordered By Code ............................................................ 37\r\n2.3.6 CBO Box Common Metrics (Derived Events) ............................................... 38\r\n2.3.7 CBO Box Performance Monitor Event List ................................................... 40\r\n2.4 Home Agent (HA) Performance Monitoring ............................................................ 54\r\n2.4.1 Overview of the Home Agent ................................................................... 54\r\n2.4.2 HA Performance Monitoring Overview........................................................ 54\r\n2.4.2.1 HA PMON Registers - On Overflow and the Consequences \r\n(PMI/Freeze) ............................................................................ 55\r\n2.4.2.2 HA Performance Monitors........................................................... 55\r\n2.4.2.3 HA Box Level PMON State .......................................................... 55\r\n2.4.2.4 HA PMON state - Counter/Control Pairs ........................................ 56\r\n2.4.3 HA Performance Monitoring Events ........................................................... 58\r\n2.4.3.1 On the Major HA Structures: ...................................................... 59",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/e8f96e79-3ca4-4434-96d9-7de0fe12aa93.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e5b717c868d95a3901cb1dfae52669cfcb24d28298dfad27c4b8db05ca3ea0c1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 377
      },
      {
        "segments": [
          {
            "segment_id": "8f068848-a715-4249-a573-4153328fbd34",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 4,
            "page_width": 612,
            "page_height": 792,
            "content": "4 Reference Number: 329468-002\r\n2.4.4 HA Box Events Ordered By Code ...............................................................59\r\n2.4.5 HA Box Common Metrics (Derived Events) .................................................60\r\n2.4.6 HA Box Performance Monitor Event List .....................................................60\r\n2.5 Memory Controller (iMC) Performance Monitoring ...................................................76\r\n2.5.1 Overview of the iMC ................................................................................76\r\n2.5.2 Functional Overview ................................................................................76\r\n2.5.3 iMC Performance Monitoring Overview .......................................................77\r\n2.5.3.1 iMC PMON Registers - On Overflow and the Consequences \r\n(PMI/Freeze) ............................................................................77\r\n2.5.4 iMC Performance Monitors........................................................................78\r\n2.5.4.1 MC Box Level PMON State ..........................................................78\r\n2.5.4.2 MC PMON state - Counter/Control Pairs ........................................79\r\n2.5.5 iMC Performance Monitoring Events...........................................................81\r\n2.5.5.1 An Overview:............................................................................81\r\n2.5.6 iMC Box Events Ordered By Code ..............................................................81\r\n2.5.7 iMC Box Common Metrics (Derived Events) ................................................83\r\n2.5.8 iMC Box Performance Monitor Event List ....................................................84\r\n2.6 IRP Performance Monitoring ................................................................................99\r\n2.6.1 Overview of the R2PCIe Box.....................................................................99\r\n2.6.2 IRP Performance Monitoring Overview .......................................................99\r\n2.6.3 IRP Performance Monitors ........................................................................99\r\n2.6.3.1 IRP Box Level PMON State ........................................................ 100\r\n2.6.3.2 IRP PMON state - Counter/Control Pairs...................................... 100\r\n2.6.4 IRP Performance Monitoring Events ......................................................... 101\r\n2.6.4.1 An Overview ........................................................................... 101\r\n2.6.5 IRP Box Events Ordered By Code ............................................................ 101\r\n2.6.6 IRP Box Performance Monitor Event List................................................... 102\r\n2.7 Power Control (PCU) Performance Monitoring ...................................................... 109\r\n2.7.1 Overview of the PCU ............................................................................. 109\r\n2.7.2 PCU Performance Monitoring Overview .................................................... 109\r\n2.7.2.1 PCU PMON Registers - On Overflow and the Consequences \r\n(PMI/Freeze) .......................................................................... 110\r\n2.7.3 PCU Performance Monitors ..................................................................... 110\r\n2.7.3.1 PCU Box Level PMON State ....................................................... 111\r\n2.7.3.2 PCU PMON state - Counter/Control Pairs..................................... 111\r\n2.7.4 PCU Performance Monitoring Events ........................................................ 114\r\n2.7.4.1 An Overview:.......................................................................... 114\r\n2.7.5 PCU Box Events Ordered By Code ........................................................... 115\r\n2.7.6 PCU Box Common Metrics (Derived Events).............................................. 117\r\n2.7.7 PCU Box Performance Monitor Event List.................................................. 118\r\n2.8 Intel® QPI Link Layer Performance Monitoring..................................................... 131\r\n2.8.1 Overview of the Intel® QPI Box.............................................................. 131\r\n2.8.2 Intel® QPI Performance Monitoring Overview ........................................... 131\r\n2.8.2.1 QPI PMON Registers - On Overflow and the Consequences \r\n(PMI/Freeze) .......................................................................... 131\r\n2.8.3 Intel® QPI Performance Monitors............................................................ 132\r\n2.8.3.1 Intel® QPI Box Level PMON State ............................................. 133\r\n2.8.3.2 Intel® QPI PMON state - Counter/Control Pairs ........................... 133\r\n2.8.3.3 Intel® QPI Registers for Packet Mask/Match Facility..................... 134\r\n2.8.3.4 Intel® QPI Extra Registers - Companions to PMON HW................. 138\r\n2.8.4 Intel® QPI LL Performance Monitoring Events........................................... 139\r\n2.8.4.1 An Overview ........................................................................... 139\r\n2.8.5 QPI LL Box Events Ordered By Code ........................................................ 139\r\n2.8.6 QPI LL Box Common Metrics (Derived Events) .......................................... 141\r\n2.8.7 QPI LL Box Performance Monitor Event List .............................................. 143\r\n2.9 R2PCIe Performance Monitoring ......................................................................... 163\r\n2.9.1 Overview of the R2PCIe Box................................................................... 163",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/8f068848-a715-4249-a573-4153328fbd34.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e04007eb4bec64a14848ec9769666d741c41eb4defea23aa253a22ff4fb55c06",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 412
      },
      {
        "segments": [
          {
            "segment_id": "f2494bad-75d0-4911-9b46-fd60e46c8b60",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 5,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 5\r\n2.9.2 R2PCIe Performance Monitoring Overview................................................ 163\r\n2.9.2.1 R2PCIe PMON Registers - On Overflow and the Consequences \r\n(PMI/Freeze) .......................................................................... 163\r\n2.9.3 R2PCIe Performance Monitors ................................................................ 164\r\n2.9.3.1 R2PCIe Box Level PMON State .................................................. 164\r\n2.9.3.2 R2PCIe PMON state - Counter/Control Pairs ................................ 165\r\n2.9.4 R2PCIe Performance Monitoring Events ................................................... 166\r\n2.9.4.1 An Overview .......................................................................... 166\r\n2.9.5 R2PCIe Box Events Ordered By Code ...................................................... 166\r\n2.9.6 R2PCIe Box Common Metrics (Derived Events)......................................... 166\r\n2.9.7 R2PCIe Box Performance Monitor Event List ............................................. 167\r\n2.10 R3QPI Performance Monitoring.......................................................................... 173\r\n2.10.1 Overview of the R3QPI Box.................................................................... 173\r\n2.10.2 R3QPI Performance Monitoring Overview ................................................. 173\r\n2.10.2.1 R3QPI PMON Registers - On Overflow and the Consequences \r\n(PMI/Freeze) .......................................................................... 173\r\n2.10.3 R3QPI Performance Monitors.................................................................. 174\r\n2.10.3.1 R3QPI Box Level PMON State ................................................... 174\r\n2.10.3.2 R3QPI PMON state - Counter/Control Pairs ................................. 175\r\n2.10.4 R3QPI Performance Monitoring Events..................................................... 176\r\n2.10.4.1 An Overview .......................................................................... 176\r\n2.10.5 R3QPI Box Events Ordered By Code ........................................................ 177\r\n2.10.6 R3QPI Box Common Metrics (Derived Events) .......................................... 177\r\n2.10.7 R3QPI Box Performance Monitor Event List .............................................. 177\r\n2.11 Packet Matching Reference ............................................................................... 190",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/f2494bad-75d0-4911-9b46-fd60e46c8b60.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ed429683cdb9d5368874e19794f9600d44f88677e439052ce82996c1e849b698",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0508f7f4-3eaf-44b0-b74f-90f41fccc2e9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 6,
            "page_width": 612,
            "page_height": 792,
            "content": "6 Reference Number: 329468-002\r\nFigures\r\n1-1 Intel Xeon Processor E7-8800 v2 family Block Diagram ........................................... 5\r\n1-2 Intel Xeon Processor E5-2600 v2 Product Family Block Diagram ................................ 6\r\n1-3 Intel Xeon Processor E5-1600 v2 Product Family Block Diagram ................................ 7\r\n1-4 Perfmon Control/Counter Block Diagram ................................................................ 9\r\nTables\r\n1-1 Per-Box Performance Monitoring Capabilities .......................................................... 8\r\n1-2 MSR Space Uncore Performance Monitoring Registers .............................................10\r\n1-3 PCICFG Space Uncore Performance Monitoring Registers .........................................12\r\n2-1 Global Performance Monitoring Control MSRs.........................................................18\r\n2-2 U_MSR_PMON_GLOBAL_CTL Register – Field Definitions .........................................19\r\n2-3 U_MSR_PMON_GLOBAL_STATUS Register – Field Definitions ...................................20\r\n2-4 U_MSR_PMON_GLOBAL_CONFIG Register – Field Definitions ...................................20\r\n2-5 U_MSR_PMON_BOX_STATUS Register – Field Definitions ........................................22\r\n2-6 U_MSR_PMON_CTL{1-0} Register – Field Definitions ..............................................22\r\n2-7 U_MSR_PMON_CTR{1-0} Register – Field Definitions .............................................23\r\n2-8 U_MSR_PMON_FIXED_CTL Register – Field Definitions ............................................23\r\n2-9 U_MSR_PMON_FIXED_CTR Register – Field Definitions ...........................................23\r\n2-10 Unit Masks for EVENT_MSG .................................................................................24\r\n2-11 Unit Masks for PHOLD_CYCLES ............................................................................25\r\n2-12 CBo Performance Monitoring MSRs .......................................................................26\r\n2-13 Cn_MSR_PMON_BOX_CTL Register – Field Definitions.............................................33\r\n2-14 Cn_MSR_PMON_CTL{3-0} Register – Field Definitions ............................................33\r\n2-15 Cn_MSR_PMON_CTR{3-0} Register – Field Definitions ............................................34\r\n2-16 Cn_MSR_PMON_BOX_FILTER Register – Field Definitions ........................................34\r\n2-17 Cn_MSR_PMON_BOX_FILTER1 Register – Field Definitions.......................................35\r\n2-18 Opcode Match by IDI Packet Type for Cn_MSR_PMON_BOX_FILTER.opc ....................35\r\n2-19 Unit Masks for LLC_LOOKUP ................................................................................41\r\n2-20 Unit Masks for LLC_VICTIMS ...............................................................................41\r\n2-21 Unit Masks for MISC...........................................................................................42\r\n2-22 Unit Masks for RING_AD_USED............................................................................43\r\n2-23 Unit Masks for RING_AK_USED............................................................................43\r\n2-24 Unit Masks for RING_BL_USED ............................................................................44\r\n2-25 Unit Masks for RING_BOUNCES ...........................................................................45\r\n2-26 Unit Masks for RING_IV_USED ............................................................................45\r\n2-27 Unit Masks for RxR_EXT_STARVED.......................................................................46\r\n2-28 Unit Masks for RxR_INSERTS...............................................................................46\r\n2-29 Unit Masks for RxR_IPQ_RETRY ...........................................................................47\r\n2-30 Unit Masks for RxR_IRQ_RETRY ...........................................................................47\r\n2-31 Unit Masks for RxR_ISMQ_RETRY.........................................................................48\r\n2-32 Unit Masks for RxR_OCCUPANCY..........................................................................49\r\n2-33 Unit Masks for TOR_INSERTS ..............................................................................50\r\n2-34 Unit Masks for TOR_OCCUPANCY .........................................................................51\r\n2-35 Unit Masks for TxR_ADS_USED............................................................................53\r\n2-36 Unit Masks for TxR_INSERTS...............................................................................53\r\n2-37 HA Performance Monitoring MSRs ........................................................................55\r\n2-38 HA_PCI_PMON_BOX_CTL Register – Field Definitions ..............................................56\r\n2-39 HA_PCI_PMON_BOX_STATUS Register – Field Definitions ........................................56\r\n2-40 HA_PCI_PMON_CTL{3-0} Register – Field Definitions .............................................57",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/0508f7f4-3eaf-44b0-b74f-90f41fccc2e9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ee4df4bfe5ed21bfd467cbd3a3cbf9f66d4e676bb8f5061a491028d93172f136",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 502
      },
      {
        "segments": [
          {
            "segment_id": "0cebb582-e6b6-4955-9646-e0cca504fb2a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 7,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 7\r\n2-41 HA_PCI_PMON_CTR{3-0} Register – Field Definitions ............................................ 57\r\n2-42 HA_PCI_PMON_BOX_OPCODEMATCH Register – Field Definitions ............................. 58\r\n2-43 HA_PCI_PMON_BOX_ADDRMATCH1 Register – Field Definitions ............................... 58\r\n2-44 Unit Masks for ADDR_OPC_MATCH ...................................................................... 61\r\n2-45 Unit Masks for BT_OCCUPANCY ........................................................................... 62\r\n2-46 Unit Masks for BYPASS_IMC................................................................................ 62\r\n2-47 Unit Masks for CONFLICT_CYCLES ....................................................................... 63\r\n2-48 Unit Masks for DIRECTORY_LOOKUP .................................................................... 64\r\n2-49 Unit Masks for DIRECTORY_UPDATE .................................................................... 64\r\n2-50 Unit Masks for IGR_NO_CREDIT_CYCLES.............................................................. 65\r\n2-51 Unit Masks for IMC_READS ................................................................................. 65\r\n2-52 Unit Masks for IMC_WRITES ............................................................................... 66\r\n2-53 Unit Masks for IODC_CONFLICTS......................................................................... 66\r\n2-54 Unit Masks for OSB............................................................................................ 67\r\n2-55 Unit Masks for OSB_EDR .................................................................................... 67\r\n2-56 Unit Masks for REQUESTS................................................................................... 67\r\n2-57 Unit Masks for RING_AD_USED ........................................................................... 68\r\n2-58 Unit Masks for RING_AK_USED ........................................................................... 69\r\n2-59 Unit Masks for RING_BL_USED............................................................................ 69\r\n2-60 Unit Masks for RPQ_CYCLES_NO_REG_CREDITS .................................................... 70\r\n2-61 Unit Masks for SNOOP_RESP............................................................................... 71\r\n2-62 Unit Masks for SNP_RESP_RECV_LOCAL ............................................................... 72\r\n2-63 Unit Masks for TAD_REQUESTS_G0...................................................................... 73\r\n2-64 Unit Masks for TAD_REQUESTS_G1...................................................................... 73\r\n2-65 Unit Masks for TxR_AD_CYCLES_FULL .................................................................. 74\r\n2-66 Unit Masks for TxR_AK_CYCLES_FULL .................................................................. 74\r\n2-67 Unit Masks for TxR_BL ....................................................................................... 74\r\n2-68 Unit Masks for TxR_BL_CYCLES_FULL .................................................................. 75\r\n2-69 Unit Masks for TxR_BL_OCCUPANCY .................................................................... 75\r\n2-70 Unit Masks for WPQ_CYCLES_NO_REG_CREDITS ................................................... 76\r\n2-71 iMC Performance Monitoring MSRs ....................................................................... 78\r\n2-72 MC_CHy_PCI_PMON_BOX_CTL Register – Field Definitions...................................... 79\r\n2-73 MC_CHy_PCI_PMON_BOX_STATUS Register – Field Definitions ................................ 79\r\n2-74 MC_CHy_PCI_PMON_CTL{3-0} Register – Field Definitions ..................................... 80\r\n2-75 MC_CHy_PCI_PMON_FIXED_CTL Register – Field Definitions ................................... 81\r\n2-76 MC_CHy_PCI_PMON_CTR{FIXED,3-0} Register – Field Definitions ........................... 81\r\n2-77 Unit Masks for ACT_COUNT ................................................................................ 84\r\n2-78 Unit Masks for BYP_CMDS .................................................................................. 84\r\n2-79 Unit Masks for CAS_COUNT ................................................................................ 85\r\n2-80 Unit Masks for DRAM_REFRESH ........................................................................... 86\r\n2-81 Unit Masks for MAJOR_MODES ............................................................................ 86\r\n2-82 Unit Masks for POWER_CKE_CYCLES.................................................................... 87\r\n2-83 Unit Masks for POWER_THROTTLE_CYCLES........................................................... 88\r\n2-84 Unit Masks for PREEMPTION ............................................................................... 89\r\n2-85 Unit Masks for PRE_COUNT................................................................................. 89\r\n2-86 Unit Masks for RD_CAS_PRIO ............................................................................. 89\r\n2-87 Unit Masks for RD_CAS_RANK0 ........................................................................... 90\r\n2-88 Unit Masks for RD_CAS_RANK1 ........................................................................... 90\r\n2-89 Unit Masks for RD_CAS_RANK2 ........................................................................... 91\r\n2-90 Unit Masks for RD_CAS_RANK3 ........................................................................... 91\r\n2-91 Unit Masks for RD_CAS_RANK4 ........................................................................... 91\r\n2-92 Unit Masks for RD_CAS_RANK5 ........................................................................... 92",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/0cebb582-e6b6-4955-9646-e0cca504fb2a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=540ffae94ccb20329fe9db69bacdab9ea2c3c1f176789dc71fdf22199f1404f5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 363
      },
      {
        "segments": [
          {
            "segment_id": "f1e58164-5b1f-458d-9f63-0a8ca36e30cc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 8,
            "page_width": 612,
            "page_height": 792,
            "content": "8 Reference Number: 329468-002\r\n2-93 Unit Masks for RD_CAS_RANK6 ...........................................................................92\r\n2-94 Unit Masks for RD_CAS_RANK7 ...........................................................................93\r\n2-95 Unit Masks for VMSE_WR_PUSH ..........................................................................94\r\n2-96 Unit Masks for WMM_TO_RMM .............................................................................94\r\n2-97 Unit Masks for WR_CAS_RANK0...........................................................................96\r\n2-98 Unit Masks for WR_CAS_RANK1...........................................................................96\r\n2-99 Unit Masks for WR_CAS_RANK2...........................................................................96\r\n2-100 Unit Masks for WR_CAS_RANK3...........................................................................97\r\n2-101 Unit Masks for WR_CAS_RANK4...........................................................................97\r\n2-102 Unit Masks for WR_CAS_RANK5...........................................................................98\r\n2-103 Unit Masks for WR_CAS_RANK6...........................................................................98\r\n2-104 Unit Masks for WR_CAS_RANK7...........................................................................99\r\n2-105 IRP Performance Monitoring Registers ..................................................................99\r\n2-106 IRP_PCI_PMON_BOX_CTL Register – Field Definitions ........................................... 100\r\n2-107 IRP_PCI_PMON_BOX_STATUS Register – Field Definitions ..................................... 100\r\n2-108 IRP_PCI_PMON_CTL{3-0} Register – Field Definitions .......................................... 101\r\n2-109 IRP{0,1}_PCI_PMON_CTR{1-0} Register – Field Definitions .................................. 101\r\n2-110 Unit Masks for ADDRESS_MATCH ....................................................................... 103\r\n2-111 Unit Masks for CACHE_ACK_PENDING_OCCUPANCY ............................................. 103\r\n2-112 Unit Masks for CACHE_OWN_OCCUPANCY ........................................................... 103\r\n2-113 Unit Masks for CACHE_READ_OCCUPANCY .......................................................... 104\r\n2-114 Unit Masks for CACHE_TOTAL_OCCUPANCY ......................................................... 104\r\n2-115 Unit Masks for CACHE_WRITE_OCCUPANCY......................................................... 105\r\n2-116 Unit Masks for TICKLES .................................................................................... 107\r\n2-117 Unit Masks for TRANSACTIONS .......................................................................... 108\r\n2-118 PCU Performance Monitoring MSRs..................................................................... 110\r\n2-119 PCU_MSR_PMON_BOX_CTL Register – Field Definitions ......................................... 111\r\n2-120 PCU_MSR_PMON_BOX_STATUS Register – Field Definitions ................................... 111\r\n2-121 PCU_MSR_PMON_CTL{3-0} Register – Field Definitions ........................................ 112\r\n2-122 PCU_MSR_PMON_CTR{3-0} Register – Field Definitions ........................................ 113\r\n2-123 PCU_MSR_PMON_BOX_FILTER Register – Field Definitions .................................... 114\r\n2-124 PCU_MSR_CORE_C6_CTR Register – Field Definitions ........................................... 114\r\n2-125 PCU_MSR_CORE_C3_CTR Register – Field Definitions ........................................... 114\r\n2-126 PCU Configuration Examples ............................................................................. 115\r\n2-127 Unit Masks for POWER_STATE_OCCUPANCY ........................................................ 129\r\n2-128 Intel® QPI Performance Monitoring Registers ...................................................... 132\r\n2-129 Q_Py_PCI_PMON_BOX_CTL Register – Field Definitions......................................... 133\r\n2-130 Q_Py_PCI_PMON_BOX_STATUS Register – Field Definitions................................... 133\r\n2-131 Q_Py_PCI_PMON_CTL{3-0} Register – Field Definitions ........................................ 134\r\n2-132 Q_Py_PCI_PMON_CTR{3-0} Register – Field Definitions........................................ 134\r\n2-133 Q_Py_PCI_PMON_PKT_MATCH1 Registers ........................................................... 135\r\n2-134 Q_Py_PCI_PMON_PKT_MATCH0 Registers ........................................................... 135\r\n2-135 Q_Py_PCI_PMON_PKT_MASK1 Registers ............................................................. 136\r\n2-136 Q_Py_PCI_PMON_PKT_MASK0 Registers ............................................................. 136\r\n2-137 Message Events Derived from the Match/Mask filters ............................................ 137\r\n2-138 QPI_RATE_STATUS Register – Field Definitions .................................................... 138\r\n2-139 Unit Masks for DIRECT2CORE ............................................................................ 144\r\n2-140 Unit Masks for RxL_CREDITS_CONSUMED_VN0 ................................................... 145\r\n2-141 Unit Masks for RxL_CREDITS_CONSUMED_VN1 ................................................... 146\r\n2-142 Unit Masks for RxL_FLITS_G0............................................................................ 147\r\n2-143 Unit Masks for RxL_FLITS_G1............................................................................ 148\r\n2-144 Unit Masks for RxL_FLITS_G2............................................................................ 149",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/f1e58164-5b1f-458d-9f63-0a8ca36e30cc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ea8b5b2e829dda812a0d3405f967e84824cce3324dc027473a30541ba04e74fd",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 350
      },
      {
        "segments": [
          {
            "segment_id": "ac3417fa-fee0-45d8-b5da-23e1767b07db",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 9,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 9\r\n2-145 Unit Masks for RxL_INSERTS_DRS ..................................................................... 150\r\n2-146 Unit Masks for RxL_INSERTS_HOM .................................................................... 150\r\n2-147 Unit Masks for RxL_INSERTS_NCB ..................................................................... 151\r\n2-148 Unit Masks for RxL_INSERTS_NCS ..................................................................... 151\r\n2-149 Unit Masks for RxL_INSERTS_NDR..................................................................... 151\r\n2-150 Unit Masks for RxL_INSERTS_SNP ..................................................................... 152\r\n2-151 Unit Masks for RxL_OCCUPANCY_DRS ................................................................ 152\r\n2-152 Unit Masks for RxL_OCCUPANCY_HOM ............................................................... 153\r\n2-153 Unit Masks for RxL_OCCUPANCY_NCB ................................................................ 153\r\n2-154 Unit Masks for RxL_OCCUPANCY_NCS ................................................................ 153\r\n2-155 Unit Masks for RxL_OCCUPANCY_NDR................................................................ 154\r\n2-156 Unit Masks for RxL_OCCUPANCY_SNP ................................................................ 154\r\n2-157 Unit Masks for TxL_FLITS_G0............................................................................ 156\r\n2-158 Unit Masks for TxL_FLITS_G1............................................................................ 156\r\n2-159 Unit Masks for TxL_FLITS_G2............................................................................ 157\r\n2-160 Unit Masks for TxR_AD_HOM_CREDIT_ACQUIRED ............................................... 158\r\n2-161 Unit Masks for TxR_AD_HOM_CREDIT_OCCUPANCY ............................................. 159\r\n2-162 Unit Masks for TxR_AD_NDR_CREDIT_ACQUIRED ................................................ 159\r\n2-163 Unit Masks for TxR_AD_NDR_CREDIT_OCCUPANCY.............................................. 159\r\n2-164 Unit Masks for TxR_AD_SNP_CREDIT_ACQUIRED ................................................ 160\r\n2-165 Unit Masks for TxR_AD_SNP_CREDIT_OCCUPANCY .............................................. 160\r\n2-166 Unit Masks for TxR_BL_DRS_CREDIT_ACQUIRED................................................. 161\r\n2-167 Unit Masks for TxR_BL_DRS_CREDIT_OCCUPANCY .............................................. 161\r\n2-168 Unit Masks for TxR_BL_NCB_CREDIT_ACQUIRED................................................. 161\r\n2-169 Unit Masks for TxR_BL_NCB_CREDIT_OCCUPANCY .............................................. 162\r\n2-170 Unit Masks for TxR_BL_NCS_CREDIT_ACQUIRED................................................. 162\r\n2-171 Unit Masks for TxR_BL_NCS_CREDIT_OCCUPANCY .............................................. 162\r\n2-172 R2PCIe Performance Monitoring Registers........................................................... 164\r\n2-173 R2_PCI_PMON_BOX_CTL Register – Field Definitions............................................ 164\r\n2-174 R2_PCI_PMON_BOX_STATUS Register – Field Definitions ...................................... 165\r\n2-175 R2_PCI_PMON_CTL{3-0} Register – Field Definitions ........................................... 165\r\n2-176 R2_PCI_PMON_CTR{3-0} Register – Field Definitions........................................... 166\r\n2-177 Unit Masks for RING_AD_USED ......................................................................... 167\r\n2-178 Unit Masks for RING_AK_USED ......................................................................... 168\r\n2-179 Unit Masks for RING_BL_USED.......................................................................... 169\r\n2-180 Unit Masks for RING_IV_USED .......................................................................... 170\r\n2-181 Unit Masks for RxR_AK_BOUNCES ..................................................................... 170\r\n2-182 Unit Masks for RxR_CYCLES_NE ........................................................................ 170\r\n2-183 Unit Masks for RxR_INSERTS ............................................................................ 171\r\n2-184 Unit Masks for RxR_OCCUPANCY ....................................................................... 171\r\n2-185 Unit Masks for TxR_CYCLES_FULL...................................................................... 171\r\n2-186 Unit Masks for TxR_CYCLES_NE ........................................................................ 172\r\n2-187 Unit Masks for TxR_NACK_CCW......................................................................... 172\r\n2-188 Unit Masks for TxR_NACK_CW .......................................................................... 172\r\n2-189 R3QPI Performance Monitoring Registers ............................................................ 174\r\n2-190 R3_Ly_PCI_PMON_BOX_CTL Register – Field Definitions ....................................... 175\r\n2-191 R3_Ly_PCI_PMON_BOX_STATUS Register – Field Definitions ................................. 175\r\n2-192 R3_Ly_PCI_PMON_CTL{2-0} Register – Field Definitions ...................................... 176\r\n2-193 R3_Ly_PCI_PMON_CTR{2-0} Register – Field Definitions ...................................... 176\r\n2-194 Unit Masks for C_HI_AD_CREDITS_EMPTY .......................................................... 178\r\n2-195 Unit Masks for C_LO_AD_CREDITS_EMPTY ......................................................... 178\r\n2-196 Unit Masks for HA_R2_BL_CREDITS_EMPTY ........................................................ 179",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ac3417fa-fee0-45d8-b5da-23e1767b07db.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bd810865157614dcfdd874f5535342f88911f0112947535e8a04a94c9dcde45b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 361
      },
      {
        "segments": [
          {
            "segment_id": "6781b6bc-611c-4cf4-9b18-26319caa066a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 10,
            "page_width": 612,
            "page_height": 792,
            "content": "10 Reference Number: 329468-002\r\n2-197 Unit Masks for QPI0_AD_CREDITS_EMPTY........................................................... 179\r\n2-198 Unit Masks for QPI0_BL_CREDITS_EMPTY ........................................................... 179\r\n2-199 Unit Masks for QPI1_AD_CREDITS_EMPTY........................................................... 180\r\n2-200 Unit Masks for QPI1_BL_CREDITS_EMPTY ........................................................... 180\r\n2-201 Unit Masks for RING_AD_USED.......................................................................... 181\r\n2-202 Unit Masks for RING_AK_USED.......................................................................... 181\r\n2-203 Unit Masks for RING_BL_USED .......................................................................... 182\r\n2-204 Unit Masks for RING_IV_USED .......................................................................... 182\r\n2-205 Unit Masks for RxR_CYCLES_NE......................................................................... 183\r\n2-206 Unit Masks for RxR_INSERTS............................................................................. 184\r\n2-207 Unit Masks for RxR_OCCUPANCY........................................................................ 184\r\n2-208 Unit Masks for TxR_NACK_CCW ......................................................................... 185\r\n2-209 Unit Masks for TxR_NACK_CW ........................................................................... 185\r\n2-210 Unit Masks for VN0_CREDITS_REJECT ................................................................ 186\r\n2-211 Unit Masks for VN0_CREDITS_USED................................................................... 186\r\n2-212 Unit Masks for VN1_CREDITS_REJECT ................................................................ 187\r\n2-213 Unit Masks for VN1_CREDITS_USED................................................................... 188\r\n2-214 Unit Masks for VNA_CREDITS_ACQUIRED ........................................................... 189\r\n2-215 Unit Masks for VNA_CREDITS_REJECT ................................................................ 189\r\n2-216 Intel® QuickPath Interconnect Packet Message Classes ........................................ 190\r\n2-217 Opcode Match by Message Class ........................................................................ 190\r\n2-218 Opcodes (Alphabetical Listing) ........................................................................... 191\r\n§",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/6781b6bc-611c-4cf4-9b18-26319caa066a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1170e43e5f897480f5425487b47702fefbefd71658512922e92ca3a07a2c2cb2",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ccb7e9ad-1ada-4064-8a36-f140483aa1c5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 11,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 5\r\nIntroduction\r\nCHAPTER 1INTRODUCTION\r\n1.1 INTRODUCTION\r\nThe uncore sub-system of the Intel® Xeon® processor E7-8800 v2E5-2600 v2, and E5-1600 \r\nv2 Product Families are shown in Figure 1-1, Figure 1-2 and Figure 1-3. The uncore sub\u0002system consists of a variety of components, ranging from the CBox caching agent to the \r\npower controller unit (PCU), integrated memory controller (iMC) and home agent (HA), to \r\nname a few. Most of these components provide similar performance monitoring capabilities.\r\nFigure 1-1. Intel Xeon Processor E7-8800 v2 family Block Diagram\r\nNOTE\r\nThis diagram represents one possible EX configuration. Not all skus support all features.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ccb7e9ad-1ada-4064-8a36-f140483aa1c5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d9b4cd90067cdfe06ae2bb4188d95ae2563009db5b2090374c8c9922267f51f2",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "58d7ad05-ecf8-47e2-a0a9-aa7e0d87fb6b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 12,
            "page_width": 612,
            "page_height": 792,
            "content": "Introduction\r\n6 Reference Number: 329468-002\r\nFigure 1-2.Intel Xeon Processor E5-2600 v2 Product Family Block Diagram\r\nNOTE\r\nThis diagram represents one possible EP configuration. Not all skus support all features.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/58d7ad05-ecf8-47e2-a0a9-aa7e0d87fb6b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9621d5db1e08903a4525935625d4d214feece5719c3bcbe4dcb2a92bc72559be",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "71aa3868-9a75-4125-8cde-48120d658da9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 13,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 7\r\nIntroduction\r\nFigure 1-3.Intel Xeon Processor E5-1600 v2 Product Family Block Diagram\r\nNOTE\r\nThis diagram represents one possible EN configuration. Not all skus support all \r\nfeatures.\r\n1.2 UNCORE PMON OVERVIEW\r\nThe uncore performance monitoring facilities are organized into per-component performance moni\u0002toring (or ‘PMON’) units. A PMON unit within an uncore component may contain one of more sets of \r\ncounter registers. With the exception of the UBox, each PMON unit provides a unit-level control register \r\nto synchronize actions across the counters within the box (e.g. to start/stop counting).\r\nEvents can be collected by reading a set of local counter registers. Each counter register is paired with \r\na dedicated control register used to specify what to count (i.e. through the event select/umask fields) \r\nand how to count it. Some units provide the ability to specify additional information that can be used to \r\n‘filter’ the monitored events (e.g., C-box; see Section 2.3.3.3, “CBo Filter Registers \r\n(Cn_MSR_PMON_BOX_FILTER{0,1})”). \r\nEach of these boxes communicates with the U-Box which contains registers to control all uncore PMU \r\nactivity (as outlined in Section 2.1, “Uncore Per-Socket Performance Monitoring Control”). Uncore \r\nperformance monitors represent a per-socket resource that is not meant to be affected by context ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/71aa3868-9a75-4125-8cde-48120d658da9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=67c2f6120fc8c9b87f65b48321e9b2e7f7ce4fc24c244481c98a472c820755ee",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 481
      },
      {
        "segments": [
          {
            "segment_id": "a87d34ac-1a98-43ab-a2ce-d03707175727",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 14,
            "page_width": 612,
            "page_height": 792,
            "content": "Introduction\r\n8 Reference Number: 329468-002\r\nswitches and thread migration performed by the OS, it is recommended that the monitoring software \r\nagent establish a fixed affinity binding to prevent cross-talk of event counts from different uncore PMU. \r\nThe programming interface of the counter registers and control registers fall into two address spaces:\r\n• Accessed by MSR are PMON registers within the Cbo units, PCU, and U-Box, see Table 1-2. \r\n• Access by PCI device configuration space are PMON registers within the HA, iMC, QPI, R2PCIe and \r\nR3QPI units, see Table 1-3. \r\nIrrespective of the address-space difference and with only minor exceptions, the bit-granular layout of \r\nthe control registers to program event code, unit mask, start/stop, and signal filtering via threshold/\r\nedge detect are the same.\r\nSoftware may be notified of an overflowing uncore counter on any core.\r\nThe general performance monitoring capabilities of each box are outlined in the following table.\r\n1.3 SECTION REFERENCES\r\nThe following sections provide a breakdown of the performance monitoring capabilities for each box.\r\n• Section 2.1, “Uncore Per-Socket Performance Monitoring Control”\r\n• Section 2.2, “UBox Performance Monitoring”\r\n• Section 2.3, “Cacheing Agent (Cbo) Performance Monitoring”\r\n• Section 2.4, “Home Agent (HA) Performance Monitoring”\r\n• Section 2.5, “Memory Controller (iMC) Performance Monitoring”\r\n• Section 2.6, “IRP Performance Monitoring”\r\n• Section 2.7, “Power Control (PCU) Performance Monitoring”\r\n• Section 2.8, “Intel® QPI Link Layer Performance Monitoring”\r\n• Section 2.9, “R2PCIe Performance Monitoring”\r\n• Section 2.10, “R3QPI Performance Monitoring”\r\n• Section 2.11, “Packet Matching Reference”\r\nTable 1-1. Per-Box Performance Monitoring Capabilities\r\nBox # Boxes # Counters/\r\nBox\r\n# Queue \r\nEnabled\r\nPacket Match/\r\nMask Filters? Bit Width\r\nC-Box up to 15 4 1 Y 44\r\nHA up to 2 4 4 Y 48\r\niMC up to 2\r\n(each with 4\r\nchannels)\r\n4 (+1)\r\n(per channel)\r\n4 N 48\r\nPCU 1 4 (+2) 4 N 48\r\nQPI up to 2\r\n(2 or 3\r\nports)\r\n4\r\n(per port)\r\n4 Y 48\r\nR2PCIe 1 4 1 N 44\r\nR3QPI up to 2\r\n(2 or 3 links)\r\n3\r\n(per link)\r\n1 N 44\r\nU-Box 1 2 (+1) 0 N 44\r\nIRP 1 4 4 N 48",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/a87d34ac-1a98-43ab-a2ce-d03707175727.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=786c0486a24cc9ccebb812e4db8cac4f17124d7c4a2f5aede51b91de89d4ea50",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 352
      },
      {
        "segments": [
          {
            "segment_id": "f51586de-e7ea-4b06-8fd9-fbbcfe9e090c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 15,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 9\r\nIntroduction\r\n1.4 UNCORE PMON - TYPICAL CONTROL/COUNTER LOGIC\r\nFollowing is a diagram of the standard perfmon counter block illustrating how event information is \r\nrouted and stored within each counter and how its paired control register helps to select and filter the \r\nincoming information. Details for how control bits affect event information is presented in each of the \r\nbox subsections of Chapter 2, with some summary information below.\r\nNOTE: The PCU uses an adaptation of this block (refer to Section 2.7.3, “PCU Performance Monitors” \r\nmore information). Also note that only a subset of the available control bits are presented in the \r\ndiagram.\r\nFigure 1-4.Perfmon Control/Counter Block Diagram\r\nSelecting What To Monitor: The main task of a configuration register is to select the event to be \r\nmonitored by its respective data counter. Setting the .ev_sel and .umask fields performs the event \r\nselection. \r\nTelling HW that the Control Register Is Set: .en bit must be set to 1 to enable counting. Once \r\ncounting has been enabled in the box and global level of the Performance Monitoring Hierarchy (refer \r\nto Section 2.1.2, “Setting up a Monitoring Session” for more information), the paired data register will \r\nbegin to collect events.\r\nAdditional control bits include: ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/f51586de-e7ea-4b06-8fd9-fbbcfe9e090c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=85e090048ef8c28c306f537fa9777c8e706fd36a103990924116a062afcd4632",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 203
      },
      {
        "segments": [
          {
            "segment_id": "b6d9997e-0b8d-42f2-878c-0992ef090040",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 16,
            "page_width": 612,
            "page_height": 792,
            "content": "Introduction\r\n10 Reference Number: 329468-002\r\nNotification after X events: . - instead of manually stopping the counters at intervals (often wall \r\nclock time) pre-determined by software, hardware can be set to notify monitoring software when a set \r\nnumber of events has occurred. The Overflow Enable bit is provided for just that purpose. See Section \r\n2.1.1, “Counter Overflow” for more information on how to use this mechanism. \r\nApplying a Threshold to Incoming Events: .thresh - since most counters can increment by a value \r\ngreater than 1, a threshold can be applied to generate an event based on the outcome of the compar\u0002ison. If the .thresh is set to a non-zero value, that value is compared against the incoming count for \r\nthat event in each cycle. If the incoming count is >= the threshold value, then the event count captured \r\nin the data register will be incremented by 1. \r\nUsing the threshold field to generate additional events can be particularly useful when applied to a \r\nqueue occupancy count. For example, if a queue is known to contain eight entries, it may be useful to \r\nknow how often it contains 6 or more entries (i.e. Almost Full) or when it contains 1 or more entries \r\n(i.e. Not Empty).\r\nNOTE\r\nFor Intel® Xeon® Processor E5 v2 and E7 v2 Product Families the .edge_det bit follow \r\nthe threshold comparison in sequence. If a user wishes to apply these bits to events \r\nthat only increment by 1 per cycle, .thresh must be set to 0x1.\r\nCounting State Transitions Instead of per-Cycle Events: .edge_det - Rather than accumulating \r\nthe raw count each cycle (for events that can increment by 1 per cycle), the register can capture tran\u0002sitions from no event to an event incoming (i.e. the ‘Rising Edge’).\r\n1.5 UNCORE PMU SUMMARY TABLES\r\nFollowing is a list of the registers provided in the Uncore for Performance Monitoring. It should be noted \r\nthat the Uncore Performance Monitors are split between MSR space (U, CBo and PCU) and PCICFG \r\nspace. \r\nTable 1-2. MSR Space Uncore Performance Monitoring Registers \r\nBox MSR Addresses Description\r\nC-Box Counters\r\nC-Box 14 0xED9-0xED6 Counter Registers\r\n0xED4,0xEDA Counter Filters\r\n0xED3-0xED0 Counter Config Registers\r\n0xEC4 Box Control\r\nC-Box 13 0xEB9-0xEB6 Counter Registers\r\n0xEB4,0xEBA Counter Filters\r\n0xEB3-0xEB0 Counter Config Registers\r\n0xEA4 Box Control\r\nC-Box 12 0xE99-0xE96 Counter Registers\r\n0xE94,0xE9A Counter Filters\r\n0xE93-0xE90 Counter Config Registers\r\n0xE84 Box Control\r\nC-Box 11 0xE79-0xE76 Counter Registers\r\n0xE74,0xE7A Counter Filters",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/b6d9997e-0b8d-42f2-878c-0992ef090040.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=422e4a5dbe3492ce438f6993f674d5990ae05b7779f82767f6f09d8a1f878482",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 398
      },
      {
        "segments": [
          {
            "segment_id": "ce723693-be3b-490e-9576-745ea4a967fb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 17,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 11\r\nIntroduction\r\n0xE73-0xE70 Counter Config Registers\r\n0xE64 Box Control\r\nC-Box 10 0xE59-0xE56 Counter Registers\r\n0xE54,0xE5A Counter Filters\r\n0xE53-0xE50 Counter Config Registers\r\n0xE44 Box Control\r\nC-Box 9 0xE39-0xE36 Counter Registers\r\n0xE34,0xE3A Counter Filters\r\n0xE33-0xE30 Counter Config Registers\r\n0xE24 Box Control\r\nC-Box 8 0xE19-0xE16 Counter Registers\r\n0xE14,0xE1A Counter Filters\r\n0xE13-0xE10 Counter Config Registers\r\n0xE04 Box Control\r\nC-Box 7 0xDF9-0xDF6 Counter Registers\r\n0xDF4,0xDFA Counter Filters\r\n0xDF3-0xDF0 Counter Config Registers\r\n0xDE4 Box Control\r\nC-Box 6 0xDD9-0xDD6 Counter Registers\r\n0xDD4,0xDDA Counter Filters\r\n0xDD3-0xDD0 Counter Config Registers\r\n0xDC4 Box Control\r\nC-Box 5 0xDB9-0xDB6 Counter Registers\r\n0xDB4,0xDBA Counter Filters\r\n0xDB3-0xDB0 Counter Config Registers\r\n0xDA4 Box Control\r\nC-Box 4 0xD99-0xD96 Counter Registers\r\n0xD94,0xD9A Counter Filters\r\n0xD93-0xD90 Counter Config Registers\r\n0xD84 Box Control\r\nC-Box 3 0xD79-0xD76 Counter Registers\r\n0xD74,0xD7A Counter Filters\r\n0xD73-0xD70 Counter Config Registers\r\n0xD64 Box Control\r\nC-Box 2 0xD59-0xD56 Counter Registers\r\n0xD54,0xD5A Counter Filters\r\n0xD53-0xD50 Counter Config Registers\r\n0xD55,0xD44 Box Status/Control\r\nC-Box 1 0xD39-0xD36 Counter Registers\r\n0xD34,0xD3A Counter Filters\r\n0xD33-0xD30 Counter Config Registers\r\nTable 1-2. MSR Space Uncore Performance Monitoring Registers \r\nBox MSR Addresses Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ce723693-be3b-490e-9576-745ea4a967fb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4e1d1de00c8d15df72cacde4af1e1a9d083d4de9cceb6cebb93e86331fb0adf5",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "2decb2fa-2654-4a23-a697-c2e3a6fc21a1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 18,
            "page_width": 612,
            "page_height": 792,
            "content": "Introduction\r\n12 Reference Number: 329468-002\r\n0xD24 Box Control\r\nC-Box 0 0xD19-0xD16 Counter Registers\r\n0xD14,0xD1A Counter Filters\r\n0xD13-0xD10 Counter Config Registers\r\n0xD04 Box Control\r\nPCU Counters\r\n0xC39-0xC36 Counter Registers\r\n0xC35,0xC24 Box Control/Status\r\n0xC34 Counter Filters\r\n0xC33-0xC30 Counter Config Registers\r\n0x3FC-0x3FD Fixed Counters (Non-PMON)\r\nU-Box Counters\r\nFor U-Box 0xC17-0xC16 Counter Registers\r\n0xC15 Box Status\r\n0xC11-0xC10 Counter Config Registers\r\n0xC09-0xC08 Fixed Counter/Config Register\r\nU-Box Counters\r\nFor Global Control 0xC06 Misc\r\n0xC01-0xC00 Global Control/Status\r\nTable 1-3. PCICFG Space Uncore Performance Monitoring Registers \r\nBox PCICFG Register \r\nAddresses Description\r\nHA0 D14:F1\r\nHA1 D30:F1\r\nF8-F4 Box Control/Status\r\nE4-D8 Counter Config Registers\r\nBC-A0 Counter Registers\r\n48-40 Opcode/Addr Match Filters\r\niMC0 D16:F4,5,0,1 F(4,5,0,1) For Channel 0,1,2,3 \r\niMC1 D30:F4,5,0,1 F(4,5,0,1) For Channel 0,1,2,3 \r\nF8-F4 Box Control/Status\r\nF0 Counter Config Register (Fixed)\r\nE4-D8 Counter Config Registers (General)\r\nD4-D0 Counter Register (Fixed)\r\nBC-A0 Counter Registers (General)\r\nIRP D5:F6\r\nTable 1-2. MSR Space Uncore Performance Monitoring Registers \r\nBox MSR Addresses Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/2decb2fa-2654-4a23-a697-c2e3a6fc21a1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=95a1c831b1aea740c8e81747be6ae348a6aecd486b4666cb014056e1569e38c5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 319
      },
      {
        "segments": [
          {
            "segment_id": "d63f669d-75aa-46bc-8913-792ed7ad11a6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 19,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 13\r\nIntroduction\r\n1.6 ON PARSING AND USING DERIVED EVENTS\r\nFor many of the sections in the chapter covering the Performance Monitoring capabilities of each box, a \r\nset of commonly measured metrics or ‘Derived Events’ have been included. For the most part, these \r\nderived events are simple mathematical combinations of events found within the box. (e.g. [SAMPLE]) \r\nHowever, there are some extensions to the notation used by the metrics.\r\nFollowing is a breakdown of a Derived Event to illustrate many of the notations used. To calculate \r\n“Average Number of Data Read Entries that Miss the LLC when the TOR is not empty”.\r\n(TOR_OCCUPANCY.MISS_OPCODE / COUNTER0_OCCUPANCY{edge_det,thresh=0x1})) \r\nwith:Cn_MSR_PMON_BOX_FILTER.opc=0x182.\r\nRequires programming an extra control register (often for filtering):\r\n• For a single field: with:Register_Name.field=value1\r\n• For multiple fields: with:Register_Name.{field1,field2,...}={value1,value2,...}\r\nF8-F4 Box Control/Status\r\nE4-E0 & DC-D8 Counter Config Registers\r\nC0-B8 & B0-A0 Counter Registers\r\nQPI0 D8,9:F2 D(8,9) for Port 0,1\r\nQPI1 D24:F2 D24 for Port 2\r\nF8-F4 Box Control/Status\r\nE4-D8 Counter Config Registers\r\nBC-A0 Counter Registers\r\nQPI0 Mask/Match D8,9:F6 D(8,9) for Port 0,1\r\nQPI1 Mask/Match D24:F6 D24 for Port 2\r\n23C-238 Mask 0,1\r\n22C-228 Match 0,1\r\nQPI0 Misc D8:F0 D8 for Port 0,1\r\nQPI1 Misc D24:F0 D24 for Port 2\r\nD4 QPI Rate Status\r\nR2PCIe D19:F1\r\nF8-F4 Box Control/Status\r\nE4-D8 Counter Config Registers\r\nBC-A0 Counter Registers\r\nR3QPI0 D19:F5,6 F(5,6) for Link 0,1\r\nR3QPI1 D18:F5 F5 for Link 2\r\nF8-F4 Box Control/Status\r\nE0-D8 Counter Config Registers\r\nB4-A0 Counter Registers\r\nTable 1-3. PCICFG Space Uncore Performance Monitoring Registers \r\nBox PCICFG Register \r\nAddresses Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/d63f669d-75aa-46bc-8913-792ed7ad11a6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=12e465cceff105c7825028c5f34e7a0c2e037b72b1d1a230567f10ac04bed431",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 249
      },
      {
        "segments": [
          {
            "segment_id": "3a048523-8c1e-4a1c-8587-6ed0853eb781",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 20,
            "page_width": 612,
            "page_height": 792,
            "content": "Introduction\r\n14 Reference Number: 329468-002\r\n• e.g. with:Cn_MSR_PMON_BOX_FILTER.{opc,nid}={0x182,my_node}\r\nRequires reading a fixed data register\r\n• For the case where the metric requires the information contained in a fixed data register, the \r\nmnemonic for the register will be included in the equation. Software will be responsible for \r\nconfiguring the data register and setting it to start counting with the other events used by the \r\nmetric. \r\n• e.g. POWER_THROTTLE_CYCLES.RANKx / MC_Chy_PCI_PMON_CTR_FIXED \r\nRequires more input to software to determine the specific event/subevent\r\n• In some cases, there may be multiple events/subevents that cover the same information across \r\nmultiple like hardware units. Rather than manufacturing a derived event for each combination, \r\nthe derived event will use a lower case variable in the event name.\r\n• e.g. POWER_CKE_CYCLES.RANKx / MC_Chy_PCI_PMON_CTR_FIXED where ‘x’ is a variable to cover \r\nevents POWER_CKE_CYCLES.RANK0 through POWER_CKE_CYCLES.RANK7\r\nRequires setting extra control bits in the register the event has been programmed in:\r\n• event_name[.subevent_name]{ctrl_bit[=value],}\r\n• e.g. COUNTER0_OCCUPANCY{edge_det,thresh=0x1}\r\nNOTE: If there is no [=value] specified it is assumed that the bit must be set to 1.\r\nRequires gathering of extra information outside the box (often for common terms):\r\n• See following section for a breakdown of common terms found in Derived Events.\r\n1.6.1 On Common Terms found in Derived Events\r\nTo convert a Latency term from a count of clocks to a count of nanoseconds:\r\n• (Latency Metric) - {Box}_CLOCKTICKS * (1000 / UNCORE_FREQUENCY)\r\nTo convert a Bandwidth term from a count of raw bytes at the operating clock to GB/sec:\r\n• ((Traffic Metric in Bytes) / (TOTAL_INTERVAL / (TSC_SPEED * 1000000))) / GB_CONVERSION\r\n• e.g. For READ_MEM_BW, an event derived from iMC:CAS_COUNT.RD * 64, which is the amount of \r\nmemory bandwidth consumed by read requests, put ‘READ_MEM_BW’ into the bandwidth term to \r\nconvert the measurement from raw bytes to GB/sec.\r\nFollowing are some other terms that may be found within Metrics and how they should be interpreted.\r\n• GB_CONVERSION: 1024^3\r\n• TSC_SPEED: Time Stamp Counter frequency in MHz\r\n• TOTAL_INTERVAL: Overall sample interval (TSC) for the instructions retired event. Typically used \r\nto compute a per send metric. Dividing the TOTAL_INTERVAL by CPU_SPEED * 1,000,000 is the \r\nnumber of seconds in the sample interval.\r\n• TOTAL_PROC_CYC: Total number of CPU cycles for a processor event value. Used with processor \r\nevent data to determine time or work per time as in MB/sec. QPI_LINKS: 2-3 for Intel Xeon \r\nProcessor E5-2600 v2 Product Family.\r\n• IMC_CHANNELS: Up to 8 for Ivy Bridge-EP microarchitecture.\r\n§",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/3a048523-8c1e-4a1c-8587-6ed0853eb781.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1572580595101fbe4854753c1d0ecf76869d1758aba773190cc701cd9843dcb4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 408
      },
      {
        "segments": [
          {
            "segment_id": "539b4cb6-2e18-48ee-8754-c2685930a86f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 21,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 15\r\nUncore Performance Monitoring\r\nUncore Per-Socket Performance Monitoring Control\r\nCHAPTER 2UNCORE PERFORMANCE MONITORING\r\n2.1 UNCORE PER-SOCKET PERFORMANCE MONITORING CONTROL\r\nTo manage the large number of counter registers distributed across many units and collect event data \r\nefficiently, this section describes the hierarchical technique to start/stop/restart event counting that \r\na software agent may need to perform during a monitoring session. \r\n2.1.1 Counter Overflow\r\n If a box’s counter overflows, it can send an overflow message to a global PMON manager (the UBox). \r\nTo do so, the box with the overflowing counter must be allowed to broadcast an overflow message \r\n(the .ov_en in the individual counter’s control register must be set to 1). The overflow will then be \r\npicked up and the box sending the overflow will be recorded in the UBox. \r\nEach box in the uncore with performance monitors may be configured to respond to this overflow with \r\ntwo basic actions:\r\n2.1.1.1 Freezing on Counter Overflow\r\nUpon receipt of an overflow message from any box, the UBox will assert the global freeze signal. Once \r\nthe global freeze has been detected, each box will disable (or ‘freeze’) all of its counters. \r\nNOTE: the box containing the overflowing counter will be frozen first and there will a some delay \r\nbefore each of the other boxes receives the overflow message. \r\n2.1.1.2 PMI on Counter Overflow\r\nUpon receipt of the overflow message, the UBox can send a PMI signal to the core executing the \r\nmonitoring software. To do so, the U_MSR_PMON_GLOBAL_CTL.pmi_core_sel file must be set to \r\npoint to the core the monitoring software is executing on.\r\n2.1.2 Setting up a Monitoring Session\r\nOn HW reset, all the counters are disabled. Enabling is hierarchical. So the following steps, which \r\ninclude programming the event control registers and enabling the counters to begin collecting events, \r\nmust be taken to set up a monitoring session. Section 2.1.3 covers the steps to stop/re-start counter \r\nregisters during a monitoring session.\r\nGlobal Settings in the UBox: (NOTE: Necessary for U-Box monitoring).\r\na) Freeze all the uncore counters by setting U_MSR_PMON_GLOBAL_CTL.frz_all to 1\r\nOR (if box level freeze control preferred):\r\na) Freeze the box’s counters while setting up the monitoring session.\r\ne.g., set Cn_MSR_PMON_BOX_CTL.frz to 1\r\nFor each event to be measured within each box:\r\nb) Enable counting for each monitor",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/539b4cb6-2e18-48ee-8754-c2685930a86f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=166267f31dc1cba825962cfa04288175bd589091876640a7db394f858ec12706",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 379
      },
      {
        "segments": [
          {
            "segment_id": "7b8f3847-178c-4a8a-be21-2770a49ffedb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 22,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nUncore Per-Socket Performance Monitoring Control\r\n16 Reference Number: 329468-002\r\ne.g. Set C0_MSR_PMON_CTL2.en to 1 \r\nNOTE\r\nRecommended: set the .en bit for all counters in each box a user intends to monitor, \r\nand left alone for the duration of the monitoring session. \r\nNOTE\r\nFor cases where there is no sharing of these counters among software agents indepen\u0002dently sampling the counters, software could set the enable bits for all counters it \r\nintends to use during the setup phase. For cases where sharing is expected, each agent \r\ncould use the individual enable bits in order to perform sampling rather than using the \r\nbox-level freeze from steps (a) and (d).\r\nc) Select event to monitor if the event control register hasn’t been programmed:\r\nProgram the .ev_sel and .umask bits in the control register with the encodings necessary to capture the \r\nrequested event along with any signal conditioning bits (.thresh/.edge_det) used to qualify the event.\r\ne.g. Set C0_MSR_PMON_CT2.{ev_sel, umask} to {0x03, 0x1} in order to capture \r\nLLC_VICTIMS.M_STATE in CBo 0’s C0_MSR_PMON_CTR2.\r\nNOTE\r\nIt is also important to program any additional filter registers used to further qualify the \r\nevents (e.g. setting the opcode match field in Cn_MSR_BOX_FILTER to qualify \r\nTOR_INSERTS by a specific opcode).\r\nBack to the box level:\r\nd) Reset counters in each box to ensure no stale values have been acquired from previous sessions. \r\nResetting the control registers, particularly those that won’t be used is also recommended if for no \r\nother reason than to prevent errant overflows. To reset both the counters and control registers, write \r\nthe following registers:\r\n• For each CBo, set Cn_MSR_PMON_BOX_CTL[1:0] to 0x3.\r\n• Set HA_PCI_PMON_BOX_CTL[1:0] to 0x3. \r\nNOTE\r\nIn the HA, when measuring an Occupancy count, it will be necessary to set the \r\n.q_occ_rst bit to 1 in each control register set to measure an Occupancy count (e.g. \r\nTRACKER_OCCUPANCY). \r\n• For each Intel® QPI Port, set Q_Py_PCI_PMON_BOX_CTL[1:0] to 0x3.\r\n• For each DRAM Channel, set MC_CHy_PCI_PMON_BOX_CTL[1:0] to 0x3.\r\n• Set PCU_MSR_PMON_BOX_CTL[1:0] to 0x3.\r\n• For each Link, set R3_Ly_PCI_PMON_BOX_CTL[1:0] to 0x3.\r\n• Set R2_PCI_PMON_BOX_CTL[1:0] to 0x3.\r\nNOTE\r\nThe UBox counters do not have a Box Control register. The counters will need to be \r\nmanually reset by writing a 0 in each data register.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/7b8f3847-178c-4a8a-be21-2770a49ffedb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0f3ad7fb0f7be5d176ccc8896b2b91163c56fa16a1e8ad1bdb52ee0363016863",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 367
      },
      {
        "segments": [
          {
            "segment_id": "b4ccb228-fb55-447d-8d43-26e8c05a627e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 23,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 17\r\nUncore Performance Monitoring\r\nUncore Per-Socket Performance Monitoring Control\r\nMonitoring:\r\ne) Select how to gather data. If polling, skip to f. If sampling: \r\nTo set up a sample interval, software can pre-program the data register with a value of [2^(register \r\nbit width - up to 48) - sample interval length]. Doing so allows software, through use of the pmi \r\nmechanism, to be notified when the number of events in the sample have been captured. Capturing \r\na performance monitoring sample every ‘X cycles’ (the fixed counter in the UBox counts uncore clock \r\ncycles) is a common use of this mechanism. \r\ni.e. To stop counting and receive notification when the 1,000,000th idle flit is transmitted from QPI on \r\nPort 0 \r\n- set Q_P0_PCI_PMON_CTR1 to (2^48- 1000) \r\n- set Q_P0_PCI_PMON_CTL1.ev_sel to 0x0\r\n- set Q_P0_PCI_PMON_CTL1.umask to 0x1\r\n- set U_MSR_PMON_GLOBAL_CTL.pmi_core_sel to which core the monitoring thread is executing on.\r\nf) Enable counting at the global level by setting the U_MSR_PMON_GLOBAL_CTL.unfrz_all bit to 1. \r\nOR\r\nf) Enable counting at the box level by unfreezing the counters in each box\r\ne.g. set Cn_MSR_PMON_BOX_CTL.frz to 0\r\nAnd with that, counting will begin.\r\nNOTE\r\nThe UBox does not have a Box Control register, so there’s no box-level freeze to help \r\nisolate the UBox from agents counting in other boxes. Once enabled and programmed \r\nwith a valid event, the UBox counters will collect events. For somewhat better \r\nsynchronization, a user can keep the U_MSR_PMON_CTL.ev_sel at 0x0 while enabled \r\nand write it with a valid value just prior to unfreezing the registers in other boxes.\r\n2.1.3 Reading the Sample Interval\r\nSoftware can poll the counters whenever it chooses, or wait to be notified that a counter has over\u0002flowed (by receiving a PMI). \r\na) Polling - before reading, it is recommended that software freeze the counters in each box with \r\nactive counters (by setting *_PMON_BOX_CTL.frz to 1). After reading the event counts from the \r\ncounter registers, the monitoring agent can choose to reset the event counts to avoid event-count \r\nwrap-around; or resume the counter register without resetting their values. The latter choice will \r\nrequire the monitoring agent to check and adjust for potential wrap-around situations.\r\nb) Frozen counters - If software set the counters to freeze on overflow and send notification when it \r\nhappens, the next question is: Who caused the freeze? \r\nOverflow bits are stored hierarchically within the uncore. First, software should read the \r\nU_MSR_PMON_GLOBAL_STATUS.ov_* bits to determine which box(es) sent an overflow. Then read \r\nthat box’s *_PMON_GLOBAL_STATUS.ov field to find the overflowing counter.\r\nNOTE\r\nMore than one counter may overflow at any given time.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/b4ccb228-fb55-447d-8d43-26e8c05a627e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=274f179f5f3fa355728252e5bcbeffd9295d95c75690c777b11ae960cce30840",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 429
      },
      {
        "segments": [
          {
            "segment_id": "178bcbb8-6bfb-4bf5-847b-266bbee83edb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 24,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nUncore Per-Socket Performance Monitoring Control\r\n18 Reference Number: 329468-002\r\n2.1.4 Enabling a New Sample Interval from Frozen Counters\r\na) Clear all uncore counters: For each box in which counting occurred, set *_PMON_BOX_CTL.rst_ctrs \r\nto 1.\r\nb) Clear all overflow bits. This includes clearing U_MSR_PMON_GLOBAL_STATUS.ov_* as well as any \r\n*_BOX_STATUS registers that have their overflow bits set. \r\ne.g. If counter 3 in QPI Port 1 overflowed, in order to clear the overflow bit software should set \r\nQ_P1_PCI_PMON_BOX_STATUS.ov[3] to 1.\r\nc) Create the next sample: Reinitialize the sample by setting the monitoring data register to (2^48 - \r\nsample_interval). Or set up a new sample interval as outlined in Section 2.1.2, “Setting up a Monitoring \r\nSession”.\r\nd) Re-enable counting: Set U_MSR_PMON_GLOBAL_CTL.unfrz_all to 1. \r\n2.1.5 Global Performance Monitors\r\nTable 2-1. Global Performance Monitoring Control MSRs\r\n2.1.5.1 Global PMON Global Control/Status Registers \r\nThe following registers represent state governing all PMUs in the uncore, both to exert global control \r\nand collect box-level information.\r\nU_MSR_PMON_GLOBAL_CTL contains a bit that can freeze (.frz_all) all the uncore counters. \r\nIf an overflow is detected in any of the uncore’s PMON registers, it will be summarized in \r\nU_MSR_PMON_GLOBAL_STATUS. This register accumulates overflows sent to it from the other uncore \r\nboxes. To reset these overflow bits, a user must set the corresponding bits in \r\nU_MSR_PMON_GLOBAL_STATUS to 1, which will act to clear them.\r\nMSR Name MSR \r\nAddress\r\nSize \r\n(bits) Description\r\nU_MSR_PMON_GLOBAL_CONFIG 0x0C06 32 UBox PMON Global Configuration\r\nU_MSR_PMON_GLOBAL_STATUS 0x0C01 32 UBox PMON Global Status\r\nU_MSR_PMON_GLOBAL_CTL 0x0C00 32 UBox PMON Global Control ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/178bcbb8-6bfb-4bf5-847b-266bbee83edb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=01827bbbdb60eede5ff7b75beb6c063ba8ce3c1eae3ef8138fb6cfbb593268cc",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "13450548-1943-4dc8-8b0d-f04f772ddc2b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 25,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 19\r\nUncore Performance Monitoring\r\nUncore Per-Socket Performance Monitoring Control\r\nTable 2-2. U_MSR_PMON_GLOBAL_CTL Register – Field Definitions\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nfrz_all 31 WO 0 Freeze all uncore performance monitors. \r\nwk_on_pmi 30 RW 0 If PMI event requested to send to core...\r\n0 - Send event to cores already woken\r\n1 - Wake any sleeping core and send PMI to all cores.\r\nunfrz_all 29 WO 0 Unfreeze all uncore performance monitors. \r\nrsv 28:27 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nrsv 26:15 RV 0 Reserved\r\npmi_core_sel 14:0 RW 0 PMI Core Select\r\nEx:\r\nIf counter overflow is sent to UBox...\r\n000000000000000 - No PMI sent \r\n000000000000001 - Send PMI to core 0 \r\n000000001000000 - Send PMI to core 6 \r\n000000001100010 - Send PMI to core 2, 5 & 6\r\netc.\r\nNOTE: If wk_on_pmi is set to 1, a wake will be sent to any \r\nsleeping core in the mask prior to sending the PMI.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/13450548-1943-4dc8-8b0d-f04f772ddc2b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=21e55e3d753ae8166d077e3715432e212147b965796cdf36ef56b2fcd4173c2a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 415
      },
      {
        "segments": [
          {
            "segment_id": "b873575f-0309-4ca7-869e-9a75d66c4dea",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 26,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nUBox Performance Monitoring\r\n20 Reference Number: 329468-002\r\nTable 2-3. U_MSR_PMON_GLOBAL_STATUS Register – Field Definitions\r\nTable 2-4. U_MSR_PMON_GLOBAL_CONFIG Register – Field Definitions\r\n2.2 UBOX PERFORMANCE MONITORING\r\n2.2.1 Overview of the UBox\r\nThe UBox serves as the system configuration controller within the physical processor.\r\nIn this capacity, the UBox acts as the central unit for a variety of functions:\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nrsv 31:27 RV 0 Reserved\r\nov_rp 26 RW1C 0 Set if overflow is detected from an R2PCIe PMON register.\r\nNOTE: Write of ‘1’ will clear the bit.\r\nov_rq1 25 RW1C 0 Set if overflow is detected from an R3QPI1 PMON register.\r\nNOTE: Write of ‘1’ will clear the bit.\r\nov_rq0 24 RW1C 0 Set if overflow is detected from an R3QPI0 PMON register.\r\nNOTE: Write of ‘1’ will clear the bit.\r\nov_q1 23 RW1C 0 Set if overflow is detected from a QPI1 PMON register.\r\nNOTE: Write of ‘1’ will clear the bit.\r\nov_q0 22 RW1C 0 Set if overflow is detected from a QPI0 PMON register.\r\nNOTE: Write of ‘1’ will clear the bit.\r\nov_m1 21 RW1C 0 Set if overflow is detected from an iMC1 PMON register.\r\nNOTE: Write of ‘1’ will clear the bit.\r\nov_m0 20 RW1C 0 Set if overflow is detected from an iMC0 PMON register.\r\nNOTE: Write of ‘1’ will clear the bit.\r\nov_h1 19 RW1C 0 Set if overflow is detected from an HA1 PMON register.\r\nNOTE: Write of ‘1’ will clear the bit.\r\nov_h0 18 RW1C 0 Set if overflow is detected from an HA0 PMON register.\r\nNOTE: Write of ‘1’ will clear the bit.\r\nov_c[14-0] 17:3 RW1C 0 Set if overflow is detected from a CBo PMON register, 1 bit for \r\neach CBo where bit 5 corresponds CBo 0, etc.\r\nNOTE: Write of ‘1’ will clear the bit.\r\nov_p 2 RW1C 0 Set if overflow is detected from a PCU PMON register.\r\nNOTE: Write of ‘1’ will clear the bit.\r\nov_u 1 RW1C 0 Set if overflow is detected from a UBox PMON register.\r\nNOTE: Write of ‘1’ will clear the bit.\r\nov_u_fixed 0 RW1C 0 Set if overflow is detected from UBox fixed PMON register.\r\nNOTE: Write of ‘1’ will clear the bit.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nrsv 31:4 RV 0 Reserved\r\nnum_c 3:0 RW 8 Number of sets of CBo PMON counters.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/b873575f-0309-4ca7-869e-9a75d66c4dea.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4675aeda5fb4a9c199aa386865e0bfd6c0fc21946c3127301fe9cce20cf3943f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 393
      },
      {
        "segments": [
          {
            "segment_id": "d9239c42-d496-4d3b-8338-51d48e094662",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 27,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 21\r\nUncore Performance Monitoring\r\nUBox Performance Monitoring\r\n• The master for reading and writing physically distributed registers across physical processor \r\nusing the Message Channel.\r\n• The UBox is the intermediary for interrupt traffic, receiving interrupts from the system and \r\ndispatching interrupts to the appropriate core.\r\n• The UBox serves as the system lock master used when quiescing the platform (e.g., Intel® QPI \r\nbus lock).\r\n2.2.2 UBox Performance Monitoring Overview\r\nThe UBox supports event monitoring through two programmable 44-bit wide counters \r\n(U_MSR_PMON_CTR{1:0}), and a 48-bit fixed counter which increments each u-clock. Each of these \r\ncounters can be programmed (U_MSR_PMON_CTL{1:0}) to monitor any UBox event. \r\nFor information on how to setup a monitoring session, refer to Section 2.1, “Uncore Per-Socket \r\nPerformance Monitoring Control”.\r\n2.2.2.1 UBox PMON Registers - On Overflow and the Consequences (PMI/Freeze)\r\nIf an overflow is detected from a UBox performance counter and its overflow enable bit \r\n(U_MSR_PMON_CTLx.ov_en) has been set to 1, the overflow bit is set at the box level \r\n(U_MSR_PMON_BOX_STATUS.ov) and the freeze signal is broadcast to other boxes.\r\nWhen the global logic in the UBox receives the overflow signal, the \r\nU_MSR_PMON_GLOBAL_STATUS.ov_u bit is set (see Table 2-3, “U_MSR_PMON_GLOBAL_STATUS \r\nRegister – Field Definitions”) and a PMI can be generated.\r\nOnce a freeze has occurred, in order to see a new freeze, the overflow responsible for the freeze must \r\nbe cleared by setting the corresponding bit in U_MSR_PMON_BOX_STATUS.ov and \r\nU_MSR_PMON_GLOBAL_STATUs.ov_u to 1. Assuming all the counters have been locally enabled (.en\r\nbit in control registers meant to monitor events) and the overflow bit(s) has been cleared, the UBox \r\nis prepared for a new sample interval. Once the global controls have been re-enabled (Section 2.1.4, \r\n“Enabling a New Sample Interval from Frozen Counters”), counting will resume.\r\n2.2.3 UBox Performance Monitors \r\nMSR Name MSR \r\nAddress\r\nSize \r\n(bits) Description\r\nU_MSR_PMON_CTR1 0x0C17 64 U-Box PMON Counter 1\r\nU_MSR_PMON_CTR0 0x0C16 64 U-Box PMON Counter 0\r\nU_MSR_PMON_BOX_STATUS 0x0C15 32 U-Box PMON Box-Wide Status\r\nU_MSR_PMON_CTL1 0x0C11 64 U-Box PMON Control for Counter 1\r\nU_MSR_PMON_CTL0 0x0C10 32 U-Box PMON Control for Counter 0\r\nU_MSR_PMON_UCLK_FIXED_CTR 0x0C09 64 U-Box PMON UCLK Fixed Counter\r\nU_MSR_PMON_UCLK_FIXED_CTL 0x0C08 32 U-Box PMON UCLK Fixed Counter Control",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/d9239c42-d496-4d3b-8338-51d48e094662.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6a6662fe863a899b3c086342be1d36f7689b84c9a317ad5bcb9988658873588c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 357
      },
      {
        "segments": [
          {
            "segment_id": "04f4af65-1c54-4ac5-9e27-7eeb44b58122",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 28,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nUBox Performance Monitoring\r\n22 Reference Number: 329468-002\r\n2.2.3.1 UBox Box Level PMON State\r\nThe following registers represent the state governing all box-level PMUs in the UBox. \r\nIf an overflow is detected from one of the UBox PMON registers, the corresponding bit in the \r\nU_MSR_PMON_BOX_STATUS.ov field will be set. To reset these overflow bits, a user must write a value \r\nof ‘1’ to them (which will clear the bits).\r\nTable 2-5. U_MSR_PMON_BOX_STATUS Register – Field Definitions\r\n2.2.3.2 UBox PMON state - Counter/Control Pairs\r\nThe following table defines the layout of the UBox performance monitor control registers. The main task \r\nof these configuration registers is to select the event to be monitored by their respective data counter \r\n(.ev_sel, .umask). Additional control bits are provided to shape the incoming events (e.g. .edge_det, \r\n.thresh) as well as provide additional functionality for monitoring software (.rst).\r\nTable 2-6. U_MSR_PMON_CTL{1-0} Register – Field Definitions\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nrsv 31:2 RV 0 Reserved\r\nov 1:0 RW1C 0 If an overflow is detected from the corresponding UBOX PMON \r\nregister, it’s overflow bit will be set. \r\nNOTE: Write of ‘1’ will clear the bit.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nrsv 31:29 RV 0 Reserved\r\nthresh 28:24 RW 0 Threshold used in counter comparison.\r\nrsv 23 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nen 22 RW 0 Local Counter Enable. \r\nrsv 21 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nov_en 20 RW 0 When this bit is set to 1 and the corresponding counter \r\noverflows, a the UBox counters exception is sent to the \r\nUBox.\r\nWhen this bit is asserted and the corresponding counter \r\noverflows, its overflow bit is set in the local status register \r\n(U_MSR_PMON_BOX_STATUS.ov) and the global status \r\nregister U_MSR_PMON_GLOBAL_STATUS.ov_u. \r\nrsv 19 RV 0 Reserved\r\nedge_det 18 RW 0 When set to 1, rather than measuring the event in each \r\ncycle it is active, the corresponding counter will increment \r\nwhen a 0 to 1 transition (i.e. rising edge) is detected.\r\nWhen 0, the counter will increment in each cycle that the \r\nevent is asserted.\r\nNOTE: .edge_det is in series following .thresh. Due to this, \r\nthe .thresh field must be set to a non-0 value. For events \r\nthat increment by no more than 1 per cycle, set .thresh to \r\n0x1.\r\nrst 17 WO 0 When set to 1, the corresponding counter will be cleared to \r\n0.\r\nrsv 16 RV 0 Reserved. SW must write to 0 else behavior is undefined.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/04f4af65-1c54-4ac5-9e27-7eeb44b58122.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f3d2de9174a1d8724c94828da69037ec5ff952396804c392b85efa47ce648dd9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 419
      },
      {
        "segments": [
          {
            "segment_id": "2237d4ef-1799-422c-b5e4-caaa7680d2b1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 29,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 23\r\nUncore Performance Monitoring\r\nUBox Performance Monitoring\r\nThe UBox performance monitor data registers are 44-bit wide. A counter overflow occurs when a \r\ncarry out from bit 43 is detected. Software can force all uncore counting to freeze after N events by \r\npreloading a monitor with a count value of 244 - N and setting the control register to send an overflow \r\nmessage to the global logic. During the interval of time between overflow and global disable, the \r\ncounter value will wrap and continue to collect events.\r\nIf accessible, software can continuously read the data registers without disabling event collection.\r\nTable 2-7. U_MSR_PMON_CTR{1-0} Register – Field Definitions\r\nThe Global UBox PMON registers also include a fixed counter that increments at UCLK for each cycle \r\nit is enabled.\r\nTable 2-8. U_MSR_PMON_FIXED_CTL Register – Field Definitions\r\nTable 2-9. U_MSR_PMON_FIXED_CTR Register – Field Definitions\r\numask 15:8 RW 0 Select subevents to be counted within the selected event. \r\nev_sel 7:0 RW 0 Select event to be counted.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nrsv 63:44 RV 0 Reserved\r\nevent_count 43:0 RW-V 0 44-bit performance event counter\r\nField Bits Attr\r\nHW \r\nRese\r\nt Val\r\nDescription\r\nrsv 31:23 RV 0 Reserved\r\nen 22 RW-V 0 Local Counter Enable\r\nrsv 21 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nov_en 20 RW-V 0 When this bit is set to 1 and the corresponding counter overflows, \r\na the UBox counters exception is sent to the UBox.\r\nWhen this bit is asserted and the corresponding counter \r\noverflows, its overflow bit is set in the local status register \r\n(U_MSR_PMON_BOX_STATUS.ov) and the global status register \r\nU_MSR_PMON_GLOBAL_STATUS.ov_u_fixed. \r\nrsv 19:0 RV 0 Reserved\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nrsv 63:44 RV 0 Reserved\r\nevent_count 43:0 RW-V 0 48-bit performance event counter\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/2237d4ef-1799-422c-b5e4-caaa7680d2b1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=63ac1f31c16353927dfa5b1ebcc9ec7017396234d909a7a8d892ae0370e7aba9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 304
      },
      {
        "segments": [
          {
            "segment_id": "f9119dce-672a-4bcd-9e7e-d808d33a1439",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 30,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nUBox Performance Monitoring\r\n24 Reference Number: 329468-002\r\n2.2.4 UBOX Box Events Ordered By Code\r\nThe following table summarizes the directly measured UBOX Box events.\r\n2.2.5 UBOX Box Performance Monitor Event List\r\nThe section enumerates performance monitoring events for the UBOX Box.\r\nEVENT_MSG\r\n• Title: VLW Received\r\n• Category: EVENT_MSG Events\r\n• Event Code: 0x42\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Virtual Logical Wire (legacy) message were received from Uncore. Specify the thread \r\nto filter on using NCUPMONCTRLGLCTR.ThreadID.\r\nLOCK_CYCLES\r\n• Title: IDI Lock/SplitLock Cycles\r\n• Category: LOCK Events\r\n• Event Code: 0x44\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Number of times an IDI Lock/SplitLock sequence was started.\r\nPHOLD_CYCLES\r\n• Title: Cycles PHOLD Assert to Ack\r\n• Category: PHOLD Events\r\n• Event Code: 0x45\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: PHOLD cycles. Filter from source CoreID.\r\nSymbol Name Event \r\nCode Ctrs\r\nExtra \r\nSelect \r\nBit\r\nMax \r\nInc/\r\nCyc\r\nDescription\r\nEVENT_MSG 0x42 0-1 0 1 VLW Received\r\nLOCK_CYCLES 0x44 0-1 0 1 IDI Lock/SplitLock Cycles\r\nPHOLD_CYCLES 0x45 0-1 0 1 Cycles PHOLD Assert to Ack\r\nRACU_REQUESTS 0x46 0-1 0 1 RACU Request\r\nTable 2-10. Unit Masks for EVENT_MSG\r\nExtension umask\r\n[15:8] Description\r\nVLW_RCVD bxxxxxxx1\r\nMSI_RCVD bxxxxxx1x\r\nIPI_RCVD bxxxxx1xx\r\nDOORBELL_RCVD bxxxx1xxx\r\nINT_PRIO bxxx1xxxx",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/f9119dce-672a-4bcd-9e7e-d808d33a1439.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=de7d4a5283193d137b0d9c380ab1b6d28fdff0c30a121ed342f4b3601234d0a2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 210
      },
      {
        "segments": [
          {
            "segment_id": "4c9cdf07-3064-47f6-a363-e9e4368138bb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 31,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 25\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\nRACU_REQUESTS\r\n• Title: RACU Request\r\n• Category: RACU Events\r\n• Event Code: 0x46\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: \r\n• NOTE: This will be dropped because PHOLD is not implemented this way.\r\n2.3 CACHEING AGENT (CBO) PERFORMANCE MONITORING\r\n2.3.1 Overview of the CBo\r\nThe LLC coherence engine (CBo) manages the interface between the core and the last level cache \r\n(LLC). All core transactions that access the LLC are directed from the core to a CBo via the ring inter\u0002connect. The CBo is responsible for managing data delivery from the LLC to the requesting core. It is \r\nalso responsible for maintaining coherence between the cores within the socket that share the LLC; \r\ngenerating snoops and collecting snoop responses from the local cores when the MESIF protocol \r\nrequires it. \r\nSo, if the CBo fielding the core request indicates that a core within the socket owns the line (for a \r\ncoherent read), the request is snooped to that local core. That same CBo will then snoop all peers \r\nwhich might have the address cached (other cores, remote sockets, etc) and send the request to the \r\nappropriate Home Agent for conflict checking, memory requests and writebacks.\r\nIn the process of maintaining cache coherency within the socket, the CBo is the gate keeper for all \r\nIntel® QuickPath Interconnect (Intel® QPI) messages that originate in the core and is responsible for \r\nensuring that all Intel® QPI messages that pass through the socket’s LLC remain coherent. \r\nThe CBo manages local conflicts by ensuring that only one request is issued to the system for a \r\nspecific cacheline. \r\nThe uncore of Intel Xeon Processors based on the Ivy Bridge-EP microarchitecture contains multiple \r\ninstances of the CBo, each assigned to manage a distinct 2.5MBslice of the processor’s total LLC \r\ncapacity. A slice that can be up to 20-way set associative. For processors with fewer than fully popu\u0002lated 2.5MB LLC slices, the CBo Boxes or missing slices will still be active and track ring traffic caused \r\nby their co-located core even if they have no LLC related traffic to track (i.e. hits/misses/snoops).\r\nEvery physical memory address in the system is uniquely associated with a single CBo instance via a \r\nproprietary hashing algorithm that is designed to keep the distribution of traffic across the CBo \r\ninstances relatively uniform for a wide range of possible address patterns. This enables the individual \r\nCBo instances to operate independently, each managing its slice of the physical address space \r\nwithout any CBo in a given socket ever needing to communicate with the other CBos in that same \r\nsocket.\r\nTable 2-11. Unit Masks for PHOLD_CYCLES\r\nExtension umask\r\n[15:8] Description\r\nASSERT_TO_ACK bxxxxxxx1 Assert to ACK",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/4c9cdf07-3064-47f6-a363-e9e4368138bb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=50d46107052022713d4e1fc216544437b58f356f6578e67502610c97e8fc5730",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 451
      },
      {
        "segments": [
          {
            "segment_id": "7642d1de-6fc6-45df-a775-986da1fe5e70",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 32,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n26 Reference Number: 329468-002\r\n2.3.2 CBo Performance Monitoring Overview\r\nEach of the CBos in the uncore supports event monitoring through four 44-bit wide counters \r\n(Cn_MSR_PMON_CTR{3:0}). Event programming in the CBo is restricted such that each events can \r\nonly be measured in certain counters within the CBo. For example, counter 0 is dedicated to occu\u0002pancy events. No other counter may be used to capture occupancy events. \r\nCBo counter 0 can increment by a maximum of 20 per cycle; counters 1-3 can increment by 1 per cycle.\r\nSome uncore performance events that monitor transaction activities require additional details that \r\nmust be programmed in a filter register. Each Cbo provides two filter registers and allows only one such \r\nevent to be programmed at a given time, see Section 2.3.3.3.\r\nFor information on how to setup a monitoring session, refer to Section 2.1, “Uncore Per-Socket Perfor\u0002mance Monitoring Control”.\r\n2.3.2.1 Special Note on CBo Occupancy Events\r\nAlthough only counter 0 supports occupancy events, it is possible to program counters 1-3 to monitor \r\nthe same occupancy event by selecting the “OCCUPANCY_COUNTER0” event code on counters 1-3.\r\nThis allows:\r\nThresholding\r\n2.3.3 CBo Performance Monitors\r\nTable 2-12. CBo Performance Monitoring MSRs\r\nMSR Name MSR \r\nAddress\r\nSize\r\n(bits) Description\r\nCBo 0 PMON Registers\r\nGeneric Counters\r\nC0_MSR_PMON_CTR3 0x0D19 64 CBo 0 PMON Counter 3\r\nC0_MSR_PMON_CTR2 0x0D18 64 CBo 0 PMON Counter 2\r\nC0_MSR_PMON_CTR1 0x0D17 64 CBo 0 PMON Counter 1\r\nC0_MSR_PMON_CTR0 0x0D16 64 CBo 0 PMON Counter 0\r\nBox-Level Filter\r\nC0_MSR_PMON_BOX_FILTER 0x0D14 32 CBo 0 PMON Filter\r\nC0_MSR_PMON_BOX_FILTER1 0x0D1A 32 CBo 0 PMON Filter1\r\nGeneric Counter Control\r\nC0_MSR_PMON_CTL3 0x0D13 32 CBo 0 PMON Control for Counter 3\r\nC0_MSR_PMON_CTL2 0x0D12 32 CBo 0 PMON Control for Counter 2\r\nC0_MSR_PMON_CTL1 0x0D11 32 CBo 0 PMON Control for Counter 1\r\nC0_MSR_PMON_CTL0 0x0D10 32 CBo 0 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC0_MSR_PMON_BOX_CTL 0x0D04 32 CBo 0 PMON Box-Wide Control\r\nCBo 1 PMON Registers\r\nGeneric Counters\r\nC1_MSR_PMON_CTR3 0x0D39 64 CBo 1 PMON Counter 3\r\nC1_MSR_PMON_CTR2 0x0D38 64 CBo 1 PMON Counter 2",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/7642d1de-6fc6-45df-a775-986da1fe5e70.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bc0446539e64617f3c473cf7d0038ad4e51ff17add13b1a539d8287517b62379",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 337
      },
      {
        "segments": [
          {
            "segment_id": "385b92f9-4027-4f83-acc6-c5b304898d9c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 33,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 27\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\nC1_MSR_PMON_CTR1 0x0D37 64 CBo 1 PMON Counter 1\r\nC1_MSR_PMON_CTR0 0x0D36 64 CBo 1 PMON Counter 0\r\nBox-Level Filter\r\nC1_MSR_PMON_BOX_FILTER 0x0D34 32 CBo 1 PMON Filter\r\nC1_MSR_PMON_BOX_FILTER1 0x0D3A 32 CBo 1 PMON Filter1\r\nGeneric Counter Control\r\nC1_MSR_PMON_CTL3 0x0D33 32 CBo 1 PMON Control for Counter 3\r\nC1_MSR_PMON_CTL2 0x0D32 32 CBo 1 PMON Control for Counter 2\r\nC1_MSR_PMON_CTL1 0x0D31 32 CBo 1 PMON Control for Counter 1\r\nC1_MSR_PMON_CTL0 0x0D30 32 CBo 1 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC1_MSR_PMON_BOX_CTL 0x0D24 32 CBo 1 PMON Box-Wide Control\r\nCBo 2 PMON Registers\r\nGeneric Counters\r\nC2_MSR_PMON_CTR3 0x0D59 64 CBo 2 PMON Counter 3\r\nC2_MSR_PMON_CTR2 0x0D58 64 CBo 2 PMON Counter 2\r\nC2_MSR_PMON_CTR1 0x0D57 64 CBo 2 PMON Counter 1\r\nC2_MSR_PMON_CTR0 0x0D56 64 CBo 2 PMON Counter 0\r\nBox-Level Filter\r\nC2_MSR_PMON_BOX_FILTER 0x0D54 32 CBo 2 PMON Filter\r\nC2_MSR_PMON_BOX_FILTER1 0x0D5A 32 CBo 2 PMON Filter1\r\nGeneric Counter Control\r\nC2_MSR_PMON_CTL3 0x0D53 32 CBo 2 PMON Control for Counter 3\r\nC2_MSR_PMON_CTL2 0x0D52 32 CBo 2 PMON Control for Counter 2\r\nC2_MSR_PMON_CTL1 0x0D51 32 CBo 2 PMON Control for Counter 1\r\nC2_MSR_PMON_CTL0 0x0D50 32 CBo 2 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC2_MSR_PMON_BOX_CTL 0x0D44 32 CBo 2 PMON Box-Wide Control\r\nCBo 3 PMON Registers\r\nGeneric Counters\r\nC3_MSR_PMON_CTR3 0x0D79 64 CBo 3 PMON Counter 3\r\nC3_MSR_PMON_CTR2 0x0D78 64 CBo 3 PMON Counter 2\r\nC3_MSR_PMON_CTR1 0x0D77 64 CBo 3 PMON Counter 1\r\nC3_MSR_PMON_CTR0 0x0D76 64 CBo 3 PMON Counter 0\r\nBox-Level Filter\r\nC3_MSR_PMON_BOX_FILTER 0x0D74 32 CBo 3 PMON Filter\r\nC3_MSR_PMON_BOX_FILTER1 0x0D7A 32 CBo 3 PMON Filter1\r\nGeneric Counter Control\r\nC3_MSR_PMON_CTL3 0x0D73 32 CBo 3 PMON Control for Counter 3\r\nC3_MSR_PMON_CTL2 0x0D72 32 CBo 3 PMON Control for Counter 2\r\nMSR Name MSR \r\nAddress\r\nSize\r\n(bits) Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/385b92f9-4027-4f83-acc6-c5b304898d9c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=37d10c82152bb667ba71fcbb01538be27d486197dd623eadc7e2f861652d7a65",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 288
      },
      {
        "segments": [
          {
            "segment_id": "2db7d4eb-fdf6-4f1d-ade9-faa368dd50f8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 34,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n28 Reference Number: 329468-002\r\nC3_MSR_PMON_CTL1 0x0D71 32 CBo 3 PMON Control for Counter 1\r\nC3_MSR_PMON_CTL0 0x0D70 32 CBo 3 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC3_MSR_PMON_BOX_CTL 0x0D64 32 CBo 3 PMON Box-Wide Control\r\nCBo 4 PMON Registers\r\nGeneric Counters\r\nC4_MSR_PMON_CTR3 0x0D99 64 CBo 4 PMON Counter 3\r\nC4_MSR_PMON_CTR2 0x0D98 64 CBo 4 PMON Counter 2\r\nC4_MSR_PMON_CTR1 0x0D97 64 CBo 4 PMON Counter 1\r\nC4_MSR_PMON_CTR0 0x0D96 64 CBo 4 PMON Counter 0\r\nBox-Level Filter\r\nC4_MSR_PMON_BOX_FILTER 0x0D94 32 CBo 4 PMON Filter\r\nC4_MSR_PMON_BOX_FILTER1 0x0D9A 32 CBo 4 PMON Filter1\r\nGeneric Counter Control\r\nC4_MSR_PMON_CTL3 0x0D93 32 CBo 4 PMON Control for Counter 3\r\nC4_MSR_PMON_CTL2 0x0D92 32 CBo 4 PMON Control for Counter 2\r\nC4_MSR_PMON_CTL1 0x0D91 32 CBo 4 PMON Control for Counter 1\r\nC4_MSR_PMON_CTL0 0x0D90 32 CBo 4 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC4_MSR_PMON_BOX_CTL 0x0D84 32 CBo 4 PMON Box-Wide Control\r\nCBo 5 PMON Registers\r\nGeneric Counters\r\nC5_MSR_PMON_CTR3 0x0DB9 64 CBo 5 PMON Counter 3\r\nC5_MSR_PMON_CTR2 0x0DB8 64 CBo 5 PMON Counter 2\r\nC5_MSR_PMON_CTR1 0x0DB7 64 CBo 5 PMON Counter 1\r\nC5_MSR_PMON_CTR0 0x0DB6 64 CBo 5 PMON Counter 0\r\nBox-Level Filter\r\nC5_MSR_PMON_BOX_FILTER 0x0DB4 32 CBo 5 PMON Filter\r\nC5_MSR_PMON_BOX_FILTER1 0x0DBA 32 CBo 5 PMON Filter1\r\nGeneric Counter Control\r\nC5_MSR_PMON_CTL3 0x0DB3 32 CBo 5 PMON Control for Counter 3\r\nC5_MSR_PMON_CTL2 0x0DB2 32 CBo 5 PMON Control for Counter 2\r\nC5_MSR_PMON_CTL1 0x0DB1 32 CBo 5 PMON Control for Counter 1\r\nC5_MSR_PMON_CTL0 0x0DB0 32 CBo 5 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC5_MSR_PMON_BOX_CTL 0x0DA4 32 CBo 5 PMON Box-Wide Control\r\nCBo 6 PMON Registers\r\nGeneric Counters\r\nC6_MSR_PMON_CTR3 0x0DD9 64 CBo 6 PMON Counter 3\r\nMSR Name MSR \r\nAddress\r\nSize\r\n(bits) Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/2db7d4eb-fdf6-4f1d-ade9-faa368dd50f8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8021420266d236208123800d870d90bc7bb6340a04b86fb6c90d91e58d32ee73",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 277
      },
      {
        "segments": [
          {
            "segment_id": "48bcca48-72cc-4abf-be38-8f2ee442bfbb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 35,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 29\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\nC6_MSR_PMON_CTR2 0x0DD8 64 CBo 6 PMON Counter 2\r\nC6_MSR_PMON_CTR1 0x0DD7 64 CBo 6 PMON Counter 1\r\nC6_MSR_PMON_CTR0 0x0DD6 64 CBo 6 PMON Counter 0\r\nBox-Level Filter\r\nC6_MSR_PMON_BOX_FILTER 0x0DD4 32 CBo 6 PMON Filter\r\nC6_MSR_PMON_BOX_FILTER1 0x0DDA 32 CBo 6 PMON Filter1\r\nGeneric Counter Control\r\nC6_MSR_PMON_CTL3 0x0DD3 32 CBo 6 PMON Control for Counter 3\r\nC6_MSR_PMON_CTL2 0x0DD2 32 CBo 6 PMON Control for Counter 2\r\nC6_MSR_PMON_CTL1 0x0DD1 32 CBo 6 PMON Control for Counter 1\r\nC6_MSR_PMON_CTL0 0x0DD0 32 CBo 6 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC6_MSR_PMON_BOX_CTL 0x0DC4 32 CBo 6 PMON Box-Wide Control\r\nCBo 7 PMON Registers\r\nGeneric Counters\r\nC7_MSR_PMON_CTR3 0x0DF9 64 CBo 7 PMON Counter 3\r\nC7_MSR_PMON_CTR2 0x0DF8 64 CBo 7 PMON Counter 2\r\nC7_MSR_PMON_CTR1 0x0DF7 64 CBo 7 PMON Counter 1\r\nC7_MSR_PMON_CTR0 0x0DF6 64 CBo 7 PMON Counter 0\r\nBox-Level Filter\r\nC7_MSR_PMON_BOX_FILTER 0x0DF4 32 CBo 7 PMON Filter\r\nC7_MSR_PMON_BOX_FILTER1 0x0DFA 32 CBo 7 PMON Filter1\r\nGeneric Counter Control\r\nC7_MSR_PMON_CTL3 0x0DF3 32 CBo 7 PMON Control for Counter 3\r\nC7_MSR_PMON_CTL2 0x0DF2 32 CBo 7 PMON Control for Counter 2\r\nC7_MSR_PMON_CTL1 0x0DF1 32 CBo 7 PMON Control for Counter 1\r\nC7_MSR_PMON_CTL0 0x0DF0 32 CBo 7 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC7_MSR_PMON_BOX_CTL 0x0DE4 32 CBo 7 PMON Box-Wide Control\r\nCBo 8 PMON Registers\r\nGeneric Counters\r\nC8_MSR_PMON_CTR3 0x0E19 64 CBo 8 PMON Counter 3\r\nC8_MSR_PMON_CTR2 0x0E18 64 CBo 8 PMON Counter 2\r\nC8_MSR_PMON_CTR1 0x0E17 64 CBo 8 PMON Counter 1\r\nC8_MSR_PMON_CTR0 0x0E16 64 CBo 8 PMON Counter 0\r\nBox-Level Filter\r\nC8_MSR_PMON_BOX_FILTER 0x0E14 32 CBo 8 PMON Filter\r\nC8_MSR_PMON_BOX_FILTER1 0x0E1A 32 CBo 8 PMON Filter1\r\nGeneric Counter Control\r\nC8_MSR_PMON_CTL3 0x0E13 32 CBo 8 PMON Control for Counter 3\r\nMSR Name MSR \r\nAddress\r\nSize\r\n(bits) Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/48bcca48-72cc-4abf-be38-8f2ee442bfbb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8608e9498edc29fca244eee9ebf451a0314330f627537f6b9734760b504bbbf5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 286
      },
      {
        "segments": [
          {
            "segment_id": "94619c5a-a4e4-4a0a-8428-09c5686a22de",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 36,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n30 Reference Number: 329468-002\r\nC8_MSR_PMON_CTL2 0x0E12 32 CBo 8 PMON Control for Counter 2\r\nC8_MSR_PMON_CTL1 0x0E11 32 CBo 8 PMON Control for Counter 1\r\nC8_MSR_PMON_CTL0 0x0E10 32 CBo 8 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC8_MSR_PMON_BOX_CTL 0x0E04 32 CBo 8 PMON Box-Wide Control\r\nCBo 9 PMON Registers\r\nGeneric Counters\r\nC9_MSR_PMON_CTR3 0x0E39 64 CBo 9 PMON Counter 3\r\nC9_MSR_PMON_CTR2 0x0E38 64 CBo 9 PMON Counter 2\r\nC9_MSR_PMON_CTR1 0x0E37 64 CBo 9 PMON Counter 1\r\nC9_MSR_PMON_CTR0 0x0E36 64 CBo 9 PMON Counter 0\r\nBox-Level Filter\r\nC9_MSR_PMON_BOX_FILTER 0x0E34 32 CBo 9 PMON Filter\r\nC9_MSR_PMON_BOX_FILTER1 0x0E3A 32 CBo 9 PMON Filter1\r\nGeneric Counter Control\r\nC9_MSR_PMON_CTL3 0x0E33 32 CBo 9 PMON Control for Counter 3\r\nC9_MSR_PMON_CTL2 0x0E32 32 CBo 9 PMON Control for Counter 2\r\nC9_MSR_PMON_CTL1 0x0E31 32 CBo 9 PMON Control for Counter 1\r\nC9_MSR_PMON_CTL0 0x0E30 32 CBo 9 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC9_MSR_PMON_BOX_CTL 0x0E24 32 CBo 9 PMON Box-Wide Control\r\nCBo 10 PMON Registers\r\nGeneric Counters\r\nC10_MSR_PMON_CTR3 0x0E59 64 CBo 10 PMON Counter 3\r\nC10_MSR_PMON_CTR2 0x0E58 64 CBo 10 PMON Counter 2\r\nC10_MSR_PMON_CTR1 0x0E57 64 CBo 10 PMON Counter 1\r\nC10_MSR_PMON_CTR0 0x0E56 64 CBo 10 PMON Counter 0\r\nBox-Level Filter\r\nC10_MSR_PMON_BOX_FILTER 0x0E54 32 CBo 10 PMON Filter\r\nC10_MSR_PMON_BOX_FILTER1 0x0E5A 32 CBo 10 PMON Filter1\r\nGeneric Counter Control\r\nC10_MSR_PMON_CTL3 0x0E53 32 CBo 10 PMON Control for Counter 3\r\nC10_MSR_PMON_CTL2 0x0E52 32 CBo 10 PMON Control for Counter 2\r\nC10_MSR_PMON_CTL1 0x0E51 32 CBo 10 PMON Control for Counter 1\r\nC10_MSR_PMON_CTL0 0x0E50 32 CBo 10 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC10_MSR_PMON_BOX_CTL 0x0E44 32 CBo 10 PMON Box-Wide Control\r\nCBo 11 PMON Registers\r\nGeneric Counters\r\nMSR Name MSR \r\nAddress\r\nSize\r\n(bits) Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/94619c5a-a4e4-4a0a-8428-09c5686a22de.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7bfc5d173e6cd2b399face8953adcefce2c2fd65f1208cc3c5b42e48597ced68",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 279
      },
      {
        "segments": [
          {
            "segment_id": "63b2ee61-5630-4a34-9de1-478af5c2fc75",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 37,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 31\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\nC11_MSR_PMON_CTR3 0x0E79 64 CBo 11 PMON Counter 3\r\nC11_MSR_PMON_CTR2 0x0E78 64 CBo 11 PMON Counter 2\r\nC11_MSR_PMON_CTR1 0x0E77 64 CBo 11 PMON Counter 1\r\nC11_MSR_PMON_CTR0 0x0E76 64 CBo 11 PMON Counter 0\r\nBox-Level Filter\r\nC11_MSR_PMON_BOX_FILTER 0x0E74 32 CBo 11 PMON Filter\r\nC11_MSR_PMON_BOX_FILTER1 0x0E7A 32 CBo 11 PMON Filter1\r\nGeneric Counter Control\r\nC11_MSR_PMON_CTL3 0x0E73 32 CBo 11 PMON Control for Counter 3\r\nC11_MSR_PMON_CTL2 0x0E72 32 CBo 11 PMON Control for Counter 2\r\nC11_MSR_PMON_CTL1 0x0E71 32 CBo 11 PMON Control for Counter 1\r\nC11_MSR_PMON_CTL0 0x0E70 32 CBo 11 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC11_MSR_PMON_BOX_CTL 0x0E64 32 CBo 11 PMON Box-Wide Control\r\nCBo 12 PMON Registers\r\nGeneric Counters\r\nC12_MSR_PMON_CTR3 0x0E99 64 CBo 12 PMON Counter 3\r\nC12_MSR_PMON_CTR2 0x0E98 64 CBo 12 PMON Counter 2\r\nC12_MSR_PMON_CTR1 0x0E97 64 CBo 12 PMON Counter 1\r\nC12_MSR_PMON_CTR0 0x0E96 64 CBo 12 PMON Counter 0\r\nBox-Level Filter\r\nC12_MSR_PMON_BOX_FILTER 0x0E94 32 CBo 12 PMON Filter\r\nC12_MSR_PMON_BOX_FILTER1 0x0E9A 32 CBo 12 PMON Filter1\r\nGeneric Counter Control\r\nC12_MSR_PMON_CTL3 0x0E93 32 CBo 12 PMON Control for Counter 3\r\nC12_MSR_PMON_CTL2 0x0E92 32 CBo 12 PMON Control for Counter 2\r\nC12_MSR_PMON_CTL1 0x0E91 32 CBo 12 PMON Control for Counter 1\r\nC12_MSR_PMON_CTL0 0x0E90 32 CBo 12 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC12_MSR_PMON_BOX_CTL 0x0E84 32 CBo 12 PMON Box-Wide Control\r\nCBo 13 PMON Registers\r\nGeneric Counters\r\nC13_MSR_PMON_CTR3 0x0EB9 64 CBo 13 PMON Counter 3\r\nC13_MSR_PMON_CTR2 0x0EB8 64 CBo 13 PMON Counter 2\r\nC13_MSR_PMON_CTR1 0x0EB7 64 CBo 13 PMON Counter 1\r\nC13_MSR_PMON_CTR0 0x0EB6 64 CBo 13 PMON Counter 0\r\nBox-Level Filter\r\nC13_MSR_PMON_BOX_FILTER 0x0EB4 32 CBo 13 PMON Filter\r\nC13_MSR_PMON_BOX_FILTER1 0x0EBA 32 CBo 13 PMON Filter1\r\nGeneric Counter Control\r\nMSR Name MSR \r\nAddress\r\nSize\r\n(bits) Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/63b2ee61-5630-4a34-9de1-478af5c2fc75.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5179d49bd324da4d06e3d3c8939522f4f3ba7bcf0ba5fab19334caa6553063ec",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b31b7a07-deb1-4c74-935b-27cc75a97685",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 38,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n32 Reference Number: 329468-002\r\n2.3.3.1 CBo Box Level PMON State\r\nThe following registers represent the state governing all box-level PMUs in the CBo. \r\nIn the case of the CBo, the Cn_MSR_PMON_BOX_CTL register provides the ability to manually freeze \r\nthe counters in the box (.frz) and reset the generic state (.rst_ctrs and .rst_ctrl).\r\nC13_MSR_PMON_CTL3 0x0EB3 32 CBo 13 PMON Control for Counter 3\r\nC13_MSR_PMON_CTL2 0x0EB2 32 CBo 13 PMON Control for Counter 2\r\nC13_MSR_PMON_CTL1 0x0EB1 32 CBo 13 PMON Control for Counter 1\r\nC13_MSR_PMON_CTL0 0x0EB0 32 CBo 13 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC13_MSR_PMON_BOX_CTL 0x0EA4 32 CBo 13 PMON Box-Wide Control\r\nCBo 14 PMON Registers\r\nGeneric Counters\r\nC14_MSR_PMON_CTR3 0x0ED9 64 CBo 14 PMON Counter 3\r\nC14_MSR_PMON_CTR2 0x0ED8 64 CBo 14 PMON Counter 2\r\nC14_MSR_PMON_CTR1 0x0ED7 64 CBo 14 PMON Counter 1\r\nC14_MSR_PMON_CTR0 0x0ED6 64 CBo 14 PMON Counter 0\r\nBox-Level Filter\r\nC14_MSR_PMON_BOX_FILTER 0x0ED4 32 CBo 14 PMON Filter\r\nC14_MSR_PMON_BOX_FILTER1 0x0EDA 32 CBo 14 PMON Filter1\r\nGeneric Counter Control\r\nC14_MSR_PMON_CTL3 0x0ED3 32 CBo 14 PMON Control for Counter 3\r\nC14_MSR_PMON_CTL2 0x0ED2 32 CBo 14 PMON Control for Counter 2\r\nC14_MSR_PMON_CTL1 0x0ED1 32 CBo 14 PMON Control for Counter 1\r\nC14_MSR_PMON_CTL0 0x0ED0 32 CBo 14 PMON Control for Counter 0\r\nBox-Level Control/Status\r\nC14_MSR_PMON_BOX_CTL 0x0EC4 32 CBo 14 PMON Box-Wide Control\r\nMSR Name MSR \r\nAddress\r\nSize\r\n(bits) Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/b31b7a07-deb1-4c74-935b-27cc75a97685.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0923b1ffc893ac22ef16338da78f0a9da06b1f545774ec9df75ac8d80d774ba0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 508
      },
      {
        "segments": [
          {
            "segment_id": "54481434-0775-4e68-a381-a64dd7b17217",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 39,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 33\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\nTable 2-13. Cn_MSR_PMON_BOX_CTL Register – Field Definitions\r\n2.3.3.2 UCBo PMON state - Counter/Control Pairs\r\nThe following table defines the layout of the CBo performance monitor control registers. The main \r\ntask of these configuration registers is to select the event to be monitored by their respective data \r\ncounter (.ev_sel, .umask). Additional control bits are provided to shape the incoming events (e.g. \r\n.edge_det, .thresh) as well as provide additional functionality for monitoring software (.rst).\r\nTable 2-14. Cn_MSR_PMON_CTL{3-0} Register – Field Definitions\r\nThe CBo performance monitor data registers are 44b wide. A counter overflow occurs when a carry \r\nout from bit 43 is detected. Software can force all uncore counting to freeze after N events by \r\npreloading a monitor with a count value of 244 - N and setting the control register to send an overflow \r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nrsv 31:18 RV 0 Reserved\r\nrsv 17:16 RV 0 Reserved; SW must write to 1 else behavior is undefined.\r\nrsv 15:9 RV 0 Reserved\r\nfrz 8 WO 0 Freeze. \r\nIf set to 1 the counters in this box will be frozen.\r\nrsv 7:2 RV 0 Reserved\r\nrst_ctrs 1 WO 0 Reset Counters. \r\nWhen set to 1, the Counter Registers will be reset to 0.\r\nrst_ctrl 0 WO 0 Reset Control. \r\nWhen set to 1, the Counter Control Registers will be reset to \r\n0.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nthresh 31:24 RW-V 0 Threshold used in counter comparison.\r\nrsv 23 RV 0 Reserved; SW must write to 0 else behavior is undefined.\r\nen 22 RW-V 0 Local Counter Enable. \r\nrsv 21:20 RV 0 Reserved; SW must write to 0 else behavior is undefined.\r\ntid_en 19 RW-V 0 TID Filter Enable\r\nedge_det 18 RW-V 0 When set to 1, rather than measuring the event in each \r\ncycle it is active, the corresponding counter will increment \r\nwhen a 0 to 1 transition (i.e. rising edge) is detected.\r\nWhen 0, the counter will increment in each cycle that the \r\nevent is asserted.\r\nNOTE: .edge_det is in series following .thresh. Due to this, \r\nthe .thresh field must be set to a non-0 value. For events \r\nthat increment by no more than 1 per cycle, set .thresh to \r\n0x1.\r\nrst 17 WO 0 When set to 1, the corresponding counter will be cleared to \r\n0.\r\nrsv 16 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\numask 15:8 RW-V 0 Select subevents to be counted within the selected event. \r\nev_sel 7:0 RW-V 0 Select event to be counted.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/54481434-0775-4e68-a381-a64dd7b17217.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=76ce83ab293b895cca9f27d274e82e67820db377793b0e46271c313bef1007f2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 429
      },
      {
        "segments": [
          {
            "segment_id": "e825e1e3-8a5c-415f-9a18-eabcdd0b8871",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 40,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n34 Reference Number: 329468-002\r\nmessage to the UBox (refer to Section 2.1.1, “Counter Overflow”). During the interval of time between \r\noverflow and global disable, the counter value will wrap and continue to collect events. \r\nIf accessible, software can continuously read the data registers without disabling event collection.\r\nTable 2-15. Cn_MSR_PMON_CTR{3-0} Register – Field Definitions\r\n2.3.3.3 CBo Filter Registers (Cn_MSR_PMON_BOX_FILTER{0,1})\r\nIn addition to generic event counting, each CBo provides a pair of FILTER registers that allow a user to \r\nfilter various traffic as it applies to specific events (see Event Section for more information). \r\nLLC_LOOKUP may be filtered by the cacheline state, while TOR_INSERTS and TOR_OCCUPANCY may \r\nbe filtered by the opcode of the queued request as well as the corresponding NodeID. \r\nAny of the CBo events may be filtered by Thread/Core-ID. To do so, the control register’s .tid_en bit \r\nmust be set to 1 and the tid field in the FILTER register filled out.\r\nNOTE\r\nOnly one of these filtering criteria may be applied at a time.\r\nTable 2-16. Cn_MSR_PMON_BOX_FILTER Register – Field Definitions\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nrsv 63:44 RV 0 Reserved\r\nevent_count 43:0 RW-V 0 44-bit performance event counter\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nrsv 31:23 RV 0 Reserved. SW must set to 0 else behavior is undefined\r\nstate 22:17 RW 0 Select state to monitor for LLC_LOOKUP event. Setting \r\nmultiple bits in this field will allow a user to track multiple \r\nstates.\r\nb1x1xxx - ‘M’ state. \r\nbx1xxxx - ‘F’ state. \r\nbxx1xxx - ‘M’ state\r\nbxxx1xx - ‘E’ state.\r\nbxxxx1x - ‘S’ state.\r\nbxxxxx1 - ‘I’ state.\r\nrsv 16:5 RV 0 Reserved. SW must set to 0 else behavior is undefined\r\ntid 4:0 0 0 [4] Non-thread related data\r\n[3:1] Core-ID\r\n[0] Thread 1/0\r\nWhen .tid_en is 0; the specified counter will count ALL \r\nevents\r\nThread-ID 0x1F is reserved for non-associated requests \r\nsuch as: - LLC victims - PMSeq - External Snoops",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/e825e1e3-8a5c-415f-9a18-eabcdd0b8871.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=be6c806e80abf8cefef1f7e9e3d7bb9b3b412376fc46c79e095ce8fa5ff744ef",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 327
      },
      {
        "segments": [
          {
            "segment_id": "380625da-5548-476a-aefb-5d11ef70eb88",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 41,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 35\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\nTable 2-17. Cn_MSR_PMON_BOX_FILTER1 Register – Field Definitions\r\nRefer to Table 2-218, “Opcodes (Alphabetical Listing)” for definitions of the opcodes found in the \r\nfollowing table.\r\nTable 2-18. Opcode Match by IDI Packet Type for Cn_MSR_PMON_BOX_FILTER.opc\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nisoc 31 RW 0 Match on ISOC Requests\r\nnc 30 RW 0 Match on Non-Coherent Requests\r\nrsv 29 RV 0 Reserved. SW must write 0 else behavior is undefined.\r\nopc\r\n(7b IDI Opcode \r\nw/top 2b 0x3)\r\n28:20 RW 0 Match on Opcode (see Table 2-18, “Opcode Match by IDI \r\nPacket Type for Cn_MSR_PMON_BOX_FILTER.opc”)\r\nNOTE: Only tracks opcodes that come from the IRQ. It is \r\nnot possible to track snoops (from IPQ) or other \r\ntransactions from the ISMQ.\r\nrsv 19:15 RV 0 Reserved\r\nnid 15:0 RW 0 Match on Target NodeID\r\nopc \r\nValue Opcode Defn\r\n0x180 RFO Demand Data RFO\r\n- Read for Ownership requests from core for lines to be cached in E\r\n0x181 CRd Demand Code Read \r\n- Full cache-line read requests from core for lines to be cached in S, \r\ntypically for code\r\n0x182 DRd Demand Data Read\r\n- Full cache-line read requests from core for lines to be cached in S or E, \r\ntypically for data\r\n0x187 PRd Partial Reads (UC)\r\n- Partial read requests of 0-32B (IIO can be up to 64B). Uncacheable.\r\n0x18C WCiLF Streaming Store - Full\r\n- Write invalidate for full cache line of write combining stores\r\n0x18D WCiL Streaming Store - Partial\r\n- Write invalidate for partial cache line of write combining stores\r\n0x190 PrefRFO Prefetch RFO into LLC but don’t pass to L2. Includes Hints\r\n0x191 PrefCode Prefetch Code into LLC but don’t pass to L2. Includes Hints\r\n0x192 PrefData Prefetch Data into LLC but don’t pass to L2. Includes Hints\r\n0x193 PCIWiL PCIe Write (full - non-allocating)\r\n- Partial line MMIO write transactions from IIO (P2P). Not used for coherent \r\ntransactions. Uncacheable. \r\n0x194 PCIWiLF PCIe Write (partial - non-allocating)\r\n- Full line MMIO write transactions from IIO (P2P). Not used for coherent \r\ntransactions. Uncacheable\r\n0x19C PCIItoM PCIe Write (allocating)\r\n- Similar to ItoM - requests exclusive ownership but does not require data \r\nread and IIO does not guarantee it will modify line",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/380625da-5548-476a-aefb-5d11ef70eb88.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b3f60308b5fd59af167a9033ec23ceb23cb132c9dffa501d2ca82b476405531c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 375
      },
      {
        "segments": [
          {
            "segment_id": "6079cae3-8e1c-48e2-b932-b389f741e901",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 42,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n36 Reference Number: 329468-002\r\n2.3.4 CBo Performance Monitoring Events\r\n2.3.4.1 An Overview:\r\nThe performance monitoring events within the CBo include all events internal to the LLC as well as \r\nevents which track ring related activity at the CBo/Core ring stops.\r\nCBo performance monitoring events can be used to track LLC access rates, LLC hit/miss rates, LLC evic\u0002tion and fill rates, and to detect evidence of back pressure on the LLC pipelines. In addition, the CBo has \r\nperformance monitoring events for tracking MESI state transitions that occur as a result of data sharing \r\nacross sockets in a multi-socket system. And finally, there are events in the CBo for tracking ring traffic \r\nat the CBo/Core sink inject points.\r\nEvery event in the CBo is from the point of view of the LLC and is not associated with any specific core \r\nsince all cores in the socket send their LLC transactions to all CBos in the socket. However, the CBo \r\nprovides a thread-id field in the Cn_MSR_PMON_BOX_FILTER register which can be applied to the CBo \r\nevents to obtain the interactions between specific cores and threads. \r\nThere are separate sets of counters for each CBo instance. For any event, to get an aggregate count of \r\nthat event for the entire LLC, the counts across the CBo instances must be added together. The counts \r\ncan be averaged across the CBo instances to get a view of the typical count of an event from the \r\nperspective of the individual CBos. Individual per-CBo deviations from the average can be used to iden\u0002tify hot-spotting across the CBos or other evidences of non-uniformity in LLC behavior across the CBos. \r\nSuch hot-spotting should be rare, though a repetitive polling on a fixed physical address is one obvious \r\nexample of a case where an analysis of the deviations across the CBos would indicate hot-spotting.\r\n0x19D PCIWrUpdate PCIe Write Update (prior generation uncore in Intel® Xeon® processor E5-\r\n2600 Product Family)\r\n- see PCIRMW, except does not return data back to IIO from ownership \r\nread request. \r\n0x19E PCIRdCur PCIe read current\r\n- Read Current requests from IIO. Used to read data without changing \r\nstate.\r\n0x19E PCIRMW PCIe Read-Modify-Write (prior generation uncore in Intel Xeon processor \r\nE5-2600 Product Family)\r\n- Read-Modify-Write request from IIO. Uncore gains ownership and return \r\nlatest data followed by full line writeback from IIO == atomic flow. After \r\ntransaction, LLC state is M. \r\n0x1C4 WbMtoI Request writeback Modified invalidate line\r\n- Evict full M-state cache line from core. Guarantees core has no cached \r\ncopies. \r\n0x1C5 WbMtoE Request writeback Modified set to Exclusive\r\n- Evict full M-state cache line from core. \r\n0x1C8 ItoM Request Invalidate Line\r\n- Request Exclusive Ownership of cache line\r\n0x1E4 PCINSRd PCIe Non-Snoop Read\r\n- Non-snoop read requests of full cache lines from IIO. (SW must \r\nguarantee coherency)\r\n0x1E5 PCINSWr PCIe Non-Snoop Write (partial)\r\n- Non-snoop write requests of partial cache lines from IIO. Always \r\nuncacheable. \r\n0x1E6 PCINSWrF PCIe Non-Snoop Write (full)\r\n- Non-snoop write requests of full cache lines from IIO. Always \r\nuncacheable. \r\nopc \r\nValue Opcode Defn",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/6079cae3-8e1c-48e2-b932-b389f741e901.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f6ccd1be668f92db934f5fd6c11a8616b57ac8ebc743e848557c4e1176925b1d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 510
      },
      {
        "segments": [
          {
            "segment_id": "0bee2e61-dc25-494b-b7cb-1874ebb9a08b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 43,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 37\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n2.3.4.2 Acronyms frequently used in CBo Events:\r\nThe Rings:\r\nAD (Address) Ring - Core Read/Write Requests and Intel QPI Snoops. Carries Intel QPI requests and \r\nsnoop responses from C to QPI.\r\nBL (Block or Data) Ring - Data == 2 transfers for 1 cache line\r\nAK (Acknowledge) Ring - Acknowledges QPI to CBo and CBo to Core. Carries snoop responses from \r\nCore to CBo.\r\nIV (Invalidate) Ring - CBo Snoop requests of core caches\r\nInternal CBo Queues:\r\nIRQ - Ingress Request Queue on AD Ring. Associated with requests from core.\r\nIPQ - Ingress Probe Queue on AD Ring. Associated with snoops from QPI LL.\r\nISMQ - Ingress Subsequent Messages (response queue). Associated with messages responses to \r\ningress requests (e.g. data responses, QPI complete messages, core snoop response messages and \r\nGO reset queue).\r\nTOR - Table Of Requests. Tracks pending CBo transactions.\r\nQPI_IGR - QPI credits for AD or BL ring. Credits to access the QPI are necessary to broadcast \r\nsnoops. \r\nRxR (aka IGR) /TxR (aka EGR) - Ingress (requests from the Cores) and Egress (requests headed \r\nfor the Ring) queues\r\n2.3.4.3 The Queues:\r\nThere are several internal occupancy queue counters, each of which is 5bits wide and dedicated to its \r\nqueue: IRQ, IPQ, ISMQ, QPI_IGR, IGR, EGR and the TOR. \r\n2.3.5 CBO Box Events Ordered By Code\r\nThe following table summarizes the directly measured CBO Box events.\r\nSymbol Name Event \r\nCode Ctrs\r\nMax \r\nInc/\r\nCyc\r\nDescription\r\nCLOCKTICKS 0x00 0-3 1 Uncore Clocks\r\nTxR_INSERTS 0x02 0-1 1 Egress Allocations\r\nTxR_ADS_USED 0x04 0-1 1\r\nRING_BOUNCES 0x05 0-1 1 Number of LLC responses that bounced on \r\nthe Ring.\r\nRING_SRC_THRTL 0x07 0-1 1\r\nRxR_OCCUPANCY 0x11 0 20 Ingress Occupancy\r\nRxR_EXT_STARVED 0x12 0-1 1 Ingress Arbiter Blocking Cycles\r\nRxR_INSERTS 0x13 0-1 1 Ingress Allocations\r\nRING_AD_USED 0x1b 2-3 1 AD Ring In Use\r\nRING_AK_USED 0x1c 2-3 1 AK Ring In Use\r\nRING_BL_USED 0x1d 2-3 1 BL Ring in Use\r\nRING_IV_USED 0x1e 2-3 1 IV Ring in Use",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/0bee2e61-dc25-494b-b7cb-1874ebb9a08b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bd8dce7c71599e2131b1fadfdab7cf2e6e7633bb77bc28e8f2b7c67a216d5eab",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 333
      },
      {
        "segments": [
          {
            "segment_id": "a713c6c8-d67a-40b1-94a3-13582ecd62e0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 44,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n38 Reference Number: 329468-002\r\n2.3.6 CBO Box Common Metrics (Derived Events)\r\nThe following table summarizes metrics commonly calculated from CBO Box events.\r\nCOUNTER0_OCCUPANCY 0x1f 1-3 20 Counter 0 Occupancy\r\nRxR_IPQ_RETRY 0x31 0-1 1 Probe Queue Retries\r\nRxR_IRQ_RETRY 0x32 0-1 1 Ingress Request Queue Rejects\r\nRxR_ISMQ_RETRY 0x33 0-1 1 ISMQ Retries\r\nLLC_LOOKUP 0x34 0-1 1 Cache Lookups\r\nTOR_INSERTS 0x35 0-1 1 TOR Inserts\r\nTOR_OCCUPANCY 0x36 0 20 TOR Occupancy\r\nLLC_VICTIMS 0x37 0-1 1 Lines Victimized\r\nMISC 0x39 0-1 1 Cbo Misc\r\nSymbol Name:\r\n Definition Equation\r\nAVG_INGRESS_DEPTH:\r\n Average Depth of the Ingress Queue \r\nthrough the sample interval\r\nRxR_OCCUPANCY.IRQ / SAMPLE_INTERVAL\r\nAVG_INGRESS_LATENCY:\r\n Average Latency of Requests through the \r\nIngress Queue in Uncore Clocks\r\nRxR_OCCUPANCY.IRQ / RxR_INSERTS.IRQ\r\nAVG_INGRESS_LATENCY_WHEN_NE:\r\n Average Latency of Requests through the \r\nIngress Queue in Uncore Clocks when Ingress \r\nQueue has at least one entry\r\nRxR_OCCUPANCY.IRQ / \r\nCOUNTER0_OCCUPANCY{edge_det,thresh=0x1}\r\nAVG_TOR_DRDS_MISS_WHEN_NE:\r\n Average Number of Data Read Entries that \r\nMiss the LLC when the TOR is not empty.\r\n(TOR_OCCUPANCY.MISS_OPCODE / \r\nCOUNTER0_OCCUPANCY{edge_det,thresh=0x1})) \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x182\r\nAVG_TOR_DRDS_WHEN_NE:\r\n Average Number of Data Read Entries when \r\nthe TOR is not empty.\r\n(TOR_OCCUPANCY.OPCODE / \r\nCOUNTER0_OCCUPANCY{edge_det,thresh=0x1}) \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x182\r\nAVG_TOR_DRD_HIT_LATENCY:\r\n Average Latency of Data Reads through the \r\nTOR that hit the LLC\r\n((TOR_OCCUPANCY.OPCODE - \r\nTOR_OCCUPANCY.MISS_OPCODE) / \r\n(TOR_INSERTS.OPCODE - TOR_INSERTS.MISS_OPCODE)) \r\nwith:Cn_MSR_PMON_BOX_FILTER.opc=0x182\r\nAVG_TOR_DRD_LATENCY:\r\n Average Latency of Data Read Entries \r\nmaking their way through the TOR\r\n(TOR_OCCUPANCY.OPCODE / TOR_INSERTS.OPCODE) \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x182\r\nAVG_TOR_DRD_LOC_MISS_LATENCY:\r\n Average Latency of Data Reads through the \r\nTOR that miss the LLC and were satisfied by \r\nLocal Memory\r\n(TOR_OCCUPANCY.MISS_OPCODE / \r\nTOR_INSERTS.MISS_OPCODE) \r\nwith:Cn_MSR_PMON_BOX_FILTER1.{opc,nid}={0x182,my\r\n_node}\r\nAVG_TOR_DRD_MISS_LATENCY:\r\n Average Latency of Data Reads through the \r\nTOR that miss the LLC\r\n(TOR_OCCUPANCY.MISS_OPCODE / \r\nTOR_INSERTS.MISS_OPCODE) \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x182\r\nAVG_TOR_DRD_REM_MISS_LATENCY:\r\n Average Latency of Data Reads through the \r\nTOR that miss the LLC and were satisfied by a \r\nRemote cache or Remote Memory\r\n(TOR_OCCUPANCY.MISS_OPCODE / \r\nTOR_INSERTS.MISS_OPCODE) \r\nwith:Cn_MSR_PMON_BOX_FILTER.{opc,nid}={0x182,other\r\n_nodes}\r\nCYC_INGRESS_BLOCKED:\r\n Cycles the Ingress Request Queue arbiter \r\nwas Blocked\r\nRxR_EXT_STARVED.IRQ / SAMPLE_INTERVAL\r\nSymbol Name Event \r\nCode Ctrs\r\nMax \r\nInc/\r\nCyc\r\nDescription",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/a713c6c8-d67a-40b1-94a3-13582ecd62e0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bfb0a6e1c3b45e1dcaa3a2b0b615a3f7b4d174c6da9cdc410ddb1657f8e431ea",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 310
      },
      {
        "segments": [
          {
            "segment_id": "76cad5eb-bf9c-44ac-955c-208dceeebc95",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 45,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 39\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\nCYC_USED_DNEVEN:\r\n Cycles Used in the Down direction, Even \r\npolarity\r\nRING_BL_USED.DN_EVEN / SAMPLE_INTERVAL\r\nCYC_USED_DNODD:\r\n Cycles Used in the Down direction, Odd \r\npolarity\r\nRING_BL_USED.DN_ODD / SAMPLE_INTERVAL\r\nCYC_USED_UPEVEN:\r\n Cycles Used in the Up direction, Even \r\npolarity\r\nRING_BL_USED.UP_EVEN / SAMPLE_INTERVAL\r\nCYC_USED_UPODD:\r\n Cycles Used in the Up direction, Odd \r\npolarity\r\nRING_BL_USED.UP_ODD / SAMPLE_INTERVAL\r\nFAST_STR_LLC_MISS:\r\n Number of ItoM (fast string) operations that \r\nmiss the LLC\r\nTOR_INSERTS.MISS_OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x1C8\r\nFAST_STR_LLC_REQ:\r\n Number of ItoM (fast string) operations that \r\nreference the LLC\r\nTOR_INSERTS.OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x1C8\r\nINGRESS_REJ_V_INS:\r\n Ratio of Ingress Request Entries that were \r\nrejected vs. inserted\r\nRxR_INSERTS.IRQ_REJECTED / RxR_INSERTS.IRQ\r\nIO_READ_BW:\r\n IO Read Bandwidth in MB - Disk or Network \r\nReads\r\n(TOR_INSERTS.OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x19C + \r\nTOR_INSERTS.OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER.opc=0x1E6) * 64 / \r\n1000000\r\nIO_WRITE_BW:\r\n IO Write Bandwidth in MB - Disk or Network \r\nWrites\r\n(TOR_INSERTS.OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x19E + \r\nTOR_INSERTS.OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER.opc=0x1E4) * 64 / \r\n1000000\r\nLLC_DRD_MISS_PCT:\r\n LLC Data Read miss ratio\r\nLLC_LOOKUP.DATA_READ \r\n(Cn_MSR_PMON_BOX_FILTER0.state=0x1) / \r\nLLC_LOOKUP.DATA_READ \r\n(Cn_MSR_PMON_BOX_FILTER.state=0x3F)\r\nLLC_DRD_RFO_MISS_TO_LOC_MEM:\r\n LLC Data Read and RFO misses satisfied by \r\nlocal memory.\r\n(TOR_INSERTS.NID_MISS_OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER1.{opc,nid}={0x182,my\r\n_node} + TOR_INSERTS.NID_MISS_OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER.{opc,nid}={0x180,my_\r\nnode}) / (TOR_INSERTS.NID_MISS_OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER.{opc,nid}={0x182,0xF} \r\n+ TOR_INSERTS.NID_MISS_OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER.{opc,nid}={0x180,0xF}\r\n)\r\nLLC_DRD_RFO_MISS_TO_REM_MEM:\r\n LLC Data Read and RFO misses satisfied by \r\na remote cache or remote memory.\r\n(TOR_INSERTS.NID_MISS_OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER1.{opc,nid}={0x182,oth\r\ner_nodes} + TOR_INSERTS.NID_MISS_OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER.{opc,nid}={0x180,other\r\n_nodes}) / (TOR_INSERTS.NID_MISS_OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER.{opc,nid}={0x182,0xF} \r\n+ TOR_INSERTS.NID_MISS_OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER.{opc,nid}={0x180,0xF}\r\n)\r\nLLC_MPI:\r\n LLC Misses Per Instruction (code, read, RFO \r\nand prefetches)\r\nLLC_LOOKUP.ANY \r\n(Cn_MSR_PMON_BOX_FILTER0.state=0x1) / \r\nINST_RETIRED.ALL (on Core)\r\nLLC_PCIE_DATA_BYTES:\r\n LLC write miss (disk/network reads) \r\nbandwidth in MB\r\nTOR_INSERTS.OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x19C * 64\r\nLLC_RFO_MISS_PCT:\r\n LLC RFO Miss Ratio\r\n(TOR_INSERTS.MISS_OPCODE / TOR_INSERTS.OPCODE) \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x180\r\nSymbol Name:\r\n Definition Equation",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/76cad5eb-bf9c-44ac-955c-208dceeebc95.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=13360f485c3d3cfe9c4e19abbbd31c16724d0e783086b418bbcedf6a8179b072",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 247
      },
      {
        "segments": [
          {
            "segment_id": "4266e1c2-ffb7-429e-b599-3ba8c6498f2c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 46,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n40 Reference Number: 329468-002\r\n2.3.7 CBO Box Performance Monitor Event List\r\nThe section enumerates performance monitoring events for the CBO Box.\r\nCLOCKTICKS\r\n• Title: Uncore Clocks\r\n• Category: UCLK Events\r\n• Event Code: 0x00\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nCOUNTER0_OCCUPANCY\r\n• Title: Counter 0 Occupancy\r\n• Category: OCCUPANCY Events\r\n• Event Code: 0x1f\r\n• Max. Inc/Cyc:. 20, Register Restrictions: 1-3\r\n• Definition: Since occupancy counts can only be captured in the Cbo's 0 counter, this event allows a \r\nuser to capture occupancy related information by filtering the Cb0 occupancy count captured in \r\nCounter 0. The filtering available is found in the control register - threshold, invert and edge \r\ndetect. E.g. setting threshold to 1 can effectively monitor how many cycles the monitored queue \r\nhas an entry.\r\nMEM_WB_BYTES:\r\n Data written back to memory in Number of \r\nBytes\r\nLLC_VICTIMS.M_STATE * 64\r\nPARTIAL_PCI_READS:\r\n Number of partial PCI reads\r\nTOR_INSERTS.OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x195\r\nPARTIAL_PCI_WRITES:\r\n Number of partial PCI writes\r\nTOR_INSERTS.OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x1E5\r\nPCIE_DATA_BYTES:\r\n Data from PCIe in Number of Bytes\r\n(TOR_INSERTS.OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x194 + \r\nTOR_INSERTS.OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER.opc=0x19C) * 64\r\nRING_THRU_DNEVEN_BYTES:\r\n Ring throughput in the Down direction, \r\nEven polarity in Bytes\r\nRING_BL_USED.DN_EVEN * 32\r\nRING_THRU_DNODD_BYTES:\r\n Ring throughput in the Down direction, Odd \r\npolarity in Bytes\r\nRING_BL_USED.DN_ODD * 32\r\nRING_THRU_UPEVEN_BYTES:\r\n Ring throughput in the Up direction, Even \r\npolarity in Bytes\r\nRING_BL_USED.UP_EVEN * 32\r\nRING_THRU_UPODD_BYTES:\r\n Ring throughput in the Up direction, Odd \r\npolarity in Bytes\r\nRING_BL_USED.UP_ODD * 32\r\nSTREAMED_FULL_STORES:\r\n Number of Streamed Store (of Full Cache \r\nLine) Transactions\r\nTOR_INSERTS.OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x18C\r\nSTREAMED_PART_STORES:\r\n Number of Streamed Store (of Partial Cache \r\nLine) Transactions\r\nTOR_INSERTS.OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x18D\r\nUC_READS:\r\n Uncacheable Read Transactions\r\nTOR_INSERTS.MISS_OPCODE \r\nwith:Cn_MSR_PMON_BOX_FILTER1.opc=0x187\r\nSymbol Name:\r\n Definition Equation",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/4266e1c2-ffb7-429e-b599-3ba8c6498f2c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f74c99216b3fa4aad0c6e3376ef3b931e3a32bbf48d6199935ddf022da85006b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 272
      },
      {
        "segments": [
          {
            "segment_id": "b3490562-25a9-4974-af35-5183bc76cbf5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 47,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 41\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\nLLC_LOOKUP\r\n• Title: Cache Lookups\r\n• Category: CACHE Events\r\n• Event Code: 0x34\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of times the LLC was accessed - this includes code, data, \r\nprefetches and hints coming from L2. This has numerous filters available. Note the non-standard \r\nfiltering equation. This event will count requests that lookup the cache multiple times with multi\u0002ple increments. One must ALWAYS set filter mask bit 0 and select a state or states to match. Oth\u0002erwise, the event will count nothing. CBoGlCtrl[22:17] bits correspond to [M'FMESI] state.\r\n• NOTE: Bit 0 of the umask must always be set for this event. This allows us to match a given \r\nstate (or states). The state is programmed in Cn_MSR_PMON_BOX_FILTER.state. The state field \r\nis a bit mask, so you can select (and monitor) multiple states at a time. 0 = I (miss), 1 = S, 2 = \r\nE, 3 = M, 4 = F. For example, if you wanted to monitor F and S hits, you could set 10010b in the \r\n5-bit state field. To monitor any lookup, set the field to 0x1F.\r\nLLC_VICTIMS\r\n• Title: Lines Victimized\r\n• Category: CACHE Events\r\n• Event Code: 0x37\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of lines that were victimized on a fill. This can be filtered by the \r\nstate that the line was in.\r\nTable 2-19. Unit Masks for LLC_LOOKUP\r\nExtension umask\r\n[15:8] Filter Dep Description\r\nDATA_READ b00000011 CBoFilter0[\r\n23:17]\r\nData Read Request\r\nRead transactions\r\nWRITE b00000101 CBoFilter0[\r\n23:17]\r\nWrite Requests\r\nWriteback transactions from L2 to the LLC This \r\nincludes all write transactions -- both Cacheable and \r\nUC.\r\nREMOTE_SNOOP b00001001 CBoFilter0[\r\n23:17]\r\nExternal Snoop Request\r\nFilters for only snoop requests coming from the remote \r\nsocket(s) through the IPQ.\r\nANY b00010001 CBoFilter0[\r\n23:17]\r\nAny Request\r\nFilters for any transaction originating from the IPQ or \r\nIRQ. This does not include lookups originating from the \r\nISMQ.\r\nNID b01000001 CBoFilter0[\r\n23:17]\r\nLookups that Match NID\r\nQualify one of the other subevents by the Target NID. \r\nThe NID is programmed in \r\nCn_MSR_PMON_BOX_FILTER.nid. In conjunction with \r\nSTATE = I, it is possible to monitor misses to specific \r\nNIDs in the system.\r\nTable 2-20. Unit Masks for LLC_VICTIMS\r\nExtension umask\r\n[15:8] Filter Dep Description\r\nM_STATE bxxxxxxx1 Lines in M state\r\nE_STATE bxxxxxx1x Lines in E state\r\nS_STATE bxxxxx1xx Lines in S State",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/b3490562-25a9-4974-af35-5183bc76cbf5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b9e690c4f28c7e6a83a0921989b52376de81bb7593a02460fa92cca5004c1267",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 405
      },
      {
        "segments": [
          {
            "segment_id": "045cb8e0-6dc3-4df0-9f98-0b03f4f84ade",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 48,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n42 Reference Number: 329468-002\r\nMISC\r\n• Title: Cbo Misc\r\n• Category: MISC Events\r\n• Event Code: 0x39\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Miscellaneous events in the Cbo.\r\nRING_AD_USED\r\n• Title: AD Ring In Use\r\n• Category: RING Events\r\n• Event Code: 0x1b\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 2-3\r\n• Definition: Counts the number of cycles that the AD ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sunk, but does not include when \r\npackets are being sent from the ring stop. We really have two rings -- a clockwise ring and a coun\u0002ter-clockwise ring. On the left side of the ring, the “UP” direction is on the clockwise ring and “DN” \r\nis on the counter-clockwise ring. On the right side of the ring, this is reversed. The first half of the \r\nCBos are on the left side of the ring, and the 2nd half are on the right side of the ring. In other \r\nwords (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they \r\nare on opposite sides of the ring.\r\n• NOTE: On a 2 column implementation (e.g. 10 cores) UP_EVEN is actually \r\nUP_VR0_EVEN+UP_VR1_EVEN (similarly for ODD/DN). In any cycle, a ring stop can see up to one \r\npacket moving in the UP direction and one packet moving in the DN direction.\r\nMISS bxxxx1xxx\r\nNID bx1xxxxxx CBoFilter1[\r\n15:0]\r\nVictimized Lines that Match NID\r\nQualify one of the other subevents by the Target \r\nNID. The NID is programmed in \r\nCn_MSR_PMON_BOX_FILTER.nid. In conjunction \r\nwith STATE = I, it is possible to monitor misses to \r\nspecific NIDs in the system.\r\nTable 2-21. Unit Masks for MISC\r\nExtension umask\r\n[15:8] Description\r\nRSPI_WAS_FSE bxxxxxxx1 Silent Snoop Eviction\r\nCounts the number of times when a Snoop hit in FSE states and \r\ntriggered a silent eviction. This is useful because this information is \r\nlost in the PRE encodings.\r\nWC_ALIASING bxxxxxx1x Write Combining Aliasing\r\nCounts the number of times that a USWC write (WCIL(F)) \r\ntransaction hit in the LLC in M state, triggering a WBMtoI followed \r\nby the USWC write. This occurs when there is WC aliasing.\r\nSTARTED bxxxxx1xx\r\nRFO_HIT_S bxxxx1xxx RFO HitS\r\nNumber of times that an RFO hit in S state. This is useful for \r\ndetermining if it might be good for a workload to use RspIWB \r\ninstead of RspSWB.\r\nTable 2-20. Unit Masks for LLC_VICTIMS\r\nExtension umask\r\n[15:8] Filter Dep Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/045cb8e0-6dc3-4df0-9f98-0b03f4f84ade.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9c4c2a97fe9269105ed788de3b7901aab372b497f1872b0eddb0ed4837d38ef3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 424
      },
      {
        "segments": [
          {
            "segment_id": "9ce62f82-410a-4483-9c9b-6cc2d2d34ca6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 49,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 43\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\nRING_AK_USED\r\n• Title: AK Ring In Use\r\n• Category: RING Events\r\n• Event Code: 0x1c\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 2-3\r\n• Definition: Counts the number of cycles that the AK ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sunk, but does not include \r\nwhen packets are being sent from the ring stop.We really have two rings -- a clockwise ring and a \r\ncounter-clockwise ring. On the left side of the ring, the “UP” direction is on the clockwise ring and \r\n“DN” is on the counter-clockwise ring. On the right side of the ring, this is reversed. The first half \r\nof the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring. In \r\nother words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD \r\nbecause they are on opposite sides of the ring.\r\n• NOTE: On a 2 column implementation (e.g. 10C) UP_EVEN is actually \r\nUP_VR0_EVEN+UP_VR1_EVEN (similarly for ODD/DN). In any cycle, a ring stop can see up to one \r\npacket moving in the UP direction and one packet moving in the DN direction.\r\nTable 2-22. Unit Masks for RING_AD_USED\r\nExtension umask\r\n[15:8] Description\r\nUP_VR0_EVEN bxxxxxxx1 Up and Even on Vring 0\r\nFilters for the Up and Even ring polarity on Virtual Ring 0.\r\nUP_VR0_ODD bxxxxxx1x Up and Odd on Vring 0\r\nFilters for the Up and Odd ring polarity on Virtual Ring 0.\r\nDOWN_VR0_EVEN bxxxxx1xx Down and Even on Vring 0\r\nFilters for the Down and Even ring polarity on Virtual Ring 0.\r\nDOWN_VR0_ODD bxxxx1xxx Down and Odd on Vring 0\r\nFilters for the Down and Odd ring polarity on Virtual Ring 0.\r\nUP_VR1_EVEN bxxx1xxxx Up and Even on VRing 1\r\nFilters for the Up and Even ring polarity on Virtual Ring 1.\r\nUP_VR1_ODD bxx1xxxxx Up and Odd on VRing 1\r\nFilters for the Up and Odd ring polarity on Virtual Ring 1.\r\nUP b00110011 Up\r\nDOWN_VR1_EVEN bx1xxxxxx Down and Even on VRing 1\r\nFilters for the Down and Even ring polarity on Virtual Ring 1.\r\nDOWN_VR1_ODD b1xxxxxxx Down and Odd on VRing 1\r\nFilters for the Down and Odd ring polarity on Virtual Ring 1.\r\nDOWN b11001100 Down\r\nTable 2-23. Unit Masks for RING_AK_USED\r\nExtension umask\r\n[15:8] Description\r\nUP_VR0_EVEN bxxxxxxx1 Up and Even on Vring 0\r\nFilters for the Up and Even ring polarity on Virtual Ring 0.\r\nUP_VR0_ODD bxxxxxx1x Up and Odd on Vring 0\r\nFilters for the Up and Odd ring polarity on Virtual Ring 0.\r\nDOWN_VR0_EVEN bxxxxx1xx Down and Even on Vring 0\r\nFilters for the Down and Even ring polarity on Virtual Ring 0.\r\nDOWN_VR0_ODD bxxxx1xxx Down and Odd on Vring 0\r\nFilters for the Down and Odd ring polarity on Virtual Ring 0.\r\nUP_VR1_EVEN bxxx1xxxx Up and Even on VRing 1\r\nFilters for the Up and Even ring polarity on Virtual Ring 1.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/9ce62f82-410a-4483-9c9b-6cc2d2d34ca6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8b698fc93a31aeb7bda69c31a75c7c79e3c8b9ab7f99bd07e41e633715f9cd61",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 507
      },
      {
        "segments": [
          {
            "segment_id": "00fee04e-16f5-4ae1-86f6-9f5fbed16cb9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 50,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n44 Reference Number: 329468-002\r\nRING_BL_USED\r\n• Title: BL Ring in Use\r\n• Category: RING Events\r\n• Event Code: 0x1d\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 2-3\r\n• Definition: Counts the number of cycles that the BL ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sunk, but does not include when \r\npackets are being sent from the ring stop.We really have two rings -- a clockwise ring and a coun\u0002ter-clockwise ring. On the left side of the ring, the “UP” direction is on the clockwise ring and “DN” \r\nis on the counter-clockwise ring. On the right side of the ring, this is reversed. The first half of the \r\nCBos are on the left side of the ring, and the 2nd half are on the right side of the ring. In other \r\nwords (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they \r\nare on opposite sides of the ring.\r\n• NOTE: On a 2 column implementation (e.g. 10C) UP_EVEN is actually \r\nUP_VR0_EVEN+UP_VR1_EVEN (similarly for ODD/DN). In any cycle, a ring stop can see up to one \r\npacket moving in the UP direction and one packet moving in the DN direction.\r\nUP_VR1_ODD bxx1xxxxx Up and Odd on VRing 1\r\nFilters for the Up and Odd ring polarity on Virtual Ring 1.\r\nUP b00110011 Up\r\nDOWN_VR1_EVEN bx1xxxxxx Down and Even on VRing 1\r\nFilters for the Down and Even ring polarity on Virtual Ring 1.\r\nDOWN_VR1_ODD b1xxxxxxx Down and Odd on VRing 1\r\nFilters for the Down and Odd ring polarity on Virtual Ring 1.\r\nDOWN b11001100 Down\r\nTable 2-24. Unit Masks for RING_BL_USED\r\nExtension umask\r\n[15:8] Description\r\nUP_VR0_EVEN bxxxxxxx1 Up and Even on Vring 0\r\nFilters for the Up and Even ring polarity on Virtual Ring 0.\r\nUP_VR0_ODD bxxxxxx1x Up and Odd on Vring 0\r\nFilters for the Up and Odd ring polarity on Virtual Ring 0.\r\nDOWN_VR0_EVEN bxxxxx1xx Down and Even on Vring 0\r\nFilters for the Down and Even ring polarity on Virtual Ring 0.\r\nDOWN_VR0_ODD bxxxx1xxx Down and Odd on Vring 0\r\nFilters for the Down and Odd ring polarity on Virtual Ring 0.\r\nUP_VR1_EVEN bxxx1xxxx Up and Even on VRing 1\r\nFilters for the Up and Even ring polarity on Virtual Ring 1.\r\nUP_VR1_ODD bxx1xxxxx Up and Odd on VRing 1\r\nFilters for the Up and Odd ring polarity on Virtual Ring 1.\r\nUP b00110011 Up\r\nDOWN_VR1_EVEN bx1xxxxxx Down and Even on VRing 1\r\nFilters for the Down and Even ring polarity on Virtual Ring 1.\r\nDOWN_VR1_ODD b1xxxxxxx Down and Odd on VRing 1\r\nFilters for the Down and Odd ring polarity on Virtual Ring 1.\r\nDOWN b11001100 Down\r\nTable 2-23. Unit Masks for RING_AK_USED\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/00fee04e-16f5-4ae1-86f6-9f5fbed16cb9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d239a91c2e7cf040153ae0fd748d997ea20f4e6359ca94687891f999cdd13190",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 473
      },
      {
        "segments": [
          {
            "segment_id": "00e14249-5752-4521-9e09-5ba8eff6f8ce",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 51,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 45\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\nRING_BOUNCES\r\n• Title: Number of LLC responses that bounced on the Ring.\r\n• Category: RING Events\r\n• Event Code: 0x05\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: \r\nRING_IV_USED\r\n• Title: IV Ring in Use\r\n• Category: RING Events\r\n• Event Code: 0x1e\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 2-3\r\n• Definition: Counts the number of cycles that the IV ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sunk, but does not include \r\nwhen packets are being sent from the ring stop.\r\nRING_SRC_THRTL\r\n• Title: \r\n• Category: RING Events\r\n• Event Code: 0x07\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: \r\nRxR_EXT_STARVED\r\n• Title: Ingress Arbiter Blocking Cycles\r\n• Category: INGRESS Events\r\n• Event Code: 0x12\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts cycles in external starvation. This occurs when one of the ingress queues is \r\nbeing starved by the other queues.\r\nTable 2-25. Unit Masks for RING_BOUNCES\r\nExtension umask\r\n[15:8] Description\r\nAD_IRQ bxxxxxx1x\r\nAK bxxxxx1xx Acknowledgements to core\r\nBL bxxxx1xxx Data Responses to core\r\nIV bxxx1xxxx Snoops of processor's cache.\r\nTable 2-26. Unit Masks for RING_IV_USED\r\nExtension umask\r\n[15:8] Description\r\nANY b00001111 Any\r\nFilters any polarity\r\nUP b00110011 Up\r\nFilters for Up polarity\r\nDOWN b11001100 Down\r\nFilters for Down polarity",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/00e14249-5752-4521-9e09-5ba8eff6f8ce.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d4cfc529c0bc1fb00371636a25d35f811dd73de2054639e2198721f26a5bf153",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 230
      },
      {
        "segments": [
          {
            "segment_id": "d3489af8-b465-42a0-ad23-e0f2bdf3624d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 52,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n46 Reference Number: 329468-002\r\nRxR_INSERTS\r\n• Title: Ingress Allocations\r\n• Category: INGRESS Events\r\n• Event Code: 0x13\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts number of allocations per cycle into the specified Ingress queue.\r\n• NOTE: IRQ_REJECTED should not be ORed with the other umasks.\r\nRxR_IPQ_RETRY\r\n• Title: Probe Queue Retries\r\n• Category: INGRESS_RETRY Events\r\n• Event Code: 0x31\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Number of times a snoop (probe) request had to retry. Filters exist to cover some of \r\nthe common cases retries.\r\nTable 2-27. Unit Masks for RxR_EXT_STARVED\r\nExtension umask\r\n[15:8] Description\r\nIRQ bxxxxxxx1 IPQ\r\nIRQ is externally starved and therefore we are blocking the IPQ.\r\nIPQ bxxxxxx1x IRQ\r\nIPQ is externally starved and therefore we are blocking the IRQ.\r\nPRQ bxxxxx1xx IRQ is blocking the ingress queue and causing the starvation.\r\nISMQ_BIDS bxxxx1xxx ISMQ_BID\r\nNumber of times that the ISMQ Bid.\r\nTable 2-28. Unit Masks for RxR_INSERTS\r\nExtension umask\r\n[15:8] Description\r\nIRQ bxxxxxxx1 IRQ\r\nIRQ_REJ bxxxxxx1x IRQ Rejected\r\nIPQ bxxxxx1xx IPQ\r\nVFIFO bxxx1xxxx VFIFO\r\nCounts the number of allocations into the IRQ Ordering FIFO. In \r\nthe prior generation uncore in Intel Xeon processor E5-2600 \r\nProduct Family, it is necessary to keep IO requests in order. \r\nTherefore, they are allocated into an ordering FIFO that sits next \r\nto the IRQ, and must be satisfied from the FIFO in order (with \r\nrespect to each other). This event, in conjunction with the \r\nOccupancy Accumulator event, can be used to calculate average \r\nlifetime in the FIFO. Transactions are allocated into the FIFO as \r\nsoon as they enter the Cachebo (and the IRQ) and are \r\ndeallocated from the FIFO as soon as they are deallocated from \r\nthe IRQ.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/d3489af8-b465-42a0-ad23-e0f2bdf3624d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3a9a5b0cedc4ff36ae90b645ec4409a78977781f4884eb5c46a6a7d126235413",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 291
      },
      {
        "segments": [
          {
            "segment_id": "f5ad1897-fbef-4463-9144-a8c76d7a1db8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 53,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 47\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\nRxR_IRQ_RETRY\r\n• Title: Ingress Request Queue Rejects\r\n• Category: INGRESS_RETRY Events\r\n• Event Code: 0x32\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: \r\nTable 2-29. Unit Masks for RxR_IPQ_RETRY\r\nExtension umask\r\n[15:8] Description\r\nANY bxxxxxxx1 Any Reject\r\nCounts the number of times that a request form the IPQ was \r\nretried because of a TOR reject. TOR rejects from the IPQ can be \r\ncaused by the Egress being full or Address Conflicts.\r\nFULL bxxxxxx1x No Egress Credits\r\nCounts the number of times that a request form the IPQ was \r\nretried because of a TOR reject from the Egress being full. IPQ \r\nrequests make use of the AD Egress for regular responses, the \r\nBL egress to forward data, and the AK egress to return credits.\r\nADDR_CONFLICT bxxxxx1xx Address Conflict\r\nCounts the number of times that a request form the IPQ was \r\nretried because of a TOR reject from an address conflicts. \r\nAddress conflicts out of the IPQ should be rare. They will \r\ngenerally only occur if two different sockets are sending requests \r\nto the same address at the same time. This is a true “conflict” \r\ncase, unlike the IPQ Address Conflict which is commonly caused \r\nby prefetching characteristics.\r\nQPI_CREDITS bxxx1xxxx No QPI Credits\r\nTable 2-30. Unit Masks for RxR_IRQ_RETRY\r\nExtension umask\r\n[15:8] Description\r\nANY bxxxxxxx1 Any Reject\r\nCounts the number of IRQ retries that occur. Requests from the \r\nIRQ are retried if they are rejected from the TOR pipeline for a \r\nvariety of reasons. Some of the most common reasons include if \r\nthe Egress is full, there are no RTIDs, or there is a Physical \r\nAddress match to another outstanding request.\r\nFULL bxxxxxx1x No Egress Credits\r\nCounts the number of times that a request from the IRQ was \r\nretried because it failed to acquire an entry in the Egress. The \r\negress is the buffer that queues up for allocating onto the ring. \r\nIRQ requests can make use of all four rings and all four \r\nEgresses. If any of the queues that a given request needs to \r\nmake use of are full, the request will be retried.\r\nADDR_CONFLICT bxxxxx1xx Address Conflict\r\nCounts the number of times that a request from the IRQ was \r\nretried because of an address match in the TOR. In order to \r\nmaintain coherency, requests to the same address are not \r\nallowed to pass each other up in the Cbo. Therefore, if there is \r\nan outstanding request to a given address, one cannot issue \r\nanother request to that address until it is complete. This comes \r\nup most commonly with prefetches. Outstanding prefetches \r\noccasionally will not complete their memory fetch and a demand \r\nrequest to the same address will then sit in the IRQ and get \r\nretried until the prefetch fills the data into the LLC. Therefore, it \r\nwill not be uncommon to see this case in high bandwidth \r\nstreaming workloads when the LLC Prefetcher in the core is \r\nenabled.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/f5ad1897-fbef-4463-9144-a8c76d7a1db8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b1859d26e3c969abf03dee630ada48612a22bd31ed4ff060f42b4b91f2cd6c16",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 492
      },
      {
        "segments": [
          {
            "segment_id": "9ebe2bec-e7fb-4c61-b922-166f292f7aa5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 54,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n48 Reference Number: 329468-002\r\nRxR_ISMQ_RETRY\r\n• Title: ISMQ Retries\r\n• Category: INGRESS_RETRY Events\r\n• Event Code: 0x33\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Number of times a transaction flowing through the ISMQ had to retry. Transaction pass \r\nthrough the ISMQ as responses for requests that already exist in the Cbo. Some examples include: \r\nwhen data is returned or when snoop responses come back from the cores.\r\nRTID bxxxx1xxx No RTIDs\r\nCounts the number of times that requests from the IRQ were \r\nretried because there were no RTIDs available. RTIDs are \r\nrequired after a request misses the LLC and needs to send \r\nsnoops and/or requests to memory. If there are no RTIDs \r\navailable, requests will queue up in the IRQ and retry until one \r\nbecomes available. Note that there are multiple RTID pools for \r\nthe different sockets. There may be cases where the local RTIDs \r\nare all used, but requests destined for remote memory can still \r\nacquire an RTID because there are remote RTIDs available. This \r\nevent does not provide any filtering for this case.\r\nQPI_CREDITS bxxx1xxxx No QPI Credits\r\nNumber of requests rejects because of lack of QPI Ingress \r\ncredits. These credits are required in order to send transactions \r\nto the QPI agent. Please see the QPI_IGR_CREDITS events for \r\nmore information.\r\nIIO_CREDITS bxx1xxxxx No IIO Credits\r\nNumber of times a request attempted to acquire the NCS/NCB \r\ncredit for sending messages on BL to the IIO. There is a single \r\ncredit in each CBo that is shared between the NCS and NCB \r\nmessage classes for sending transactions on the BL ring (such as \r\nread data) to the IIO.\r\nTable 2-31. Unit Masks for RxR_ISMQ_RETRY\r\nExtension umask\r\n[15:8] Description\r\nANY bxxxxxxx1 Any Reject\r\nCounts the total number of times that a request from the ISMQ \r\nretried because of a TOR reject. ISMQ requests generally will not \r\nneed to retry (or at least ISMQ retries are less common than \r\nIRQ retries). ISMQ requests will retry if they are not able to \r\nacquire a needed Egress credit to get onto the ring, or for cache \r\nevictions that need to acquire an RTID. Most ISMQ requests \r\nalready have an RTID, so eviction retries will be less common \r\nhere.\r\nFULL bxxxxxx1x No Egress Credits\r\nCounts the number of times that a request from the ISMQ \r\nretried because of a TOR reject caused by a lack of Egress \r\ncredits. The egress is the buffer that queues up for allocating \r\nonto the ring. If any of the Egress queues that a given request \r\nneeds to make use of are full, the request will be retried.\r\nRTID bxxxx1xxx No RTIDs\r\nCounts the number of times that a request from the ISMQ \r\nretried because of a TOR reject caused by no RTIDs. M-state \r\ncache evictions are serviced through the ISMQ, and must \r\nacquire an RTID in order to write back to memory. If no RTIDs \r\nare available, they will be retried.\r\nQPI_CREDITS bxxx1xxxx No QPI Credits\r\nTable 2-30. Unit Masks for RxR_IRQ_RETRY\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/9ebe2bec-e7fb-4c61-b922-166f292f7aa5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=10a3052a9744155b4d33c699c84f496b737b36be23d486cba4d1a675a04c3e81",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 507
      },
      {
        "segments": [
          {
            "segment_id": "fbe79258-36e2-4e8c-8b48-b0a04b3ac902",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 55,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 49\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\nRxR_OCCUPANCY\r\n• Title: Ingress Occupancy\r\n• Category: INGRESS Events\r\n• Event Code: 0x11\r\n• Max. Inc/Cyc:. 20, Register Restrictions: 0\r\n• Definition: Counts number of entries in the specified Ingress queue in each cycle.\r\n• NOTE: IRQ_REJECTED should not be Ored with the other umasks.\r\nTOR_INSERTS\r\n• Title: TOR Inserts\r\n• Category: TOR Events\r\n• Event Code: 0x35\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of entries successfully inserted into the TOR that match qualifica\u0002tions specified by the subevent. There are a number of subevent 'filters' but only a subset of the \r\nsubevent combinations are valid. Subevents that require an opcode or NID match require the \r\nCn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set. If, for example, one wanted to count DRD \r\nLocal Misses, one should select “MISS_OPC_MATCH” and set Cn_MSR_PMON_BOX_FILTER.opc to \r\nDRD (0x182).\r\nIIO_CREDITS bxx1xxxxx No IIO Credits\r\nNumber of times a request attempted to acquire the NCS/NCB \r\ncredit for sending messages on BL to the IIO. There is a single \r\ncredit in each CBo that is shared between the NCS and NCB \r\nmessage classes for sending transactions on the BL ring (such as \r\nread data) to the IIO.\r\nWB_CREDITS b1xxxxxxx No WB Credits\r\nRetries of writes to local memory due to lack of HT WB credits\r\nTable 2-32. Unit Masks for RxR_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nIRQ b00000001 IRQ\r\nIRQ_REJECTED b00000010 IRQ Rejected\r\nIPQ b00000100 IPQ\r\nVFIFO b00010000 VFIFO\r\nAccumulates the number of used entries in the IRQ Ordering \r\nFIFO in each cycle. In the prior generation uncore in Intel Xeon \r\nprocessor E5-2600 Product Family, it is necessary to keep IO \r\nrequests in order. Therefore, they are allocated into an ordering \r\nFIFO that sits next to the IRQ, and must be satisfied from the \r\nFIFO in order (with respect to each other). This event, in \r\nconjunction with the Allocations event, can be used to calculate \r\naverage lifetime in the FIFO. This event can be used in \r\nconjunction with the Not Empty event to calculate average \r\nqueue occupancy. Transactions are allocated into the FIFO as \r\nsoon as they enter the Cachebo (and the IRQ) and are \r\ndeallocated from the FIFO as soon as they are deallocated from \r\nthe IRQ.\r\nTable 2-31. Unit Masks for RxR_ISMQ_RETRY\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/fbe79258-36e2-4e8c-8b48-b0a04b3ac902.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0db6dfa088e59fd114bcec1bd8a76d3a536003bd6700a0dd831927c1243bcd23",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 385
      },
      {
        "segments": [
          {
            "segment_id": "7ed3a3ef-94a3-4197-b7e4-8d97637f547e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 56,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n50 Reference Number: 329468-002\r\nTable 2-33. Unit Masks for TOR_INSERTS\r\nExtension umask\r\n[15:8] Filter Dep Description\r\nOPCODE b00000001 CBoFilter1[\r\n28:20]\r\nOpcode Match\r\nTransactions inserted into the TOR that match an \r\nopcode (matched by \r\nCn_MSR_PMON_BOX_FILTER.opc)\r\nMISS_OPCODE b00000011 CBoFilter1[\r\n28:20]\r\nMiss Opcode Match\r\nMiss transactions inserted into the TOR that match \r\nan opcode.\r\nEVICTION b00000100 Evictions\r\nEviction transactions inserted into the TOR. \r\nEvictions can be quick, such as when the line is in \r\nthe F, S, or E states and no core valid bits are set. \r\nThey can also be longer if either CV bits are set \r\n(so the cores need to be snooped) and/or if there \r\nis a HitM (in which case it is necessary to write the \r\nrequest out to memory).\r\nALL b00001000 All\r\nAll transactions inserted into the TOR. This \r\nincludes requests that reside in the TOR for a \r\nshort time, such as LLC Hits that do not need to \r\nsnoop cores or requests that get rejected and \r\nhave to be retried through one of the ingress \r\nqueues. The TOR is more commonly a bottleneck \r\nin skews with smaller core counts, where the ratio \r\nof RTIDs to TOR entries is larger. Note that there \r\nare reserved TOR entries for various request \r\ntypes, so it is possible that a given request type \r\nbe blocked with an occupancy that is less than 20. \r\nAlso note that generally requests will not be able \r\nto arbitrate into the TOR pipeline if there are no \r\navailable TOR slots.\r\nWB b00010000 Writebacks\r\nWrite transactions inserted into the TOR. This \r\ndoes not include “RFO”, but actual operations that \r\ncontain data being sent from the core.\r\nLOCAL_OPCODE b00100001 CBoFilter1[\r\n28:20]\r\nLocal Memory - Opcode Matched\r\nAll transactions, satisfied by an opcode, inserted \r\ninto the TOR that are satisfied by locally HOMed \r\nmemory.\r\nMISS_LOCAL_OPCODE b00100011 CBoFilter1[\r\n28:20]\r\nMisses to Local Memory - Opcode Matched\r\nMiss transactions, satisfied by an opcode, inserted \r\ninto the TOR that are satisfied by locally HOMed \r\nmemory.\r\nLOCAL b00101000 Local Memory\r\nAll transactions inserted into the TOR that are \r\nsatisfied by locally HOMed memory.\r\nMISS_LOCAL b00101010 Misses to Local Memory\r\nMiss transactions inserted into the TOR that are \r\nsatisfied by locally HOMed memory.\r\nNID_OPCODE b01000001 CBoFilter1[\r\n28:20], \r\nCBoFilter1[\r\n15:0]\r\nNID and Opcode Matched\r\nTransactions inserted into the TOR that match a \r\nNID and an opcode.\r\nNID_MISS_OPCODE b01000011 CBoFilter1[\r\n28:20], \r\nCBoFilter1[\r\n15:0]\r\nNID and Opcode Matched Miss\r\nMiss transactions inserted into the TOR that match \r\na NID and an opcode.\r\nNID_EVICTION b01000100 CBoFilter1[\r\n15:0]\r\nNID Matched Evictions\r\nNID matched eviction transactions inserted into \r\nthe TOR.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/7ed3a3ef-94a3-4197-b7e4-8d97637f547e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9049c0f64fc5f3017c5fded19b36c30fd22fbffa3b0fd3f565e0619f3135a05f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 428
      },
      {
        "segments": [
          {
            "segment_id": "fad4a24a-be87-4d8c-a54d-4ef3e71cf746",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 57,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 51\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\nTOR_OCCUPANCY\r\n• Title: TOR Occupancy\r\n• Category: TOR Events\r\n• Event Code: 0x36\r\n• Max. Inc/Cyc:. 20, Register Restrictions: 0\r\n• Definition: For each cycle, this event accumulates the number of valid entries in the TOR that \r\nmatch qualifications specified by the subevent. There are a number of subevent 'filters' but only \r\na subset of the subevent combinations are valid. Subevents that require an opcode or NID match \r\nrequire the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set. If, for example, one wanted to \r\ncount DRD Local Misses, one should select “MISS_OPC_MATCH” and set \r\nCn_MSR_PMON_BOX_FILTER.opc to DRD (0x182).\r\nNID_ALL b01001000 CBoFilter1[\r\n15:0]\r\nNID Matched\r\nAll NID matched (matches an RTID destination) \r\ntransactions inserted into the TOR. The NID is \r\nprogrammed in Cn_MSR_PMON_BOX_FILTER.nid. \r\nIn conjunction with STATE = I, it is possible to \r\nmonitor misses to specific NIDs in the system.\r\nNID_MISS_ALL b01001010 CBoFilter1[\r\n15:0]\r\nNID Matched Miss All\r\nAll NID matched miss requests that were inserted \r\ninto the TOR.\r\nNID_WB b01010000 CBoFilter1[\r\n15:0]\r\nNID Matched Writebacks\r\nNID matched write transactions inserted into the \r\nTOR.\r\nREMOTE_OPCODE b10000001 CBoFilter1[\r\n28:20]\r\nRemote Memory - Opcode Matched\r\nAll transactions, satisfied by an opcode, inserted \r\ninto the TOR that are satisfied by remote caches \r\nor remote memory.\r\nMISS_REMOTE_OPCODE b10000011 CBoFilter1[\r\n28:20]\r\nMisses to Remote Memory - Opcode Matched\r\nMiss transactions, satisfied by an opcode, inserted \r\ninto the TOR that are satisfied by remote caches \r\nor remote memory.\r\nREMOTE b10001000 Remote Memory\r\nAll transactions inserted into the TOR that are \r\nsatisfied by remote caches or remote memory.\r\nMISS_REMOTE b10001010 Misses to Remote Memory\r\nMiss transactions inserted into the TOR that are \r\nsatisfied by remote caches or remote memory.\r\nTable 2-34. Unit Masks for TOR_OCCUPANCY\r\nExtension umask\r\n[15:8] Filter Dep Description\r\nOPCODE b00000001 CBoFilter1[\r\n28:20]\r\nOpcode Match\r\nTOR entries that match an opcode (matched by \r\nCn_MSR_PMON_BOX_FILTER.opc).\r\nMISS_OPCODE b00000011 CBoFilter1[\r\n28:20]\r\nMiss Opcode Match\r\nTOR entries for miss transactions that match an \r\nopcode. This generally means that the request was \r\nsent to memory or MMIO.\r\nEVICTION b00000100 Evictions\r\nNumber of outstanding eviction transactions in the \r\nTOR. Evictions can be quick, such as when the line \r\nis in the F, S, or E states and no core valid bits are \r\nset. They can also be longer if either CV bits are \r\nset (so the cores need to be snooped) and/or if \r\nthere is a HitM (in which case it is necessary to \r\nwrite the request out to memory).\r\nTable 2-33. Unit Masks for TOR_INSERTS\r\nExtension umask\r\n[15:8] Filter Dep Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/fad4a24a-be87-4d8c-a54d-4ef3e71cf746.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a34488278a0b88b1e308e2c19b7c92b87d14abd13a0cf8140b12a11565621e01",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 421
      },
      {
        "segments": [
          {
            "segment_id": "3a745bf2-50a1-4687-821c-5492c5984a86",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 58,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\n52 Reference Number: 329468-002\r\nALL b00001000 Any\r\nAll valid TOR entries. This includes requests that \r\nreside in the TOR for a short time, such as LLC Hits \r\nthat do not need to snoop cores or requests that \r\nget rejected and have to be retried through one of \r\nthe ingress queues. The TOR is more commonly a \r\nbottleneck in skews with smaller core counts, \r\nwhere the ratio of RTIDs to TOR entries is larger. \r\nNote that there are reserved TOR entries for \r\nvarious request types, so it is possible that a given \r\nrequest type be blocked with an occupancy that is \r\nless than 20. Also note that generally requests will \r\nnot be able to arbitrate into the TOR pipeline if \r\nthere are no available TOR slots.\r\nMISS_ALL b00001010 Miss All\r\nNumber of outstanding miss requests in the TOR. \r\n'Miss' means the allocation requires an RTID. This \r\ngenerally means that the request was sent to \r\nmemory or MMIO.\r\nWB b00010000 Writebacks\r\nWrite transactions in the TOR. This does not \r\ninclude “RFO”, but actual operations that contain \r\ndata being sent from the core.\r\nLOCAL_OPCODE b00100001 CBoFilter1[\r\n28:20]\r\nLocal Memory - Opcode Matched\r\nNumber of outstanding transactions, satisfied by \r\nan opcode, in the TOR that are satisfied by locally \r\nHOMed memory.\r\nMISS_LOCAL_OPCODE b00100011 CBoFilter1[\r\n28:20]\r\nMisses to Local Memory - Opcode Matched\r\nNumber of outstanding Miss transactions, satisfied \r\nby an opcode, in the TOR that are satisfied by \r\nlocally HOMed memory.\r\nLOCAL b00101000\r\nMISS_LOCAL b00101010\r\nNID_OPCODE b01000001 CBoFilter1[\r\n28:20], \r\nCBoFilter1[\r\n15:0]\r\nNID and Opcode Matched\r\nTOR entries that match a NID and an opcode.\r\nNID_MISS_OPCODE b01000011 CBoFilter1[\r\n28:20], \r\nCBoFilter1[\r\n15:0]\r\nNID and Opcode Matched Miss\r\nNumber of outstanding Miss requests in the TOR \r\nthat match a NID and an opcode.\r\nNID_EVICTION b01000100 CBoFilter1[\r\n15:0]\r\nNID Matched Evictions\r\nNumber of outstanding NID matched eviction \r\ntransactions in the TOR.\r\nNID_ALL b01001000 CBoFilter1[\r\n15:0]\r\nNID Matched\r\nNumber of NID matched outstanding requests in \r\nthe TOR. The NID is programmed in \r\nCn_MSR_PMON_BOX_FILTER.nid.In conjunction \r\nwith STATE = I, it is possible to monitor misses to \r\nspecific NIDs in the system.\r\nNID_MISS_ALL b01001010 CBoFilter1[\r\n15:0]\r\nNID Matched\r\nNumber of outstanding Miss requests in the TOR \r\nthat match a NID.\r\nNID_WB b01010000 CBoFilter1[\r\n15:0]\r\nNID Matched Writebacks\r\nNID matched write transactions in the TOR.\r\nREMOTE_OPCODE b10000001 CBoFilter1[\r\n28:20]\r\nRemote Memory - Opcode Matched\r\nNumber of outstanding transactions, satisfied by \r\nan opcode, in the TOR that are satisfied by remote \r\ncaches or remote memory.\r\nTable 2-34. Unit Masks for TOR_OCCUPANCY\r\nExtension umask\r\n[15:8] Filter Dep Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/3a745bf2-50a1-4687-821c-5492c5984a86.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=84d34569db8e31f142d2c98741687a3cd8a616ba72be17e9191e8e0c14d1f12f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 422
      },
      {
        "segments": [
          {
            "segment_id": "7bdc0958-2a5e-4c12-9859-8f0789a251a1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 59,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 53\r\nUncore Performance Monitoring\r\nCacheing Agent (Cbo) Performance Monitoring\r\nTxR_ADS_USED\r\n• Title: \r\n• Category: EGRESS Events\r\n• Event Code: 0x04\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: \r\nTxR_INSERTS\r\n• Title: Egress Allocations\r\n• Category: EGRESS Events\r\n• Event Code: 0x02\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Number of allocations into the Cbo Egress. The Egress is used to queue up requests \r\ndestined for the ring.\r\nMISS_REMOTE_OPCODE b10000011 CBoFilter1[\r\n28:20]\r\nMisses to Remote Memory - Opcode Matched\r\nNumber of outstanding Miss transactions, satisfied \r\nby an opcode, in the TOR that are satisfied by \r\nremote caches or remote memory.\r\nREMOTE b10001000\r\nMISS_REMOTE b10001010\r\nTable 2-35. Unit Masks for TxR_ADS_USED\r\nExtension umask\r\n[15:8] Description\r\nAD bxxxxxxx1 Onto AD Ring\r\nAK bxxxxxx1x Onto AK Ring\r\nBL bxxxxx1xx Onto BL Ring\r\nTable 2-36. Unit Masks for TxR_INSERTS\r\nExtension umask\r\n[15:8] Description\r\nAD_CACHE bxxxxxxx1 AD - Cachebo\r\nRing transactions from the Cachebo destined for the AD ring. \r\nSome example include outbound requests, snoop requests, and \r\nsnoop responses.\r\nAK_CACHE bxxxxxx1x AK - Cachebo\r\nRing transactions from the Cachebo destined for the AK ring. \r\nThis is commonly used for credit returns and GO responses.\r\nBL_CACHE bxxxxx1xx BL - Cachebo\r\nRing transactions from the Cachebo destined for the BL ring. \r\nThis is commonly used to send data from the cache to various \r\ndestinations.\r\nIV_CACHE bxxxx1xxx IV - Cachebo\r\nRing transactions from the Cachebo destined for the IV ring. This \r\nis commonly used for snoops to the cores.\r\nAD_CORE bxxx1xxxx AD - Corebo\r\nRing transactions from the Corebo destined for the AD ring. This \r\nis commonly used for outbound requests.\r\nTable 2-34. Unit Masks for TOR_OCCUPANCY\r\nExtension umask\r\n[15:8] Filter Dep Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/7bdc0958-2a5e-4c12-9859-8f0789a251a1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d16e8b83af3142c07c18490451d5b7d8571325e568d57200c8f6a9b3ea5a1459",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 280
      },
      {
        "segments": [
          {
            "segment_id": "7acdd1df-0e87-4835-bbe8-00b7b2dda593",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 60,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\n54 Reference Number: 329468-002\r\n2.4 HOME AGENT (HA) PERFORMANCE MONITORING\r\n2.4.1 Overview of the Home Agent\r\nThe HA is responsible for the protocol side of memory interactions, including coherent and non\u0002coherent home agent protocols (as defined in the Intel® QuickPath Interconnect Specification). Addi\u0002tionally, the HA is responsible for ordering memory reads/writes, coming in from the modular Ring, to \r\na given address such that the iMC (memory controller). \r\nIn other words, it is the coherency agent responsible for guarding the memory controller. All requests \r\nfor memory attached to the coupled iMC must first be ordered through the HA. As such, it provides \r\nseveral functions:\r\n• Interface between Ring and iMC: \r\nRegardless of the memory technology, the Home Agent receives memory read and write requests \r\nfrom the modular ring. It checks the memory transaction type, detects and resolves the coherent \r\nconflict, and finally schedules a corresponding transaction to the memory controller. It is also \r\nresponsible for returning the response and completion to the requester.\r\n• Conflict Manager:\r\nAll requests must go through conflict management logic in order to ensure coherent consistency. \r\nIn other words, the view of data must be the same across all coherency agents regardless of who \r\nis reading or modifying the data. On Intel® QPI, the home agent is responsible for tracking all \r\nrequests to a given address and ensuring that the results are consistent.\r\n• Memory Access Ordering Control:\r\n• The Home Agent guarantees the ordering of RAW, WAW and WAR. Home Snoop Protocol Support \r\n(for parts with Directory Support):\r\nThe Home Agent supports Intel® QPI’s home snoop protocol by initiating snoops on behalf of \r\nrequests. Closely tied to the directory feature, the home agent has the ability to issue snoops to \r\nthe peer caching agents for requests based on the directory information.\r\n• Directory Support:\r\nIn order to satisfy performance requirements for the 4 socket and scalable DP segments, the \r\nHome Agent implements a snoop directory which tracks all cachelines residing behind this Home \r\nAgent. This directory is used to reduce the snoop traffic when Intel® QPI bandwidth would \r\notherwise be strained. The directory is not intended for typical 2S topologies.\r\n2.4.2 HA Performance Monitoring Overview\r\nThe HA Box supports event monitoring through four 48-bit wide counters (HA_PCI_PMON_CTR{3:0}). \r\nEach of these counters can be programmed (HA_PCI_PMON_CTL{3:0}) to capture any HA event. The \r\nHA counters will increment by a maximum of 8b per cycle. \r\nAK_CORE bxx1xxxxx AK - Corebo\r\nRing transactions from the Corebo destined for the AK ring. This \r\nis commonly used for snoop responses coming from the core and \r\ndestined for a Cachebo.\r\nBL_CORE bx1xxxxxx BL - Corebo\r\nRing transactions from the Corebo destined for the BL ring. This \r\nis commonly used for transferring writeback data to the cache.\r\nTable 2-36. Unit Masks for TxR_INSERTS\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/7acdd1df-0e87-4835-bbe8-00b7b2dda593.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bbbf0025b8db5881fc3fc39655aa4e59cf486e923cbf43290d1e181a4ad98b9a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 471
      },
      {
        "segments": [
          {
            "segment_id": "017ad643-515d-4325-a94d-000839e70622",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 61,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 55\r\nUncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\nFor information on how to setup a monitoring session, refer to Section 2.1, “Uncore Per-Socket \r\nPerformance Monitoring Control”.\r\n2.4.2.1 HA PMON Registers - On Overflow and the Consequences (PMI/Freeze)\r\nIf a overflow is detected from an HA performance counter enabled to communicate its overflow \r\n(HAn_PCI_PMON_CTL.ov_en is set to 1), the overflow bit is set at the box level \r\n(HAn_PCI_PMON_BOX_STATUS.ov) and an overflow message is sent to the UBox. When the UBox \r\nreceives the overflow signal, the U_MSR_PMON_GLOBAL_STATUS.ov_h bit is set (see Table 2-3, \r\n“U_MSR_PMON_GLOBAL_STATUS Register – Field Definitions”) and a PMI can be generated.\r\nOnce a freeze has occurred, in order to see a new freeze, the overflow responsible for the freeze, \r\nmust be cleared by setting the corresponding bit in HAn_PCI_PMON_BOX_STATUS.ov and \r\nU_MSR_PMON_GLOBAL_STATUs.ov_h to 1. Assuming all the counters have been locally enabled (.en\r\nbit in control registers meant to monitor events) and the overflow bit(s) has been cleared, the HA is \r\nprepared for a new sample interval. Once the global controls have been re-enabled (Section 2.1.4, \r\n“Enabling a New Sample Interval from Frozen Counters”), counting will resume.\r\n2.4.2.2 HA Performance Monitors\r\nTable 2-37. HA Performance Monitoring MSRs\r\n2.4.2.3 HA Box Level PMON State\r\nThe following registers represent the state governing all box-level PMUs in the HA Box. \r\nRegister Name PCICFG \r\nAddress\r\nSize \r\n(bits) Description\r\nPCICFG Base Address Dev:Func\r\nHA0 PMON Registers D14:F1\r\nHA1 PMON Registers D28:F1\r\nBox-Level Control/Status\r\nHAn_PCI_PMON_BOX_STATUS F8 32 HA n PMON Box-Wide Status\r\nHAn_PCI_PMON_BOX_CTL F4 32 HA n PMON Box-Wide Control\r\nGeneric Counter Control\r\nHAn_PCI_PMON_CTL3 E4 32 HA n PMON Control for Counter 3\r\nHAn_PCI_PMON_CTL2 E0 32 HA n PMON Control for Counter 2\r\nHAn_PCI_PMON_CTL1 DC 32 HA n PMON Control for Counter 1\r\nHAnnPCI_PMON_CTL0 D8 32 HA n PMON Control for Counter 0\r\nGeneric Counters\r\nHAn_PCI_PMON_CTR3 BC+B8 32x2 HA n PMON Counter 3\r\nHAn_PCI_PMON_CTR2 B4+B0 32x2 HA n PMON Counter 2\r\nHAn_PCI_PMON_CTR1 AC+A8 32x2 HA n PMON Counter 1\r\nHAn_PCI_PMON_CTR0 A4+A0 32x2 HA n PMON Counter 0\r\nBox-Level Filter\r\nHAn_PCI_PMON_BOX_OPCODEMATCH 48 32 HA n PMON Opcode Match\r\nHAn_PCI_PMON_BOX_ADDRMATCH1 44 32 HA n PMON Address Match 1\r\nHAn_PCI_PMON_BOX_ADDRMATCH0 40 32 HA n PMON Address Match 0",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/017ad643-515d-4325-a94d-000839e70622.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=88b097c2ef9797ed2b84a4ebaf16e74e8a55786bdb0083441d4c1a113401039f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 363
      },
      {
        "segments": [
          {
            "segment_id": "ca731a31-3f3c-474b-b274-b1ae26b6aa76",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 62,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\n56 Reference Number: 329468-002\r\nIn the case of the HA, the HA_PCI_PMON_BOX_CTL register provides the ability to manually freeze the \r\ncounters in the box (.frz) and reset the generic state (.rst_ctrs and .rst_ctrl).\r\nIf an overflow is detected from one of the HA PMON registers, the corresponding bit in the \r\nHA_PCI_PMON_BOX_STATUS.ov field will be set. To reset these overflow bits, a user must write a value \r\nof ‘1’ to them (which will clear the bits).\r\nTable 2-38. HA_PCI_PMON_BOX_CTL Register – Field Definitions\r\nU\r\nTable 2-39. HA_PCI_PMON_BOX_STATUS Register – Field Definitions\r\n2.4.2.4 HA PMON state - Counter/Control Pairs\r\nThe following table defines the layout of the HA performance monitor control registers. The main task \r\nof these configuration registers is to select the event to be monitored by their respective data counter \r\n(.ev_sel, .umask). Additional control bits are provided to shape the incoming events (e.g. .edge_det, \r\n.thresh) as well as provide additional functionality for monitoring software (.rst,.ov_en).\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:18 RV 0 Ignored\r\nrsv 17:16 RV 0 Reserved; SW must write to 1 else behavior is undefined.\r\nig 15:9 RV 0 Ignored\r\nfrz 8 WO 0 Freeze. \r\nIf set to 1 the counters in this box will be frozen.\r\nig 7:2 RV 0 Ignored\r\nrst_ctrs 1 WO 0 Reset Counters. \r\nWhen set to 1, the Counter Registers will be reset to 0.\r\nrst_ctrl 0 WO 0 Reset Control. \r\nWhen set to 1, the Counter Control Registers will be reset \r\nto 0.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:5 RV 0 Ignored\r\nrsv 4 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nov 3:0 RW1C 0 If an overflow is detected from the corresponding \r\nHA_PCI_PMON_CTR register, it’s overflow bit will be set. \r\nNOTE: Write of ‘1’ will clear the bit.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ca731a31-3f3c-474b-b274-b1ae26b6aa76.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a5531c93e9e1fde004d9339d28f89ee3d80253e48c2232c9397bcb3665855f2a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 307
      },
      {
        "segments": [
          {
            "segment_id": "01001633-9536-4f02-b52e-31509fd55872",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 63,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 57\r\nUncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\nTable 2-40. HA_PCI_PMON_CTL{3-0} Register – Field Definitions\r\nThe HA performance monitor data registers are 48-bit wide. A counter overflow occurs when a carry \r\nout from bit 47 is detected. Software can force all uncore counting to freeze after N events by \r\npreloading a monitor with a count value of 248 - N and setting the control register to send an overflow \r\nmessage to the UBox (refer to Section 2.1.1, “Counter Overflow”). During the interval of time \r\nbetween overflow and global disable, the counter value will wrap and continue to collect events.\r\nIf accessible, software can continuously read the data registers without disabling event collection.\r\nTable 2-41. HA_PCI_PMON_CTR{3-0} Register – Field Definitions\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nthresh 31:24 RW-V 0 Threshold used in counter comparison.\r\nrsv 23 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nen 22 RW-V 0 Local Counter Enable. \r\nrsv 21 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nov_en 20 RW-V 0 When this bit is asserted and the corresponding counter \r\noverflows, its overflow bit is set in the local status register \r\n(HA_PCI_PMON_BOX_STATUS.ov) and an overflow is sent \r\non the message channel to the UBox. When the overflow is \r\nreceived by the UBox, the bit corresponding to this HA will \r\nbe set in U_MSR_PMON_GLOBAL_STATUS.ov_h{1,0}. \r\nig 19 RV 0 Ignored\r\nedge_det 18 RW-V 0 When set to 1, rather than measuring the event in each \r\ncycle it is active, the corresponding counter will increment \r\nwhen a 0 to 1 transition (i.e. rising edge) is detected.\r\nWhen 0, the counter will increment in each cycle that the \r\nevent is asserted.\r\nNOTE: .edge_det is in series following.thresh, Due to this, \r\nthe .thresh field must be set to a non-0 value. For events \r\nthat increment by no more than 1 per cycle, set .thresh to \r\n0x1.\r\nrst 17 WO 0 When set to 1, the corresponding counter will be cleared to \r\n0.\r\nq_occ_rst 16 WO 0 When set to 1, clear queue occupancy counter implicated \r\nby event select.\r\nNOTE: Since queue occupancy counters never drop below \r\nzero, it is possible for the counters to ‘catch up’ with the \r\nreal occupancy of the queue in question when the real \r\noccupancy drops to zero.\r\numask 15:8 RW-V 0 Select subevents to be counted within the selected event. \r\nev_sel 7:0 RW-V 0 Select event to be counted.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 63:48 RV 0 Ignored\r\nevent_count 47:0 RW-V 0 48-bit performance event counter",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/01001633-9536-4f02-b52e-31509fd55872.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f9bfc63076a422b991db46bfa9e7a1fea5a159b4099c680f0c4887229a6c7488",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 426
      },
      {
        "segments": [
          {
            "segment_id": "1c57ba2b-e0a4-4c87-91c1-a4b6b9dd63a3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 64,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\n58 Reference Number: 329468-002\r\nIn addition to generic event counting, each HA provides a pair of Address Match registers and an \r\nOpcode Match register that allow a user to filter incoming packet traffic according to the packet Opcode, \r\nMessage Class and Physical Address. The ADDR_OPC_MATCH.FILT event is provided to capture the \r\nfilter match as an event. The fields are laid out as follows:\r\nNOTE\r\nRefer to Table 2-216, “Intel® QuickPath Interconnect Packet Message Classes” and \r\nTable 2-218, “Opcodes (Alphabetical Listing)” to determine the encodings of the HA \r\nOpcodeMatch Register field.\r\nTable 2-42. HA_PCI_PMON_BOX_OPCODEMATCH Register – Field Definitions\r\nTable 2-43. HA_PCI_PMON_BOX_ADDRMATCH1 Register – Field Definitions\r\nNOTEHA_PCI_PMON_BOX_ADDRMATCH0 Register – Field Definitions\r\n2.4.3 HA Performance Monitoring Events\r\nThe performance monitoring events within the HA include all events internal to the HA as well as events \r\nwhich track ring related activity at the HA ring stops. Internal events include the ability to track Direc\u0002tory Activity, Direct2Core Activity, iMC Read/Write Traffic, time spent dealing with Conflicts, etc.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:6 RV 0 Ignored\r\nopc 5:0 RWS 0 Match to incoming opcode\r\n[5:4] are a 2b version of the Message Class representing \r\nAD Ring traffic\r\n00 - HOM0\r\n01 - HOM1\r\n10 - NDR\r\n11 - SNP\r\n[3:0] QPI Opcode - See Opcode Match by Message Class \r\nreferred to in NOTE\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:14 RV 0 Ignored\r\nhi_addr 13:0 RWS 0 Match to this System Address - Most Significant 14b of \r\ncache aligned address [45:32]\r\nField Bits\r\nHW \r\nReset \r\nVal\r\nHW \r\nReset \r\nVal\r\nDescription\r\nlo_addr 31:6 RWS 0 Match to this System Address - Least Significant 26b of \r\ncache aligned address [31:6]\r\nig 5:0 RV 0 Ignored",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/1c57ba2b-e0a4-4c87-91c1-a4b6b9dd63a3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b9e7a70cf7287305d093a09fbe4d38eb3dd66bf644316bd3c8803b9a07e003f7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 291
      },
      {
        "segments": [
          {
            "segment_id": "31590bcf-25af-45c8-a612-e2f12678217a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 65,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 59\r\nUncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\n• iMC RPQ/WPQ Events\r\nDetermine cycles the HA is stuck without credits in to the iMCs read/write queues.\r\n2.4.3.1 On the Major HA Structures:\r\nThe 128-entry TF (Tracker File) holds all transactions that arrive in the HA from the time they arrive \r\nuntil they are completed and leave the HA. Transactions could stay in this structure much longer than \r\nthey are needed. TF is the critical resource each transaction needs before being sent to the iMC \r\n(memory controller)\r\nTF average occupancy == (valid cnt * 128 / cycles)\r\nTF average latency == (valid cnt * 128 / inserts) \r\nOther Internal HA Queues of Interest:\r\nTxR (aka EGR) - The HA has Egress (responses) queues for each ring (AD, AK, BL) as well as queues \r\nto track credits the HA has to push traffic onto those rings.\r\n2.4.4 HA Box Events Ordered By Code\r\nThe following table summarizes the directly measured HA Box events.\r\nSymbol Name Event \r\nCode Ctrs\r\nMax \r\nInc/\r\nCyc\r\nDescription\r\nCLOCKTICKS 0x00 0-3 1 uclks\r\nREQUESTS 0x01 0-3 1 Read and Write Requests\r\nCONFLICT_CYCLES 0x0b 0-3 1 Conflict Checks\r\nDIRECTORY_LOOKUP 0x0c 0-3 1 Directory Lookups\r\nDIRECTORY_UPDATE 0x0d 0-3 1 Directory Updates\r\nTxR_AK 0x0e 0-3 1 Outbound Ring Transactions on AK\r\nTxR_BL 0x10 0-3 1 Outbound DRS Ring Transactions to \r\nCache\r\nDIRECT2CORE_COUNT 0x11 0-3 1 Direct2Core Messages Sent\r\nDIRECT2CORE_CYCLES_DISABLED 0x12 0-3 1 Cycles when Direct2Core was Disabled\r\nDIRECT2CORE_TXN_OVERRIDE 0x13 0-3 1 Number of Reads that had Direct2Core \r\nOverridden\r\nBYPASS_IMC 0x14 0-3 1 HA to iMC Bypass\r\nRPQ_CYCLES_NO_REG_CREDITS 0x15 0-3 4 iMC RPQ Credits Empty - Regular\r\nIMC_READS 0x17 0-3 4 HA to iMC Normal Priority Reads Issued\r\nWPQ_CYCLES_NO_REG_CREDITS 0x18 0-3 4 HA iMC CHN0 WPQ Credits Empty - \r\nRegular\r\nIMC_WRITES 0x1a 0-3 1 HA to iMC Full Line Writes Issued\r\nTAD_REQUESTS_G0 0x1b 0-3 2 HA Requests to a TAD Region - Group 0\r\nTAD_REQUESTS_G1 0x1c 0-3 2 HA Requests to a TAD Region - Group 1\r\nIMC_RETRY 0x1e 0-3 1 Retry Events\r\nADDR_OPC_MATCH 0x20 0-3 1 QPI Address/Opcode Match\r\nSNOOP_RESP 0x21 0-3 1 Snoop Responses Received\r\nIGR_NO_CREDIT_CYCLES 0x22 0-3 1 Cycles without QPI Ingress Credits",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/31590bcf-25af-45c8-a612-e2f12678217a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bb8c59744e6732d422eeb5c439811c271be6b441fa7f411ce45818d2bcc170ee",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 358
      },
      {
        "segments": [
          {
            "segment_id": "6d038fab-00bf-43ca-9690-1edda40d06bb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 66,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\n60 Reference Number: 329468-002\r\n2.4.5 HA Box Common Metrics (Derived Events)\r\nThe following table summarizes metrics commonly calculated from HA Box events.\r\n2.4.6 HA Box Performance Monitor Event List\r\nThe section enumerates performance monitoring events for the HA Box.\r\nTxR_AD_CYCLES_FULL 0x2a 0-3 1 AD Egress Full\r\nTxR_AK_CYCLES_FULL 0x32 0-3 1 AK Egress Full\r\nTxR_BL_OCCUPANCY 0x34 0-3 20 BL Egress Occupancy\r\nTxR_BL_CYCLES_FULL 0x36 0-3 1 BL Egress Full\r\nRING_AD_USED 0x3e 0-3 1 HA AD Ring in Use\r\nRING_AK_USED 0x3f 0-3 1 HA AK Ring in Use\r\nRING_BL_USED 0x40 0-3 1 HA BL Ring in Use\r\nDIRECTORY_LAT_OPT 0x41 0-3 1 Directory Lat Opt Return\r\nBT_CYCLES_NE 0x42 0-3 1 BT Cycles Not Empty\r\nBT_OCCUPANCY 0x43 0-3 512 BT Occupancy\r\nBT_BYPASS 0x52 0-3 1 BT Bypass\r\nOSB 0x53 0-3 1 OSB Snoop Broadcast\r\nOSB_EDR 0x54 0-3 1 OSB Early Data Return\r\nIODC_INSERTS 0x56 0-3 1 IODC Inserts\r\nIODC_CONFLICTS 0x57 0-3 1 IODC Conflicts\r\nIODC_OLEN_WBMTOI 0x58 0-3 1 Num IODC 0 Length Writes\r\nIGR_CREDITS_AD_QPI2 0x59 0-3 1 AD QPI Link 2 Credit Accumulator\r\nIGR_CREDITS_BL_QPI2 0x5a 0-3 1 BL QPI Link 2 Credit Accumulator\r\nSNP_RESP_RECV_LOCAL 0x60 0-3 1 Snoop Responses Received Local\r\nSymbol Name:\r\n Definition Equation\r\nPCT_CYCLES_BL_FULL:\r\n Percentage of time the BL Egress Queue is \r\nfull\r\nTxR_BL_CYCLES_FULL.ALL / SAMPLE_INTERVAL\r\nPCT_CYCLES_D2C_DISABLED:\r\n Percentage of time that Direct2Core was \r\ndisabled.\r\nDIRECT2CORE_CYCLES_DISABLED / SAMPLE_INTERVAL\r\nPCT_RD_REQUESTS:\r\n Percentage of HA traffic that is from Read \r\nRequests\r\nREQUESTS.READS / (REQUESTS.READS + \r\nREQUESTS.WRITES)\r\nPCT_WR_REQUESTS:\r\n Percentage of HA traffic that is from Write \r\nRequests\r\nREQUESTS.WRITES / (REQUESTS.READS + \r\nREQUESTS.WRITES)\r\nSymbol Name Event \r\nCode Ctrs\r\nMax \r\nInc/\r\nCyc\r\nDescription",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/6d038fab-00bf-43ca-9690-1edda40d06bb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d9948fb07121c323868b78185978024b07cf0c1656ee546b65baafbbb0509622",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 261
      },
      {
        "segments": [
          {
            "segment_id": "6353d867-784c-4f9e-a38f-37507b88b624",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 67,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 61\r\nUncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\nADDR_OPC_MATCH\r\n• Title: QPI Address/Opcode Match\r\n• Category: ADDR_OPCODE_MATCH Events\r\n• Event Code: 0x20\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nBT_BYPASS\r\n• Title: BT Bypass\r\n• Category: BT (Backup Tracker) Events\r\n• Event Code: 0x52\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of transactions that bypass the BT (fifo) to HT\r\nBT_CYCLES_NE\r\n• Title: BT Cycles Not Empty\r\n• Category: BT (Backup Tracker) Events\r\n• Event Code: 0x42\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Cycles the Backup Tracker (BT) is not empty. The BT is the actual HOM tracker in the \r\nprocessor.\r\n• NOTE: Will not count case HT is empty and a Bypass happens.\r\nBT_OCCUPANCY\r\n• Title: BT Occupancy\r\n• Category: BT (Backup Tracker) Events\r\n• Event Code: 0x43\r\n• Max. Inc/Cyc:. 512, Register Restrictions: 0-3\r\n• Definition: Accumulates the occupancy of the HA BT pool in every cycle. This can be used with \r\nthe “not empty” stat to calculate average queue occupancy or the “allocations” stat in order to cal\u0002culate average queue latency. HA BTs are allocated as soon as a request enters the HA and is \r\nTable 2-44. Unit Masks for ADDR_OPC_MATCH\r\nExtension umask\r\n[15:8] Filter Dep Description\r\nADDR bxxxxxxx1 HA_AddrMa\r\ntch0[31:6], \r\nHA_AddrMa\r\ntch1[13:0]\r\nAddress\r\nOPC bxxxxxx1x HA_Opcode\r\nMatch[5:0]\r\nOpcode\r\nFILT b00000011 HA_AddrMa\r\ntch0[31:6], \r\nHA_AddrMa\r\ntch1[13:0], \r\nHA_Opcode\r\nMatch[5:0]\r\nAddress & Opcode Match\r\nAD bxxxxx1xx HA_Opcode\r\nMatch[5:0]\r\nAD Opcodes\r\nBL bxxxx1xxx HA_Opcode\r\nMatch[5:0]\r\nBL Opcodes\r\nAK bxxx1xxxx HA_Opcode\r\nMatch[5:0]\r\nAK Opcodes",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/6353d867-784c-4f9e-a38f-37507b88b624.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c4ded6169ad259e884305ef98f0d199d3cce22b25a5f8bb364bbc923a8c5f936",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 254
      },
      {
        "segments": [
          {
            "segment_id": "ac8af8f0-623d-477e-a52a-a0cc61806a2b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 68,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\n62 Reference Number: 329468-002\r\nreleased after the snoop response and data return (or post in the case of a write) and the response \r\nis returned on the ring.\r\nBYPASS_IMC\r\n• Title: HA to iMC Bypass\r\n• Category: BYPASS Events\r\n• Event Code: 0x14\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of times when the HA was able to bypass was attempted. This is a \r\nlatency optimization for situations when there is light loadings on the memory subsystem. This can \r\nbe filtered by when the bypass was taken and when it was not.\r\n• NOTE: Only read transactions use iMC bypass.\r\nCLOCKTICKS\r\n• Title: uclks\r\n• Category: UCLK Events\r\n• Event Code: 0x00\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of uclks in the HA. This will be slightly different than the count in \r\nthe Ubox because of enable/freeze delays. The HA is on the other side of the die from the fixed \r\nUbox uclk counter, so the drift could be somewhat larger than in units that are closer like the QPI \r\nAgent.\r\nCONFLICT_CYCLES\r\n• Title: Conflict Checks\r\n• Category: CONFLICTS Events\r\n• Event Code: 0x0b\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nTable 2-45. Unit Masks for BT_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nLOCAL b00000001 Local\r\nREMOTE b00000010 Remote\r\nREADS_LOCAL b00000100 Reads Local\r\nREADS_REMOTE b00001000 Reads Remote\r\nWRITES_LOCAL b00010000 Writes Local\r\nWRITES_REMOTE b00100000 Writes Remote\r\nTable 2-46. Unit Masks for BYPASS_IMC\r\nExtension umask\r\n[15:8] Description\r\nTAKEN bxxxxxxx1 Taken\r\nFilter for transactions that succeeded in taking the bypass.\r\nNOT_TAKEN bxxxxxx1x Not Taken\r\nFilter for transactions that could not take the bypass.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ac8af8f0-623d-477e-a52a-a0cc61806a2b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ff1ab02f851882d42e723aa87cbccd4fc8a088267ba235799b9495efc142bbea",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 279
      },
      {
        "segments": [
          {
            "segment_id": "734477eb-58d8-41a5-b0fd-dbe20c49504a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 69,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 63\r\nUncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\nDIRECT2CORE_COUNT\r\n• Title: Direct2Core Messages Sent\r\n• Category: DIRECT2CORE Events\r\n• Event Code: 0x11\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of Direct2Core messages sent\r\n• NOTE: Will not be implemented since OUTBOUND_TX_BL:0x1 will count DRS to CORE which is \r\neffectively the same thing as D2C count.\r\nDIRECT2CORE_CYCLES_DISABLED\r\n• Title: Cycles when Direct2Core was Disabled\r\n• Category: DIRECT2CORE Events\r\n• Event Code: 0x12\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles in which Direct2Core was disabled\r\nDIRECT2CORE_TXN_OVERRIDE\r\n• Title: Number of Reads that had Direct2Core Overridden\r\n• Category: DIRECT2CORE Events\r\n• Event Code: 0x13\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of Reads where Direct2Core overridden\r\nDIRECTORY_LAT_OPT\r\n• Title: Directory Lat Opt Return\r\n• Category: DIRECTORY Events\r\n• Event Code: 0x41\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Directory Latency Optimization Data Return Path Taken. When directory mode is \r\nenabled and the directory retuned for a read is Dir=I, then data can be returned using a faster \r\npath if certain conditions are met (credits, free pipeline, etc).\r\nTable 2-47. Unit Masks for CONFLICT_CYCLES\r\nExtension umask\r\n[15:8] Description\r\nCONFLICT bxxxxxx1x Conflict Detected\r\nCounts the number of cycles that we are handling conflicts.\r\nLAST bxxxxx1xx Last in conflict chain\r\nCount every last conflict in conflict chain. Can be used to \r\ncompute the average conflict chain length as (#Ackcnflts/\r\n#LastConflictor)+1. This can be used to give a feel for the \r\nconflict chain lengths while analyzing lock kernels.\r\nACKCNFLTS bxxxx1xxx Acknowledge Conflicts\r\nCount the number of Ackcnflts\r\nCMP_FWDS bxxx1xxxx Cmp Fwds\r\nCount the number of Cmp_Fwd. This will give the number of late \r\nconflicts.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/734477eb-58d8-41a5-b0fd-dbe20c49504a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=415e59ababd8f132f4094c704204bff011accac5fd8a490960ff246225640650",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 284
      },
      {
        "segments": [
          {
            "segment_id": "e2f7e6b2-f511-4eba-8fb7-c3e2c5c79f07",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 70,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\n64 Reference Number: 329468-002\r\nDIRECTORY_LOOKUP\r\n• Title: Directory Lookups\r\n• Category: DIRECTORY Events\r\n• Event Code: 0x0c\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of transactions that looked up the directory. Can be filtered by \r\nrequests that had to snoop and those that did not have to.\r\n• NOTE: Only valid for parts that implement the Directory.\r\nDIRECTORY_UPDATE\r\n• Title: Directory Updates\r\n• Category: DIRECTORY Events\r\n• Event Code: 0x0d\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of directory updates that were required. These result in writes to \r\nthe memory controller. This can be filtered by directory sets and directory clears.\r\n• NOTE: Only valid for parts that implement the Directory.\r\nIGR_CREDITS_AD_QPI2\r\n• Title: AD QPI Link 2 Credit Accumulator\r\n• Category: QPI_IGR_CREDITS Events\r\n• Event Code: 0x59\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Accumulates the number of credits available to the QPI Link 2 AD Ingress buffer.\r\nIGR_CREDITS_BL_QPI2\r\n• Title: BL QPI Link 2 Credit Accumulator\r\n• Category: QPI_IGR_CREDITS Events\r\n• Event Code: 0x5a\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\nTable 2-48. Unit Masks for DIRECTORY_LOOKUP\r\nExtension umask\r\n[15:8] Description\r\nSNP bxxxxxxx1 Snoop Needed\r\nFilters for transactions that had to send one or more snoops \r\nbecause the directory bit was set.\r\nNO_SNP bxxxxxx1x Snoop Not Needed\r\nFilters for transactions that did not have to send any snoops \r\nbecause the directory bit was clear.\r\nTable 2-49. Unit Masks for DIRECTORY_UPDATE\r\nExtension umask\r\n[15:8] Description\r\nSET bxxxxxxx1 Directory Set\r\nFilter for directory sets. This occurs when a remote read \r\ntransaction requests memory, bringing it to a remote cache.\r\nCLEAR bxxxxxx1x Directory Clear\r\nFilter for directory clears. This occurs when snoops were sent \r\nand all returned with RspI.\r\nANY bxxxxxx11 Any Directory Update",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/e2f7e6b2-f511-4eba-8fb7-c3e2c5c79f07.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f34e13133430dd2b1e5b1c806d084e25fa4aeae32787d106695e082640add746",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 303
      },
      {
        "segments": [
          {
            "segment_id": "c944defd-627a-40c4-ae15-0b263fe7ae36",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 71,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 65\r\nUncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\n• Definition: Accumulates the number of credits available to the QPI Link 2 BL Ingress buffer.\r\nIGR_NO_CREDIT_CYCLES\r\n• Title: Cycles without QPI Ingress Credits\r\n• Category: QPI_IGR_CREDITS Events\r\n• Event Code: 0x22\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when the HA does not have credits to send messages to \r\nthe QPI Agent. This can be filtered by the different credit pools and the different links.\r\nIMC_READS\r\n• Title: HA to iMC Normal Priority Reads Issued\r\n• Category: IMC_READS Events\r\n• Event Code: 0x17\r\n• Max. Inc/Cyc:. 4, Register Restrictions: 0-3\r\n• Definition: Count of the number of reads issued to any of the memory controller channels. This \r\ncan be filtered by the priority of the reads.\r\n• NOTE: Does not count reads using the bypass path. That is counted separately in \r\nHA_IMC.BYPASS.\r\nIMC_RETRY\r\n• Title: Retry Events\r\n• Category: IMC_MISC Events\r\n• Event Code: 0x1e\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nIMC_WRITES\r\n• Title: HA to iMC Full Line Writes Issued\r\n• Category: IMC_WRITES Events\r\n• Event Code: 0x1a\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the total number of full line writes issued from the HA into the memory con\u0002troller. This counts for all four channels. It can be filtered by full/partial and ISOCH/non-ISOCH.\r\nTable 2-50. Unit Masks for IGR_NO_CREDIT_CYCLES\r\nExtension umask\r\n[15:8] Description\r\nAD_QPI0 bxxxxxxx1 AD to QPI Link 0\r\nAD_QPI1 bxxxxxx1x AD to QPI Link 1\r\nBL_QPI0 bxxxxx1xx BL to QPI Link 0\r\nBL_QPI1 bxxxx1xxx BL to QPI Link 1\r\nTable 2-51. Unit Masks for IMC_READS\r\nExtension umask\r\n[15:8] Description\r\nNORMAL b00000001 Normal Priority",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/c944defd-627a-40c4-ae15-0b263fe7ae36.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b71e64251933c9c757eeb5b37cbd74c4ddf747ec345c7fbfb83f4f3c631d77e5",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c5c38304-183b-4697-9779-7c00570a4973",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 72,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\n66 Reference Number: 329468-002\r\nIODC_CONFLICTS\r\n• Title: IODC Conflicts\r\n• Category: IODC Events\r\n• Event Code: 0x57\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nIODC_INSERTS\r\n• Title: IODC Inserts\r\n• Category: IODC Events\r\n• Event Code: 0x56\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: IODC Allocations\r\nIODC_OLEN_WBMTOI\r\n• Title: Num IODC 0 Length Writes\r\n• Category: IODC Events\r\n• Event Code: 0x58\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Num IODC 0 Length Writebacks M to I - All of which are dropped.\r\nOSB\r\n• Title: OSB Snoop Broadcast\r\n• Category: OSB (Opportunistic Snoop Broadcast) Events\r\n• Event Code: 0x53\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Count of OSB snoop broadcasts. Counts by 1 per request causing OSB snoops to be \r\nbroadcast. Does not count all the snoops generated by OSB.\r\nTable 2-52. Unit Masks for IMC_WRITES\r\nExtension umask\r\n[15:8] Description\r\nFULL bxxxxxxx1 Full Line Non-ISOCH\r\nPARTIAL bxxxxxx1x Partial Non-ISOCH\r\nFULL_ISOCH bxxxxx1xx ISOCH Full Line\r\nPARTIAL_ISOCH bxxxx1xxx ISOCH Partial\r\nALL b00001111 All Writes\r\nTable 2-53. Unit Masks for IODC_CONFLICTS\r\nExtension umask\r\n[15:8] Description\r\nANY bxxxxxxx1 Any Conflict\r\nLAST bxxxxx1xx Last Conflict",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/c5c38304-183b-4697-9779-7c00570a4973.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d9467b0a8eee97decd9612ce86c7addd8c6a94930b50e3249c688309e8384ba4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 481
      },
      {
        "segments": [
          {
            "segment_id": "5c665ebd-ff66-4266-ab01-5241de3ba134",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 73,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 67\r\nUncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\nOSB_EDR\r\n• Title: OSB Early Data Return\r\n• Category: OSB (Opportunistic Snoop Broadcast) Events\r\n• Event Code: 0x54\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of transactions that broadcast snoop due to OSB, but found clean \r\ndata in memory and was able to do early data return\r\nREQUESTS\r\n• Title: Read and Write Requests\r\n• Category: TRACKER Events\r\n• Event Code: 0x01\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the total number of read requests made into the Home Agent. Reads include \r\nall read opcodes (including RFO). Writes include all writes (streaming, evictions, HitM, etc).\r\nTable 2-54. Unit Masks for OSB\r\nExtension umask\r\n[15:8] Description\r\nREADS_LOCAL bxxxxxx1x Local Reads\r\nINVITOE_LOCAL bxxxxx1xx Local InvItoE\r\nREMOTE bxxxx1xxx Remote\r\nTable 2-55. Unit Masks for OSB_EDR\r\nExtension umask\r\n[15:8] Description\r\nALL bxxxxxxx1 All\r\nREADS_LOCAL_I bxxxxxx1x Reads to Local I\r\nREADS_REMOTE_I bxxxxx1xx Reads to Remote I\r\nREADS_LOCAL_S bxxxx1xxx Reads to Local S\r\nREADS_REMOTE_S bxxx1xxxx Reads to Remote S\r\nTable 2-56. Unit Masks for REQUESTS\r\nExtension umask\r\n[15:8] Description\r\nREADS_LOCAL bxxxxxxx1 Local Reads\r\nThis filter includes only read requests coming from the local \r\nsocket. This is a good proxy for LLC Read Misses (including \r\nRFOs) from the local socket.\r\nREADS_REMOTE bxxxxxx1x Remote Reads\r\nThis filter includes only read requests coming from the remote \r\nsocket. This is a good proxy for LLC Read Misses (including \r\nRFOs) from the remote socket.\r\nREADS b00000011 Reads\r\nIncoming read requests. This is a good proxy for LLC Read \r\nMisses (including RFOs).\r\nWRITES_LOCAL bxxxxx1xx Local Writes\r\nThis filter includes only writes coming from the local socket.\r\nWRITES_REMOTE bxxxx1xxx Remote Writes\r\nThis filter includes only writes coming from remote sockets.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/5c665ebd-ff66-4266-ab01-5241de3ba134.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=194be7e377590777db160e48f507ff633929ca6cc4f23c3b032c69dfc79960c1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 287
      },
      {
        "segments": [
          {
            "segment_id": "4524acb6-7fea-426d-a018-00c4e7ab1f51",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 74,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\n68 Reference Number: 329468-002\r\nRING_AD_USED\r\n• Title: HA AD Ring in Use\r\n• Category: RING Events\r\n• Event Code: 0x3e\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles that the AD ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sunk, but does not include when \r\npackets are being sent from the ring stop.\r\n• NOTE: On a 2 column implementation (e.g. 10C) CW_EVEN is actually \r\nCW_VR0_EVEN+CW_VR1_EVEN (similarly for CCW/ODD). In any cycle, a ring stop can see up to \r\none packet moving in the CW direction and one packet moving in the CCW direction.\r\nRING_AK_USED\r\n• Title: HA AK Ring in Use\r\n• Category: RING Events\r\n• Event Code: 0x3f\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\nWRITES b00001100 Writes\r\nIncoming write requests.\r\nINVITOE_LOCAL bxxx1xxxx Local InvItoEs\r\nThis filter includes only InvItoEs coming from the local socket.\r\nINVITOE_REMOTE bxx1xxxxx Remote InvItoEs\r\nThis filter includes only InvItoEs coming from remote sockets.\r\nTable 2-57. Unit Masks for RING_AD_USED\r\nExtension umask\r\n[15:8] Description\r\nCW_VR0_EVEN bxxxxxxx1 Clockwise and Even on VRing 0\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 0.\r\nCW_VR0_ODD bxxxxxx1x Clockwise and Odd on VRing 0\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 0.\r\nCCW_VR0_EVEN bxxxxx1xx Counterclockwise and Even on VRing 0\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 0.\r\nCCW_VR0_ODD bxxxx1xxx Counterclockwise and Odd on VRing 0\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 0.\r\nCW_VR1_EVEN bxxx1xxxx Clockwise and Even on VRing 1\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 1.\r\nCW_VR1_ODD bxx1xxxxx Clockwise and Odd on VRing 1\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 1.\r\nCW b00110011 Clockwise\r\nCCW_VR1_EVEN bx1xxxxxx Counterclockwise and Even on VRing 1\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 1.\r\nCCW_VR1_ODD b1xxxxxxx Counterclockwise and Odd on VRing 1\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 1.\r\nCCW b11001100 Counterclockwise\r\nTable 2-56. Unit Masks for REQUESTS\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/4524acb6-7fea-426d-a018-00c4e7ab1f51.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=31798c2faab23744d10483b58e520939ba03fe2c124d0f46d90e232c296c10d7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 362
      },
      {
        "segments": [
          {
            "segment_id": "ded32e89-037e-4e10-b9dc-693eac729dbf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 75,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 69\r\nUncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\n• Definition: Counts the number of cycles that the AK ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sunk, but does not include \r\nwhen packets are being sent from the ring stop.\r\n• NOTE: On a 2 column implementation (e.g. 10C) CW_EVEN is actually \r\nCW_VR0_EVEN+CW_VR1_EVEN (similarly for CCW/ODD). In any cycle, a ring stop can see up to \r\none packet moving in the CW direction and one packet moving in the CCW direction.\r\nRING_BL_USED\r\n• Title: HA BL Ring in Use\r\n• Category: RING Events\r\n• Event Code: 0x40\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles that the BL ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sunk, but does not include \r\nwhen packets are being sent from the ring stop.\r\n• NOTE: On a 2 column implementation (e.g. 10C) CW_EVEN is actually \r\nCW_VR0_EVEN+CW_VR1_EVEN (similarly for CCW/ODD). In any cycle, a ring stop can see up to \r\none packet moving in the CW direction and one packet moving in the CCW direction.\r\nTable 2-58. Unit Masks for RING_AK_USED\r\nExtension umask\r\n[15:8] Description\r\nCW_VR0_EVEN bxxxxxxx1 Clockwise and Even on VRing 0\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 0.\r\nCW_VR0_ODD bxxxxxx1x Clockwise and Odd on VRing 0\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 0.\r\nCCW_VR0_EVEN bxxxxx1xx Counterclockwise and Even on VRing 0\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 0.\r\nCCW_VR0_ODD bxxxx1xxx Counterclockwise and Odd on VRing 0\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 0.\r\nCW_VR1_EVEN bxxx1xxxx Clockwise and Even on VRing 1\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 1.\r\nCW_VR1_ODD bxx1xxxxx Clockwise and Odd on VRing 1\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 1.\r\nCW b00110011 Clockwise\r\nCCW_VR1_EVEN bx1xxxxxx Counterclockwise and Even on VRing 1\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 1.\r\nCCW_VR1_ODD b1xxxxxxx Counterclockwise and Odd on VRing 1\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 1.\r\nCCW b11001100 Counterclockwise\r\nTable 2-59. Unit Masks for RING_BL_USED\r\nExtension umask\r\n[15:8] Description\r\nCW_VR0_EVEN bxxxxxxx1 Clockwise and Even on VRing 0\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 0.\r\nCW_VR0_ODD bxxxxxx1x Clockwise and Odd on VRing 0\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 0.\r\nCCW_VR0_EVEN bxxxxx1xx Counterclockwise and Even on VRing 0\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 0.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ded32e89-037e-4e10-b9dc-693eac729dbf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=391a6d96becbc430df933b56c35428741c5efc54710f19522c321791fb0d3d9a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 451
      },
      {
        "segments": [
          {
            "segment_id": "f6971346-26cc-4751-ab45-980b7d5649fd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 76,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\n70 Reference Number: 329468-002\r\nRPQ_CYCLES_NO_REG_CREDITS\r\n• Title: iMC RPQ Credits Empty - Regular\r\n• Category: RPQ_CREDITS Events\r\n• Event Code: 0x15\r\n• Max. Inc/Cyc:. 4, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when there are no “regular” credits available for posting \r\nreads from the HA into the iMC. In order to send reads into the memory controller, the HA must first \r\nacquire a credit for the iMC's RPQ (read pending queue). This queue is broken into regular credits/\r\nbuffers that are used by general reads, and “special” requests such as ISOCH reads. This count only \r\ntracks the regular credits Common high bandwidth workloads should be able to make use of all of \r\nthe regular buffers, but it will be difficult (and uncommon) to make use of both the regular and spe\u0002cial buffers at the same time. One can filter based on the memory controller channel. One or more \r\nchannels can be tracked at a given time.\r\nSNOOP_RESP\r\n• Title: Snoop Responses Received\r\n• Category: SNP_RESP Events\r\n• Event Code: 0x21\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the total number of RspI snoop responses received. Whenever a snoops are \r\nissued, one or more snoop responses will be returned depending on the topology of the system. In \r\nsystems larger than 2s, when multiple snoops are returned this will count all the snoops that are \r\nreceived. For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each \r\nof these sub-events would increment by 1.\r\nCCW_VR0_ODD bxxxx1xxx Counterclockwise and Odd on VRing 0\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 0.\r\nCW_VR1_EVEN bxxx1xxxx Clockwise and Even on VRing 1\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 1.\r\nCW_VR1_ODD bxx1xxxxx Clockwise and Odd on VRing 1\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 1.\r\nCW b00110011 Clockwise\r\nCCW_VR1_EVEN bx1xxxxxx Counterclockwise and Even on VRing 1\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 1.\r\nCCW_VR1_ODD b1xxxxxxx Counterclockwise and Odd on VRing 1\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 1.\r\nCCW b11001100 Counterclockwise\r\nTable 2-60. Unit Masks for RPQ_CYCLES_NO_REG_CREDITS\r\nExtension umask\r\n[15:8] Description\r\nCHN0 b00000001 Channel 0\r\nFilter for memory controller channel 0 only.\r\nCHN1 b00000010 Channel 1\r\nFilter for memory controller channel 1 only.\r\nCHN2 b00000100 Channel 2\r\nFilter for memory controller channel 2 only.\r\nCHN3 b00001000 Channel 3\r\nFilter for memory controller channel 3 only.\r\nTable 2-59. Unit Masks for RING_BL_USED\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/f6971346-26cc-4751-ab45-980b7d5649fd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bf62071a49012247ac98f3b313b9bcb8720ec5052c8787d8958ed3ca820b3bd7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 430
      },
      {
        "segments": [
          {
            "segment_id": "3cd4894c-6e80-47bd-a0f8-be9adb98dce1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 77,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 71\r\nUncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\nSNP_RESP_RECV_LOCAL\r\n• Title: Snoop Responses Received Local\r\n• Category: SNP_RESP Events\r\n• Event Code: 0x60\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of snoop responses received for a Local request\r\nTable 2-61. Unit Masks for SNOOP_RESP\r\nExtension umask\r\n[15:8] Description\r\nRSPI bxxxxxxx1 RspI\r\nFilters for snoops responses of RspI. RspI is returned when the \r\nremote cache does not have the data, or when the remote cache \r\nsilently evicts data (such as when an RFO hits non-modified \r\ndata).\r\nRSPS bxxxxxx1x RspS\r\nFilters for snoop responses of RspS. RspS is returned when a \r\nremote cache has data but is not forwarding it. It is a way to let \r\nthe requesting socket know that it cannot allocate the data in E \r\nstate. No data is sent with S RspS.\r\nRSPIFWD bxxxxx1xx RspIFwd\r\nFilters for snoop responses of RspIFwd. This is returned when a \r\nremote caching agent forwards data and the requesting agent is \r\nable to acquire the data in E or M states. This is commonly \r\nreturned with RFO transactions. It can be either a HitM or a \r\nHitFE.\r\nRSPSFWD bxxxx1xxx RspSFwd\r\nFilters for a snoop response of RspSFwd. This is returned when a \r\nremote caching agent forwards data but holds on to its current \r\ncopy. This is common for data and code reads that hit in a \r\nremote socket in E or F state.\r\nRSP_WB bxxx1xxxx Rsp*WB\r\nFilters for a snoop response of RspIWB or RspSWB. This is \r\nreturned when a non-RFO request hits in M state. Data and Code \r\nReads can return either RspIWB or RspSWB depending on how \r\nthe system has been configured. InvItoE transactions will also \r\nreturn RspIWB because they must acquire ownership.\r\nRSP_FWD_WB bxx1xxxxx Rsp*Fwd*WB\r\nFilters for a snoop response of Rsp*Fwd*WB. This snoop \r\nresponse is only used in 4s systems. It is used when a snoop \r\nHITM's in a remote caching agent and it directly forwards data to \r\na requestor, and simultaneously returns data to the home to be \r\nwritten back to memory.\r\nRSPCNFLCT bx1xxxxxx RSPCNFLCT*\r\nFilters for snoops responses of RspConflict. This is returned \r\nwhen a snoop finds an existing outstanding transaction in a \r\nremote caching agent when it CAMs that caching agent. This \r\ntriggers conflict resolution hardware. This covers both RspCnflct \r\nand RspCnflctWbI.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/3cd4894c-6e80-47bd-a0f8-be9adb98dce1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b9a2afddf07000e60ac745ce0d0e504dfe307beb14d226b85b413864582968b1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 383
      },
      {
        "segments": [
          {
            "segment_id": "13efc497-8719-4ec0-93f9-54afa9766150",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 78,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\n72 Reference Number: 329468-002\r\nTAD_REQUESTS_G0\r\n• Title: HA Requests to a TAD Region - Group 0\r\n• Category: TAD Events\r\n• Event Code: 0x1b\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of HA requests to a given TAD region. There are up to 11 TAD (tar\u0002get address decode) regions in each home agent. All requests destined for the memory controller \r\nmust first be decoded to determine which TAD region they are in. This event is filtered based on the \r\nTAD region ID, and covers regions 0 to 7. This event is useful for understanding how applications \r\nare using the memory that is spread across the different memory regions. It is particularly useful \r\nfor “Monroe” systems that use the TAD to enable individual channels to enter self-refresh to save \r\npower.\r\nTable 2-62. Unit Masks for SNP_RESP_RECV_LOCAL\r\nExtension umask\r\n[15:8] Description\r\nRSPI bxxxxxxx1 RspI\r\nFilters for snoops responses of RspI. RspI is returned when the \r\nremote cache does not have the data, or when the remote cache \r\nsilently evicts data (such as when an RFO hits non-modified \r\ndata).\r\nRSPS bxxxxxx1x RspS\r\nFilters for snoop responses of RspS. RspS is returned when a \r\nremote cache has data but is not forwarding it. It is a way to let \r\nthe requesting socket know that it cannot allocate the data in E \r\nstate. No data is sent with S RspS.\r\nRSPIFWD bxxxxx1xx RspIFwd\r\nFilters for snoop responses of RspIFwd. This is returned when a \r\nremote caching agent forwards data and the requesting agent is \r\nable to acquire the data in E or M states. This is commonly \r\nreturned with RFO transactions. It can be either a HitM or a \r\nHitFE.\r\nRSPSFWD bxxxx1xxx RspSFwd\r\nFilters for a snoop response of RspSFwd. This is returned when a \r\nremote caching agent forwards data but holds on to its current \r\ncopy. This is common for data and code reads that hit in a \r\nremote socket in E or F state.\r\nRSPxWB bxxx1xxxx Rsp*WB\r\nFilters for a snoop response of RspIWB or RspSWB. This is \r\nreturned when a non-RFO request hits in M state. Data and Code \r\nReads can return either RspIWB or RspSWB depending on how \r\nthe system has been configured. InvItoE transactions will also \r\nreturn RspIWB because they must acquire ownership.\r\nRSPxFWDxWB bxx1xxxxx Rsp*FWD*WB\r\nFilters for a snoop response of Rsp*Fwd*WB. This snoop \r\nresponse is only used in 4s systems. It is used when a snoop \r\nHITM's in a remote caching agent and it directly forwards data to \r\na requestor, and simultaneously returns data to the home to be \r\nwritten back to memory.\r\nRSPCNFLCT bx1xxxxxx RspCnflct\r\nFilters for snoops responses of RspConflict. This is returned when \r\na snoop finds an existing outstanding transaction in a remote \r\ncaching agent when it CAMs that caching agent. This triggers \r\nconflict resolution hardware. This covers both RspCnflct and \r\nRspCnflctWbI.\r\nOTHER b1xxxxxxx Other\r\nFilters for all other snoop responses.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/13efc497-8719-4ec0-93f9-54afa9766150.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5fc7c4cd6ce71f4dd5d1e0d5f9aa3c2fe1d1afc4d24a567114c37c20607fbd68",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 489
      },
      {
        "segments": [
          {
            "segment_id": "58db7697-232a-40b3-900e-b6145086812d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 79,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 73\r\nUncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\nTAD_REQUESTS_G1\r\n• Title: HA Requests to a TAD Region - Group 1\r\n• Category: TAD Events\r\n• Event Code: 0x1c\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of HA requests to a given TAD region. There are up to 11 TAD \r\n(target address decode) regions in each home agent. All requests destined for the memory con\u0002troller must first be decoded to determine which TAD region they are in. This event is filtered \r\nbased on the TAD region ID, and covers regions 8 to 10. This event is useful for understanding \r\nhow applications are using the memory that is spread across the different memory regions. It is \r\nparticularly useful for “Monroe” systems that use the TAD to enable individual channels to enter \r\nself-refresh to save power.\r\nTxR_AD_CYCLES_FULL\r\n• Title: AD Egress Full\r\n• Category: EGRESS Events\r\n• Event Code: 0x2a\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: AD Egress Full\r\nTable 2-63. Unit Masks for TAD_REQUESTS_G0\r\nExtension umask\r\n[15:8] Description\r\nREGION0 b00000001 TAD Region 0\r\nFilters request made to TAD Region 0\r\nREGION1 b00000010 TAD Region 1\r\nFilters request made to TAD Region 1\r\nREGION2 b00000100 TAD Region 2\r\nFilters request made to TAD Region 2\r\nREGION3 b00001000 TAD Region 3\r\nFilters request made to TAD Region 3\r\nREGION4 b00010000 TAD Region 4\r\nFilters request made to TAD Region 4\r\nREGION5 b00100000 TAD Region 5\r\nFilters request made to TAD Region 5\r\nREGION6 b01000000 TAD Region 6\r\nFilters request made to TAD Region 6\r\nREGION7 b10000000 TAD Region 7\r\nFilters request made to TAD Region 7\r\nTable 2-64. Unit Masks for TAD_REQUESTS_G1\r\nExtension umask\r\n[15:8] Description\r\nREGION8 b00000001 TAD Region 8\r\nFilters request made to TAD Region 8\r\nREGION9 b00000010 TAD Region 9\r\nFilters request made to TAD Region 9\r\nREGION10 b00000100 TAD Region 10\r\nFilters request made to TAD Region 10\r\nREGION11 b00001000 TAD Region 11\r\nFilters request made to TAD Region 11",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/58db7697-232a-40b3-900e-b6145086812d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bdf62cab94cd6efc479a215a290d5014fbba8098ca5e209a4f8dd8b064fd4025",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 332
      },
      {
        "segments": [
          {
            "segment_id": "bb772109-9ee3-4bc0-b1d3-6c850d249768",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 80,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\n74 Reference Number: 329468-002\r\nTxR_AK\r\n• Title: Outbound Ring Transactions on AK\r\n• Category: OUTBOUND_TX Events\r\n• Event Code: 0x0e\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nTxR_AK_CYCLES_FULL\r\n• Title: AK Egress Full\r\n• Category: EGRESS Events\r\n• Event Code: 0x32\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: AK Egress Full\r\nTxR_BL\r\n• Title: Outbound DRS Ring Transactions to Cache\r\n• Category: OUTBOUND_TX Events\r\n• Event Code: 0x10\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of DRS messages sent out on the BL ring. This can be filtered by \r\nthe destination.\r\nTable 2-65. Unit Masks for TxR_AD_CYCLES_FULL\r\nExtension umask\r\n[15:8] Description\r\nSCHED0 bxxxxxxx1 Scheduler 0\r\nFilter for cycles full from scheduler bank 0\r\nSCHED1 bxxxxxx1x Scheduler 1\r\nFilter for cycles full from scheduler bank 1\r\nALL bxxxxxx11 All\r\nCycles full from both schedulers\r\nTable 2-66. Unit Masks for TxR_AK_CYCLES_FULL\r\nExtension umask\r\n[15:8] Description\r\nSCHED0 bxxxxxxx1 Scheduler 0\r\nFilter for cycles full from scheduler bank 0\r\nSCHED1 bxxxxxx1x Scheduler 1\r\nFilter for cycles full from scheduler bank 1\r\nALL bxxxxxx11 All\r\nCycles full from both schedulers\r\nTable 2-67. Unit Masks for TxR_BL\r\nExtension umask\r\n[15:8] Description\r\nDRS_CACHE bxxxxxxx1 Data to Cache\r\nFilter for data being sent to the cache.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/bb772109-9ee3-4bc0-b1d3-6c850d249768.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=28c7b8cfc6302bc221866df0a953f37391f72bb95572d4abe3124b2cd253839e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 215
      },
      {
        "segments": [
          {
            "segment_id": "9ec1c891-565a-45c6-bdd2-d6de811f4af1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 81,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 75\r\nUncore Performance Monitoring\r\nHome Agent (HA) Performance Monitoring\r\nTxR_BL_CYCLES_FULL\r\n• Title: BL Egress Full\r\n• Category: EGRESS Events\r\n• Event Code: 0x36\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: BL Egress Full\r\nTxR_BL_OCCUPANCY\r\n• Title: BL Egress Occupancy\r\n• Category: BL_EGRESS Events\r\n• Event Code: 0x34\r\n• Max. Inc/Cyc:. 20, Register Restrictions: 0-3\r\n• Definition: BL Egress Occupancy\r\nWPQ_CYCLES_NO_REG_CREDITS\r\n• Title: HA iMC CHN0 WPQ Credits Empty - Regular\r\n• Category: WPQ_CREDITS Events\r\n• Event Code: 0x18\r\n• Max. Inc/Cyc:. 4, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when there are no “regular” credits available for posting \r\nwrites from the HA into the iMC. In order to send writes into the memory controller, the HA must \r\nfirst acquire a credit for the iMC's WPQ (write pending queue). This queue is broken into regular \r\ncredits/buffers that are used by general writes, and “special” requests such as ISOCH writes. This \r\ncount only tracks the regular credits Common high bandwidth workloads should be able to make \r\nuse of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the \r\nDRS_CORE bxxxxxx1x Data to Core\r\nFilter for data being sent directly to the requesting core.\r\nDRS_QPI bxxxxx1xx Data to QPI\r\nFilter for data being sent to a remote socket over QPI.\r\nTable 2-68. Unit Masks for TxR_BL_CYCLES_FULL\r\nExtension umask\r\n[15:8] Description\r\nSCHED0 bxxxxxxx1 Scheduler 0\r\nFilter for cycles full from scheduler bank 0\r\nSCHED1 bxxxxxx1x Scheduler 1\r\nFilter for cycles full from scheduler bank 1\r\nALL bxxxxxx11 All\r\nCycles full from both schedulers\r\nTable 2-69. Unit Masks for TxR_BL_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nSCHED0 b00000001 Scheduler 0\r\nFilter for occupancy from scheduler bank 0\r\nSCHED1 b00000010 Scheduler 1\r\nFilter for occupancy from scheduler bank 1\r\nTable 2-67. Unit Masks for TxR_BL\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/9ec1c891-565a-45c6-bdd2-d6de811f4af1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dd21573a0eb1a787b98adbb53582c84a847a7e4544ce5c7bfa881989973320f3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 307
      },
      {
        "segments": [
          {
            "segment_id": "25055371-cda6-4659-9063-f039128f3e10",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 82,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\n76 Reference Number: 329468-002\r\nregular and special buffers at the same time. One can filter based on the memory controller chan\u0002nel. One or more channels can be tracked at a given time.\r\n2.5 MEMORY CONTROLLER (IMC) PERFORMANCE MONITORING\r\n2.5.1 Overview of the iMC\r\nThe integrated Memory Controller provides the interface to DRAM and communicates to the rest of the \r\nuncore through the Home Agent (i.e. the iMC does not connect to the Ring).\r\nIn conjunction with the HA, the memory controller also provides a variety of RAS features, such as ECC, \r\nlockstep, memory access retry, memory scrubbing, thermal throttling, mirroring, and rank sparing. \r\n2.5.2 Functional Overview\r\nThe memory controller is the interface between the home Home Agent (HA) and DRAM, translating \r\nread and write commands into specific memory commands and schedules them with respect to \r\nmemory timing. The other main function of the memory controller is advanced ECC support. \r\nBecause of the data path affinity to the HA data path, the HA is paired with the memory controller.\r\nThe uncore of Ivy Bridge-EP microarchitecture can support up to four channels of DDR3 or metaRAM. \r\nFor DDR3, the number of DIMMs per channel depends on the speed it is running and the package.\r\n• Three or four DDR3 memory channels\r\n• DIMM technologies supported\r\n- UDIMM DDR3 - SR - x8 and x16 data widths; DR - x8, data width\r\n- RDIMM DDR3 - SR, DR and QR - x4 and x8 data widths\r\n- LRDIMM DDR3 - QR; x4 and x8 data width with direct map or with rank multiplication\r\n• DRAM speeds supported - 800, 1067, 1333, 1600 and 1867 MT/s\r\n• Supports up to maximum of eight ranks per channel\r\n• Supports ECC RDIMM and LRDIMM and both ECC and non-ECC UDIMMS\r\n• Processors supporting 4 memory channels pair channel 0 & 1 and channel 2 & 3 for lockstep \r\nmode; otherwise the processor pairs channels 2 & 3 only.\r\n• Processor supporting 4 memory channels also support channel 0 & 1 mirroring as well as channel \r\n2 & 3 mirroring; otherwise the processor only supports channels 2 & 3 mirroring.\r\n• Support for unbuffered DDR3 and registered DDR3\r\n• Up to four independent DDR3 channels\r\nTable 2-70. Unit Masks for WPQ_CYCLES_NO_REG_CREDITS\r\nExtension umask\r\n[15:8] Description\r\nCHN0 b00000001 Channel 0\r\nFilter for memory controller channel 0 only.\r\nCHN1 b00000010 Channel 1\r\nFilter for memory controller channel 1 only.\r\nCHN2 b00000100 Channel 2\r\nFilter for memory controller channel 2 only.\r\nCHN3 b00001000 Channel 3\r\nFilter for memory controller channel 3 only.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/25055371-cda6-4659-9063-f039128f3e10.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e89eb0dfcc18caa6fb660cdf3a1ca005e622a57daccd35f7b01a59c32eb24046",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 430
      },
      {
        "segments": [
          {
            "segment_id": "19899ffb-3729-4538-885f-7863a1cb96e5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 83,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 77\r\nUncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\n• Eight independent banks per rank\r\n• Support for DDR3 frequencies of 800,1067, 1333, 1600 GT/s. The speed achievable is \r\ndependent on the number of DIMMs per channel.\r\n• Up to three DIMMs per channel (depends on the speed)\r\n• Support for 512 Mb, 1Gb, 2Gb, and 4Gb DIMMs\r\n• Support for x4, x8 and x16 data lines per native DDR3 device\r\n• ECC support (correct any error within a x4 device)\r\n• Lockstep support for x8 chipfail\r\n• Open or closed page policy\r\n• Channel Mirroring per socket\r\n• Demand and Patrol Scrubbing support\r\n• Memory Initialization\r\n• Poisoning Support\r\n• Support for LR-DIMMs (load reduced) for a buffered memory solution demanding higher \r\ncapacity memory subsytems.\r\n• Support for low voltage DDR3 (LV-DDR3, 1.35V)\r\n2.5.3 iMC Performance Monitoring Overview\r\nThe iMC supports event monitoring through four 48-bit wide counters \r\n(MC_CHy_PCI_PMON_CTR{3:0}) and one fixed counter (MC_CHy_PCI_PMON_FIXED_CTR) for each \r\nDRAM channel (of which there are 4) the MC is attached to. Each of these counters can be \r\nprogrammed (MC_CHy_PCI_PMON_CTL{3:0}) to capture any MC event. The MC counters will incre\u0002ment by a maximum of 8b per cycle. \r\nFor information on how to setup a monitoring session, refer to Section 2.1, “Uncore Per-Socket \r\nPerformance Monitoring Control”.\r\n2.5.3.1 iMC PMON Registers - On Overflow and the Consequences (PMI/Freeze)\r\nIf an overflow is detected from an MC performance counter enabled to communicate its overflow \r\n(MC_CHy_PCI_PMON_CTL.ov_en is set to 1), the overflow bit is set at the box level \r\n(MC_CHy_PCI_PMON_BOX_STATUS.ov) and an overflow message is sent to the UBox. When the \r\nUBox receives the overflow signal, the U_MSR_PMON_GLOBAL_STATUS.ov_m bit overflow is set (see \r\nTable 2-3, “U_MSR_PMON_GLOBAL_STATUS Register – Field Definitions”) and a PMI can be gener\u0002ated.\r\nOnce a freeze has occurred, in order to see a new freeze, the overflow field responsible for the freeze, \r\nmust be cleared by setting the corresponding bit in MC_PCI_PMON_BOX_STATUS.ov and \r\nU_MSR_PMON_GLOBAL_STATU.ov_m. Assuming all the counters have been locally enabled (.en bit in \r\ndata registers meant to monitor events) and the overflow bit(s) has been cleared, the iMC is prepared \r\nfor a new sample interval. Once the global controls have been re-enabled (Section 2.1.4, “Enabling a \r\nNew Sample Interval from Frozen Counters”), counting will resume.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/19899ffb-3729-4538-885f-7863a1cb96e5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f93ad5fc3efb7c1f46cdb414b73deb79a098399da756885b3ff1278ac3e20603",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 376
      },
      {
        "segments": [
          {
            "segment_id": "fb9c65e1-f214-4c7b-9d82-e108392970fb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 84,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\n78 Reference Number: 329468-002\r\n2.5.4 iMC Performance Monitors\r\nTable 2-71. iMC Performance Monitoring MSRs\r\n2.5.4.1 MC Box Level PMON State\r\nThe following registers represent the state governing all box-level PMUs in the MC Boxes. \r\nIn the case of the MC, the MC_CHy_PCI_PMON_BOX_CTL register provides the ability to manually \r\nfreeze the counters in the box (.frz) and reset the generic state (.rst_ctrs and .rst_ctrl).\r\nIf an overflow is detected from one of the MC Box PMON registers, the corresponding bit in the \r\nMC_CHy_PCI_PMON_BOX_STATUS.ov field will be set. To reset these overflow bits, a user must write a \r\nvalue of ‘1’ to them (which will clear the bits).\r\nRegister Name PCICFG \r\nAddress\r\nSize \r\n(bits) Description\r\nPCICFG Base Address Dev:Func\r\nMC0 Channel 0 PMON Registers D16:F4\r\nMC0 Channel 1 PMON Registers D16:F5\r\nMC0 Channel 2 PMON Registers D16:F0\r\nMC0 Channel 3 PMON Registers D16:F1\r\nMC1 Channel 0 PMON Registers D30:F4\r\nMC1 Channel 1 PMON Registers D30:F5\r\nMC1 Channel 2 PMON Registers D30:F0\r\nMC1 Channel 3 PMON Registers D30:F1\r\nBox-Level Control/Status\r\nMC_CHy_PCI_PMON_BOX_STATUS F8 32 MC Channel y PMON Box-Wide Status\r\nMC_CHy_PCI_PMON_BOX_CTL F4 32 MC Channel y PMON Box-Wide Control\r\nGeneric Counter Control\r\nMC_CHy_PCI_PMON_FIXED_CTL F0 32 MC Channel y PMON Control for Fixed \r\nCounter\r\nMC_CHy_PCI_PMON_CTL3 E4 32 MC Channel y PMON Control for Counter 3\r\nMC_CHy_PCI_PMON_CTL2 E0 32 MC Channel y PMON Control for Counter 2\r\nMC_CHy_PCI_PMON_CTL1 DC 32 MC Channel y PMON Control for Counter 1\r\nMC_CHy_PCI_PMON_CTL0 D8 32 MC Channel y PMON Control for Counter 0\r\nGeneric Counters\r\nMC_CHy_PCI_PMON_FIXED_CTR D4+D0 32x2 MC Channel y PMON Fixed Counter\r\nMC_CHy_PCI_PMON_CTR3 BC+B8 32x2 MC Channel y PMON Counter 3\r\nMC_CHy_PCI_PMON_CTR2 B4+B0 32x2 MC Channel y PMON Counter 2\r\nMC_CHy_PCI_PMON_CTR1 AC+A8 32x2 MC Channel y PMON Counter 1\r\nMC_CHy_PCI_PMON_CTR0 A4+A0 32x2 MC Channel y PMON Counter 0",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/fb9c65e1-f214-4c7b-9d82-e108392970fb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=17927634603b27fa1572cce88b1a02bcc676ec02584073e4937acc9726522e48",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 298
      },
      {
        "segments": [
          {
            "segment_id": "208651a1-9a46-4a86-9c00-643140ea4242",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 85,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 79\r\nUncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\nTable 2-72. MC_CHy_PCI_PMON_BOX_CTL Register – Field Definitions\r\nU\r\nTable 2-73. MC_CHy_PCI_PMON_BOX_STATUS Register – Field Definitions\r\n2.5.4.2 MC PMON state - Counter/Control Pairs\r\nThe following table defines the layout of the MC performance monitor control registers. The main task \r\nof these configuration registers is to select the event to be monitored by their respective data counter \r\n(.ev_sel, .umask). Additional control bits are provided to shape the incoming events (e.g. .edge_det, \r\n.thresh) as well as provide additional functionality for monitoring software (.rst,.ov_en).\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:18 RV 0 Ignored\r\nrsv 17:16 RV 0 Reserved; SW must write to 1 else behavior is undefined.\r\nig 15:9 RV 0 Ignored\r\nfrz 8 WO 0 Freeze. \r\nIf set to 1 the counters in this box will be frozen.\r\nig 7:2 RV 0 Ignored\r\nrst_ctrs 1 WO 0 Reset Counters. \r\nWhen set to 1, the Counter Registers will be reset to 0.\r\nrst_ctrl 0 WO 0 Reset Control. \r\nWhen set to 1, the Counter Control Registers will be reset to \r\n0.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:6 RV 0 Ignored\r\nrsv 5 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nov 4:0 RW1C 0 If an overflow is detected from the corresponding \r\nMC_CHy_PCI_PMON_CTR register, it’s overflow bit will be set. \r\nNOTE: Write of ‘1’ will clear the bit.\r\nBit 4 -overflow for *_PMON_CTR4\r\nBit 1 -overflow for *_PMON_CTR1\r\nBit 0 -overflow for the fixed counter",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/208651a1-9a46-4a86-9c00-643140ea4242.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=da2d539052865d90c0c7dd59a5257c594e8c47f34893c877c4420f611360d45a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 253
      },
      {
        "segments": [
          {
            "segment_id": "fb785f85-b4ed-4c31-b56c-b4964e1afbb7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 86,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\n80 Reference Number: 329468-002\r\nTable 2-74. MC_CHy_PCI_PMON_CTL{3-0} Register – Field Definitions\r\nAll MC performance monitor data registers are 48-bit wide. A counter overflow occurs when a carry out \r\nfrom bit 47 is detected. Software can force all uncore counting to freeze after N events by preloading a \r\nmonitor with a count value of 248 - N and setting the control register to send an overflow message to \r\nthe UBox (refer to Section 2.1.1, “Counter Overflow”). During the interval of time between overflow \r\nand global disable, the counter value will wrap and continue to collect events. \r\nIf accessible, software can continuously read the data registers without disabling event collection.\r\nThis is a counter that always tracks the number of DRAM clocks (dclks - half of DDR speed) in the iMC. \r\nThe dclk never changes frequency (on a given system), and therefore is a good measure of wall clock \r\n(unlike the Uncore clock which can change frequency based on system load). This clock is generally a \r\nbit slower than the uclk (~800MHz to ~1.066GHz) and therefore has less fidelity.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nthresh 31:24 RW-V 0 Threshold used in counter comparison.\r\nrsv 23 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nen 22 RW-V 0 Local Counter Enable. \r\nrsv 21 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nov_en 20 RW-V 0 When this bit is asserted and the corresponding counter \r\noverflows, its overflow bit is set in the local status register \r\n(MC_CHy_PCI_PMON_BOX_STATUS.ov) and an overflow is \r\nsent on the message channel to the UBox. When the \r\noverflow is received by the UBox, the bit corresponding to \r\nthis MC will be set in \r\nU_MSR_PMON_GLOBAL_STATUS.ov_m{1,0}. \r\nig 19 RV 0 Ignored\r\nedge_det 18 RW-V 0 When set to 1, rather than measuring the event in each \r\ncycle it is active, the corresponding counter will increment \r\nwhen a 0 to 1 transition (i.e. rising edge) is detected.\r\nWhen 0, the counter will increment in each cycle that the \r\nevent is asserted.\r\nNOTE: .edge_det is in series following .thresh. Due to this, \r\nthe .thresh field must be set to a non-0 value. For events \r\nthat increment by no more than 1 per cycle, set .thresh to \r\n0x1.\r\nrst 17 WO 0 When set to 1, the corresponding counter will be cleared to \r\n0.\r\nrsv 16 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\numask 15:8 RW-V 0 Select subevents to be counted within the selected event. \r\nev_sel 7:0 RW-V 0 Select event to be counted.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/fb785f85-b4ed-4c31-b56c-b4964e1afbb7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cf1b64ccae1e8041fa29b926368fb41063f797e0f99783a83e3edeed08d70b45",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 433
      },
      {
        "segments": [
          {
            "segment_id": "a8c1d769-2656-4dc0-963b-a31d30b50f4c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 87,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 81\r\nUncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\nTable 2-75. MC_CHy_PCI_PMON_FIXED_CTL Register – Field Definitions\r\nTable 2-76. MC_CHy_PCI_PMON_CTR{FIXED,3-0} Register – Field Definitions\r\n2.5.5 iMC Performance Monitoring Events\r\n2.5.5.1 An Overview:\r\nA sampling of events available for monitoring in the iMC: \r\n• Translated commands: Various Read and Write CAS commands\r\n• Memory commands: CAS, Precharge, Refresh, Preemptions, etc,\r\n• Page hits and page misses.\r\n• Page Closing Events\r\n• Control of power consumption: Thermal Throttling by Rank, Time spent in CKE ON mode, \r\netc.\r\nand many more.\r\nInternal iMC Queues:\r\nRPQ - Read Pending Queue. NOTE: HA also tracks some information related to the iMC’s RPQ.\r\nWPQ - Write Pending Queue. NOTE: HA also tracks some information related to the iMC’s WPQ.\r\n2.5.6 iMC Box Events Ordered By Code\r\nThe following table summarizes the directly measured iMC Box events.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:24 RV 0 Ignored\r\nrsv 23 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nen 22 RW-V 0 Local Counter Enable. \r\nrsv 21 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nov_en 20 RW-V 0 When this bit is asserted and the corresponding counter \r\noverflows, a PMI exception is sent to the UBox.\r\nrst 19 WO 0 When set to 1, the corresponding counter will be cleared to \r\n0.\r\nig 18:0 RV 0 Ignored\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 63:48 RV 0 Ignored\r\nevent_count 47:0 RW-V 0 48-bit performance event counter",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/a8c1d769-2656-4dc0-963b-a31d30b50f4c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a50b1095b19b47cc7a7f4e399dddce511c74538e1ed1286ff90eadda11135d02",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 252
      },
      {
        "segments": [
          {
            "segment_id": "05d6c230-8e81-4afe-8dfc-2c1d35f93e8e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 88,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\n82 Reference Number: 329468-002\r\nSymbol Name Event \r\nCode Ctrs\r\nMax \r\nInc/\r\nCyc\r\nDescription\r\nDCLOCKTICKS 0x00 0-3 1 DRAM Clockticks\r\nACT_COUNT 0x01 0-3 1 DRAM Activate Count\r\nPRE_COUNT 0x02 0-3 1 DRAM Precharge commands.\r\nCAS_COUNT 0x04 0-3 1 DRAM RD_CAS and WR_CAS Commands.\r\nDRAM_REFRESH 0x05 0-3 1 Number of DRAM Refreshes Issued\r\nDRAM_PRE_ALL 0x06 0-3 1 DRAM Precharge All Commands\r\nMAJOR_MODES 0x07 0-3 1 Cycles in a Major Mode\r\nPREEMPTION 0x08 0-3 1 Read Preemption Count\r\nECC_CORRECTABLE_ERRORS 0x09 0-3 1 ECC Correctable Errors\r\nRPQ_INSERTS 0x10 0-3 1 Read Pending Queue Allocations\r\nRPQ_CYCLES_NE 0x11 0-3 1 Read Pending Queue Not Empty\r\nWPQ_INSERTS 0x20 0-3 1 Write Pending Queue Allocations\r\nWPQ_CYCLES_NE 0x21 0-3 1 Write Pending Queue Not Empty\r\nWPQ_CYCLES_FULL 0x22 0-3 1 Write Pending Queue Full Cycles\r\nWPQ_READ_HIT 0x23 0-3 1 Write Pending Queue CAM Match\r\nWPQ_WRITE_HIT 0x24 0-3 1 Write Pending Queue CAM Match\r\nPOWER_THROTTLE_CYCLES 0x41 0-3 1 Throttle Cycles for Rank 0\r\nPOWER_PCU_THROTTLING 0x42 0-3 1\r\nPOWER_SELF_REFRESH 0x43 0-3 0 Clock-Enabled Self-Refresh\r\nPOWER_CKE_CYCLES 0x83 0-3 16 CKE_ON_CYCLES by Rank\r\nPOWER_CHANNEL_DLLOFF 0x84 0-3 1 Channel DLLOFF Cycles\r\nPOWER_CHANNEL_PPD 0x85 0-3 4 Channel PPD Cycles\r\nPOWER_CRITICAL_THROTTLE_CYCL\r\nES\r\n0x86 0-3 1 Critical Throttle Cycles\r\nVMSE_WR_PUSH 0x90 0-3 1 VMSE WR PUSH issued\r\nVMSE_MXB_WR_OCCUPANCY 0x91 0-3 32 VMSE MXB write buffer occupancy\r\nRD_CAS_PRIO 0xa0 0-3 1\r\nBYP_CMDS 0xa1 0-3 1\r\nRD_CAS_RANK0 0xb0 0-3 1 RD_CAS Access to Rank 0\r\nRD_CAS_RANK1 0xb1 0-3 1 RD_CAS Access to Rank 1\r\nRD_CAS_RANK2 0xb2 0-3 1 RD_CAS Access to Rank 2\r\nRD_CAS_RANK3 0xb3 0-3 1 RD_CAS Access to Rank 3\r\nRD_CAS_RANK4 0xb4 0-3 1 RD_CAS Access to Rank 4\r\nRD_CAS_RANK5 0xb5 0-3 1 RD_CAS Access to Rank 5\r\nRD_CAS_RANK6 0xb6 0-3 1 RD_CAS Access to Rank 6\r\nRD_CAS_RANK7 0xb7 0-3 1 RD_CAS Access to Rank 7\r\nWR_CAS_RANK0 0xb8 0-3 1 WR_CAS Access to Rank 0\r\nWR_CAS_RANK1 0xb9 0-3 1 WR_CAS Access to Rank 1\r\nWR_CAS_RANK2 0xba 0-3 1 WR_CAS Access to Rank 2\r\nWR_CAS_RANK3 0xbb 0-3 1 WR_CAS Access to Rank 3\r\nWR_CAS_RANK4 0xbc 0-3 1 WR_CAS Access to Rank 4\r\nWR_CAS_RANK5 0xbd 0-3 1 WR_CAS Access to Rank 5",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/05d6c230-8e81-4afe-8dfc-2c1d35f93e8e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1a9c218a4246c27605df2a115add9024aef346fa8523b979ffc1bd6be430988d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 350
      },
      {
        "segments": [
          {
            "segment_id": "3228c110-1266-459e-8943-a7eb04dc900f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 89,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 83\r\nUncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\n2.5.7 iMC Box Common Metrics (Derived Events)\r\nThe following table summarizes metrics commonly calculated from iMC Box events.\r\nWR_CAS_RANK6 0xbe 0-3 1 WR_CAS Access to Rank 6\r\nWR_CAS_RANK7 0xbf 0-3 1 WR_CAS Access to Rank 7\r\nWMM_TO_RMM 0xc0 0-3 1 Transition from WMM to RMM because of \r\nlow threshold\r\nWRONG_MM 0xc1 0-3 1 Not getting the requested Major Mode\r\nSymbol Name:\r\n Definition Equation\r\nMEM_BW_READS:\r\n Memory bandwidth consumed by reads. \r\nExpressed in bytes.\r\n(CAS_COUNT.RD * 64)\r\nMEM_BW_TOTAL:\r\n Total memory bandwidth. Expressed in \r\nbytes.\r\nMEM_BW_READS + MEM_BW_WRITES\r\nMEM_BW_WRITES:\r\n Memory bandwidth consumed by writes \r\nExpressed in bytes.\r\n(CAS_COUNT.WR * 64)\r\nPCT_CYCLES_CRITICAL_THROTTLE:\r\n The percentage of cycles all DRAM ranks in \r\ncritical thermal throttling\r\nPOWER_CRITICAL_THROTTLE_CYCLES / \r\nMC_Chy_PCI_PMON_CTR_FIXED\r\nPCT_CYCLES_DLLOFF:\r\n The percentage of cycles all DRAM ranks in \r\nCKE slow (DLOFF) mode\r\nPOWER_CHANNEL_DLLOFF / \r\nMC_Chy_PCI_PMON_CTR_FIXED\r\nPCT_CYCLES_DRAM_RANKx_IN_CKE:\r\n The percentage of cycles DRAM rank (x) \r\nspent in CKE ON mode.\r\nPOWER_CKE_CYCLES.RANKx / \r\nMC_Chy_PCI_PMON_CTR_FIXED\r\nPCT_CYCLES_DRAM_RANKx_IN_THR:\r\n The percentage of cycles DRAM rank (x) \r\nspent in thermal throttling.\r\nPOWER_THROTTLE_CYCLES.RANKx / \r\nMC_Chy_PCI_PMON_CTR_FIXED\r\nPCT_CYCLES_PPD:\r\n The percentage of cycles all DRAM ranks in \r\nPPD mode\r\nPOWER_CHANNEL_PPD / MC_Chy_PCI_PMON_CTR_FIXED\r\nPCT_CYCLES_SELF_REFRESH:\r\n The percentage of cycles Memory is in self \r\nrefresh power mode\r\nPOWER_SELF_REFRESH / MC_Chy_PCI_PMON_CTR_FIXED\r\nPCT_RD_REQUESTS:\r\n Percentage of read requests from total \r\nrequests.\r\nRPQ_INSERTS / (RPQ_INSERTS + WPQ_INSERTS)\r\nPCT_REQUESTS_PAGE_EMPTY:\r\n Percentage of memory requests that \r\nresulted in Page Empty\r\n(ACT_COUNT - PRE_COUNT.PAGE_MISS)/ (CAS_COUNT.RD \r\n+ CAS_COUNT.WR)\r\nPCT_REQUESTS_PAGE_HIT:\r\n Percentage of memory requests that \r\nresulted in Page Hits\r\n1 - (PCT_REQUESTS_PAGE_EMPTY + \r\nPCT_REQUESTS_PAGE_MISS)\r\nPCT_REQUESTS_PAGE_MISS:\r\n Percentage of memory requests that \r\nresulted in Page Misses\r\nPRE_COUNT.PAGE_MISS / (CAS_COUNT.RD + \r\nCAS_COUNT.WR)\r\nPCT_WR_REQUESTS:\r\n Percentage of write requests from total \r\nrequests.\r\nWPQ_INSERTS / (RPQ_INSERTS + WPQ_INSERTS)\r\nSymbol Name Event \r\nCode Ctrs\r\nMax \r\nInc/\r\nCyc\r\nDescription",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/3228c110-1266-459e-8943-a7eb04dc900f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2584bd91eb0f9ddcbe2efbca51b8c423574bea5957fc5221040d9f6e7f393c2f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e3ad7c4c-6f5b-45a8-9edd-73a7091ef082",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 90,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\n84 Reference Number: 329468-002\r\n2.5.8 iMC Box Performance Monitor Event List\r\nThe section enumerates performance monitoring events for the iMC Box.\r\nACT_COUNT\r\n• Title: DRAM Activate Count\r\n• Category: ACT Events\r\n• Event Code: 0x01\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of DRAM Activate commands sent on this channel. Activate com\u0002mands are issued to open up a page on the DRAM devices so that it can be read or written to with a \r\nCAS. One can calculate the number of Page Misses by subtracting the number of Page Miss pre\u0002charges from the number of Activates.\r\nBYP_CMDS\r\n• Title: \r\n• Category: BYPASS Command Events\r\n• Event Code: 0xa1\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nCAS_COUNT\r\n• Title: DRAM RD_CAS and WR_CAS Commands.\r\n• Category: PRE Events\r\n• Event Code: 0x04\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: DRAM RD_CAS and WR_CAS Commands\r\nTable 2-77. Unit Masks for ACT_COUNT\r\nExtension umask\r\n[15:8] Description\r\nRD bxxxxxxx1 Activate due to Read\r\nWR bxxxxxx1x Activate due to Write\r\nBYP bxxxx1xxx Activate due to Write\r\nTable 2-78. Unit Masks for BYP_CMDS\r\nExtension umask\r\n[15:8] Description\r\nACT bxxxxxxx1 ACT command issued by 2 cycle bypass\r\nCAS bxxxxxx1x CAS command issued by 2 cycle bypass\r\nPRE bxxxxx1xx PRE command issued by 2 cycle bypass",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/e3ad7c4c-6f5b-45a8-9edd-73a7091ef082.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7b73fc9fa4c7083495fe92cbab1ac950050c79c2968c7e798bd086e3110be2d5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 506
      },
      {
        "segments": [
          {
            "segment_id": "2233ed6d-bcbe-453e-82ff-f7f2499952aa",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 91,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 85\r\nUncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\nDCLOCKTICKS\r\n• Title: DRAM Clockticks\r\n• Category: DCLK Events\r\n• Event Code: 0x00\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nDRAM_PRE_ALL\r\n• Title: DRAM Precharge All Commands\r\n• Category: DRAM_PRE_ALL Events\r\n• Event Code: 0x06\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of times that the precharge all command was sent.\r\nDRAM_REFRESH\r\n• Title: Number of DRAM Refreshes Issued\r\n• Category: DRAM_REFRESH Events\r\n• Event Code: 0x05\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of refreshes issued.\r\nTable 2-79. Unit Masks for CAS_COUNT\r\nExtension umask\r\n[15:8] Description\r\nRD_REG bxxxxxxx1 All DRAM RD_CAS (w/ and w/out auto-pre)\r\nCounts the total number or DRAM Read CAS commands issued \r\non this channel. This includes both regular RD CAS commands as \r\nwell as those with implicit Precharge. AutoPre is only used in \r\nsystems that are using closed page policy. We do not filter based \r\non major mode, as RD_CAS is not issued during WMM (with the \r\nexception of underfills).\r\nRD_UNDERFILL bxxxxxx1x Underfill Read Issued\r\nCounts the number of underfill reads that are issued by the \r\nmemory controller. This will generally be about the same as the \r\nnumber of partial writes, but may be slightly less because of \r\npartials hitting in the WPQ. While it is possible for underfills to be \r\nissued in both WMM and RMM, this event counts both.\r\nRD b00000011 All DRAM Reads (RD_CAS + Underfills)\r\nCounts the total number of DRAM Read CAS commands issued \r\non this channel (including underfills).\r\nWR_WMM bxxxxx1xx DRAM WR_CAS (w/ and w/out auto-pre) in Write Major Mode\r\nCounts the total number or DRAM Write CAS commands issued \r\non this channel while in Write-Major-Mode.\r\nWR_RMM bxxxx1xxx DRAM WR_CAS (w/ and w/out auto-pre) in Read Major Mode\r\nCounts the total number of Opportunistic DRAM Write CAS \r\ncommands issued on this channel while in Read-Major-Mode.\r\nWR b00001100 All DRAM WR_CAS (both Modes)\r\nCounts the total number of DRAM Write CAS commands issued \r\non this channel.\r\nALL b00001111 All DRAM WR_CAS (w/ and w/out auto-pre)\r\nCounts the total number of DRAM CAS commands issued on this \r\nchannel.\r\nRD_WMM bxxx1xxxx Read CAS issued in WMM\r\nRD_RMM bxx1xxxxx Read CAS issued in RMM",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/2233ed6d-bcbe-453e-82ff-f7f2499952aa.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=80febf8ce064793d4e791ab9a853a4891c97ca60f43dda7451a5c1caacd95c8a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 375
      },
      {
        "segments": [
          {
            "segment_id": "ea12e36a-dfcf-40f8-babc-87157517f145",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 92,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\n86 Reference Number: 329468-002\r\nECC_CORRECTABLE_ERRORS\r\n• Title: ECC Correctable Errors\r\n• Category: ECC Events\r\n• Event Code: 0x09\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of ECC errors detected and corrected by the iMC on this channel. \r\nThis counter is only useful with ECC DRAM devices. This count will increment one time for each cor\u0002rection regardless of the number of bits corrected. The iMC can correct up to 4 bit errors in indepen\u0002dent channel mode and 8 bit errors in lockstep mode.\r\nMAJOR_MODES\r\n• Title: Cycles in a Major Mode\r\n• Category: MAJOR_MODES Events\r\n• Event Code: 0x07\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the total number of cycles spent in a major mode (selected by a filter) on the \r\ngiven channel. Major modes are channel-wide, and not a per-rank (or DIMM or bank) mode.\r\nPOWER_CHANNEL_DLLOFF\r\n• Title: Channel DLLOFF Cycles\r\n• Category: POWER Events\r\n• Event Code: 0x84\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles when all the ranks in the channel are in CKE Slow (DLLOFF) mode.\r\n• NOTE: IBT = Input Buffer Termination = Off\r\nTable 2-80. Unit Masks for DRAM_REFRESH\r\nExtension umask\r\n[15:8] Description\r\nPANIC bxxxxxx1x\r\nHIGH bxxxxx1xx\r\nTable 2-81. Unit Masks for MAJOR_MODES\r\nExtension umask\r\n[15:8] Description\r\nREAD bxxxxxxx1 Read Major Mode\r\nRead Major Mode is the default mode for the iMC, as reads are \r\ngenerally more critical to forward progress than writes.\r\nWRITE bxxxxxx1x Write Major Mode\r\nThis mode is triggered when the WPQ hits high occupancy and \r\ncauses writes to be higher priority than reads. This can cause \r\nblips in the available read bandwidth in the system and \r\ntemporarily increase read latencies in order to achieve better \r\nbus utilizations and higher bandwidth.\r\nPARTIAL bxxxxx1xx Partial Major Mode\r\nThis major mode is used to drain starved underfill reads. Regular \r\nreads and writes are blocked and only underfill reads will be \r\nprocessed.\r\nISOCH bxxxx1xxx Isoch Major Mode\r\nWe group these two modes together so that we can use four \r\ncounters to track each of the major modes at one time. These \r\nmajor modes are used whenever there is an ISOCH txn in the \r\nmemory controller. In these mode, only ISOCH transactions are \r\nprocessed.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ea12e36a-dfcf-40f8-babc-87157517f145.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=586844e4886b7bf09578481f3140ae1b8ed98f57ca679600f2482e3ae77b5ba4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 380
      },
      {
        "segments": [
          {
            "segment_id": "4dbad8e3-affb-49dd-b723-2d1f5b5b9173",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 93,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 87\r\nUncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\nPOWER_CHANNEL_PPD\r\n• Title: Channel PPD Cycles\r\n• Category: POWER Events\r\n• Event Code: 0x85\r\n• Max. Inc/Cyc:. 4, Register Restrictions: 0-3\r\n• Definition: Number of cycles when all the ranks in the channel are in PPD mode. If IBT=off is \r\nenabled, then this can be used to count those cycles. If it is not enabled, then this can count the \r\nnumber of cycles when that could have been taken advantage of.\r\n• NOTE: IBT = Input Buffer Termination = On\r\nPOWER_CKE_CYCLES\r\n• Title: CKE_ON_CYCLES by Rank\r\n• Category: POWER Events\r\n• Event Code: 0x83\r\n• Max. Inc/Cyc:. 16, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent in CKE ON mode. The filter allows you to select a rank to \r\nmonitor. If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by \r\none rather than doing accumulation. Multiple counters will need to be used to track multiple ranks \r\nsimultaneously. There is no distinction between the different CKE modes (APD, PPDS, PPDF). This \r\ncan be determined based on the system programming. These events should commonly be used \r\nwith Invert to get the number of cycles in power saving mode. Edge Detect is also useful here. \r\nMake sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not \r\nnecessary).\r\nPOWER_CRITICAL_THROTTLE_CYCLES\r\n• Title: Critical Throttle Cycles\r\n• Category: POWER Events\r\n• Event Code: 0x86\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when the iMC is in critical thermal throttling. When this \r\nhappens, all traffic is blocked. This should be rare unless something bad is going on in the plat\u0002form. There is no filtering by rank for this event.\r\nPOWER_PCU_THROTTLING\r\n• Title: \r\n• Category: POWER Events\r\n• Event Code: 0x42\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nTable 2-82. Unit Masks for POWER_CKE_CYCLES\r\nExtension umask\r\n[15:8] Description\r\nRANK0 b00000001 DIMM ID\r\nRANK1 b00000010 DIMM ID\r\nRANK2 b00000100 DIMM ID\r\nRANK3 b00001000 DIMM ID\r\nRANK4 b00010000 DIMM ID\r\nRANK5 b00100000 DIMM ID\r\nRANK6 b01000000 DIMM ID\r\nRANK7 b10000000 DIMM ID",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/4dbad8e3-affb-49dd-b723-2d1f5b5b9173.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b326271b7c21e2bf84d319856b82e8233f35d9ea73591b79da026db1f8e71197",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 359
      },
      {
        "segments": [
          {
            "segment_id": "55cc0679-41b1-40e2-b273-8d01b37e861d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 94,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\n88 Reference Number: 329468-002\r\nPOWER_SELF_REFRESH\r\n• Title: Clock-Enabled Self-Refresh\r\n• Category: POWER Events\r\n• Event Code: 0x43\r\n• Max. Inc/Cyc:. 0, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when the iMC is in self-refresh and the iMC still has a \r\nclock. This happens in some package C-states. For example, the PCU may ask the iMC to enter self\u0002refresh even though some of the cores are still processing. One use of this is for Monroe technology. \r\nSelf-refresh is required during package C3 and C6, but there is no clock in the iMC at this time, so it \r\nis not possible to count these cases.\r\nPOWER_THROTTLE_CYCLES\r\n• Title: Throttle Cycles for Rank 0\r\n• Category: POWER Events\r\n• Event Code: 0x41\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles while the iMC is being throttled by either thermal con\u0002straints or by the PCU throttling. It is not possible to distinguish between the two. This can be fil\u0002tered by rank. If multiple ranks are selected and are being throttled at the same time, the counter \r\nwill only increment by 1.\r\nPREEMPTION\r\n• Title: Read Preemption Count\r\n• Category: PREEMPTION Events\r\n• Event Code: 0x08\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of times a read in the iMC preempts another read or write. Gener\u0002ally reads to an open page are issued ahead of requests to closed pages. This improves the page hit \r\nrate of the system. However, high priority requests can cause pages of active requests to be closed \r\nin order to get them out. This will reduce the latency of the high-priority request at the expense of \r\nlower bandwidth and increased overall average latency.\r\nTable 2-83. Unit Masks for POWER_THROTTLE_CYCLES\r\nExtension umask\r\n[15:8] Description\r\nRANK0 bxxxxxxx1 DIMM ID\r\nThermal throttling is performed per DIMM. We support 3 DIMMs \r\nper channel. This ID allows us to filter by ID.\r\nRANK1 bxxxxxx1x DIMM ID\r\nRANK2 bxxxxx1xx DIMM ID\r\nRANK3 bxxxx1xxx DIMM ID\r\nRANK4 bxxx1xxxx DIMM ID\r\nRANK5 bxx1xxxxx DIMM ID\r\nRANK6 bx1xxxxxx DIMM ID\r\nRANK7 b1xxxxxxx DIMM ID",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/55cc0679-41b1-40e2-b273-8d01b37e861d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8e75566c0da1c675b222ca18a030a79a7306f3a7f1d3e16c09f90c9e837bfb25",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 356
      },
      {
        "segments": [
          {
            "segment_id": "d4c2af5c-d386-4e99-9b46-d346f9361815",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 95,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 89\r\nUncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\nPRE_COUNT\r\n• Title: DRAM Precharge commands.\r\n• Category: PRE Events\r\n• Event Code: 0x02\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of DRAM Precharge commands sent on this channel.\r\nRD_CAS_PRIO\r\n• Title: \r\n• Category: CAS Events\r\n• Event Code: 0xa0\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nTable 2-84. Unit Masks for PREEMPTION\r\nExtension umask\r\n[15:8] Description\r\nRD_PREEMPT_RD bxxxxxxx1 Read over Read Preemption\r\nFilter for when a read preempts another read.\r\nRD_PREEMPT_WR bxxxxxx1x Read over Write Preemption\r\nFilter for when a read preempts a write.\r\nTable 2-85. Unit Masks for PRE_COUNT\r\nExtension umask\r\n[15:8] Description\r\nPAGE_MISS bxxxxxxx1 Precharges due to page miss\r\nCounts the number of DRAM Precharge commands sent on this \r\nchannel as a result of page misses. This does not include explicit \r\nprecharge commands sent with CAS commands in Auto\u0002Precharge mode. This does not include PRE commands sent as a \r\nresult of the page close counter expiration.\r\nPAGE_CLOSE bxxxxxx1x Precharge due to timer expiration\r\nCounts the number of DRAM Precharge commands sent on this \r\nchannel as a result of the page close counter expiring. This does \r\nnot include implicit precharge commands sent in auto-precharge \r\nmode.\r\nRD bxxxxx1xx Precharge due to read\r\nWR bxxxx1xxx Precharge due to write\r\nBYP bxxx1xxxx Precharge due to bypass\r\nTable 2-86. Unit Masks for RD_CAS_PRIO\r\nExtension umask\r\n[15:8] Description\r\nLOW bxxxxxxx1 Read CAS issued with LOW priority\r\nMED bxxxxxx1x Read CAS issued with MEDIUM priority\r\nHIGH bxxxxx1xx Read CAS issued with HIGH priority\r\nPANIC bxxxx1xxx Read CAS issued with PANIC NON ISOCH priority (starved)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/d4c2af5c-d386-4e99-9b46-d346f9361815.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=88023a8212f975b7e19dcbb5caea32e68c211869320bb7315019dae0fc3c12c7",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d036f4d9-1a6d-460c-8f0b-c5b2c3c0479f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 96,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\n90 Reference Number: 329468-002\r\nRD_CAS_RANK0\r\n• Title: RD_CAS Access to Rank 0\r\n• Category: CAS Events\r\n• Event Code: 0xb0\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nRD_CAS_RANK1\r\n• Title: RD_CAS Access to Rank 1\r\n• Category: CAS Events\r\n• Event Code: 0xb1\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nRD_CAS_RANK2\r\n• Title: RD_CAS Access to Rank 2\r\n• Category: CAS Events\r\n• Event Code: 0xb2\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nTable 2-87. Unit Masks for RD_CAS_RANK0\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3\r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7\r\nTable 2-88. Unit Masks for RD_CAS_RANK1\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3\r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/d036f4d9-1a6d-460c-8f0b-c5b2c3c0479f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0d063d4104511073f8099b09af43417fd5f862a39dadad56791847a7eea9a412",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 440
      },
      {
        "segments": [
          {
            "segment_id": "a3d0f928-6819-42ba-8c4c-26454e446c58",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 97,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 91\r\nUncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\nRD_CAS_RANK3\r\n• Title: RD_CAS Access to Rank 3\r\n• Category: CAS Events\r\n• Event Code: 0xb3\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nRD_CAS_RANK4\r\n• Title: RD_CAS Access to Rank 4\r\n• Category: CAS Events\r\n• Event Code: 0xb4\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nTable 2-89. Unit Masks for RD_CAS_RANK2\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3\r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7\r\nTable 2-90. Unit Masks for RD_CAS_RANK3\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3\r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7\r\nTable 2-91. Unit Masks for RD_CAS_RANK4\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/a3d0f928-6819-42ba-8c4c-26454e446c58.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5e6a46a76d30bf9c2da5b1618761aa6a36c8f6483e29bfc10747e2324b9afbed",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e8d9662f-c828-474c-a81d-4876df57ce56",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 98,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\n92 Reference Number: 329468-002\r\nRD_CAS_RANK5\r\n• Title: RD_CAS Access to Rank 5\r\n• Category: CAS Events\r\n• Event Code: 0xb5\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nRD_CAS_RANK6\r\n• Title: RD_CAS Access to Rank 6\r\n• Category: CAS Events\r\n• Event Code: 0xb6\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7\r\nTable 2-92. Unit Masks for RD_CAS_RANK5\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3\r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7\r\nTable 2-93. Unit Masks for RD_CAS_RANK6\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3\r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7\r\nTable 2-91. Unit Masks for RD_CAS_RANK4\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/e8d9662f-c828-474c-a81d-4876df57ce56.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e5f21d8fb409b8faef40ad25931ef72f42e6440b178ecb7bfac05684f0b599ba",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 344
      },
      {
        "segments": [
          {
            "segment_id": "c5e7a5e3-ce8e-4453-95ae-56426e9a4a6f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 99,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 93\r\nUncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\nRD_CAS_RANK7\r\n• Title: RD_CAS Access to Rank 7\r\n• Category: CAS Events\r\n• Event Code: 0xb7\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nRPQ_CYCLES_NE\r\n• Title: Read Pending Queue Not Empty\r\n• Category: RPQ Events\r\n• Event Code: 0x11\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles that the Read Pending Queue is not empty. This can then \r\nbe used to calculate the average occupancy (in conjunction with the Read Pending Queue Occu\u0002pancy count). The RPQ is used to schedule reads out to the memory controller and to track the \r\nrequests. Requests allocate into the RPQ soon after they enter the memory controller, and need \r\ncredits for an entry in this buffer before being sent from the HA to the iMC. They deallocate after \r\nthe CAS command has been issued to memory. This filter is to be used in conjunction with the \r\noccupancy filter so that one can correctly track the average occupancies for schedulable entries \r\nand scheduled requests.\r\nRPQ_INSERTS\r\n• Title: Read Pending Queue Allocations\r\n• Category: RPQ Events\r\n• Event Code: 0x10\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of allocations into the Read Pending Queue. This queue is used to \r\nschedule reads out to the memory controller and to track the requests. Requests allocate into the \r\nRPQ soon after they enter the memory controller, and need credits for an entry in this buffer \r\nbefore being sent from the HA to the iMC. They deallocate after the CAS command has been \r\nissued to memory. This includes both ISOCH and non-ISOCH requests.\r\nVMSE_MXB_WR_OCCUPANCY\r\n• Title: VMSE MXB write buffer occupancy\r\n• Category: VMSE Events\r\n• Event Code: 0x91\r\n• Max. Inc/Cyc:. 32, Register Restrictions: 0-3\r\n• Definition: \r\nTable 2-94. Unit Masks for RD_CAS_RANK7\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3\r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/c5e7a5e3-ce8e-4453-95ae-56426e9a4a6f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=647778465dab74fedbf373756991ccdb1a1bb25829710bc220a73a3de316a07f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 345
      },
      {
        "segments": [
          {
            "segment_id": "91720dd2-f40f-49b5-a38e-373cd9a9e441",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 100,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\n94 Reference Number: 329468-002\r\nVMSE_WR_PUSH\r\n• Title: VMSE WR PUSH issued\r\n• Category: VMSE Events\r\n• Event Code: 0x90\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nWMM_TO_RMM\r\n• Title: Transition from WMM to RMM because of low threshold\r\n• Category: MAJOR_MODES Events\r\n• Event Code: 0xc0\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nWPQ_CYCLES_FULL\r\n• Title: Write Pending Queue Full Cycles\r\n• Category: WPQ Events\r\n• Event Code: 0x22\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when the Write Pending Queue is full. When the WPQ is \r\nfull, the HA will not be able to issue any additional read requests into the iMC. This count should be \r\nsimilar count in the HA which tracks the number of cycles that the HA has no WPQ credits, just \r\nsomewhat smaller to account for the credit return overhead.\r\nWPQ_CYCLES_NE\r\n• Title: Write Pending Queue Not Empty\r\n• Category: WPQ Events\r\n• Event Code: 0x21\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles that the Write Pending Queue is not empty. This can then \r\nbe used to calculate the average queue occupancy (in conjunction with the WPQ Occupancy Accu\u0002mulation count). The WPQ is used to schedule write out to the memory controller and to track the \r\nwrites. Requests allocate into the WPQ soon after they enter the memory controller, and need cred\u0002its for an entry in this buffer before being sent from the HA to the iMC. They deallocate after being \r\nissued to DRAM. Write requests themselves are able to complete (from the perspective of the rest \r\nof the system) as soon they have “posted” to the iMC. This is not to be confused with actually per\u0002forming the write to DRAM. Therefore, the average latency for this queue is actually not useful for \r\ndeconstruction intermediate write latencies.\r\nTable 2-95. Unit Masks for VMSE_WR_PUSH\r\nExtension umask\r\n[15:8] Description\r\nWMM bxxxxxxx1 VMSE write PUSH issued in WMM\r\nRMM bxxxxxx1x VMSE write PUSH issued in RMM\r\nTable 2-96. Unit Masks for WMM_TO_RMM\r\nExtension umask\r\n[15:8] Description\r\nLOW_THRESH bxxxxxxx1 Transition from WMM to RMM because of starve counter\r\nSTARVE bxxxxxx1x\r\nVMSE_RETRY bxxxxx1xx",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/91720dd2-f40f-49b5-a38e-373cd9a9e441.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=91312ea3cfcc1a9278ba8a27911140dc634bf1d1bd824b6a9671832c5b1f728f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 369
      },
      {
        "segments": [
          {
            "segment_id": "65a7fa2f-8119-4387-9c2e-190e843c20a9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 101,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 95\r\nUncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\nWPQ_INSERTS\r\n• Title: Write Pending Queue Allocations\r\n• Category: WPQ Events\r\n• Event Code: 0x20\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of allocations into the Write Pending Queue. This can then be \r\nused to calculate the average queuing latency (in conjunction with the WPQ occupancy count). \r\nThe WPQ is used to schedule write out to the memory controller and to track the writes. Requests \r\nallocate into the WPQ soon after they enter the memory controller, and need credits for an entry \r\nin this buffer before being sent from the HA to the iMC. They deallocate after being issued to \r\nDRAM. Write requests themselves are able to complete (from the perspective of the rest of the \r\nsystem) as soon they have “posted” to the iMC.\r\nWPQ_READ_HIT\r\n• Title: Write Pending Queue CAM Match\r\n• Category: WPQ Events\r\n• Event Code: 0x23\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of times a request hits in the WPQ (write-pending queue). The \r\niMC allows writes and reads to pass up other writes to different addresses. Before a read or a \r\nwrite is issued, it will first CAM the WPQ to see if there is a write pending to that address. When \r\nreads hit, they are able to directly pull their data from the WPQ instead of going to memory. \r\nWrites that hit will overwrite the existing data. Partial writes that hit will not need to do underfill \r\nreads and will simply update their relevant sections.\r\nWPQ_WRITE_HIT\r\n• Title: Write Pending Queue CAM Match\r\n• Category: WPQ Events\r\n• Event Code: 0x24\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of times a request hits in the WPQ (write-pending queue). The \r\niMC allows writes and reads to pass up other writes to different addresses. Before a read or a \r\nwrite is issued, it will first CAM the WPQ to see if there is a write pending to that address. When \r\nreads hit, they are able to directly pull their data from the WPQ instead of going to memory. \r\nWrites that hit will overwrite the existing data. Partial writes that hit will not need to do underfill \r\nreads and will simply update their relevant sections.\r\nWRONG_MM\r\n• Title: Not getting the requested Major Mode\r\n• Category: MAJOR_MODES Events\r\n• Event Code: 0xc1\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nWR_CAS_RANK0\r\n• Title: WR_CAS Access to Rank 0\r\n• Category: CAS Events\r\n• Event Code: 0xb8\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/65a7fa2f-8119-4387-9c2e-190e843c20a9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=efcb230332c93ba32c3f8f2882f538afa795288350d4fd9ec7289296186b667a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 437
      },
      {
        "segments": [
          {
            "segment_id": "398408bf-1f8d-444a-908c-f7aa2a891a90",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 102,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\n96 Reference Number: 329468-002\r\nWR_CAS_RANK1\r\n• Title: WR_CAS Access to Rank 1\r\n• Category: CAS Events\r\n• Event Code: 0xb9\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nWR_CAS_RANK2\r\n• Title: WR_CAS Access to Rank 2\r\n• Category: CAS Events\r\n• Event Code: 0xba\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nTable 2-97. Unit Masks for WR_CAS_RANK0\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3\r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7\r\nTable 2-98. Unit Masks for WR_CAS_RANK1\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3\r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7\r\nTable 2-99. Unit Masks for WR_CAS_RANK2\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/398408bf-1f8d-444a-908c-f7aa2a891a90.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1680d5ca1b0a3600b3752155fc7ef9ff7cd9e88076d2609434b1b295e89fea33",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b6530488-aaab-42e4-b177-f6e1104265df",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 103,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 97\r\nUncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\nWR_CAS_RANK3\r\n• Title: WR_CAS Access to Rank 3\r\n• Category: CAS Events\r\n• Event Code: 0xbb\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nWR_CAS_RANK4\r\n• Title: WR_CAS Access to Rank 4\r\n• Category: CAS Events\r\n• Event Code: 0xbc\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7\r\nTable 2-100. Unit Masks for WR_CAS_RANK3\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3\r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7\r\nTable 2-101. Unit Masks for WR_CAS_RANK4\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3\r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7\r\nTable 2-99. Unit Masks for WR_CAS_RANK2\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/b6530488-aaab-42e4-b177-f6e1104265df.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=482e9d22011ff50cb356a79112bbe459d53ad93f3db1310b3d47e00781e4f1d1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 344
      },
      {
        "segments": [
          {
            "segment_id": "4f410cb9-65f6-4ad0-b0d1-8bb60addc6cf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 104,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nMemory Controller (iMC) Performance Monitoring\r\n98 Reference Number: 329468-002\r\nWR_CAS_RANK5\r\n• Title: WR_CAS Access to Rank 5\r\n• Category: CAS Events\r\n• Event Code: 0xbd\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nWR_CAS_RANK6\r\n• Title: WR_CAS Access to Rank 6\r\n• Category: CAS Events\r\n• Event Code: 0xbe\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nWR_CAS_RANK7\r\n• Title: WR_CAS Access to Rank 7\r\n• Category: CAS Events\r\n• Event Code: 0xbf\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\nTable 2-102. Unit Masks for WR_CAS_RANK5\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3\r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7\r\nTable 2-103. Unit Masks for WR_CAS_RANK6\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3\r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/4f410cb9-65f6-4ad0-b0d1-8bb60addc6cf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bdd87dc6a41f699c00a965a88815b009a84bca34ad7b725d83b450de37430950",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "78e28950-c2fa-477c-a678-50ad9475b484",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 105,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 99\r\nUncore Performance Monitoring\r\nIRP Performance Monitoring\r\n2.6 IRP PERFORMANCE MONITORING\r\n2.6.1 Overview of the R2PCIe Box\r\nIRP is responsible for maintaining coherency for IIO traffic that needs to be coherent (e.g. cross\u0002socket P2P).\r\n2.6.2 IRP Performance Monitoring Overview\r\nThe IRP Box supports event monitoring through two sets of two 48b wide counters \r\n(IRP{0,1}_PCI_PMON_CTR/CTL{1:0}). Each of these four counters can be programmed to count any \r\nIRP event. The IRP counters can increment by a maximum of 8b per cycle. \r\nFor information on how to setup a monitoring session, refer to Section 2.1, “Uncore Per-Socket \r\nPerformance Monitoring Control”.\r\n2.6.3 IRP Performance Monitors\r\nTable 2-105. IRP Performance Monitoring Registers\r\nTable 2-104. Unit Masks for WR_CAS_RANK7\r\nExtension umask\r\n[15:8] Description\r\nBANK0 bxxxxxxx1 Bank 0\r\nBANK1 bxxxxxx1x Bank 1\r\nBANK2 bxxxxx1xx Bank 2\r\nBANK3 bxxxx1xxx Bank 3\r\nBANK4 bxxx1xxxx Bank 4\r\nBANK5 bxx1xxxxx Bank 5\r\nBANK6 bx1xxxxxx Bank 6\r\nBANK7 b1xxxxxxx Bank 7\r\nRegister Name PCICFG \r\nAddress\r\nSize \r\n(bits) Description\r\nPCICFG Base Address Dev:Func\r\nIRP PMON Registers D5:F6\r\nBox-Level Control/Status\r\nIRP_PCI_PMON_BOX_STATUS F8 32 IRP PMON Box-Wide Status\r\nIRP_PCI_PMON_BOX_CTL F4 32 IRP PMON Box-Wide Control\r\nGeneric Counter Control\r\nIRP1_PCI_PMON_CTL1 E4 32 IRP 1 PMON Control for Counter 1\r\nIRP1_PCI_PMON_CTL0 E0 32 IRP 1 PMON Control for Counter 0\r\nIRP0_PCI_PMON_CTL1 DC 32 IRP 0 PMON Control for Counter 1\r\nIRP0_PCI_PMON_CTL0 D8 32 IRP 0 PMON Control for Counter 0",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/78e28950-c2fa-477c-a678-50ad9475b484.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cb37ce0434085e881481913cf979d4a1d097795fa7f9db625175b527e27581c1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 397
      },
      {
        "segments": [
          {
            "segment_id": "134b584d-dc52-40a3-b590-12c4062a6ea7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 106,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIRP Performance Monitoring\r\n100 Reference Number: 329468-002\r\n2.6.3.1 IRP Box Level PMON State\r\nThe following registers represent the state governing all box-level PMUs in the IRP Box. \r\nIn the case of the IRP, the IRP_PCI_PMON_BOX_CTL register provides the ability to manually freeze the \r\ncounters in the box (.frz) and reset the generic state (.rst_ctrs and .rst_ctrl).\r\nTable 2-106. IRP_PCI_PMON_BOX_CTL Register – Field Definitions\r\nU\r\nTable 2-107. IRP_PCI_PMON_BOX_STATUS Register – Field Definitions\r\n2.6.3.2 IRP PMON state - Counter/Control Pairs\r\nThe following table defines the layout of the IRP performance monitor control registers. The main task \r\nof these configuration registers is to select the event to be monitored by their respective data counter \r\n(.ev_sel, .umask). Additional control bits are provided to shape the incoming events (e.g. .edge_det, \r\n.thresh) as well as provide additional functionality for monitoring software (.rst).\r\nGeneric Counters\r\nIRP1_PCI_PMON_CTR1 C0 64 IRP 1 PMON Counter 1\r\nIRP1_PCI_PMON_CTR0 B8 64 IRP 1 PMON Counter 0\r\nIRP0_PCI_PMON_CTR1 B0 64 IRP 0 PMON Counter 1\r\nIRP0_PCI_PMON_CTR0 A0 64 IRP 0 PMON Counter 0\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:18 RV 0 Ignored\r\nrsv 17:16 RV 0 Reserved; SW must write to 1 else behavior is undefined.\r\nig 15:9 RV 0 Ignored\r\nfrz 8 WO 0 Freeze. \r\nIf set to 1 the counters in this box will be frozen.\r\nig 7:2 RV 0 Ignored\r\nrst_ctrs 1 WO 0 Reset Counters. \r\nWhen set to 1, the Counter Registers will be reset to 0.\r\nrst_ctrl 0 WO 0 Reset Control. \r\nWhen set to 1, the Counter Control Registers will be reset to \r\n0.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:4 RV 0 Ignored\r\nov 3:0 RW1C 0 If an overflow is detected from the corresponding \r\nIRP_PCI_PMON_CTR register, it’s overflow bit will be set. \r\nNOTE: Write of ‘1’ will clear the bit.\r\nRegister Name PCICFG \r\nAddress\r\nSize \r\n(bits) Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/134b584d-dc52-40a3-b590-12c4062a6ea7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3cbd4c2f2046963a50c3a64ec8be0479478bf5673564e8b3e724684a60fc80f4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 310
      },
      {
        "segments": [
          {
            "segment_id": "8ea74fd7-c1d2-4d97-949a-2dd2f6b391fc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 107,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 101\r\nUncore Performance Monitoring\r\nIRP Performance Monitoring\r\nTable 2-108. IRP_PCI_PMON_CTL{3-0} Register – Field Definitions\r\nIf accessible, software can continuously read the data registers without disabling event collection.\r\nTable 2-109. IRP{0,1}_PCI_PMON_CTR{1-0} Register – Field Definitions\r\n2.6.4 IRP Performance Monitoring Events\r\n2.6.4.1 An Overview\r\nIRP provides events to track information related to all the traffic passing through it’s boundaries.\r\n• Write Cache Occupancy\r\n• Ingress/Egress Traffic - by Ring Type\r\n• Stalls awaiting Credits\r\n2.6.5 IRP Box Events Ordered By Code\r\nThe following table summarizes the directly measured IRP Box events.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nthresh 31:24 RW-V 0 Threshold used in counter comparison.\r\nrsv 23 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nen 22 RW-V 0 Local Counter Enable. \r\nrsv 21:20 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nig 19 RV 0 Ignored\r\nedge_det 18 RW-V 0 When set to 1, rather than measuring the event in each \r\ncycle it is active, the corresponding counter will increment \r\nwhen a 0 to 1 transition (i.e. rising edge) is detected.\r\nWhen 0, the counter will increment in each cycle that the \r\nevent is asserted.\r\nNOTE: .edge_det is in series following .thresh. Due to this, \r\nthe .thresh field must be set to a non-0 value. For events \r\nthat increment by no more than 1 per cycle, set .thresh to \r\n0x1.\r\nrst 17 WO 0 When set to 1, the corresponding counter will be cleared to \r\n0.\r\nrsv 16 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\numask 15:8 RW-V 0 Select subevents to be counted within the selected event. \r\nev_sel 7:0 RW-V 0 Select event to be counted.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 63:44 RV 0 Ignored\r\nevent_count 43:0 RW-V 0 44-bit performance event counter",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/8ea74fd7-c1d2-4d97-949a-2dd2f6b391fc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=db82ac4f965aee7f90907311f249745a7d841cb897817f194fd26f5f3a28c269",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 304
      },
      {
        "segments": [
          {
            "segment_id": "e2646eab-6915-4745-a52e-b417aa2086bd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 108,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIRP Performance Monitoring\r\n102 Reference Number: 329468-002\r\n2.6.6 IRP Box Performance Monitor Event List\r\nThe section enumerates performance monitoring events for the IRP Box.\r\nADDRESS_MATCH\r\n• Title: Address Match (Conflict) Count\r\n• Category: ADDRESS_MATCH Events\r\n• Event Code: 0x17\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of times when an inbound write (from a device to memory or \r\nanother device) had an address match with another request in the write cache.\r\nSymbol Name Event \r\nCode Ctrs\r\nMax \r\nInc/\r\nCyc\r\nDescription\r\nCLOCKTICKS 0x00 0-1 1 Clocks in the IRP\r\nRxR_BL_DRS_INSERTS 0x01 0-1 1 BL Ingress Occupancy - DRS\r\nRxR_BL_NCB_INSERTS 0x02 0-1 1 BL Ingress Occupancy - NCB\r\nRxR_BL_NCS_INSERTS 0x03 0-1 1 BL Ingress Occupancy - NCS\r\nRxR_BL_DRS_CYCLES_FULL 0x04 0-1 1\r\nRxR_BL_NCB_CYCLES_FULL 0x05 0-1 1\r\nRxR_BL_NCS_CYCLES_FULL 0x06 0-1 1\r\nRxR_BL_DRS_OCCUPANCY 0x07 0-1 24\r\nRxR_BL_NCB_OCCUPANCY 0x08 0-1 24\r\nRxR_BL_NCS_OCCUPANCY 0x09 0-1 24\r\nRxR_AK_INSERTS 0x0a 0-1 1 AK Ingress Occupancy\r\nRxR_AK_CYCLES_FULL 0x0b 0-1 1\r\nRxR_AK_OCCUPANCY 0x0c 0-1 24\r\nTxR_REQUEST_OCCUPANCY 0x0d 0-1 1 Outbound Request Queue Occupancy\r\nTxR_DATA_INSERTS_NCB 0x0e 0-1 1 Outbound Read Requests\r\nTxR_DATA_INSERTS_NCS 0x0f 0-1 1 Outbound Read Requests\r\nCACHE_READ_OCCUPANCY 0x10 0-1 128 Outstanding Read Occupancy\r\nCACHE_WRITE_OCCUPANCY 0x11 0-1 128 Outstanding Write Occupancy\r\nCACHE_TOTAL_OCCUPANCY 0x12 0-1 128 Total Write Cache Occupancy\r\nCACHE_OWN_OCCUPANCY 0x13 0-1 128 Outstanding Write Ownership Occupancy\r\nCACHE_ACK_PENDING_OCCUPANCY 0x14 0-1 128 Write Ack Pending Occupancy\r\nTRANSACTIONS 0x15 0-1 1 Inbound Transaction Count\r\nTICKLES 0x16 0-1 1 Tickle Count\r\nADDRESS_MATCH 0x17 0-1 1 Address Match (Conflict) Count\r\nTxR_AD_STALL_CREDIT_CYCLES 0x18 0-1 1 No AD Egress Credit Stalls\r\nTxR_BL_STALL_CREDIT_CYCLES 0x19 0-1 1 No BL Egress Credit Stalls\r\nWRITE_ORDERING_STALL_CYCLES 0x1a 0-1 1 Write Ordering Stalls",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/e2646eab-6915-4745-a52e-b417aa2086bd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=81fdd92cf244aa4df7072c711533bf4facca159fe3c2301ead527365e52741ec",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 268
      },
      {
        "segments": [
          {
            "segment_id": "f01dc736-526e-41c4-8e28-b8ca949d3c0b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 109,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 103\r\nUncore Performance Monitoring\r\nIRP Performance Monitoring\r\nCACHE_ACK_PENDING_OCCUPANCY\r\n• Title: Write Ack Pending Occupancy\r\n• Category: WRITE_CACHE Events\r\n• Event Code: 0x14\r\n• Max. Inc/Cyc:. 128, Register Restrictions: 0-1\r\n• Definition: Accumulates the number of writes that have acquired ownership but have not yet \r\nreturned their data to the uncore. These writes are generally queued up in the switch trying to get \r\nto the head of their queues so that they can post their data. The queue occupancy increments \r\nwhen the ACK is received, and decrements when either the data is returned OR a tickle is received \r\nand ownership is released. Note that a single tickle can result in multiple decrements.\r\nCACHE_OWN_OCCUPANCY\r\n• Title: Outstanding Write Ownership Occupancy\r\n• Category: WRITE_CACHE Events\r\n• Event Code: 0x13\r\n• Max. Inc/Cyc:. 128, Register Restrictions: 0-1\r\n• Definition: Accumulates the number of writes (and write prefetches) that are outstanding in the \r\nuncore trying to acquire ownership in each cycle. This can be used with the write transaction \r\ncount to calculate the average write latency in the uncore. The occupancy increments when a \r\nwrite request is issued, and decrements when the data is returned.\r\nTable 2-110. Unit Masks for ADDRESS_MATCH\r\nExtension umask\r\n[15:8] Description\r\nSTALL_COUNT bxxxxxxx1 Conflict Stalls\r\nWhen it is not possible to merge two conflicting requests, a stall \r\nevent occurs. This is bad for performance.\r\nMERGE_COUNT bxxxxxx1x Conflict Merges\r\nWhen two requests to the same address from the same source \r\nare received back to back, it is possible to merge the two of \r\nthem together.\r\nTable 2-111. Unit Masks for CACHE_ACK_PENDING_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nANY b00000001 Any Source\r\nTracks only those requests that come from the port specified in \r\nthe IRP_PmonFilter.OrderingQ register. This register allows one \r\nto select one specific queue. It is not possible to monitor multiple \r\nqueues at a time.\r\nSOURCE b00000010 Select Source\r\nTracks all requests from any source port.\r\nTable 2-112. Unit Masks for CACHE_OWN_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nANY b00000001 Any Source\r\nTracks all requests from any source port.\r\nSOURCE b00000010 Select Source\r\nTracks only those requests that come from the port specified in \r\nthe IRP_PmonFilter.OrderingQ register. This register allows one \r\nto select one specific queue. It is not possible to monitor multiple \r\nqueues at a time.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/f01dc736-526e-41c4-8e28-b8ca949d3c0b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=512c4db77d2ccab9e90b855c6e657863efb170932faf3c6a89ef36043b5fc671",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 374
      },
      {
        "segments": [
          {
            "segment_id": "9d9f1cf6-12dd-4b69-a1f9-0c7ca9209a9f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 110,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIRP Performance Monitoring\r\n104 Reference Number: 329468-002\r\nCACHE_READ_OCCUPANCY\r\n• Title: Outstanding Read Occupancy\r\n• Category: WRITE_CACHE Events\r\n• Event Code: 0x10\r\n• Max. Inc/Cyc:. 128, Register Restrictions: 0-1\r\n• Definition: Accumulates the number of reads that are outstanding in the uncore in each cycle. This \r\ncan be used with the read transaction count to calculate the average read latency in the uncore. The \r\noccupancy increments when a read request is issued, and decrements when the data is returned.\r\nCACHE_TOTAL_OCCUPANCY\r\n• Title: Total Write Cache Occupancy\r\n• Category: WRITE_CACHE Events\r\n• Event Code: 0x12\r\n• Max. Inc/Cyc:. 128, Register Restrictions: 0-1\r\n• Definition: Accumulates the number of reads and writes that are outstanding in the uncore in each \r\ncycle. This is effectively the sum of the READ_OCCUPANCY and WRITE_OCCUPANCY events.\r\nCACHE_WRITE_OCCUPANCY\r\n• Title: Outstanding Write Occupancy\r\n• Category: WRITE_CACHE Events\r\n• Event Code: 0x11\r\n• Max. Inc/Cyc:. 128, Register Restrictions: 0-1\r\n• Definition: Accumulates the number of writes (and write prefetches) that are outstanding in the \r\nuncore in each cycle. This can be used with the transaction count event to calculate the average \r\nlatency in the uncore. The occupancy increments when the ownership fetch/prefetch is issued, and \r\ndecrements the data is returned to the uncore.\r\nTable 2-113. Unit Masks for CACHE_READ_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nANY b00000001 Any Source\r\nTracks all requests from any source port.\r\nSOURCE b00000010 Select Source\r\nTracks only those requests that come from the port specified in \r\nthe IRP_PmonFilter.OrderingQ register. This register allows one \r\nto select one specific queue. It is not possible to monitor multiple \r\nqueues at a time.\r\nTable 2-114. Unit Masks for CACHE_TOTAL_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nANY b00000001 Any Source\r\nTracks all requests from any source port.\r\nSOURCE b00000010 Select Source\r\nTracks only those requests that come from the port specified in the \r\nIRP_PmonFilter.OrderingQ register. This register allows one to select \r\none specific queue. It is not possible to monitor multiple queues at a \r\ntime.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/9d9f1cf6-12dd-4b69-a1f9-0c7ca9209a9f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2625223c3ccea70f352d07666309fdbc02fe61ef0833bb955ecf8e22ced3b1e5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 325
      },
      {
        "segments": [
          {
            "segment_id": "15cafc4b-502d-472a-869b-0ef6e15618e1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 111,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 105\r\nUncore Performance Monitoring\r\nIRP Performance Monitoring\r\nCLOCKTICKS\r\n• Title: Clocks in the IRP\r\n• Category: IO_CLKS Events\r\n• Event Code: 0x00\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Number of clocks in the IRP.\r\nRxR_AK_CYCLES_FULL\r\n• Title: \r\n• Category: AK_INGRESS Events\r\n• Event Code: 0x0b\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of cycles when the AK Ingress is full. This queue is where the IRP \r\nreceives responses from R2PCIe (the ring).\r\nRxR_AK_INSERTS\r\n• Title: AK Ingress Occupancy\r\n• Category: AK_INGRESS Events\r\n• Event Code: 0x0a\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of allocations into the AK Ingress. This queue is where the IRP \r\nreceives responses from R2PCIe (the ring).\r\nRxR_AK_OCCUPANCY\r\n• Title: \r\n• Category: AK_INGRESS Events\r\n• Event Code: 0x0c\r\n• Max. Inc/Cyc:. 24, Register Restrictions: 0-1\r\n• Definition: Accumulates the occupancy of the AK Ingress in each cycles. This queue is where the \r\nIRP receives responses from R2PCIe (the ring).\r\nRxR_BL_DRS_CYCLES_FULL\r\n• Title: \r\n• Category: BL_INGRESS_DRS Events\r\n• Event Code: 0x04\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of cycles when the BL Ingress is full. This queue is where the IRP \r\nreceives data from R2PCIe (the ring). It is used for data returns from read requests as well as \r\noutbound MMIO writes.\r\nTable 2-115. Unit Masks for CACHE_WRITE_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nANY b00000001 Any Source\r\nTracks all requests from any source port.\r\nSOURCE b00000010 Select Source\r\nTracks only those requests that come from the port specified in \r\nthe IRP_PmonFilter.OrderingQ register. This register allows one \r\nto select one specific queue. It is not possible to monitor multiple \r\nqueues at a time.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/15cafc4b-502d-472a-869b-0ef6e15618e1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=378fb846150422be15316755665589ffc2a22ca6f6453725fdc31308f387a447",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 286
      },
      {
        "segments": [
          {
            "segment_id": "7f621658-e0c0-4cfe-b839-5bb936cd8e19",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 112,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIRP Performance Monitoring\r\n106 Reference Number: 329468-002\r\nRxR_BL_DRS_INSERTS\r\n• Title: BL Ingress Occupancy - DRS\r\n• Category: BL_INGRESS_DRS Events\r\n• Event Code: 0x01\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of allocations into the BL Ingress. This queue is where the IRP \r\nreceives data from R2PCIe (the ring). It is used for data returns from read requests as well as out\u0002bound MMIO writes.\r\nRxR_BL_DRS_OCCUPANCY\r\n• Title: \r\n• Category: BL_INGRESS_DRS Events\r\n• Event Code: 0x07\r\n• Max. Inc/Cyc:. 24, Register Restrictions: 0-1\r\n• Definition: Accumulates the occupancy of the BL Ingress in each cycles. This queue is where the \r\nIRP receives data from R2PCIe (the ring). It is used for data returns from read requests as well as \r\noutbound MMIO writes.\r\nRxR_BL_NCB_CYCLES_FULL\r\n• Title: \r\n• Category: BL_INGRESS_NCB Events\r\n• Event Code: 0x05\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of cycles when the BL Ingress is full. This queue is where the IRP \r\nreceives data from R2PCIe (the ring). It is used for data returns from read requests as well as out\u0002bound MMIO writes.\r\nRxR_BL_NCB_INSERTS\r\n• Title: BL Ingress Occupancy - NCB\r\n• Category: BL_INGRESS_NCB Events\r\n• Event Code: 0x02\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of allocations into the BL Ingress. This queue is where the IRP \r\nreceives data from R2PCIe (the ring). It is used for data returns from read requests as well as out\u0002bound MMIO writes.\r\nRxR_BL_NCB_OCCUPANCY\r\n• Title: \r\n• Category: BL_INGRESS_NCB Events\r\n• Event Code: 0x08\r\n• Max. Inc/Cyc:. 24, Register Restrictions: 0-1\r\n• Definition: Accumulates the occupancy of the BL Ingress in each cycles. This queue is where the \r\nIRP receives data from R2PCIe (the ring). It is used for data returns from read requests as well as \r\noutbound MMIO writes.\r\nRxR_BL_NCS_CYCLES_FULL\r\n• Title: \r\n• Category: BL_INGRESS_NCS Events\r\n• Event Code: 0x06\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/7f621658-e0c0-4cfe-b839-5bb936cd8e19.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=417408a44abafa97153c41377e1ba2984f0f0951a0bd62a040f86964a1aaa242",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 322
      },
      {
        "segments": [
          {
            "segment_id": "0433c7c5-31d5-4674-8f76-ec1212ebb095",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 113,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 107\r\nUncore Performance Monitoring\r\nIRP Performance Monitoring\r\n• Definition: Counts the number of cycles when the BL Ingress is full. This queue is where the IRP \r\nreceives data from R2PCIe (the ring). It is used for data returns from read requests as well as \r\noutbound MMIO writes.\r\nRxR_BL_NCS_INSERTS\r\n• Title: BL Ingress Occupancy - NCS\r\n• Category: BL_INGRESS_NCS Events\r\n• Event Code: 0x03\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of allocations into the BL Ingress. This queue is where the IRP \r\nreceives data from R2PCIe (the ring). It is used for data returns from read requests as well as \r\noutbound MMIO writes.\r\nRxR_BL_NCS_OCCUPANCY\r\n• Title: \r\n• Category: BL_INGRESS_NCS Events\r\n• Event Code: 0x09\r\n• Max. Inc/Cyc:. 24, Register Restrictions: 0-1\r\n• Definition: Accumulates the occupancy of the BL Ingress in each cycles. This queue is where the \r\nIRP receives data from R2PCIe (the ring). It is used for data returns from read requests as well as \r\noutbound MMIO writes.\r\nTICKLES\r\n• Title: Tickle Count\r\n• Category: TICKLES Events\r\n• Event Code: 0x16\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of tickles that are received. This is for both explicit (from Cbo) \r\nand implicit (internal conflict) tickles.\r\nTRANSACTIONS\r\n• Title: Inbound Transaction Count\r\n• Category: TRANSACTIONS Events\r\n• Event Code: 0x15\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of “Inbound” transactions from the IRP to the Uncore. This can be \r\nfiltered based on request type in addition to the source queue. Note the special filtering equation. \r\nWe do OR-reduction on the request type. If the SOURCE bit is set, then we also do AND qualifica\u0002tion based on the source portID.\r\nTable 2-116. Unit Masks for TICKLES\r\nExtension umask\r\n[15:8] Description\r\nLOST_OWNERSHIP bxxxxxxx1 Ownership Lost\r\nTracks the number of requests that lost ownership as a result of \r\na tickle. When a tickle comes in, if the request is not at the head \r\nof the queue in the switch, then that request as well as any \r\nrequests behind it in the switch queue will lose ownership and \r\nhave to re-acquire it later when they get to the head of the \r\nqueue. This will therefore track the number of requests that lost \r\nownership and not just the number of tickles.\r\nTOP_OF_QUEUE bxxxxxx1x Data Returned\r\nTracks the number of cases when a tickle was received but the \r\nrequests was at the head of the queue in the switch. In this \r\ncase, data is returned rather than releasing ownership.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/0433c7c5-31d5-4674-8f76-ec1212ebb095.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7fb74c2584bc6e6918b7c228fae21c8ccb1c33c9297f971d53d88822dbc285ef",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 422
      },
      {
        "segments": [
          {
            "segment_id": "532d4849-ca60-46f9-bd4e-893b90eeb82e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 114,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIRP Performance Monitoring\r\n108 Reference Number: 329468-002\r\nTxR_AD_STALL_CREDIT_CYCLES\r\n• Title: No AD Egress Credit Stalls\r\n• Category: STALL_CYCLES Events\r\n• Event Code: 0x18\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number times when it is not possible to issue a request to the R2PCIe \r\nbecause there are no AD Egress Credits available.\r\nTxR_BL_STALL_CREDIT_CYCLES\r\n• Title: No BL Egress Credit Stalls\r\n• Category: STALL_CYCLES Events\r\n• Event Code: 0x19\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number times when it is not possible to issue data to the R2PCIe because \r\nthere are no BL Egress Credits available.\r\nTxR_DATA_INSERTS_NCB\r\n• Title: Outbound Read Requests\r\n• Category: OUTBOUND_REQUESTS Events\r\n• Event Code: 0x0e\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of requests issued to the switch (towards the devices).\r\nTxR_DATA_INSERTS_NCS\r\n• Title: Outbound Read Requests\r\n• Category: OUTBOUND_REQUESTS Events\r\n• Event Code: 0x0f\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of requests issued to the switch (towards the devices).\r\nTable 2-117. Unit Masks for TRANSACTIONS\r\nExtension umask\r\n[15:8] Filter Dep Description\r\nREADS bxxxxxxx1 Reads\r\nTracks only read requests (not including read \r\nprefetches).\r\nWRITES bxxxxxx1x Writes\r\nTracks only write requests. Each write request \r\nshould have a prefetch, so there is no need to \r\nexplicitly track these requests. For writes that are \r\ntickled and have to retry, the counter will be \r\nincremented for each retry.\r\nRD_PREFETCHES bxxxxx1xx Read Prefetches\r\nTracks the number of read prefetches.\r\nORDERINGQ bxxxx1xxx IRPFilter[4:\r\n0]\r\nSelect Source\r\nTracks only those requests that come from the \r\nport specified in the IRP_PmonFilter.OrderingQ \r\nregister. This register allows one to select one \r\nspecific queue. It is not possible to monitor \r\nmultiple queues at a time. If this bit is not set, \r\nthen requests from all sources will be counted.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/532d4849-ca60-46f9-bd4e-893b90eeb82e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0772f0f47270606f7be19f7dc382e08655772d4e5e269173d3748786dadc5836",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 305
      },
      {
        "segments": [
          {
            "segment_id": "dbd93368-4499-4ded-8f12-3e8a887248ce",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 115,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 109\r\nUncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\nTxR_REQUEST_OCCUPANCY\r\n• Title: Outbound Request Queue Occupancy\r\n• Category: OUTBOUND_REQUESTS Events\r\n• Event Code: 0x0d\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Accumulates the number of outstanding outbound requests from the IRP to the \r\nswitch (towards the devices). This can be used in conjunction with the allocations event in order \r\nto calculate average latency of outbound requests.\r\nWRITE_ORDERING_STALL_CYCLES\r\n• Title: Write Ordering Stalls\r\n• Category: STALL_CYCLES Events\r\n• Event Code: 0x1a\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of cycles when there are pending write ACK's in the switch but \r\nthe switch->IRP pipeline is not utilized.\r\n2.7 POWER CONTROL (PCU) PERFORMANCE MONITORING\r\n2.7.1 Overview of the PCU\r\nThe PCU is the primary Power Controller for the physical processor package.\r\nThe uncore implements a power control unit acting as a core/uncore power and thermal manager. It \r\nruns its firmware on an internal micro-controller and coordinates the socket’s power states. \r\nThe PCU algorithmically governs the P-state of the processor, C-state of the core and the package C\u0002state of the socket. It also enables the core to go to a higher performance state (“turbo mode”) when \r\nthe proper set of conditions are met. Conversely, the PCU will throttle the processor to a lower perfor\u0002mance state when a thermal violation occurs.\r\nThrough specific events, the OS and the PCU will either promote or demote the C-State of each core \r\nby altering the voltage and frequency. The system power state (S-state) of all the sockets in the \r\nsystem is managed by the server legacy bridge in coordination with all socket PCUs. \r\nThe PCU communicates to all the other units through multiple PMLink interfaces on-die and Message \r\nChannel to access their registers. The OS and BIOS communicates to the PCU thru standardized MSR \r\nregisters and ACPI. \r\nThe PCU also acts as the interface to external management controllers via PECI and voltage regula\u0002tors (NPTM). The DMI interface is the communication path from the southbridge for system power \r\nmanagement.\r\nNOTE\r\nMany power saving features are tracked as events in their respective units. For \r\nexample, Intel® QPI Link Power saving states and Memory CKE statistics are captured \r\nin the Intel® QPI Perfmon and iMC Perfmon respectively.\r\n2.7.2 PCU Performance Monitoring Overview\r\nThe uncore PCU supports event monitoring through four 48-bit wide counters \r\n(PCU_MSR_PMON_CTR{3:0}). Each of these counters can be programmed ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/dbd93368-4499-4ded-8f12-3e8a887248ce.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=01c257483f1afe61866351416c714f9846889a1a0214b56572f9419756e21ae7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 400
      },
      {
        "segments": [
          {
            "segment_id": "66698861-0698-4ab6-8f88-470051eb82fd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 116,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\n110 Reference Number: 329468-002\r\n(PCU_MSR_PMON_CTL{3:0}) to monitor any PCU event. The PCU counters can increment by a \r\nmaximum of 4b per cycle. \r\nTwo extra 64-bit counters are also provided by the PCU to track C-State Residence. Although docu\u0002mented in this manual for reference, these counters exist outside of the PMON infrastructure.\r\nFor information on how to setup a monitoring session, refer to Section 2.1, “Uncore Per-Socket Perfor\u0002mance Monitoring Control”.\r\n2.7.2.1 PCU PMON Registers - On Overflow and the Consequences (PMI/Freeze)\r\nIf an overflow is detected from a PCU performance counter enabled to communicate its overflow \r\n(PCU_MSR_PMON_CTL.ov_en is set to 1), the overflow bit is set at the box level \r\n(PCU_MSR_PMON_BOX_STATUS.ov) and an overflow message is sent to the UBox. When the UBox \r\nreceives the overflow signal, the U_MSR_PMON_GLOBAL_STATUS.ov_p bit is set (see Table 2-3, \r\n“U_MSR_PMON_GLOBAL_STATUS Register – Field Definitions”) and a PMI can be generated.\r\nOnce a freeze has occurred, in order to see a new freeze, the overflow field responsible for the freeze, \r\nmust be cleared by setting the corresponding bit in PCU_MSR_PMON_BOX_STATUS.ov and \r\nU_MSR_PMON_GLOBAL_STATUs.ov_p to 0. Assuming all the counters have been locally enabled (.en \r\nbit in control registers meant to monitor events) and the overflow bit(s) has been cleared, the PCU is \r\nprepared for a new sample interval. Once the global controls have been re-enabled (Section 2.1.4, \r\n“Enabling a New Sample Interval from Frozen Counters”), counting will resume.\r\n2.7.3 PCU Performance Monitors\r\nTable 2-118. PCU Performance Monitoring MSRs\r\nMSR Name MSR \r\nAddress\r\nSize\r\n(bits) Description\r\nGeneric Counters\r\nPCU_MSR_PMON_CTR3 0x0C39 64 PCU PMON Counter 3\r\nPCU_MSR_PMON_CTR2 0x0C38 64 PCU PMON Counter 2\r\nPCU_MSR_PMON_CTR1 0x0C37 64 PCU PMON Counter 1\r\nPCU_MSR_PMON_CTR0 0x0C36 64 PCU PMON Counter 0\r\nBox-Level Filter\r\nPCU_MSR_PMON_BOX_FILTER 0x0C34 32 PCU PMON Filter\r\nGeneric Counter Control\r\nPCU_MSR_PMON_CTL3 0x0C33 32 PCU PMON Control for Counter 3\r\nPCU_MSR_PMON_CTL2 0x0C32 32 PCU PMON Control for Counter 2\r\nPCU_MSR_PMON_CTL1 0x0C31 32 PCU PMON Control for Counter 1\r\nPCU_MSR_PMON_CTL0 0x0C30 32 PCU PMON Control for Counter 0\r\nBox-Level Control/Status\r\nPCU_MSR_PMON_BOX_STATUS 0x0C35 32 PCU PMON Box-Wide Status\r\nPCU_MSR_PMON_BOX_CTL 0x0C24 32 PCU PMON Box-Wide Control\r\nFixed (Non-PMON) Counters \r\nPCU_MSR_CORE_C6_CTR 0x03FD 64 Fixed C-State Residency Counter\r\nPCU_MSR_CORE_C3_CTR 0x03FC 64 Fixed C-State Residency Counter",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/66698861-0698-4ab6-8f88-470051eb82fd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c4ff2b6e23e7126d2eb47ed4d81d0e31f3dc4995122216a0a8b9cc173ba9959c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 366
      },
      {
        "segments": [
          {
            "segment_id": "e8aecdc8-90f4-4597-8f47-f13ad41ab395",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 117,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 111\r\nUncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\n2.7.3.1 PCU Box Level PMON State\r\nThe following registers represent the state governing all box-level PMUs in the PCU.\r\nIn the case of the PCU, the PCU_MSR_PMON_BOX_CTL register provides the ability to manually \r\nfreeze the counters in the box (.frz) and reset the generic state (.rst_ctrs and .rst_ctrl).\r\nThe PCU provides two extra MSRs that provide additional static performance information to software \r\nbut exist outside of the PMON infrastructure (e.g. they can’t be frozen or reset). They are included for \r\nthe convenience of software developers need to efficiently access this data.\r\nIf an overflow is detected from one of the PCU PMON registers, the corresponding bit in the \r\nPCU_MSR_PMON_BOX_STATUS.ov field will be set. To reset these overflow bits, a user must write a \r\nvalue of ‘1’ to them (which will clear the bits).\r\nTable 2-119. PCU_MSR_PMON_BOX_CTL Register – Field Definitions\r\nU\r\nTable 2-120. PCU_MSR_PMON_BOX_STATUS Register – Field Definitions\r\n2.7.3.2 PCU PMON state - Counter/Control Pairs\r\nThe following table defines the layout of the PCU performance monitor control registers. The main \r\ntask of these configuration registers is to select the event to be monitored by their respective data \r\ncounter (.ev_sel, .umask). Additional control bits are provided to shape the incoming events (e.g. \r\n.edge_det, .thresh) as well as provide additional functionality for monitoring software (.rst,.ov_en).\r\nDue to the fact that much of the PCU’s functionality is provided by an embedded microcontroller, \r\nmany of the available events are generated by the microcontroller and handed off to the hardware for \r\ncapture by the PMON registers. Among the events generated by the microcontroller are occupancy \r\nevents allowing a user to measure the number of cores in a given C-state per-cycle. Given this unique \r\nsituation, extra control bits are provided to filter the output of the these special occupancy events.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nrsv 31:18 RV 0 Reserved\r\nrsv 17:16 RV 0 Reserved; SW must write to 1 else behavior is undefined.\r\nrsv 15:9 RV 0 Reserved\r\nfrz 8 WO 0 Freeze. \r\nIf set to 1 the counters in this box will be frozen.\r\nrsv 7:2 RV 0 Reserved\r\nrst_ctrs 1 WO 0 Reset Counters. \r\nWhen set to 1, the Counter Registers will be reset to 0.\r\nrst_ctrl 0 WO 0 Reset Control. \r\nWhen set to 1, the Counter Control Registers will be reset to \r\n0.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nrsv 31:4 RV 0 Reserved\r\nov 3:0 RW1C 0 If an overflow is detected from the corresponding \r\nPCU_MSR_PMON_CTR register, it’s overflow bit will be set. \r\nNOTE: Write of ‘1’ will clear the bit.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/e8aecdc8-90f4-4597-8f47-f13ad41ab395.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6b4ccf6b5ddc48f1c6c7cd437d989fdcd2925bdf5dcaf86b9a27606073680bc9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 436
      },
      {
        "segments": [
          {
            "segment_id": "355f0d84-56ea-499b-9298-f00447cd6b75",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 118,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\n112 Reference Number: 329468-002\r\n- .occ_invert - Changes the .thresh test condition to ‘<‘ for the occupancy events (when .ev_sel[7] is \r\nset to 1)\r\n- .occ_edge_det - Rather than accumulating the raw count each cycle (for events that can \r\nincrement by 1 per cycle), the register can capture transitions from no event to an event \r\nincoming for the PCU’s occupancy events (when .ev_sel[7] is set to 1).\r\nTable 2-121. PCU_MSR_PMON_CTL{3-0} Register – Field Definitions\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nocc_edge_det 31 RW-V 0 Enables edge detect for occupancy events (.ev_sel[7] is 1)\r\nWhen set to 1, rather than measuring the event in each \r\ncycle it is active, the corresponding counter will increment \r\nwhen a 0 to 1 transition (i.e. rising edge) is detected.\r\nWhen 0, the counter will increment in each cycle that the \r\nevent is asserted.\r\nNOTE: .edge_det is in series following .thresh. Due to this, \r\nthe .thresh field must be set to a non-0 value. For events \r\nthat increment by no more than 1 per cycle, set .thresh to \r\n0x1.\r\nocc_invert 30 RW-V 0 Invert comparison against Threshold for the PCU \r\nOccupancy events (.ev_sel[7] is 1) \r\n0 - comparison will be ‘is event increment >= threshold?’. \r\n1 - comparison is inverted - ‘is event increment < \r\nthreshold?’\r\nNOTE: .invert is in series following .thresh. Due to this, the \r\n.thresh field must be set to a non-0 value. For events that \r\nincrement by no more than 1 per cycle, set .thresh to 0x1.\r\nAlso, if .edge_det is set to 1, the counter will increment \r\nwhen a 1 to 0 transition (i.e. falling edge) is detected.\r\nrsv 29 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nthresh 28:24 RW-V 0 Threshold used in counter comparison.\r\nrsv 23 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nen 22 RW-V 0 Local Counter Enable. \r\nev_sel_ext 21 RW-V 0 Extension bit to the Event Select field. \r\nov_en 20 RW-V 0 When this bit is asserted and the corresponding counter \r\noverflows, its overflow bit is set in the local status register \r\n(PCU_PMON_BOX_STATUS.ov) and an overflow is sent on \r\nthe message channel to the UBox. When the overflow is \r\nreceived by the UBox, the bit corresponding to this PCU will \r\nbe set in U_MSR_PMON_GLOBAL_STATUS.ov_p. \r\nrsv 19 RV 0 Reserved\r\nedge_det 18 RW-V 0 When set to 1, rather than measuring the event in each \r\ncycle it is active, the corresponding counter will increment \r\nwhen a 0 to 1 transition (i.e. rising edge) is detected.\r\nWhen 0, the counter will increment in each cycle that the \r\nevent is asserted.\r\nNOTE: .edge_det is in series following .thresh. Due to this, \r\nthe .thresh field must be set to a non-0 value. For events \r\nthat increment by no more than 1 per cycle, set .thresh to \r\n0x1.\r\nrst 17 WO 0 When set to 1, the corresponding counter will be cleared to \r\n0.\r\nrsv 16 RV 0 Reserved",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/355f0d84-56ea-499b-9298-f00447cd6b75.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=56965a9bef3033883286c08bc713879811652fb5594239278e6e329ea821e0f6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 497
      },
      {
        "segments": [
          {
            "segment_id": "331b6d59-b3dd-4918-b8ac-a97f534653cf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 119,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 113\r\nUncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\nThe PCU performance monitor data registers are 48-bit wide. A counter overflow occurs when a carry \r\nout from bit 47 is detected. Software can force all uncore counting to freeze after N events by \r\npreloading a monitor with a count value of 248 - N and setting the control register to send an overflow \r\nmessage to the UBox (refer to Section 2.1.1, “Counter Overflow”). During the interval of time \r\nbetween overflow and global disable, the counter value will wrap and continue to collect events. \r\nIf accessible, software can continuously read the data registers without disabling event collection.\r\nTable 2-122. PCU_MSR_PMON_CTR{3-0} Register – Field Definitions\r\nContext sensitive filtering is provided for through the PCU_MSR_PMON_BOX_FILTER register. \r\n• For frequency/voltage band filters, the multiplier is at 100MHz granularity. So, a value of 32 \r\n(0x20) would represent a frequency of 3.2GHz.\r\n• Support for limited Frequency/Voltage Band histogramming. Each of the four bands provided for \r\nin the filter may be simultaneous tracked by the corresponding event \r\nNOTE\r\nSince use of the register as a filter is heavily overloaded, simultaneous application of \r\nthis filter to additional events in the same run is severely limited.\r\nocc_sel 15:14 RW-V 0 Select which of three occupancy counters to use.\r\n01 - Cores in C0\r\n10 - Cores in C3\r\n11 - Cores in C6 \r\nrsv 13:8 RV 0 Reserved\r\nev_sel 7:0 RW-V 0 Select event to be counted.\r\nNOTE: Bit 7 denotes whether the event requires the use of \r\nan occupancy subcounter.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nrsv 63:48 RV 0 Reserved\r\nevent_count 47:0 RW-V 0 48-bit performance event counter\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/331b6d59-b3dd-4918-b8ac-a97f534653cf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=243166e733dac3de2dc6861a041f6c6503d1788242342f8efc1393bf6a79527b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 283
      },
      {
        "segments": [
          {
            "segment_id": "d43d9769-a934-4907-8e3a-403c7fcee873",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 120,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\n114 Reference Number: 329468-002\r\nTable 2-123. PCU_MSR_PMON_BOX_FILTER Register – Field Definitions\r\nThe PCU includes two extra MSRs that track the number of cycles a core (any core) is in either the C3 \r\nor C6 state. As mentioned before, these counters are not part of the PMON infrastructure so they can’t \r\nbe frozen or reset with the otherwise controlled by the PCU PMON control registers.\r\nNOTE\r\nTo be clear, these counters track the number of cycles some core is in C3/6 state. It \r\ndoes not track the total number of cores in the C3/6 state in any cycle. For that, a user \r\nshould refer to the regular PCU event list.\r\nTable 2-124. PCU_MSR_CORE_C6_CTR Register – Field Definitions\r\nTable 2-125. PCU_MSR_CORE_C3_CTR Register – Field Definitions\r\n2.7.4 PCU Performance Monitoring Events\r\n2.7.4.1 An Overview:\r\nThe PCU provides the ability to capture information covering a wide range of the PCU’s functionality \r\nincluding:\r\n• Number of cores in a given C-state per-cycle\r\n• Core State Transitions - there are a larger number of events provided to track when cores \r\ntransition C-state, when the enter/exit specific C-states, when they receive a C-state demotion, \r\netc. \r\n• Package State Transitions\r\n• Frequency/Voltage Banding - ability to measure the number of cycles the uncore was operating \r\nwithin a frequency or voltage ‘band’ that can be specified in a separate filter register.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nrsv 63:48 RV 0 Reserved\r\nfilt31_24 31:24 RW-V 0 Band 3 - For Voltage/Frequency Band Event\r\nfilt23_16 23:16 RW-V 0 Band 2 - For Voltage/Frequency Band Event\r\nfilt15_8 15:8 RW-V 0 Band 1 - For Voltage/Frequency Band Event\r\nfilt7_0 7:0 RW-V 0 Band 0 - For Voltage/Frequency Band Event\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nevent_count 63:0 RW-V 0 64-bit performance event counter\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nevent_count 63:0 RW-V 0 64-bit performance event counter",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/d43d9769-a934-4907-8e3a-403c7fcee873.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=344ccd1aa641c860bdc2be4e6696e4f9fe8e3ab542b404507ef49628c8658f31",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 316
      },
      {
        "segments": [
          {
            "segment_id": "5630a306-9fd0-4f75-8c7a-eafe262eab16",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 121,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 115\r\nUncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\nNOTE\r\nGiven the nature of many of the PCU events, a great deal of additional information can \r\nbe measured by setting the .edge_det bit. By doing so, an event such as “Cycles \r\nChanging Frequency” becomes “Number of Frequency Transitions.\r\nOn Occupancy Events:\r\nBecause it is not possible to “sync” the PCU occupancy counters by employing tricks such as bus lock \r\nbefore the events start incrementing, the PCU has provided fixed occupancy counters to track the \r\nmajor queues. \r\n1. Cores in C0 (4 bits)\r\n2. Cores in C3 (4 bits)\r\n3. Cores in C6 (4 bits)\r\nSome Examples for Unlocking More Advanced Features:\r\nThe PCU perfmon implementation/programming is more complicated than many of the other units. As \r\nsuch, it is best to describe how to use them with a couple examples.\r\n• Case 1: Cycles there was a Voltage Transition (Simple Event)\r\n• Case 2: Cores in C0 (Occupancy Accumulation)\r\n• Case 3: Cycles w/ more than 4 cores in C0 (Occupancy Thresholding)\r\n• Case 4: Transitions into more than 4 cores in C0 (Thresholding + Edge Detect)\r\n• Case 5: Cycles a) w/ > 4 Cores in C0 and b) there was a Voltage Transition\r\nTable 2-126. PCU Configuration Examples\r\n2.7.5 PCU Box Events Ordered By Code\r\nThe following table summarizes the directly measured PCU Box events.\r\nCase\r\nConfig 1 2 3 4 5 6\r\nCounter Control 0\r\n.ev_sel 0x80 0x80 0x80 0x80 0x80\r\n.occ_sel 0x1 0x1 0x1 0x1 0x1\r\n.thresh 0x0 0x5 0x5 0x5 0x4\r\n.occ_edge_det 0 0 1 0 0\r\nCounter Control 1\r\n.ev_sel 0x03 0x03 0x0B\r\nFilter 0x00 0x00 0x00 0x00 0x00 0x14\r\nSymbol Name Event \r\nCode Ctrs\r\nExtra \r\nSelect \r\nBit\r\nMax \r\nInc/\r\nCyc\r\nDescription\r\nCLOCKTICKS 0x00 0-3 0 1 pclk Cycles",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/5630a306-9fd0-4f75-8c7a-eafe262eab16.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=21ee47fc002d037845fe1cd5ecf464c105f817cd1a05fc576d48e9fe6818e9bb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 297
      },
      {
        "segments": [
          {
            "segment_id": "b9743e5e-44ff-4bf6-b439-83e1f602d5b6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 122,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\n116 Reference Number: 329468-002\r\nVOLT_TRANS_CYCLES_INCREASE 0x01 0-3 0 1 Cycles Increasing Voltage\r\nVOLT_TRANS_CYCLES_DECREASE 0x02 0-3 0 1 Cycles Decreasing Voltage\r\nVOLT_TRANS_CYCLES_CHANGE 0x03 0-3 0 1 Cycles Changing Voltage\r\nFREQ_MAX_LIMIT_THERMAL_CYCLE\r\nS\r\n0x04 0-3 0 1 Thermal Strongest Upper Limit \r\nCycles\r\nFREQ_MAX_POWER_CYCLES 0x05 0-3 0 1 Power Strongest Upper Limit \r\nCycles\r\nFREQ_MAX_OS_CYCLES 0x06 0-3 0 1 OS Strongest Upper Limit \r\nCycles\r\nFREQ_MAX_CURRENT_CYCLES 0x07 0-3 0 1 Current Strongest Upper Limit \r\nCycles\r\nPROCHOT_INTERNAL_CYCLES 0x09 0-3 0 1 Internal Prochot\r\nPROCHOT_EXTERNAL_CYCLES 0x0a 0-3 0 1 External Prochot\r\nFREQ_BAND0_CYCLES 0x0b 0-3 0 1 Frequency Residency\r\nFREQ_BAND1_CYCLES 0x0c 0-3 0 1 Frequency Residency\r\nFREQ_BAND2_CYCLES 0x0d 0-3 0 1 Frequency Residency\r\nFREQ_BAND3_CYCLES 0x0e 0-3 0 1 Frequency Residency\r\nDEMOTIONS_CORE0 0x1e 0-3 0 1 Core 0 C State Demotions\r\nDEMOTIONS_CORE1 0x1f 0-3 0 1 Core 1 C State Demotions\r\nDEMOTIONS_CORE2 0x20 0-3 0 1 Core 2 C State Demotions\r\nDEMOTIONS_CORE3 0x21 0-3 0 1 Core 3 C State Demotions\r\nDEMOTIONS_CORE4 0x22 0-3 0 1 Core 4 C State Demotions\r\nDEMOTIONS_CORE5 0x23 0-3 0 1 Core 5 C State Demotions\r\nDEMOTIONS_CORE6 0x24 0-3 0 1 Core 6 C State Demotions\r\nDEMOTIONS_CORE7 0x25 0-3 0 1 Core 7 C State Demotions\r\nMEMORY_PHASE_SHEDDING_CYCLE\r\nS\r\n0x2f 0-3 0 1 Memory Phase Shedding Cycles\r\nVR_HOT_CYCLES 0x32 0-3 0 1 VR Hot\r\nDEMOTIONS_CORE8 0x40 0-3 0 1 Core 8 C State Demotions\r\nDEMOTIONS_CORE9 0x41 0-3 0 1 Core 9 C State Demotions\r\nDEMOTIONS_CORE10 0x42 0-3 0 1 Core 10 C State Demotions\r\nDEMOTIONS_CORE11 0x43 0-3 0 1 Core 11 C State Demotions\r\nDEMOTIONS_CORE12 0x44 0-3 0 1 Core 12 C State Demotions\r\nDEMOTIONS_CORE13 0x45 0-3 0 1 Core 13 C State Demotions\r\nDEMOTIONS_CORE14 0x46 0-3 0 1 Core 14 C State Demotions\r\nFREQ_TRANS_CYCLES 0x60 0-3 0 1 Cycles spent changing \r\nFrequency\r\nFREQ_MIN_IO_P_CYCLES 0x61 0-3 0 1 IO P Limit Strongest Lower \r\nLimit Cycles\r\nTOTAL_TRANSITION_CYCLES 0x63 0-3 0 1 Total Core C State Transition \r\nCycles\r\nCORE0_TRANSITION_CYCLES 0x70 0-3 0 1 Core 0 C State Transition Cycles\r\nCORE1_TRANSITION_CYCLES 0x71 0-3 0 1 Core 1 C State Transition Cycles\r\nCORE2_TRANSITION_CYCLES 0x72 0-3 0 1 Core 2 C State Transition Cycles\r\nCORE3_TRANSITION_CYCLES 0x73 0-3 0 1 Core 3 C State Transition Cycles\r\nSymbol Name Event \r\nCode Ctrs\r\nExtra \r\nSelect \r\nBit\r\nMax \r\nInc/\r\nCyc\r\nDescription",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/b9743e5e-44ff-4bf6-b439-83e1f602d5b6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=32d42a7cd54d356594af75809b09c198d10d413a2da16085aad0cb80f0d0bd91",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 374
      },
      {
        "segments": [
          {
            "segment_id": "5d6d3c1c-aad7-4fe3-b0cb-81d3f89b54a8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 123,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 117\r\nUncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\n2.7.6 PCU Box Common Metrics (Derived Events)\r\nThe following table summarizes metrics commonly calculated from PCU Box events.\r\nCORE4_TRANSITION_CYCLES 0x74 0-3 0 1 Core 4 C State Transition Cycles\r\nCORE5_TRANSITION_CYCLES 0x75 0-3 0 1 Core 5 C State Transition Cycles\r\nCORE6_TRANSITION_CYCLES 0x76 0-3 0 1 Core 6 C State Transition Cycles\r\nCORE7_TRANSITION_CYCLES 0x77 0-3 0 1 Core 7 C State Transition Cycles\r\nCORE8_TRANSITION_CYCLES 0x78 0-3 0 1 Core 8 C State Transition Cycles\r\nCORE9_TRANSITION_CYCLES 0x79 0-3 0 1 Core 9 C State Transition Cycles\r\nCORE10_TRANSITION_CYCLES 0x7a 0-3 0 1 Core 10 C State Transition \r\nCycles\r\nCORE11_TRANSITION_CYCLES 0x7b 0-3 0 1 Core 11 C State Transition \r\nCycles\r\nCORE12_TRANSITION_CYCLES 0x7c 0-3 0 1 Core 12 C State Transition \r\nCycles\r\nCORE13_TRANSITION_CYCLES 0x7d 0-3 0 1 Core 13 C State Transition \r\nCycles\r\nCORE14_TRANSITION_CYCLES 0x7e 0-3 0 1 Core 14 C State Transition \r\nCycles\r\nPOWER_STATE_OCCUPANCY 0x80 0-3 0 8 Number of cores in C-State\r\nFREQ_MIN_PERF_P_CYCLES 0x02 0-3 1 1 Perf P Limit Strongest Lower \r\nLimit Cycles\r\nDELAYED_C_STATE_ABORT_CORE0 0x17 0-3 1 1 Deep C State Rejection - Core 0\r\nDELAYED_C_STATE_ABORT_CORE1 0x18 0-3 1 1 Deep C State Rejection - Core 1\r\nDELAYED_C_STATE_ABORT_CORE2 0x19 0-3 1 1 Deep C State Rejection - Core 2\r\nDELAYED_C_STATE_ABORT_CORE3 0x1a 0-3 1 1 Deep C State Rejection - Core 3\r\nDELAYED_C_STATE_ABORT_CORE4 0x1b 0-3 1 1 Deep C State Rejection - Core 4\r\nDELAYED_C_STATE_ABORT_CORE5 0x1c 0-3 1 1 Deep C State Rejection - Core 5\r\nDELAYED_C_STATE_ABORT_CORE6 0x1d 0-3 1 1 Deep C State Rejection - Core 6\r\nDELAYED_C_STATE_ABORT_CORE7 0x1e 0-3 1 1 Deep C State Rejection - Core 7\r\nDELAYED_C_STATE_ABORT_CORE8 0x1f 0-3 1 1 Deep C State Rejection - Core 8\r\nDELAYED_C_STATE_ABORT_CORE9 0x20 0-3 1 1 Deep C State Rejection - Core 9\r\nDELAYED_C_STATE_ABORT_CORE1\r\n0\r\n0x21 0-3 1 1 Deep C State Rejection - Core \r\n10\r\nDELAYED_C_STATE_ABORT_CORE1\r\n1\r\n0x22 0-3 1 1 Deep C State Rejection - Core \r\n11\r\nDELAYED_C_STATE_ABORT_CORE1\r\n2\r\n0x23 0-3 1 1 Deep C State Rejection - Core \r\n12\r\nDELAYED_C_STATE_ABORT_CORE1\r\n3\r\n0x24 0-3 1 1 Deep C State Rejection - Core \r\n13\r\nDELAYED_C_STATE_ABORT_CORE1\r\n4\r\n0x25 0-3 1 1 Deep C State Rejection - Core \r\n14\r\nPKG_C_EXIT_LATENCY 0x26 0-3 1 1 Package C State Exit Latency\r\nSymbol Name Event \r\nCode Ctrs\r\nExtra \r\nSelect \r\nBit\r\nMax \r\nInc/\r\nCyc\r\nDescription",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/5d6d3c1c-aad7-4fe3-b0cb-81d3f89b54a8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2e38bb7712fc556feedb3952adc9fad04a84675e844173825655693c55158b2b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 380
      },
      {
        "segments": [
          {
            "segment_id": "a28b206c-fd5c-4045-b8de-c2ea1367df1e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 124,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\n118 Reference Number: 329468-002\r\n2.7.7 PCU Box Performance Monitor Event List\r\nThe section enumerates performance monitoring events for the PCU Box.\r\nCLOCKTICKS\r\n• Title: pclk Cycles\r\n• Category: PCLK Events\r\n• Event Code: 0x00\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: The PCU runs off a fixed 800 MHz clock. This event counts the number of pclk cycles \r\nmeasured while the counter was enabled. The pclk, like the Memory Controller's dclk, counts at a \r\nconstant rate making it a good measure of actual wall time.\r\nCORE0_TRANSITION_CYCLES\r\n• Title: Core 0 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x70\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.\r\n• NOTE: This only tracks the hardware portion in the RCFSM (CFCFSM). This portion is just doing the \r\ncore C state transition. It does not include any necessary frequency/voltage transitions.\r\nCORE10_TRANSITION_CYCLES\r\n• Title: Core 10 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x7a\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.\r\nCORE11_TRANSITION_CYCLES\r\n• Title: Core 11 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x7b\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\nSymbol Name:\r\n Definition Equation\r\nPCT_CYC_FREQ_CURRENT_LTD:\r\n Percentage of Cycles the Max Frequency is \r\nlimited by current\r\nFREQ_MAX_CURRENT_CYCLES / CLOCKTICKS\r\nPCT_CYC_FREQ_OS_LTD:\r\n Percentage of Cycles the Max Frequency is \r\nlimited by the OS\r\nFREQ_MAX_OS_CYCLES / CLOCKTICKS\r\nPCT_CYC_FREQ_POWER_LTD:\r\n Percentage of Cycles the Max Frequency is \r\nlimited by power\r\nFREQ_MAX_POWER_CYCLES / CLOCKTICKS\r\nPCT_CYC_FREQ_THERMAL_LTD:\r\n Percentage of Cycles the Max Frequency is \r\nlimited by thermal issues\r\nFREQ_MAX_CURRENT_CYCLES / CLOCKTICKS",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/a28b206c-fd5c-4045-b8de-c2ea1367df1e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0e332708e824e79794ea26bb4782a1ffc6334b034a5ff60ddc810ad18dc926a2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 293
      },
      {
        "segments": [
          {
            "segment_id": "08259acf-2324-424d-b3bb-ab59582cab0f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 125,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 119\r\nUncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.\r\nCORE12_TRANSITION_CYCLES\r\n• Title: Core 12 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x7c\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.\r\nCORE13_TRANSITION_CYCLES\r\n• Title: Core 13 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x7d\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.\r\nCORE14_TRANSITION_CYCLES\r\n• Title: Core 14 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x7e\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.\r\nCORE1_TRANSITION_CYCLES\r\n• Title: Core 1 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x71\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.\r\nCORE2_TRANSITION_CYCLES\r\n• Title: Core 2 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x72\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.\r\nCORE3_TRANSITION_CYCLES\r\n• Title: Core 3 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x73\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/08259acf-2324-424d-b3bb-ab59582cab0f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=714e0cde5366893ef64511d085a463c3a01d8343a4b8f5cb4d22d56f66706a6c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 275
      },
      {
        "segments": [
          {
            "segment_id": "fa8021de-d59c-470c-be21-efa9382af0b3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 126,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\n120 Reference Number: 329468-002\r\nCORE4_TRANSITION_CYCLES\r\n• Title: Core 4 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x74\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.\r\nCORE5_TRANSITION_CYCLES\r\n• Title: Core 5 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x75\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.\r\nCORE6_TRANSITION_CYCLES\r\n• Title: Core 6 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x76\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.\r\nCORE7_TRANSITION_CYCLES\r\n• Title: Core 7 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x77\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.\r\nCORE8_TRANSITION_CYCLES\r\n• Title: Core 8 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x78\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.\r\n• NOTE: This only tracks the hardware portion in the RCFSM (CFCFSM). This portion is just doing the \r\ncore C state transition. It does not include any necessary frequency/voltage transitions.\r\nCORE9_TRANSITION_CYCLES\r\n• Title: Core 9 C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x79\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions. There is one event per \r\ncore.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/fa8021de-d59c-470c-be21-efa9382af0b3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cef8ba1b526f0d5a9329a9d42d667c33b02f717e4b8965d95c2c25ba5cd524f7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 288
      },
      {
        "segments": [
          {
            "segment_id": "93a738a7-a61b-4bb0-bdf4-bed809b37d9e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 127,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 121\r\nUncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\nDELAYED_C_STATE_ABORT_CORE0\r\n• Title: Deep C State Rejection - Core 0\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x17\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algo\u0002rithm “rejected” the deep sleep state. In other words, a wake event occurred before the timer \r\nexpired that causes a transition into the deeper C state.\r\nDELAYED_C_STATE_ABORT_CORE1\r\n• Title: Deep C State Rejection - Core 1\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x18\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algo\u0002rithm “rejected” the deep sleep state. In other words, a wake event occurred before the timer \r\nexpired that causes a transition into the deeper C state.\r\nDELAYED_C_STATE_ABORT_CORE10\r\n• Title: Deep C State Rejection - Core 10\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x21\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algo\u0002rithm “rejected” the deep sleep state. In other words, a wake event occurred before the timer \r\nexpired that causes a transition into the deeper C state.\r\nDELAYED_C_STATE_ABORT_CORE11\r\n• Title: Deep C State Rejection - Core 11\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x22\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algo\u0002rithm “rejected” the deep sleep state. In other words, a wake event occurred before the timer \r\nexpired that causes a transition into the deeper C state.\r\nDELAYED_C_STATE_ABORT_CORE12\r\n• Title: Deep C State Rejection - Core 12\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x23\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algo\u0002rithm “rejected” the deep sleep state. In other words, a wake event occurred before the timer \r\nexpired that causes a transition into the deeper C state.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/93a738a7-a61b-4bb0-bdf4-bed809b37d9e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1bd07566c6d0fd16e300350ad71aa71bc14635ad0fd62441422eb0b7819e6d17",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 382
      },
      {
        "segments": [
          {
            "segment_id": "f0ae171b-1325-4716-a26d-4d317d7c9f62",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 128,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\n122 Reference Number: 329468-002\r\nDELAYED_C_STATE_ABORT_CORE13\r\n• Title: Deep C State Rejection - Core 13\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x24\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algorithm \r\n“rejected” the deep sleep state. In other words, a wake event occurred before the timer expired \r\nthat causes a transition into the deeper C state.\r\nDELAYED_C_STATE_ABORT_CORE14\r\n• Title: Deep C State Rejection - Core 14\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x25\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algorithm \r\n“rejected” the deep sleep state. In other words, a wake event occurred before the timer expired \r\nthat causes a transition into the deeper C state.\r\nDELAYED_C_STATE_ABORT_CORE2\r\n• Title: Deep C State Rejection - Core 2\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x19\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algorithm \r\n“rejected” the deep sleep state. In other words, a wake event occurred before the timer expired \r\nthat causes a transition into the deeper C state.\r\nDELAYED_C_STATE_ABORT_CORE3\r\n• Title: Deep C State Rejection - Core 3\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x1a\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algorithm \r\n“rejected” the deep sleep state. In other words, a wake event occurred before the timer expired \r\nthat causes a transition into the deeper C state.\r\nDELAYED_C_STATE_ABORT_CORE4\r\n• Title: Deep C State Rejection - Core 4\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x1b\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algorithm \r\n“rejected” the deep sleep state. In other words, a wake event occurred before the timer expired \r\nthat causes a transition into the deeper C state.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/f0ae171b-1325-4716-a26d-4d317d7c9f62.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1ae033b6dc2604da8b21f5b56692ee80c5153d2dc196477feeb87d6282b2d32a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 382
      },
      {
        "segments": [
          {
            "segment_id": "464c1554-ad50-439e-81b6-11023ac4db26",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 129,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 123\r\nUncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\nDELAYED_C_STATE_ABORT_CORE5\r\n• Title: Deep C State Rejection - Core 5\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x1c\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algo\u0002rithm “rejected” the deep sleep state. In other words, a wake event occurred before the timer \r\nexpired that causes a transition into the deeper C state.\r\nDELAYED_C_STATE_ABORT_CORE6\r\n• Title: Deep C State Rejection - Core 6\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x1d\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algo\u0002rithm “rejected” the deep sleep state. In other words, a wake event occurred before the timer \r\nexpired that causes a transition into the deeper C state.\r\nDELAYED_C_STATE_ABORT_CORE7\r\n• Title: Deep C State Rejection - Core 7\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x1e\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algo\u0002rithm “rejected” the deep sleep state. In other words, a wake event occurred before the timer \r\nexpired that causes a transition into the deeper C state.\r\nDELAYED_C_STATE_ABORT_CORE8\r\n• Title: Deep C State Rejection - Core 8\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x1f\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algo\u0002rithm “rejected” the deep sleep state. In other words, a wake event occurred before the timer \r\nexpired that causes a transition into the deeper C state.\r\nDELAYED_C_STATE_ABORT_CORE9\r\n• Title: Deep C State Rejection - Core 9\r\n• Category: Delayed C-State Events\r\n• Event Code: 0x20\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of times that a deep C state was requested, but the delayed C state algo\u0002rithm “rejected” the deep sleep state. In other words, a wake event occurred before the timer \r\nexpired that causes a transition into the deeper C state.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/464c1554-ad50-439e-81b6-11023ac4db26.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=42acc85d3d0cf152ff4ac9ea53523a852e5c0d709937ddc26778181698a8e490",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 382
      },
      {
        "segments": [
          {
            "segment_id": "736e362b-e7f1-4125-bde9-a6ee6a66361c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 130,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\n124 Reference Number: 329468-002\r\nDEMOTIONS_CORE0\r\n• Title: Core 0 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x1e\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion\r\nDEMOTIONS_CORE1\r\n• Title: Core 1 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x1f\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion\r\nDEMOTIONS_CORE10\r\n• Title: Core 10 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x42\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion\r\nDEMOTIONS_CORE11\r\n• Title: Core 11 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x43\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion\r\nDEMOTIONS_CORE12\r\n• Title: Core 12 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x44\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion\r\nDEMOTIONS_CORE13\r\n• Title: Core 13 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x45\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/736e362b-e7f1-4125-bde9-a6ee6a66361c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1974af46505a945affcef5aee366793f69487462b2de9f83bd2636c6e3c391d2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 264
      },
      {
        "segments": [
          {
            "segment_id": "141bfaaf-8b14-4f59-ac6d-2e11c952ccbc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 131,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 125\r\nUncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\nDEMOTIONS_CORE14\r\n• Title: Core 14 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x46\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion\r\nDEMOTIONS_CORE2\r\n• Title: Core 2 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x20\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion\r\nDEMOTIONS_CORE3\r\n• Title: Core 3 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x21\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion\r\nDEMOTIONS_CORE4\r\n• Title: Core 4 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x22\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion\r\nDEMOTIONS_CORE5\r\n• Title: Core 5 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x23\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion\r\nDEMOTIONS_CORE6\r\n• Title: Core 6 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x24\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/141bfaaf-8b14-4f59-ac6d-2e11c952ccbc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=050730541457db7b4581529164427d0808ca047405a064e554cb5a07064f8e13",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 264
      },
      {
        "segments": [
          {
            "segment_id": "848bff86-aa1a-434e-ab27-0683716d6695",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 132,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\n126 Reference Number: 329468-002\r\nDEMOTIONS_CORE7\r\n• Title: Core 7 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x25\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion\r\nDEMOTIONS_CORE8\r\n• Title: Core 8 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x40\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion\r\nDEMOTIONS_CORE9\r\n• Title: Core 9 C State Demotions\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x41\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of times when a configurable cores had a C-state demotion\r\nFREQ_BAND0_CYCLES\r\n• Title: Frequency Residency\r\n• Category: FREQ_RESIDENCY Events\r\n• Event Code: 0x0b\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[7:0]\r\n• Definition: Counts the number of cycles that the uncore was running at a frequency greater than \r\nor equal to the frequency that is configured in the filter. One can use all four counters with this \r\nevent, so it is possible to track up to 4 configurable bands. One can use edge detect in conjunction \r\nwith this event to track the number of times that we transitioned into a frequency greater than or \r\nequal to the configurable frequency. One can also use inversion to track cycles when we were less \r\nthan the configured frequency.\r\n• NOTE: The PMON control registers in the PCU only update on a frequency transition. Changing \r\nthe measuring threshold during a sample interval may introduce errors in the counts. This is espe\u0002cially true when running at a constant frequency for an extended period of time. There is a corner \r\ncase here: we set this code on the GV transition. So, if we never GV we will never call this code. \r\nThis event does not include transition times. It is handled on fast path.\r\nFREQ_BAND1_CYCLES\r\n• Title: Frequency Residency\r\n• Category: FREQ_RESIDENCY Events\r\n• Event Code: 0x0c\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[15:8]\r\n• Definition: Counts the number of cycles that the uncore was running at a frequency greater than \r\nor equal to the frequency that is configured in the filter. One can use all four counters with this \r\nevent, so it is possible to track up to 4 configurable bands. One can use edge detect in conjunction ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/848bff86-aa1a-434e-ab27-0683716d6695.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=da092df2dfb1e123f54960a3a39889aa7552999b1f3a40fbfe774aa0bb1942a2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 418
      },
      {
        "segments": [
          {
            "segment_id": "9cce81df-7c39-4a17-a00f-8cc6fbcc9191",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 133,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 127\r\nUncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\nwith this event to track the number of times that we transitioned into a frequency greater than or \r\nequal to the configurable frequency. One can also use inversion to track cycles when we were less \r\nthan the configured frequency.\r\n• NOTE: The PMON control registers in the PCU only update on a frequency transition. Changing \r\nthe measuring threshold during a sample interval may introduce errors in the counts. This is \r\nespecially true when running at a constant frequency for an extended period of time. There is a \r\ncorner case here: we set this code on the GV transition. So, if we never GV we will never call this \r\ncode. This event does not include transition times. It is handled on fast path.\r\nFREQ_BAND2_CYCLES\r\n• Title: Frequency Residency\r\n• Category: FREQ_RESIDENCY Events\r\n• Event Code: 0x0d\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[23:16]\r\n• Definition: Counts the number of cycles that the uncore was running at a frequency greater than \r\nor equal to the frequency that is configured in the filter. One can use all four counters with this \r\nevent, so it is possible to track up to 4 configurable bands. One can use edge detect in conjunction \r\nwith this event to track the number of times that we transitioned into a frequency greater than or \r\nequal to the configurable frequency. One can also use inversion to track cycles when we were less \r\nthan the configured frequency.\r\n• NOTE: The PMON control registers in the PCU only update on a frequency transition. Changing \r\nthe measuring threshold during a sample interval may introduce errors in the counts. This is \r\nespecially true when running at a constant frequency for an extended period of time. There is a \r\ncorner case here: we set this code on the GV transition. So, if we never GV we will never call this \r\ncode. This event does not include transition times. It is handled on fast path.\r\nFREQ_BAND3_CYCLES\r\n• Title: Frequency Residency\r\n• Category: FREQ_RESIDENCY Events\r\n• Event Code: 0x0e\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[31:24]\r\n• Definition: Counts the number of cycles that the uncore was running at a frequency greater than \r\nor equal to the frequency that is configured in the filter. One can use all four counters with this \r\nevent, so it is possible to track up to 4 configurable bands. One can use edge detect in conjunction \r\nwith this event to track the number of times that we transitioned into a frequency greater than or \r\nequal to the configurable frequency. One can also use inversion to track cycles when we were less \r\nthan the configured frequency.\r\n• NOTE: The PMON control registers in the PCU only update on a frequency transition. Changing \r\nthe measuring threshold during a sample interval may introduce errors in the counts. This is \r\nespecially true when running at a constant frequency for an extended period of time. There is a \r\ncorner case here: we set this code on the GV transition. So, if we never GV we will never call this \r\ncode. This event does not include transition times. It is handled on fast path.\r\nFREQ_MAX_CURRENT_CYCLES\r\n• Title: Current Strongest Upper Limit Cycles\r\n• Category: FREQ_MAX_LIMIT Events\r\n• Event Code: 0x07\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when current is the upper limit on frequency.\r\n• NOTE: This is fast path, will clear our other limits when it happens. The slow loop portion, which \r\ncovers the other limits, can double count EDP. Clearing should fix this up in the next fast path \r\nevent, but this will happen. Add up all the cycles and it won't make sense, but the general distri\u0002bution is true.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/9cce81df-7c39-4a17-a00f-8cc6fbcc9191.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=97411e511d88c39cec8e8d52ec7ffacc07c71f8cf9141187111adc1bbff17267",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 632
      },
      {
        "segments": [
          {
            "segment_id": "9cce81df-7c39-4a17-a00f-8cc6fbcc9191",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 133,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 127\r\nUncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\nwith this event to track the number of times that we transitioned into a frequency greater than or \r\nequal to the configurable frequency. One can also use inversion to track cycles when we were less \r\nthan the configured frequency.\r\n• NOTE: The PMON control registers in the PCU only update on a frequency transition. Changing \r\nthe measuring threshold during a sample interval may introduce errors in the counts. This is \r\nespecially true when running at a constant frequency for an extended period of time. There is a \r\ncorner case here: we set this code on the GV transition. So, if we never GV we will never call this \r\ncode. This event does not include transition times. It is handled on fast path.\r\nFREQ_BAND2_CYCLES\r\n• Title: Frequency Residency\r\n• Category: FREQ_RESIDENCY Events\r\n• Event Code: 0x0d\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[23:16]\r\n• Definition: Counts the number of cycles that the uncore was running at a frequency greater than \r\nor equal to the frequency that is configured in the filter. One can use all four counters with this \r\nevent, so it is possible to track up to 4 configurable bands. One can use edge detect in conjunction \r\nwith this event to track the number of times that we transitioned into a frequency greater than or \r\nequal to the configurable frequency. One can also use inversion to track cycles when we were less \r\nthan the configured frequency.\r\n• NOTE: The PMON control registers in the PCU only update on a frequency transition. Changing \r\nthe measuring threshold during a sample interval may introduce errors in the counts. This is \r\nespecially true when running at a constant frequency for an extended period of time. There is a \r\ncorner case here: we set this code on the GV transition. So, if we never GV we will never call this \r\ncode. This event does not include transition times. It is handled on fast path.\r\nFREQ_BAND3_CYCLES\r\n• Title: Frequency Residency\r\n• Category: FREQ_RESIDENCY Events\r\n• Event Code: 0x0e\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Filter Dependency: PCUFilter[31:24]\r\n• Definition: Counts the number of cycles that the uncore was running at a frequency greater than \r\nor equal to the frequency that is configured in the filter. One can use all four counters with this \r\nevent, so it is possible to track up to 4 configurable bands. One can use edge detect in conjunction \r\nwith this event to track the number of times that we transitioned into a frequency greater than or \r\nequal to the configurable frequency. One can also use inversion to track cycles when we were less \r\nthan the configured frequency.\r\n• NOTE: The PMON control registers in the PCU only update on a frequency transition. Changing \r\nthe measuring threshold during a sample interval may introduce errors in the counts. This is \r\nespecially true when running at a constant frequency for an extended period of time. There is a \r\ncorner case here: we set this code on the GV transition. So, if we never GV we will never call this \r\ncode. This event does not include transition times. It is handled on fast path.\r\nFREQ_MAX_CURRENT_CYCLES\r\n• Title: Current Strongest Upper Limit Cycles\r\n• Category: FREQ_MAX_LIMIT Events\r\n• Event Code: 0x07\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when current is the upper limit on frequency.\r\n• NOTE: This is fast path, will clear our other limits when it happens. The slow loop portion, which \r\ncovers the other limits, can double count EDP. Clearing should fix this up in the next fast path \r\nevent, but this will happen. Add up all the cycles and it won't make sense, but the general distri\u0002bution is true.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/9cce81df-7c39-4a17-a00f-8cc6fbcc9191.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=97411e511d88c39cec8e8d52ec7ffacc07c71f8cf9141187111adc1bbff17267",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 632
      },
      {
        "segments": [
          {
            "segment_id": "976f006b-60bd-4d05-8954-bbfa0454b113",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 134,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\n128 Reference Number: 329468-002\r\nFREQ_MAX_LIMIT_THERMAL_CYCLES\r\n• Title: Thermal Strongest Upper Limit Cycles\r\n• Category: FREQ_MAX_LIMIT Events\r\n• Event Code: 0x04\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when thermal conditions are the upper limit on frequency. \r\nThis is related to the THERMAL_THROTTLE CYCLES_ABOVE_TEMP event, which always counts cycles \r\nwhen we are above the thermal temperature. This event (STRONGEST_UPPER_LIMIT) is sampled at \r\nthe output of the algorithm that determines the actual frequency, while THERMAL_THROTTLE looks \r\nat the input.\r\nFREQ_MAX_OS_CYCLES\r\n• Title: OS Strongest Upper Limit Cycles\r\n• Category: FREQ_MAX_LIMIT Events\r\n• Event Code: 0x06\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when the OS is the upper limit on frequency.\r\n• NOTE: Essentially, this event says the OS is getting the frequency it requested.\r\nFREQ_MAX_POWER_CYCLES\r\n• Title: Power Strongest Upper Limit Cycles\r\n• Category: FREQ_MAX_LIMIT Events\r\n• Event Code: 0x05\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when power is the upper limit on frequency.\r\nFREQ_MIN_IO_P_CYCLES\r\n• Title: IO P Limit Strongest Lower Limit Cycles\r\n• Category: FREQ_MIN_LIMIT Events\r\n• Event Code: 0x61\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when IO P Limit is preventing us from dropping the fre\u0002quency lower. This algorithm monitors the needs to the IO subsystem on both local and remote \r\nsockets and will maintain a frequency high enough to maintain good IO BW. This is necessary for \r\nwhen all the IA cores on a socket are idle but a user still would like to maintain high IO Bandwidth.\r\nFREQ_MIN_PERF_P_CYCLES\r\n• Title: Perf P Limit Strongest Lower Limit Cycles\r\n• Category: FREQ_MIN_LIMIT Events\r\n• Event Code: 0x02\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when Perf P Limit is preventing us from dropping the fre\u0002quency lower. Perf P Limit is an algorithm that takes input from remote sockets when determining if \r\na socket should drop it's frequency down. This is largely to minimize increases in snoop and remote \r\nread latencies.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/976f006b-60bd-4d05-8954-bbfa0454b113.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7c8e7f5ab4d74db0053db30c047b057d7d52f88790f50f7e4295220bc5f88a0e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 362
      },
      {
        "segments": [
          {
            "segment_id": "4367c349-ff8f-4c2c-80d2-802ecb56d95e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 135,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 129\r\nUncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\nFREQ_TRANS_CYCLES\r\n• Title: Cycles spent changing Frequency\r\n• Category: FREQ_TRANS Events\r\n• Event Code: 0x60\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when the system is changing frequency. This can not be \r\nfiltered by thread ID. One can also use it with the occupancy counter that monitors number of \r\nthreads in C0 to estimate the performance impact that frequency transitions had on the system.\r\nMEMORY_PHASE_SHEDDING_CYCLES\r\n• Title: Memory Phase Shedding Cycles\r\n• Category: MEMORY_PHASE_SHEDDING Events\r\n• Event Code: 0x2f\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles that the PCU has triggered memory phase shedding. \r\nThis is a mode that can be run in the iMC physicals that saves power at the expense of additional \r\nlatency.\r\n• NOTE: Package C1\r\nPKG_C_EXIT_LATENCY\r\n• Title: Package C State Exit Latency\r\n• Category: PKG_C_STATE_TRANSITION Events\r\n• Event Code: 0x26\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles that the package is transitioning from package C2 to C3.\r\n• NOTE: This can be used in conjunction with edge detect to count C3 entrances.\r\nPOWER_STATE_OCCUPANCY\r\n• Title: Number of cores in C-State\r\n• Category: POWER_STATE_OCC Events\r\n• Event Code: 0x80\r\n• Max. Inc/Cyc:. 8, Register Restrictions: 0-3\r\n• Definition: This is an occupancy event that tracks the number of cores that are in the chosen C\u0002State. It can be used by itself to get the average number of cores in that C-state with threshhold\u0002ing to generate histograms, or with other PCU events and occupancy triggering to capture other \r\ndetails.\r\nPROCHOT_EXTERNAL_CYCLES\r\n• Title: External Prochot\r\n• Category: PROCHOT Events\r\n• Event Code: 0x0a\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\nTable 2-127. Unit Masks for POWER_STATE_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nCORES_C0 b01000000 C0 and C1\r\nCORES_C3 b10000000 C3\r\nCORES_C6 b11000000 C6 and C7",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/4367c349-ff8f-4c2c-80d2-802ecb56d95e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=85011bd730fddd77be89f74c8bda1ed64cee02e53b12e28b940d84b2bd404b2d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 323
      },
      {
        "segments": [
          {
            "segment_id": "1eb37e94-1167-4668-ab7f-7bc1abdd9cc3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 136,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nPower Control (PCU) Performance Monitoring\r\n130 Reference Number: 329468-002\r\n• Definition: Counts the number of cycles that we are in external PROCHOT mode. This mode is trig\u0002gered when a sensor off the die determines that something off-die (like DRAM) is too hot and must \r\nthrottle to avoid damaging the chip.\r\nPROCHOT_INTERNAL_CYCLES\r\n• Title: Internal Prochot\r\n• Category: PROCHOT Events\r\n• Event Code: 0x09\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles that we are in Internal PROCHOT mode. This mode is trig\u0002gered when a sensor on the die determines that we are too hot and must throttle to avoid damaging \r\nthe chip.\r\nTOTAL_TRANSITION_CYCLES\r\n• Title: Total Core C State Transition Cycles\r\n• Category: CORE_C_STATE_TRANSITION Events\r\n• Event Code: 0x63\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of cycles spent performing core C state transitions across all cores.\r\nVOLT_TRANS_CYCLES_CHANGE\r\n• Title: Cycles Changing Voltage\r\n• Category: VOLT_TRANS Events\r\n• Event Code: 0x03\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when the system is changing voltage. There is no filtering \r\nsupported with this event. One can use it as a simple event, or use it conjunction with the occu\u0002pancy events to monitor the number of cores or threads that were impacted by the transition. This \r\nevent is calculated by OR’ing together the increasing and decreasing events.\r\nVOLT_TRANS_CYCLES_DECREASE\r\n• Title: Cycles Decreasing Voltage\r\n• Category: VOLT_TRANS Events\r\n• Event Code: 0x02\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when the system is decreasing voltage. There is no filter\u0002ing supported with this event. One can use it as a simple event, or use it conjunction with the occu\u0002pancy events to monitor the number of cores or threads that were impacted by the transition.\r\nVOLT_TRANS_CYCLES_INCREASE\r\n• Title: Cycles Increasing Voltage\r\n• Category: VOLT_TRANS Events\r\n• Event Code: 0x01\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when the system is increasing voltage. There is no filter\u0002ing supported with this event. One can use it as a simple event, or use it conjunction with the occu\u0002pancy events to monitor the number of cores or threads that were impacted by the transition.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/1eb37e94-1167-4668-ab7f-7bc1abdd9cc3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6855efb58c9f0e97005f311a7832962b05a5060b2a913fc36b8ff016863023cf",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 377
      },
      {
        "segments": [
          {
            "segment_id": "84da220e-9018-443d-bc8e-ad324dd7c808",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 137,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 131\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nVR_HOT_CYCLES\r\n• Title: VR Hot\r\n• Category: VR_HOT Events\r\n• Event Code: 0x32\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: \r\n2.8 INTEL® QPI LINK LAYER PERFORMANCE MONITORING\r\n2.8.1 Overview of the Intel® QPI Box\r\nThe Intel® QPI Link Layer is responsible for packetizing requests from the caching agent on the way \r\nout to the system interface. As such, it shares responsibility with the CBo(s) as the Intel QPI caching \r\nagent(s). It is responsible for converting CBo requests to Intel QPI messages (i.e. snoop generation \r\nand data response messages from the snoop response) as well as converting/forwarding ring \r\nmessages to Intel QPI packets and vice versa.On Ivy Bridge, Intel® QPI is split into two separate \r\nlayers. The Intel® QPI LL (link layer) is responsible for generating, transmitting, and receiving \r\npackets with the Intel® QPI link.\r\nR3QPI (Section 2.10, “R3QPI Performance Monitoring”) provides the interface to the Ring for the Link \r\nLayer. It is also the point where VNA/VN0 link credits are acquired.There are two Intel® QPI agents \r\nin Ivy Bridge that share a single ring stop and a third agent in the EX part with its own ring stop. These \r\nlinks can be connected to a single destination (such as in DP), but also can be connected to two sepa\u0002rate destinations (4s Ring or sDP). Therefore, it will be necessary to count Intel® QPI statistics for \r\neach agent seperately.The Intel® QPI Link Layer processes two flits per cycle in each direction. In \r\norder to accommodate this, many of the events in the Link Layer can increment by 0, 1, or 2 in each \r\ncycle. It is not possible to monitor Rx (received) and Tx (transmitted) flit information at the same \r\ntime on the same counter.\r\n2.8.2 Intel® QPI Performance Monitoring Overview\r\nEach Intel® QPI Port supports event monitoring through four 48b wide counters \r\n(Q_Py_PCI_PMON_CTR/CTL{3:0}). Each of these four counters can be programmed to count any \r\nIntel® QPI event. The Intel® QPI counters can increment by a maximum of 8b per cycle. \r\nEach Intel® QPI Port also includes a mask/match register that allows a user to match packets, \r\naccording to various standard packet fields such as message class, opcode, etc, as they leave the QPI \r\nPort. \r\nFor information on how to setup a monitoring session, refer to Section 2.1, “Uncore Per-Socket \r\nPerformance Monitoring Control”.\r\n2.8.2.1 QPI PMON Registers - On Overflow and the Consequences (PMI/Freeze)\r\nIf an overflow is detected from a QPI performance counter enabled to communicate its overflow \r\n(Q_Py_PCI_PMON_CTL.ov_en is set to 1), the overflow bit is set at the box level \r\n(Q_Py_PCI_PMON_BOX_STATUS.ov) and an overflow message is sent to the UBox. When the UBox \r\nreceives the overflow signal, the U_MSR_PMON_GLOBAL_STATUS.ov_q bit corresponding to the QPI \r\nPort generating the overflow is set (see Table 2-3, “U_MSR_PMON_GLOBAL_STATUS Register – Field \r\nDefinitions”) and a PMI can be generated.\r\nOnce a freeze has occurred, in order to see a new freeze, the overflow field responsible for the freeze, \r\nmust be cleared by setting the corresponding bit in Q_Py_PCI_PMON_BOX_STATUS.ov and ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/84da220e-9018-443d-bc8e-ad324dd7c808.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ba60e4cc766a798111fda839e0c6eb0fa27d31b5d7dcbe8f235db690d61f2c4b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 511
      },
      {
        "segments": [
          {
            "segment_id": "15aa4d8c-5512-4f7d-bc42-59511b76a498",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 138,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n132 Reference Number: 329468-002\r\nU_MSR_PMON_GLOBAL_STATU.ov_q. Assuming all the counters have been locally enabled (.en bit in \r\ndata registers meant to monitor events) and the overflow bit(s) has been cleared, the QPI Port is \r\nprepared for a new sample interval. Once the global controls have been re-enabled (Section 2.1.4, \r\n“Enabling a New Sample Interval from Frozen Counters”), counting will resume.\r\n2.8.3 Intel® QPI Performance Monitors\r\nTable 2-128. Intel® QPI Performance Monitoring Registers\r\nRegister Name PCICFG \r\nAddress\r\nSize \r\n(bits) Description\r\nPCICFG Base Address Dev:Func\r\nQPI0 Port 0 PMON Registers D8:F2\r\nQPI0 Port 1 PMON Registers D9:F2\r\nQPI1 Port 2 PMON Registers D24:F2\r\nBox-Level Control/Status\r\nQ_Py_PCI_PMON_BOX_STATUS F8 32 QPI Port y PMON Box-Wide Status\r\nQ_Py_PCI_PMON_BOX_CTL F4 32 QPI Port y PMON Box-Wide Control\r\nGeneric Counter Control\r\nQ_Py_PCI_PMON_CTL3 E4 32 QPI Port y PMON Control for Counter 3\r\nQ_Py_PCI_PMON_CTL2 E0 32 QPI Port y PMON Control for Counter 2\r\nQ_Py_PCI_PMON_CTL1 DC 32 QPI Port y PMON Control for Counter 1\r\nQ_Py_PCI_PMON_CTL0 D8 32 QPI Port y PMON Control for Counter 0\r\nGeneric Counters\r\nQ_Py_PCI_PMON_CTR3 BC+B8 32x2 QPI Port y PMON Counter 3\r\nQ_Py_PCI_PMON_CTR2 B4+B0 32x2 QPI Port y PMON Counter 2\r\nQ_Py_PCI_PMON_CTR1 AC+A8 32x2 QPI Port y PMON Counter 1\r\nQ_Py_PCI_PMON_CTR0 A4+A0 32x2 QPI Port y PMON Counter 0\r\nQPI0 Mask/Match Port 0 PMON Registers D8:F6\r\nQPI0 Mask/Match Port 1 PMON Registers D9:F6\r\nQPI1 Mask/Match Port 2 PMON Registers D24:F6\r\nBox-Level Filters\r\nQ_Py_PCI_PMON_PKT_MASK1 23C 32 QPI Port y PMON Packet Filter Mask 1\r\nQ_Py_PCI_PMON_PKT_MASK0 238 32 QPI Port y PMON Packet Filter Mask 0\r\nQ_Py_PCI_PMON_PKT_MATCH1 22C 32 QPI Port y PMON Packet Filter Match 1\r\nQ_Py_PCI_PMON_PKT_MATCH0 228 32 QPI Port y PMON Packet Filter Mask 0\r\nQPI0 Misc Register Port 0,1 D8:F0\r\nQPI1 Misc Register Port 2 D24:F0\r\nMisc (Non-PMON) Counters\r\nQPI_RATE_STATUS 0xD4 32 QPI Rate Status",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/15aa4d8c-5512-4f7d-bc42-59511b76a498.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ee5205c449fbc3e14a395d61cbf9450d36f9dd2a0b84eead85cf9865b0e10538",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 302
      },
      {
        "segments": [
          {
            "segment_id": "51908430-66b1-4ed6-af10-830bbc9c87d3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 139,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 133\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n2.8.3.1 Intel® QPI Box Level PMON State\r\nThe following registers represent the state governing all box-level PMUs in each Port of the Intel® QPI \r\nBox. \r\nIn the case of the Intel® QPI Ports, the Q_Py_PCI_PMON_BOX_CTL register provides the ability to \r\nmanually freeze the counters in the box (.frz) and reset the generic state (.rst_ctrs and .rst_ctrl).\r\nIf an overflow is detected from one of the QPI PMON registers, the corresponding bit in the \r\nQ_Py_PCI_PMON_BOX_STATUS.ov field will be set. To reset these overflow bits, a user must write a \r\nvalue of ‘1’ to them (which will clear the bits).\r\nTable 2-129. Q_Py_PCI_PMON_BOX_CTL Register – Field Definitions\r\nU\r\nTable 2-130. Q_Py_PCI_PMON_BOX_STATUS Register – Field Definitions\r\n2.8.3.2 Intel® QPI PMON state - Counter/Control Pairs\r\nThe following table defines the layout of the Intel® QPI performance monitor control registers. The \r\nmain task of these configuration registers is to select the event to be monitored by their respective \r\ndata counter (.ev_sel, .umask, .ev_sel_ext). Additional control bits are provided to shape the \r\nincoming events (e.g. .edge_det, .thresh) as well as provide additional functionality for monitoring \r\nsoftware (.rst,.ov_en).\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:18 RV 0 Ignored\r\nrsv 17:16 RV 0 Reserved; SW must write to 1 else behavior is undefined.\r\nig 15:9 RV 0 Ignored\r\nfrz 8 WO 0 Freeze. \r\nIf set to 1 the counters in this box will be frozen.\r\nig 7:2 RV 0 Ignored\r\nrst_ctrs 1 WO 0 Reset Counters. \r\nWhen set to 1, the Counter Registers will be reset to 0.\r\nrst_ctrl 0 WO 0 Reset Control. \r\nWhen set to 1, the Counter Control Registers will be reset \r\nto 0.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:5 RV 0 Ignored\r\nrsv 4 RV 0 Reserved; SW must write to 0 else behavior is undefined.\r\nov 3:0 RW1C 0 If an overflow is detected from the corresponding \r\nQ_Py_PCI_PMON_CTR register, it’s overflow bit will be set. \r\nNOTE: Write of ‘1’ will clear the bit.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/51908430-66b1-4ed6-af10-830bbc9c87d3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=83aca7cdf07dd3389fa4ad2b6afcab3f3d08387fe219ff86104f81da63fe2e99",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 338
      },
      {
        "segments": [
          {
            "segment_id": "5c8a95ff-a265-4174-aee5-6325617d1252",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 140,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n134 Reference Number: 329468-002\r\nTable 2-131. Q_Py_PCI_PMON_CTL{3-0} Register – Field Definitions\r\nThe Intel® QPI performance monitor data registers are 48b wide. A counter overflow occurs when a \r\ncarry out from bit 47 is detected. Software can force all uncore counting to freeze after N events by \r\npreloading a monitor with a count value of 248 - N and setting the control register to send an overflow \r\nmessage to the UBox (Section 2.1.1.1, “Freezing on Counter Overflow”). During the interval of time \r\nbetween overflow and global disable, the counter value will wrap and continue to collect events.\r\nIf accessible, software can continuously read the data registers without disabling event collection.\r\nTable 2-132. Q_Py_PCI_PMON_CTR{3-0} Register – Field Definitions\r\n2.8.3.3 Intel® QPI Registers for Packet Mask/Match Facility\r\nIn addition to generic event counting, each port of the Intel® QPI Link Layer provides two pairs of \r\nMATCH/MASK registers that allow a user to filter packet traffic serviced (crossing from an input port to \r\nan output port) by the Intel® QPI Link Layer. Filtering can be performed according to the packet \r\nOpcode, Message Class, Response, HNID and Physical Address. Program the selected QPI LL counter to \r\ncapture CTO_COUNT in order to capture the filter match as an event. \r\nTo use the match/mask facility:\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nthresh 31:24 RW-V 0 Threshold used in counter comparison.\r\nrsv 23 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nen 22 RW-V 0 Local Counter Enable. \r\nev_sel_ext 21 RW-V 0 Extension bit to the Event Select field. \r\nov_en 20 RW-V 0 When this bit is asserted and the corresponding counter \r\noverflows, its overflow bit is set in the local status register \r\n(Q_Py_PCI_PMON_BOX_STATUS.ov) and an overflow is sent on \r\nthe message channel to the UBox. When the overflow is received \r\nby the UBox, the bit corresponding to this QPI will be set in \r\nU_MSR_PMON_GLOBAL_STATUS.ov_q{1,0}. \r\nig 19 RV 0 Ignored\r\nedge_det 18 RW-V 0 When set to 1, rather than measuring the event in each cycle it \r\nis active, the corresponding counter will increment when a 0 to 1 \r\ntransition (i.e. rising edge) is detected.\r\nWhen 0, the counter will increment in each cycle that the event \r\nis asserted.\r\nNOTE: .edge_det is in series following.thresh. Due to this, the \r\n.thresh field must be set to a non-0 value. For events that \r\nincrement by no more than 1 per cycle, set .thresh to 0x1.\r\nrst 17 WO 0 When set to 1, the corresponding counter will be cleared to 0.\r\nrsv 16 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\numask 15:8 RW-V 0 Select subevents to be counted within the selected event. \r\nev_sel 7:0 RW-V 0 Select event to be counted.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 63:48 RV 0 Ignored\r\nevent_count 47:0 RW-V 0 48-bit performance event counter",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/5c8a95ff-a265-4174-aee5-6325617d1252.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=189f635435ed63860946ee864b569f9a2929463bd70e69f347c88d200592aad7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 481
      },
      {
        "segments": [
          {
            "segment_id": "cdfcdf13-69ec-4075-9b8f-c69d53f97e07",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 141,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 135\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\na) Program the match/mask regs (see Table 2-133, “Q_Py_PCI_PMON_PKT_MATCH1 Registers” \r\nthrough Table 2-136, “Q_Py_PCI_PMON_PKT_MASK0 Registers”).\r\nb) Set the counter’s control register event select to 0x38 (CTO_COUNT) to capture the mask/match \r\nas a performance event.\r\nThe following table contains the packet traffic that can be monitored if one of the mask/match regis\u0002ters was chosen to select the event.\r\nTable 2-133. Q_Py_PCI_PMON_PKT_MATCH1 Registers\r\nField Bits\r\nHW \r\nReset \r\nVal\r\nDescription\r\n--- 31:20 0x0 Reserved; Must write to 0 else behavior is undefined.\r\nRDS 19:16 0x0 Response Data State (valid when MC == DRS and Opcode == \r\n0x0-2). Bit settings are mutually exclusive.\r\nb1000 - Modified\r\nb0100 - Exclusive\r\nb0010 - Shared\r\nb0001 - Forwarding\r\nb0000 - Invalid (Non-Coherent)\r\n--- 15:4 0x0 Reserved; Must write to 0 else behavior is undefined.\r\nRNID_3_0 3:0 0x0 Remote Node ID(3:0 - Least Significant Bits)\r\nTable 2-134. Q_Py_PCI_PMON_PKT_MATCH0 Registers (Sheet 1 of 2)\r\nField Bits\r\nHW \r\nReset \r\nVal\r\nDescription\r\nRNID_4 31 0x0 Remote Node ID(Bit 4 - Most Significant Bit)\r\n--- 30:18 0x0 Reserved; Must write to 0 else behavior is undefined.\r\nDNID 17:13 0x0 Destination Node ID \r\nMC 12:9 0x0 Message Class\r\nb0000 HOM - Requests\r\nb0001 HOM - Responses\r\nb0010 NDR\r\nb0011 SNP\r\nb0100 NCS\r\n---\r\nb1100 NCB\r\n---\r\nb1110 DRS",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/cdfcdf13-69ec-4075-9b8f-c69d53f97e07.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=43758581de801373bcee928377b6f6a72b33cc28aa4e0ac1b28c3f937a30f738",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a858b0eb-5a2e-4941-867d-923dabf5ffae",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 142,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n136 Reference Number: 329468-002\r\nOPC 8:5 0x0 Opcode\r\nDRS,NCB:\r\n[8] Packet Size, 0 == 9 flits, 1 == 11 flits\r\nNCS:\r\n[8] Packet Size, 0 == 1 or 2 flits, 1 == 3 flits\r\nSee Section 2.11, “Packet Matching Reference” for a listing of \r\nopcodes that may be filtered per message class.\r\nVNW 4:3 0x0 Virtual Network\r\nb00 - VN0\r\nb01 - VN1\r\nb1x - VNA\r\n--- 2:0 0x0 Reserved; Must write to 0 else behavior is undefined.\r\nTable 2-135. Q_Py_PCI_PMON_PKT_MASK1 Registers\r\nField Bits\r\nHW \r\nReset \r\nVal\r\nDescription\r\n--- 31:20 0x0 Reserved; Must write to 0 else behavior is undefined.\r\nRDS 19:16 0x0 Response Data State (valid when MC == DRS and Opcode == \r\n0x0-2). Bit settings are mutually exclusive.\r\nb1000 - Modified\r\nb0100 - Exclusive\r\nb0010 - Shared\r\nb0001 - Forwarding\r\nb0000 - Invalid (Non-Coherent)\r\n--- 15:4 0x0 Reserved; Must write to 0 else behavior is undefined.\r\nRNID_3_0 3:0 0x0 Remote Node ID(3:0 - Least Significant Bits)\r\nTable 2-136. Q_Py_PCI_PMON_PKT_MASK0 Registers (Sheet 1 of 2)\r\nField Bits\r\nHW \r\nReset \r\nVal\r\nDescription\r\nRNID_4 31 0x0 Remote Node ID(Bit 4 - Most Significant Bit)\r\n--- 30:18 0x0 Reserved; Must write to 0 else behavior is undefined.\r\nDNID 17:13 0x0 Destination Node ID \r\nMC 12:9 0x0 Message Class\r\nTable 2-134. Q_Py_PCI_PMON_PKT_MATCH0 Registers (Sheet 2 of 2)\r\nField Bits\r\nHW \r\nReset \r\nVal\r\nDescription",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/a858b0eb-5a2e-4941-867d-923dabf5ffae.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=67c7c2f0d10d57d1c580c3bb9707705c98eff3cfda52ed199f0bc0e8653a7854",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 447
      },
      {
        "segments": [
          {
            "segment_id": "d8b43584-e462-44ec-ae7f-2650a6085307",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 143,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 137\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nEvents Derived from Packet Filters\r\nFollowing is a selection of common events that may be derived by using the Intel® QPI packet \r\nmatching facility. The Match/Mask columns correspond to the Match0/Mask0 registers. For the cases \r\nwhere additional fields need to be specified, they will be noted.\r\nOPC 8:5 0x0 Opcode\r\nSee Section 2.11, “Packet Matching Reference” for a listing of \r\nopcodes that may be filtered per message class.\r\nVNW 4:3 0x0 Virtual Network\r\n--- 2:0 0x0 Reserved; Must write to 0 else behavior is undefined.\r\nTable 2-137. Message Events Derived from the Match/Mask filters\r\nField Match\r\n[12:0]\r\nMask\r\n[12:0] Description\r\nDRS.AnyDataC 0x1C00 0x1F80 Any Data Response message containing a cache line in \r\nresponse to a core request. The AnyDataC messages are \r\nonly sent to a C-Box. The metric DRS.AnyResp - \r\nDRS.AnyDataC will compute the number of DRS writeback \r\nand non snoop write messages.\r\nDRS.DataC_M 0x1C00\r\n&&\r\nMatch1\r\n[19:16] \r\n0x8\r\n0x1FE0\r\n&&\r\nMask1\r\n[19:16] \r\n0xF\r\nData Response message of a cache line in M state that is \r\nresponse to a core request. The DRS.DataC_M messages \r\nare only sent to Intel® QPI.\r\nDRS.DataC_E 0x1C00\r\n&&\r\nMatch1\r\n[19:16] \r\n0x4\r\n0x1FE0\r\n&&\r\nMask1\r\n[19:16] \r\n0xF\r\nData Response message of a cache line in E state that is \r\nresponse to a core request. The DRS.DataC_E messages \r\nare only sent to Intel® QPI.\r\nDRS.DataC_F 0x1C00\r\n&&\r\nMatch1\r\n[19:16] \r\n0x1\r\n0x1FE0\r\n&&\r\nMask1\r\n[19:16] \r\n0xF\r\nData Response message of a cache line in F state that is \r\nresponse to a core request. The DRS.DataC_F messages \r\nare only sent to Intel® QPI.\r\nDRS.DataC_E_Cmp 0x1C40\r\n&&\r\nMatch1\r\n[19:16] \r\n0x4\r\n0x1FE0\r\n&&\r\nMask1\r\n[19:16] \r\n0xF\r\nComplete Data Response message of a cache line in E \r\nstate that is response to a core request. The DRS.DataC_E \r\nmessages are only sent to Intel® QPI.\r\nDRS.DataC_F_Cmp 0x1C40\r\n&&\r\nMatch1\r\n[19:16] \r\n0x1\r\n0x1FE0\r\n&&\r\nMask1\r\n[19:16] \r\n0xF\r\nComplete Data Response message of a cache line in F \r\nstate that is response to a core request. The DRS.DataC_F \r\nmessages are only sent to Intel® QPI.\r\nDRS.DataC_E_FrcAc\r\nkCnflt\r\n0x1C20\r\n&&\r\nMatch1\r\n[19:16] \r\n0x4\r\n0x1FE0\r\n&&\r\nMask1\r\n[19:16] \r\n0xF\r\nForce Acknowledge Data Response message of a cache \r\nline in E state that is response to a core request. The \r\nDRS.DataC_E messages are only sent to Intel® QPI.\r\nTable 2-136. Q_Py_PCI_PMON_PKT_MASK0 Registers (Sheet 2 of 2)\r\nField Bits\r\nHW \r\nReset \r\nVal\r\nDescription",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/d8b43584-e462-44ec-ae7f-2650a6085307.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=450ecea19447f9174e25acf9d22040c82df7ad6821e852f918afd23e3225cee5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 397
      },
      {
        "segments": [
          {
            "segment_id": "ab52fdd2-c35d-467c-971a-2a8d07036181",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 144,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n138 Reference Number: 329468-002\r\n2.8.3.4 Intel® QPI Extra Registers - Companions to PMON HW\r\nThe uncore’s Intel® QPI box includes an extra MSR that provides the current Intel® QPI transfer rate.\r\nTable 2-138. QPI_RATE_STATUS Register – Field Definitions\r\nDRS.DataC_F_FrcAc\r\nkCnflt\r\n0x1C20\r\n&&\r\nMatch1\r\n[19:16] \r\n0x1\r\n0x1FE0\r\n&&\r\nMask1\r\n[19:16] \r\n0xF\r\nForce Acknowledge Data Response message of a cache \r\nline in F state that is response to a core request. The \r\nDRS.DataC_F messages are only sent to Intel® QPI.\r\nDRS.WbIData 0x1C80 0x1FE0 Data Response message for Write Back data where \r\ncacheline is set to the I state.\r\nDRS.WbSData 0x1CA0 0x1FE0 Data Response message for Write Back data where \r\ncacheline is set to the S state.\r\nDRS.WbEData 0x1CC0 0x1FE0 Data Response message for Write Back data where \r\ncacheline is set to the E state.\r\nDRS.AnyResp 0x1C00 0x1E00 Any Data Response message. A DRS message can be \r\neither 9 flits for a full cache line or 11 flits for partial data.\r\nDRS.AnyResp9flits 0x1C00 0x1F00 Any Data Response message that is 11 flits in length. An \r\n11 flit DRS message contains partial data. Each 8 byte \r\nchunk contains an enable field that specifies if the data is \r\nvalid. \r\nDRS.AnyResp11flits 0x1D00 0x1F00 Any Non Data Response completion message. A NDR \r\nmessage is 1 on flit.\r\nNCB.AnyResp 0x1800 0x1E00 Any Non-Coherent Bypass response message. \r\nNCB.AnyMsg9flits 0x1800 0x1F00 Any Non-Coherent Bypass message that is 9 flits in \r\nlength. A 9 flit NCB message contains a full 64 byte cache \r\nline.\r\nNCB.AnyMsg11flits 0x1900 0x1F00 Any Non-Coherent Bypass message that is 11 flits in \r\nlength. An 11 flit NCB message contains either partial data \r\nor an interrupt. For NCB 11 flit data messages, each 8 \r\nbyte chunk contains an enable field that specifies if the \r\ndata is valid. \r\nNCB.AnyInt 0x1900 0x1F80 Any Non-Coherent Bypass interrupt message. NCB \r\ninterrupt messages are 11 flits in length.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nrsv 31:5 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nslow_mode 4 RO-V 0 Slow Mode\r\nReflects the current slow mode status being driven to the \r\nPLL This will be set out of reset to bring Intel® QPI in slow \r\nmode. And is only expected to be set when QPI_rate is set \r\nto 6.4 GT/s\r\nrsv 3 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nTable 2-137. Message Events Derived from the Match/Mask filters\r\nField Match\r\n[12:0]\r\nMask\r\n[12:0] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ab52fdd2-c35d-467c-971a-2a8d07036181.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ef712146e545bc1883fa0cd0649eda00f1f87e3632dae8204c447eb3596dd3a4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 409
      },
      {
        "segments": [
          {
            "segment_id": "d9bda649-5ff3-4015-bc33-5f93f29d9e6a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 145,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 139\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n2.8.4 Intel® QPI LL Performance Monitoring Events\r\n2.8.4.1 An Overview\r\nThe Intel® QPI Link Layer provides events to gather information on topics such as:\r\n• Tracking incoming (ring bound)/outgoing (system bound) transactions, \r\n• Various queue that track those transactions, \r\n• The Link Layer’s power consumption as expressed by the time spent in the Link power states \r\nL0p (half of lanes are disabled).\r\n• A variety of static events such as Direct2Core statistics and when output credit is unavailable. \r\n• Of particular interest, total link utilization may be calculated by capturing and subtracting \r\ntransmitted/received idle flits from Intel® QPI clocks.\r\nMany of these events can be further broken down by message class, including link utilization.In order \r\nto measure several of the available events in the Intel® QPI Link Layer, an extra bit (b16) must be set. \r\nThese cases will be documented in the full Event List.\r\n2.8.5 QPI LL Box Events Ordered By Code\r\nThe following table summarizes the directly measured QPI LL Box events.\r\nqpi_rate 2:0 RO-V 11b QPI Rate\r\nThis reflects the current QPI rate setting into the PLL\r\n010 - 5.6 GT/s\r\n011 - 6.4 GT/s\r\n100 - 7.2 GT/s\r\n101 - 8 GT/s\r\n110 - 8.8 GT/s\r\n111 - 9.6 GT/s\r\nother - Reserved\r\nSymbol Name Event \r\nCode Ctrs\r\nExtra \r\nSelect \r\nBit\r\nMax \r\nInc/\r\nCyc\r\nDescription\r\nTxL_FLITS_G0 0x00 0-3 0 2 Flits Transferred - Group 0\r\nRxL_FLITS_G0 0x01 0-3 0 2 Flits Received - Group 0\r\nTxL_INSERTS 0x04 0-3 0 1 Tx Flit Buffer Allocations\r\nTxL_BYPASSED 0x05 0-3 0 1 Tx Flit Buffer Bypassed\r\nTxL_CYCLES_NE 0x06 0-3 0 1 Tx Flit Buffer Cycles not Empty\r\nTxL_OCCUPANCY 0x07 0-3 0 1 Tx Flit Buffer Occupancy\r\nRxL_INSERTS 0x08 0-3 0 1 Rx Flit Buffer Allocations\r\nRxL_BYPASSED 0x09 0-3 0 1 Rx Flit Buffer Bypassed\r\nRxL_CYCLES_NE 0x0a 0-3 0 1 RxQ Cycles Not Empty\r\nRxL_OCCUPANCY 0x0b 0-3 0 128 RxQ Occupancy - All Packets\r\nTxL0_POWER_CYCLES 0x0c 0-3 0 1 Cycles in L0\r\nTxL0P_POWER_CYCLES 0x0d 0-3 0 1 Cycles in L0p\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/d9bda649-5ff3-4015-bc33-5f93f29d9e6a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f3b8f19ba48675a06a721471fa1d8d56338d7fd3c626d47c020f8801a0d06771",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 350
      },
      {
        "segments": [
          {
            "segment_id": "8a990ce9-0420-4a42-9304-9bbb9fc0da22",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 146,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n140 Reference Number: 329468-002\r\nRxL0_POWER_CYCLES 0x0f 0-3 0 1 Cycles in L0\r\nRxL0P_POWER_CYCLES 0x10 0-3 0 1 Cycles in L0p\r\nL1_POWER_CYCLES 0x12 0-3 0 1 Cycles in L1\r\nDIRECT2CORE 0x13 0-3 0 1 Direct 2 Core Spawning\r\nCLOCKTICKS 0x14 0-3 0 1 Number of qfclks\r\nTxL_FLITS_G1 0x00 0-3 1 2 Flits Transferred - Group 1\r\nTxL_FLITS_G2 0x01 0-3 1 2 Flits Transferred - Group 2\r\nRxL_FLITS_G1 0x02 0-3 1 2 Flits Received - Group 1\r\nRxL_FLITS_G2 0x03 0-3 1 2 Flits Received - Group 2\r\nRxL_INSERTS_DRS 0x09 0-3 1 1 Rx Flit Buffer Allocations - DRS\r\nRxL_INSERTS_NCB 0x0a 0-3 1 1 Rx Flit Buffer Allocations - NCB\r\nRxL_INSERTS_NCS 0x0b 0-3 1 1 Rx Flit Buffer Allocations - NCS\r\nRxL_INSERTS_HOM 0x0c 0-3 1 1 Rx Flit Buffer Allocations - HOM\r\nRxL_INSERTS_SNP 0x0d 0-3 1 1 Rx Flit Buffer Allocations - SNP\r\nRxL_INSERTS_NDR 0x0e 0-3 1 1 Rx Flit Buffer Allocations - NDR\r\nRxL_OCCUPANCY_DRS 0x15 0-3 1 128 RxQ Occupancy - DRS\r\nRxL_OCCUPANCY_NCB 0x16 0-3 1 128 RxQ Occupancy - NCB\r\nRxL_OCCUPANCY_NCS 0x17 0-3 1 128 RxQ Occupancy - NCS\r\nRxL_OCCUPANCY_HOM 0x18 0-3 1 128 RxQ Occupancy - HOM\r\nRxL_OCCUPANCY_SNP 0x19 0-3 1 128 RxQ Occupancy - SNP\r\nRxL_OCCUPANCY_NDR 0x1a 0-3 1 128 RxQ Occupancy - NDR\r\nVNA_CREDIT_RETURN_OCCUPANCY 0x1b 0-3 1 128 VNA Credits Pending Return - \r\nOccupancy\r\nVNA_CREDIT_RETURNS 0x1c 0-3 1 1 VNA Credits Returned\r\nRxL_CREDITS_CONSUMED_VNA 0x1d 0-3 1 1 VNA Credit Consumed\r\nRxL_CREDITS_CONSUMED_VN0 0x1e 0-3 1 2 VN0 Credit Consumed\r\nTxR_BL_DRS_CREDIT_OCCUPANCY 0x1f 0-3 1 8 R3QPI Egress Credit Occupancy \r\n- BL DRS\r\nTxR_BL_NCB_CREDIT_OCCUPANCY 0x20 0-3 1 2 R3QPI Egress Credit Occupancy \r\n- BL NCB\r\nTxR_BL_NCS_CREDIT_OCCUPANCY 0x21 0-3 1 2 R3QPI Egress Credit Occupancy \r\n- BL NCS\r\nTxR_AD_HOM_CREDIT_OCCUPANCY 0x22 0-3 1 28 R3QPI Egress Credit Occupancy \r\n- AD HOM\r\nTxR_AD_SNP_CREDIT_OCCUPANCY 0x23 0-3 1 28 R3QPI Egress Credit Occupancy \r\n- AD SNP\r\nTxR_AD_NDR_CREDIT_OCCUPANCY 0x24 0-3 1 8 R3QPI Egress Credit Occupancy \r\n- AD NDR\r\nTxR_AK_NDR_CREDIT_OCCUPANCY 0x25 0-3 1 6 R3QPI Egress Credit Occupancy \r\n- AK NDR\r\nTxR_AD_HOM_CREDIT_ACQUIRED 0x26 0-3 1 1 R3QPI Egress Credit Occupancy \r\n- HOM\r\nTxR_AD_SNP_CREDIT_ACQUIRED 0x27 0-3 1 1 R3QPI Egress Credit Occupancy \r\n- SNP\r\nTxR_AD_NDR_CREDIT_ACQUIRED 0x28 0-3 1 1 R3QPI Egress Credit Occupancy \r\n- AD NDR\r\nSymbol Name Event \r\nCode Ctrs\r\nExtra \r\nSelect \r\nBit\r\nMax \r\nInc/\r\nCyc\r\nDescription",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/8a990ce9-0420-4a42-9304-9bbb9fc0da22.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2dfc61a54b505280c9469a18a91ca3c2aed8e995e4843a77f1a1adffabc385d5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 379
      },
      {
        "segments": [
          {
            "segment_id": "10f5fb67-93bb-45db-a155-e9fdeb89922a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 147,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 141\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n2.8.6 QPI LL Box Common Metrics (Derived Events)\r\nThe following table summarizes metrics commonly calculated from QPI LL Box events.\r\nTxR_AK_NDR_CREDIT_ACQUIRED 0x29 0-3 1 1 R3QPI Egress Credit Occupancy \r\n- AK NDR\r\nTxR_BL_DRS_CREDIT_ACQUIRED 0x2a 0-3 1 1 R3QPI Egress Credit Occupancy \r\n- DRS\r\nTxR_BL_NCB_CREDIT_ACQUIRED 0x2b 0-3 1 1 R3QPI Egress Credit Occupancy \r\n- NCB\r\nTxR_BL_NCS_CREDIT_ACQUIRED 0x2c 0-3 1 1 R3QPI Egress Credit Occupancy \r\n- NCS\r\nCTO_COUNT 0x38 0-3 1 2 Count of CTO Events\r\nRxL_CREDITS_CONSUMED_VN1 0x39 0-3 1 2 VN1 Credit Consumed\r\nSymbol Name:\r\n Definition Equation\r\nDATA_FROM_QPI:\r\n Data received from QPI in bytes ( = DRS + \r\nNCB Data messages received from QPI)\r\nDRS_DATA_MSGS_FROM_QPI + \r\nNCB_DATA_MSGS_FROM_QPI\r\nDATA_FROM_QPI_TO_HA_OR_IIO:\r\n Data received from QPI forwarded to HA or \r\nIIO. Expressed in Bytes\r\nDATA_FROM_QPI - DATA_FROM_QPI_TO_LLC\r\nDATA_FROM_QPI_TO_LLC:\r\n Data received from QPI forwarded to LLC. \r\nExpressed in Bytes\r\nDIRECT2CORE.SUCCESS * 64\r\nDATA_FROM_QPI_TO_NODEx:\r\n Data packets received from QPI sent to \r\nNode ID 'x'. Expressed in bytes\r\nDRS_DataC_FROM_QPI_TO_NODEx + \r\nDRS_WRITE_FROM_QPI_TO_NODEx + \r\nNCB_DATA_FROM_QPI_TO_NODEx\r\nDRS_DATA_MSGS_FROM_QPI:\r\n DRS Data Messages From QPI in bytes\r\n(RxL_FLITS_G1.DRS_DATA * 8)\r\nDRS_DataC_FROM_QPI_TO_NODEx:\r\n DRS DataC packets received from QPI sent \r\nto Node ID 'x'. Expressed in bytes\r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0{[12:0],dnid}={0\r\nx1C00,x}, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[17:0]=0x3FF80}) * 64\r\nDRS_DataC_M_FROM_QPI:\r\n DRS DataC_F packets received from QPI. \r\nExpressed in bytes\r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0[12:0]=0x1C00, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[12:0]=0x1FE0}, \r\nQ_Py_PCI_PMON_PKT_z_MATCH1[19:16]=0x1, \r\nQ_Py_PCI_PMON_PKT_z_MASK1[19:16]=0xF}) * 64\r\nDRS_FULL_CACHELINE_MSGS_FROM_QPI:\r\n DRS Full Cacheline Data Messages From \r\nQPI in bytes\r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0[12:0]=0x1C00,Q\r\n_Py_PCI_PMON_PKT_z_MASK0[12:0]=0x1F00}) * 64)\r\nSymbol Name Event \r\nCode Ctrs\r\nExtra \r\nSelect \r\nBit\r\nMax \r\nInc/\r\nCyc\r\nDescription",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/10f5fb67-93bb-45db-a155-e9fdeb89922a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d88ffcea3eb1442ac990473c390f8734c02d222a338e3acb9a1cef8937b93798",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f800f973-51b0-4030-8c49-adfd724175ed",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 148,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n142 Reference Number: 329468-002\r\nDRS_F_OR_E_FROM_QPI:\r\n DRS response in F or E states received from \r\nQPI in bytes. To calculate the total data \r\nresponse for each cache line state, it's \r\nnecessary to add the contribution from three \r\nflavors {DataC, DataC_FrcAckCnflt, \r\nDataC_Cmp} of data response packets for \r\neach cache line state.\r\n((CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0[12:0]=0x1C00, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[12:0]=0x1FE0, \r\nQ_Py_PCI_PMON_PKT_z_MATCH1[19:16]=0x4, \r\nQ_Py_PCI_PMON_PKT_z_MASK1[19:16]=0xF}) + \r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0[12:0]=0x1C00, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[12:0]=0x1FE0, \r\nQ_Py_PCI_PMON_PKT_z_MATCH1[19:16]=0x1, \r\nQ_Py_PCI_PMON_PKT_z_MASK1[19:16]=0xF}) + \r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0[12:0]=0x1C40, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[12:0]=0x1FE0, \r\nQ_Py_PCI_PMON_PKT_z_MATCH1[19:16]=0x4, \r\nQ_Py_PCI_PMON_PKT_z_MASK1[19:16]=0xF}) + \r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0[12:0]=0x1C40, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[12:0]=0x1FE0, \r\nQ_Py_PCI_PMON_PKT_z_MATCH1[19:16]=0x1, \r\nQ_Py_PCI_PMON_PKT_z_MASK1[19:16]=0xF}) + \r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0[12:0]=0x1C20, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[12:0]=0x1FE0, \r\nQ_Py_PCI_PMON_PKT_z_MATCH1[19:16]=0x4, \r\nQ_Py_PCI_PMON_PKT_z_MASK1[19:16]=0xF}) + \r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0[12:0]=0x1C20, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[12:0]=0x1FE0, \r\nQ_Py_PCI_PMON_PKT_z_MATCH1[19:16]=0x1, \r\nQ_Py_PCI_PMON_PKT_z_MASK1[19:16]=0xF})) * 64\r\nDRS_M_FROM_QPI:\r\n DRS response in M state received from QPI \r\nin bytes\r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0[12:0]=0x1C00, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[12:0]=0x1FE0, \r\nQ_Py_PCI_PMON_PKT_z_MATCH1[19:16]=0x8, \r\nQ_Py_PCI_PMON_PKT_z_MASK1[19:16]=0xF}) * 64\r\nDRS_PTL_CACHELINE_MSGS_FROM_QPI:\r\n DRS Partial Cacheline Data Messages From \r\nQPI in bytes\r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0[12:0]=0x1D00, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[12:0]=0x1F00}) * 64\r\nDRS_WB_FROM_QPI:\r\n DRS writeback packets received from QPI in \r\nbytes. This is the sum of Wb{I,S,E} DRS \r\npackets\r\nDRS_WbI_FROM_QPI + DRS_WbS_FROM_QPI + \r\nDRS_WbE_FROM_QPI\r\nDRS_WRITE_FROM_QPI_TO_NODEx:\r\n DRS Data packets (Any - DataC) received \r\nfrom QPI sent to Node ID 'x'. Expressed in \r\nbytes\r\n((CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0{[12:0],dnid}={0\r\nx1C00,x}, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[17:0]=0x3FE00}) - \r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0{[12:0],dnid}={0\r\nx1C00,x}, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[17:0]=0x3FF80})) * 64\r\nDRS_WbE_FROM_QPI:\r\n DRS writeback 'change to E state' packets \r\nreceived from QPI in bytes\r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0[12:0]=0x1CC0, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[12:0]=0x1FE0}) * 64\r\nDRS_WbI_FROM_QPI:\r\n DRS writeback 'change to I state' packets \r\nreceived from QPI in bytes\r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0[12:0]=0x1C80, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[12:0]=0x1FE0}) * 64\r\nDRS_WbS_FROM_QPI:\r\n DRS writeback 'change to S state' packets \r\nreceived from QPI in bytes\r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0[12:0]=0x1CA0, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[12:0]=0x1FE0}) * 64\r\nNCB_DATA_FROM_QPI_TO_NODEx:\r\n NCB Data packets (Any - Interrupts) \r\nreceived from QPI sent to Node ID 'x'. \r\nExpressed in bytes\r\n((CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0{[12:0],dnid}={0\r\nx1800,x}, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[17:0]=0x3FE00}) - \r\n(CTO_COUNT \r\nwith:{Q_Py_PCI_PMON_PKT_z_MATCH0{[12:0],dnid}={0\r\nx1900,x}, \r\nQ_Py_PCI_PMON_PKT_z_MASK0[17:0]=0x3FF80})) * 64\r\nSymbol Name:\r\n Definition Equation",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/f800f973-51b0-4030-8c49-adfd724175ed.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ddfabdc5d7f16282d2364fb60ff21fe10f337fdbd306614eb38b82fbaa71c9f9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 510
      },
      {
        "segments": [
          {
            "segment_id": "feacda50-f05e-4081-86c8-708bf9618733",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 149,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 143\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n2.8.7 QPI LL Box Performance Monitor Event List\r\nThe section enumerates performance monitoring events for the QPI LL Box.\r\nCLOCKTICKS\r\n• Title: Number of qfclks\r\n• Category: CFCLK Events\r\n• Event Code: 0x14\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of clocks in the QPI LL. This clock runs at 1/8th the “GT/s” speed \r\nof the QPI link. For example, a 8GT/s link will have qfclk or 1GHz. The prior generation uncore in \r\nIntel Xeon processor E5-2600 Product Family does not support dynamic link speeds, so this fre\u0002quency is fixed.\r\nCTO_COUNT\r\n• Title: Count of CTO Events\r\n• Category: CTO Events\r\n• Event Code: 0x38\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Filter Dependency: QPIMask0[17:0],QPIMatch0[17:0],QPIMask1[19:16],QPIMatch1[19:16]\r\n• Definition: Counts the number of CTO (cluster trigger outs) events that were asserted across the \r\ntwo slots. If both slots trigger in a given cycle, the event will increment by 2. You can use edge \r\ndetect to count the number of cases when both events triggered.\r\nNCB_DATA_MSGS_FROM_QPI:\r\n NCB Data Messages From QPI in bytes\r\n(RxL_FLITS_G2.NCB_DATA * 8)\r\nPCT_LINK_CRC_RETRY_CYCLES:\r\n Percent of Cycles the QPI link layer is in \r\nretry mode due to CRC errors\r\nRxL_CRC_CYCLES_IN_LLR / CLOCKTICKS\r\nPCT_LINK_FULL_POWER_CYCLES:\r\n Percent of Cycles the QPI link is at Full \r\nPower\r\nRxL0_POWER_CYCLES / CLOCKTICKS\r\nPCT_LINK_HALF_DISABLED_CYCLES:\r\n Percent of Cycles the QPI link in power \r\nmode where half of the lanes are disabled.\r\nRxL0P_POWER_CYCLES / CLOCKTICKS\r\nPCT_LINK_SHUTDOWN_CYCLES:\r\n Percent of Cycles the QPI link is Shutdown\r\nL1_POWER_CYCLES / CLOCKTICKS\r\nQPI_DATA_BW:\r\n QPI data transmit bandwidth in Bytes\r\nTxL_FLITS_G0.DATA * 8\r\nQPI_LINK_BW:\r\n QPI total transmit bandwidth in Bytes \r\n(includes control)\r\n(TxL_FLITS_G0.DATA + TxL_FLITS_G0.NON_DATA) * 8\r\nQPI_LINK_UTIL:\r\n Percentage of cycles that QPI Link was \r\nutilized. Calculated from 1 - Number of idle \r\nflits - time the link was 'off'\r\n(RxL_FLITS_G0.DATA + RxL_FLITS_G0.NON_DATA) / (2 * \r\nCLOCKTICKS)\r\nQPI_SPEED:\r\n QPI Speed - In GT/s (GigaTransfers / \r\nSecond) - Max QPI Bandwidth is 2 * ROUND \r\n(QPI Speed, 0)\r\nROUND ((CLOCKTICKS / TSC) * TSC_SPEED, 0) * (8 / \r\n1000)\r\nSymbol Name:\r\n Definition Equation",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/feacda50-f05e-4081-86c8-708bf9618733.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fccd7922f7d6f47a13338cb1588000f36d401f77b041c4b430b1259751f2154a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 351
      },
      {
        "segments": [
          {
            "segment_id": "a76162a5-991c-4019-8dd6-3afe140938ff",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 150,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n144 Reference Number: 329468-002\r\nDIRECT2CORE\r\n• Title: Direct 2 Core Spawning\r\n• Category: DIRECT2CORE Events\r\n• Event Code: 0x13\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of DRS packets that we attempted to do direct2core on. There are \r\n4 mutually exclusive filters. Filter [0] can be used to get successful spawns, while [1:3] provide the \r\ndifferent failure cases. Note that this does not count packets that are not candidates for \r\nDirect2Core. The only candidates for Direct2Core are DRS packets destined for Cbos.\r\nL1_POWER_CYCLES\r\n• Title: Cycles in L1\r\n• Category: POWER Events\r\n• Event Code: 0x12\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of QPI qfclk cycles spent in L1 power mode. L1 is a mode that totally shuts \r\ndown a QPI link. Use edge detect to count the number of instances when the QPI link entered L1. \r\nLink power states are per link and per direction, so for example the Tx direction could be in one \r\nstate while Rx was in another. Because L1 totally shuts down the link, it takes a good amount of \r\ntime to exit this mode.\r\nTable 2-139. Unit Masks for DIRECT2CORE\r\nExtension umask\r\n[15:8] Description\r\nSUCCESS_RBT_HIT bxxxxxxx1 Spawn Success\r\nThe spawn was successful. There were sufficient credits, the RBT \r\nvalid bit was set and there was an RBT tag match. The message was \r\nmarked to spawn direct2core.\r\nFAILURE_CREDITS bxxxxxx1x Spawn Failure - Egress Credits\r\nThe spawn failed because there were not enough Egress credits. Had \r\nthere been enough credits, the spawn would have worked as the RBT \r\nbit was set and the RBT tag matched.\r\nFAILURE_RBT_HIT bxxxxx1xx Spawn Failure - RBT Invalid\r\nThe spawn failed because the route-back table (RBT) specified that \r\nthe transaction should not trigger a direct2core transaction. This is \r\ncommon for IO transactions. There were enough Egress credits and \r\nthe RBT tag matched but the valid bit was not set.\r\nFAILURE_CREDITS_RBT bxxxx1xxx Spawn Failure - Egress and RBT Invalid\r\nThe spawn failed because there were not enough Egress credits AND \r\nthe RBT bit was not set, but the RBT tag matched.\r\nFAILURE_MISS bxxx1xxxx Spawn Failure - RBT Miss\r\nThe spawn failed because the RBT tag did not match although the \r\nvalid bit was set and there were enough Egress credits.\r\nFAILURE_CREDITS_MISS bxx1xxxxx Spawn Failure - Egress and RBT Miss\r\nThe spawn failed because the RBT tag did not match and there \r\nweren't enough Egress credits. The valid bit was set.\r\nFAILURE_RBT_MISS bx1xxxxxx Spawn Failure - RBT Miss and Invalid\r\nThe spawn failed because the RBT tag did not match and the valid bit \r\nwas not set although there were enough Egress credits.\r\nFAILURE_CREDITS_RBT_\r\nMISS\r\nb1xxxxxxx Spawn Failure - Egress and RBT Miss, Invalid\r\nThe spawn failed because the RBT tag did not match, the valid bit \r\nwas not set and there weren't enough Egress credits.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/a76162a5-991c-4019-8dd6-3afe140938ff.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=78a2281cb3c258f1fcef7ddd7a74b11b324c514702c0703c1570c0bd9bf433a2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 481
      },
      {
        "segments": [
          {
            "segment_id": "3b34e0bd-1823-4bd4-9bed-5cfc23841ce1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 151,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 145\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nRxL0P_POWER_CYCLES\r\n• Title: Cycles in L0p\r\n• Category: POWER_RX Events\r\n• Event Code: 0x10\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of QPI qfclk cycles spent in L0p power mode. L0p is a mode where we disable \r\n1/2 of the QPI lanes, decreasing our bandwidth in order to save power. It increases snoop and \r\ndata transfer latencies and decreases overall bandwidth. This mode can be very useful in NUMA \r\noptimized workloads that largely only utilize QPI for snoops and their responses. Use edge detect \r\nto count the number of instances when the QPI link entered L0p. Link power states are per link \r\nand per direction, so for example the Tx direction could be in one state while Rx was in another.\r\n• NOTE: Using .edge_det to count transitions does not function if L1_POWER_CYCLES > 0.\r\nRxL0_POWER_CYCLES\r\n• Title: Cycles in L0\r\n• Category: POWER_RX Events\r\n• Event Code: 0x0f\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of QPI qfclk cycles spent in L0 power mode in the Link Layer. L0 is the default \r\nmode which provides the highest performance with the most power. Use edge detect to count the \r\nnumber of instances that the link entered L0. Link power states are per link and per direction, so \r\nfor example the Tx direction could be in one state while Rx was in another. The phy layer some\u0002times leaves L0 for training, which will not be captured by this event.\r\n• NOTE: Includes L0p cycles. To get just L0, subtract RxL0P_POWER_CYCLES.\r\nRxL_BYPASSED\r\n• Title: Rx Flit Buffer Bypassed\r\n• Category: RXQ Events\r\n• Event Code: 0x09\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of times that an incoming flit was able to bypass the flit buffer \r\nand pass directly across the BGF and into the Egress. This is a latency optimization, and should \r\ngenerally be the common case. If this value is less than the number of flits transferred, it implies \r\nthat there was queueing getting onto the ring, and thus the transactions saw higher latency.\r\nRxL_CREDITS_CONSUMED_VN0\r\n• Title: VN0 Credit Consumed\r\n• Category: RX_CREDITS_CONSUMED Events\r\n• Event Code: 0x1e\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of times that an RxQ VN0 credit was consumed (i.e. message \r\nuses a VN0 credit for the Rx Buffer). This includes packets that went through the RxQ and those \r\nthat were bypasssed.\r\nTable 2-140. Unit Masks for RxL_CREDITS_CONSUMED_VN0\r\nExtension umask\r\n[15:8] Description\r\nDRS bxxxxxxx1 DRS\r\nVN0 credit for the DRS message class.\r\nNCB bxxxxxx1x NCB\r\nVN0 credit for the NCB message class.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/3b34e0bd-1823-4bd4-9bed-5cfc23841ce1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6b058dc0f90ccee3a5a2c01ec1c0f17a4eeb21f6f7266b3739829ba78f4af63a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 451
      },
      {
        "segments": [
          {
            "segment_id": "5f9c1a5c-2475-4965-8b4c-a41fa031fc7f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 152,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n146 Reference Number: 329468-002\r\nRxL_CREDITS_CONSUMED_VN1\r\n• Title: VN1 Credit Consumed\r\n• Category: RX_CREDITS_CONSUMED Events\r\n• Event Code: 0x39\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of times that an RxQ VN1 credit was consumed (i.e. message uses \r\na VN1 credit for the Rx Buffer). This includes packets that went through the RxQ and those that \r\nwere bypasssed.\r\nRxL_CREDITS_CONSUMED_VNA\r\n• Title: VNA Credit Consumed\r\n• Category: RX_CREDITS_CONSUMED Events\r\n• Event Code: 0x1d\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of times that an RxQ VNA credit was consumed (i.e. message uses \r\na VNA credit for the Rx Buffer). This includes packets that went through the RxQ and those that \r\nwere bypasssed.\r\nNCS bxxxxx1xx NCS\r\nVN0 credit for the NCS message class.\r\nHOM bxxxx1xxx HOM\r\nVN0 credit for the HOM message class.\r\nSNP bxxx1xxxx SNP\r\nVN0 credit for the SNP message class.\r\nNDR bxx1xxxxx NDR\r\nVN0 credit for the NDR message class.\r\nTable 2-141. Unit Masks for RxL_CREDITS_CONSUMED_VN1\r\nExtension umask\r\n[15:8] Description\r\nDRS bxxxxxxx1 DRS\r\nVN1 credit for the DRS message class.\r\nNCB bxxxxxx1x NCB\r\nVN1 credit for the NCB message class.\r\nNCS bxxxxx1xx NCS\r\nVN1 credit for the NCS message class.\r\nHOM bxxxx1xxx HOM\r\nVN1 credit for the HOM message class.\r\nSNP bxxx1xxxx SNP\r\nVN1 credit for the SNP message class.\r\nNDR bxx1xxxxx NDR\r\nVN1 credit for the NDR message class.\r\nTable 2-140. Unit Masks for RxL_CREDITS_CONSUMED_VN0\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/5f9c1a5c-2475-4965-8b4c-a41fa031fc7f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1a867616e301b74015d2c8c94b006a5531e2b216907a8b9a2194c3d731c92dbc",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 259
      },
      {
        "segments": [
          {
            "segment_id": "6e95afe8-f59b-40b6-a8dc-18f157c9a7c1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 153,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 147\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nRxL_CYCLES_NE\r\n• Title: RxQ Cycles Not Empty\r\n• Category: RXQ Events\r\n• Event Code: 0x0a\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles that the QPI RxQ was not empty. Generally, when data is \r\ntransmitted across QPI, it will bypass the RxQ and pass directly to the ring interface. If things \r\nback up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus \r\nincreasing the latency. This event can be used in conjunction with the Flit Buffer Occupancy Accu\u0002mulator event to calculate the average occupancy.\r\nRxL_FLITS_G0\r\n• Title: Flits Received - Group 0\r\n• Category: FLITS_RX Events\r\n• Event Code: 0x01\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of flits received from the QPI Link. It includes filters for Idle, pro\u0002tocol, and Data Flits. Each “flit” is made up of 80 bits of information (in addition to some ECC \r\ndata). In full-width (L0) mode, flits are made up of four “fits”, each of which contains 20 bits of \r\ndata (along with some additional ECC data). In half-width (L0p) mode, the fits are only 10 bits, \r\nand therefore it takes twice as many fits to transmit a flit. When one talks about QPI “speed” (for \r\nexample, 8.0 GT/s), the “transfers” here refer to “fits”. Therefore, in L0, the system will transfer 1 \r\n“flit” at the rate of 1/4th the QPI speed. One can calculate the bandwidth of the link by taking: \r\nflits*80b/time. Note that this is not the same as “data” bandwidth. For example, when we are \r\ntransferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information \r\nand 8 with 64 bits of actual “data” and an additional 16 bits of other information. To calculate \r\n“data” bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for \r\nL0p.\r\nTable 2-142. Unit Masks for RxL_FLITS_G0\r\nExtension umask\r\n[15:8] Description\r\nIDLE b00000001 Idle and Null Flits\r\nNumber of flits received over QPI that do not hold protocol \r\npayload. When QPI is not in a power saving state, it \r\ncontinuously transmits flits across the link. When there are no \r\nprotocol flits to send, it will send IDLE and NULL flits across. \r\nThese flits sometimes do carry a payload, such as credit returns, \r\nbut are general not considered part of the QPI bandwidth.\r\nDATA b00000010 Data Tx Flits\r\nNumber of data flits received over QPI. Each flit contains 64b of \r\ndata. This includes both DRS and NCB data flits (coherent and \r\nnon-coherent). This can be used to calculate the data bandwidth \r\nof the QPI link. One can get a good picture of the QPI-link \r\ncharacteristics by evaluating the protocol flits, data flits, and \r\nidle/null flits. This does not include the header flits that go in \r\ndata packets.\r\nNON_DATA b00000100 Non-Data protocol Tx Flits\r\nNumber of non-NULL non-data flits received across QPI. This \r\nbasically tracks the protocol overhead on the QPI link. One can \r\nget a good picture of the QPI-link characteristics by evaluating \r\nthe protocol flits, data flits, and idle/null flits. This includes the \r\nheader flits for data packets.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/6e95afe8-f59b-40b6-a8dc-18f157c9a7c1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=806039f3d279d432277e473348ebf7e2123705d9c0a1a40b0c82c1560670a1ef",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 539
      },
      {
        "segments": [
          {
            "segment_id": "6e95afe8-f59b-40b6-a8dc-18f157c9a7c1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 153,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 147\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nRxL_CYCLES_NE\r\n• Title: RxQ Cycles Not Empty\r\n• Category: RXQ Events\r\n• Event Code: 0x0a\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles that the QPI RxQ was not empty. Generally, when data is \r\ntransmitted across QPI, it will bypass the RxQ and pass directly to the ring interface. If things \r\nback up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus \r\nincreasing the latency. This event can be used in conjunction with the Flit Buffer Occupancy Accu\u0002mulator event to calculate the average occupancy.\r\nRxL_FLITS_G0\r\n• Title: Flits Received - Group 0\r\n• Category: FLITS_RX Events\r\n• Event Code: 0x01\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of flits received from the QPI Link. It includes filters for Idle, pro\u0002tocol, and Data Flits. Each “flit” is made up of 80 bits of information (in addition to some ECC \r\ndata). In full-width (L0) mode, flits are made up of four “fits”, each of which contains 20 bits of \r\ndata (along with some additional ECC data). In half-width (L0p) mode, the fits are only 10 bits, \r\nand therefore it takes twice as many fits to transmit a flit. When one talks about QPI “speed” (for \r\nexample, 8.0 GT/s), the “transfers” here refer to “fits”. Therefore, in L0, the system will transfer 1 \r\n“flit” at the rate of 1/4th the QPI speed. One can calculate the bandwidth of the link by taking: \r\nflits*80b/time. Note that this is not the same as “data” bandwidth. For example, when we are \r\ntransferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information \r\nand 8 with 64 bits of actual “data” and an additional 16 bits of other information. To calculate \r\n“data” bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for \r\nL0p.\r\nTable 2-142. Unit Masks for RxL_FLITS_G0\r\nExtension umask\r\n[15:8] Description\r\nIDLE b00000001 Idle and Null Flits\r\nNumber of flits received over QPI that do not hold protocol \r\npayload. When QPI is not in a power saving state, it \r\ncontinuously transmits flits across the link. When there are no \r\nprotocol flits to send, it will send IDLE and NULL flits across. \r\nThese flits sometimes do carry a payload, such as credit returns, \r\nbut are general not considered part of the QPI bandwidth.\r\nDATA b00000010 Data Tx Flits\r\nNumber of data flits received over QPI. Each flit contains 64b of \r\ndata. This includes both DRS and NCB data flits (coherent and \r\nnon-coherent). This can be used to calculate the data bandwidth \r\nof the QPI link. One can get a good picture of the QPI-link \r\ncharacteristics by evaluating the protocol flits, data flits, and \r\nidle/null flits. This does not include the header flits that go in \r\ndata packets.\r\nNON_DATA b00000100 Non-Data protocol Tx Flits\r\nNumber of non-NULL non-data flits received across QPI. This \r\nbasically tracks the protocol overhead on the QPI link. One can \r\nget a good picture of the QPI-link characteristics by evaluating \r\nthe protocol flits, data flits, and idle/null flits. This includes the \r\nheader flits for data packets.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/6e95afe8-f59b-40b6-a8dc-18f157c9a7c1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=806039f3d279d432277e473348ebf7e2123705d9c0a1a40b0c82c1560670a1ef",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 539
      },
      {
        "segments": [
          {
            "segment_id": "deb436d7-503f-4d5e-ac85-ff9d273c4058",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 154,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n148 Reference Number: 329468-002\r\nRxL_FLITS_G1\r\n• Title: Flits Received - Group 1\r\n• Category: FLITS_RX Events\r\n• Event Code: 0x02\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of flits received from the QPI Link. This is one of three “groups” \r\nthat allow us to track flits. It includes filters for SNP, HOM, and DRS message classes. Each “flit” is \r\nmade up of 80 bits of information (in addition to some ECC data). In full-width (L0) mode, flits are \r\nmade up of four “fits”, each of which contains 20 bits of data (along with some additional ECC data). \r\nIn half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to \r\ntransmit a flit. When one talks about QPI “speed” (for example, 8.0 GT/s), the “transfers” here refer \r\nto “fits”. Therefore, in L0, the system will transfer 1 “flit” at the rate of 1/4th the QPI speed. One \r\ncan calculate the bandwidth of the link by taking: flits*80b/time. Note that this is not the same as \r\n“data” bandwidth. For example, when we are transferring a 64B cacheline across QPI, we will break \r\nit into 9 flits -- 1 with header information and 8 with 64 bits of actual “data” and an additional 16 \r\nbits of other information. To calculate “data” bandwidth, one should therefore do: data flits * 8B / \r\ntime.\r\nTable 2-143. Unit Masks for RxL_FLITS_G1\r\nExtension umask\r\n[15:8] Description\r\nSNP b00000001 SNP Flits\r\nCounts the number of snoop request flits received over QPI. These \r\nrequests are contained in the snoop channel. This does not include \r\nsnoop responses, which are received on the home channel.\r\nHOM_REQ b00000010 HOM Request Flits\r\nCounts the number of data request received over QPI on the home \r\nchannel. This basically counts the number of remote memory \r\nrequests received over QPI. In conjunction with the local read count \r\nin the Home Agent, one can calculate the number of LLC Misses.\r\nHOM_NONREQ b00000100 HOM Non-Request Flits\r\nCounts the number of non-request flits received over QPI on the \r\nhome channel. These are most commonly snoop responses, and this \r\nevent can be used as a proxy for that.\r\nHOM b00000110 HOM Flits\r\nCounts the number of flits received over QPI on the home channel.\r\nDRS_DATA b00001000 DRS Data Flits\r\nCounts the total number of data flits received over QPI on the DRS \r\n(Data Response) channel. DRS flits are used to transmit data with \r\ncoherency. This does not count data flits received over the NCB \r\nchannel which transmits non-coherent data. This includes only the \r\ndata flits (not the header).\r\nDRS_NONDATA b00010000 DRS Header Flits\r\nCounts the total number of protocol flits received over QPI on the \r\nDRS (Data Response) channel. DRS flits are used to transmit data \r\nwith coherency. This does not count data flits received over the NCB \r\nchannel which transmits non-coherent data. This includes only the \r\nheader flits (not the data). This includes extended headers.\r\nDRS b00011000 DRS Flits (both Header and Data)\r\nCounts the total number of flits received over QPI on the DRS (Data \r\nResponse) channel. DRS flits are used to transmit data with \r\ncoherency. This does not count data flits received over the NCB \r\nchannel which transmits non-coherent data.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/deb436d7-503f-4d5e-ac85-ff9d273c4058.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4f704ed8869480bc76948bd26e26d645f0f7915ea6722ddfdeda80d243fff9d5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 549
      },
      {
        "segments": [
          {
            "segment_id": "deb436d7-503f-4d5e-ac85-ff9d273c4058",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 154,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n148 Reference Number: 329468-002\r\nRxL_FLITS_G1\r\n• Title: Flits Received - Group 1\r\n• Category: FLITS_RX Events\r\n• Event Code: 0x02\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of flits received from the QPI Link. This is one of three “groups” \r\nthat allow us to track flits. It includes filters for SNP, HOM, and DRS message classes. Each “flit” is \r\nmade up of 80 bits of information (in addition to some ECC data). In full-width (L0) mode, flits are \r\nmade up of four “fits”, each of which contains 20 bits of data (along with some additional ECC data). \r\nIn half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to \r\ntransmit a flit. When one talks about QPI “speed” (for example, 8.0 GT/s), the “transfers” here refer \r\nto “fits”. Therefore, in L0, the system will transfer 1 “flit” at the rate of 1/4th the QPI speed. One \r\ncan calculate the bandwidth of the link by taking: flits*80b/time. Note that this is not the same as \r\n“data” bandwidth. For example, when we are transferring a 64B cacheline across QPI, we will break \r\nit into 9 flits -- 1 with header information and 8 with 64 bits of actual “data” and an additional 16 \r\nbits of other information. To calculate “data” bandwidth, one should therefore do: data flits * 8B / \r\ntime.\r\nTable 2-143. Unit Masks for RxL_FLITS_G1\r\nExtension umask\r\n[15:8] Description\r\nSNP b00000001 SNP Flits\r\nCounts the number of snoop request flits received over QPI. These \r\nrequests are contained in the snoop channel. This does not include \r\nsnoop responses, which are received on the home channel.\r\nHOM_REQ b00000010 HOM Request Flits\r\nCounts the number of data request received over QPI on the home \r\nchannel. This basically counts the number of remote memory \r\nrequests received over QPI. In conjunction with the local read count \r\nin the Home Agent, one can calculate the number of LLC Misses.\r\nHOM_NONREQ b00000100 HOM Non-Request Flits\r\nCounts the number of non-request flits received over QPI on the \r\nhome channel. These are most commonly snoop responses, and this \r\nevent can be used as a proxy for that.\r\nHOM b00000110 HOM Flits\r\nCounts the number of flits received over QPI on the home channel.\r\nDRS_DATA b00001000 DRS Data Flits\r\nCounts the total number of data flits received over QPI on the DRS \r\n(Data Response) channel. DRS flits are used to transmit data with \r\ncoherency. This does not count data flits received over the NCB \r\nchannel which transmits non-coherent data. This includes only the \r\ndata flits (not the header).\r\nDRS_NONDATA b00010000 DRS Header Flits\r\nCounts the total number of protocol flits received over QPI on the \r\nDRS (Data Response) channel. DRS flits are used to transmit data \r\nwith coherency. This does not count data flits received over the NCB \r\nchannel which transmits non-coherent data. This includes only the \r\nheader flits (not the data). This includes extended headers.\r\nDRS b00011000 DRS Flits (both Header and Data)\r\nCounts the total number of flits received over QPI on the DRS (Data \r\nResponse) channel. DRS flits are used to transmit data with \r\ncoherency. This does not count data flits received over the NCB \r\nchannel which transmits non-coherent data.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/deb436d7-503f-4d5e-ac85-ff9d273c4058.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4f704ed8869480bc76948bd26e26d645f0f7915ea6722ddfdeda80d243fff9d5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 549
      },
      {
        "segments": [
          {
            "segment_id": "afffd575-cada-4649-81af-c099fa154375",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 155,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 149\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nRxL_FLITS_G2\r\n• Title: Flits Received - Group 2\r\n• Category: FLITS_RX Events\r\n• Event Code: 0x03\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of flits received from the QPI Link. This is one of three “groups” \r\nthat allow us to track flits. It includes filters for NDR, NCB, and NCS message classes. Each “flit” is \r\nmade up of 80 bits of information (in addition to some ECC data). In full-width (L0) mode, flits are \r\nmade up of four “fits”, each of which contains 20 bits of data (along with some additional ECC \r\ndata). In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many \r\nfits to transmit a flit. When one talks about QPI “speed” (for example, 8.0 GT/s), the “transfers” \r\nhere refer to “fits”. Therefore, in L0, the system will transfer 1 “flit” at the rate of 1/4th the QPI \r\nspeed. One can calculate the bandwidth of the link by taking: flits*80b/time. Note that this is not \r\nthe same as “data” bandwidth. For example, when we are transferring a 64B cacheline across QPI, \r\nwe will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual “data” and an \r\nadditional 16 bits of other information. To calculate “data” bandwidth, one should therefore do: \r\ndata flits * 8B / time.\r\nRxL_INSERTS\r\n• Title: Rx Flit Buffer Allocations\r\n• Category: RXQ Events\r\n• Event Code: 0x08\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of allocations into the QPI Rx Flit Buffer. Generally, when data is transmitted \r\nacross QPI, it will bypass the RxQ and pass directly to the ring interface. If things back up getting \r\ntransmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the \r\nlatency. This event can be used in conjunction with the Flit Buffer Occupancy event in order to cal\u0002culate the average flit buffer lifetime.\r\nTable 2-144. Unit Masks for RxL_FLITS_G2\r\nExtension umask\r\n[15:8] Description\r\nNDR_AD b00000001 Non-Data Response Rx Flits - AD\r\nCounts the total number of flits received over the NDR (Non\u0002Data Response) channel. This channel is used to send a variety \r\nof protocol flits including grants and completions. This is only for \r\nNDR packets to the local socket which use the AK ring.\r\nNDR_AK b00000010 Non-Data Response Rx Flits - AK\r\nCounts the total number of flits received over the NDR (Non\u0002Data Response) channel. This channel is used to send a variety \r\nof protocol flits including grants and completions. This is only for \r\nNDR packets destined for Route-thru to a remote socket.\r\nNCB_DATA b00000100 Non-Coherent data Rx Flits\r\nNumber of Non-Coherent Bypass data flits. These flits are \r\ngenerally used to transmit non-coherent data across QPI. This \r\ndoes not include a count of the DRS (coherent) data flits. This \r\nonly counts the data flits, not the NCB headers.\r\nNCB_NONDATA b00001000 Non-Coherent non-data Rx Flits\r\nNumber of Non-Coherent Bypass non-data flits. These packets \r\nare generally used to transmit non-coherent data across QPI, \r\nand the flits counted here are for headers and other non-data \r\nflits. This includes extended headers.\r\nNCB b00001100 Non-Coherent Rx Flits\r\nNumber of Non-Coherent Bypass flits. These packets are \r\ngenerally used to transmit non-coherent data across QPI.\r\nNCS b00010000 Non-Coherent standard Rx Flits\r\nNumber of NCS (non-coherent standard) flits received over QPI. \r\nThis includes extended headers.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/afffd575-cada-4649-81af-c099fa154375.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f15f350965d8c58c0b08eed60f037d04168fcaffcfaf55f43088f70de526f17a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 575
      },
      {
        "segments": [
          {
            "segment_id": "afffd575-cada-4649-81af-c099fa154375",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 155,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 149\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nRxL_FLITS_G2\r\n• Title: Flits Received - Group 2\r\n• Category: FLITS_RX Events\r\n• Event Code: 0x03\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of flits received from the QPI Link. This is one of three “groups” \r\nthat allow us to track flits. It includes filters for NDR, NCB, and NCS message classes. Each “flit” is \r\nmade up of 80 bits of information (in addition to some ECC data). In full-width (L0) mode, flits are \r\nmade up of four “fits”, each of which contains 20 bits of data (along with some additional ECC \r\ndata). In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many \r\nfits to transmit a flit. When one talks about QPI “speed” (for example, 8.0 GT/s), the “transfers” \r\nhere refer to “fits”. Therefore, in L0, the system will transfer 1 “flit” at the rate of 1/4th the QPI \r\nspeed. One can calculate the bandwidth of the link by taking: flits*80b/time. Note that this is not \r\nthe same as “data” bandwidth. For example, when we are transferring a 64B cacheline across QPI, \r\nwe will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual “data” and an \r\nadditional 16 bits of other information. To calculate “data” bandwidth, one should therefore do: \r\ndata flits * 8B / time.\r\nRxL_INSERTS\r\n• Title: Rx Flit Buffer Allocations\r\n• Category: RXQ Events\r\n• Event Code: 0x08\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of allocations into the QPI Rx Flit Buffer. Generally, when data is transmitted \r\nacross QPI, it will bypass the RxQ and pass directly to the ring interface. If things back up getting \r\ntransmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the \r\nlatency. This event can be used in conjunction with the Flit Buffer Occupancy event in order to cal\u0002culate the average flit buffer lifetime.\r\nTable 2-144. Unit Masks for RxL_FLITS_G2\r\nExtension umask\r\n[15:8] Description\r\nNDR_AD b00000001 Non-Data Response Rx Flits - AD\r\nCounts the total number of flits received over the NDR (Non\u0002Data Response) channel. This channel is used to send a variety \r\nof protocol flits including grants and completions. This is only for \r\nNDR packets to the local socket which use the AK ring.\r\nNDR_AK b00000010 Non-Data Response Rx Flits - AK\r\nCounts the total number of flits received over the NDR (Non\u0002Data Response) channel. This channel is used to send a variety \r\nof protocol flits including grants and completions. This is only for \r\nNDR packets destined for Route-thru to a remote socket.\r\nNCB_DATA b00000100 Non-Coherent data Rx Flits\r\nNumber of Non-Coherent Bypass data flits. These flits are \r\ngenerally used to transmit non-coherent data across QPI. This \r\ndoes not include a count of the DRS (coherent) data flits. This \r\nonly counts the data flits, not the NCB headers.\r\nNCB_NONDATA b00001000 Non-Coherent non-data Rx Flits\r\nNumber of Non-Coherent Bypass non-data flits. These packets \r\nare generally used to transmit non-coherent data across QPI, \r\nand the flits counted here are for headers and other non-data \r\nflits. This includes extended headers.\r\nNCB b00001100 Non-Coherent Rx Flits\r\nNumber of Non-Coherent Bypass flits. These packets are \r\ngenerally used to transmit non-coherent data across QPI.\r\nNCS b00010000 Non-Coherent standard Rx Flits\r\nNumber of NCS (non-coherent standard) flits received over QPI. \r\nThis includes extended headers.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/afffd575-cada-4649-81af-c099fa154375.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f15f350965d8c58c0b08eed60f037d04168fcaffcfaf55f43088f70de526f17a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 575
      },
      {
        "segments": [
          {
            "segment_id": "ced70166-1e74-43c5-a235-029d581f66ee",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 156,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n150 Reference Number: 329468-002\r\nRxL_INSERTS_DRS\r\n• Title: Rx Flit Buffer Allocations - DRS\r\n• Category: RXQ Events\r\n• Event Code: 0x09\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of allocations into the QPI Rx Flit Buffer. Generally, when data is transmitted \r\nacross QPI, it will bypass the RxQ and pass directly to the ring interface. If things back up getting \r\ntransmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the \r\nlatency. This event can be used in conjunction with the Flit Buffer Occupancy event in order to cal\u0002culate the average flit buffer lifetime. This monitors only DRS flits.\r\nRxL_INSERTS_HOM\r\n• Title: Rx Flit Buffer Allocations - HOM\r\n• Category: RXQ Events\r\n• Event Code: 0x0c\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of allocations into the QPI Rx Flit Buffer. Generally, when data is transmitted \r\nacross QPI, it will bypass the RxQ and pass directly to the ring interface. If things back up getting \r\ntransmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the \r\nlatency. This event can be used in conjunction with the Flit Buffer Occupancy event in order to cal\u0002culate the average flit buffer lifetime. This monitors only HOM flits.\r\nRxL_INSERTS_NCB\r\n• Title: Rx Flit Buffer Allocations - NCB\r\n• Category: RXQ Events\r\n• Event Code: 0x0a\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of allocations into the QPI Rx Flit Buffer. Generally, when data is transmitted \r\nacross QPI, it will bypass the RxQ and pass directly to the ring interface. If things back up getting \r\ntransmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the \r\nlatency. This event can be used in conjunction with the Flit Buffer Occupancy event in order to cal\u0002culate the average flit buffer lifetime. This monitors only NCB flits.\r\nTable 2-145. Unit Masks for RxL_INSERTS_DRS\r\nExtension umask\r\n[15:8] Description\r\nVN0 bxxxxxxx1 for VN0\r\nVN1 bxxxxxx1x for VN1\r\nTable 2-146. Unit Masks for RxL_INSERTS_HOM\r\nExtension umask\r\n[15:8] Description\r\nVN0 bxxxxxxx1 for VN0\r\nVN1 bxxxxxx1x for VN1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ced70166-1e74-43c5-a235-029d581f66ee.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=044af31dffb79e997f1a3a84e846183ac7c16958f73e94a665b523ca4776774c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 373
      },
      {
        "segments": [
          {
            "segment_id": "c2e81951-e4d8-4a13-b157-9ab1a095c2a0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 157,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 151\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nRxL_INSERTS_NCS\r\n• Title: Rx Flit Buffer Allocations - NCS\r\n• Category: RXQ Events\r\n• Event Code: 0x0b\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of allocations into the QPI Rx Flit Buffer. Generally, when data is transmitted \r\nacross QPI, it will bypass the RxQ and pass directly to the ring interface. If things back up getting \r\ntransmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the \r\nlatency. This event can be used in conjunction with the Flit Buffer Occupancy event in order to cal\u0002culate the average flit buffer lifetime. This monitors only NCS flits.\r\nRxL_INSERTS_NDR\r\n• Title: Rx Flit Buffer Allocations - NDR\r\n• Category: RXQ Events\r\n• Event Code: 0x0e\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of allocations into the QPI Rx Flit Buffer. Generally, when data is transmitted \r\nacross QPI, it will bypass the RxQ and pass directly to the ring interface. If things back up getting \r\ntransmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the \r\nlatency. This event can be used in conjunction with the Flit Buffer Occupancy event in order to cal\u0002culate the average flit buffer lifetime. This monitors only NDR flits.\r\nRxL_INSERTS_SNP\r\n• Title: Rx Flit Buffer Allocations - SNP\r\n• Category: RXQ Events\r\n• Event Code: 0x0d\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\nTable 2-147. Unit Masks for RxL_INSERTS_NCB\r\nExtension umask\r\n[15:8] Description\r\nVN0 bxxxxxxx1 for VN0\r\nVN1 bxxxxxx1x for VN1\r\nTable 2-148. Unit Masks for RxL_INSERTS_NCS\r\nExtension umask\r\n[15:8] Description\r\nVN0 bxxxxxxx1 for VN0\r\nVN1 bxxxxxx1x for VN1\r\nTable 2-149. Unit Masks for RxL_INSERTS_NDR\r\nExtension umask\r\n[15:8] Description\r\nVN0 bxxxxxxx1 for VN0\r\nVN1 bxxxxxx1x for VN1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/c2e81951-e4d8-4a13-b157-9ab1a095c2a0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=81d898e38262ba89e34c1c1c5f0c08708fd1f17ccb37f8d483f811717092e000",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 312
      },
      {
        "segments": [
          {
            "segment_id": "6af05055-2c04-441d-b77f-aca1f9fd7822",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 158,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n152 Reference Number: 329468-002\r\n• Definition: Number of allocations into the QPI Rx Flit Buffer. Generally, when data is transmitted \r\nacross QPI, it will bypass the RxQ and pass directly to the ring interface. If things back up getting \r\ntransmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the \r\nlatency. This event can be used in conjunction with the Flit Buffer Occupancy event in order to cal\u0002culate the average flit buffer lifetime. This monitors only SNP flits.\r\nRxL_OCCUPANCY\r\n• Title: RxQ Occupancy - All Packets\r\n• Category: RXQ Events\r\n• Event Code: 0x0b\r\n• Max. Inc/Cyc:. 128, Register Restrictions: 0-3\r\n• Definition: Accumulates the number of elements in the QPI RxQ in each cycle. Generally, when \r\ndata is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface. If \r\nthings back up getting transmitted onto the ring, however, it may need to allocate into this buffer, \r\nthus increasing the latency. This event can be used in conjunction with the Flit Buffer Not Empty \r\nevent to calculate average occupancy, or with the Flit Buffer Allocations event to track average life\u0002time.\r\nRxL_OCCUPANCY_DRS\r\n• Title: RxQ Occupancy - DRS\r\n• Category: RXQ Events\r\n• Event Code: 0x15\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 128, Register Restrictions: 0-3\r\n• Definition: Accumulates the number of elements in the QPI RxQ in each cycle. Generally, when \r\ndata is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface. If \r\nthings back up getting transmitted onto the ring, however, it may need to allocate into this buffer, \r\nthus increasing the latency. This event can be used in conjunction with the Flit Buffer Not Empty \r\nevent to calculate average occupancy, or with the Flit Buffer Allocations event to track average life\u0002time. This monitors DRS flits only.\r\nRxL_OCCUPANCY_HOM\r\n• Title: RxQ Occupancy - HOM\r\n• Category: RXQ Events\r\n• Event Code: 0x18\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 128, Register Restrictions: 0-3\r\n• Definition: Accumulates the number of elements in the QPI RxQ in each cycle. Generally, when \r\ndata is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface. If \r\nthings back up getting transmitted onto the ring, however, it may need to allocate into this buffer, \r\nthus increasing the latency. This event can be used in conjunction with the Flit Buffer Not Empty \r\nTable 2-150. Unit Masks for RxL_INSERTS_SNP\r\nExtension umask\r\n[15:8] Description\r\nVN0 bxxxxxxx1 for VN0\r\nVN1 bxxxxxx1x for VN1\r\nTable 2-151. Unit Masks for RxL_OCCUPANCY_DRS\r\nExtension umask\r\n[15:8] Description\r\nVN0 bxxxxxxx1 for VN0\r\nVN1 bxxxxxx1x for VN1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/6af05055-2c04-441d-b77f-aca1f9fd7822.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4700b66b0fe066fe33da156d6a75c687ca5f98afc4c785341b24a0221dd2656c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 446
      },
      {
        "segments": [
          {
            "segment_id": "f1d399ab-29ff-459a-bf24-34c93fe285ef",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 159,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 153\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nevent to calculate average occupancy, or with the Flit Buffer Allocations event to track average \r\nlifetime. This monitors HOM flits only.\r\nRxL_OCCUPANCY_NCB\r\n• Title: RxQ Occupancy - NCB\r\n• Category: RXQ Events\r\n• Event Code: 0x16\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 128, Register Restrictions: 0-3\r\n• Definition: Accumulates the number of elements in the QPI RxQ in each cycle. Generally, when \r\ndata is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface. If \r\nthings back up getting transmitted onto the ring, however, it may need to allocate into this buffer, \r\nthus increasing the latency. This event can be used in conjunction with the Flit Buffer Not Empty \r\nevent to calculate average occupancy, or with the Flit Buffer Allocations event to track average \r\nlifetime. This monitors NCB flits only.\r\nRxL_OCCUPANCY_NCS\r\n• Title: RxQ Occupancy - NCS\r\n• Category: RXQ Events\r\n• Event Code: 0x17\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 128, Register Restrictions: 0-3\r\n• Definition: Accumulates the number of elements in the QPI RxQ in each cycle. Generally, when \r\ndata is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface. If \r\nthings back up getting transmitted onto the ring, however, it may need to allocate into this buffer, \r\nthus increasing the latency. This event can be used in conjunction with the Flit Buffer Not Empty \r\nevent to calculate average occupancy, or with the Flit Buffer Allocations event to track average \r\nlifetime. This monitors NCS flits only.\r\nTable 2-152. Unit Masks for RxL_OCCUPANCY_HOM\r\nExtension umask\r\n[15:8] Description\r\nVN0 bxxxxxxx1 for VN0\r\nVN1 bxxxxxx1x for VN1\r\nTable 2-153. Unit Masks for RxL_OCCUPANCY_NCB\r\nExtension umask\r\n[15:8] Description\r\nVN0 bxxxxxxx1 for VN0\r\nVN1 bxxxxxx1x for VN1\r\nTable 2-154. Unit Masks for RxL_OCCUPANCY_NCS\r\nExtension umask\r\n[15:8] Description\r\nVN0 bxxxxxxx1 for VN0\r\nVN1 bxxxxxx1x for VN1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/f1d399ab-29ff-459a-bf24-34c93fe285ef.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c3591d8b75cbb8d273eae99fb47b911b5bdb8027c3b91b31b8b99c72c0a4ac8a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 320
      },
      {
        "segments": [
          {
            "segment_id": "ddd0aec1-a587-4bd7-88a0-f00dc4e8b559",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 160,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n154 Reference Number: 329468-002\r\nRxL_OCCUPANCY_NDR\r\n• Title: RxQ Occupancy - NDR\r\n• Category: RXQ Events\r\n• Event Code: 0x1a\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 128, Register Restrictions: 0-3\r\n• Definition: Accumulates the number of elements in the QPI RxQ in each cycle. Generally, when \r\ndata is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface. If \r\nthings back up getting transmitted onto the ring, however, it may need to allocate into this buffer, \r\nthus increasing the latency. This event can be used in conjunction with the Flit Buffer Not Empty \r\nevent to calculate average occupancy, or with the Flit Buffer Allocations event to track average life\u0002time. This monitors NDR flits only.\r\nRxL_OCCUPANCY_SNP\r\n• Title: RxQ Occupancy - SNP\r\n• Category: RXQ Events\r\n• Event Code: 0x19\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 128, Register Restrictions: 0-3\r\n• Definition: Accumulates the number of elements in the QPI RxQ in each cycle. Generally, when \r\ndata is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface. If \r\nthings back up getting transmitted onto the ring, however, it may need to allocate into this buffer, \r\nthus increasing the latency. This event can be used in conjunction with the Flit Buffer Not Empty \r\nevent to calculate average occupancy, or with the Flit Buffer Allocations event to track average life\u0002time. This monitors SNP flits only.\r\nTxL0P_POWER_CYCLES\r\n• Title: Cycles in L0p\r\n• Category: POWER_TX Events\r\n• Event Code: 0x0d\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of QPI qfclk cycles spent in L0p power mode. L0p is a mode where we disable \r\n1/2 of the QPI lanes, decreasing our bandwidth in order to save power. It increases snoop and data \r\ntransfer latencies and decreases overall bandwidth. This mode can be very useful in NUMA opti\u0002mized workloads that largely only utilize QPI for snoops and their responses. Use edge detect to \r\ncount the number of instances when the QPI link entered L0p. Link power states are per link and \r\nper direction, so for example the Tx direction could be in one state while Rx was in another.\r\n• NOTE: Using .edge_det to count transitions does not function if L1_POWER_CYCLES > 0.\r\nTable 2-155. Unit Masks for RxL_OCCUPANCY_NDR\r\nExtension umask\r\n[15:8] Description\r\nVN0 bxxxxxxx1 for VN0\r\nVN1 bxxxxxx1x for VN1\r\nTable 2-156. Unit Masks for RxL_OCCUPANCY_SNP\r\nExtension umask\r\n[15:8] Description\r\nVN0 bxxxxxxx1 for VN0\r\nVN1 bxxxxxx1x for VN1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ddd0aec1-a587-4bd7-88a0-f00dc4e8b559.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7f3acef66fe7cdcd27c44cc3c35ccad5840a4d17f369a7f5f6bcd3752da14a00",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 419
      },
      {
        "segments": [
          {
            "segment_id": "eabdadc9-fcbc-4e80-9238-c4c0e23705b4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 161,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 155\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nTxL0_POWER_CYCLES\r\n• Title: Cycles in L0\r\n• Category: POWER_TX Events\r\n• Event Code: 0x0c\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of QPI qfclk cycles spent in L0 power mode in the Link Layer. L0 is the default \r\nmode which provides the highest performance with the most power. Use edge detect to count the \r\nnumber of instances that the link entered L0. Link power states are per link and per direction, so \r\nfor example the Tx direction could be in one state while Rx was in another. The phy layer some\u0002times leaves L0 for training, which will not be captured by this event.\r\n• NOTE: Includes L0p cycles. To get just L0, subtract TxL0P_POWER_CYCLES.\r\nTxL_BYPASSED\r\n• Title: Tx Flit Buffer Bypassed\r\n• Category: TXQ Events\r\n• Event Code: 0x05\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of times that an incoming flit was able to bypass the Tx flit buffer \r\nand pass directly out the QPI Link. Generally, when data is transmitted across QPI, it will bypass \r\nthe TxQ and pass directly to the link. However, the TxQ will be used with L0p and when LLR \r\noccurs, increasing latency to transfer out to the link.\r\nTxL_CYCLES_NE\r\n• Title: Tx Flit Buffer Cycles not Empty\r\n• Category: TXQ Events\r\n• Event Code: 0x06\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when the TxQ is not empty. Generally, when data is \r\ntransmitted across QPI, it will bypass the TxQ and pass directly to the link. However, the TxQ will \r\nbe used with L0p and when LLR occurs, increasing latency to transfer out to the link.\r\nTxL_FLITS_G0\r\n• Title: Flits Transferred - Group 0\r\n• Category: FLITS_TX Events\r\n• Event Code: 0x00\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of flits transmitted across the QPI Link. It includes filters for Idle, \r\nprotocol, and Data Flits. Each “flit” is made up of 80 bits of information (in addition to some ECC \r\ndata). In full-width (L0) mode, flits are made up of four “fits”, each of which contains 20 bits of \r\ndata (along with some additional ECC data). In half-width (L0p) mode, the fits are only 10 bits, \r\nand therefore it takes twice as many fits to transmit a flit. When one talks about QPI “speed” (for \r\nexample, 8.0 GT/s), the “transfers” here refer to “fits”. Therefore, in L0, the system will transfer 1 \r\n“flit” at the rate of 1/4th the QPI speed. One can calculate the bandwidth of the link by taking: \r\nflits*80b/time. Note that this is not the same as “data” bandwidth. For example, when we are \r\ntransferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information \r\nand 8 with 64 bits of actual “data” and an additional 16 bits of other information. To calculate \r\n“data” bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for \r\nL0p.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/eabdadc9-fcbc-4e80-9238-c4c0e23705b4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4b582f2e73a531dc213974d858a9aa8b764188540212f69af4049d5774d94814",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 514
      },
      {
        "segments": [
          {
            "segment_id": "eabdadc9-fcbc-4e80-9238-c4c0e23705b4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 161,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 155\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nTxL0_POWER_CYCLES\r\n• Title: Cycles in L0\r\n• Category: POWER_TX Events\r\n• Event Code: 0x0c\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of QPI qfclk cycles spent in L0 power mode in the Link Layer. L0 is the default \r\nmode which provides the highest performance with the most power. Use edge detect to count the \r\nnumber of instances that the link entered L0. Link power states are per link and per direction, so \r\nfor example the Tx direction could be in one state while Rx was in another. The phy layer some\u0002times leaves L0 for training, which will not be captured by this event.\r\n• NOTE: Includes L0p cycles. To get just L0, subtract TxL0P_POWER_CYCLES.\r\nTxL_BYPASSED\r\n• Title: Tx Flit Buffer Bypassed\r\n• Category: TXQ Events\r\n• Event Code: 0x05\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of times that an incoming flit was able to bypass the Tx flit buffer \r\nand pass directly out the QPI Link. Generally, when data is transmitted across QPI, it will bypass \r\nthe TxQ and pass directly to the link. However, the TxQ will be used with L0p and when LLR \r\noccurs, increasing latency to transfer out to the link.\r\nTxL_CYCLES_NE\r\n• Title: Tx Flit Buffer Cycles not Empty\r\n• Category: TXQ Events\r\n• Event Code: 0x06\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles when the TxQ is not empty. Generally, when data is \r\ntransmitted across QPI, it will bypass the TxQ and pass directly to the link. However, the TxQ will \r\nbe used with L0p and when LLR occurs, increasing latency to transfer out to the link.\r\nTxL_FLITS_G0\r\n• Title: Flits Transferred - Group 0\r\n• Category: FLITS_TX Events\r\n• Event Code: 0x00\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of flits transmitted across the QPI Link. It includes filters for Idle, \r\nprotocol, and Data Flits. Each “flit” is made up of 80 bits of information (in addition to some ECC \r\ndata). In full-width (L0) mode, flits are made up of four “fits”, each of which contains 20 bits of \r\ndata (along with some additional ECC data). In half-width (L0p) mode, the fits are only 10 bits, \r\nand therefore it takes twice as many fits to transmit a flit. When one talks about QPI “speed” (for \r\nexample, 8.0 GT/s), the “transfers” here refer to “fits”. Therefore, in L0, the system will transfer 1 \r\n“flit” at the rate of 1/4th the QPI speed. One can calculate the bandwidth of the link by taking: \r\nflits*80b/time. Note that this is not the same as “data” bandwidth. For example, when we are \r\ntransferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information \r\nand 8 with 64 bits of actual “data” and an additional 16 bits of other information. To calculate \r\n“data” bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for \r\nL0p.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/eabdadc9-fcbc-4e80-9238-c4c0e23705b4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4b582f2e73a531dc213974d858a9aa8b764188540212f69af4049d5774d94814",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 514
      },
      {
        "segments": [
          {
            "segment_id": "ba0587c9-f5be-46df-9deb-bc302fd48ca3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 162,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n156 Reference Number: 329468-002\r\nTxL_FLITS_G1\r\n• Title: Flits Transferred - Group 1\r\n• Category: FLITS_TX Events\r\n• Event Code: 0x00\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of flits transmitted across the QPI Link. This is one of three \r\n“groups” that allow us to track flits. It includes filters for SNP, HOM, and DRS message classes. Each \r\n“flit” is made up of 80 bits of information (in addition to some ECC data). In full-width (L0) mode, \r\nflits are made up of four “fits”, each of which contains 20 bits of data (along with some additional \r\nECC data). In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many \r\nfits to transmit a flit. When one talks about QPI “speed” (for example, 8.0 GT/s), the “transfers” \r\nhere refer to “fits”. Therefore, in L0, the system will transfer 1 “flit” at the rate of 1/4th the QPI \r\nspeed. One can calculate the bandwidth of the link by taking: flits*80b/time. Note that this is not \r\nthe same as “data” bandwidth. For example, when we are transferring a 64B cacheline across QPI, \r\nwe will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual “data” and an \r\nadditional 16 bits of other information. To calculate “data” bandwidth, one should therefore do: data \r\nflits * 8B / time.\r\nTable 2-157. Unit Masks for TxL_FLITS_G0\r\nExtension umask\r\n[15:8] Description\r\nDATA b00000010 Data Tx Flits\r\nNumber of data flits transmitted over QPI. Each flit contains 64b of \r\ndata. This includes both DRS and NCB data flits (coherent and non\u0002coherent). This can be used to calculate the data bandwidth of the \r\nQPI link. One can get a good picture of the QPI-link characteristics by \r\nevaluating the protocol flits, data flits, and idle/null flits. This does \r\nnot include the header flits that go in data packets.\r\nNON_DATA b00000100 Non-Data protocol Tx Flits\r\nNumber of non-NULL non-data flits transmitted across QPI. This \r\nbasically tracks the protocol overhead on the QPI link. One can get a \r\ngood picture of the QPI-link characteristics by evaluating the protocol \r\nflits, data flits, and idle/null flits. This includes the header flits for \r\ndata packets.\r\nTable 2-158. Unit Masks for TxL_FLITS_G1\r\nExtension umask\r\n[15:8] Description\r\nSNP b00000001 SNP Flits\r\nCounts the number of snoop request flits transmitted over QPI. \r\nThese requests are contained in the snoop channel. This does \r\nnot include snoop responses, which are transmitted on the home \r\nchannel.\r\nHOM_REQ b00000010 HOM Request Flits\r\nCounts the number of data request transmitted over QPI on the \r\nhome channel. This basically counts the number of remote \r\nmemory requests transmitted over QPI. In conjunction with the \r\nlocal read count in the Home Agent, one can calculate the \r\nnumber of LLC Misses.\r\nHOM_NONREQ b00000100 HOM Non-Request Flits\r\nCounts the number of non-request flits transmitted over QPI on \r\nthe home channel. These are most commonly snoop responses, \r\nand this event can be used as a proxy for that.\r\nHOM b00000110 HOM Flits\r\nCounts the number of flits transmitted over QPI on the home \r\nchannel.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ba0587c9-f5be-46df-9deb-bc302fd48ca3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0adbfc8dc9a4224d64be6d3dac4f136bc59ef953cb1ace002aabf0f5ae18e4d5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 526
      },
      {
        "segments": [
          {
            "segment_id": "ba0587c9-f5be-46df-9deb-bc302fd48ca3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 162,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n156 Reference Number: 329468-002\r\nTxL_FLITS_G1\r\n• Title: Flits Transferred - Group 1\r\n• Category: FLITS_TX Events\r\n• Event Code: 0x00\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of flits transmitted across the QPI Link. This is one of three \r\n“groups” that allow us to track flits. It includes filters for SNP, HOM, and DRS message classes. Each \r\n“flit” is made up of 80 bits of information (in addition to some ECC data). In full-width (L0) mode, \r\nflits are made up of four “fits”, each of which contains 20 bits of data (along with some additional \r\nECC data). In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many \r\nfits to transmit a flit. When one talks about QPI “speed” (for example, 8.0 GT/s), the “transfers” \r\nhere refer to “fits”. Therefore, in L0, the system will transfer 1 “flit” at the rate of 1/4th the QPI \r\nspeed. One can calculate the bandwidth of the link by taking: flits*80b/time. Note that this is not \r\nthe same as “data” bandwidth. For example, when we are transferring a 64B cacheline across QPI, \r\nwe will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual “data” and an \r\nadditional 16 bits of other information. To calculate “data” bandwidth, one should therefore do: data \r\nflits * 8B / time.\r\nTable 2-157. Unit Masks for TxL_FLITS_G0\r\nExtension umask\r\n[15:8] Description\r\nDATA b00000010 Data Tx Flits\r\nNumber of data flits transmitted over QPI. Each flit contains 64b of \r\ndata. This includes both DRS and NCB data flits (coherent and non\u0002coherent). This can be used to calculate the data bandwidth of the \r\nQPI link. One can get a good picture of the QPI-link characteristics by \r\nevaluating the protocol flits, data flits, and idle/null flits. This does \r\nnot include the header flits that go in data packets.\r\nNON_DATA b00000100 Non-Data protocol Tx Flits\r\nNumber of non-NULL non-data flits transmitted across QPI. This \r\nbasically tracks the protocol overhead on the QPI link. One can get a \r\ngood picture of the QPI-link characteristics by evaluating the protocol \r\nflits, data flits, and idle/null flits. This includes the header flits for \r\ndata packets.\r\nTable 2-158. Unit Masks for TxL_FLITS_G1\r\nExtension umask\r\n[15:8] Description\r\nSNP b00000001 SNP Flits\r\nCounts the number of snoop request flits transmitted over QPI. \r\nThese requests are contained in the snoop channel. This does \r\nnot include snoop responses, which are transmitted on the home \r\nchannel.\r\nHOM_REQ b00000010 HOM Request Flits\r\nCounts the number of data request transmitted over QPI on the \r\nhome channel. This basically counts the number of remote \r\nmemory requests transmitted over QPI. In conjunction with the \r\nlocal read count in the Home Agent, one can calculate the \r\nnumber of LLC Misses.\r\nHOM_NONREQ b00000100 HOM Non-Request Flits\r\nCounts the number of non-request flits transmitted over QPI on \r\nthe home channel. These are most commonly snoop responses, \r\nand this event can be used as a proxy for that.\r\nHOM b00000110 HOM Flits\r\nCounts the number of flits transmitted over QPI on the home \r\nchannel.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ba0587c9-f5be-46df-9deb-bc302fd48ca3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0adbfc8dc9a4224d64be6d3dac4f136bc59ef953cb1ace002aabf0f5ae18e4d5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 526
      },
      {
        "segments": [
          {
            "segment_id": "7d41559a-7232-40c9-9e5d-7be1ed45c89d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 163,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 157\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nTxL_FLITS_G2\r\n• Title: Flits Transferred - Group 2\r\n• Category: FLITS_TX Events\r\n• Event Code: 0x01\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of flits transmitted across the QPI Link. This is one of three \r\n“groups” that allow us to track flits. It includes filters for NDR, NCB, and NCS message classes. \r\nEach “flit” is made up of 80 bits of information (in addition to some ECC data). In full-width (L0) \r\nmode, flits are made up of four “fits”, each of which contains 20 bits of data (along with some \r\nadditional ECC data). In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes \r\ntwice as many fits to transmit a flit. When one talks about QPI “speed” (for example, 8.0 GT/s), \r\nthe “transfers” here refer to “fits”. Therefore, in L0, the system will transfer 1 “flit” at the rate of \r\n1/4th the QPI speed. One can calculate the bandwidth of the link by taking: flits*80b/time. Note \r\nthat this is not the same as “data” bandwidth. For example, when we are transferring a 64B cach\u0002eline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of \r\nactual “data” and an additional 16 bits of other information. To calculate “data” bandwidth, one \r\nshould therefore do: data flits * 8B / time.\r\nDRS_DATA b00001000 DRS Data Flits\r\nCounts the total number of data flits transmitted over QPI on the \r\nDRS (Data Response) channel. DRS flits are used to transmit \r\ndata with coherency. This does not count data flits transmitted \r\nover the NCB channel which transmits non-coherent data. This \r\nincludes only the data flits (not the header).\r\nDRS_NONDATA b00010000 DRS Header Flits\r\nCounts the total number of protocol flits transmitted over QPI on \r\nthe DRS (Data Response) channel. DRS flits are used to transmit \r\ndata with coherency. This does not count data flits transmitted \r\nover the NCB channel which transmits non-coherent data. This \r\nincludes only the header flits (not the data). This includes \r\nextended headers.\r\nDRS b00011000 DRS Flits (both Header and Data)\r\nCounts the total number of flits transmitted over QPI on the DRS \r\n(Data Response) channel. DRS flits are used to transmit data \r\nwith coherency.\r\nTable 2-159. Unit Masks for TxL_FLITS_G2\r\nExtension umask\r\n[15:8] Description\r\nNDR_AD b00000001 Non-Data Response Tx Flits - AD\r\nCounts the total number of flits transmitted over the NDR (Non\u0002Data Response) channel. This channel is used to send a variety \r\nof protocol flits including grants and completions. This is only for \r\nNDR packets to the local socket which use the AK ring.\r\nNDR_AK b00000010 Non-Data Response Tx Flits - AK\r\nCounts the total number of flits transmitted over the NDR (Non\u0002Data Response) channel. This channel is used to send a variety \r\nof protocol flits including grants and completions. This is only for \r\nNDR packets destined for Route-thru to a remote socket.\r\nNCB_DATA b00000100 Non-Coherent data Tx Flits\r\nNumber of Non-Coherent Bypass data flits. These flits are \r\ngenerally used to transmit non-coherent data across QPI. This \r\ndoes not include a count of the DRS (coherent) data flits. This \r\nonly counts the data flits, not the NCB headers.\r\nTable 2-158. Unit Masks for TxL_FLITS_G1\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/7d41559a-7232-40c9-9e5d-7be1ed45c89d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0045a6ba356d01bf779769559d9c5e4a27edc142a293eb4a019c8dac09a08970",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 554
      },
      {
        "segments": [
          {
            "segment_id": "7d41559a-7232-40c9-9e5d-7be1ed45c89d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 163,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 157\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nTxL_FLITS_G2\r\n• Title: Flits Transferred - Group 2\r\n• Category: FLITS_TX Events\r\n• Event Code: 0x01\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Counts the number of flits transmitted across the QPI Link. This is one of three \r\n“groups” that allow us to track flits. It includes filters for NDR, NCB, and NCS message classes. \r\nEach “flit” is made up of 80 bits of information (in addition to some ECC data). In full-width (L0) \r\nmode, flits are made up of four “fits”, each of which contains 20 bits of data (along with some \r\nadditional ECC data). In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes \r\ntwice as many fits to transmit a flit. When one talks about QPI “speed” (for example, 8.0 GT/s), \r\nthe “transfers” here refer to “fits”. Therefore, in L0, the system will transfer 1 “flit” at the rate of \r\n1/4th the QPI speed. One can calculate the bandwidth of the link by taking: flits*80b/time. Note \r\nthat this is not the same as “data” bandwidth. For example, when we are transferring a 64B cach\u0002eline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of \r\nactual “data” and an additional 16 bits of other information. To calculate “data” bandwidth, one \r\nshould therefore do: data flits * 8B / time.\r\nDRS_DATA b00001000 DRS Data Flits\r\nCounts the total number of data flits transmitted over QPI on the \r\nDRS (Data Response) channel. DRS flits are used to transmit \r\ndata with coherency. This does not count data flits transmitted \r\nover the NCB channel which transmits non-coherent data. This \r\nincludes only the data flits (not the header).\r\nDRS_NONDATA b00010000 DRS Header Flits\r\nCounts the total number of protocol flits transmitted over QPI on \r\nthe DRS (Data Response) channel. DRS flits are used to transmit \r\ndata with coherency. This does not count data flits transmitted \r\nover the NCB channel which transmits non-coherent data. This \r\nincludes only the header flits (not the data). This includes \r\nextended headers.\r\nDRS b00011000 DRS Flits (both Header and Data)\r\nCounts the total number of flits transmitted over QPI on the DRS \r\n(Data Response) channel. DRS flits are used to transmit data \r\nwith coherency.\r\nTable 2-159. Unit Masks for TxL_FLITS_G2\r\nExtension umask\r\n[15:8] Description\r\nNDR_AD b00000001 Non-Data Response Tx Flits - AD\r\nCounts the total number of flits transmitted over the NDR (Non\u0002Data Response) channel. This channel is used to send a variety \r\nof protocol flits including grants and completions. This is only for \r\nNDR packets to the local socket which use the AK ring.\r\nNDR_AK b00000010 Non-Data Response Tx Flits - AK\r\nCounts the total number of flits transmitted over the NDR (Non\u0002Data Response) channel. This channel is used to send a variety \r\nof protocol flits including grants and completions. This is only for \r\nNDR packets destined for Route-thru to a remote socket.\r\nNCB_DATA b00000100 Non-Coherent data Tx Flits\r\nNumber of Non-Coherent Bypass data flits. These flits are \r\ngenerally used to transmit non-coherent data across QPI. This \r\ndoes not include a count of the DRS (coherent) data flits. This \r\nonly counts the data flits, not the NCB headers.\r\nTable 2-158. Unit Masks for TxL_FLITS_G1\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/7d41559a-7232-40c9-9e5d-7be1ed45c89d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0045a6ba356d01bf779769559d9c5e4a27edc142a293eb4a019c8dac09a08970",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 554
      },
      {
        "segments": [
          {
            "segment_id": "af3ea490-3402-403d-a76c-3679beb22c73",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 164,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n158 Reference Number: 329468-002\r\nTxL_INSERTS\r\n• Title: Tx Flit Buffer Allocations\r\n• Category: TXQ Events\r\n• Event Code: 0x04\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of allocations into the QPI Tx Flit Buffer. Generally, when data is transmitted \r\nacross QPI, it will bypass the TxQ and pass directly to the link. However, the TxQ will be used with \r\nL0p and when LLR occurs, increasing latency to transfer out to the link. This event can be used in \r\nconjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.\r\nTxL_OCCUPANCY\r\n• Title: Tx Flit Buffer Occupancy\r\n• Category: TXQ Events\r\n• Event Code: 0x07\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Accumulates the number of flits in the TxQ. Generally, when data is transmitted across \r\nQPI, it will bypass the TxQ and pass directly to the link. However, the TxQ will be used with L0p and \r\nwhen LLR occurs, increasing latency to transfer out to the link. This can be used with the cycles not \r\nempty event to track average occupancy, or the allocations event to track average lifetime in the \r\nTxQ.\r\nTxR_AD_HOM_CREDIT_ACQUIRED\r\n• Title: R3QPI Egress Credit Occupancy - HOM\r\n• Category: R3QPI_EGRESS_CREDITS Events\r\n• Event Code: 0x26\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of link layer credits into the R3 (for transactions across the BGF) acquired each \r\ncycle. Flow Control FIFO for Home messages on AD.\r\nNCB_NONDATA b00001000 Non-Coherent non-data Tx Flits\r\nNumber of Non-Coherent Bypass non-data flits. These packets \r\nare generally used to transmit non-coherent data across QPI, \r\nand the flits counted here are for headers and other non-data \r\nflits. This includes extended headers.\r\nNCB b00001100 Non-Coherent Bypass Tx Flits\r\nNumber of Non-Coherent Bypass flits. These packets are \r\ngenerally used to transmit non-coherent data across QPI.\r\nNCS b00010000 Non-Coherent standard Tx Flits\r\nNumber of NCS (non-coherent standard) flits transmitted over \r\nQPI. This includes extended headers.\r\nTable 2-160. Unit Masks for TxR_AD_HOM_CREDIT_ACQUIRED\r\nExtension umask\r\n[15:8] Description\r\nVN0 b00000001 for VN0\r\nVN1 b00000010 for VN1\r\nTable 2-159. Unit Masks for TxL_FLITS_G2\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/af3ea490-3402-403d-a76c-3679beb22c73.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=21c75bad59cb5a2c7b93d93c55559ce65735ca282c6afbea31355c1d46a13959",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 364
      },
      {
        "segments": [
          {
            "segment_id": "03e174a9-4925-4606-b4e5-dc0b08f5032d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 165,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 159\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nTxR_AD_HOM_CREDIT_OCCUPANCY\r\n• Title: R3QPI Egress Credit Occupancy - AD HOM\r\n• Category: R3QPI_EGRESS_CREDITS Events\r\n• Event Code: 0x22\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 28, Register Restrictions: 0-3\r\n• Definition: Occupancy event that tracks the number of link layer credits into the R3 (for transac\u0002tions across the BGF) available in each cycle. Flow Control FIFO for HOM messages on AD.\r\nTxR_AD_NDR_CREDIT_ACQUIRED\r\n• Title: R3QPI Egress Credit Occupancy - AD NDR\r\n• Category: R3QPI_EGRESS_CREDITS Events\r\n• Event Code: 0x28\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of link layer credits into the R3 (for transactions across the BGF) acquired \r\neach cycle. Flow Control FIFO for NDR messages on AD.\r\nTxR_AD_NDR_CREDIT_OCCUPANCY\r\n• Title: R3QPI Egress Credit Occupancy - AD NDR\r\n• Category: R3QPI_EGRESS_CREDITS Events\r\n• Event Code: 0x24\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 8, Register Restrictions: 0-3\r\n• Definition: Occupancy event that tracks the number of link layer credits into the R3 (for transac\u0002tions across the BGF) available in each cycle. Flow Control FIFO for NDR messages on AD.\r\nTable 2-161. Unit Masks for TxR_AD_HOM_CREDIT_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nVN0 b00000001 for VN0\r\nVN1 b00000010 for VN1\r\nTable 2-162. Unit Masks for TxR_AD_NDR_CREDIT_ACQUIRED\r\nExtension umask\r\n[15:8] Description\r\nVN0 b00000001 for VN0\r\nVN1 b00000010 for VN1\r\nTable 2-163. Unit Masks for TxR_AD_NDR_CREDIT_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nVN0 b00000001 for VN0\r\nVN1 b00000010 for VN1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/03e174a9-4925-4606-b4e5-dc0b08f5032d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f607ea07088a347863c601d0269116af209946d6f6fb39d034c364b08e2199d8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 247
      },
      {
        "segments": [
          {
            "segment_id": "3efacea1-4ded-40e2-8a60-d14903d3ffda",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 166,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n160 Reference Number: 329468-002\r\nTxR_AD_SNP_CREDIT_ACQUIRED\r\n• Title: R3QPI Egress Credit Occupancy - SNP\r\n• Category: R3QPI_EGRESS_CREDITS Events\r\n• Event Code: 0x27\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of link layer credits into the R3 (for transactions across the BGF) acquired each \r\ncycle. Flow Control FIFO for Snoop messages on AD.\r\nTxR_AD_SNP_CREDIT_OCCUPANCY\r\n• Title: R3QPI Egress Credit Occupancy - AD SNP\r\n• Category: R3QPI_EGRESS_CREDITS Events\r\n• Event Code: 0x23\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 28, Register Restrictions: 0-3\r\n• Definition: Occupancy event that tracks the number of link layer credits into the R3 (for transac\u0002tions across the BGF) available in each cycle. Flow Control FIFO fro Snoop messages on AD.\r\nTxR_AK_NDR_CREDIT_ACQUIRED\r\n• Title: R3QPI Egress Credit Occupancy - AK NDR\r\n• Category: R3QPI_EGRESS_CREDITS Events\r\n• Event Code: 0x29\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of credits into the R3 (for transactions across the BGF) acquired each cycle. \r\nLocal NDR message class to AK Egress.\r\nTxR_AK_NDR_CREDIT_OCCUPANCY\r\n• Title: R3QPI Egress Credit Occupancy - AK NDR\r\n• Category: R3QPI_EGRESS_CREDITS Events\r\n• Event Code: 0x25\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 6, Register Restrictions: 0-3\r\n• Definition: Occupancy event that tracks the number of credits into the R3 (for transactions across \r\nthe BGF) available in each cycle. Local NDR message class to AK Egress.\r\nTable 2-164. Unit Masks for TxR_AD_SNP_CREDIT_ACQUIRED\r\nExtension umask\r\n[15:8] Description\r\nVN0 b00000001 for VN0\r\nVN1 b00000010 for VN1\r\nTable 2-165. Unit Masks for TxR_AD_SNP_CREDIT_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nVN0 b00000001 for VN0\r\nVN1 b00000010 for VN1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/3efacea1-4ded-40e2-8a60-d14903d3ffda.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8d713f06bfec2b1138d2c2396ffd900e4c03c91b77883a3c4f89bdcc5d320983",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 278
      },
      {
        "segments": [
          {
            "segment_id": "870fbf7f-38ed-47be-a08e-2611447f5ee4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 167,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 161\r\nUncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\nTxR_BL_DRS_CREDIT_ACQUIRED\r\n• Title: R3QPI Egress Credit Occupancy - DRS\r\n• Category: R3QPI_EGRESS_CREDITS Events\r\n• Event Code: 0x2a\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of credits into the R3 (for transactions across the BGF) acquired each cycle. \r\nDRS message class to BL Egress.\r\nTxR_BL_DRS_CREDIT_OCCUPANCY\r\n• Title: R3QPI Egress Credit Occupancy - BL DRS\r\n• Category: R3QPI_EGRESS_CREDITS Events\r\n• Event Code: 0x1f\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 8, Register Restrictions: 0-3\r\n• Definition: Occupancy event that tracks the number of credits into the R3 (for transactions \r\nacross the BGF) available in each cycle. DRS message class to BL Egress.\r\nTxR_BL_NCB_CREDIT_ACQUIRED\r\n• Title: R3QPI Egress Credit Occupancy - NCB\r\n• Category: R3QPI_EGRESS_CREDITS Events\r\n• Event Code: 0x2b\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of credits into the R3 (for transactions across the BGF) acquired each cycle. \r\nNCB message class to BL Egress.\r\nTable 2-166. Unit Masks for TxR_BL_DRS_CREDIT_ACQUIRED\r\nExtension umask\r\n[15:8] Description\r\nVN0 b00000001 for VN0\r\nVN1 b00000010 for VN1\r\nVN_SHR b00000100 for Shared VN\r\nTable 2-167. Unit Masks for TxR_BL_DRS_CREDIT_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nVN0 b00000001 for VN0\r\nVN1 b00000010 for VN1\r\nVN_SHR b00000100 for Shared VN\r\nTable 2-168. Unit Masks for TxR_BL_NCB_CREDIT_ACQUIRED\r\nExtension umask\r\n[15:8] Description\r\nVN0 b00000001 for VN0\r\nVN1 b00000010 for VN1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/870fbf7f-38ed-47be-a08e-2611447f5ee4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3d39bef85e4aaeb058089aa63acb237e42e2152b7fdc695ce3d467f141fc3e35",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fd616b9d-6155-4bbf-8ed3-75fa395fc43e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 168,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nIntel® QPI Link Layer Performance Monitoring\r\n162 Reference Number: 329468-002\r\nTxR_BL_NCB_CREDIT_OCCUPANCY\r\n• Title: R3QPI Egress Credit Occupancy - BL NCB\r\n• Category: R3QPI_EGRESS_CREDITS Events\r\n• Event Code: 0x20\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Occupancy event that tracks the number of credits into the R3 (for transactions across \r\nthe BGF) available in each cycle. NCB message class to BL Egress.\r\nTxR_BL_NCS_CREDIT_ACQUIRED\r\n• Title: R3QPI Egress Credit Occupancy - NCS\r\n• Category: R3QPI_EGRESS_CREDITS Events\r\n• Event Code: 0x2c\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of credits into the R3 (for transactions across the BGF) acquired each cycle. \r\nNCS message class to BL Egress.\r\nTxR_BL_NCS_CREDIT_OCCUPANCY\r\n• Title: R3QPI Egress Credit Occupancy - BL NCS\r\n• Category: R3QPI_EGRESS_CREDITS Events\r\n• Event Code: 0x21\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 2, Register Restrictions: 0-3\r\n• Definition: Occupancy event that tracks the number of credits into the R3 (for transactions across \r\nthe BGF) available in each cycle. NCS message class to BL Egress.\r\nTable 2-169. Unit Masks for TxR_BL_NCB_CREDIT_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nVN0 b00000001 for VN0\r\nVN1 b00000010 for VN1\r\nTable 2-170. Unit Masks for TxR_BL_NCS_CREDIT_ACQUIRED\r\nExtension umask\r\n[15:8] Description\r\nVN0 b00000001 for VN0\r\nVN1 b00000010 for VN1\r\nTable 2-171. Unit Masks for TxR_BL_NCS_CREDIT_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nVN0 b00000001 for VN0\r\nVN1 b00000010 for VN1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/fd616b9d-6155-4bbf-8ed3-75fa395fc43e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6347d9ed20305d243e34e724e6c436c72ddcf72076b369ee51cc35702a9f0545",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 471
      },
      {
        "segments": [
          {
            "segment_id": "912d7df1-647b-4540-a0df-c9c2b0641271",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 169,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 163\r\nUncore Performance Monitoring\r\nR2PCIe Performance Monitoring\r\nVNA_CREDIT_RETURNS\r\n• Title: VNA Credits Returned\r\n• Category: VNA_CREDIT_RETURN Events\r\n• Event Code: 0x1c\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Number of VNA credits returned.\r\nVNA_CREDIT_RETURN_OCCUPANCY\r\n• Title: VNA Credits Pending Return - Occupancy\r\n• Category: VNA_CREDIT_RETURN Events\r\n• Event Code: 0x1b\r\n• Extra Select Bit: Y\r\n• Max. Inc/Cyc:. 128, Register Restrictions: 0-3\r\n• Definition: Number of VNA credits in the Rx side that are waiting to be returned back across the \r\nlink.\r\n2.9 R2PCIE PERFORMANCE MONITORING\r\n2.9.1 Overview of the R2PCIe Box\r\nR2PCIe represents the interface between the Ring and IIO traffic to/from PCIe.\r\n2.9.2 R2PCIe Performance Monitoring Overview\r\nThe R2PCIe Box supports event monitoring through four 44b wide counters (R2_PCI_PMON_CTR/\r\nCTL{3:0}). Each of these four counters can be programmed to count almost any R2PCIe event (see \r\nNOTE for exceptions). the R2PCIe counters can increment by a maximum of 5b per cycle. \r\nFor information on how to setup a monitoring session, refer to Section 2.1, “Uncore Per-Socket \r\nPerformance Monitoring Control”.\r\nNOTE\r\nOnly counter 0 can be used for tracking occupancy events. Only counters 2&3 can be \r\nused for ring utilization events.\r\n2.9.2.1 R2PCIe PMON Registers - On Overflow and the Consequences (PMI/Freeze)\r\nIf an overflow is detected from an R2PCIe performance counter enabled to communicate its overflow \r\n(R2_PCI_PMON_CTL.ov_en is set to 1), the overflow bit is set at the box level \r\n(R2_PCI_PMON_BOX_STATUS.ov) and an overflow message is sent to the UBox. When the UBox \r\nreceives the overflow signal, U_MSR_PMON_GLOBAL_STATUS.ov_rp is set (see Table 2-3, \r\n“U_MSR_PMON_GLOBAL_STATUS Register – Field Definitions”) and a PMI can be generated.\r\nOnce a freeze has occurred, in order to see a new freeze, the overflow field responsible for the freeze, \r\nmust be cleared by setting the corresponding bit in R2_PCI_PMON_BOX_STATUS.ov and \r\nU_MSR_PMON_GLOBAL_STATU.ov_rp. Assuming all the counters have been locally enabled (.en bit \r\nin data registers meant to monitor events) and the overflow bit(s) has been cleared, the R2PCIe Link \r\nis prepared for a new sample interval. Once the global controls have been re-enabled (Section 2.1.4, \r\n“Enabling a New Sample Interval from Frozen Counters”), counting will resume.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/912d7df1-647b-4540-a0df-c9c2b0641271.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1f3db4e900be206944068a47dd8fa55c32414879c31ae8a1e6fd25e7815407b4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 360
      },
      {
        "segments": [
          {
            "segment_id": "92b3cb2a-ccad-4d30-a187-a965963db1da",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 170,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nR2PCIe Performance Monitoring\r\n164 Reference Number: 329468-002\r\n2.9.3 R2PCIe Performance Monitors\r\nTable 2-172. R2PCIe Performance Monitoring Registers\r\n2.9.3.1 R2PCIe Box Level PMON State\r\nThe following registers represent the state governing all box-level PMUs in the R2PCIe Box. \r\nIn the case of the R2PCIe, the R2_PCI_PMON_BOX_CTL register provides the ability to manually freeze \r\nthe counters in the box (.frz) and reset the generic state (.rst_ctrs and .rst_ctrl).\r\nIf an overflow is detected from one of the R2PCIe PMON registers, the corresponding bit in the \r\nR2_PCI_PMON_BOX_STATUS.ov field will be set. To reset these overflow bits, a user must write a value \r\nof ‘1’ to them (which will clear the bits).\r\nTable 2-173. R2_PCI_PMON_BOX_CTL Register – Field Definitions\r\nU\r\nRegister Name PCICFG \r\nAddress\r\nSize \r\n(bits) Description\r\nPCICFG Base Address Dev:Func\r\nR2PCIe PMON Registers D19:F1\r\nBox-Level Control/Status\r\nR2_PCI_PMON_BOX_STATUS F8 32 R2PCIe PMON Box-Wide Status\r\nR2_PCI_PMON_BOX_CTL F4 32 R2PCIe PMON Box-Wide Control\r\nGeneric Counter Control\r\nR2_PCI_PMON_CTL3 E4 32 R2PCIe PMON Control for Counter 3\r\nR2_PCI_PMON_CTL2 E0 32 R2PCIe PMON Control for Counter 2\r\nR2_PCI_PMON_CTL1 DC 32 R2PCIe PMON Control for Counter 1\r\nR2_PCI_PMON_CTL0 D8 32 R2PCIe PMON Control for Counter 0\r\nGeneric Counters\r\nR2_PCI_PMON_CTR3 BC+B8 32x2 R2PCIe PMON Counter 3\r\nR2_PCI_PMON_CTR2 B4+B0 32x2 R2PCIe PMON Counter 2\r\nR2_PCI_PMON_CTR1 AC+A8 32x2 R2PCIe PMON Counter 1\r\nR2_PCI_PMON_CTR0 A4+A0 32x2 R2PCIe PMON Counter 0\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:9 RV 0 Ignored\r\nfrz 8 WO 0 Freeze. \r\nIf set to 1 the counters in this box will be frozen.\r\nig 7:2 RV 0 Ignored\r\nrst_ctrs 1 WO 0 Reset Counters. \r\nWhen set to 1, the Counter Registers will be reset to 0.\r\nrst_ctrl 0 WO 0 Reset Control. \r\nWhen set to 1, the Counter Control Registers will be reset to \r\n0.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/92b3cb2a-ccad-4d30-a187-a965963db1da.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b3e4166d814b8be817a401dcb947ede7fabb3e72a040711eb9676063fcc9f678",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 290
      },
      {
        "segments": [
          {
            "segment_id": "47800eae-dccc-44c5-81c2-21ccbd1fc584",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 171,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 165\r\nUncore Performance Monitoring\r\nR2PCIe Performance Monitoring\r\nTable 2-174. R2_PCI_PMON_BOX_STATUS Register – Field Definitions\r\n2.9.3.2 R2PCIe PMON state - Counter/Control Pairs\r\nThe following table defines the layout of the R2PCIe performance monitor control registers. The main \r\ntask of these configuration registers is to select the event to be monitored by their respective data \r\ncounter (.ev_sel, .umask). Additional control bits are provided to shape the incoming events (e.g. \r\n.edge_det, .thresh) as well as provide additional functionality for monitoring software (.rst,.ov_en).\r\nTable 2-175. R2_PCI_PMON_CTL{3-0} Register – Field Definitions\r\nThe R2PCIe performance monitor data registers are 44-bit wide. A counter overflow occurs when a \r\ncarry out from bit 43 is detected. Software can force all uncore counting to freeze after N events by \r\npreloading a monitor with a count value of 244 - N and setting the control register to send an overflow \r\nmessage to the UBox (Section 2.1.1.1, “Freezing on Counter Overflow”). During the interval of time \r\nbetween overflow and global disable, the counter value will wrap and continue to collect events. \r\nIf accessible, software can continuously read the data registers without disabling event collection.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:4 RV 0 Ignored\r\nov 3:0 RW1C 0 If an overflow is detected from the corresponding \r\nR2_PCI_PMON_CTR register, it’s overflow bit will be set. \r\nNOTE: Write of ‘1’ will clear the bit.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nthresh 31:24 RW-V 0 Threshold used in counter comparison.\r\nrsv 23 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nen 22 RW-V 0 Local Counter Enable. \r\nrsv 21 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nov_en 20 RW-V 0 When this bit is asserted and the corresponding counter \r\noverflows, its overflow bit is set in the local status register \r\n(R2_PCI_PMON_BOX_STATUS.ov) and an overflow is sent \r\non the message channel to the UBox. When the overflow is \r\nreceived by the UBox, the bit corresponding to this R2 will \r\nbe set in U_MSR_PMON_GLOBAL_STATUS.ov_rp. \r\nig 19 RV 0 Ignored\r\nedge_det 18 RW-V 0 When set to 1, rather than measuring the event in each \r\ncycle it is active, the corresponding counter will increment \r\nwhen a 0 to 1 transition (i.e. rising edge) is detected.\r\nWhen 0, the counter will increment in each cycle that the \r\nevent is asserted.\r\nNOTE: .edge_det is in series following .thresh. Due to this, \r\nthe .thresh field must be set to a non-0 value. For events \r\nthat increment by no more than 1 per cycle, set .thresh to \r\n0x1.\r\nrst 17 WO 0 When set to 1, the corresponding counter will be cleared to \r\n0.\r\nrsv 16 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\numask 15:8 RW-V 0 Select subevents to be counted within the selected event. \r\nev_sel 7:0 RW-V 0 Select event to be counted.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/47800eae-dccc-44c5-81c2-21ccbd1fc584.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3e8d0b5377772fd9f1268f77d9c4700c401a06039403f4928c5851d20a13cd8b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 474
      },
      {
        "segments": [
          {
            "segment_id": "9b8cf274-5c58-4f02-8eb7-ce2793cca6cc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 172,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nR2PCIe Performance Monitoring\r\n166 Reference Number: 329468-002\r\nTable 2-176. R2_PCI_PMON_CTR{3-0} Register – Field Definitions\r\n2.9.4 R2PCIe Performance Monitoring Events\r\n2.9.4.1 An Overview\r\nR2PCIe provides events to track information related to all the traffic passing through it’s boundaries.\r\n• IIO credit tracking - credits rejected, acquired and used all broken down by message Class.\r\n2.9.5 R2PCIe Box Events Ordered By Code\r\nThe following table summarizes the directly measured R2PCIe Box events.\r\n2.9.6 R2PCIe Box Common Metrics (Derived Events)\r\nThe following table summarizes metrics commonly calculated from R2PCIe Box events.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 63:44 RV 0 Ignored\r\nevent_count 43:0 RW-V 0 44-bit performance event counter\r\nSymbol Name Event \r\nCode Ctrs\r\nMax \r\nInc/\r\nCyc\r\nDescription\r\nCLOCKTICKS 0x01 0-3 1 Number of uclks in domain\r\nRING_AD_USED 0x07 0-3 1 R2 AD Ring in Use\r\nRING_AK_USED 0x08 0-3 1 R2 AK Ring in Use\r\nRING_BL_USED 0x09 0-3 1 R2 BL Ring in Use\r\nRING_IV_USED 0x0a 0-3 1 R2 IV Ring in Use\r\nRxR_CYCLES_NE 0x10 0-1 1 Ingress Cycles Not Empty\r\nRxR_INSERTS 0x11 0-1 1 Ingress Allocations\r\nRxR_AK_BOUNCES 0x12 0 1 AK Ingress Bounced\r\nRxR_OCCUPANCY 0x13 0 24 Ingress Occupancy Accumulator\r\nTxR_CYCLES_NE 0x23 0 1 Egress Cycles Not Empty\r\nTxR_CYCLES_FULL 0x25 0 1 Egress Cycles Full\r\nTxR_NACK_CW 0x26 0-1 1 Egress CW NACK\r\nTxR_NACK_CCW 0x28 0-1 1 Egress CCW NACK\r\nSymbol Name:\r\n Definition Equation\r\nCYC_USED_DNEVEN:\r\n Cycles Used in the Down direction, Even \r\npolarity\r\nRING_BL_USED.CCW_EVEN / SAMPLE_INTERVAL\r\nCYC_USED_DNODD:\r\n Cycles Used in the Down direction, Odd \r\npolarity\r\nRING_BL_USED.CCW_ODD / SAMPLE_INTERVAL",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/9b8cf274-5c58-4f02-8eb7-ce2793cca6cc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0c7a2eb55468f2b26193738db20952d5b0f28938d5d88c4e114d3a13b183b1ca",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 250
      },
      {
        "segments": [
          {
            "segment_id": "48f352a4-2fc3-4f42-803b-0e1e7fdaaa38",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 173,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 167\r\nUncore Performance Monitoring\r\nR2PCIe Performance Monitoring\r\n2.9.7 R2PCIe Box Performance Monitor Event List\r\nThe section enumerates performance monitoring events for the R2PCIe Box.\r\nCLOCKTICKS\r\n• Title: Number of uclks in domain\r\n• Category: UCLK Events\r\n• Event Code: 0x01\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of uclks in the R2PCIe uclk domain. This could be slightly different \r\nthan the count in the Ubox because of enable/freeze delays. However, because the R2PCIe is close \r\nto the Ubox, they generally should not diverge by more than a handful of cycles.\r\nRING_AD_USED\r\n• Title: R2 AD Ring in Use\r\n• Category: RING Events\r\n• Event Code: 0x07\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles that the AD ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sunk, but does not include \r\nwhen packets are being sent from the ring stop.\r\n• NOTE: On a 2 column implementation (e.g. 10C) CW_EVEN is actually \r\nCW_VR0_EVEN+CW_VR1_EVEN (similarly for CCW/ODD). In any cycle, a ring stop can see up to \r\none packet moving in the CW direction and one packet moving in the CCW direction.\r\nCYC_USED_UPEVEN:\r\n Cycles Used in the Up direction, Even \r\npolarity\r\nRING_BL_USED.CW_EVEN / SAMPLE_INTERVAL\r\nCYC_USED_UPODD:\r\n Cycles Used in the Up direction, Odd \r\npolarity\r\nRING_BL_USED.CW_ODD / SAMPLE_INTERVAL\r\nRING_THRU_DNEVEN_BYTES:\r\n Ring throughput in the Down direction, \r\nEven polarity in Bytes\r\nRING_BL_USED.CCW_EVEN * 32\r\nRING_THRU_DNODD_BYTES:\r\n Ring throughput in the Down direction, Odd \r\npolarity in Bytes\r\nRING_BL_USED.CCW_ODD * 32\r\nRING_THRU_UPEVEN_BYTES:\r\n Ring throughput in the Up direction, Even \r\npolarity in Bytes\r\nRING_BL_USED.CW_EVEN * 32\r\nRING_THRU_UPODD_BYTES:\r\n Ring throughput in the Up direction, Odd \r\npolarity in Bytes\r\nRING_BL_USED.CW_ODD * 32\r\nTable 2-177. Unit Masks for RING_AD_USED\r\nExtension umask\r\n[15:8] Description\r\nCW_VR0_EVEN bxxxxxxx1 Clockwise and Even on VRing 0\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 0.\r\nCW_VR0_ODD bxxxxxx1x Clockwise and Odd on VRing 0\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 0.\r\nSymbol Name:\r\n Definition Equation",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/48f352a4-2fc3-4f42-803b-0e1e7fdaaa38.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e5a5c8531613bb84754c29f74c60d718c7068895e02f5c4f3b534849f7ce522b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 340
      },
      {
        "segments": [
          {
            "segment_id": "687bdd2f-8b88-436e-b1ed-db7379ccc86c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 174,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nR2PCIe Performance Monitoring\r\n168 Reference Number: 329468-002\r\nRING_AK_USED\r\n• Title: R2 AK Ring in Use\r\n• Category: RING Events\r\n• Event Code: 0x08\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles that the AK ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sunk, but does not include when \r\npackets are being sent from the ring stop.\r\n• NOTE: On a 2 column implementation (e.g. 10C) CW_EVEN is actually \r\nCW_VR0_EVEN+CW_VR1_EVEN (similarly for CCW/ODD). In any cycle, a ring stop can see up to \r\none packet moving in the CW direction and one packet moving in the CCW direction.\r\nCCW_VR0_EVEN bxxxxx1xx Counterclockwise and Even on VRing 0\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 0.\r\nCCW_VR0_ODD bxxxx1xxx Counterclockwise and Odd on VRing 0\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 0.\r\nCW_VR1_EVEN bxxx1xxxx Clockwise and Even on VRing 1\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 1.\r\nCW_VR1_ODD bxx1xxxxx Clockwise and Odd on VRing 1\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 1.\r\nCW b00110011 Clockwise\r\nCCW_VR1_EVEN bx1xxxxxx Counterclockwise and Even on VRing 1\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 1.\r\nCCW_VR1_ODD b1xxxxxxx Counterclockwise and Odd on VRing 1\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 1.\r\nCCW b11001100 Counterclockwise\r\nTable 2-178. Unit Masks for RING_AK_USED\r\nExtension umask\r\n[15:8] Description\r\nCW_VR0_EVEN bxxxxxxx1 Clockwise and Even on VRing 0\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 0.\r\nCW_VR0_ODD bxxxxxx1x Clockwise and Odd on VRing 0\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 0.\r\nCCW_VR0_EVEN bxxxxx1xx Counterclockwise and Even on VRing 0\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 0.\r\nCCW_VR0_ODD bxxxx1xxx Counterclockwise and Odd on VRing 0\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 0.\r\nCW_VR1_EVEN bxxx1xxxx Clockwise and Even on VRing 1\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 1.\r\nCW_VR1_ODD bxx1xxxxx Clockwise and Odd on VRing 1\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 1.\r\nCW b00110011 Clockwise\r\nCCW_VR1_EVEN bx1xxxxxx Counterclockwise and Even on VRing 1\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 1.\r\nTable 2-177. Unit Masks for RING_AD_USED\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/687bdd2f-8b88-436e-b1ed-db7379ccc86c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ee9df5df11867f2bb2e580aab459001a6794d5fa889c3d9e0ac053803eda84d4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 407
      },
      {
        "segments": [
          {
            "segment_id": "7f90433a-e602-460e-b635-ae650f0f12c1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 175,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 169\r\nUncore Performance Monitoring\r\nR2PCIe Performance Monitoring\r\nRING_BL_USED\r\n• Title: R2 BL Ring in Use\r\n• Category: RING Events\r\n• Event Code: 0x09\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles that the BL ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sunk, but does not include \r\nwhen packets are being sent from the ring stop.\r\n• NOTE: On a 2 column implementation (e.g. 10C) CW_EVEN is actually \r\nCW_VR0_EVEN+CW_VR1_EVEN (similarly for CCW/ODD). In any cycle, a ring stop can see up to \r\none packet moving in the CW direction and one packet moving in the CCW direction.\r\nRING_IV_USED\r\n• Title: R2 IV Ring in Use\r\n• Category: RING Events\r\n• Event Code: 0x0a\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-3\r\n• Definition: Counts the number of cycles that the IV ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sent, but does not include \r\nwhen packets are being sunk into the ring stop. The IV ring is unidirectional. Whether UP or DN is \r\nCCW_VR1_ODD b1xxxxxxx Counterclockwise and Odd on VRing 1\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 1.\r\nCCW b11001100 Counterclockwise\r\nTable 2-179. Unit Masks for RING_BL_USED\r\nExtension umask\r\n[15:8] Description\r\nCW_VR0_EVEN bxxxxxxx1 Clockwise and Even on VRing 0\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 0.\r\nCW_VR0_ODD bxxxxxx1x Clockwise and Odd on VRing 0\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 0.\r\nCCW_VR0_EVEN bxxxxx1xx Counterclockwise and Even on VRing 0\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 0.\r\nCCW_VR0_ODD bxxxx1xxx Counterclockwise and Odd on VRing 0\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 0.\r\nCW_VR1_EVEN bxxx1xxxx Clockwise and Even on VRing 1\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 1.\r\nCW_VR1_ODD bxx1xxxxx Clockwise and Odd on VRing 1\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 1.\r\nCW b00110011 Clockwise\r\nCCW_VR1_EVEN bx1xxxxxx Counterclockwise and Even on VRing 1\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 1.\r\nCCW_VR1_ODD b1xxxxxxx Counterclockwise and Odd on VRing 1\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 1.\r\nCCW b11001100 Counterclockwise\r\nTable 2-178. Unit Masks for RING_AK_USED\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/7f90433a-e602-460e-b635-ae650f0f12c1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f24f8b1fb1f7b9b2489d92dcf2dab07a7231aa93905b2c2b28dea7f3ecd36ec1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 404
      },
      {
        "segments": [
          {
            "segment_id": "39182b4a-e1b3-4244-9f45-6461a27a872e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 176,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nR2PCIe Performance Monitoring\r\n170 Reference Number: 329468-002\r\nused is dependent on the system programming. Therefore, one should generally set both the UP \r\nand DN bits for a given polarity (or both) at a given time.\r\nRxR_AK_BOUNCES\r\n• Title: AK Ingress Bounced\r\n• Category: INGRESS Events\r\n• Event Code: 0x12\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0\r\n• Definition: Counts the number of times when a request destined for the AK ingress bounced.\r\nRxR_CYCLES_NE\r\n• Title: Ingress Cycles Not Empty\r\n• Category: INGRESS Events\r\n• Event Code: 0x10\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of cycles when the R2PCIe Ingress is not empty. This tracks one of \r\nthe three rings that are used by the R2PCIe agent. This can be used in conjunction with the R2PCIe \r\nIngress Occupancy Accumulator event in order to calculate average queue occupancy. Multiple \r\ningress buffers can be tracked at a given time using multiple counters.\r\nRxR_INSERTS\r\n• Title: Ingress Allocations\r\n• Category: INGRESS Events\r\n• Event Code: 0x11\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of allocations into the R2PCIe Ingress. This tracks one of the three \r\nrings that are used by the R2PCIe agent. This can be used in conjunction with the R2PCIe Ingress \r\nTable 2-180. Unit Masks for RING_IV_USED\r\nExtension umask\r\n[15:8] Description\r\nCW b00110011 Clockwise\r\nFilters for Clockwise polarity\r\nCCW b11001100 Counterclockwise\r\nFilters for Counterclockwise polarity\r\nANY b11111111 Any\r\nFilters any polarity\r\nTable 2-181. Unit Masks for RxR_AK_BOUNCES\r\nExtension umask\r\n[15:8] Description\r\nCW bxxxxxxx1 Clockwise\r\nCCW bxxxxxx1x Counterclockwise\r\nTable 2-182. Unit Masks for RxR_CYCLES_NE\r\nExtension umask\r\n[15:8] Description\r\nNCB bxxx1xxxx NCB\r\nNCB Ingress Queue\r\nNCS bxx1xxxxx NCS\r\nNCS Ingress Queue",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/39182b4a-e1b3-4244-9f45-6461a27a872e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=48a00843b6a74dc1fa6b8c1e8f132f0112e910c6b8b5f83b3004967512966574",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 281
      },
      {
        "segments": [
          {
            "segment_id": "a665364d-c7b5-4f03-9928-c39bfc9c2bfe",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 177,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 171\r\nUncore Performance Monitoring\r\nR2PCIe Performance Monitoring\r\nOccupancy Accumulator event in order to calculate average queue latency. Multiple ingress buffers \r\ncan be tracked at a given time using multiple counters.\r\nRxR_OCCUPANCY\r\n• Title: Ingress Occupancy Accumulator\r\n• Category: INGRESS Events\r\n• Event Code: 0x13\r\n• Max. Inc/Cyc:. 24, Register Restrictions: 0\r\n• Definition: Accumulates the occupancy of a given R2PCIe Ingress queue in each cycles. This \r\ntracks one of the three ring Ingress buffers. This can be used with the R2PCIe Ingress Not Empty \r\nevent to calculate average occupancy or the R2PCIe Ingress Allocations event in order to calculate \r\naverage queuing latency.\r\nTxR_CYCLES_FULL\r\n• Title: Egress Cycles Full\r\n• Category: EGRESS Events\r\n• Event Code: 0x25\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0\r\n• Definition: Counts the number of cycles when the R2PCIe Egress buffer is full.\r\nTxR_CYCLES_NE\r\n• Title: Egress Cycles Not Empty\r\n• Category: EGRESS Events\r\n• Event Code: 0x23\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0\r\n• Definition: Counts the number of cycles when the R2PCIe Egress is not empty. This tracks one of \r\nthe three rings that are used by the R2PCIe agent. This can be used in conjunction with the \r\nR2PCIe Egress Occupancy Accumulator event in order to calculate average queue occupancy. Only \r\nTable 2-183. Unit Masks for RxR_INSERTS\r\nExtension umask\r\n[15:8] Description\r\nNCB bxxx1xxxx NCB\r\nNCB Ingress Queue\r\nNCS bxx1xxxxx NCS\r\nNCS Ingress Queue\r\nTable 2-184. Unit Masks for RxR_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nDRS b00001000 DRS\r\nDRS Ingress Queue\r\nTable 2-185. Unit Masks for TxR_CYCLES_FULL\r\nExtension umask\r\n[15:8] Description\r\nAD bxxxxxxx1 AD\r\nAD Egress Queue\r\nAK bxxxxxx1x AK\r\nAK Egress Queue\r\nBL bxxxxx1xx BL\r\nBL Egress Queue",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/a665364d-c7b5-4f03-9928-c39bfc9c2bfe.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f19b3bb585209cdca5b8199dddeb73f256ae4ef5294f9b598abc2d1e124c8478",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9fb05cb6-810e-4be5-8281-c8dca8a7cdf7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 178,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nR2PCIe Performance Monitoring\r\n172 Reference Number: 329468-002\r\na single Egress queue can be tracked at any given time. It is not possible to filter based on direction \r\nor polarity.\r\nTxR_NACK_CCW\r\n• Title: Egress CCW NACK\r\n• Category: EGRESS Events\r\n• Event Code: 0x28\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: \r\nTxR_NACK_CW\r\n• Title: Egress CW NACK\r\n• Category: EGRESS Events\r\n• Event Code: 0x26\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: \r\nTable 2-186. Unit Masks for TxR_CYCLES_NE\r\nExtension umask\r\n[15:8] Description\r\nAD bxxxxxxx1 AD\r\nAD Egress Queue\r\nAK bxxxxxx1x AK\r\nAK Egress Queue\r\nBL bxxxxx1xx BL\r\nBL Egress Queue\r\nTable 2-187. Unit Masks for TxR_NACK_CCW\r\nExtension umask\r\n[15:8] Description\r\nAD bxxxxxxx1 AD CCW\r\nAD CounterClockwise Egress Queue\r\nAK bxxxxxx1x AK CCW\r\nAK CounterClockwise Egress Queue\r\nBL bxxxxx1xx BL CCW\r\nBL CounterClockwise Egress Queue\r\nTable 2-188. Unit Masks for TxR_NACK_CW\r\nExtension umask\r\n[15:8] Description\r\nAD bxxxxxxx1 AD CW\r\nAD Clockwise Egress Queue\r\nAK bxxxxxx1x AK CW\r\nAK Clockwise Egress Queue\r\nBL bxxxxx1xx BL CW\r\nBL Clockwise Egress Queue",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/9fb05cb6-810e-4be5-8281-c8dca8a7cdf7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=071230aebe9e51657cbf8873da9e382c8bc3879d44da243211bde61a8c08e53c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 451
      },
      {
        "segments": [
          {
            "segment_id": "d7253018-53e4-4c92-b212-96b5d0b45427",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 179,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 173\r\nUncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\n2.10 R3QPI PERFORMANCE MONITORING\r\n2.10.1 Overview of the R3QPI Box\r\nR3QPI is the interface between the Intel® QPI Link Layer, which packetizes requests, and the Ring.\r\nR3QPI is the interface between the ring and the Intel® QPI Link Layer. It is responsible for translating \r\nbetween ring protocol packets and flits that are used for transmitting data across the Intel® QPI inter\u0002face. It performs credit checking between the local Intel® QPI LL, the remote Intel® QPI LL and other \r\nagents on the local ring. \r\nThe R3QPI agent provides several functions:\r\n• Interface between Ring and Intel® QPI: \r\nOne of the primary attributes of the ring is its ability to convey Intel® QPI semantics with no \r\ntranslation. For example, this architecture enables initiators to communicate with a local Home \r\nagent in exactly the same way as a remote Home agent on another socket. With this philosophy, \r\nthe R3QPI block is lean and does very little with regards to the Intel® QPI protocol aside from \r\nmirror the request between the ring and the Intel® QPI interface.\r\n• Intel® QPI routing: \r\nIn order to optimize layout and latency, both full width Intel® QPI interfaces share the same ring \r\nstop. Therefore, a Intel® QPI packet might be received on one interface and simply forwarded \r\nalong on the other Intel® QPI interface. The R3QPI has sufficient routing logic to determine if \r\na request, snoop or response is targeting the local socket or if it should be forwarded along to \r\nthe other interface. This routing remains isolated to R3QPI and does not impede traffic on the \r\nRing.\r\n• Intel® QPI Home Snoop Protocol (with early snoop optimizations for DP): \r\nThe R3QPI agent implements a latency-reducing optimization for dual sockets which issues \r\nsnoops within the socket for incoming requests as well as a latency-reducing optimization to \r\nreturn data satisfying Direct2Core (D2C) requests. \r\n2.10.2 R3QPI Performance Monitoring Overview\r\nEach R3QPI Link supports event monitoring through three 44b wide counters \r\n(R3_Ly_PCI_PMON_CTR/CTL{2:0}). Each of these three counters can be programmed to count \r\nalmost any R3QPI event (see NOTE for exceptions). the R3QPI counters can increment by a maximum \r\nof 8b per cycle. \r\nFor information on how to setup a monitoring session, refer to Section 2.1, “Uncore Per-Socket \r\nPerformance Monitoring Control”.\r\nNOTE\r\nOnly counter 0 can be used for tracking occupancy events. Only counter 2 can be \r\nused to count ring events.\r\n2.10.2.1 R3QPI PMON Registers - On Overflow and the Consequences (PMI/Freeze)\r\nIf an overflow is detected from an R3QPI performance counter enabled to communicate its overflow \r\n(R3_Ly_PCI_PMON_CTL.ov_en is set to 1), the overflow bit is set at the box level \r\n(R3_Ly_PCI_PMON_BOX_STATUS.ov) and an overflow message is sent to the UBox When the UBox \r\nreceives the overflow signal, U_MSR_PMON_GLOBAL_STATUS.ov_rq is set (see Table 2-3, \r\n“U_MSR_PMON_GLOBAL_STATUS Register – Field Definitions”) and a PMI can be generated.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/d7253018-53e4-4c92-b212-96b5d0b45427.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=76abe1dce49b842edaefa81b81aa0e2ac2917559e9a76a939a7640fbc8917367",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 474
      },
      {
        "segments": [
          {
            "segment_id": "cb263c91-fd7b-4142-9a25-b5bf364f9560",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 180,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\n174 Reference Number: 329468-002\r\nOnce a freeze has occurred, in order to see a new freeze, the overflow field responsible for the freeze, \r\nmust be cleared by setting the corresponding bit in R3_Ly_PCI_PMON_BOX_STATUS.ov and \r\nU_MSR_PMON_GLOBAL_STATU.ov_rq. Assuming all the counters have been locally enabled (.en bit in \r\ndata registers meant to monitor events) and the overflow bit(s) has been cleared, the R3QPI Link is \r\nprepared for a new sample interval. Once the global controls have been re-enabled (Section 2.1.4, \r\n“Enabling a New Sample Interval from Frozen Counters”), counting will resume.\r\n2.10.3 R3QPI Performance Monitors\r\nTable 2-189. R3QPI Performance Monitoring Registers\r\n2.10.3.1 R3QPI Box Level PMON State\r\nThe following registers represent the state governing all box-level PMUs for each Link of the R3QPI Box. \r\nIn the case of the R3QPI Links, the R3_Ly_PCI_PMON_BOX_CTL register provides the ability to manu\u0002ally freeze the counters in the box (.frz) and reset the generic state (.rst_ctrs and .rst_ctrl).\r\nIf an overflow is detected from one of the R3QPI PMON registers, the corresponding bit in the \r\nR3_Ly_PCI_PMON_BOX_STATUS.ov field will be set. To reset these overflow bits, a user must write a \r\nvalue of ‘1’ to them (which will clear the bits).\r\nRegister Name PCICFG \r\nAddress\r\nSize \r\n(bits) Description\r\nPCICFG Base Address Dev:Func\r\nR3QPI0 Link 0 PMON Registers D19:F5\r\nR3QPI0 Link 1 PMON Registers D19:F6\r\nR3QPI1 Link 2 PMON Registers D18:F5\r\nBox-Level Control/Status\r\nR3_Ly_PCI_PMON_BOX_STATUS F8 32 R3QPI Link y PMON Box-Wide Status\r\nR3_Ly_PCI_PMON_BOX_CTL F4 32 R3QPI Link y PMON Box-Wide Control\r\nGeneric Counter Control\r\nR3_Ly_PCI_PMON_CTL2 E0 32 R3QPI Link y PMON Control for Counter 2\r\nR3_Ly_PCI_PMON_CTL1 DC 32 R3QPI Link y PMON Control for Counter 1\r\nR3_Ly_PCI_PMON_CTL0 D8 32 R3QPI Link y PMON Control for Counter 0\r\nGeneric Counters\r\nR3_Ly_PCI_PMON_CTR2 B4+B0 32x2 R3QPI Link y PMON Counter 2\r\nR3_Ly_PCI_PMON_CTR1 AC+A8 32x2 R3QPI Link y PMON Counter 1\r\nR3_Ly_PCI_PMON_CTR0 A4+A0 32x2 R3QPI Link y PMON Counter 0",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/cb263c91-fd7b-4142-9a25-b5bf364f9560.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=865ffc5100e38764a363a4aef750d19403d314578895d46ea49e2be16a88d51d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 314
      },
      {
        "segments": [
          {
            "segment_id": "c411da26-775c-46fe-b444-0e946f6e7451",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 181,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 175\r\nUncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\nTable 2-190. R3_Ly_PCI_PMON_BOX_CTL Register – Field Definitions\r\nU\r\nTable 2-191. R3_Ly_PCI_PMON_BOX_STATUS Register – Field Definitions\r\n2.10.3.2 R3QPI PMON state - Counter/Control Pairs\r\nThe following table defines the layout of the R3QPI performance monitor control registers. The main \r\ntask of these configuration registers is to select the event to be monitored by their respective data \r\ncounter (.ev_sel, .umask). Additional control bits are provided to shape the incoming events (e.g. \r\n.edge_det, .thresh) as well as provide additional functionality for monitoring software (.rst,.ov_en).\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:9 RV 0 Ignored\r\nfrz 8 WO 0 Freeze. \r\nIf set to 1 the counters in this box will be frozen.\r\nig 7:2 RV 0 Ignored\r\nrst_ctrs 1 WO 0 Reset Counters. \r\nWhen set to 1, the Counter Registers will be reset to 0.\r\nrst_ctrl 0 WO 0 Reset Control. \r\nWhen set to 1, the Counter Control Registers will be reset \r\nto 0.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 31:4 RV 0 Ignored\r\nrsv 3 RV 0 Reserved; SW must write to 0 else behavior is undefined.\r\nov 2:0 RW1C 0 If an overflow is detected from the corresponding \r\nR3_Ly_PCI_PMON_CTR register, it’s overflow bit will be set. \r\nNOTE: Write of ‘1’ will clear the bit.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/c411da26-775c-46fe-b444-0e946f6e7451.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=560d521b974ed2188b6deee4bf65dc417502ae8dc602031e7084b745c4e94a21",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 215
      },
      {
        "segments": [
          {
            "segment_id": "69f26271-88ba-46dd-b7d0-2f5a5109d7d0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 182,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\n176 Reference Number: 329468-002\r\nTable 2-192. R3_Ly_PCI_PMON_CTL{2-0} Register – Field Definitions\r\nThe R3QPI performance monitor data registers are 44b wide. A counter overflow occurs when a carry \r\nout from bit 43 is detected. Software can force all uncore counting to freeze after N events by \r\npreloading a monitor with a count value of 244 - N and setting the control register to send an overflow \r\nmessage to the UBox (Section 2.1.1.1, “Freezing on Counter Overflow”). During the interval of time \r\nbetween overflow and global disable, the counter value will wrap and continue to collect events.\r\nIf accessible, software can continuously read the data registers without disabling event collection.\r\nTable 2-193. R3_Ly_PCI_PMON_CTR{2-0} Register – Field Definitions\r\n2.10.4 R3QPI Performance Monitoring Events\r\n2.10.4.1 An Overview\r\nR3QPI provides events to track information related to all the traffic passing through it’s boundaries.\r\n• VN/IIO credit tracking - in addition to tracking the occupancy of the full VNA queue, R3QPI \r\nprovides a great deal of additional information: credits rejected, acquired and used often broken \r\ndown by Message Class.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nthresh 31:24 RW-V 0 Threshold used in counter comparison.\r\nrsv 23 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nen 22 RW-V 0 Local Counter Enable. \r\nrsv 21 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\nov_en 20 RW-V 0 When this bit is asserted and the corresponding counter \r\noverflows, its overflow bit is set in the local status register \r\n(R3_Ly_PCI_PMON_BOX_STATUS.ov) and an overflow is sent on \r\nthe message channel to the UBox. When the overflow is received \r\nby the UBox, the bit corresponding to this R3 will be set in \r\nU_MSR_PMON_GLOBAL_STATUS.ov_r3{1,0}. \r\nig 19 RV 0 Ignored\r\nedge_det 18 RW-V 0 When set to 1, rather than measuring the event in each cycle it \r\nis active, the corresponding counter will increment when a 0 to 1 \r\ntransition (i.e. rising edge) is detected.\r\nWhen 0, the counter will increment in each cycle that the event \r\nis asserted.\r\nNOTE: .edge_det is in series following .thresh. Due to this, the \r\n.thresh field must be set to a non-0 value. For events that \r\nincrement by no more than 1 per cycle, set .thresh to 0x1.\r\nrst 17 WO 0 When set to 1, the corresponding counter will be cleared to 0.\r\nrsv 16 RV 0 Reserved. SW must write to 0 else behavior is undefined.\r\numask 15:8 RW-V 0 Select subevents to be counted within the selected event. \r\nev_sel 7:0 RW-V 0 Select event to be counted.\r\nField Bits Attr\r\nHW \r\nReset \r\nVal\r\nDescription\r\nig 63:44 RV 0 Ignored\r\nevent_count 43:0 RW-V 0 44-bit performance event counter",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/69f26271-88ba-46dd-b7d0-2f5a5109d7d0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=72911d76cd9a3f8ebc41cccb6ff9b7f985bfa80c3fa6038d6843dc437b8b8866",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 447
      },
      {
        "segments": [
          {
            "segment_id": "79546830-423f-44fb-b8ec-613f3840f136",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 183,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 177\r\nUncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\n2.10.5 R3QPI Box Events Ordered By Code\r\nThe following table summarizes the directly measured R3QPI Box events.\r\n2.10.6 R3QPI Box Common Metrics (Derived Events)\r\nThe following table summarizes metrics commonly calculated from R3QPI Box events.\r\n2.10.7 R3QPI Box Performance Monitor Event List\r\nThe section enumerates performance monitoring events for the R3QPI Box.\r\nSymbol Name Event \r\nCode Ctrs\r\nMax \r\nInc/\r\nCyc\r\nDescription\r\nCLOCKTICKS 0x01 0-2 0 Number of uclks in domain\r\nRING_AD_USED 0x07 0-2 1 R3 AD Ring in Use\r\nRING_AK_USED 0x08 0-2 1 R3 AK Ring in Use\r\nRING_BL_USED 0x09 0-2 1 R3 BL Ring in Use\r\nRING_IV_USED 0x0a 0-2 1 R2 IV Ring in Use\r\nRxR_CYCLES_NE 0x10 0-1 1 Ingress Cycles Not Empty\r\nRxR_INSERTS 0x11 0-1 1 Ingress Allocations\r\nRxR_AD_BYPASSED 0x12 0-1 1 AD Ingress Bypassed\r\nRxR_OCCUPANCY 0x13 0 32 Ingress Occupancy Accumulator\r\nTxR_CYCLES_NE 0x23 0-1 1 Egress Cycles Not Empty\r\nTxR_CYCLES_FULL 0x25 0-1 1 Egress Cycles Full\r\nTxR_NACK_CW 0x26 0-1 1 Egress NACK\r\nTxR_NACK_CCW 0x28 0-1 1 Egress NACK\r\nQPI0_AD_CREDITS_EMPTY 0x29 0-1 1 QPI0 AD Credits Empty\r\nQPI1_AD_CREDITS_EMPTY 0x2a 0-1 1 QPI1 AD Credits Empty\r\nC_LO_AD_CREDITS_EMPTY 0x2b 0-1 1 CBox AD Credits Empty\r\nC_HI_AD_CREDITS_EMPTY 0x2c 0-1 1 CBox AD Credits Empty\r\nQPI0_BL_CREDITS_EMPTY 0x2d 0-1 1 QPI0 BL Credits Empty\r\nQPI1_BL_CREDITS_EMPTY 0x2e 0-1 1 QPI1 BL Credits Empty\r\nHA_R2_BL_CREDITS_EMPTY 0x2f 0-1 1 HA/R2 AD Credits Empty\r\nVNA_CREDIT_CYCLES_OUT 0x31 0-1 1 Cycles with no VNA credits available\r\nVNA_CREDIT_CYCLES_USED 0x32 0-1 1 Cycles with 1 or more VNA credits in use\r\nVNA_CREDITS_ACQUIRED 0x33 0-1 4 VNA credit Acquisitions\r\nVNA_CREDITS_REJECT 0x34 0-1 1 VNA Credit Reject\r\nVN0_CREDITS_USED 0x36 0-1 1 VN0 Credit Used\r\nVN0_CREDITS_REJECT 0x37 0-1 1 VN0 Credit Acquisition Failed on DRS\r\nVN1_CREDITS_USED 0x38 0-1 1 VN1 Credit Used\r\nVN1_CREDITS_REJECT 0x39 0-1 1 VN1 Credit Acquisition Failed on DRS",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/79546830-423f-44fb-b8ec-613f3840f136.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=17f7250dc5d79f8ba654d82a68d45d0aac4f8e8e527d19750b626007094a83c7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 298
      },
      {
        "segments": [
          {
            "segment_id": "7e9f243f-b441-4cfa-bbbc-4c19445c6092",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 184,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\n178 Reference Number: 329468-002\r\nCLOCKTICKS\r\n• Title: Number of uclks in domain\r\n• Category: UCLK Events\r\n• Event Code: 0x01\r\n• Max. Inc/Cyc:. 0, Register Restrictions: 0-2\r\n• Definition: Counts the number of uclks in the QPI uclk domain. This could be slightly different than \r\nthe count in the Ubox because of enable/freeze delays. However, because the QPI Agent is close to \r\nthe Ubox, they generally should not diverge by more than a handful of cycles.\r\nC_HI_AD_CREDITS_EMPTY\r\n• Title: CBox AD Credits Empty\r\n• Category: EGRESS Credit Events\r\n• Event Code: 0x2c\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: No credits available to send to Cbox on the AD Ring (covers higher CBoxes)\r\nC_LO_AD_CREDITS_EMPTY\r\n• Title: CBox AD Credits Empty\r\n• Category: EGRESS Credit Events\r\n• Event Code: 0x2b\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: No credits available to send to Cbox on the AD Ring (covers lower CBoxes)\r\nTable 2-194. Unit Masks for C_HI_AD_CREDITS_EMPTY\r\nExtension umask\r\n[15:8] Description\r\nCBO8 bxxxxxxx1 Cbox 8\r\nCBO9 bxxxxxx1x Cbox 9\r\nCBO10 bxxxxx1xx Cbox 10\r\nCBO11 bxxxx1xxx Cbox 11\r\nCBO12 bxxx1xxxx Cbox 12\r\nCBO13 bxx1xxxxx Cbox 13\r\nCBO14 bx1xxxxxx Cbox 14&16\r\nTable 2-195. Unit Masks for C_LO_AD_CREDITS_EMPTY\r\nExtension umask\r\n[15:8] Description\r\nCBO0 bxxxxxxx1 Cbox 0\r\nCBO1 bxxxxxx1x Cbox 1\r\nCBO2 bxxxxx1xx Cbox 2\r\nCBO3 bxxxx1xxx Cbox 3\r\nCBO4 bxxx1xxxx Cbox 4\r\nCBO5 bxx1xxxxx Cbox 5\r\nCBO6 bx1xxxxxx Cbox 6\r\nCBO7 b1xxxxxxx Cbox 7",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/7e9f243f-b441-4cfa-bbbc-4c19445c6092.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d724888a5cd4c105378dd5c16f071c7c49c06e413dc1273d810bda4098200de4",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "63fa8637-4b5a-4bcb-b9ad-cc80fea3e3ec",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 185,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 179\r\nUncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\nHA_R2_BL_CREDITS_EMPTY\r\n• Title: HA/R2 AD Credits Empty\r\n• Category: EGRESS Credit Events\r\n• Event Code: 0x2f\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: No credits available to send to either HA or R2 on the BL Ring\r\n• NOTE: Counter 0 counts lack of credits to the lesser numbered Cboxes (0-8) Counter 1 counts \r\nlack of credits to Cbox to the higher numbered CBoxes (8-13,15+17,16+18).\r\nQPI0_AD_CREDITS_EMPTY\r\n• Title: QPI0 AD Credits Empty\r\n• Category: EGRESS Credit Events\r\n• Event Code: 0x29\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: No credits available to send to QPI0 on the AD Ring\r\nQPI0_BL_CREDITS_EMPTY\r\n• Title: QPI0 BL Credits Empty\r\n• Category: EGRESS Credit Events\r\n• Event Code: 0x2d\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: No credits available to send to QPI0 on the BL Ring\r\nTable 2-196. Unit Masks for HA_R2_BL_CREDITS_EMPTY\r\nExtension umask\r\n[15:8] Description\r\nHA0 bxxxxxxx1 HA0\r\nHA1 bxxxxxx1x HA1\r\nR2_NCB bxxxxx1xx R2 NCB Messages\r\nR2_NCS bxxxx1xxx R2 NCS Messages\r\nTable 2-197. Unit Masks for QPI0_AD_CREDITS_EMPTY\r\nExtension umask\r\n[15:8] Description\r\nVNA bxxxxxxx1 VNA\r\nVN0_HOM bxxxxxx1x VN0 HOM Messages\r\nVN0_SNP bxxxxx1xx VN0 SNP Messages\r\nVN0_NDR bxxxx1xxx VN0 NDR Messages\r\nVN1_HOM bxxx1xxxx VN1 HOM Messages\r\nVN1_SNP bxx1xxxxx VN1 SNP Messages\r\nVN1_NDR bx1xxxxxx VN1 NDR Messages\r\nTable 2-198. Unit Masks for QPI0_BL_CREDITS_EMPTY\r\nExtension umask\r\n[15:8] Description\r\nVNA bxxxxxxx1 VNA\r\nVN0_HOM bxxxxxx1x VN0 HOM Messages",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/63fa8637-4b5a-4bcb-b9ad-cc80fea3e3ec.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9ece8b5952785c0b906f3c8d62da4b04e1ee6e993aab59ebfac76de05660e6a3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 476
      },
      {
        "segments": [
          {
            "segment_id": "c132dd0c-ef9d-417f-963e-b3fbced4392b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 186,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\n180 Reference Number: 329468-002\r\nQPI1_AD_CREDITS_EMPTY\r\n• Title: QPI1 AD Credits Empty\r\n• Category: EGRESS Credit Events\r\n• Event Code: 0x2a\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: No credits available to send to QPI1 on the AD Ring\r\nQPI1_BL_CREDITS_EMPTY\r\n• Title: QPI1 BL Credits Empty\r\n• Category: EGRESS Credit Events\r\n• Event Code: 0x2e\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: No credits available to send to QPI1 on the BL Ring\r\nVN0_SNP bxxxxx1xx VN0 SNP Messages\r\nVN0_NDR bxxxx1xxx VN0 NDR Messages\r\nVN1_HOM bxxx1xxxx VN1 HOM Messages\r\nVN1_SNP bxx1xxxxx VN1 SNP Messages\r\nVN1_NDR bx1xxxxxx VN1 NDR Messages\r\nTable 2-199. Unit Masks for QPI1_AD_CREDITS_EMPTY\r\nExtension umask\r\n[15:8] Description\r\nVNA bxxxxxxx1 VNA\r\nVN0_HOM bxxxxxx1x VN0 HOM Messages\r\nVN0_SNP bxxxxx1xx VN0 SNP Messages\r\nVN0_NDR bxxxx1xxx VN0 NDR Messages\r\nVN1_HOM bxxx1xxxx VN1 HOM Messages\r\nVN1_SNP bxx1xxxxx VN1 SNP Messages\r\nVN1_NDR bx1xxxxxx VN1 NDR Messages\r\nTable 2-200. Unit Masks for QPI1_BL_CREDITS_EMPTY\r\nExtension umask\r\n[15:8] Description\r\nVNA bxxxxxxx1 VNA\r\nVN0_HOM bxxxxxx1x VN0 HOM Messages\r\nVN0_SNP bxxxxx1xx VN0 SNP Messages\r\nVN0_NDR bxxxx1xxx VN0 NDR Messages\r\nVN1_HOM bxxx1xxxx VN1 HOM Messages\r\nVN1_SNP bxx1xxxxx VN1 SNP Messages\r\nVN1_NDR bx1xxxxxx VN1 NDR Messages\r\nTable 2-198. Unit Masks for QPI0_BL_CREDITS_EMPTY\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/c132dd0c-ef9d-417f-963e-b3fbced4392b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a998db7ca31b5d47d8c4865d2d2fdc7dac466df404e5b1e1cad003c3e0f68887",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 203
      },
      {
        "segments": [
          {
            "segment_id": "dab4298c-120a-48b1-8291-d79632ad81d3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 187,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 181\r\nUncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\nRING_AD_USED\r\n• Title: R3 AD Ring in Use\r\n• Category: RING Events\r\n• Event Code: 0x07\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-2\r\n• Definition: Counts the number of cycles that the AD ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sunk, but does not include \r\nwhen packets are being sent from the ring stop.\r\n• NOTE: On a 2 column implementation (e.g. 10 cores) CW_EVEN is actually \r\nCW_VR0_EVEN+CW_VR1_EVEN (similarly for CCW/ODD). In any cycle, a ring stop can see up to \r\none packet moving in the CW direction and one packet moving in the CCW direction.\r\nRING_AK_USED\r\n• Title: R3 AK Ring in Use\r\n• Category: RING Events\r\n• Event Code: 0x08\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-2\r\n• Definition: Counts the number of cycles that the AK ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sunk, but does not include \r\nwhen packets are being sent from the ring stop.\r\n• NOTE: On a 2 column implementation (e.g. 10C) CW_EVEN is actually \r\nCW_VR0_EVEN+CW_VR1_EVEN (similarly for CCW/ODD). In any cycle, a ring stop can see up to \r\none packet moving in the CW direction and one packet moving in the CCW direction.\r\nTable 2-201. Unit Masks for RING_AD_USED\r\nExtension umask\r\n[15:8] Description\r\nCW_VR0_EVEN bxxxxxxx1 Clockwise and Even on VRing 0\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 0.\r\nCW_VR0_ODD bxxxxxx1x Clockwise and Odd on VRing 0\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 0.\r\nCCW_VR0_EVEN bxxxxx1xx Counterclockwise and Even on VRing 0\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 0.\r\nCCW_VR0_ODD bxxxx1xxx Counterclockwise and Odd on VRing 0\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 0.\r\nCW b00110011 Clockwise\r\nCCW b11001100 Counterclockwise\r\nTable 2-202. Unit Masks for RING_AK_USED\r\nExtension umask\r\n[15:8] Description\r\nCW_VR0_EVEN bxxxxxxx1 Clockwise and Even on VRing 0\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 0.\r\nCW_VR0_ODD bxxxxxx1x Clockwise and Odd on VRing 0\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 0.\r\nCCW_VR0_EVEN bxxxxx1xx Counterclockwise and Even on VRing 0\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 0.\r\nCCW_VR0_ODD bxxxx1xxx Counterclockwise and Odd on VRing 0\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 0.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/dab4298c-120a-48b1-8291-d79632ad81d3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=59d8ed7c37a43d6e810be7aab5b548efba8bce9fb2bb1ce8a2dfd30b9f856f2d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 413
      },
      {
        "segments": [
          {
            "segment_id": "e64de4f5-88c2-4f11-9a22-5ce2ac778027",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 188,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\n182 Reference Number: 329468-002\r\nRING_BL_USED\r\n• Title: R3 BL Ring in Use\r\n• Category: RING Events\r\n• Event Code: 0x09\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-2\r\n• Definition: Counts the number of cycles that the BL ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sunk, but does not include when \r\npackets are being sent from the ring stop.\r\n• NOTE: On a 2 column implementation (e.g. 10C) CW_EVEN is actually \r\nCW_VR0_EVEN+CW_VR1_EVEN (similarly for CCW/ODD). In any cycle, a ring stop can see up to \r\none packet moving in the CW direction and one packet moving in the CCW direction.\r\nRING_IV_USED\r\n• Title: R2 IV Ring in Use\r\n• Category: RING Events\r\n• Event Code: 0x0a\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-2\r\n• Definition: Counts the number of cycles that the IV ring is being used at this ring stop. This \r\nincludes when packets are passing by and when packets are being sent, but does not include when \r\npackets are being sunk into the ring stop. The IV ring is unidirectional. Whether UP or DN is used is \r\ndependent on the system programming. Therefore, one should generally set both the UP and DN \r\nbits for a given polarity (or both) at a given time.\r\nCW b00110011 Clockwise\r\nCCW b11001100 Counterclockwise\r\nTable 2-203. Unit Masks for RING_BL_USED\r\nExtension umask\r\n[15:8] Description\r\nCW_VR0_EVEN bxxxxxxx1 Clockwise and Even on VRing 0\r\nFilters for the Clockwise and Even ring polarity on Virtual Ring 0.\r\nCW_VR0_ODD bxxxxxx1x Clockwise and Odd on VRing 0\r\nFilters for the Clockwise and Odd ring polarity on Virtual Ring 0.\r\nCCW_VR0_EVEN bxxxxx1xx Counterclockwise and Even on VRing 0\r\nFilters for the Counterclockwise and Even ring polarity on Virtual \r\nRing 0.\r\nCCW_VR0_ODD bxxxx1xxx Counterclockwise and Odd on VRing 0\r\nFilters for the Counterclockwise and Odd ring polarity on Virtual \r\nRing 0.\r\nCW b00110011 Clockwise\r\nCCW b11001100 Counterclockwise\r\nTable 2-204. Unit Masks for RING_IV_USED\r\nExtension umask\r\n[15:8] Description\r\nCW b00110011 Clockwise\r\nFilters for Clockwise polarity\r\nTable 2-202. Unit Masks for RING_AK_USED\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/e64de4f5-88c2-4f11-9a22-5ce2ac778027.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4502c60ee40ab900e0975df7410eefc40ec933997d801714387695a7f603beb5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 352
      },
      {
        "segments": [
          {
            "segment_id": "a38fabd4-002b-465c-8c92-bce6704149c0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 189,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 183\r\nUncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\nRxR_AD_BYPASSED\r\n• Title: AD Ingress Bypassed\r\n• Category: INGRESS Events\r\n• Event Code: 0x12\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of times when the AD Ingress was bypassed and an incoming \r\ntransaction was bypassed directly across the BGF and into the qfclk domain.\r\nRxR_CYCLES_NE\r\n• Title: Ingress Cycles Not Empty\r\n• Category: INGRESS Events\r\n• Event Code: 0x10\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of cycles when the QPI Ingress is not empty. This tracks one of \r\nthe three rings that are used by the QPI agent. This can be used in conjunction with the QPI \r\nIngress Occupancy Accumulator event in order to calculate average queue occupancy. Multiple \r\ningress buffers can be tracked at a given time using multiple counters.\r\nRxR_INSERTS\r\n• Title: Ingress Allocations\r\n• Category: INGRESS Events\r\n• Event Code: 0x11\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of allocations into the QPI Ingress. This tracks one of the three \r\nrings that are used by the QPI agent. This can be used in conjunction with the QPI Ingress Occu\u0002pancy Accumulator event in order to calculate average queue latency. Multiple ingress buffers can \r\nbe tracked at a given time using multiple counters.\r\nCCW b11001100 Counterclockwise\r\nFilters for Counterclockwise polarity\r\nANY b11111111 Any\r\nFilters any polarity\r\nTable 2-205. Unit Masks for RxR_CYCLES_NE\r\nExtension umask\r\n[15:8] Description\r\nHOM bxxxxxxx1 HOM\r\nHOM Ingress Queue\r\nSNP bxxxxxx1x SNP\r\nSNP Ingress Queue\r\nNDR bxxxxx1xx NDR\r\nNDR Ingress Queue\r\nTable 2-204. Unit Masks for RING_IV_USED\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/a38fabd4-002b-465c-8c92-bce6704149c0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f75d001d7d9ad9b79709515b8fd1c1a56ab77d6f2dcd683e142c89e17d062972",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "42d22139-85b8-4397-88fb-2a2c0528627a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 190,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\n184 Reference Number: 329468-002\r\nRxR_OCCUPANCY\r\n• Title: Ingress Occupancy Accumulator\r\n• Category: INGRESS Events\r\n• Event Code: 0x13\r\n• Max. Inc/Cyc:. 32, Register Restrictions: 0\r\n• Definition: Accumulates the occupancy of a given QPI Ingress queue in each cycles. This tracks \r\none of the three ring Ingress buffers. This can be used with the QPI Ingress Not Empty event to cal\u0002culate average occupancy or the QPI Ingress Allocations event in order to calculate average queuing \r\nlatency.\r\nTxR_CYCLES_FULL\r\n• Title: Egress Cycles Full\r\n• Category: EGRESS Events\r\n• Event Code: 0x25\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of cycles when the R2PCIe Egress buffer is full.\r\nTable 2-206. Unit Masks for RxR_INSERTS\r\nExtension umask\r\n[15:8] Description\r\nHOM bxxxxxxx1 HOM\r\nHOM Ingress Queue\r\nSNP bxxxxxx1x SNP\r\nSNP Ingress Queue\r\nNDR bxxxxx1xx NDR\r\nNDR Ingress Queue\r\nDRS bxxxx1xxx DRS\r\nDRS Ingress Queue\r\nNCB bxxx1xxxx NCB\r\nNCB Ingress Queue\r\nNCS bxx1xxxxx NCS\r\nNCS Ingress Queue\r\nTable 2-207. Unit Masks for RxR_OCCUPANCY\r\nExtension umask\r\n[15:8] Description\r\nHOM b00000001 HOM\r\nHOM Ingress Queue\r\nSNP b00000010 SNP\r\nSNP Ingress Queue\r\nNDR b00000100 NDR\r\nNDR Ingress Queue\r\nDRS b00001000 DRS\r\nDRS Ingress Queue\r\nNCB b00010000 NCB\r\nNCB Ingress Queue\r\nNCS b00100000 NCS\r\nNCS Ingress Queue",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/42d22139-85b8-4397-88fb-2a2c0528627a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6e7abbcd3e1345f0f1022ee9f4f8f25deb3b450a0790814b1eb75849c995b9ff",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 480
      },
      {
        "segments": [
          {
            "segment_id": "ba26c8e1-2166-4256-9636-ad93bc60e7d3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 191,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 185\r\nUncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\nTxR_CYCLES_NE\r\n• Title: Egress Cycles Not Empty\r\n• Category: EGRESS Events\r\n• Event Code: 0x23\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Counts the number of cycles when the QPI Egress is not empty. This tracks one of the \r\nthree rings that are used by the QPI agent. This can be used in conjunction with the QPI Egress \r\nOccupancy Accumulator event in order to calculate average queue occupancy. Only a single \r\nEgress queue can be tracked at any given time. It is not possible to filter based on direction or \r\npolarity.\r\nTxR_NACK_CCW\r\n• Title: Egress NACK\r\n• Category: EGRESS Events\r\n• Event Code: 0x28\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: \r\nTxR_NACK_CW\r\n• Title: Egress NACK\r\n• Category: EGRESS Events\r\n• Event Code: 0x26\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: \r\nVN0_CREDITS_REJECT\r\n• Title: VN0 Credit Acquisition Failed on DRS\r\n• Category: LINK_VN0_CREDITS Events\r\n• Event Code: 0x37\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\nTable 2-208. Unit Masks for TxR_NACK_CCW\r\nExtension umask\r\n[15:8] Description\r\nAD bxxxxxxx1 AK CCW\r\nBL CounterClockwise Egress Queue\r\nAK bxxxxxx1x BL CW\r\nAD Clockwise Egress Queue\r\nBL bxxxxx1xx BL CCW\r\nAD CounterClockwise Egress Queue\r\nTable 2-209. Unit Masks for TxR_NACK_CW\r\nExtension umask\r\n[15:8] Description\r\nAD bxxxxxxx1 AD CW\r\nAD Clockwise Egress Queue\r\nAK bxxxxxx1x AD CCW\r\nAD CounterClockwise Egress Queue\r\nBL bxxxxx1xx AK CW\r\nBL Clockwise Egress Queue",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ba26c8e1-2166-4256-9636-ad93bc60e7d3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b7b8ae9469271ee0d1b43f4cbcac71eb93a17fff94dbe5c4a6a168fa1d81cc6d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 239
      },
      {
        "segments": [
          {
            "segment_id": "3a76dbb9-9ee6-48e5-9dea-cc9e438a7312",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 192,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\n186 Reference Number: 329468-002\r\n• Definition: Number of times a request failed to acquire a DRS VN0 credit. In order for a request to \r\nbe transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink \r\ninto. There are two credit pools, VNA and VN0. VNA is a shared pool used to achieve high perfor\u0002mance. The VN0 pool has reserved entries for each message class and is used to prevent deadlock. \r\nRequests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail. This therefore \r\ncounts the number of times when a request failed to acquire either a VNA or VN0 credit and is \r\ndelayed. This should generally be a rare situation.\r\nVN0_CREDITS_USED\r\n• Title: VN0 Credit Used\r\n• Category: LINK_VN0_CREDITS Events\r\n• Event Code: 0x36\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Number of times a VN0 credit was used on the DRS message channel. In order for a \r\nrequest to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote \r\nsocket to sink into. There are two credit pools, VNA and VN0. VNA is a shared pool used to achieve \r\nhigh performance. The VN0 pool has reserved entries for each message class and is used to prevent \r\ndeadlock. Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail. This \r\ncounts the number of times a VN0 credit was used. Note that a single VN0 credit holds access to \r\npotentially multiple flit buffers. For example, a transfer that uses VNA could use 9 flit buffers and in \r\nthat case uses 9 credits. A transfer on VN0 will only count a single credit even though it may use \r\nmultiple buffers.\r\nTable 2-210. Unit Masks for VN0_CREDITS_REJECT\r\nExtension umask\r\n[15:8] Description\r\nHOM bxxxxxxx1 HOM Message Class\r\nFilter for the Home (HOM) message class. HOM is generally used to \r\nsend requests, request responses, and snoop responses.\r\nSNP bxxxxxx1x SNP Message Class\r\nFilter for Snoop (SNP) message class. SNP is used for outgoing \r\nsnoops. Note that snoop responses flow on the HOM message class.\r\nNDR bxxxxx1xx NDR Message Class\r\nNDR packets are used to transmit a variety of protocol flits including \r\ngrants and completions (CMP).\r\nDRS bxxxx1xxx DRS Message Class\r\nFilter for Data Response (DRS). DRS is generally used to transmit \r\ndata with coherency. For example, remote reads and writes, or cache \r\nto cache transfers will transmit their data using DRS.\r\nNCB bxxx1xxxx NCB Message Class\r\nFilter for Non-Coherent Broadcast (NCB). NCB is generally used to \r\ntransmit data without coherency. For example, non-coherent read \r\ndata returns.\r\nNCS bxx1xxxxx NCS Message Class\r\nFilter for Non-Coherent Standard (NCS). NCS is commonly used for \r\nTable 2-211. Unit Masks for VN0_CREDITS_USED\r\nExtension umask\r\n[15:8] Description\r\nHOM bxxxxxxx1 HOM Message Class\r\nFilter for the Home (HOM) message class. HOM is generally used \r\nto send requests, request responses, and snoop responses.\r\nSNP bxxxxxx1x SNP Message Class\r\nFilter for Snoop (SNP) message class. SNP is used for outgoing \r\nsnoops. Note that snoop responses flow on the HOM message \r\nclass.\r\nNDR bxxxxx1xx NDR Message Class\r\nNDR packets are used to transmit a variety of protocol flits \r\nincluding grants and completions (CMP).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/3a76dbb9-9ee6-48e5-9dea-cc9e438a7312.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ddf15b71378603be1162b2b459a4f62c0ded1cb159845850ee705c60e7a19b7b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 543
      },
      {
        "segments": [
          {
            "segment_id": "3a76dbb9-9ee6-48e5-9dea-cc9e438a7312",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 192,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\n186 Reference Number: 329468-002\r\n• Definition: Number of times a request failed to acquire a DRS VN0 credit. In order for a request to \r\nbe transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink \r\ninto. There are two credit pools, VNA and VN0. VNA is a shared pool used to achieve high perfor\u0002mance. The VN0 pool has reserved entries for each message class and is used to prevent deadlock. \r\nRequests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail. This therefore \r\ncounts the number of times when a request failed to acquire either a VNA or VN0 credit and is \r\ndelayed. This should generally be a rare situation.\r\nVN0_CREDITS_USED\r\n• Title: VN0 Credit Used\r\n• Category: LINK_VN0_CREDITS Events\r\n• Event Code: 0x36\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Number of times a VN0 credit was used on the DRS message channel. In order for a \r\nrequest to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote \r\nsocket to sink into. There are two credit pools, VNA and VN0. VNA is a shared pool used to achieve \r\nhigh performance. The VN0 pool has reserved entries for each message class and is used to prevent \r\ndeadlock. Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail. This \r\ncounts the number of times a VN0 credit was used. Note that a single VN0 credit holds access to \r\npotentially multiple flit buffers. For example, a transfer that uses VNA could use 9 flit buffers and in \r\nthat case uses 9 credits. A transfer on VN0 will only count a single credit even though it may use \r\nmultiple buffers.\r\nTable 2-210. Unit Masks for VN0_CREDITS_REJECT\r\nExtension umask\r\n[15:8] Description\r\nHOM bxxxxxxx1 HOM Message Class\r\nFilter for the Home (HOM) message class. HOM is generally used to \r\nsend requests, request responses, and snoop responses.\r\nSNP bxxxxxx1x SNP Message Class\r\nFilter for Snoop (SNP) message class. SNP is used for outgoing \r\nsnoops. Note that snoop responses flow on the HOM message class.\r\nNDR bxxxxx1xx NDR Message Class\r\nNDR packets are used to transmit a variety of protocol flits including \r\ngrants and completions (CMP).\r\nDRS bxxxx1xxx DRS Message Class\r\nFilter for Data Response (DRS). DRS is generally used to transmit \r\ndata with coherency. For example, remote reads and writes, or cache \r\nto cache transfers will transmit their data using DRS.\r\nNCB bxxx1xxxx NCB Message Class\r\nFilter for Non-Coherent Broadcast (NCB). NCB is generally used to \r\ntransmit data without coherency. For example, non-coherent read \r\ndata returns.\r\nNCS bxx1xxxxx NCS Message Class\r\nFilter for Non-Coherent Standard (NCS). NCS is commonly used for \r\nTable 2-211. Unit Masks for VN0_CREDITS_USED\r\nExtension umask\r\n[15:8] Description\r\nHOM bxxxxxxx1 HOM Message Class\r\nFilter for the Home (HOM) message class. HOM is generally used \r\nto send requests, request responses, and snoop responses.\r\nSNP bxxxxxx1x SNP Message Class\r\nFilter for Snoop (SNP) message class. SNP is used for outgoing \r\nsnoops. Note that snoop responses flow on the HOM message \r\nclass.\r\nNDR bxxxxx1xx NDR Message Class\r\nNDR packets are used to transmit a variety of protocol flits \r\nincluding grants and completions (CMP).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/3a76dbb9-9ee6-48e5-9dea-cc9e438a7312.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ddf15b71378603be1162b2b459a4f62c0ded1cb159845850ee705c60e7a19b7b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 543
      },
      {
        "segments": [
          {
            "segment_id": "6876b405-0db4-4ba3-af8c-363129ce4fa3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 193,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 187\r\nUncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\nVN1_CREDITS_REJECT\r\n• Title: VN1 Credit Acquisition Failed on DRS\r\n• Category: LINK_VN1_CREDITS Events\r\n• Event Code: 0x39\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Number of times a request failed to acquire a VN1 credit. In order for a request to be \r\ntransferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink \r\ninto. There are two credit pools, VNA and VN1. VNA is a shared pool used to achieve high perfor\u0002mance. The VN1 pool has reserved entries for each message class and is used to prevent dead\u0002lock. Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail. This \r\ntherefore counts the number of times when a request failed to acquire either a VNA or VN1 credit \r\nand is delayed. This should generally be a rare situation.\r\nDRS bxxxx1xxx DRS Message Class\r\nFilter for Data Response (DRS). DRS is generally used to \r\ntransmit data with coherency. For example, remote reads and \r\nwrites, or cache to cache transfers will transmit their data using \r\nDRS.\r\nNCB bxxx1xxxx NCB Message Class\r\nFilter for Non-Coherent Broadcast (NCB). NCB is generally used \r\nto transmit data without coherency. For example, non-coherent \r\nread data returns.\r\nNCS bxx1xxxxx NCS Message Class\r\nFilter for Non-Coherent Standard (NCS). NCS is commonly used \r\nfor \r\nTable 2-212. Unit Masks for VN1_CREDITS_REJECT\r\nExtension umask\r\n[15:8] Description\r\nHOM bxxxxxxx1 HOM Message Class\r\nFilter for the Home (HOM) message class. HOM is generally used \r\nto send requests, request responses, and snoop responses.\r\nSNP bxxxxxx1x SNP Message Class\r\nFilter for Snoop (SNP) message class. SNP is used for outgoing \r\nsnoops. Note that snoop responses flow on the HOM message \r\nclass.\r\nNDR bxxxxx1xx NDR Message Class\r\nNDR packets are used to transmit a variety of protocol flits \r\nincluding grants and completions (CMP).\r\nDRS bxxxx1xxx DRS Message Class\r\nFilter for Data Response (DRS). DRS is generally used to transmit \r\ndata with coherency. For example, remote reads and writes, or \r\ncache to cache transfers will transmit their data using DRS.\r\nNCB bxxx1xxxx NCB Message Class\r\nFilter for Non-Coherent Broadcast (NCB). NCB is generally used \r\nto transmit data without coherency. For example, non-coherent \r\nread data returns.\r\nNCS bxx1xxxxx NCS Message Class\r\nFilter for Non-Coherent Standard (NCS). NCS is commonly used \r\nfor \r\nTable 2-211. Unit Masks for VN0_CREDITS_USED\r\nExtension umask\r\n[15:8] Description",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/6876b405-0db4-4ba3-af8c-363129ce4fa3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5af1054e35ccd778646e0945253fd4c6ef966df83a68e0b1182d78a26ae76399",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 397
      },
      {
        "segments": [
          {
            "segment_id": "03f10fa9-67a4-4e1d-8e2d-6f754eb94ab3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 194,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\n188 Reference Number: 329468-002\r\nVN1_CREDITS_USED\r\n• Title: VN1 Credit Used\r\n• Category: LINK_VN1_CREDITS Events\r\n• Event Code: 0x38\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Number of times a VN1 credit was used on the DRS message channel. In order for a \r\nrequest to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote \r\nsocket to sink into. There are two credit pools, VNA and VN1. VNA is a shared pool used to achieve \r\nhigh performance. The VN1 pool has reserved entries for each message class and is used to prevent \r\ndeadlock. Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail. This \r\ncounts the number of times a VN1 credit was used. Note that a single VN1 credit holds access to \r\npotentially multiple flit buffers. For example, a transfer that uses VNA could use 9 flit buffers and in \r\nthat case uses 9 credits. A transfer on VN1 will only count a single credit even though it may use \r\nmultiple buffers.\r\nVNA_CREDITS_ACQUIRED\r\n• Title: VNA credit Acquisitions\r\n• Category: LINK_VNA_CREDITS Events\r\n• Event Code: 0x33\r\n• Max. Inc/Cyc:. 4, Register Restrictions: 0-1\r\n• Definition: Number of QPI VNA Credit acquisitions. This event can be used in conjunction with the \r\nVNA In-Use Accumulator to calculate the average lifetime of a credit holder. VNA credits are used by \r\nall message classes in order to communicate across QPI. If a packet is unable to acquire credits, it \r\nwill then attempt to use credits from the VN0 pool. Note that a single packet may require multiple \r\nflit buffers (i.e. when data is being transferred). Therefore, this event will increment by the number \r\nof credits acquired in each cycle. Filtering based on message class is not provided. One can count \r\nthe number of packets transferred in a given message class using an qfclk event.\r\nTable 2-213. Unit Masks for VN1_CREDITS_USED\r\nExtension umask\r\n[15:8] Description\r\nHOM bxxxxxxx1 HOM Message Class\r\nFilter for the Home (HOM) message class. HOM is generally used to \r\nsend requests, request responses, and snoop responses.\r\nSNP bxxxxxx1x SNP Message Class\r\nFilter for Snoop (SNP) message class. SNP is used for outgoing \r\nsnoops. Note that snoop responses flow on the HOM message class.\r\nNDR bxxxxx1xx NDR Message Class\r\nNDR packets are used to transmit a variety of protocol flits including \r\ngrants and completions (CMP).\r\nDRS bxxxx1xxx DRS Message Class\r\nFilter for Data Response (DRS). DRS is generally used to transmit \r\ndata with coherency. For example, remote reads and writes, or cache \r\nto cache transfers will transmit their data using DRS.\r\nNCB bxxx1xxxx NCB Message Class\r\nFilter for Non-Coherent Broadcast (NCB). NCB is generally used to \r\ntransmit data without coherency. For example, non-coherent read \r\ndata returns.\r\nNCS bxx1xxxxx NCS Message Class\r\nFilter for Non-Coherent Standard (NCS). NCS is commonly used for ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/03f10fa9-67a4-4e1d-8e2d-6f754eb94ab3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fb06eb4c7ff11488741d24bb0c4c8b31ae108629c5d81aa2716dde212733be88",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 479
      },
      {
        "segments": [
          {
            "segment_id": "d52b1b24-6ef8-4fe4-97a9-3dbb9bdd5744",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 195,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 189\r\nUncore Performance Monitoring\r\nR3QPI Performance Monitoring\r\nVNA_CREDITS_REJECT\r\n• Title: VNA Credit Reject\r\n• Category: LINK_VNA_CREDITS Events\r\n• Event Code: 0x34\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Number of attempted VNA credit acquisitions that were rejected because the VNA \r\ncredit pool was full (or almost full). It is possible to filter this event by message class. Some pack\u0002ets use more than one flit buffer, and therefore must acquire multiple credits. Therefore, one \r\ncould get a reject even if the VNA credits were not fully used up. The VNA pool is generally used to \r\nprovide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee \r\nforward progress). VNA credits can run out if the flit buffer on the receiving side starts to queue \r\nup substantially. This can happen if the rest of the uncore is unable to drain the requests fast \r\nenough.\r\nVNA_CREDIT_CYCLES_OUT\r\n• Title: Cycles with no VNA credits available\r\n• Category: LINK_VNA_CREDITS Events\r\n• Event Code: 0x31\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Number of QPI uclk cycles when the transmitted has no VNA credits available and \r\ntherefore cannot send any requests on this channel. Note that this does not mean that no flits can \r\nTable 2-214. Unit Masks for VNA_CREDITS_ACQUIRED\r\nExtension umask\r\n[15:8] Description\r\nAD bxxxxxxx1 HOM Message Class\r\nFilter for the Home (HOM) message class. HOM is generally used \r\nto send requests, request responses, and snoop responses.\r\nBL bxxxxx1xx HOM Message Class\r\nFilter for the Home (HOM) message class. HOM is generally used \r\nto send requests, request responses, and snoop responses.\r\nTable 2-215. Unit Masks for VNA_CREDITS_REJECT\r\nExtension umask\r\n[15:8] Description\r\nHOM bxxxxxxx1 HOM Message Class\r\nFilter for the Home (HOM) message class. HOM is generally used \r\nto send requests, request responses, and snoop responses.\r\nSNP bxxxxxx1x SNP Message Class\r\nFilter for Snoop (SNP) message class. SNP is used for outgoing \r\nsnoops. Note that snoop responses flow on the HOM message \r\nclass.\r\nNDR bxxxxx1xx NDR Message Class\r\nNDR packets are used to transmit a variety of protocol flits \r\nincluding grants and completions (CMP).\r\nDRS bxxxx1xxx DRS Message Class\r\nFilter for Data Response (DRS). DRS is generally used to \r\ntransmit data with coherency. For example, remote reads and \r\nwrites, or cache to cache transfers will transmit their data using \r\nDRS.\r\nNCB bxxx1xxxx NCB Message Class\r\nFilter for Non-Coherent Broadcast (NCB). NCB is generally used \r\nto transmit data without coherency. For example, non-coherent \r\nread data returns.\r\nNCS bxx1xxxxx NCS Message Class\r\nFilter for Non-Coherent Standard (NCS).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/d52b1b24-6ef8-4fe4-97a9-3dbb9bdd5744.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2ab189647eff2eeff982286f2c7bb88d0891b2e6c76bc318cda7cd58c92c13e8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 423
      },
      {
        "segments": [
          {
            "segment_id": "4585f556-3fcd-41c5-a3c1-3672ded6eaaf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 196,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nPacket Matching Reference\r\n190 Reference Number: 329468-002\r\nbe transmitted, as those holding VN0 credits will still (potentially) be able to transmit. Generally it is \r\nthe goal of the uncore that VNA credits should not run out, as this can substantially throttle back \r\nuseful QPI bandwidth.\r\nVNA_CREDIT_CYCLES_USED\r\n• Title: Cycles with 1 or more VNA credits in use\r\n• Category: LINK_VNA_CREDITS Events\r\n• Event Code: 0x32\r\n• Max. Inc/Cyc:. 1, Register Restrictions: 0-1\r\n• Definition: Number of QPI uclk cycles with one or more VNA credits in use. This event can be used \r\nin conjunction with the VNA In-Use Accumulator to calculate the average number of used VNA cred\u0002its.\r\n2.11 PACKET MATCHING REFERENCE\r\nIn the Intel® QPI Link Layer, the performance monitoring infrastructure allows a user to filter packet \r\ntraffic according to certain fields. A couple common fields, the Message Class/Opcode fields, have been \r\nsummarized in the following tables.\r\nTable 2-216. Intel® QuickPath Interconnect Packet Message Classes\r\nTable 2-217. Opcode Match by Message Class\r\nCode Name Definition\r\nb0000 HOM0 Home - Requests\r\nb0001 HOM1 Home - Responses\r\nb0010 NDR Non-Data Responses\r\nb0011 SNP Snoops\r\nb0100 NCS Non-Coherent Standard\r\n---\r\nb1100 NCB Non-Coherent Bypass\r\n---\r\nb1110 DRS Data Response\r\nOpc HOM0 HOM1 NDR SNP\r\n0000 RdCur RspI Gnt_Cmp SnpCur\r\n0001 RdCode RspS GntE_FrcAckCnflt SnpCode\r\n0010 RdData --- --- SnpData\r\n0011 NonSnpRd --- --- ---\r\n0100 RdInvOwn RspCnflt CmpD SnpInvOwn\r\n0101 --- SnpInvWrMtoI \r\n(aka SnpInvXtoI)\r\n0110 EvctCln\r\n(only to xNCs)\r\n--- ---\r\n0111 NonSnpWr RspCnfltWbI\r\n(only from xNCs)\r\n--- ---\r\n1000 InvItoE RspFwd Cmp SnpInvItoE",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/4585f556-3fcd-41c5-a3c1-3672ded6eaaf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1d21f2432b970afed63a21773c314080f5822bac5944c41fc99165f1ac5cf962",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ea0c998d-aee0-45e2-b8fa-24e90feb2085",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 197,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 191\r\nUncore Performance Monitoring\r\nPacket Matching Reference\r\nTable 2-218. Opcodes (Alphabetical Listing)\r\n1001 AckCnfltWbI RspFwdI FrcAckCnlft\r\n(only from xNCs)\r\n---\r\n1010 RdDataMigratory RspFwdS Cmp_FwdCode SnpDataMigratory\r\n(only for xNCs)\r\n1011 --- RspFwdIWb Cmp_FwdInvOwn\r\n(only for xNCs)\r\n---\r\n1100 WbMtoI RspFwdSWb Cmp_FwdInvItoE ---\r\n1101 WbMtoE RspIWb --- ---\r\n1110 WbMtoS\r\n(only from xNCs)\r\nRspSWb --- ---\r\n1111 AckCnflt --- --- PrefetchHint\r\nOpc NCS NCB DRS\r\n0000 NcRd NcWr DataC_(FEIMS)\r\n0001 IntAck WcWr DataC_(FEIMS)_FrcAck\r\nCnflt\r\n(only from xNCs)\r\n0010 --- --- DataC_(FEIMS)_Cmp\r\n0011 FERR --- DataNc\r\n0100 NcRdPtl --- WbIData\r\n0101 NcCfgRd --- WbSData\r\n0110 --- --- WbEData\r\n0111 NcIORd --- NonSnpWrData\r\n1000 --- NcMsgB WbIDataPtl\r\n1001 NcCfgWr IntLogical ---\r\n1010 --- IntPhysical WbEDataPtl \r\n(only from xNCs)\r\n1011 NcIOWr IntPrioUpd NonSnpWrdataPtl\r\n1100 NcMsgS NcWrPtl ---\r\n1101 NcP2PS WcWrPtl ---\r\n1110 --- NcP2PB ---\r\n1111 --- ---\r\nName Opc MC Gen \r\nBy? Desc\r\nAbortTO 0101 NDR Abort Time-out Response\r\nAckCnflt 1111 HOM0 Co,Hi Acknowledge receipt of Data_* and Cmp/\r\nFrcAckCnflt, signal a possible conflict scenario.\r\nAckCnfltWbI 1001 HOM0 Co,Hi In addition to signaling AckCnflt, the caching agent \r\nhas also written the dirty cache line data plus any \r\npartial write data back to memory in a WBiData[Ptl] \r\nmessage and transitioned the cache line state to I.\r\nCmp 1000 NDR Uo, \r\nCi,Co,\r\nHo\r\nAll snoop responses gathered, no conflicts\r\nCmpD 0100 NDR Uo, Ci Completion with Data\r\nOpc HOM0 HOM1 NDR SNP",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ea0c998d-aee0-45e2-b8fa-24e90feb2085.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=69bf3c3481b3d9a8a04732c6dc1e1991e9c75d02a74a9e2aea59ff9afc5d7f7d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 484
      },
      {
        "segments": [
          {
            "segment_id": "5bb0b6cb-222a-4981-a386-851618543ba3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 198,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nPacket Matching Reference\r\n192 Reference Number: 329468-002\r\nCmp_FwdCode 1010 NDR Ci,Ho Complete request, forward the line in F (or S) state \r\nto the requestor specified, invalidate local copy or \r\nleave it in S state.\r\nCmp_FwdInvItoE 1100 NDR Ci,Ho Complete request, invalidate local copy\r\nCmp_FwdInvOwn 1011 NDR Ci Complete request, forward the line in E or M state to \r\nthe requestor specified, invalidate local copy\r\nDataC_(FEIMS) 0000 DRS Ci, \r\nCo,Ho\r\nData Response in (FEIMS) state\r\nNOTE: Set RDS field to specify which state is to be \r\nmeasured.\r\n- Ivy Bridge-EP microarchitecture supports getting \r\ndata in E, F, I or M state\r\nDataC_(FEIMS)_Cmp 0010 DRS Ci,Ho Data Response in (FEIMS) state, Complete\r\nNOTE: Set RDS field to specify which state is to be \r\nmeasured.\r\n- Ivy Bridge-EP microarchitecture supports getting \r\ndata in E, F or I state\r\nDataC_(FEIMS)_FrcAckC\r\nnflt\r\n0001 DRS Ci,Ho Data Response in (FEIMS) state, Force Acknowledge\r\nNOTE: Set RDS field to specify which state is to be \r\nmeasured.\r\n- Ivy Bridge-EP microarchitecture supports getting \r\ndata in E, F or I state\r\nDataNc 0011 DRS Uo, Ci Non-Coherent Data\r\nDebugData 1111 NCB Debug Data\r\nEvctCln 0110 HOM0 Co Clean cache line eviction notification to home agent.\r\nFERR 0011 NCS Ui,Uo,\r\nCo\r\nLegacy floating point error indication from CPU to \r\nlegacy bridge\r\nFrcAckCnlft 1001 NDR Co,Ho All snoop responses gathered, force an AckCnflt\r\nGnt_Cmp 0000 NDR Ci,Ho Signal completion and Grant E state ownership \r\nwithout data to an InvItoE or ‘null data’ to an InvXtoI\r\nGntE_FrcAckCnflt 0001 NDR Ci,Ho Signal FrcAckCnflt and Grant E state ownership \r\nwithout data to an InvItoE or ‘null data’ to an InvXtoI\r\nIntAck 0001 NCS Interrupt acknowledge to legacy 8259 interrupt \r\ncontroller\r\nIntLogical 1001 NCB Ui,Uo, \r\nCo\r\nLogical mode interrupt to processor\r\nIntPhysical 1010 NCB Ui,Uo, \r\nCo\r\nPhysical mode interrupt to processor\r\nIntPrioUpd 1011 NCB Ui,Uo, \r\nCo\r\nInterrupt priority update message to source interrupt \r\nagents.\r\nInvItoE 1000 HOM0 Co,Hi Invalidate to E state requests exclusive ownership of \r\na cache line without data.\r\nInvXtoI 0101 HOM0 Flush a cache line from all caches (that is, \r\ndowngrade all clean copies to I and cause any dirty \r\ncopy to be written back to memory).\r\nNcCfgRd 0101 NCS Ui,Co Configuration read from configuration space\r\nNcCfgWr 1001 NCS Ui,Co Configuration write to configuration space\r\nNcIORd 0111 NCS Ui,Co Read from legacy I/O space\r\nNcIOWr 1011 NCS Ui,Co Write to legacy I/O space\r\nNcMsgB 1000 NCB Ui,Uo, \r\nCo\r\nNon-coherent Message (non-coherent bypass \r\nchannel)\r\nNcMsgS 1100 NCS Ui,Uo,\r\nCo\r\nNon-coherent Message (Non-coherent standard \r\nchannel)\r\nName Opc MC Gen \r\nBy? Desc",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/5bb0b6cb-222a-4981-a386-851618543ba3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=26e75b2e92f6fc8202d564fd9a7b63496d6132fdb334760d41aa2c7dcd6c6c4a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 420
      },
      {
        "segments": [
          {
            "segment_id": "ef23d4af-03fd-4545-8900-9275e36ef1fe",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 199,
            "page_width": 612,
            "page_height": 792,
            "content": "Reference Number: 329468-002 193\r\nUncore Performance Monitoring\r\nPacket Matching Reference\r\nNcP2PB 1110 NCB Ui,Uoi Peer-to-peer transaction between I/O entities (non\u0002coherent bypass channel)\r\nNcP2PS 1101 NCS Peer-to-peer transaction between I/O entities. (Non\u0002coherent standard channel)\r\nNcRd 0000 NCS Co Read from non-coherent memory mapped I/O space\r\nNcRdPtl 0100 NCS Co Partial read from non-coherent memory mapped I/O \r\nspace\r\nNcWr 0000 NCB Co Write to non-coherent memory mapped I/O space\r\nNcWrPtl 1100 NCB Co Partial write to non-coherent memory mapped I/O \r\nspace\r\nNonSnpRd 0011 HOM0 Co,Hi Non-Snoop (uncached) read\r\nNonSnpWr 0111 HOM0 Co,Hi Non-Snoop (uncached) write\r\nNonSnpWrData 0111 DRS Co,Hi,\r\nHo\r\nNon cache coherent write data\r\nNonSnpWrDataPtl 1011 DRS Co,Hi,\r\nHo\r\nPartial (byte-masked) non cache coherent write data\r\nPrefetchHint 1111 SNP Ci,Co Snoop Prefetch Hint\r\nRspCnflt 0100 HOM1 Co,Hi,\r\nHo\r\nPeer is left with line in I or S state, and the peer has \r\na conflicting outstanding request.\r\nRspCnfltOwn 0110 HOM1 Peer has a buried M copy for this line with an \r\noutstanding conflicting request.\r\nRspCnfltWbI 0111 HOM1 Hi,Ho Peer has a buried M copy for this line with an \r\noutstanding conflicting request. Peer must write back \r\ndata to home, invalidate line and mark itself that \r\nburied HitM data was sent.\r\nRdCode 0001 HOM0 Co,Hi Read cache line in F (or S, if the F state not \r\nsupported)\r\nRdCur 0000 HOM0 Co,Hi Request a cache line in I. Typically issued by I/O \r\nproxy entities, RdCur is used to obtain a coherent \r\nsnapshot of an uncached line.\r\nRdData 0010 HOM0 Co,Hi Read cache line in either E or F (or S, if F state not \r\nsupported). The choice between F (or S) and E is \r\ndetermined by whether or not per caching agent has \r\ncache line in S state.\r\nRdDataMigratory 1010 HOM0 Co,Hi Same as RdData, except that peer cache can forward \r\nrequested cache line in M state without any \r\nwriteback to memory. \r\nRdInvOwn 0100 HOM0 Co,Hi Read Invalidate Own requests a cache line in M or E \r\nstate. M or E is determined by whether requester is \r\nforwarded an M copy by a peer caching agent or sent \r\nan E copy by home agent.\r\nRspFwd 1000 HOM1 Co,Hi,\r\nHo\r\nPeer has sent data to requestor with no change in \r\ncache state\r\nRspFwdI 1001 HOM1 Co,Hi,\r\nHo\r\nPeer has sent data to requestor and is left with line \r\nin I state\r\nRspFwdIWb 1011 HOM1 Hi,Ho Peer has sent data to requestor and a WbIData to \r\nthe home, and is left with line in I state\r\nRspFwdS 1010 HOM1 Co,Hi,\r\nHo\r\nPeer has sent data to requestor and is left with line \r\nin S state\r\nRspFwdSWb 1100 HOM1 Hi,Ho Peer has sent data to requestor and a WbSData to \r\nthe home, and is left with line in S state\r\nRspI 0000 HOM1 Co,Hi,\r\nHo\r\nPeer left with line in I-state\r\nName Opc MC Gen \r\nBy? Desc",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/ef23d4af-03fd-4545-8900-9275e36ef1fe.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=120732bc2dbd4871e44b4f1a34efbf60a7d3a5b7d93d5afd848824c69c28282d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 471
      },
      {
        "segments": [
          {
            "segment_id": "944d4530-081c-4ba6-951b-2e1382becb30",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 200,
            "page_width": 612,
            "page_height": 792,
            "content": "Uncore Performance Monitoring\r\nPacket Matching Reference\r\n194 Reference Number: 329468-002\r\nRspIWb 1101 HOM1 Co,Hi,\r\nHo\r\nPeer has evicted the data with an in-flight \r\nWbIData[Ptl] message to the home and has not sent \r\nany message to the requestor.\r\nRspS 0001 HOM1 Co, \r\nHi,Ho\r\nPeer left with line in S-state\r\nRspSWb 1110 HOM1 Co,Hi,\r\nHo\r\nPeer has sent a WbSData message to the home, has \r\nnot sent any message to the requestor and is left \r\nwith line in S-state\r\nSnpCode 0001 SNP Ci, \r\nCo,Ho\r\nSnoop Code (get data in F or S state)\r\n- Ivy Bridge-EP microarchitecture supports getting \r\ndata in F state\r\nSnpCur 0000 SNP Ci, \r\nCo,Ho\r\nSnoop to get data in I state\r\nSnpData 0010 SNP Ci, \r\nCo,Ho\r\nSnoop Data (get data in E, F or S state)\r\n- Ivy Bridge-EP microarchitecture supports getting \r\ndata in E or F state\r\nSnpDataMigratory 1110 SNP Ci, \r\nCo,Ho\r\nSnoop to get data in M or E or F state\r\nSnpInvItoE 1000 SNP Ci, \r\nCo,Ho\r\nSnoop Invalidate to E state. To invalidate peer \r\ncaching agent, flushing any M state data to home\r\nSnpInvOwn 0100 SNP Ci, \r\nCo,Ho\r\nSnoop Invalidate Own (get data in E or M state)\r\n- Ivy Bridge-EP microarchitecture supports getting \r\ndata in E state\r\nSnpInvXtoI 0101 SNP Snoop Invalidate Writeback M to I state. To \r\ninvalidate peer caching agent, flushing any M state \r\ndata to home.\r\nWbEData 0110 DRS Hi Writeback data, downgrade to E state\r\nWbEDataPtl 1010 DRS Hi Partial (byte-masked) writeback data, downgrade to \r\nE state\r\nWbIData 0100 DRS Co,Hi Writeback data, downgrade to I state\r\nWbIDataPtl 1000 DRS Co,Hi Partial (byte-masked) writeback data, downgrade to \r\nI state\r\nWbMtoI 1100 HOM0 Co,Hi Write a cache line in M state back to memory and \r\ntransition its state to I.\r\nWbMtoE 1101 HOM0 Co,Hi Write a cache line in M state back to memory and \r\ntransition its state to E.\r\nWbMtoS 1110 HOM0 Hi Write a cache line in M state back to memory and \r\ntransition its state to S.\r\nWbSData 0101 DRS Co,Hi Writeback data, downgrade to S state\r\nWcWr 0001 NCB Co Write combinable write to non-coherent memory \r\nmapped I/O space\r\nWcWrPtl 1101 NCB Co Partial write combinable write to non-coherent \r\nmemory mapped I/O space\r\nName Opc MC Gen \r\nBy? Desc",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/5eb5fe6f-e639-4a3e-a1ab-3abdba5cd796/images/944d4530-081c-4ba6-951b-2e1382becb30.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041754Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d4561bb513289a340bf690a8f1af171302ef5bbd562f3c12077ebba4063c4390",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 372
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "```json\n{\"title\": \"Uncore Performance Monitoring\"}\n```"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "No response"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "```json\n{\n  \"Field Name\": \"date_published\",\n  \"Field Description\": \"The publication date of the document\",\n  \"Field Type\": \"string\",\n  \"Field Value\": \"February 2014\"\n}\n```"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "```json\n{\"location\": \"IRP\"}\n```"
        }
      ]
    }
  }
}