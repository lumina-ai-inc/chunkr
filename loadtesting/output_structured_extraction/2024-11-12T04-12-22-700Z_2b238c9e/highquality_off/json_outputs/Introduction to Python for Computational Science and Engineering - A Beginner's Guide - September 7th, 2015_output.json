{
  "file_name": "Introduction to Python for Computational Science and Engineering - A Beginner's Guide - September 7th, 2015.pdf",
  "task_id": "dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "b89c293d-da8a-4d5e-b9b9-239cc88cf19b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 1,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Introduction to\r\nPython for Computational Science and Engineering\r\n(A beginner’s guide)\r\nHans Fangohr\r\nFaculty of Engineering and the Environment\r\nUniversity of Southampton\r\nSeptember 7, 2015",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/b89c293d-da8a-4d5e-b9b9-239cc88cf19b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4f193f609351ce637daae30ed21107891811be3d7838cce9d1c61b1d453d1f3e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ce123dd1-699d-4fac-9af4-88610ea89a48",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 2,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "2",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/ce123dd1-699d-4fac-9af4-88610ea89a48.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=927d2b2c2a0ab21a7fb96a43b39a3a9e9e4c943781f4e8bde77766e3f1b98186",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 26
      },
      {
        "segments": [
          {
            "segment_id": "c091dbe0-6f05-44b0-bcb6-5c60a078db4d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 3,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Contents\r\n1 Introduction 9\r\n1.1 Computational Modelling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\r\n1.1.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\r\n1.1.2 Computational Modelling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\r\n1.1.3 Programming to support computational modelling . . . . . . . . . . . . . . . . 10\r\n1.2 Why Python for scientific computing? . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\r\n1.2.1 Optimisation strategies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\r\n1.2.2 Get it right first, then make it fast . . . . . . . . . . . . . . . . . . . . . . . . . 13\r\n1.2.3 Prototyping in Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\r\n1.3 Literature . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\r\n1.3.1 Recorded video lectures on Python for beginners . . . . . . . . . . . . . . . . . 13\r\n1.3.2 Python tutor mailing list . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\r\n1.4 Python version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\r\n1.5 This document . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\r\n1.6 Your feedback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\r\n2 A powerful calculator 17\r\n2.1 Python prompt and Read-Eval-Print Loop (REPL) . . . . . . . . . . . . . . . . . . . . 17\r\n2.2 Calculator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\r\n2.3 Integer division . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\r\n2.3.1 How to avoid integer division . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\r\n2.3.2 Why should I care about this division problem? . . . . . . . . . . . . . . . . . . 19\r\n2.4 Mathematical functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20\r\n2.5 Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\r\n2.5.1 Terminology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\r\n2.6 Impossible equations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\r\n2.6.1 The += notation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\r\n3 Data Types and Data Structures 25\r\n3.1 What type is it? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\r\n3.2 Numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\r\n3.2.1 Integers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\r\n3.2.2 Long integers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\r\n3.2.3 Floating Point numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\r\n3.2.4 Complex numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\r\n3.2.5 Functions applicable to all types of numbers . . . . . . . . . . . . . . . . . . . . 27\r\n3.3 Sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\r\n3.3.1 Sequence type 1: String . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28\r\n3.3.2 Sequence type 2: List . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29\r\n3.3.3 Sequence type 3: Tuples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31\r\n3",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/c091dbe0-6f05-44b0-bcb6-5c60a078db4d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b76f794ffdda16b926615d7995a9be57a6d6d3d317eb9850a27c3ba43e18b3a7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 1358
      },
      {
        "segments": [
          {
            "segment_id": "c091dbe0-6f05-44b0-bcb6-5c60a078db4d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 3,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Contents\r\n1 Introduction 9\r\n1.1 Computational Modelling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\r\n1.1.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\r\n1.1.2 Computational Modelling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\r\n1.1.3 Programming to support computational modelling . . . . . . . . . . . . . . . . 10\r\n1.2 Why Python for scientific computing? . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\r\n1.2.1 Optimisation strategies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\r\n1.2.2 Get it right first, then make it fast . . . . . . . . . . . . . . . . . . . . . . . . . 13\r\n1.2.3 Prototyping in Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\r\n1.3 Literature . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\r\n1.3.1 Recorded video lectures on Python for beginners . . . . . . . . . . . . . . . . . 13\r\n1.3.2 Python tutor mailing list . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\r\n1.4 Python version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\r\n1.5 This document . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\r\n1.6 Your feedback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\r\n2 A powerful calculator 17\r\n2.1 Python prompt and Read-Eval-Print Loop (REPL) . . . . . . . . . . . . . . . . . . . . 17\r\n2.2 Calculator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\r\n2.3 Integer division . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\r\n2.3.1 How to avoid integer division . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\r\n2.3.2 Why should I care about this division problem? . . . . . . . . . . . . . . . . . . 19\r\n2.4 Mathematical functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20\r\n2.5 Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\r\n2.5.1 Terminology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\r\n2.6 Impossible equations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\r\n2.6.1 The += notation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\r\n3 Data Types and Data Structures 25\r\n3.1 What type is it? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\r\n3.2 Numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\r\n3.2.1 Integers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\r\n3.2.2 Long integers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\r\n3.2.3 Floating Point numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\r\n3.2.4 Complex numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\r\n3.2.5 Functions applicable to all types of numbers . . . . . . . . . . . . . . . . . . . . 27\r\n3.3 Sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\r\n3.3.1 Sequence type 1: String . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28\r\n3.3.2 Sequence type 2: List . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29\r\n3.3.3 Sequence type 3: Tuples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31\r\n3",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/c091dbe0-6f05-44b0-bcb6-5c60a078db4d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b76f794ffdda16b926615d7995a9be57a6d6d3d317eb9850a27c3ba43e18b3a7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 1358
      },
      {
        "segments": [
          {
            "segment_id": "8b2e1733-8b96-4bb7-9996-b6c020f04ac0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 4,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "4 CONTENTS\r\n3.3.4 Indexing sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32\r\n3.3.5 Slicing sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\r\n3.3.6 Dictionaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\r\n3.4 Passing arguments to functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\r\n3.4.1 Call by value . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\r\n3.4.2 Call by reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38\r\n3.4.3 Argument passing in Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39\r\n3.4.4 Performance considerations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40\r\n3.4.5 Inadvertent modification of data . . . . . . . . . . . . . . . . . . . . . . . . . . 41\r\n3.4.6 Copying objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\r\n3.5 Equality and Identity/Sameness . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\r\n3.5.1 Equality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\r\n3.5.2 Identity / Sameness . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\r\n3.5.3 Example: Equality and identity . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\r\n4 Introspection 45\r\n4.1 dir() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\r\n4.1.1 Magic names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\r\n4.2 type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\r\n4.3 isinstance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47\r\n4.4 help . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47\r\n4.5 Docstrings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49\r\n5 Input and Output 51\r\n5.1 Printing to standard output (normally the screen) . . . . . . . . . . . . . . . . . . . . 51\r\n5.1.1 Simple print (not compatible with Python 3.x) . . . . . . . . . . . . . . . . . . 51\r\n5.1.2 Formatted printing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\r\n5.1.3 “str” and “ str ” . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\r\n5.1.4 “repr” and “ repr ” . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\r\n5.1.5 Changes from Python 2 to Python 3: print . . . . . . . . . . . . . . . . . . . . 54\r\n5.1.6 Changes from Python 2 to Python 3: formatting of strings . . . . . . . . . . . 54\r\n5.2 Reading and writing files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55\r\n5.2.1 File reading examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\r\n6 Control Flow 59\r\n6.1 Basics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\r\n6.1.1 Conditionals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\r\n6.2 If-then-else . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\r\n6.3 For loop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\r\n6.4 While loop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62\r\n6.5 Relational operators (comparisons) in if and while statements . . . . . . . . . . . . . 62\r\n6.6 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63\r\n6.6.1 Raising Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64\r\n6.6.2 Creating our own exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65\r\n6.6.3 LBYL vs EAFP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65\r\n7 Functions and modules 67\r\n7.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67\r\n7.2 Using functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67\r\n7.3 Defining functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68\r\n7.4 Default values and optional parameters . . . . . . . . . . . . . . . . . . . . . . . . . . 70",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/8b2e1733-8b96-4bb7-9996-b6c020f04ac0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ce9b76779cbccaa0dd866cbde6ba99fe23c76e6e5fc263b1f612c99bf6ccbe53",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 1701
      },
      {
        "segments": [
          {
            "segment_id": "8b2e1733-8b96-4bb7-9996-b6c020f04ac0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 4,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "4 CONTENTS\r\n3.3.4 Indexing sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32\r\n3.3.5 Slicing sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\r\n3.3.6 Dictionaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\r\n3.4 Passing arguments to functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\r\n3.4.1 Call by value . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\r\n3.4.2 Call by reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38\r\n3.4.3 Argument passing in Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39\r\n3.4.4 Performance considerations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40\r\n3.4.5 Inadvertent modification of data . . . . . . . . . . . . . . . . . . . . . . . . . . 41\r\n3.4.6 Copying objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\r\n3.5 Equality and Identity/Sameness . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\r\n3.5.1 Equality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\r\n3.5.2 Identity / Sameness . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\r\n3.5.3 Example: Equality and identity . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\r\n4 Introspection 45\r\n4.1 dir() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\r\n4.1.1 Magic names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\r\n4.2 type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\r\n4.3 isinstance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47\r\n4.4 help . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47\r\n4.5 Docstrings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49\r\n5 Input and Output 51\r\n5.1 Printing to standard output (normally the screen) . . . . . . . . . . . . . . . . . . . . 51\r\n5.1.1 Simple print (not compatible with Python 3.x) . . . . . . . . . . . . . . . . . . 51\r\n5.1.2 Formatted printing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\r\n5.1.3 “str” and “ str ” . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\r\n5.1.4 “repr” and “ repr ” . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\r\n5.1.5 Changes from Python 2 to Python 3: print . . . . . . . . . . . . . . . . . . . . 54\r\n5.1.6 Changes from Python 2 to Python 3: formatting of strings . . . . . . . . . . . 54\r\n5.2 Reading and writing files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55\r\n5.2.1 File reading examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\r\n6 Control Flow 59\r\n6.1 Basics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\r\n6.1.1 Conditionals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\r\n6.2 If-then-else . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\r\n6.3 For loop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\r\n6.4 While loop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62\r\n6.5 Relational operators (comparisons) in if and while statements . . . . . . . . . . . . . 62\r\n6.6 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63\r\n6.6.1 Raising Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64\r\n6.6.2 Creating our own exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65\r\n6.6.3 LBYL vs EAFP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65\r\n7 Functions and modules 67\r\n7.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67\r\n7.2 Using functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67\r\n7.3 Defining functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68\r\n7.4 Default values and optional parameters . . . . . . . . . . . . . . . . . . . . . . . . . . 70",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/8b2e1733-8b96-4bb7-9996-b6c020f04ac0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ce9b76779cbccaa0dd866cbde6ba99fe23c76e6e5fc263b1f612c99bf6ccbe53",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 1701
      },
      {
        "segments": [
          {
            "segment_id": "ec0676e1-3c4a-49ff-8191-14ce2bd98370",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 5,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "CONTENTS 5\r\n7.5 Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71\r\n7.5.1 Importing modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71\r\n7.5.2 Creating modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\r\n7.5.3 Use of name . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\r\n7.5.4 Example 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\r\n7.5.5 Example 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74\r\n8 Functional tools 77\r\n8.1 Anonymous functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\r\n8.2 Map . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78\r\n8.3 Filter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78\r\n8.4 List comprehension . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79\r\n8.5 Reduce . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80\r\n8.6 Why not just use for-loops? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82\r\n8.7 Speed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83\r\n9 Common tasks 85\r\n9.1 Many ways to compute a series . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85\r\n9.2 Sorting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\r\n10 From Matlab to Python 91\r\n10.1 Important commands . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\r\n10.1.1 The for-loop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\r\n10.1.2 The if-then statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\r\n10.1.3 Indexing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\r\n10.1.4 Matrices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92\r\n11 Python shells 93\r\n11.1 IDLE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\r\n11.2 Python (command line) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\r\n11.3 Interactive Python (IPython) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\r\n11.3.1 IPython console . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\r\n11.3.2 IPython Notebook . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94\r\n11.4 Spyder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\r\n11.5 Editors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\r\n12 Symbolic computation 97\r\n12.1 SymPy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\r\n12.1.1 Symbols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\r\n12.1.2 isympy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\r\n12.1.3 Numeric types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\r\n12.1.4 Differentiation and Integration . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\r\n12.1.5 Ordinary differential equations . . . . . . . . . . . . . . . . . . . . . . . . . . . 101\r\n12.1.6 Series expansions and plotting . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\r\n12.1.7 Linear equations and matrix inversion . . . . . . . . . . . . . . . . . . . . . . . 104\r\n12.1.8 Non linear equations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106\r\n12.1.9 Output: LATEX interface and pretty-printing . . . . . . . . . . . . . . . . . . . . 107\r\n12.1.10 Automatic generation of C code . . . . . . . . . . . . . . . . . . . . . . . . . . 108\r\n12.2 Related tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/ec0676e1-3c4a-49ff-8191-14ce2bd98370.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=348d14875f4bf49e58d8fa9fd4e6cddde68ef44623ffb14140eaab0c719c3a5c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 1624
      },
      {
        "segments": [
          {
            "segment_id": "ec0676e1-3c4a-49ff-8191-14ce2bd98370",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 5,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "CONTENTS 5\r\n7.5 Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71\r\n7.5.1 Importing modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71\r\n7.5.2 Creating modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\r\n7.5.3 Use of name . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\r\n7.5.4 Example 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\r\n7.5.5 Example 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74\r\n8 Functional tools 77\r\n8.1 Anonymous functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\r\n8.2 Map . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78\r\n8.3 Filter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78\r\n8.4 List comprehension . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79\r\n8.5 Reduce . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80\r\n8.6 Why not just use for-loops? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82\r\n8.7 Speed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83\r\n9 Common tasks 85\r\n9.1 Many ways to compute a series . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85\r\n9.2 Sorting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\r\n10 From Matlab to Python 91\r\n10.1 Important commands . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\r\n10.1.1 The for-loop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\r\n10.1.2 The if-then statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\r\n10.1.3 Indexing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\r\n10.1.4 Matrices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92\r\n11 Python shells 93\r\n11.1 IDLE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\r\n11.2 Python (command line) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\r\n11.3 Interactive Python (IPython) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\r\n11.3.1 IPython console . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\r\n11.3.2 IPython Notebook . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94\r\n11.4 Spyder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\r\n11.5 Editors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\r\n12 Symbolic computation 97\r\n12.1 SymPy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\r\n12.1.1 Symbols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\r\n12.1.2 isympy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\r\n12.1.3 Numeric types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\r\n12.1.4 Differentiation and Integration . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\r\n12.1.5 Ordinary differential equations . . . . . . . . . . . . . . . . . . . . . . . . . . . 101\r\n12.1.6 Series expansions and plotting . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\r\n12.1.7 Linear equations and matrix inversion . . . . . . . . . . . . . . . . . . . . . . . 104\r\n12.1.8 Non linear equations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106\r\n12.1.9 Output: LATEX interface and pretty-printing . . . . . . . . . . . . . . . . . . . . 107\r\n12.1.10 Automatic generation of C code . . . . . . . . . . . . . . . . . . . . . . . . . . 108\r\n12.2 Related tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/ec0676e1-3c4a-49ff-8191-14ce2bd98370.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=348d14875f4bf49e58d8fa9fd4e6cddde68ef44623ffb14140eaab0c719c3a5c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 1624
      },
      {
        "segments": [
          {
            "segment_id": "8f4f4a62-e243-4751-b110-9841b5b405f9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 6,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "6 CONTENTS\r\n13 Numerical Computation 111\r\n13.1 Numbers and numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\r\n13.1.1 Limitations of number types . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\r\n13.1.2 Using floating point numbers (carelessly) . . . . . . . . . . . . . . . . . . . . . 113\r\n13.1.3 Using floating point numbers carefully 1 . . . . . . . . . . . . . . . . . . . . . . 114\r\n13.1.4 Using floating point numbers carefully 2 . . . . . . . . . . . . . . . . . . . . . . 114\r\n13.1.5 Symbolic calculation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\r\n13.1.6 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\r\n13.1.7 Exercise: infinite or finite loop . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\r\n14 Numerical Python (numpy): arrays 119\r\n14.1 Numpy introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\r\n14.1.1 History . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\r\n14.1.2 Arrays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\r\n14.1.3 Convert from array to list or tuple . . . . . . . . . . . . . . . . . . . . . . . . . 121\r\n14.1.4 Standard Linear Algebra operations . . . . . . . . . . . . . . . . . . . . . . . . 122\r\n14.1.5 More numpy examples. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\r\n14.1.6 Numpy for Matlab users . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\r\n15 Visualising Data 125\r\n15.1 Matplotlib (Pylab) – plotting y=f(x), (and a bit more) . . . . . . . . . . . . . . . . . . 125\r\n15.1.1 Matplotlib and Pylab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125\r\n15.1.2 First example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126\r\n15.1.3 How to import matplotlib, pylab, pyplot, numpy and all that . . . . . . . . . . 126\r\n15.1.4 IPython’s inline mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128\r\n15.1.5 Saving the figure to a file . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128\r\n15.1.6 Interactive mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128\r\n15.1.7 Fine tuning your plot . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129\r\n15.1.8 Plotting more than one curve . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132\r\n15.1.9 Histograms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134\r\n15.1.10 Visualising matrix data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135\r\n15.1.11 Plots of z = f(x, y) and other features of Matplotlib . . . . . . . . . . . . . . . 138\r\n15.2 Visual Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\r\n15.2.1 Basics, rotating and zooming . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\r\n15.2.2 Setting the frame rate for animations . . . . . . . . . . . . . . . . . . . . . . . 140\r\n15.2.3 Tracking trajectories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141\r\n15.2.4 Connecting objects (Cylinders, springs, . . . ) . . . . . . . . . . . . . . . . . . . . 142\r\n15.2.5 3d vision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143\r\n15.3 Visualising higher dimensional data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144\r\n15.3.1 Mayavi, Paraview, Visit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144\r\n15.3.2 Writing vtk files from Python (pyvtk) . . . . . . . . . . . . . . . . . . . . . . . 144\r\n16 Numerical Methods using Python (scipy) 145\r\n16.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145\r\n16.2 SciPy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145\r\n16.3 Numerical integration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147\r\n16.3.1 Exercise: integrate a function . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147\r\n16.3.2 Exercise: plot before you integrate . . . . . . . . . . . . . . . . . . . . . . . . . 147\r\n16.4 Solving ordinary differential equations . . . . . . . . . . . . . . . . . . . . . . . . . . . 148\r\n16.4.1 Exercise: using odeint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/8f4f4a62-e243-4751-b110-9841b5b405f9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=197a753c5800fba5296507ca88c23a1b27eafe6adfcf61e782574c4a193cdb58",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 1578
      },
      {
        "segments": [
          {
            "segment_id": "8f4f4a62-e243-4751-b110-9841b5b405f9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 6,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "6 CONTENTS\r\n13 Numerical Computation 111\r\n13.1 Numbers and numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\r\n13.1.1 Limitations of number types . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\r\n13.1.2 Using floating point numbers (carelessly) . . . . . . . . . . . . . . . . . . . . . 113\r\n13.1.3 Using floating point numbers carefully 1 . . . . . . . . . . . . . . . . . . . . . . 114\r\n13.1.4 Using floating point numbers carefully 2 . . . . . . . . . . . . . . . . . . . . . . 114\r\n13.1.5 Symbolic calculation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\r\n13.1.6 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\r\n13.1.7 Exercise: infinite or finite loop . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\r\n14 Numerical Python (numpy): arrays 119\r\n14.1 Numpy introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\r\n14.1.1 History . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\r\n14.1.2 Arrays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\r\n14.1.3 Convert from array to list or tuple . . . . . . . . . . . . . . . . . . . . . . . . . 121\r\n14.1.4 Standard Linear Algebra operations . . . . . . . . . . . . . . . . . . . . . . . . 122\r\n14.1.5 More numpy examples. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\r\n14.1.6 Numpy for Matlab users . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\r\n15 Visualising Data 125\r\n15.1 Matplotlib (Pylab) – plotting y=f(x), (and a bit more) . . . . . . . . . . . . . . . . . . 125\r\n15.1.1 Matplotlib and Pylab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125\r\n15.1.2 First example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126\r\n15.1.3 How to import matplotlib, pylab, pyplot, numpy and all that . . . . . . . . . . 126\r\n15.1.4 IPython’s inline mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128\r\n15.1.5 Saving the figure to a file . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128\r\n15.1.6 Interactive mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128\r\n15.1.7 Fine tuning your plot . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129\r\n15.1.8 Plotting more than one curve . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132\r\n15.1.9 Histograms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134\r\n15.1.10 Visualising matrix data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135\r\n15.1.11 Plots of z = f(x, y) and other features of Matplotlib . . . . . . . . . . . . . . . 138\r\n15.2 Visual Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\r\n15.2.1 Basics, rotating and zooming . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\r\n15.2.2 Setting the frame rate for animations . . . . . . . . . . . . . . . . . . . . . . . 140\r\n15.2.3 Tracking trajectories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141\r\n15.2.4 Connecting objects (Cylinders, springs, . . . ) . . . . . . . . . . . . . . . . . . . . 142\r\n15.2.5 3d vision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143\r\n15.3 Visualising higher dimensional data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144\r\n15.3.1 Mayavi, Paraview, Visit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144\r\n15.3.2 Writing vtk files from Python (pyvtk) . . . . . . . . . . . . . . . . . . . . . . . 144\r\n16 Numerical Methods using Python (scipy) 145\r\n16.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145\r\n16.2 SciPy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145\r\n16.3 Numerical integration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147\r\n16.3.1 Exercise: integrate a function . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147\r\n16.3.2 Exercise: plot before you integrate . . . . . . . . . . . . . . . . . . . . . . . . . 147\r\n16.4 Solving ordinary differential equations . . . . . . . . . . . . . . . . . . . . . . . . . . . 148\r\n16.4.1 Exercise: using odeint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/8f4f4a62-e243-4751-b110-9841b5b405f9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=197a753c5800fba5296507ca88c23a1b27eafe6adfcf61e782574c4a193cdb58",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 1578
      },
      {
        "segments": [
          {
            "segment_id": "11ac0ad5-162f-416e-ad86-c392e00e0c5c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 7,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "CONTENTS 7\r\n16.5 Root finding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150\r\n16.5.1 Root finding using the bisection method . . . . . . . . . . . . . . . . . . . . . . 150\r\n16.5.2 Exercise: root finding using the bisect method . . . . . . . . . . . . . . . . . . 150\r\n16.5.3 Root finding using the fsolve funcion . . . . . . . . . . . . . . . . . . . . . . . 151\r\n16.6 Interpolation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151\r\n16.7 Curve fitting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\r\n16.8 Fourier transforms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156\r\n16.9 Optimisation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158\r\n16.10Other numerical methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161\r\n16.11scipy.io: Scipy-input output . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161\r\n17 Where to go from here? 165\r\n17.1 Advanced programming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\r\n17.2 Compiled programming language . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\r\n17.3 Testing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\r\n17.4 Simulation models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\r\n17.5 Software engineering for research codes . . . . . . . . . . . . . . . . . . . . . . . . . . . 166\r\n17.6 Data and visualisation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166\r\n17.7 Version control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166\r\n17.8 Parallel execution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/11ac0ad5-162f-416e-ad86-c392e00e0c5c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f35567e6c2c1c196f29ea46bf1e613dc4c95da51f3917e26ec845286bd1cdcdb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 718
      },
      {
        "segments": [
          {
            "segment_id": "11ac0ad5-162f-416e-ad86-c392e00e0c5c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 7,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "CONTENTS 7\r\n16.5 Root finding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150\r\n16.5.1 Root finding using the bisection method . . . . . . . . . . . . . . . . . . . . . . 150\r\n16.5.2 Exercise: root finding using the bisect method . . . . . . . . . . . . . . . . . . 150\r\n16.5.3 Root finding using the fsolve funcion . . . . . . . . . . . . . . . . . . . . . . . 151\r\n16.6 Interpolation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151\r\n16.7 Curve fitting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\r\n16.8 Fourier transforms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156\r\n16.9 Optimisation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158\r\n16.10Other numerical methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161\r\n16.11scipy.io: Scipy-input output . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161\r\n17 Where to go from here? 165\r\n17.1 Advanced programming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\r\n17.2 Compiled programming language . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\r\n17.3 Testing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\r\n17.4 Simulation models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\r\n17.5 Software engineering for research codes . . . . . . . . . . . . . . . . . . . . . . . . . . . 166\r\n17.6 Data and visualisation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166\r\n17.7 Version control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166\r\n17.8 Parallel execution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/11ac0ad5-162f-416e-ad86-c392e00e0c5c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f35567e6c2c1c196f29ea46bf1e613dc4c95da51f3917e26ec845286bd1cdcdb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 718
      },
      {
        "segments": [
          {
            "segment_id": "53b8a880-3574-4844-b851-2104d3b47140",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 8,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "8 CONTENTS",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/53b8a880-3574-4844-b851-2104d3b47140.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=df11d4c4f0695df8854b181ae4a94a6f4f8045d9b12d86baeb742a0e0dc7e51c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "da228a8a-7017-4167-be33-20e698919aca",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 9,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 1\r\nIntroduction\r\nThis text summarises a number of core ideas relevant to Computational Engineering and Scientific\r\nComputing using Python. The emphasis is on introducing some basic Python (programming) concepts\r\nthat are relevant for numerical algorithms. The later chapters touch upon numerical libraries such\r\nas numpy and scipy each of which deserves much more space than provided here. We aim to enable\r\nthe reader to learn independently how to use other functionality of these libraries using the available\r\ndocumentation (online and through the packages itself).\r\n1.1 Computational Modelling\r\n1.1.1 Introduction\r\nIncreasingly, processes and systems are researched or developed through computer simulations: new\r\naircraft prototypes such as for the recent A380 are first designed and tested virtually through computer\r\nsimulations. With the ever increasing computational power available through supercomputers, clusters\r\nof computers and even desktop and laptop machines, this trend is likely to continue.\r\nComputer simulations are routinely used in fundamental research to help understand experimental\r\nmeasurements, and to replace – for example – growth and fabrication of expensive samples/experiments\r\nwhere possible. In an industrial context, product and device design can often be done much more\r\ncost effectively if carried out virtually through simulation rather than through building and testing\r\nprototypes. This is in particular so in areas where samples are expensive such as nanoscience (where it\r\nis expensive to create small things) and aerospace industry (where it is expensive to build large things).\r\nThere are also situations where certain experiments can only be carried out virtually (ranging from\r\nastrophysics to study of effects of large scale nuclear or chemical accidents). Computational modelling,\r\nincluding use of computational tools to post-process, analyse and visualise data, has been used in\r\nengineering, physics and chemistry for many decades but is becoming more important due to the\r\ncheap availability of computational resources. Computational Modelling is also starting to play a\r\nmore important role in studies of biological systems, the economy, archeology, medicine, health care,\r\nand many other domains.\r\n1.1.2 Computational Modelling\r\nTo study a process with a computer simulation we distinguish two steps: the first one is to develop a\r\nmodel of the real system. When studying the motion of a small object, such as a penny, say, under the\r\ninfluence of gravity, we may be able to ignore friction of air: our model — which might only consider\r\nthe gravitational force and the penny’s inertia, i.e. a(t) = F/m = −9.81m/s\r\n2 — is an approximation\r\nof the real system. The model will normally allow us to express the behaviour of the system (in\r\n9",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/da228a8a-7017-4167-be33-20e698919aca.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=33c0c2719136f937d1e8b46bab609723bd35c2b6b86da32cf9dd340c478b3b98",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 423
      },
      {
        "segments": [
          {
            "segment_id": "e88cc930-ec4c-42af-a57b-c1f7d7ca1761",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 10,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "10 CHAPTER 1. INTRODUCTION\r\nsome approximated form) through mathematical equations, which often involve ordinary differential\r\nequations (ODEs) or partial differential equatons (PDEs).\r\nIn the natural sciences such as physics, chemistry and related engineering, it is often not so difficult\r\nto find a suitable model, although the resulting equations tend to be very difficult to solve, and can\r\nin most cases not be solved analytically at all.\r\nOn the other hand, in subjects that are not as well described through a mathematical framework\r\nand depend on behaviour of objects whose actions are impossible to predict deterministically (such\r\nas humans), it is much more difficult to find a good model to describe reality. As a rule of thumb,\r\nin these disciplines the resulting equations are easier to solve, but they are harder to find and the\r\nvalidity of a model needs to be questioned much more. Typical examples are attempts to simulate the\r\neconomy, the use of global resources, the behaviour of a panicking crowd, etc.\r\nSo far, we have just discussed the development of models to describe reality, and using these models\r\ndoes not necessarily involve any computers or numerical work at all. In fact, if a model’s equation can\r\nbe solved analytically, then one should do this and write down the solution to the equation.\r\nIn practice, hardly any model equations of systems of interest can be solved analytically, and this\r\nis where the computer comes in: using numerical methods, we can at least study the model for a\r\nparticular set of boundary conditions. For the example considered above, we may not be able to easily\r\nsee from a numerical solution that the penny’s velocity under the influence of gravity will change\r\nlinearly with time (which we can read easily from the analytical solution that is available for this\r\nsimple system: v(t) = t · 9.81m/s\r\n2 + v0).\r\nThe numerical solution that can be computed using a computer would consist of data that shows\r\nhow the velocity changes over time for a particular initial velocity v0 (v0 is a boundary condition here).\r\nThe computer program would report a long lists of two numbers keeping the (i) value of time ti for\r\nwhich a particular (ii) value of the velocity vi has been computed. By plotting all vi against ti, or by\r\nfitting a curve through the data, we may be able to understand the trend from the data (which we\r\ncan just see from the analytical solution of course).\r\nIt is clearly desirable to find an analytical solutions wherever possible but the number of problems\r\nwhere this is possible is small. Usually, the obtaining numerical result of a computer simulation is very\r\nuseful (despite the shortcomings of the numerical results in comparison to an analytical expression)\r\nbecause it is the only possible way to study the system at all.\r\nThe name computational modelling derives from the two steps: (i) modelling, i.e. finding a model\r\ndescription of a real system, and (ii) solving the resulting model equations using computational meth\u0002ods because this is the only way the equations can be solved at all.\r\n1.1.3 Programming to support computational modelling\r\nA large number of packages exist that provide computational modelling capabilities. If these satisfy the\r\nresearch or design needs, and any data processing and visualisation is appropriately supported through\r\nexisting tools, one can carry out computational modelling studies without any deeper programming\r\nknowledge.\r\nIn a research environment – both in academia and research on new products/ideas/... in industry\r\n– one often reaches a point where existing packages will not be able to perform a required simulation\r\ntask, or where more can be learned from analysing existing data in news ways etc.\r\nAt that point, programming skills are required. It is also generally useful to have a broad under\u0002standing of the building blocks of software and basic ideas of software engineering as we use more and\r\nmore devices that are software-controlled.\r\nIt is often forgotten that there is nothing the computer can do that we as humans cannot do. The\r\ncomputer can do it much faster, though, and also with making far fewer mistakes. There is thus no\r\nmagic in computations a computer carries out: they could have been done by humans, and – in fact\r\n– were for many years (see for example Wikipedia entry on Human Computer).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/e88cc930-ec4c-42af-a57b-c1f7d7ca1761.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=467dff509f060f4bd252a8e68331825e1e00b6f98647650074f78621bc100694",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 717
      },
      {
        "segments": [
          {
            "segment_id": "e88cc930-ec4c-42af-a57b-c1f7d7ca1761",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 10,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "10 CHAPTER 1. INTRODUCTION\r\nsome approximated form) through mathematical equations, which often involve ordinary differential\r\nequations (ODEs) or partial differential equatons (PDEs).\r\nIn the natural sciences such as physics, chemistry and related engineering, it is often not so difficult\r\nto find a suitable model, although the resulting equations tend to be very difficult to solve, and can\r\nin most cases not be solved analytically at all.\r\nOn the other hand, in subjects that are not as well described through a mathematical framework\r\nand depend on behaviour of objects whose actions are impossible to predict deterministically (such\r\nas humans), it is much more difficult to find a good model to describe reality. As a rule of thumb,\r\nin these disciplines the resulting equations are easier to solve, but they are harder to find and the\r\nvalidity of a model needs to be questioned much more. Typical examples are attempts to simulate the\r\neconomy, the use of global resources, the behaviour of a panicking crowd, etc.\r\nSo far, we have just discussed the development of models to describe reality, and using these models\r\ndoes not necessarily involve any computers or numerical work at all. In fact, if a model’s equation can\r\nbe solved analytically, then one should do this and write down the solution to the equation.\r\nIn practice, hardly any model equations of systems of interest can be solved analytically, and this\r\nis where the computer comes in: using numerical methods, we can at least study the model for a\r\nparticular set of boundary conditions. For the example considered above, we may not be able to easily\r\nsee from a numerical solution that the penny’s velocity under the influence of gravity will change\r\nlinearly with time (which we can read easily from the analytical solution that is available for this\r\nsimple system: v(t) = t · 9.81m/s\r\n2 + v0).\r\nThe numerical solution that can be computed using a computer would consist of data that shows\r\nhow the velocity changes over time for a particular initial velocity v0 (v0 is a boundary condition here).\r\nThe computer program would report a long lists of two numbers keeping the (i) value of time ti for\r\nwhich a particular (ii) value of the velocity vi has been computed. By plotting all vi against ti, or by\r\nfitting a curve through the data, we may be able to understand the trend from the data (which we\r\ncan just see from the analytical solution of course).\r\nIt is clearly desirable to find an analytical solutions wherever possible but the number of problems\r\nwhere this is possible is small. Usually, the obtaining numerical result of a computer simulation is very\r\nuseful (despite the shortcomings of the numerical results in comparison to an analytical expression)\r\nbecause it is the only possible way to study the system at all.\r\nThe name computational modelling derives from the two steps: (i) modelling, i.e. finding a model\r\ndescription of a real system, and (ii) solving the resulting model equations using computational meth\u0002ods because this is the only way the equations can be solved at all.\r\n1.1.3 Programming to support computational modelling\r\nA large number of packages exist that provide computational modelling capabilities. If these satisfy the\r\nresearch or design needs, and any data processing and visualisation is appropriately supported through\r\nexisting tools, one can carry out computational modelling studies without any deeper programming\r\nknowledge.\r\nIn a research environment – both in academia and research on new products/ideas/... in industry\r\n– one often reaches a point where existing packages will not be able to perform a required simulation\r\ntask, or where more can be learned from analysing existing data in news ways etc.\r\nAt that point, programming skills are required. It is also generally useful to have a broad under\u0002standing of the building blocks of software and basic ideas of software engineering as we use more and\r\nmore devices that are software-controlled.\r\nIt is often forgotten that there is nothing the computer can do that we as humans cannot do. The\r\ncomputer can do it much faster, though, and also with making far fewer mistakes. There is thus no\r\nmagic in computations a computer carries out: they could have been done by humans, and – in fact\r\n– were for many years (see for example Wikipedia entry on Human Computer).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/e88cc930-ec4c-42af-a57b-c1f7d7ca1761.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=467dff509f060f4bd252a8e68331825e1e00b6f98647650074f78621bc100694",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 717
      },
      {
        "segments": [
          {
            "segment_id": "e75200c2-ed60-4e18-be80-ff6cc67587ce",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 11,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "1.2. WHY PYTHON FOR SCIENTIFIC COMPUTING? 11\r\nUnderstanding how to build a computer simulation comes roughly down to: (i) finding the model\r\n(often this means finding the right equations), (ii) knowing how to solve these equations numerically,\r\n(ii) to implement the methods to compute these solutions (this is the programming bit).\r\n1.2 Why Python for scientific computing?\r\nThe design focus on the Python language is on productivity and code readability, for example through:\r\n• Interactive python console\r\n• Very clear, readable syntax through whitespace indentation\r\n• Strong introspection capabilities\r\n• Full modularity, supporting hierarchical packages\r\n• Exception-based error handling\r\n• Dynamic data types & automatic memory management\r\nAs Python is an interpreted language, and it runs many times slower than compiled code, one might\r\nask why anybody should consider such a ’slow’ language for computer simulations?\r\nThere are two replies to this criticism:\r\n1. Implementation time versus execution time: It is not the execution time alone that contributes\r\nto the cost of a computational project: one also needs to consider the cost of the development\r\nand maintenance work.\r\nIn the early days of scientific computing (say in the 1960/70/80), compute time was so expensive\r\nthat it made perfect sense to invest many person months of a programmer’s time to improve the\r\nperformance of a calculation by a few percent.\r\nNowadays, however, the CPU cycles have become much cheaper than the programmer’s time.\r\nFor research codes which often run only a small number of times (before the researchers move\r\non to the next problem), it may be economic to accept that the code runs only at 25% of the\r\nexpected possible speed if this saves, say, a month of a researcher’s (or programmers) time. For\r\nexample: if the execution time of the piece of code is 10 hours, and one can predict that it will\r\nrun about 100 times, then the total execution time is approximately 1000 hours. It would be\r\ngreat if this could be reduced to 25% and one could save 750 (CPU) hours. On the other hand,\r\nis an extra wait (about a month) and the cost of 750 CPU hours worth investing one month of a\r\nperson’s time [who could do something else while the calculation is running]? Often, the answer\r\nis not.\r\nCode readability & maintenance - short code, fewer bugs: A related issue is that a research code\r\nis not only used for one project, but carries on to be used again and again, evolves, grows,\r\nbifurcates etc. In this case, it is often justified to invest more time to make the code fast. At\r\nthe same time, a significant amount of programmer time will go into (i) introducing the required\r\nchanges, (ii) testing them even before work on speed optimisation of the changed version can\r\nstart. To be able to maintain, extend and modify a code in often unforeseen ways, it can only\r\nbe helpful to use a language that is easy to read and of great expressive power.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/e75200c2-ed60-4e18-be80-ff6cc67587ce.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f75e13782ebd1de354800c29bd500813524b7416503e9cd9a5666639f7861546",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 495
      },
      {
        "segments": [
          {
            "segment_id": "3d67d255-d56b-43ef-bf86-f99544ffbd90",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 12,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "12 CHAPTER 1. INTRODUCTION\r\n2. Well-written Python code can be very fast if time critical parts in executed through compiled\r\nlanguage.\r\nTypically, less than 5% percent of the code base of a simulation project need more than 95% of\r\nthe execution time. As long as these calculations are done very efficiently, one doesn’t need to\r\nworry about all other parts of the code as the overall time their execution takes is insignificant.\r\nThe compute intense part of the program should to be tuned to reach optimal performance.\r\nPython offers a number of options.\r\n• For example, the numpy Python extension provides a Python interface to the compiled and\r\nefficient LAPACK libraries that are the quasi-standard in numerical linear algebra. If the\r\nproblems under study can be formulated such that eventually large systems of algebraic\r\nequations have to be solved, or eigenvalues computed, etc, then the compiled code in the\r\nLAPACK library can be used (through the Python-numpy package). At this stage, the\r\ncalculations are carried out with the same performance of Fortran/C as it is essentially\r\nFortran/C code that is used. Matlab, by the way, exploits exactly this: the Matlab scripting\r\nlanguage is very slow (about 10 time slower than Python), but Matlab gains its power from\r\ndelegating the matix operation to the compiled LAPACK libraries.\r\n• Existing numerical C/Fortran libraries can be interfaced to be usable from within Python\r\n(using for example Swig, Boost.Python and Cython).\r\n• Python can be extended through compiled languages if the computationally demanding\r\npart of the problem is algorithmically non-standard and no existing libraries can be used.\r\nCommonly used are C, Fortran and C++ to implement fast extensions.\r\n• We list some tools that are used to use compiled code from Python:\r\n. The scipy.weave extension is useful if just a short expression needs to be expressed\r\nin C.\r\n. The Cython interface is growing in popularity to (i) semi-automatically declare variable\r\ntypes in Python code, to translate that code to C (automatically) and to then use the\r\ncompiled C code from Python. Cython is also used to quickly wrap an existing C\r\nlibrary with an interface so the C library can be used from Python.\r\n. Boost.Python is specialised for wrapping C++ code in Python.\r\nThe conclusion is that Python is ”fast enough” for most computational tasks, and that its user friendly\r\nhigh-level language often makes up for reduced speed in comparison to compiled lower-level languages.\r\nCombining Python with tailor-written compiled code for the performance critical parts of the code,\r\nresults in virtually optimal speed in most cases.\r\n1.2.1 Optimisation strategies\r\nWe generally understand reduction of execution time when discussing “code optimisation” in the\r\ncontext of computational modelling, and we essentially like to carry out the required calculations as\r\nfast as possible. (Sometimes we need to reduce the amount of RAM, the amount of data input output\r\nto disk or the network.) At the same time, we need to make sure that we do not invest inappropriate\r\namounts of programming time to achieve this speed up: as always there needs to be a balance between\r\nthe programmers’ time and the improvement we can gain from this.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/3d67d255-d56b-43ef-bf86-f99544ffbd90.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=abc254d13f0bc706d959d94f0c0c8c934ad75901739b5e972df2ca87869c8144",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 523
      },
      {
        "segments": [
          {
            "segment_id": "3d67d255-d56b-43ef-bf86-f99544ffbd90",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 12,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "12 CHAPTER 1. INTRODUCTION\r\n2. Well-written Python code can be very fast if time critical parts in executed through compiled\r\nlanguage.\r\nTypically, less than 5% percent of the code base of a simulation project need more than 95% of\r\nthe execution time. As long as these calculations are done very efficiently, one doesn’t need to\r\nworry about all other parts of the code as the overall time their execution takes is insignificant.\r\nThe compute intense part of the program should to be tuned to reach optimal performance.\r\nPython offers a number of options.\r\n• For example, the numpy Python extension provides a Python interface to the compiled and\r\nefficient LAPACK libraries that are the quasi-standard in numerical linear algebra. If the\r\nproblems under study can be formulated such that eventually large systems of algebraic\r\nequations have to be solved, or eigenvalues computed, etc, then the compiled code in the\r\nLAPACK library can be used (through the Python-numpy package). At this stage, the\r\ncalculations are carried out with the same performance of Fortran/C as it is essentially\r\nFortran/C code that is used. Matlab, by the way, exploits exactly this: the Matlab scripting\r\nlanguage is very slow (about 10 time slower than Python), but Matlab gains its power from\r\ndelegating the matix operation to the compiled LAPACK libraries.\r\n• Existing numerical C/Fortran libraries can be interfaced to be usable from within Python\r\n(using for example Swig, Boost.Python and Cython).\r\n• Python can be extended through compiled languages if the computationally demanding\r\npart of the problem is algorithmically non-standard and no existing libraries can be used.\r\nCommonly used are C, Fortran and C++ to implement fast extensions.\r\n• We list some tools that are used to use compiled code from Python:\r\n. The scipy.weave extension is useful if just a short expression needs to be expressed\r\nin C.\r\n. The Cython interface is growing in popularity to (i) semi-automatically declare variable\r\ntypes in Python code, to translate that code to C (automatically) and to then use the\r\ncompiled C code from Python. Cython is also used to quickly wrap an existing C\r\nlibrary with an interface so the C library can be used from Python.\r\n. Boost.Python is specialised for wrapping C++ code in Python.\r\nThe conclusion is that Python is ”fast enough” for most computational tasks, and that its user friendly\r\nhigh-level language often makes up for reduced speed in comparison to compiled lower-level languages.\r\nCombining Python with tailor-written compiled code for the performance critical parts of the code,\r\nresults in virtually optimal speed in most cases.\r\n1.2.1 Optimisation strategies\r\nWe generally understand reduction of execution time when discussing “code optimisation” in the\r\ncontext of computational modelling, and we essentially like to carry out the required calculations as\r\nfast as possible. (Sometimes we need to reduce the amount of RAM, the amount of data input output\r\nto disk or the network.) At the same time, we need to make sure that we do not invest inappropriate\r\namounts of programming time to achieve this speed up: as always there needs to be a balance between\r\nthe programmers’ time and the improvement we can gain from this.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/3d67d255-d56b-43ef-bf86-f99544ffbd90.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=abc254d13f0bc706d959d94f0c0c8c934ad75901739b5e972df2ca87869c8144",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 523
      },
      {
        "segments": [
          {
            "segment_id": "d14a023e-c0e5-4d2b-b8ae-372598c8c12e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 13,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "1.3. LITERATURE 13\r\n1.2.2 Get it right first, then make it fast\r\nTo write fast code effectively, we note that the right order is to (i) first write a program that carries\r\nout the correct calculation. For this, choose a language/approach that allows you to write the code\r\nquickly and make it work quickly — regardless of execution speed. Then (ii) either change the program\r\nor re-write it from scratch in the same language to make the execution faster. During the process,\r\nkeep comparing results with the slow version written first to make sure the optimisation does not\r\nintroduce errors. (Once we are familiar with the concept of regression tests, they should be used here\r\nto compare the new and hopefully faster code with the original code.)\r\nA common pattern in Python is to start writing pure Python code, then start using Python libraries\r\nthat use compiled code internally (such as the fast arrays Numpy provides, and routines from scipy\r\nthat go back to established numerical codes such as ODEPACK, LAPACK and others). If required,\r\none can – after careful profiling – start to replace parts of the Python code with a compiled language\r\nsuch as C and Fortran to improve execution speed further (as discussed above).\r\n1.2.3 Prototyping in Python\r\nIt turns out that – even if a particular code has to be written in, say, C++ – it is (often) more time\r\nefficient to prototype the code in Python, and once an appropriate design (and class structure) has\r\nbeen found, to translate the code to C++.\r\n1.3 Literature\r\nWhile this text starts with an introduction of (some aspects of) the basic Python programming\r\nlanguage, you may find - depending on your prior experience - that you need to refer to secondary\r\nsources to fully understand some ideas.\r\nWe repeatedly refer to the following documents:\r\n• Allen Downey, Think Python. Available online in html and pdf at\r\nhttp://www.greenteapress.com/thinkpython/thinkpython.html, or from Amazon.\r\n• The Python documentation http://www.python.org/doc/, and:\r\n• The Python tutorial (http://docs.python.org/tutorial/)\r\nYou may also find the following links useful:\r\n• The numpy home page (http://numpy.scipy.org/)\r\n• The scipy home page (http://scipy.org/)\r\n• The matplotlib home page (http://matplotlib.sourceforge.net/).\r\n• The Python style guide (http://www.python.org/dev/peps/pep-0008/\r\n1.3.1 Recorded video lectures on Python for beginners\r\nDo you like to listen/follow lectures? There is a series of 24 lectures titled Introduction to Computer\r\nScience and Programming delivered by Eric Grimsom and John Guttag from the MIT available at\r\nhttp://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer\u0002science-and-programming-fall-2008/ This is aimed at students with little or no programming experi\u0002ence. It aims to provide students with an understanding of the role computation can play in solving\r\nproblems. It also aims to help students, regardless of their major, to feel justifiably confident of their\r\nability to write small programs that allow them to accomplish useful goals.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/d14a023e-c0e5-4d2b-b8ae-372598c8c12e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e77b2bd9cd056557a9c2df2fae7d9a27a06188ed059dcc53de3083f76bc6c424",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 462
      },
      {
        "segments": [
          {
            "segment_id": "dbd99d42-aebe-48dc-a6a4-3c8b7b51953c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 14,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "14 CHAPTER 1. INTRODUCTION\r\n1.3.2 Python tutor mailing list\r\nThere is also a Python tutor mailing list (http://mail.python.org/mailman/listinfo/tutor) where be\u0002ginners are welcome to ask questions regarding Python. Both using the archives and posting your own\r\nqueries (or in fact helping others) may help with understanding the language. Use the normal mailing\r\nlist etiquette (i.e. be polite, concise, etc). You may want to read http://www.catb.org/esr/faqs/smart\u0002questions.html for some guidance on how to ask questions on mailing lists.\r\n1.4 Python version\r\nThere are two version of the Python language out there: Python 2.x and Python 3.x. They are\r\n(slightly) different — the changes in Python 3.x were introduced to address shortcomings in the\r\ndesign of the language that were identified since Python’s inception. A decision has been made that\r\nsome incompatibilty should be accepted to achieve the higher goal of a better language for the future.\r\nFor scientific computation, it is crucial to make use of numerical libraries such as numpy, scipy\r\nand the plotting package matplotlib.\r\nAll of these are available for Python 2.x, and increasingly they are also available for Python 3 (in\r\nfact the libraries above have all been ported by now). As Python 2.x is still the default Python on\r\nmany system and there are a fair number of research codes out there based on Python 2, we will use\r\nPython 2.x in this book.\r\nHowever, we will write code that is as much as possible in the Python 3 style (and understood by\r\nPython 2). The most prominent example is that in Python 2.x, the print command is special where\r\nas in Python 3 it is an ordinary function. For example, in Python 2.7, we can write\r\nprint \" Hello World \"\r\nwhere as in Python 3, this would cause a SyntaxError. The right way to use print in Python 3 would\r\nbe as a function, i.e.\r\nprint ( \" Hello World \" )\r\nSee also section 5.1.5 on page 54 for further details.\r\nFortunately, the function notation (i.e. with the parantheses) is also allowed in Python 2.7, so we\r\nchoose this notation in our examples and thus they will execute in Python 2.7 and Python 3.x. (There\r\nare other differences.)\r\nThe transition of all actively maintained codes from Python 2 to Python 3 is likely to take at least\r\nanother 5 years, maybe 10. It could also be that Python 2.7 will remain longer actively used – this is\r\nhard to predict at the moment.\r\n1.5 This document\r\nThis document has been typeset with the \\hyperref package. This means that all entries in the table\r\nof contents, figure numbers, page numbers and URLs should appear as clickable hyperlinks if your\r\npdf browser supports this. You may want to make use of this as often there are URLs provided that\r\nprovide further information/documentation.\r\n1.6 Your feedback\r\nis desired. If you find anything wrong in this text, or have suggestions how to change or extend it,\r\nplease feel free to contact Hans at fangohr@soton.ac.uk.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/dbd99d42-aebe-48dc-a6a4-3c8b7b51953c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3f95be2f7fa78eae07666d17f1a7bdf4a6d9596f1e9f244a61b6361fc76ebe2a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 495
      },
      {
        "segments": [
          {
            "segment_id": "2acfd4f1-da8e-4fb9-affb-571a57838b63",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 15,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "1.6. YOUR FEEDBACK 15\r\nIf you find a URL that is not working (or pointing to the wrong material), please let Hans know\r\nas well. As the content of the Internet is changing rapidly, it is difficult to keep up with these changes\r\nwithout feedback.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/2acfd4f1-da8e-4fb9-affb-571a57838b63.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=85b0a726118f4adecaeebad8725f1b2dad788b51658c62d8ea802a9fe599ec53",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "df713231-39da-4354-8df8-17ae2ad1f771",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 16,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "16 CHAPTER 1. INTRODUCTION",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/df713231-39da-4354-8df8-17ae2ad1f771.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e24d224b585f56b3704182b700e63ca70008536449bbad1f2e6a756421bcd6c9",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "543b6718-0d04-43e8-874b-f95a3b636d4c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 17,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 2\r\nA powerful calculator\r\n2.1 Python prompt and Read-Eval-Print Loop (REPL)\r\nPython is an interpreted language. We can either collect sequences of commands into text files and\r\nsave this to file as a Python program. It is convention that these files have the file extension “.py”,\r\nfor example hello.py.\r\nWe can also enter individual commands at the Python prompt which are immediately evaluated and\r\ncarried out by the Python interpreter. This is very useful for the programmer/learner to understand\r\nhow to use certain commands (often before one puts these commands together in a longer Python\r\nprogram). Python’s role can be described as Reading the command, Evaluating it, Printing the\r\nevaluated value and repeating (Loop) the cycle – this is the origin of the REPL abbreviation.\r\nTo start the interpreter we can either\r\n• On windows: start IDLE\r\n• On windows: find the MS-DOS prompt, and type python.exe followed by the return key.\r\n• On Linux/Unix/Mac OSX: find a shell (called “terminal” in Applications/Utilities on Mac OS\r\nX and type python followed by the return key.\r\nThe python prompt (the chevron >>>) signals that Python is waiting for input from us:\r\n>>>\r\nWe can now enter commands, for example 4+5, followed by the RETURN key.\r\n>>> 4+5\r\n9\r\n>>>\r\nOnce we press the return key, Python will evaluate the expression (4+5) and display the computed\r\nvalue (9) in the next line. It then displays the python prompt (>>>) in the next line to indicate that\r\nit is ready for the next input.\r\nThis interactive programming environment is sometimes referred to as the read-eval-print loop\r\n(REPL), because the expression is read, evaluated, the result is printed, and then the loop starts\r\nagain.\r\n2.2 Calculator\r\nBasic operations such as addition (+), subtraction (-), multiplication (*), division (/) and exponenti\u0002ation (**) work (mostly) as expected:\r\n17",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/543b6718-0d04-43e8-874b-f95a3b636d4c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=af2729f68dfe479171df324d94ece029dbb077458ae6ada111e354c22b0cc130",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 352
      },
      {
        "segments": [
          {
            "segment_id": "f402ee09-0636-4ea5-a144-09bdccd61932",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 18,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "18 CHAPTER 2. A POWERFUL CALCULATOR\r\n>>> 10+10000\r\n10010\r\n>>> 42 -1.5\r\n40.5\r\n>>> 47*11\r\n517\r\n>>> 10/0.5\r\n20.0\r\n>>> 2**2\r\n4\r\n>>> 2**3\r\n8\r\n>>> 2**4\r\n16\r\n>>> 2+2\r\n4\r\n>>> # This is a comment\r\n... 2+2\r\n4\r\n>>> 2+2 # and a comment on the same line as code\r\n4\r\nand, using the fact that √n x = x\r\n1/n, we can compute the √\r\n3 = 1.732050 . . . using **:\r\n>>> 3**0.5\r\n1.7320508075688772\r\nParenthesis can be used for grouping:\r\n>>> 2*10+5\r\n25\r\n>>> 2*(10+5)\r\n30\r\n2.3 Integer division\r\nUnexpected behaviour can occur when dividing two integer numbers:\r\n>>> 15/6\r\n3\r\nThis phenomenon is known (in many programming languages, including C) as integer division: because\r\nwe provide two integer numbers (15 and 6) to the division operator (/), the assumption that Python\r\nmakes is that we seek a return value of type integer. The mathematically correct answer is (the\r\nfloating point number) 2.5. (→ numerical data types in section 3.2.)\r\nThe convention for integer division is to truncate the fractional digits and to return the integer\r\npart only (i.e. 2 in this example). It is also called “floor division”.\r\n2.3.1 How to avoid integer division\r\nThere are two ways to avoid the problem of integer division:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/f402ee09-0636-4ea5-a144-09bdccd61932.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4a275d47b0477ee9240a1d4ef184aa8396827b67036d110f7f9b7003f09287d6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 211
      },
      {
        "segments": [
          {
            "segment_id": "0eea145c-8185-4a8d-b52b-9cecf9f8d481",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 19,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "2.3. INTEGER DIVISION 19\r\n1. Make use of Python’s future division: it has been decided that from Python 3.0 onwards the\r\ndivision operator will return a floating point number (complex, if required) even if the numerator\r\nand denominator are of integer type. This feature can be activated in older (2.x) Python versions\r\nwith the from future import division statement:\r\n>>> 21/7\r\n3\r\n>>> 15/6\r\n2\r\n>>> from __future__ import division\r\n>>> 15/6\r\n2.5\r\n>>> 21/7\r\n3.0\r\nIf you want to use the from future import division feature in a python program, it would\r\nnormally be included at the beginning of the file.\r\n2. Alternatively, if we ensoure that at least one number (numerator or denominator) is of type float\r\n(or complex), the division operator will return a floating point number. This can be done by\r\nwriting 15. instead of 15, of by forcing conversion of the number to a float, i.e. use float(15)\r\ninstead of 15:\r\n>>> 15/6\r\n2\r\n>>> 15./6\r\n2.5\r\n>>> 15.0/6\r\n2.5\r\n>>> float (15)/6\r\n2.5\r\n>>> 15/6.\r\n2.5\r\n>>> 15/ float (6)\r\n2.5\r\n>>> 15./6.\r\n2.5\r\nIf we really want integer division, we can use //: 1//2 returns 0 (true in version 2.x, 3.x and the\r\nforeseeable future).\r\n2.3.2 Why should I care about this division problem?\r\nInteger division can result in surprising bugs: suppose you are writing code to compute the mean\r\nvalue m = (x + y)/2 of two numbers x and y. The first attempt of writing this may read:\r\nm = ( x + y ) / 2\r\nSuppose this is tested with x = 0.5, y = 0.5, then the line above computes the correct answers m = 0.5\r\n(because0.5 + 0.5 = 1.0, i.e. a 1.0 is a floating point number, and thus 1.0/2 evaluates to 0.5). Or\r\nwe could use x = 10, y = 30, and because 10 + 30 = 40 and 40/2 evaluates to 20, we get the correct",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/0eea145c-8185-4a8d-b52b-9cecf9f8d481.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a4de7c65414a1bbdc34f94a52b68ec0822429d48cce51b0450e5f66afb8e2e6a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 323
      },
      {
        "segments": [
          {
            "segment_id": "f3a4ed06-5575-4a79-974f-6f712f4b488a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 20,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "20 CHAPTER 2. A POWERFUL CALCULATOR\r\nanswer m = 20. However, if the integers x = 0 and y = 1 would come up, then the code returns m = 0\r\n(because 0 + 1 = 1 and 1/2 evaluates to 0) whereas m = 0.5 would have been the right answer.\r\nWe have many possibilities to change the line of code above to work safely, including these three\r\nversions:\r\nm = ( x + y ) / 2.0\r\nm = float ( x + y ) / 2\r\nm = ( x + y ) * 0.5\r\nThis integer division behaviour is common amongst most programming languages (including the\r\nimportant ones C, C++ and Fortran), and it is important to be aware of the issue.\r\n2.4 Mathematical functions\r\nBecause Python is a general purpose programming language, commonly used mathematical functions\r\nsuch as sin, cos, exp, log and many others are located in the mathematics module with name math.\r\nWe can make use of this as soon as we import the math module:\r\n>>> import math\r\n>>> math . exp (1.0)\r\n2.7182818284590451\r\nUsing the dir function, we can see the directory of objects available in the math module:\r\n>>> dir( math )\r\n[ ’ __doc__ ’ , ’ __file__ ’ , ’ __name__ ’ , ’ acos ’ , ’ asin ’ , ’ atan ’ , ’ atan2 ’ ,\r\n’ ceil ’ , ’ cos ’ , ’ cosh ’ , ’ degrees ’ , ’e ’ , ’ exp ’ , ’ fabs ’ , ’ floor ’ ,\r\n’ fmod ’ , ’ frexp ’ , ’ hypot ’ , ’ ldexp ’ , ’ log ’ , ’ log10 ’ , ’ modf ’ , ’ pi ’ ,\r\n’ pow ’ , ’ radians ’ , ’ sin ’ , ’ sinh ’ , ’ sqrt ’ , ’ tan ’ , ’ tanh ’]\r\nAs usual, the help function can provide more information about the module (help(math)) on indi\u0002vidual objects:\r\n>>> help ( math . exp )\r\nHelp on built -in function exp in module math :\r\nexp (...)\r\nexp ( x )\r\nReturn e raised to the power of x .\r\nThe mathematics module defines to constants π and e:\r\n>>> math . pi\r\n3.1415926535897931\r\n>>> math . e\r\n2.7182818284590451\r\n>>> math . cos ( math . pi )\r\n-1.0\r\n>>> math . log ( math . e )\r\n1.0",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/f3a4ed06-5575-4a79-974f-6f712f4b488a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a6e256dc166a56809627fbf6f613bf43a1fb5da29ff8ae2a07eafd5803d13bde",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 408
      },
      {
        "segments": [
          {
            "segment_id": "8c6a6ef4-a727-423b-b273-0b71c4bf697e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 21,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "2.5. VARIABLES 21\r\n2.5 Variables\r\nA variable can be used to store a certain value or object. In Python, all numbers (and everything\r\nelse, including functions, modules and files) are objects. A variable is created through assignement:\r\n>>> x = 0.5\r\n>>>\r\nOnce the variable x has been created through assignment of 0.5 in this example, we can make use of\r\nit:\r\n>>> x *3\r\n0.5\r\n>>> x **2\r\n0.25\r\n>>> y = 111\r\n>>> y +222\r\n333\r\nA variable is overriden if a new value is assigned:\r\n>>> y = 0.7\r\n>>> math . sin ( y ) ** 2 + math . cos ( y ) ** 2\r\n1.0\r\nThe equal sign (’=’) is used to assign a value to a variable. Afterwards, no result is displayed\r\nbefore the next interactive prompt:\r\n>>> width = 20\r\n>>> height = 5 * 9\r\n>>> width * height\r\n900\r\nA value can be assigned to several variables simultaneously:\r\n>>> x = y = z = 0 # initialise x , y and z with 0\r\n>>> x\r\n0\r\n>>> y\r\n0\r\n>>> z\r\n0\r\nVariables must be created (assigned a value) before they can be used, or an error will occur:\r\n>>> # try to access an undefined variable\r\n... n\r\nTraceback ( most recent call last ):\r\nFile \" < stdin > \" , line 1 , in < module >\r\nNameError : name ’n ’ is not defined\r\nIn interactive mode, the last printed expression is assigned to the variable . This means that\r\nwhen you are using Python as a desk calculator, it is somewhat easier to continue calculations, for\r\nexample:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/8c6a6ef4-a727-423b-b273-0b71c4bf697e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=140ef2a0262e03695999c8a763d8b074ee8fd6a6605957065a4cf1b8f099a369",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 274
      },
      {
        "segments": [
          {
            "segment_id": "99d4129a-f6cb-45bc-8267-7643835e935a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 22,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "22 CHAPTER 2. A POWERFUL CALCULATOR\r\n>>> tax = 12.5 / 100\r\n>>> price = 100.50\r\n>>> price * tax\r\n12.5625\r\n>>> price + _\r\n113.0625\r\nThis variable should be treated as read-only by the user. Don’t explicitly assign a value to it you\r\nwould create an independent local variable with the same name masking the built-in variable with its\r\nmagic behavior.\r\n2.5.1 Terminology\r\nStrictly speaking, the following happens when we write\r\n>>> x = 0.5\r\nFirst, Python creates the object 0.5. Everything in Python is an object, and so is the floating point\r\nnumber 0.5. This object is stored somewhere in memory. Next, Python binds a name to the object.\r\nThe name is x, and we often refer casually to x as a variable, an object, or even the value 0.5. However,\r\ntechnically, x is a name that is bound to the object 0.5. Another way to say this is that x is a reference\r\nto the object.\r\nWhile it is often sufficient to think about assigning 0.5 to a variable x, there are situations where\r\nwe need to remember what actually happens. In particular, when we pass references to objects to\r\nfunctions, we need to realise that the function may operate on the object (rather than a copy of the\r\nobject). This is discussed in more detail in 3.4.\r\n2.6 Impossible equations\r\nIn computer programs we often find statements like\r\nx = x + 1\r\nIf we read this as an equation as we are use to from mathematics,\r\nx = x + 1\r\nwe could subtract x on both sides, to find that\r\n0 = 1.\r\nWe know this is not true, so something is wrong here.\r\nThe answer is that “equations“ in computer codes are not equations but assignments. They always\r\nhave to be read in the following way two-step way:\r\n1. Evaluate the value on the right hand side of the equal sign\r\n2. Assign this value to the variable name shown on the left hand side. (In Pyton: bind the name\r\non the left hand side to the object shown on the right hand side.)\r\nSome computer science literature uses the following notation to express assignments and to avoid the\r\nconfusion with mathematical equations:\r\nx ← x + 1\r\nLet’s apply our two-step rule to the assignment x = x + 1 given above:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/99d4129a-f6cb-45bc-8267-7643835e935a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=eef3acd57903d0f3d82256d30eb46347c0ce00e6173b65a227157548f35ebc14",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 390
      },
      {
        "segments": [
          {
            "segment_id": "70ece147-e26b-49b8-99cc-ff4d263d6864",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 23,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "2.6. IMPOSSIBLE EQUATIONS 23\r\n1. Evaluate the value on the right hand side of the equal sign: for this we need to know what\r\nthe current value of x is. Let’s assume x is currently 4. In that case, the right hand side x+1\r\nevaluates to 5.\r\n2. Assign this value (i.e. 5) to the variable name shown on the left hand side x.\r\nLet’s confirm with the Python prompt that this is the correct interpretation:\r\n>>> x = 4\r\n>>> x = x + 1\r\n>>> print x\r\n5\r\n2.6.1 The += notation\r\nBecause it is a quite a common operation to increase a variable x by some fixed amount c, we can\r\nwrite\r\nx += c\r\ninstead of\r\nx = x + c\r\nOur initial example above could thus have been written\r\n>>> x = 4\r\n>>> x += 1\r\n>>> print x\r\n5\r\nThe same operators are defined for multiplication with a constant (*=), subtraction of a constant\r\n(-=) and division by a constant (/=).\r\nNote that the order of + and = matters:\r\nx += 1\r\nwill increase the variable x by one where as\r\nx =+ 1\r\nwill assign the value +1 to the variable x.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/70ece147-e26b-49b8-99cc-ff4d263d6864.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ec080c338e6c5da40f82039065bda1e8abf260d373dec6cb492ddac95140af26",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f8138ac5-41ac-4919-bce4-8137156f3791",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 24,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "24 CHAPTER 2. A POWERFUL CALCULATOR",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/f8138ac5-41ac-4919-bce4-8137156f3791.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ac6a803dec01306bd67e472778534e1429824ece8b0795b9145fde61ba44cf84",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "57d7eab8-65d6-4f27-b1f2-200cce6b8849",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 25,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 3\r\nData Types and Data Structures\r\n3.1 What type is it?\r\nPython knows different data types. To find the type of a variable, use the type() function:\r\n>>> a = 45\r\n>>> type ( a )\r\n<type ’ int ’ >\r\n>>> b = ’ This is a string ’\r\n>>> type ( b )\r\n<type ’ str ’ >\r\n>>> c = 2 + 1 j\r\n>>> type ( c )\r\n<type ’ complex ’ >\r\n>>> d = [1 , 3 , 56]\r\n>>> type ( d )\r\n<type ’ list ’ >\r\n3.2 Numbers\r\nFurther information\r\n• Informal introduction to numbers. Python tutorial, section 3.1.1\r\n• Python Library Reference: formal overview of numeric types,\r\nhttp://docs.python.org/library/stdtypes.html#numeric-types-int-float-long-complex\r\n• Think Python, Sec 2.1\r\nThe in-built numerical types are integers (see section 3.2.1) and floating point numbers (see section\r\n3.2.3) and complex floating point numbers (section 3.2.4). There are also so-called long integers (3.2.2\r\nwhich have no upper or lower limit (assuming the machine provides enough RAM)\r\n3.2.1 Integers\r\nWe have seen the use of integer numbers already in section 2.2. Be aware of integer division problems\r\n(section 2.3).\r\nIf we need to convert string containing an integer number to an integer we can use int() function:\r\n25",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/57d7eab8-65d6-4f27-b1f2-200cce6b8849.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=89773c24552ec2efeef1a93e00e4b98532c4dc6b5548e3d4796dda22947f7e36",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 415
      },
      {
        "segments": [
          {
            "segment_id": "040bd8c4-ee71-41dd-8df0-9d7db564bd29",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 26,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "26 CHAPTER 3. DATA TYPES AND DATA STRUCTURES\r\n>>> a = ’ 34 ’ # a is a string containing the characters 3 and 4\r\n>>> x = int( a ) # x is in integer number\r\nThe function int() will also convert floating point numbers to integers:\r\n>>> int (7.0)\r\n7\r\n>>> int (7.9)\r\n7\r\nNote than int will truncate any non-integer part of a floating point number. To round an floating\r\npoint number to an integer, use the round() command, and then convert the rounded float into an\r\nint:\r\n>>> round (7.9)\r\n8.0\r\n>>> int( round (7.9))\r\n8\r\n3.2.2 Long integers\r\nIn line with other programming languages and the support of integer arithmetic through today’s CPUs,\r\nthere is an upper limit for the integers that can be presented. In Python, the sys module provides\r\nthis number in sys.maxint:\r\n>>> import sys\r\n>>> sys . maxint\r\n2147483647\r\nIf this range is exceeded, then Python will change the type of the number from int to long:\r\n>>> type ( sys . maxint )\r\n<type ’ int ’ >\r\n>>> sys . maxint +1\r\n2147483648 L\r\n>>> type ( sys . maxint +1)\r\n<type ’ long ’ >\r\nThe long integer data type behaves like an integer but any arithmetic involving long integers is carried\r\nout at a software level. This avoids integer overflows but we should note that operations involving long\r\nintegers are significantly slower than operations with integers. There is no limit to the maximum or\r\nminimum long integer than could be used (although the longer the number the more RAM is required\r\nand the more CPU time to carry out calculations).\r\nThere is no comparable long int type in C or Matlab.\r\n(In Python 3.0, the distinction between int and long int will disappear.)\r\n3.2.3 Floating Point numbers\r\nA string containing a floating point number can be converted into a floating point number using the\r\nfloat() command:\r\n>>> a = ’ 35.342 ’\r\n>>> b = float ( a )",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/040bd8c4-ee71-41dd-8df0-9d7db564bd29.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1020145747c4a945ed5c04761d69b69901b1553176e9763f29aa66faaa8d7603",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 332
      },
      {
        "segments": [
          {
            "segment_id": "e3c2b338-9fd6-4d24-a85c-3a4067cf4052",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 27,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "3.3. SEQUENCES 27\r\n>>> print b\r\n35.342\r\n>>> print type ( b )\r\n<type ’ float ’ >\r\n3.2.4 Complex numbers\r\nPython (as Fortran and Matlab) has built-in complex numbers. Here are some examples how to use\r\nthese:\r\n>>> x = 1 + 3 j\r\n>>> x\r\n(1+3 j )\r\n>>> abs( x ) # computes the absolute value\r\n3.1622776601683795\r\n>>> x . imag\r\n3.0\r\n>>> x . real\r\n1.0\r\n>>> x * x\r\n( -8+6 j )\r\n>>> x * x . conjugate ()\r\n(10+0 j )\r\n>>> 3 * x\r\n(3+9 j )\r\nNote that if you want to perform more complicated operations (such as taking the square root, etc)\r\nyou have to use the cmath module (Complex MATHematics):\r\n>>> import cmath\r\n>>> cmath . sqrt ( x )\r\n(1.442615274452683+1.0397782600555705 j )\r\n3.2.5 Functions applicable to all types of numbers\r\nThe abs() function returns the absolute value of a number (also called modulus):\r\n>>> a = -45.463\r\n>>> print abs ( a )\r\n45.463\r\nNote that abs() also works for complex numbers (see 3.2.4).\r\n3.3 Sequences\r\nStrings (3.3.1), lists (3.3.2) and tuples (3.3.3) are sequences. They can be indexed (3.3.4) and sliced\r\n(3.3.5) in the same way.\r\nTuples and strings are “immutable” (which basically means we can’t change individual elements\r\nwithin the tuple, and we cannot change individual characters within a string) whereas lists are “mu\u0002table” (.i.e we can change elements in a list.)\r\nSequences share the following operations",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/e3c2b338-9fd6-4d24-a85c-3a4067cf4052.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a04879fbfa513c5877ce9fef7453017a3ed71ea711a0382224cd736061c373c9",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3eb49983-5411-4f4c-951a-57d0e821dccc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 28,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "28 CHAPTER 3. DATA TYPES AND DATA STRUCTURES\r\na[i] returns i-th element of a\r\na[i:j] returns elements i up to j − 1\r\nlen(a) returns number of elements in sequence\r\nmin(a) returns smallest value in sequence\r\nmax(a) returns largest value in sequence\r\nx in a returns True if x is element in a\r\na + b concatenates a and b\r\nn * a creates n copies of sequence a\r\n3.3.1 Sequence type 1: String\r\nFurther information\r\n• Introduction to strings, Python tutorial 3.1.2\r\nA string is a (immutable) sequence of characters. A string can be defined using single quotes:\r\n>>> a = ’ Hello World ’\r\ndouble quotes:\r\n>>> a = \" Hello World \"\r\nor triple quotes of either kind\r\n>>> a = \"\"\" Hello World \"\"\"\r\n>>> a = ’’’ Hello World ’’’\r\nThe type of a string is str and the empty string is given through \"\":\r\n>>> a = \" Hello World \"\r\n>>> type ( a )\r\n<type ’ str ’ >\r\n>>> b = \" \"\r\n>>> type ( b )\r\n<type ’ str ’ >\r\n>>> type ( \" Hello World \" )\r\n<type ’ str ’ >\r\n>>> type ( \" \" )\r\n<type ’ str ’ >\r\nThe number of characters in a string (that is its length) can be obtained using the len()-function:\r\n>>> a = \" Hello Moon \"\r\n>>> len( a )\r\n10\r\n>>> a = ’ test ’\r\n>>> len( a )\r\n4\r\n>>> len( ’ another test ’)\r\n12\r\nYou can combine (“concatenate”) two strings using the + operator:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/3eb49983-5411-4f4c-951a-57d0e821dccc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=53bb79494650da79161d78810e5f64644b65080f8dc5e5607bad35923f56128b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 504
      },
      {
        "segments": [
          {
            "segment_id": "1c9f4f5c-15bc-4872-b99f-46ec91d3fb95",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 29,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "3.3. SEQUENCES 29\r\n>>> ’ Hello ’ + ’ World ’\r\n’ Hello World ’\r\nStrings have a number of useful methods, including for example upper() which returns the string\r\nin upper case:\r\n>>> a = \" This is a test sentence . \"\r\n>>> a . upper ()\r\n’ THIS IS A TEST SENTENCE . ’\r\nA list of available string methods can be found in the Python reference documentation. If a\r\nPython prompt is available, one should use the dir and help function to retrieve this information,\r\ni.e. dir(\"\") provides the list of methods, help can be used to learn about each method.\r\nA particularly useful method is split() which converts a string into a list of strings:\r\n>>> a = \" This is a test sentence . \"\r\n>>> a . split ()\r\n[ ’ This ’ , ’ is ’ , ’a ’ , ’ test ’ , ’ sentence . ’]\r\nThe split() method will separate the string where it finds white space. White space means any\r\ncharacter that is printed as white space, such as one space or several spaces or a tab.\r\nBy passing a separator character to the split() method, a string can split into different parts.\r\nSuppose, for example, we would like to obtain a list of complete sentences:\r\n>>> a = \" The dog is hungry . The cat is bored . The snake is awake . \"\r\n>>> a . split ( \" . \" )\r\n[ ’ The dog is hungry ’ , ’ The cat is bored ’ , ’ The snake is awake ’ , ’ ’]\r\nThe opposite string method to split is join which can be used as follows:\r\n>>> a = \" The dog is hungry . The cat is bored . The snake is awake . \"\r\n>>> s = a . split ( ’. ’)\r\n>>> s\r\n[ ’ The dog is hungry ’ , ’ The cat is bored ’ , ’ The snake is awake ’ , ’ ’]\r\n>>> \" . \" . join ( s )\r\n’ The dog is hungry . The cat is bored . The snake is awake . ’\r\n>>> \" STOP \" . join ( s )\r\n’ The dog is hungry STOP The cat is bored STOP The snake is awake STOP ’\r\n3.3.2 Sequence type 2: List\r\nFurther information\r\n• Introduction to Lists, Python tutorial, section 3.1.4\r\nA list is a sequence of objects. The objects can be of any type, for example integers:\r\n>>> a = [34 , 12 , 54]\r\nor strings:\r\n>>> a = [ ’ dog ’ , ’ cat ’ , ’ mouse ’]",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/1c9f4f5c-15bc-4872-b99f-46ec91d3fb95.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d960ff17a287f0a450681522ebcb5be01053d5769858d579f5b2f4e648c6e33c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 449
      },
      {
        "segments": [
          {
            "segment_id": "69e7ed4b-4114-4d0f-a350-ad25f58d630f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 30,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "30 CHAPTER 3. DATA TYPES AND DATA STRUCTURES\r\nAn empty list is presented by []:\r\n>>> a = []\r\nThe type is list:\r\n>>> type ( a )\r\n<type ’ list ’ >\r\n>>> type ([])\r\n<type ’ list ’ >\r\nAs with strings, the number of elements in a list can be obtained using the len() function:\r\n>>> a = [ ’ dog ’ , ’ cat ’ , ’ mouse ’]\r\n>>> len( a )\r\n3\r\nIt is also possible to mix different types in the same list:\r\n>>> a = [123 , ’ duck ’ , -42 , 17 , 0 , ’ elephant ’]\r\nIn Python a list is an object. It is therefor possible for a list to contain other lists (because a list\r\nkeeps a sequence of objects):\r\na = [1 , 4 , 56 , [5 , 3 , 1] , 300 , 400]\r\nYou can combine (“concatenate”) two lists using the + operator:\r\n>>> [3 , 4 , 5] + [34 , 35 , 100]\r\n[3 , 4 , 5 , 34 , 35 , 100]\r\nOr you can add one object to the end of a list using the append() method:\r\n>>> a = [34 , 56 , 23]\r\n>>> a . append (42)\r\n>>> print a\r\n[34 , 56 , 23 , 42]\r\nYou can delete an object from a list by calling the remove() method and passing the object to\r\ndelete. For example:\r\n>>> a = [34 , 56 , 23 , 42]\r\n>>> a . remove (56)\r\n>>> print a\r\n[34 , 23 , 42]\r\nThe range() command\r\nA special type of list is frequently required (often together with for-loops) and therefor a command\r\nexists to generate that list: the range(n) command generates a list of integers starting from 0 and\r\ngoing up to but not including n. Here are a few examples:\r\n>>> range (3)\r\n[0 , 1 , 2]\r\n>>> range (10)\r\n[0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9]",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/69e7ed4b-4114-4d0f-a350-ad25f58d630f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4f71f057deffc8d5ed00315e28c1b8bb4716ef24eafa2a85b4f31a9bdb38c51a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 345
      },
      {
        "segments": [
          {
            "segment_id": "881e128a-c12f-4d79-92e3-c767833a511a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 31,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "3.3. SEQUENCES 31\r\nThis command is often used with for loops. For example, to print the numbers 02,12,22,32,. . . ,102,\r\nthe following program can be used:\r\n>>> for i in range (11):\r\n... print i ** 2\r\n...\r\n0\r\n1\r\n4\r\n9\r\n16\r\n25\r\n36\r\n49\r\n64\r\n81\r\n100\r\nThe range command takes an optional parameter for the beginning of the integer sequence (start)\r\nand another optional parameter for the step size. This is often written as range([start],stop,[step])\r\nwhere the arguments in square brackets (i.e. start and step) are optional. Here are some examples:\r\n>>> range (3 , 10) # start =3\r\n[3 , 4 , 5 , 6 , 7 , 8 , 9]\r\n>>> range (3 , 10 , 2) # start =3 , step =2\r\n[3 , 5 , 7 , 9]\r\n>>> range (10 , 0 , -1) # start =10 , step = -1\r\n[10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1]\r\n3.3.3 Sequence type 3: Tuples\r\nA tuple is a (immutable) sequence of objects. Tuples are very similar in behaviour to lists with the\r\nexception that they cannot be modified (i.e. are immutable).\r\nFor example, the objects in a sequence can be of any type:\r\n>>> a = (12 , 13 , ’ dog ’)\r\n>>> a\r\n(12 , 13 , ’ dog ’)\r\n>>> a [0]\r\n12\r\nThe parentheses are not necessary to define a tuple: just a sequence of objects separated by commas\r\nis sufficient to define a tuple:\r\n>>> a = 100 , 200 , ’ duck ’\r\n>>> a\r\n(100 , 200 , ’ duck ’)\r\nalthough it is good practice to include the paranthesis where it helps to show that tuple is defined.\r\nTuples can also be used to make two assignments at the same time:\r\n>>> x , y = 10 , 20\r\n>>> x",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/881e128a-c12f-4d79-92e3-c767833a511a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ecf92d279067a1340a80cd5d04cd3fc2fdbf21c3b880fa940f713cbbab11f821",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 319
      },
      {
        "segments": [
          {
            "segment_id": "12265114-332e-4869-b7a8-d6d36f58e838",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 32,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "32 CHAPTER 3. DATA TYPES AND DATA STRUCTURES\r\n10\r\n>>> y\r\n20\r\nThis can be used to swap to objects within one line. For example\r\n>>> x = 1\r\n>>> y = 2\r\n>>> x , y = y , x\r\n>>> print x\r\n2\r\n>>> print y\r\n1\r\nThe empty tuple is given by ()\r\n>>> t = ()\r\n>>> len( t )\r\n0\r\n>>> type ( t )\r\n<type ’ tuple ’ >\r\nThe notation for a tuple containing one value may seem a bit odd at first:\r\n>>> t = (42 ,)\r\n>>> type ( t )\r\n<type ’ tuple ’ >\r\n>>> len( t )\r\n1\r\nThe extra comma is required to distinguish (42,) from (42) where in the latter case the parenthesis\r\nwould be read as defining operator precedence: (42) simplifies to 42 which is just a number:\r\n>>> t = (42)\r\n>>> type ( t )\r\n<type ’ int ’ >\r\nThis example shows the immutability of a tuple:\r\n>>> a = (12 , 13 , ’ dog ’)\r\n>>> a [0]\r\n12\r\n>>> a [0] = 1\r\nTraceback ( most recent call last ):\r\nFile \" < stdin > \" , line 1 , in ?\r\nTypeError : object doesn ’t support item assignment\r\nThe immutability is the main difference between a tuple and a list (the latter being mutable). We\r\nshould use tuples when we don’t want the content to change.\r\nNote that Python functions that return more than one value, return these in tuples (which makes\r\nsense because you don’t want these values be changed).\r\n3.3.4 Indexing sequences\r\nFurther information",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/12265114-332e-4869-b7a8-d6d36f58e838.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=77bc70b951745e9eea4fe1b4dae80e01f67d0a39dff84294b227f00ccf38f728",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 269
      },
      {
        "segments": [
          {
            "segment_id": "1736e713-4264-44c5-929b-4f7cb30b7647",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 33,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "3.3. SEQUENCES 33\r\n• Introduction to strings and indexing in Python tutorial, section 3.1.2, the relevant section is\r\nstarting after strings have been introduced.\r\nIndividual objects in lists can be accessed by using the index of the object and square brackets ([\r\nand ]):\r\n>>> a = [ ’ dog ’ , ’ cat ’ , ’ mouse ’]\r\n>>> a [0]\r\n’ dog ’\r\n>>> a [1]\r\n’ cat ’\r\n>>> a [2]\r\n’ mouse ’\r\nNote that Python (like C but unlike Fortran and unlike Matlab) starts counting indices from zero!\r\nPython provides a handy shortcut to retrieve the last element in a list: for this one uses the index\r\n“-1” where the minus indicates that it is one element from the back of the list. Similarly, the index\r\n“-2” will return the 2nd last element:\r\n>>> a = [ ’ dog ’ , ’ cat ’ , ’ mouse ’]\r\n>>> a [ -1]\r\n’ mouse ’\r\n>>> a [ -2]\r\n’ cat ’\r\nIf you prefer, you can think of the index a[-1] to be a shorthand notation for a[len(a) - 1].\r\nRemember that strings (like lists) are also a sequence type and can be indexed in the same way:\r\n>>> a = \" Hello World ! \"\r\n>>> a [0]\r\n’H ’\r\n>>> a [1]\r\n’e ’\r\n>>> a [10]\r\n’d ’\r\n>>> a [ -1]\r\n’! ’\r\n>>> a [ -2]\r\n’d ’\r\n3.3.5 Slicing sequences\r\nFurther information\r\n• Introduction to strings, indexing and slicing in Python tutorial, section 3.1.2\r\nSlicing of sequences can be used to retrieve more than one element. For example:\r\n>>> a = \" Hello World ! \"\r\n>>> a [0:3]\r\n’ Hel ’",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/1736e713-4264-44c5-929b-4f7cb30b7647.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6c8b9b82f6a3d8e5a05727d385e76eca989d697b774c04cacab7cf6687cf9c56",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 284
      },
      {
        "segments": [
          {
            "segment_id": "a698dd8f-958e-4776-b09f-9cd872ae1b2f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 34,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "34 CHAPTER 3. DATA TYPES AND DATA STRUCTURES\r\nBy writing a[0:3] we request the first 3 elements starting from element 0. Similarly:\r\n>>> a [1:4]\r\n’ ell ’\r\n>>> a [0:2]\r\n’ He ’\r\n>>> a [0:6]\r\n’ Hello ’\r\nWe can use negative indices to refer to the end of the sequence:\r\n>>> a [0: -1]\r\n’ Hello World ’\r\nIt is also possible to leave out the start or the end index and this will return all elements up to the\r\nbeginning or the end of the sequence. Here are some examples to make this clearer:\r\n>>> a = \" Hello World ! \"\r\n>>> a [:5]\r\n’ Hello ’\r\n>>> a [5:]\r\n’ World ! ’\r\n>>> a [ -2:]\r\n’d ! ’\r\n>>> a [:]\r\n’ Hello World ! ’\r\nNote that a[:] will generate a copy of a.\r\nThe use of indices in slicing is by some people experienced as counter intuitive. If you feel uncom\u0002fortable with slicing, have a look at this quotation from the Python tutorial (section 3.1.2):\r\nThe best way to remember how slices work is to think of the indices as pointing between\r\ncharacters, with the left edge of the first character numbered 0. Then the right edge of the\r\nlast character of a string of 5 characters has index 5, for example:\r\n+ - - -+ - - -+ - - -+ - - -+ - - -+\r\n| H | e | l | l | o |\r\n+ - - -+ - - -+ - - -+ - - -+ - - -+\r\n0 1 2 3 4 5 <-- use for SLICING\r\n-5 -4 -3 -2 -1 <-- use for SLICING\r\nfrom the end\r\nThe first row of numbers gives the position of the slicing indices 0...5 in the string; the\r\nsecond row gives the corresponding negative indices. The slice from i to j consists of all\r\ncharacters between the edges labelled i and j, respectively.\r\nSo the important statement is that for slicing we should think of indices pointing between characters.\r\nFor indexing it is better to think of the indices referring to characters. Here is a little graph\r\nsummarising these rules:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/a698dd8f-958e-4776-b09f-9cd872ae1b2f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c3f96229471c5c280ea62dd1befa71bd781b17cca5229acf67e3cc0ba15ed37f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 366
      },
      {
        "segments": [
          {
            "segment_id": "e91c0566-9aab-4dc4-aa25-fdffc4de0f90",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 35,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "3.3. SEQUENCES 35\r\n0 1 2 3 4 <-- use for INDEXING\r\n-5 -4 -3 -2 -1 <-- use for INDEXING\r\n+ - - -+ - - -+ - - -+ - - -+ - - -+ from the end\r\n| H | e | l | l | o |\r\n+ - - -+ - - -+ - - -+ - - -+ - - -+\r\n0 1 2 3 4 5 <-- use for SLICING\r\n-5 -4 -3 -2 -1 <-- use for SLICING\r\nfrom the end\r\nIf you are not sure what the right index is, it is always a good technique to play around with a\r\nsmall example at the Python prompt to test things before or while you write your program.\r\n3.3.6 Dictionaries\r\nDictionaries are also called “associative arrays” and “hash tables”. Dictionaries are unordered sets of\r\nkey-value pairs.\r\nAn empty dictionary can be created using curly braces:\r\n>>> d = {}\r\nKeyword-value pairs can be added like this:\r\n>>> d [ ’ today ’] = ’ 22 deg C ’ # ’ today ’ is the keyword\r\n# ’22 deg C ’ is the value\r\n>>> d [ ’ yesterday ’] = ’ 19 deg C ’\r\nd.keys() returns a list of all keys:\r\n>>> d . keys ()\r\n[ ’ yesterday ’ , ’ today ’]\r\nWe can retrieve values by using the keyword as the index:\r\n>>> print d [ ’ today ’]\r\n22 deg C\r\nOther ways of populating a dictionary if the data is known at creation time are:\r\n>>> d2 = {2:4 , 3:9 , 4:16 , 5:25}\r\n>>> d2\r\n{2: 4 , 3: 9 , 4: 16 , 5: 25}\r\n>>> d3 = dict ( a =1 , b =2 , c =3)\r\n>>> d3\r\n{ ’a ’: 1 , ’c ’: 3 , ’b ’: 2}\r\nThe function dict() creates an empty dictionary.\r\nOther useful dictionary methods include values(), items(), has key():\r\n>>> d . values ()\r\n[ ’ 19 deg C ’ , ’ 22 deg C ’]\r\n>>> d . items ()\r\n[( ’ yesterday ’ , ’ 19 deg C ’) , ( ’ today ’ , ’ 22 deg C ’ )]\r\n>>> d . has_key ( ’ today ’)\r\nTrue\r\n>>> d . has_key ( ’ tomorrow ’)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/e91c0566-9aab-4dc4-aa25-fdffc4de0f90.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=85076080f26ab94807456c1c01e48049cbe094ef213d3e374a476049e2ccc96c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 386
      },
      {
        "segments": [
          {
            "segment_id": "799f8625-fd52-4aed-ade4-0afed8de8688",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 36,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "36 CHAPTER 3. DATA TYPES AND DATA STRUCTURES\r\nFalse\r\n>>> d . get ( ’ today ’ , ’ unknown ’)\r\n’ 22 deg C ’\r\n>>> d . get ( ’ tomorrow ’ , ’ unknown ’)\r\n’ unknown ’\r\n>>> d . has_key ( ’ today ’)\r\nTrue\r\n>>> d . has_key ( ’ tomorrow ’)\r\nFalse\r\n>>> ’ today ’ in d # as d . haskey ( ’ today ’)\r\nTrue\r\n>>> ’ tomorrow ’ in d # as d . haskey ( ’ tomorrow ’)\r\nFalse\r\nThe method get(key,default) will provide the value for a given key if that key exists, otherwise\r\nit will return the default object.\r\nHere is a more complex example:\r\norder = {} # create empty dictionary\r\n# add orders as they come in\r\norder [ ’ Peter ’] = ’ Pint of bitter ’\r\norder [ ’ Paul ’] = ’ Half pint of Hoegarden ’\r\norder [ ’ Mary ’] = ’ Gin Tonic ’\r\n# deliver order at bar\r\nfor person in order . keys ():\r\nprint person , \" requests \" , order [ person ]\r\nwhich produces this output:\r\nPaul requests Half pint of Hoegarden\r\nPeter requests Pint of bitter\r\nMary requests Gin Tonic\r\nSome more technicalities:\r\n• The keyword can be any (immutable) Python object. This includes:\r\n. numbers\r\n. strings\r\n. tuples.\r\n• dictionaries are very fast in retrieving values (when given the key)\r\nAn other example to demonstrate an advantage of using dictionaries over pairs of lists:\r\ndic = {} # create empty dictionary\r\ndic [ \" Hans \" ] = \" room 1033 \" # fill dictionary\r\ndic [ \" Andy C \" ] = \" room 1031 \" # \" Andy C \" is key\r\ndic [ \" Ken \" ] = \" room 1027 \" # \" room 1027\" is value\r\nfor key in dic . keys ():\r\nprint key , \" works in \" , dic [ key ]",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/799f8625-fd52-4aed-ade4-0afed8de8688.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=db3f8ca57d562a1bd98f9fe8761ef78e5203055588b863d41897d07739e6dbf2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 330
      },
      {
        "segments": [
          {
            "segment_id": "dd48dae5-f965-4011-8c39-4991b2aa324f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 37,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "3.4. PASSING ARGUMENTS TO FUNCTIONS 37\r\nOutput:\r\nHans works in room 1033\r\nAndy C works in room 1031\r\nKen works in room 1027\r\nWithout dictionary:\r\npeople = [ \" Hans \" ,\" Andy C \" ,\" Ken \" ]\r\nrooms = [ \" room 1033 \" ,\" room 1031 \" ,\" room 1027 \" ]\r\n# possible inconsistency here since we have two lists\r\nif not len( people ) == len ( rooms ):\r\nraise RunTimeError , \" people and rooms differ in length \"\r\nfor i in range ( len( rooms ) ):\r\nprint people [ i ] , \" works in \" , rooms [ i ]\r\n3.4 Passing arguments to functions\r\nThis section contains some more advanced ideas and makes use of concepts that are only later intro\u0002duced in this text. The section may be more easily accessible at a later stage.\r\nWhen objects are passed to a function, Python always passes (the value of) the reference to the\r\nobject to the function. Effectively this is calling a function by reference, although one could refer to\r\nit as calling by value (of the reference).\r\nWe review argument passing by value and reference before discussing the situation in Python in\r\nmore detail.\r\n3.4.1 Call by value\r\nOne might expect that if we pass an object by value to a function, that modifications of that value\r\ninside the function will not affect the object (because we don’t pass the object itself, but only its value,\r\nwhich is a copy). Here is an example of this behaviour (in C):\r\n# include < stdio .h >\r\nvoid pass_by_value (int m ) {\r\nprintf ( \" in pass_by_value : received m =% d \\ n \" ,m );\r\nm =42;\r\nprintf ( \" in pass_by_value : changed to m =% d \\ n \" ,m );\r\n}\r\nint main ( void ) {\r\nint global_m = 1;\r\nprintf ( \" global_m =% d \\ n \" , global_m );\r\npass_by_value ( global_m );\r\nprintf ( \" global_m =% d \\ n \" , global_m );\r\nreturn 0;\r\n}\r\ntogether with the corresponding output:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/dd48dae5-f965-4011-8c39-4991b2aa324f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6cec8dfa48cb5fde27d1cfe9c651c0b953b8db2ea688d360d35e88a42eadebdf",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 351
      },
      {
        "segments": [
          {
            "segment_id": "3cf732ce-bae7-47af-9dd1-916e8c57c5f4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 38,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "38 CHAPTER 3. DATA TYPES AND DATA STRUCTURES\r\nglobal_m =1\r\nin pass_by_value : received m =1\r\nin pass_by_value : changed to m =42\r\nglobal_m =1\r\nThe value 1 of the global variable global m is not modified when the function pass by value\r\nchanges its input argument to 42.\r\n3.4.2 Call by reference\r\nCalling a function by reference, on the other hand, means that the object given to a function is a\r\nreference to the object. This means that the function will see the same object as in the calling code\r\n(because they are referencing the same object: we can think of the reference as a pointer to the place\r\nin memory where the object is located). Any changes acting on the object inside the function, will\r\nthen be visible in the object at the calling level (because the function does actually operate on the\r\nsame object, not a copy of it).\r\nHere is one example showing this using pointers in C:\r\n# include < stdio .h >\r\nvoid pass_by_reference (int * m ) {\r\nprintf ( \" in pass_by_reference : received m =% d \\ n \" ,* m );\r\n* m =42;\r\nprintf ( \" in pass_by_reference : changed to m =% d \\ n \" ,* m );\r\n}\r\nint main ( void ) {\r\nint global_m = 1;\r\nprintf ( \" global_m =% d \\ n \" , global_m );\r\npass_by_reference (& global_m );\r\nprintf ( \" global_m =% d \\ n \" , global_m );\r\nreturn 0;\r\n}\r\ntogether with the corresponding output:\r\nglobal_m =1\r\nin pass_by_reference : received m =1\r\nin pass_by_reference : changed to m =42\r\nglobal_m =42\r\nC++ provides the ability to pass arguments as references by adding an ampersand in front of the\r\nargument name in the function definition:\r\n# include < stdio .h >\r\nvoid pass_by_reference (int & m ) {\r\nprintf ( \" in pass_by_reference : received m =% d \\ n \" ,m );\r\nm =42;\r\nprintf ( \" in pass_by_reference : changed to m =% d \\ n \" ,m );\r\n}",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/3cf732ce-bae7-47af-9dd1-916e8c57c5f4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3b6e555d5a483cb3d0e4273fe16fb89c224ceb159341872d3498f79d43539a52",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 345
      },
      {
        "segments": [
          {
            "segment_id": "b426cbde-9a07-4571-9f70-9875625dc80b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 39,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "3.4. PASSING ARGUMENTS TO FUNCTIONS 39\r\nint main ( void ) {\r\nint global_m = 1;\r\nprintf ( \" global_m =% d \\ n \" , global_m );\r\npass_by_reference ( global_m );\r\nprintf ( \" global_m =% d \\ n \" , global_m );\r\nreturn 0;\r\n}\r\ntogether with the corresponding output:\r\nglobal_m =1\r\nin pass_by_reference : received m =1\r\nin pass_by_reference : changed to m =42\r\nglobal_m =42\r\n3.4.3 Argument passing in Python\r\nIn Python, objects are passed as the value of a reference (think pointer) to the object. Depending\r\non the way the reference is used in the function and depending on the type of object it references,\r\nthis can result in pass-by-reference behaviour (where any changes to the object received as a function\r\nargument, are immediately reflected in the calling level).\r\nHere are three examples to discuss this. We start by passing a list to a function which iterates\r\nthrough all elements in the sequence and doubles the value of each element:\r\ndef double_the_values ( l ):\r\nprint \" in double_the_values : l = % s \" % l\r\nfor i in range (len( l )):\r\nl [ i ] = l [ i ] * 2\r\nprint \" in double_the_values : changed l to l = % s \" % l\r\nl_global = [0 , 1 , 2 , 3 , 10]\r\nprint ( \" In main : s =% s \" % l_global )\r\ndouble_the_values ( l_global )\r\nprint ( \" In main : s =% s \" % l_global )\r\nwhich produces this output:\r\nIn main : s =[0 , 1 , 2 , 3 , 10]\r\nin double_the_values : l = [0 , 1 , 2 , 3 , 10]\r\nin double_the_values : changed l to l = [0 , 2 , 4 , 6 , 20]\r\nIn main : s =[0 , 2 , 4 , 6 , 20]\r\nThe variable l is a reference to the list object. The line l[i] = l[i] * 2 first evaluates the\r\nright-hand side and reads the element with index i, then multiplies this by two. A reference to this\r\nnew object is then stored in the list object l at position with index i. We have thus modified the list\r\nobject, that is referenced through l.\r\nThe reference to the list object does never change: the line\r\nl [ i ] = l [ i ] * 2\r\nchanges the elements l[i] of the list l but never changes the reference l for the list. Thus both the\r\nfunction and calling level are operating on the same object through the references l and global l,\r\nrespectively.\r\nIn contrast, here is an example where do not modify the elements of the list within the function:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/b426cbde-9a07-4571-9f70-9875625dc80b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fe4cb4cd00b6d3af310d6ca75bf9b241c13c9e356d3ba51c7d23edebad28867f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 460
      },
      {
        "segments": [
          {
            "segment_id": "462526a3-2b7c-4c71-a9fd-884a775db2da",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 40,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "40 CHAPTER 3. DATA TYPES AND DATA STRUCTURES\r\ndef double_the_list ( l ):\r\nprint \" in double_the_list : l = % s \" % l\r\nl = l + l\r\nprint \" in double_the_list : changed l to l = % s \" % l\r\nl_global = \" Hello \"\r\nprint ( \" In main : l =% s \" % l_global )\r\ndouble_the_list ( l_global )\r\nprint ( \" In main : l =% s \" % l_global )\r\nwhich produces this output:\r\nIn main : l = Hello\r\nin double_the_list : l = Hello\r\nin double_the_list : changed l to l = HelloHello\r\nIn main : l = Hello\r\nWhat happens here is that during the evaluation of l = l + l a new object is created that holds\r\nl + l, and that we then bind the name l to it. In the process, we lose the references to the list object\r\nl that was given to the function (and thus we do not change the list object given to the function).\r\nFinally, let’s look at\r\ndef double_the_value ( l ):\r\nprint \" in double_the_value : l = % s \" % l\r\nl = 2 * l\r\nprint \" in double_the_values : changed l to l = % s \" % l\r\nl_global = 42\r\nprint ( \" In main : s =% s \" % l_global )\r\ndouble_the_value ( l_global )\r\nprint ( \" In main : s =% s \" % l_global )\r\nwhich produces this output:\r\nIn main : s =42\r\nin double_the_value : l = 42\r\nin double_the_values : changed l to l = 84\r\nIn main : s =42\r\nIn this example, we also double the value (from 42 to 84) within the function. However, when we\r\nbind the object 84 to the python name l (that is the line l = l * 2) we have created a new object\r\n(84), and we bind the new object to l. In the process, we lose the reference to the object 42 within\r\nthe function. This does not affect the object 42 itself, nor the reference l global to it.\r\nIn summary, Python’s behaviour of passing arguments to a function may appear to vary (if we\r\nview it from the pass by value versus pass by reference point of view). However, it is always call by\r\nvalue, where the value is a reference to the object in question, and the behaviour can be explained\r\nthrough the same reasoning in every case.\r\n3.4.4 Performance considerations\r\nCall by value function calls require copying of the value before it is passed to the function. From a\r\nperformance point of view (both execution time and memory requirements), this can be an expensive",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/462526a3-2b7c-4c71-a9fd-884a775db2da.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8b5bd899cc89889f130e306eb2e1b48f40fb223d9df258c0f2cc70c6fa62dab9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 457
      },
      {
        "segments": [
          {
            "segment_id": "37ec8e73-4857-4aea-b37a-1a8dcccbfe32",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 41,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "3.4. PASSING ARGUMENTS TO FUNCTIONS 41\r\nprocess if the value is large. (Imagine the value is a numpy.array object which could be several\r\nMegabytes or Gigabytes in size.)\r\nOne generally prefers call by reference for large data objects as in this case only a pointer to the\r\ndata objects is passed, independent of the actual size of the object, and thus this is generally faster\r\nthan call-by-value.\r\nPython’s approach of (effectively) calling by reference is thus efficient. However, we need to be\r\ncareful that our function do not modify the data they have been given where this is undesired.\r\n3.4.5 Inadvertent modification of data\r\nGenerally, a function should not modify the data given as input to it.\r\nFor example, the following code demonstrates the attempt to determine the maximum value of a\r\nlist, and – inadvertently – modifies the list in the process:\r\ndef mymax ( s ): # demonstrating side effect\r\nif len( s ) == 0:\r\nraise ValueError ( ’ mymax () arg is an empty sequence ’)\r\nelif len ( s ) == 1:\r\nreturn s [0]\r\nelse :\r\nfor i in range (1 , len( s )):\r\nif s [ i ] < s [ i - 1]:\r\ns [ i ] = s [ i - 1]\r\nreturn s [ len( s ) - 1]\r\ns = [ -45 , 3 , 6 , 2 , -1]\r\nprint ( \" in main before caling mymax ( s ): s =% s \" % s )\r\nprint ( \" mymax ( s )=% s \" % mymax ( s ))\r\nprint ( \" in main after calling mymax ( s ): s =% s \" % s )\r\nand produces this output\r\nin main before caling mymax ( s ): s =[ -45 , 3 , 6 , 2 , -1]\r\nmymax ( s )=6\r\nin main after calling mymax ( s ): s =[ -45 , 3 , 6 , 6 , 6]\r\nThe user of the mymax() function would not expect that the input argument is modified when the\r\nfunction executes. We should generally avoid this. There are several ways to find better solutions to\r\nthe given problem:\r\n• In this particular case, we could use the Python in-built function max() to obtain the maximum\r\nvalue of a sequence.\r\n• If we felt we need to stick to storing temporary values inside the list [this is actually not neces\u0002sary], we could create a copy of the incoming list s first, and then proceed with the algorithm\r\n(see section 3.4.6 on Copying objects).\r\n• Use another algorithm which uses an extra temporary variable rather than abusing the list for\r\nthis. For example:\r\ndef mymax ( s ):\r\nassert len( s ) > 0 , \" mymax () arg is an empty sequence \"\r\ntmp = s [0]\r\nfor item in s :",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/37ec8e73-4857-4aea-b37a-1a8dcccbfe32.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=89645c4a564ad94bc103d0bc7356ece8aad91774fe8519fb744992a6e4c6671d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 477
      },
      {
        "segments": [
          {
            "segment_id": "f7ee6109-8b24-4d3b-9b00-4d65e44b31b6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 42,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "42 CHAPTER 3. DATA TYPES AND DATA STRUCTURES\r\nif item > tmp :\r\ntmp = item\r\nreturn tmp\r\n• We could pass a tuple (instead of a list) to the function: a tuple is immutable and can thus never\r\nbe modified (this would result in an exception being raised when the function tries to write to\r\nelements in the tuple).\r\n3.4.6 Copying objects\r\nPython provides the id() function which returns an integer number that is unique for each object.\r\n(In the current CPython implementation, this is the memory address.) We can use this to identify\r\nwhether two objects are the same.\r\nTo copy a sequence object (including lists), we can slice it, i.e. if a is a list, then a[:] will return\r\na copy of a. Here is a demonstration:\r\n>>> a = range (10)\r\na\r\n>>> [0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9]\r\n>>> b = a\r\n>>> b [0] = 42\r\n>>> a # changing b changes a\r\n[42 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9]\r\n>>> id( a )\r\n4327533384\r\n>>> id( b )\r\n4327533384 # a and b refer to the same object\r\n>>> c = a [:]\r\n>>> id( c ) # c is a different object\r\n4327533816\r\n>>> c [0] = 100\r\n>>> a # changing c does not affect a\r\n[42 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9]\r\nPython’s standard library provides the copy module, which provides copy functions that can be\r\nused to create copies of objects. We could have used import copy; c = copy.deepcopy(a) instead\r\nof c = a[:].\r\n3.5 Equality and Identity/Sameness\r\nA related question concerns the equality of objects.\r\n3.5.1 Equality\r\nThe operators <, >, ==, >=, <=, and != compare the values of two objects. The objects need not have\r\nthe same type. For example:\r\n>>> a = 1.0; b = 1\r\n>>> type ( a )\r\n<type ’ float ’ >\r\n>>> type ( b )",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/f7ee6109-8b24-4d3b-9b00-4d65e44b31b6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e5ca19f6d67f0d556144d09be4749af13ef82c95d0f69e11f6bacb6efd471f51",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 354
      },
      {
        "segments": [
          {
            "segment_id": "5172679a-bc13-4399-a358-6612737bc061",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 43,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "3.5. EQUALITY AND IDENTITY/SAMENESS 43\r\n<type ’ int ’ >\r\n>>> a == b\r\nTrue\r\nSo the == operator checks whether the values of two objects are equal.\r\n3.5.2 Identity / Sameness\r\nTo see check whether two objects a and b are the same (i.e. a and b are references to the same place\r\nin memory), we can use the is operator (continued from example above):\r\n>>> a is b\r\nFalse\r\nOf course they are different here, as they are not of the same type.\r\nWe can also ask the id function which, according to the documentation string in Python 2.7\r\n“Returns the identity of an object. This is guaranteed to be unique among simultaneously existing\r\nobjects. (Hint: it’s the object’s memory address.)”\r\n>>> id( a )\r\n4298197712\r\n>>> id( b )\r\n4298187624\r\nwhich shows that a and b are stored in different places in memory.\r\n3.5.3 Example: Equality and identity\r\nWe close with an example involving lists:\r\n>>> x = [0 , 1 , 2]\r\n>>> y = x\r\n>>> x == y\r\nTrue\r\n>>> x is y\r\nTrue\r\n>>> id( x )\r\n4300880064\r\n>>> id( y )\r\n4300880064\r\n>>>\r\nHere, x and y are references to the same piece of memory, they are thus identical and the is operator\r\nconfirms this. The important point to remember is that line 2 (y=x) creates a new reference y to the\r\nsame list object that x is a reference for.\r\nAccordingly, we can change elements of x, and y will change simultaneously as both x and y refer\r\nto the same object:\r\n>>> x\r\n[0 , 1 , 2]\r\n>>> y\r\n[0 , 1 , 2]\r\n>>> x is y\r\nTrue",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/5172679a-bc13-4399-a358-6612737bc061.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=246f3b5ee5dd82ee2e62ea9aae533ecc68315e4a0f5a9c169c879b09e9a96b4f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "272aa159-dce5-479c-9274-e3c947271844",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 44,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "44 CHAPTER 3. DATA TYPES AND DATA STRUCTURES\r\n>>> x [0] = 100\r\n>>> y\r\n[100 , 1 , 2]\r\n>>> x\r\n[100 , 1 , 2]\r\nIn contrast, if we use z=x[:] (instead of z=x) to create a new name z, then the slicing operation\r\nx[:] will actually create a copy of the list x, and the new reference z will point to the copy. The\r\nvalue of x and z is equal, but x and z are not the same object (they are not identical):\r\n>>> x\r\n[100 , 1 , 2]\r\n>>> z = x [:] # create copy of x before assigning to z\r\n>>> z == x # same value\r\nTrue\r\n>>> z is x # are not the same object\r\nFalse\r\n>>> id( z ) # confirm by looking at ids\r\n4300737136\r\n>>> id( x )\r\n4300880064\r\n>>> x\r\n[100 , 1 , 2]\r\n>>> z\r\n[100 , 1 , 2]\r\nConsequently, we can change x without changing z, for example (continued)\r\n>>> x [0] = 42\r\n>>> x\r\n[42 , 1 , 2]\r\n>>> z\r\n[100 , 1 , 2]",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/272aa159-dce5-479c-9274-e3c947271844.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=28eaf18ff9ee9bfd2dd9bef9a04d822b3080f052fd4965a07ff97e96108aeb7d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 467
      },
      {
        "segments": [
          {
            "segment_id": "4051ef52-96bd-43b8-9b97-dae2ac4c326c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 45,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 4\r\nIntrospection\r\nA Python code can ask and answer questions about itself and the objects it is manipulating.\r\n4.1 dir()\r\ndir() is a built-in function which returns a list of all the names belonging to some namespace.\r\n• If no arguments are passed to dir (i.e. dir()), it inspects the namespace in which it was called.\r\n• If dir is given an argument (i.e. dir(<object>), then it inspects the namespace of the object\r\nwhich it was passed.\r\nFor example:\r\n>>> apples = [ ’ Cox ’ , ’ Braeburn ’ , ’ Jazz ’]\r\n>>> dir( apples )\r\n[ ’ __add__ ’ , ’ __class__ ’ , ’ __contains__ ’ , ’ __delattr__ ’ , ’ __delitem__ ’ ,\r\n’ __delslice__ ’ , ’ __doc__ ’ , ’ __eq__ ’ , ’ __ge__ ’ , ’ __getattribute__ ’ ,\r\n’ __getitem__ ’ , ’ __getslice__ ’ , ’ __gt__ ’ , ’ __hash__ ’ , ’ __iadd__ ’ ,\r\n’ __imul__ ’ , ’ __init__ ’ , ’ __iter__ ’ , ’ __le__ ’ , ’ __len__ ’ , ’ __lt__ ’ ,\r\n’ __mul__ ’ , ’ __ne__ ’ , ’ __new__ ’ , ’ __reduce__ ’ , ’ __reduce_ex__ ’ ,\r\n’ __repr__ ’ , ’ __reversed__ ’ , ’ __rmul__ ’ , ’ __setattr__ ’ , ’ __setitem__ ’ ,\r\n’ __setslice__ ’ , ’ __str__ ’ , ’ append ’ , ’ count ’ , ’ extend ’ , ’ index ’ ,\r\n’ insert ’ , ’ pop ’ , ’ remove ’ , ’ reverse ’ , ’ sort ’]\r\n>>> dir ()\r\n[ ’ __builtins__ ’ , ’ __doc__ ’ , ’ __name__ ’ , ’ apples ’]\r\n>>> name = \" Peter \"\r\n>>> dir( name )\r\n[ ’ __add__ ’ , ’ __class__ ’ , ’ __contains__ ’ , ’ __delattr__ ’ , ’ __doc__ ’ ,\r\n’ __eq__ ’ , ’ __ge__ ’ , ’ __getattribute__ ’ , ’ __getitem__ ’ ,\r\n’ __getnewargs__ ’ , ’ __getslice__ ’ , ’ __gt__ ’ , ’ __hash__ ’ , ’ __init__ ’ ,\r\n’ __le__ ’ , ’ __len__ ’ , ’ __lt__ ’ , ’ __mod__ ’ , ’ __mul__ ’ , ’ __ne__ ’ ,\r\n’ __new__ ’ , ’ __reduce__ ’ , ’ __reduce_ex__ ’ , ’ __repr__ ’ , ’ __rmod__ ’ ,\r\n’ __rmul__ ’ , ’ __setattr__ ’ , ’ __str__ ’ , ’ capitalize ’ , ’ center ’ , ’ count ’ ,\r\n’ decode ’ , ’ encode ’ , ’ endswith ’ , ’ expandtabs ’ , ’ find ’ , ’ index ’ ,\r\n’ isalnum ’ , ’ isalpha ’ , ’ isdigit ’ , ’ islower ’ , ’ isspace ’ , ’ istitle ’ ,\r\n’ isupper ’ , ’ join ’ , ’ ljust ’ , ’ lower ’ , ’ lstrip ’ , ’ replace ’ , ’ rfind ’ ,\r\n’ rindex ’ , ’ rjust ’ , ’ rsplit ’ , ’ rstrip ’ , ’ split ’ , ’ splitlines ’ ,\r\n’ startswith ’ , ’ strip ’ , ’ swapcase ’ , ’ title ’ , ’ translate ’ , ’ upper ’ ,\r\n45",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/4051ef52-96bd-43b8-9b97-dae2ac4c326c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9be0eb118258dae7389620f03f21ce92d349c2bd38b92552370ab61929ff8ac6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 546
      },
      {
        "segments": [
          {
            "segment_id": "4051ef52-96bd-43b8-9b97-dae2ac4c326c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 45,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 4\r\nIntrospection\r\nA Python code can ask and answer questions about itself and the objects it is manipulating.\r\n4.1 dir()\r\ndir() is a built-in function which returns a list of all the names belonging to some namespace.\r\n• If no arguments are passed to dir (i.e. dir()), it inspects the namespace in which it was called.\r\n• If dir is given an argument (i.e. dir(<object>), then it inspects the namespace of the object\r\nwhich it was passed.\r\nFor example:\r\n>>> apples = [ ’ Cox ’ , ’ Braeburn ’ , ’ Jazz ’]\r\n>>> dir( apples )\r\n[ ’ __add__ ’ , ’ __class__ ’ , ’ __contains__ ’ , ’ __delattr__ ’ , ’ __delitem__ ’ ,\r\n’ __delslice__ ’ , ’ __doc__ ’ , ’ __eq__ ’ , ’ __ge__ ’ , ’ __getattribute__ ’ ,\r\n’ __getitem__ ’ , ’ __getslice__ ’ , ’ __gt__ ’ , ’ __hash__ ’ , ’ __iadd__ ’ ,\r\n’ __imul__ ’ , ’ __init__ ’ , ’ __iter__ ’ , ’ __le__ ’ , ’ __len__ ’ , ’ __lt__ ’ ,\r\n’ __mul__ ’ , ’ __ne__ ’ , ’ __new__ ’ , ’ __reduce__ ’ , ’ __reduce_ex__ ’ ,\r\n’ __repr__ ’ , ’ __reversed__ ’ , ’ __rmul__ ’ , ’ __setattr__ ’ , ’ __setitem__ ’ ,\r\n’ __setslice__ ’ , ’ __str__ ’ , ’ append ’ , ’ count ’ , ’ extend ’ , ’ index ’ ,\r\n’ insert ’ , ’ pop ’ , ’ remove ’ , ’ reverse ’ , ’ sort ’]\r\n>>> dir ()\r\n[ ’ __builtins__ ’ , ’ __doc__ ’ , ’ __name__ ’ , ’ apples ’]\r\n>>> name = \" Peter \"\r\n>>> dir( name )\r\n[ ’ __add__ ’ , ’ __class__ ’ , ’ __contains__ ’ , ’ __delattr__ ’ , ’ __doc__ ’ ,\r\n’ __eq__ ’ , ’ __ge__ ’ , ’ __getattribute__ ’ , ’ __getitem__ ’ ,\r\n’ __getnewargs__ ’ , ’ __getslice__ ’ , ’ __gt__ ’ , ’ __hash__ ’ , ’ __init__ ’ ,\r\n’ __le__ ’ , ’ __len__ ’ , ’ __lt__ ’ , ’ __mod__ ’ , ’ __mul__ ’ , ’ __ne__ ’ ,\r\n’ __new__ ’ , ’ __reduce__ ’ , ’ __reduce_ex__ ’ , ’ __repr__ ’ , ’ __rmod__ ’ ,\r\n’ __rmul__ ’ , ’ __setattr__ ’ , ’ __str__ ’ , ’ capitalize ’ , ’ center ’ , ’ count ’ ,\r\n’ decode ’ , ’ encode ’ , ’ endswith ’ , ’ expandtabs ’ , ’ find ’ , ’ index ’ ,\r\n’ isalnum ’ , ’ isalpha ’ , ’ isdigit ’ , ’ islower ’ , ’ isspace ’ , ’ istitle ’ ,\r\n’ isupper ’ , ’ join ’ , ’ ljust ’ , ’ lower ’ , ’ lstrip ’ , ’ replace ’ , ’ rfind ’ ,\r\n’ rindex ’ , ’ rjust ’ , ’ rsplit ’ , ’ rstrip ’ , ’ split ’ , ’ splitlines ’ ,\r\n’ startswith ’ , ’ strip ’ , ’ swapcase ’ , ’ title ’ , ’ translate ’ , ’ upper ’ ,\r\n45",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/4051ef52-96bd-43b8-9b97-dae2ac4c326c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9be0eb118258dae7389620f03f21ce92d349c2bd38b92552370ab61929ff8ac6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 546
      },
      {
        "segments": [
          {
            "segment_id": "2a64c4c4-fa6c-4115-aa02-1664f5004413",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 46,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "46 CHAPTER 4. INTROSPECTION\r\n’ zfill ’]\r\n4.1.1 Magic names\r\nYou will find many names which both start and end with a double underscore (e.g. name ). These\r\nare called magic names. Functions with magic names provide the implementation of particular python\r\nfunctionality.\r\nFor example, the application of the str to an object a, i.e. str(a), will – internally – result in the\r\nmethod a. str () being called. This method str generally needs to return a string. The idea\r\nis that the str () method should be defined for all objects (including those that derive from new\r\nclasses that a programmer may create) so that all objects (independent of their type or class) can be\r\nprinted using the str() function. The actual conversion of some object x to the string is then done\r\nvia the object specific method x. str ().\r\nWe can demonstrate this by creating a class my int which inherits from the Python’s integer base\r\nclass, and overrides the str method. (It requires more Python knowledge than provided up to this\r\npoint in the text to be able to understand this example.)\r\nclass my_int (int ):\r\n\"\"\" Inherited from int \"\"\"\r\ndef __str__ ( self ):\r\n\"\"\" Tailored str representation of my int \"\"\"\r\nreturn \" my_int : % s \" % (int . __str__ ( self ))\r\na = my_int (3)\r\nb = int (4) # equivalent to b = 4\r\nprint \" a * b = \" , a * b\r\nprint \" Type a = \" , type ( a ) , \" str ( a ) = \" , str( a )\r\nprint \" Type b = \" , type ( b ) , \" str ( b ) = \" , str( b )\r\nThis program produces the following output:\r\na * b = 12\r\nType a = <class ’ __main__ . my_int ’ > str ( Sa )= my_int : 3\r\nType b = <type ’ int ’ > str ( Sb )= 4\r\nFurther Reading\r\nSee →Python documentation, Data Model\r\n4.2 type\r\nThe type(<object>) command returns the type of an object:\r\n>>> type (1)\r\n<type ’ int ’ >\r\n>>> type (1.0)\r\n<type ’ float ’ >\r\n>>> type ( \" Python \" )\r\n<type ’ str ’ >\r\n>>> import math\r\n>>> type ( math )",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/2a64c4c4-fa6c-4115-aa02-1664f5004413.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=afe068539e527255c416d7aeddb44421a2f9a5d211ea58016254d844c4fa6db5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 388
      },
      {
        "segments": [
          {
            "segment_id": "973930b0-93dd-4113-a77e-6d0db5f8b34b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 47,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "4.3. ISINSTANCE 47\r\n<type ’ module ’ >\r\n>>> type ( math . sin )\r\n<type ’ builtin_function_or_method ’ >\r\n4.3 isinstance\r\nisinstance(<object>, <typespec>) returns True if the given object is an instance of the given type,\r\nor any of its superclasses. Use help(isinstance) for the full syntax.\r\n>>> isinstance (2 , int )\r\nTrue\r\n>>> isinstance (2. , int )\r\nFalse\r\n>>> isinstance (a ,int ) # a is an instance of my_int\r\n# which inherits from int\r\nTrue\r\n>>> type ( a )\r\n<class ’ __main__ . my_int ’ >\r\n4.4 help\r\n• The help(<object>) function will report the docstring (magic attritube with name doc ) of\r\nthe object that it is given, sometimes complemented with additional information. In the case\r\nof functions, help will also show the list of arguments that the function accepts (but it cannot\r\nprovide the return value).\r\n• help() starts an interactive help environment.\r\n• It is common to use the help command a lot to remind oneself of the syntax and semantic of\r\ncommands.\r\n>>> help ( isinstance )\r\nHelp on built -in function isinstance in module __builtin__ :\r\nisinstance (...)\r\nisinstance (object , class -or -type -or - tuple ) -> bool\r\nReturn whether an object is an instance of a class or of a\r\nsubclass thereof . With a type as second argument , return\r\nwhether that is the object ’s type . The form using a tuple ,\r\nisinstance (x , (A , B , ...)) , is a shortcut for\r\nisinstance (x , A ) or isinstance (x , B ) or ... ( etc .).\r\n>>> import math\r\n>>> help ( math . sin )\r\nHelp on built - in function sin in module math :\r\nsin (...)\r\nsin ( x )",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/973930b0-93dd-4113-a77e-6d0db5f8b34b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e17aaee04341623cb73752b628d6d6efeb2f83a726fa27b35cfc6ceb79d871d6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 295
      },
      {
        "segments": [
          {
            "segment_id": "0744d0cb-bb6e-4df8-b83a-7cd5c545a043",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 48,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "48 CHAPTER 4. INTROSPECTION\r\nReturn the sine of x ( measured in radians ).\r\n>>> help ( math )\r\nHelp on module math :\r\nNAME\r\nmath\r\nFILE\r\n/ sw / lib / python2 .4/ lib - dynload / math . so\r\nMODULE DOCS\r\nhttp :// www . python . org / doc / current / lib / module - math . html\r\nDESCRIPTION\r\nThis module is always available . It provides access to the\r\nmathematical functions defined by the C standard .\r\nFUNCTIONS\r\nacos (...)\r\nacos ( x )\r\nReturn the arc cosine ( measured in radians ) of x .\r\nasin (...)\r\nasin ( x )\r\nReturn the arc sine ( measured in radians ) of x .\r\n[... snip : content removed here ...]\r\ntanh (...)\r\ntanh ( x )\r\nReturn the hyperbolic tangent of x .\r\nDATA\r\ne = 2.7182818284590451\r\npi = 3.1415926535897931\r\nThe help function needs to be given the name of an object (which must exist in the current name\r\nspace). For example pyhelp(math.sqrt) will not work if the math module has not been imported before\r\n>>> help ( math . sqrt )\r\nTraceback ( most recent call last ):\r\nFile \" < stdin > \" , line 1 , in < module >\r\nNameError : name ’ math ’ is not defined\r\n>>> import math\r\n>>> help ( math . sqrt )",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/0744d0cb-bb6e-4df8-b83a-7cd5c545a043.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6205eac3be7a6653605b0e97d5b10f16ea19014683f6b9f340bd20f6fe9f0c6a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 228
      },
      {
        "segments": [
          {
            "segment_id": "2bc2a21c-358f-4d55-a505-0471122502ea",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 49,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "4.5. DOCSTRINGS 49\r\nHelp on built -in function sqrt in module math :\r\nsqrt (...)\r\nsqrt ( x )\r\nReturn the square root of x .\r\nInstead of importing the module, we could also have given the string of math.sqrt to the help\r\nfunction, i.e.:\r\n>>> help ( ’ math . sqrt ’)\r\nHelp on built -in function sqrt in module math :\r\n...\r\nhelp is a function which gives information about the object which is passed as its argument. Most\r\nthings in Python (classes, functions, modules, etc.) are objects, and therefor can be passed to help.\r\nThere are, however, some things on which you might like to ask for help, which are not existing Python\r\nobjects. In such cases it is often possible to pass a string containing the name of the thing or concept\r\nto help, for example\r\n• help(’modules’) will generate a list of all modules which can be imported into the current\r\ninterpreter. Note that help(modules) (note absence of quotes) will result in a NameError (unless\r\nyou are unlucky enough to have a variable called modules floating around, in which case you\r\nwill get help on whatever that variable happens to refer to.)\r\n• help(’some module’), where some module is a module which has not been imported yet (and\r\ntherefor isn’t an object yet), will give you that module’s help information.\r\n• help(’some keyword’): For example and, if or print (i.e. help(’and’), help(’if’) and\r\nhelp(’print’)). These are special words recognized by Python: they are not objects and thus\r\ncannot be passed as arguments to help. Passing the name of the keyword as a string to help\r\nworks, but only if you have Python’s HTML documentation installed, and the interpreter has\r\nbeen made aware of its location by setting the environment variable PYTHONDOCS.\r\n4.5 Docstrings\r\nThe command help(<object>) accesses the documentation strings of objects.\r\nAny literal string apparing as the first item in the definition of a class, function, method or module,\r\nis taken to be its docstring.\r\nhelp includes the docstring in the information it displays about the object.\r\nIn addition to the docstring it may display some other information, for example, in the case of\r\nfunctions, it displays the function’s signature.\r\nThe docstring is stored in the object’s doc attribute.\r\n>>> help ( math . sin )\r\nHelp on built -in function sin in module math :\r\nsin (...)\r\nsin ( x )\r\nReturn the sine of x ( measured in radians ).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/2bc2a21c-358f-4d55-a505-0471122502ea.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3572395b503fe713a7ed8c82665bc510516edfec41f9c046671479015b93919d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 408
      },
      {
        "segments": [
          {
            "segment_id": "26021aa9-d090-4fa6-a9e3-6d57e1a334ec",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 50,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "50 CHAPTER 4. INTROSPECTION\r\n>>> print math . sin . __doc__\r\nsin ( x )\r\nReturn the sine of x ( measured in radians ).\r\nFor user-defined functions, classes, types, modules, . . . ), one should always provide a docstring.\r\nDocumenting a user-provided function:\r\n>>> def power2and3 ( x ):\r\n... \"\"\" Returns the tuple ( x **2 , x **3) \"\"\"\r\n... return x **2 ,x **3\r\n...\r\n>>> power2and3 (2)\r\n(4 , 8)\r\n>>> power2and3 (4.5)\r\n(20.25 , 91.125)\r\n>>> power2and3 (0+1 j )\r\n(( -1+0 j ) , -1 j )\r\n>>> help ( power2and3 )\r\nHelp on function power2and3 in module __main__ :\r\npower2and3 ( x )\r\nReturns the tuple ( x **2 , x **3)\r\n>>> print power2and3 . __doc__\r\nReturns the tuple ( x **2 , x **3)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/26021aa9-d090-4fa6-a9e3-6d57e1a334ec.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9ae87c4cfc2e2a385d319b688d1cbd4d66d44a47755f01be0440d03cda964e2d",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fcd8d3dc-2bda-4c68-8bbd-bd615f0e1106",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 51,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 5\r\nInput and Output\r\nIn this section, we describe the old style (pre Python 3) of printing, which includes the use of the\r\nprint command without parenthesis (which is not allowed to be used in Python 3.x), and the old-style\r\nformat specifiers % (which can be used in Python 2.x and 3.x). See section 5.1.5 for details.\r\n5.1 Printing to standard output (normally the screen)\r\nThe print command is the most commonly used command to print information to the “standard\r\noutput devices” which is normally the screen.\r\nThere are two modes to use print.\r\n5.1.1 Simple print (not compatible with Python 3.x)\r\nThe easiest way to use the print command is to list the variables to be printed, separated by comma.\r\nHere are a few examples:\r\n>>> a = 10\r\n>>> b = ’ test text ’\r\n>>> print a\r\n10\r\n>>> print b\r\ntest text\r\n>>> print a , b\r\n10 test text\r\n>>> print \" The answer is \" ,a\r\nThe answer is 10\r\n>>> print \" The answer is \" ,a , \" and the string contains \" ,b\r\nThe answer is 10 and the string contains test text\r\n>>> print \" The answer is \" ,a , \" and the string reads \" ,b\r\nThe answer is 10 and the string reads test text\r\nPython adds a space between every object that is being printed.\r\nPython prints a new line after every print statement. To suppress that, add an extra comma at\r\nthe end of the line:\r\nprint \" Printing in line one \" ,\r\nprint \" ... still printing in line one . \"\r\n51",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/fcd8d3dc-2bda-4c68-8bbd-bd615f0e1106.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=61625bd2bd265d488e990f0824ca54456c7bbe9a220e139eea795441a24ad7df",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 406
      },
      {
        "segments": [
          {
            "segment_id": "d27c9425-29dc-4c70-87e7-4835006551e2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 52,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "52 CHAPTER 5. INPUT AND OUTPUT\r\n5.1.2 Formatted printing\r\nThe more sophisticated way of formatting output uses a syntax very similar to Matlab’s fprintf (and\r\ntherefor also similar to C’s printf).\r\nThe overall structure is that there is a string containing format specifiers, followed by a percentage\r\nsign and a tuple that contains the variables to be printed in place of the format specifiers.\r\n>>> print \" a = % d b = % d \" % (10 ,20)\r\na = 10 b = 20\r\nA string can contain format identifiers (such as %f to format as a floats, %d to format as an integers,\r\nand %s to format as a string):\r\n>>> from math import pi\r\n>>> print \" Pi = %5.2 f \" % pi\r\nPi = 3.14\r\n>>> print \" Pi = %10.3 f \" % pi\r\nPi = 3.142\r\n>>> print \" Pi = %10.8 f \" % pi\r\nPi = 3.14159265\r\n>>> print \" Pi = % d \" % pi\r\nPi = 3\r\nThe format specifier of type %W.Df means that a Float should be printed with a total Width of W\r\ncharacters and D digits behind the Decimal point. (This is identical to Matlab and C, for example.)\r\nTo print more than one object, provide multiple format specifiers and list several objects in the\r\ntuple:\r\n>>> print \" Pi = %f , 142* pi = % f and pi ^2 = % f . \" % ( pi ,142* pi , pi **2)\r\nPi = 3.141593 , 142* pi = 446.106157 and pi ^2 = 9.869604.\r\nNote that the conversion of a format specifier and a tuple of variables into string does not rely on\r\nthe print command:\r\n>>> from math import pi\r\n>>> \" pi = % f \" % pi\r\n’ pi = 3.141593 ’\r\nThis means that we can convert objects into strings whereever we need, and we can decide to print\r\nthe strings later – there is no need to couple the formatting closely to the code that does the printing.\r\nOverview of commonly used format specifiers using the astronomical unit as an example:\r\n>>> AU = 149597870700 # astronomical unit [ m ]\r\n>>> \" % f \" % AU # line 1 in table\r\n’ 149597870700.000000 ’\r\nspecifier style Example output for AU\r\n%f floating point 149597870700.000000\r\n%e exponential notation 1.495979e+11\r\n%g shorter of %e or %f 1.49598e+11\r\n%d integer 149597870700\r\n%s str() 149597870700\r\n%r repr() 149597870700L",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/d27c9425-29dc-4c70-87e7-4835006551e2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ac9a51e84f727368f4e744a824f5f8277a900794d96d18deaa1712f9232d6f7f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 410
      },
      {
        "segments": [
          {
            "segment_id": "479f25f7-c018-4cd9-8cfc-8498c30c1d18",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 53,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "5.1. PRINTING TO STANDARD OUTPUT (NORMALLY THE SCREEN) 53\r\n5.1.3 “str” and “ str ”\r\nAll objects in Python should provide a method str which returns a nice string representation of\r\nthe object. This method a. str () is called when we apply the str function to object a:\r\n>>> a = 3.14\r\n>>> a . __str__ ()\r\n’ 3.14 ’\r\n>>> str( a )\r\n’ 3.14 ’\r\nThe str function is extremely convenient as it allows us to print more complicated objects, such as\r\n>>> b = [3 , 4.2 , [ ’ apple ’ , ’ banana ’] , (0 , 1)]\r\n>>> str( b )\r\n\" [3 , 4.2 , [ ’ apple ’, ’ banana ’] , (0 , 1)] \"\r\nThe way Python prints this is that it uses the str method of the list object. This will print\r\nthe opening square bracket [ and then call the str method of the first object, i.e. the integer 3.\r\nThis will produce 3. Then the list object’s str method prints the comma , and moves on to call\r\nthe str method of the next element in the list (i.e. 4.2) to print itself. This way any composite\r\nobject can be represented as a string by asking the objects it holds to convert themselves to strings.\r\nThe string method of object x is called implicitly, when we\r\n• use the ”%s” format specifier to print x\r\n• pass the object x directly to the print command:\r\n>>> print ( b )\r\n[3 , 4.2 , [ ’ apple ’ , ’ banana ’] , (0 , 1)]\r\n>>> print ( \" % s \" % b )\r\n[3 , 4.2 , [ ’ apple ’ , ’ banana ’] , (0 , 1)]\r\n5.1.4 “repr” and “ repr ”\r\nA second function, repr, should convert a given object into a string presentation so that this string\r\ncan be used to re-created the object using the eval function. The repr function will generally provide\r\na more detailed string than str. Applying repr to the object x will attempt to call x. repr ().\r\n>>> from math import pi as a1\r\n>>> str( a1 )\r\n’ 3.14159265359 ’ # convenient presentation as string\r\n>>> repr ( a1 )\r\n’ 3.141592653589793 ’ # exact representation as string\r\n>>> number_as_string = repr ( a1 )\r\n>>> a2 = eval ( number_as_string ) # evaluate string\r\n>>> a2\r\n3.141592653589793\r\n>>> a2 - a1 # -> repr is exact representation\r\n0.0\r\n>>> a1 - eval ( repr ( a1 ))\r\n0.0\r\n>>> a1 - eval (str ( a1 )) # -> str has lost a few digits\r\n-2.0694557179012918 e -13",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/479f25f7-c018-4cd9-8cfc-8498c30c1d18.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5f8d8e48df83c8aac456c6cded23d24cf97b7833d2d1f30a962b74d188e52135",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 447
      },
      {
        "segments": [
          {
            "segment_id": "7f904607-107a-47a0-8edd-1e4896752b19",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 54,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "54 CHAPTER 5. INPUT AND OUTPUT\r\nWe can convert an object to its str() or repr presentation using the format specifiers %s and %r,\r\nrespectively.\r\n>>> import math\r\n>>> \" % s \" % math . pi\r\n’ 3.14159265359 ’\r\n>>> \" % r \" % math . pi\r\n’ 3.141592653589793 ’\r\n5.1.5 Changes from Python 2 to Python 3: print\r\nOne (maybe the most obvious) change going from Python 2 to Python 3 is that the print command\r\nloses its special status. In Python 2, we could print ”Hello World” using\r\nprint \" Hello World \" # valid in Python 2. x\r\nEffectively, we call the function print with the argument \"Hello World\". All other functions in\r\nPython are called such that the argument is enclosed in parentheses, i.e.\r\nprint ( \" Hello World \" ) # valid in Python 3. x\r\nThis is the new convention required in Python 3 (and allowed for recent version of Python 2.x.)\r\nThe good news is that everything we have learned about formatting strings using the percentage\r\noperator, can be used in Python 3.x as well:\r\n>>> import math\r\n>>> a = math . pi\r\n>>> \" my pi = % f \" % a # string formatting\r\n’ my pi = 3.141593 ’\r\n>>> print \" my pi = % f \" % a # valid print in 2. x\r\nmy pi = 3.141593\r\n>>> print ( \" my pi = % f \" % a ) # valid print in 2.7 and 3. x\r\nmy pi = 3.141593\r\n# another example to follow\r\n>>> \" Short pi = %.2 f , longer pi = %.12 f . \" % (a , a )\r\n’ Short pi = 3.14 , longer pi = 3.141592653590. ’\r\n>>> print \" Short pi = %.2 f , longer pi = %.12 f . \" % (a , a )\r\nShort pi = 3.14 , longer pi = 3.141592653590.\r\n>>> print ( \" Short pi = %.2 f , longer pi = %.12 f . \" % (a , a ))\r\nShort pi = 3.14 , longer pi = 3.141592653590.\r\n5.1.6 Changes from Python 2 to Python 3: formatting of strings\r\nA new system of built-in formatting has been proposed and is meant to replace the old-style percentage\r\noperator formatting (%) in the long term.\r\nBasic ideas in examples:\r\n>>> \" {} needs {} pints \" . format ( ’ Peter ’ ,4) # insert values in order\r\n’ Peter needs 4 pints ’\r\n>>> \" {0} needs {1} pints \" . format ( ’ Peter ’ ,4) # index which element\r\n’ Peter needs 4 pints ’ # from tuple to insert",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/7f904607-107a-47a0-8edd-1e4896752b19.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4c25cd5eb72ef2785da5fd03c570e98ec6e90b923ff0de4865bbb045c5cca4b0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 448
      },
      {
        "segments": [
          {
            "segment_id": "24678920-21de-43d2-bfb3-29a7bfa7e536",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 55,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "5.2. READING AND WRITING FILES 55\r\n>>> \" {1} needs {0} pints \" . format ( ’ Peter ’ ,4)\r\n’4 needs Peter pints ’\r\n>>> \" { name } needs { number } pints \" . format (\\ # reference element to\r\n... name = ’ Peter ’ , number =4) # print by name\r\n’ Peter needs 4 pints ’\r\n>>> \" Pi is approximately {: f }. \" . format ( math . pi ) # can use old -\r\n’ Pi is approximately 3.141593. ’ # style format % f\r\n>>> \" Pi is approximately {:.2 f }. \" . format ( math . pi ) # and precision\r\n’ Pi is approximately 3.14. ’\r\n>>> \" Pi is approximately {:6.2 f }. \" . format ( math . pi ) # and width\r\n’ Pi is approximately 3.14. ’ # specification\r\nThis is a powerful and elegant way of string formatting, which is meant to be used exclusively in\r\nthe far future.\r\nFurther information\r\n• Examples http://docs.python.org/library/string.html#format-examples\r\n• Python Enhancement Proposal 3101\r\n• Python library String Formatting Operations\r\n• Old string formatting\r\n• Introduction to Fancier Output Formatting, Python tutorial, section 7.1\r\n5.2 Reading and writing files\r\nHere is a program that\r\n1. writes some text to a file with name test.txt,\r\n2. and then reads the text again and\r\n3. prints it to the screen.\r\n# 1. Write a file\r\nout_file = open ( \" test . txt \" , \" w \" ) # ’w ’ stands for Writing\r\nout_file . write ( \" Writing text to file . This is the first line .\\ n \" +\\\r\n\" And the second line . \" )\r\nout_file . close () # close the file\r\n# 2. Read a file\r\nin_file = open ( \" test . txt \" , \" r \" ) # ’r ’ stands for Reading\r\ntext = in_file . read () # read complete file into\r\n# string variable text\r\nin_file . close () # close the file\r\n# 3. Display data\r\nprint text",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/24678920-21de-43d2-bfb3-29a7bfa7e536.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=98fe1b78ec3056adf598ddf109116548f963c819e0315a212b4d493b1122f1c6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 345
      },
      {
        "segments": [
          {
            "segment_id": "4266c8b0-0c84-4522-8e08-4ca54f3313b5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 56,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "56 CHAPTER 5. INPUT AND OUTPUT\r\nThe data stored in the file test.txt is\r\nWriting text to file . This is the first line .\r\nAnd the second line .\r\nIn more detail, you have opened a file with the open command, and assigned this open file object\r\nto the variable out file. We have then written data to the file using the out file.write method.\r\nNote that in the example above, we have given a string to the write method. We can, of course, use\r\nall the formatting that we have discussed before in section 5.1.2. For example, to write this file with\r\nname table table.txt\r\n1 x 17 = 17\r\n2 x 17 = 34\r\n3 x 17 = 51\r\n4 x 17 = 68\r\n5 x 17 = 85\r\n6 x 17 = 102\r\n7 x 17 = 119\r\n8 x 17 = 136\r\n9 x 17 = 153\r\n10 x 17 = 170\r\nwe can use this Python program\r\nf = open ( ’ table . txt ’ , ’w ’)\r\nfor i in range (1 , 11):\r\nf . write ( \" %2 d x 17 = %4 d \\ n \" % (i , i * 17))\r\nf . close ()\r\nIt is good practice to close() files when we have finished reading and writing. If a Python program is\r\nleft in a controlled way (i.e. not through a power cut or an unlikely bug deep in the Python language\r\nor the operating system) then it will close all open files as soon as the file objects are destroyed.\r\nHowever, closing them actively as soon as possible is better style.\r\n5.2.1 File reading examples\r\nWe use a file named myfile.txt containing the following 3 lines of text for the examples below:\r\nThis is the first line.\r\nThis is the second line.\r\nThis is a third and last line.\r\nfileobject.read()\r\nThe fileobject.read() method reads the whole file, and returns it as one string (including new line\r\ncharacters).\r\n>>> f = open ( ’ myfile . txt ’ , ’r ’)\r\n>>> f . read ()\r\n’ This is the first line .\\ nThis is the second line .\\ nThis is a third and last line .\\ n ’\r\n>>> f . close ()",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/4266c8b0-0c84-4522-8e08-4ca54f3313b5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=259d1c3d547c72d548a538e8b3aee384bb9b92d4e74b51e2969783a321dfba77",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 378
      },
      {
        "segments": [
          {
            "segment_id": "6a8505d7-4212-401d-b668-08bb47956b56",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 57,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "5.2. READING AND WRITING FILES 57\r\nfileobject.readlines()\r\nThe fileobject.readlines() method returns a list of strings, where each element of the list corre\u0002sponds to one line in the string:\r\n>>> f = open ( ’ myfile . txt ’ , ’r ’)\r\n>>> f . readlines ()\r\n[ ’ This is the first line .\\ n ’ , ’ This is the second line .\\ n ’ ,\r\n’ This is a third and last line .\\ n ’]\r\n>>> f . close ()\r\nThis is often used to iterate over the lines, and to do something with each line. For example:\r\nf = open ( ’ myfile . txt ’ , ’r ’)\r\nfor line in f . readlines ():\r\nprint ( \" % d characters \" % len( line ))\r\nf . close ()\r\nwith output\r\n24 characters\r\n25 characters\r\n31 characters\r\nNote that this will read the complete file into a list of strings when the readlines() method is\r\ncalled. This is no problem if we know that the file is small and will fit into the machine’s memory.\r\nIf so, we can also close the file before we process the data, i.e.:\r\nf = open ( ’ myfile . txt ’ , ’r ’)\r\nlines = f . readlines ():\r\nf . close ()\r\nfor line in lines :\r\nprint ( \" % d characters \" % len( line ))\r\nIterating over lines (file object)\r\nThere is a neater possibility to read a file line by line which (i) will only read one line at a time (and\r\nis thus suitable for large files as well) and (ii) results in more compact code:\r\nf = open ( ’ myfile . txt ’ , ’r ’)\r\nfor line in f :\r\nprint ( \" % d characters \" % len( line ))\r\nf . close ()\r\nHere, the file handler f acts as in iterator and will return the next line in every subsequent iteration\r\nof the for-loop until the end of the file is reached (and then the for-loop is terminated).\r\nFurther reading Methods of File objects, Tutorial, Section 7.2.1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/6a8505d7-4212-401d-b668-08bb47956b56.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f3e023bc7312b63fccb7d03d77e2238f26e5651d19aef640352c95f1c76c7fff",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "030190cf-e9e5-4024-92a3-42deffea54f4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 58,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "58 CHAPTER 5. INPUT AND OUTPUT",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/030190cf-e9e5-4024-92a3-42deffea54f4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=236841605089a87089c68203c557e62d79464b14879d0269b13ff2f1a692df32",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 359
      },
      {
        "segments": [
          {
            "segment_id": "04e2691a-9ab8-462f-80e6-26218d190fc5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 59,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 6\r\nControl Flow\r\n6.1 Basics\r\nFor a given file with a python program, the python interpreter will start at the top and then process\r\nthe file. We demonstrate this with a simple program, for example:\r\n1 def f ( x ):\r\n2 \"\"\" function that computes and returns x * x \"\"\"\r\n3 return x * x\r\n4\r\n5 print ( \" Main program starts here \" )\r\n6 print ( \" 4 * 4 = % s \" % f (4))\r\n7 print ( \" In last line of program -- bye \" )\r\nThe basic rule is that commands in a file (or function or any sequence of commands) is processed\r\nfrom top to bottom. If several commands are given in the same line (separated by ;), then these\r\nare processed from left to right (although it is discouraged to have multiple statements per line to\r\nmaintain good readability of the code.)\r\nIn this example, the interpreter starts at the top (line 1). It finds the def keyword and remembers\r\nfor the future that the function f is defined here. (It will not yet execute the function body, i.e. line\r\n3 – this only happens when we call the function.) The interpreter can see from the indentation where\r\nthe body of the function stops: the indentation in line 5 is different from that of the first line in the\r\nfunction body (line2), and thus the function body has ended, and execution should carry on with that\r\nline. (Empty lines do not matter for this analysis.)\r\nIn line 5 the interpreter will print the output Main program starts here. Then line 6 is executed.\r\nThis contains the expression f(4) which will call the function f(x) which is defined in line 1 where\r\nx will take the value 4. [Actually x is a reference to the object 4.] The function f is then executed\r\nand computes and returns 4*4 in line 3. This value 16 is used in line 6 to replace f(4) and then the\r\nstring representation %s of the object 16 is printed as part of the print command in line 6.\r\nThe interpreter then moves on to line 7 before the program ends.\r\nWe will now learn about different possibilities to direct this control flow further.\r\n6.1.1 Conditionals\r\nThe python values True and False are special inbuilt objects:\r\n>>> a = True\r\n>>> print a\r\nTrue\r\n>>> type ( a )\r\n59",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/04e2691a-9ab8-462f-80e6-26218d190fc5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7dfc98f909a9d238143edc4e3ceb2297489a3cd75162809382d4ac5bbd5e4e14",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 406
      },
      {
        "segments": [
          {
            "segment_id": "06a2d13e-ab47-4232-9fa9-c216b2107617",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 60,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "60 CHAPTER 6. CONTROL FLOW\r\n<type ’ bool ’ >\r\n>>> b = False\r\n>>> print b\r\nFalse\r\n>>> type ( b )\r\n<type ’ bool ’ >\r\nWe can operate with these two logical values using boolean logic, for example the logical and\r\noperation (and):\r\n>>> True and True # logical and operation\r\nTrue\r\n>>> True and False\r\nFalse\r\n>>> False and True\r\nFalse\r\n>>> True and True\r\nTrue\r\n>>> c = a and b\r\n>>> print c\r\nFalse\r\nThere is also logical or (or) and the negation (not):\r\n>>> True or False\r\nTrue\r\n>>> not True\r\nFalse\r\n>>> not False\r\nTrue\r\n>>> True and not False\r\nTrue\r\nIn computer code, we often need to evaluate some expression that is either true or false (sometimes\r\ncalled a “predicate”). For example:\r\n>>> x = 30 # assign 30 to x\r\n>>> x > 15 # is x greater than 15\r\nTrue\r\n>>> x > 42\r\nFalse\r\n>>> x == 30 # is x the same as 30?\r\nTrue\r\n>>> x == 42\r\nFalse\r\n>>> not x == 42 # is x not the same as 42?\r\nTrue\r\n>>> x != 42 # is x not the same as 42?\r\nTrue\r\n>>> x > 30 # is x greater than 30?\r\nFalse\r\n>>> x >= 30 # is x greater than or equal to 30?\r\nTrue",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/06a2d13e-ab47-4232-9fa9-c216b2107617.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1fbc15f22f8eb983ea35dfdced23dbe3ed09544e4f6bb1981f592ded7fbda873",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "af06f7af-5886-402a-a741-f9851ba29bdd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 61,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "6.2. IF-THEN-ELSE 61\r\n6.2 If-then-else\r\nFurther information\r\n• Introduction to If-then in Python tutorial, section 4.1\r\nThe if statement allows conditional execution of code, for example:\r\na = 34\r\nif a > 0:\r\nprint \" a is positive \"\r\nThe if-statement can also have an else branch which is executed if the condition is wrong:\r\na = 34\r\nif a > 0:\r\nprint \" a is positive \"\r\nelse :\r\nprint \" a is non - positive ( i . e . negative or zero ) \"\r\nFinally, there is the elif (read as “else if”) keyword that allows checking for several (exclusive)\r\npossibilities:\r\na = 17\r\nif a == 0:\r\nprint \" a is zero \"\r\nelif a < 0:\r\nprint \" a is negative \"\r\nelse :\r\nprint \" a is positive \"\r\n6.3 For loop\r\nFurther information\r\n• Introduction to for-loops in Python tutorial, section 4.2\r\nThe for-loop allows to iterate over a sequence (this could be a string or a list, for example). Here\r\nis an example:\r\n>>> for animal in [ ’ dog ’ , ’ cat ’ , ’ mouse ’ ]:\r\n... print animal , animal . upper ()\r\ndog DOG\r\ncat CAT\r\nmouse MOUSE\r\nTogether with the range() command (3.3.2), one can iterate over increasing integers:\r\n>>> for i in range (5 ,10):\r\n... print i\r\n5\r\n6\r\n7\r\n8\r\n9",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/af06f7af-5886-402a-a741-f9851ba29bdd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9231e0eeb273d476ade63259306fd769775254658186478675591b77ed7b09cf",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 454
      },
      {
        "segments": [
          {
            "segment_id": "92a85e94-4a63-4fac-9417-af361bd979d9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 62,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "62 CHAPTER 6. CONTROL FLOW\r\n6.4 While loop\r\nThe while keyword allows to repeat an operation while a condition is true. Suppose we’d like to know\r\nfor how many years we have to keep 100 pounds on a savings account to reach 200 pounds simply due\r\nto annual payment of interest at a rate of 5%. Here is a program to compute that this will take 15\r\nyears:\r\nmymoney = 100 # in GBP\r\nrate = 1.05 # 5% interest\r\nyears = 0\r\nwhile mymoney < 200: # repeat until 20 pounds reached\r\nmymoney = mymoney * rate\r\nyears = years + 1\r\nprint ’ We need ’ , years , ’ years to reach ’ , mymoney , ’ pounds . ’\r\nproduces\r\nWe need 15 years to reach 207.892817941 pounds .\r\n6.5 Relational operators (comparisons) in if and while statements\r\nThe general form of if statements and while loops is the same: following the keyword if or while,\r\nthere is a condition followed by a colon. In the next line, a new (and thus indented!) block of\r\ncommands starts that is executed if the condition is True).\r\nFor example, the condition could be equality of two variables a1 and a2 which is expressed as\r\na1==a2:\r\na1 = 42\r\na2 = 42\r\nif a1 == a2 :\r\nprint ( \" a1 and a2 are the same \" )\r\nAnother example is to test whether a1 and a2 are not the same. For this, we have two possibilities.\r\nOption number 1 uses the inequality operator !=:\r\nif a1 != a2 :\r\nprint ( \" a1 and a2 are different \" )\r\nOption two uses the keyword not in front of the condition:\r\nif not a1 == a2 :\r\nprint ( \" a1 and a2 are different \" )\r\nComparisons for “greater” (>), “smaller” (<) and “greater equal” (>=) and “smaller equal” (<=)\r\nare straightforward.\r\nFinally, we can use the logical operators “and” and “or” to combine conditions:\r\nif a > 10 and b > 20:\r\nprint \" A is greater than 10 and b is greater than 20 \"\r\nif a > 10 or b < -5:\r\nprint \" Either a is greater than 10 , or \" \\\r\n\" b is smaller than -5 , or both . \"",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/92a85e94-4a63-4fac-9417-af361bd979d9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2707e8ab9e422f895c5a7b3a5bc483762ed4963f340b6f669d8a69b6e2e19807",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 380
      },
      {
        "segments": [
          {
            "segment_id": "0bdae223-0c52-4b2a-894e-13ef83932fae",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 63,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "6.6. EXCEPTIONS 63\r\nUse the Python prompt to experiment with these comparisons and logical expressions. For exam\u0002ple:\r\n>>> T = -12.5\r\n>>> if T < -20:\r\n... print \" very cold \"\r\n...\r\n>>> if T < -10:\r\n... print \" quite cold \"\r\n...\r\nquite cold\r\n>>> T < -20\r\nFalse\r\n>>> T < -10\r\nTrue\r\n>>>\r\n6.6 Exceptions\r\nEven if a statement or expression is syntactically correct, it may cause an error when an attempt is\r\nmade to execute it. Errors detected during execution are called exceptions and are not necessarily\r\nfatal: exceptions can be caught and dealt with within the program. Most exceptions are not handled\r\nby programs, however, and result in error messages as shown here\r\n>>> 10 * (1/0)\r\nTraceback ( most recent call last ):\r\nFile \" < stdin > \" , line 1 , in ?\r\nZeroDivisionError : integer division or modulo by zero\r\n>>> 4 + spam *3\r\nTraceback ( most recent call last ):\r\nFile \" < stdin > \" , line 1 , in ?\r\nNameError : name ’ spam ’ is not defined\r\n>>> ’2 ’ + 2\r\nTraceback ( most recent call last ):\r\nFile \" < stdin > \" , line 1 , in ?\r\nTypeError : cannot concatenate ’ str ’ and ’ int ’ objects\r\nSchematic exception catching with all options\r\ntry:\r\n# code body\r\nexcept ArithmeticError :\r\n# what to do if arithmetic error\r\nexcept IndexError , the_exception :\r\n# the_exception refers to the exeption in this block\r\nexcept :\r\n# what to do for ANY other exception\r\nelse : # optional\r\n# what to do if no exception raised\r\ntry:\r\n# code body",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/0bdae223-0c52-4b2a-894e-13ef83932fae.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a788b5727987aa613a093caf04495c463b9e1c1a2274767100dcdda2ea00e7f3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 280
      },
      {
        "segments": [
          {
            "segment_id": "41766532-07d3-4772-af41-3e7e3759e986",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 64,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "64 CHAPTER 6. CONTROL FLOW\r\nfinally :\r\n# what to do ALWAYS\r\nStarting with Python 2.5, you can use the with statement to simplify the writing of code for some\r\npredefined functions, in particular the open function to open files:\r\nsee http://docs.python.org/tutorial/errors.html#predefined-clean-up-actions.\r\nExample: We try to open a file that does not exist, and Python will raise an exception of type\r\nIOError which stands for Input Output Error:\r\n>>> f = open ( \" filenamethatdoesnotexist \" , \" r \" )\r\nTraceback ( most recent call last ):\r\nFile \" < stdin > \" , line 1 , in < module >\r\nIOError : [ Errno 2] No such file or directory : ’ filenamethatdoesnotexist ’\r\nIf we were writing an application with a userinterface where the user has to type or select a\r\nfilename, we would not want to application to stop if the file does not exist. Instead, we need to catch\r\nthis exception and act accordingly (for example by informing the user that a file with this filename\r\ndoes not exist and ask whether they want to try another file name). Here is the skeleton for catching\r\nthis exception:\r\n>>> try:\r\n... f = open ( \" filenamethatdoesnotexist \" ,\" r \" )\r\n... except IOError :\r\n... print \" Could not open that file \"\r\n...\r\nCould not open that file\r\nThere is a lot more to be said about exceptions and their use in larger programs. Start reading\r\nPython Tutorial Chapter 8: Errors and Exceptions if you are interested.\r\n6.6.1 Raising Exceptions\r\nRaising exception is also referred to as ’throwing an exception’.\r\nPossibilities of raising an Exception\r\n• raise OverflowError\r\n• raise OverflowError, \"Bath is full\" (Old style, now discouraged)\r\n• raise OverflowError(\"Bath is full\")\r\n• e = OverflowError(\"Bath is full\"); raise e\r\nException hierarchy\r\nThe standard exceptions are organized in an inheritance hierarchy e.g. OverflowError is a subclass\r\nof ArithmeticError (not BathroomError); this can be seen when looking at help(’exceptions’) for\r\nexample.\r\nYou can derive your own exceptions from any of the standard ones. It is good style to have each\r\nmodule define its own base exception.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/41766532-07d3-4772-af41-3e7e3759e986.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f46425f9d5086e0c1e7eff6f659d633087d94531d3aa3d4df06d0d2d39dbc8bb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 353
      },
      {
        "segments": [
          {
            "segment_id": "da172d8d-fddc-46a0-a532-a97068f41cfb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 65,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "6.6. EXCEPTIONS 65\r\n6.6.2 Creating our own exceptions\r\n• You can and should derive your own exceptions from the built-in Exception.\r\n• To see what built-in exceptions exist, look in the module exceptions (try help(’exceptions’)),\r\nor go to http://docs.python.org/library/exceptions.html#bltin-exceptions.\r\n6.6.3 LBYL vs EAFP\r\n• LBYL (Look Before You Leap) vs\r\n• EAFP (Easer to ask forgiveness than permission)\r\nExample for LBYL:\r\nif denominator == 0:\r\nprint \" Oops \"\r\nelse :\r\nprint numerator / denominator\r\nEasier to Ask for Forgiveness than Permission:\r\ntry:\r\nprint numerator / denominator\r\nexcept ZeroDivisionError :\r\nprint \" Oops \"\r\nThe Python documentation says about EAFP:\r\nEasier to ask for forgiveness than permission. This common Python coding style assumes\r\nthe existence of valid keys or attributes and catches exceptions if the assumption proves\r\nfalse. This clean and fast style is characterized by the presence of many try and except\r\nstatements. The technique contrasts with the LBYL style common to many other languages\r\nsuch as C.\r\nSource: http://docs.python.org/glossary.html#term-eafp\r\nThe Python documentation says about LBYL:\r\nLook before you leap. This coding style explicitly tests for pre-conditions before making\r\ncalls or lookups. This style contrasts with the EAFP approach and is characterized by the\r\npresence of many if statements.\r\nIn a multi-threaded environment, the LBYL approach can risk introducing a race condition\r\nbetween the looking and the leaping. For example, the code, if key in mapping: return\r\nmapping[key] can fail if another thread removes key from mapping after the test, but before\r\nthe lookup. This issue can be solved with locks or by using the EAFP approach.\r\nSource: http://docs.python.org/glossary.html#term-lbyl\r\nEAFP is the Pythonic way.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/da172d8d-fddc-46a0-a532-a97068f41cfb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1085c5a2720a87d969105a0802995e9302ba76dba78634b4a70791b0b08c2596",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "40d09b22-c26c-4493-92e1-058a2745944f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 66,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "66 CHAPTER 6. CONTROL FLOW",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/40d09b22-c26c-4493-92e1-058a2745944f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=24edaa1c87bfb1539b57947c23e0bd4de1822e5f914b44167d05cc303a4ded28",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 270
      },
      {
        "segments": [
          {
            "segment_id": "ddf25d5c-6ff9-4d2d-a393-a351e1c1ee33",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 67,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 7\r\nFunctions and modules\r\n7.1 Introduction\r\nFunctions allow us to group a number of statements into a logical block. We communicate with a\r\nfunction through a clearly defined interface, providing certain parameters to the function, and receiving\r\nsome information back. Apart from this interface, we generally do not how exactly a function does\r\nthe work to obtain the value it returns\r\nFor example the function math.sqrt: we do not know how exactly it computes the square root,\r\nbut we know about the interface: if we pass x into the function, it will return (an approximation of)\r\n√\r\nx.\r\nThis abstraction is a useful thing: it is a common technique in engineering to break down a system\r\ninto smaller (black-box) components that all work together through well defined interfaces, but which\r\ndo not need to know about the internal realisations of each other’s functionality. In fact, not having\r\nto care about these implementation details can help to have a clearer view of the system composed of\r\nmany of these components.\r\nFunctions provide the basic building blocks of functionality in larger programs (and computer\r\nsimulations), and help to control the inherent complexity of the process.\r\nWe can group functions together into a Python module (see section 7.5), and in this way create\r\nour own libraries of functionality.\r\n7.2 Using functions\r\nThe word “function” has different meanings in mathematics and programming. In programming it\r\nrefers to a named sequence of operations that perform a computation. For example, the function\r\nsqrt() which is defined in the math module computes the square root of a given value:\r\n>>> from math import sqrt\r\n>>> sqrt (4)\r\n2.0\r\nThe value we pass to the function sqrt is 4 in this example. This value is called the argument of the\r\nfunction. A function may have more than one argument.\r\nThe function returns the value 2.0 (the result of its computation) to the “calling context”. This\r\nvalue is called the return value of the function.\r\nIt is common to say that a function takes an argument and returns a result or return value.\r\n67",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/ddf25d5c-6ff9-4d2d-a393-a351e1c1ee33.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=01ba69f488079e07066f1cfcdd7b655e628c016766650d60cf6962f7f387e91d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 346
      },
      {
        "segments": [
          {
            "segment_id": "cbc2f228-7382-4f29-914d-3ddfe99836d1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 68,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "68 CHAPTER 7. FUNCTIONS AND MODULES\r\nCommon confusion about printing and returning values\r\nIt is a common beginner’s mistake to confuse the printing of values with returning values. In the\r\nfollowing example it is impossible to see whether the function math.sin returns a value or whether it\r\nprints the value:\r\n>>> import math\r\n>>> math . sin (2)\r\n0.90929742682568171\r\n>>>\r\nWe import the math module, and call the math.sin function with an argument of 2. The math.sin(2)\r\ncall will actually return the value 0.909... not print it. However, because we have not assigned the\r\nreturn value to a variable, the Python prompt will print the returned object.\r\nThe following alternative sequence works only if the value is returned:\r\n>>> x = math . sin (2)\r\n>>> print x\r\n0.909297426826\r\nThe return value of the function call math.sin(2) is assigned to the variable x, and x is printed in\r\nthe next line.\r\nGenerally, functions should execute “silently” (i.e. not print anything) and report the result of\r\ntheir computation through the return value.\r\nPart of the confusion about printed versus return values at the Python prompt comes from the\r\nPython prompt printing (a representation) of returned objects if the returned objects are not assigned.\r\nGenerally, seeing the returned objects is exactly what we want (as we normally care about the returned\r\nobject), just when learning Python this may cause mild confusion about functions returning values or\r\nprinting values.\r\nFurther information\r\n• Think Python has a gentle introduction to functions (on which the previous paragraph is based)\r\nin chapter 3 (Functions) and chapter 6 (Fruitful functions).\r\n7.3 Defining functions\r\nThe generic format of a function definitions:\r\ndef my_function ( arg1 , arg2 , ... , argn ):\r\n\"\"\" Optional docstring . \"\"\"\r\n# Implementation of the function\r\nreturn result # optional\r\n# this is not part of the function\r\nsome_command\r\nAllen Downey’s terminology (in his book Think Python) of fruitful and fruitless functions distin\u0002guishes between functions that return a value, and those that do not return a value. The distinction\r\nrefers to whether a function provides a return value (=fruitful) or whether the function does not\r\nexplicitly return a value (=fruitless). If a functions does not make use of the return statement, we",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/cbc2f228-7382-4f29-914d-3ddfe99836d1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ee84a80cb6ee05c6e7dc22037c04ca329f966d8cb40b0caa7e7692ae1560ff76",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 370
      },
      {
        "segments": [
          {
            "segment_id": "33d7fdb3-2a6f-45d1-b49b-b5f3404abc24",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 69,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "7.3. DEFINING FUNCTIONS 69\r\ntend to say that the function returns nothing (whereas in reality in will always return the None object\r\nwhen it terminates – even if the return statement is missing).\r\nFor example, the function greeting will print “Hello World” when called (and is fruitless as it\r\ndoes not return a value).\r\ndef greeting ():\r\nprint \" Hello World ! \"\r\nIf we call that function:\r\n>>> greeting ()\r\nHello World !\r\nit prints “Hello World” to stdout, as we would expect. If we assign the return value of the function\r\nto a variable x, we can inspect it subsequently:\r\n>>> x = greeting ()\r\nHello World !\r\n>>> print x\r\nNone\r\nand find that the greeting function has indeed returned the None object.\r\nAnother example for a function that does not return any value (that means there is no return\r\nkeyword in the function) would be:\r\ndef printpluses ( n ):\r\nprint n * \" + \"\r\nGenerally, functions that return values are more useful as these can be used to assemble code\r\n(maybe as another function) by combining them cleverly. Let’s look at some examples of functions\r\nthat do return a value.\r\nSuppose we need to define a function that computes the square of a given variable. The function\r\nsource could be:\r\ndef square ( x ):\r\nreturn x * x\r\nThe keyword def tells Python that we are defining a function at that point. The function takes\r\none argument (x). The function returns x*x which is of course x\r\n2\r\n. Here is the listing of a file that\r\nshows how the function can be defined and used: (note that the numbers on the left are line numbers\r\nand are not part of the program)\r\n1 def square ( x ):\r\n2 return x * x\r\n3\r\n4 for i in range (5):\r\n5 i_squared = square ( i )\r\n6 print i , ’* ’ , i , ’= ’ , i_squared\r\nIt is worth mentioning that lines 1 and 2 define the square function whereas lines 4 to 6 are the\r\nmain program.\r\nThis program will produce the following output\r\n0 * 0 = 0\r\n1 * 1 = 1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/33d7fdb3-2a6f-45d1-b49b-b5f3404abc24.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=15d292a77acd2f29d839df68db1db30aca3a5d350a203ae6cd334afe142af967",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 367
      },
      {
        "segments": [
          {
            "segment_id": "f1b79395-d5b0-46d0-9cea-aaca4daca39a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 70,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "70 CHAPTER 7. FUNCTIONS AND MODULES\r\n2 * 2 = 4\r\n3 * 3 = 9\r\n4 * 4 = 16\r\nWe can define functions that take more than one argument:\r\nimport math\r\ndef hypot (x , y ):\r\nreturn math . sqrt ( x * x + y * y )\r\nIt is also possible to return more than one argument. Here is an example of a function that converts\r\na given string into all characters uppercase and all characters lowercase and returns the two versions.\r\nWe have included the main program to show how this function can be called:\r\ndef upperAndLower ( string ):\r\nreturn string . upper () , string . lower ()\r\ntestword = ’ Banana ’\r\nuppercase , lowercase = upperAndLower ( testword )\r\nprint testword , ’ in lowercase : ’ , lowercase ,\\\r\n’ and in uppercase ’ , uppercase\r\nWe can define multiple Python functions in one file. Here is an example with two functions:\r\ndef returnstars ( n ):\r\nreturn n * ’* ’\r\ndef print_centred_in_stars ( string ):\r\nlinelength = 46\r\nstarstring = returnstars (( linelength - len( string )) / 2)\r\nprint starstring + string + starstring\r\nprint_centred_in_stars ( ’ Hello world ! ’)\r\nThis program produces\r\n***************** Hello world !*****************\r\nFurther reading\r\n• Python Tutorial: Section 4.6 Defining Functions\r\n7.4 Default values and optional parameters\r\nPython allows to define default values for function parameters. Here is an example:\r\ndef print_mult_table (n , upto =10):\r\nfor i in range (1 , upto + 1):\r\nprint \" %3 d * % d = %4 d \" % (i , n , i * n )",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/f1b79395-d5b0-46d0-9cea-aaca4daca39a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0b513fdc88daa404f6b6db0bcfb2838b727a9e837c7f78fc30f9a0e3a8c59958",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 275
      },
      {
        "segments": [
          {
            "segment_id": "87da3d7b-0c85-4d53-9350-d8ba40fb64f5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 71,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "7.5. MODULES 71\r\nprint_mult_table (5)\r\nprint_mult_table (9 , 3)\r\nThis program will print the following output when executed:\r\n1 * 5 = 5\r\n2 * 5 = 10\r\n3 * 5 = 15\r\n4 * 5 = 20\r\n5 * 5 = 25\r\n6 * 5 = 30\r\n7 * 5 = 35\r\n8 * 5 = 40\r\n9 * 5 = 45\r\n10 * 5 = 50\r\n1 * 9 = 9\r\n2 * 9 = 18\r\n3 * 9 = 27\r\nSo how does it work? The function print mult table takes two arguments: n and upto. The first\r\nargument n is a “normal” variable. The second argument upto has a default value of 10. In other\r\nwords: should the user of this function only provide one argument, then this provides the value for n\r\nand upto will default to 10. If two arguments are provided, the first one will be for n and the second\r\nfor upto (as shown in the code example above).\r\n7.5 Modules\r\nModules\r\n• Group together functionality\r\n• Provide namespaces\r\n• Python’s standard library contains a vast collection of modules - ”Batteries Included”\r\n. Try help(’modules’)\r\n• Means of extending Python\r\n7.5.1 Importing modules\r\nimport math\r\nThis will introduce the name math into the namespace in which the import command was issued. The\r\nnames within the math module will not appear in the enclosing namespace: they must be accessed\r\nthrough the name math. For example: math.sin.\r\nimport math , cmath\r\nMore than one module can be imported in the same statement, although the Python Style Guide\r\nrecommends not to do this. Instead, we should write",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/87da3d7b-0c85-4d53-9350-d8ba40fb64f5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=10f02569ad7e9e4700566cd54982d69d03f636be1773111bcd56fe0dcb27fbf2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 272
      },
      {
        "segments": [
          {
            "segment_id": "bfe7681a-f675-4e03-aae5-38ec9bcfe19a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 72,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "72 CHAPTER 7. FUNCTIONS AND MODULES\r\nimport math\r\nimport cmath\r\nimport math as mathematics\r\nThe name by which the module is known locally can be different from its ”official” name. Typical\r\nuses of this are\r\n• To avoid name clashes with existing names\r\n• To change the name to something more manageable. For example import SimpleHTTPServer\r\nas shs. This is discouraged for production code (as longer meaningful names make programs\r\nfar more understandable than short cryptic ones), but for interactively testing out ideas, being\r\nable to use a short synonym can make your life much easier. Given that (imported) modules are\r\nfirst class objects, you can, of course, simply do shs = SimpleHTTPServer in order to obtain\r\nthe more easily typable handle on the module.\r\nfrom math import sin\r\nThis will import the sin function from the math module, but it will not introduce the name math into\r\nthe current namespace. It will only introduce the name sin into the current namespace. It is possible\r\nto pull in more than one name from the module in one go:\r\nfrom math import sin , cos\r\nFinally, let’s look at this notation:\r\nfrom math import *\r\nOnce again, this does not introduce the name math into the current namespace. It does however\r\nintroduce all public names of the math module into the current namespace. Broadly speaking, it is a\r\nbad idea to do this:\r\n• Lots of new names will be dumped into the current namespace.\r\n• Are you sure they will not clobber any names already present?\r\n• It will be very difficult to trace where these names came from\r\n• Having said that, some modules (including ones in the standard library, recommend that they\r\nbe imported in this way). Use with caution!\r\n• This is fine for interactive quick and dirty testing or small calculations.\r\n7.5.2 Creating modules\r\nA module is in principle nothing else than a python file. Here is an example of a module file which is\r\nsaved in module1.py:\r\ndef someusefulfunction ():\r\npass\r\nprint \" My name is \" , __name__",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/bfe7681a-f675-4e03-aae5-38ec9bcfe19a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=662d64e7d8eccfa45e5b02b74b2452b24ffe7e30bdc6b45279c1273530811dcb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 344
      },
      {
        "segments": [
          {
            "segment_id": "3a5da566-e7ab-4a91-8356-58bc20432671",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 73,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "7.5. MODULES 73\r\nWe can execute this (module) file as a normal python program (for example python module1.py),\r\nand the output is\r\nMy name is __main__\r\nWe note that the Python magic variable name takes the value main if the program file module1.py\r\nis executed.\r\nOn the other hand, we can import module1.py in another file (which could have the name prog.py),\r\nfor example like this:\r\nimport module1 # in file prog . py\r\nWhen Python comes across the import module1 statement in prog.py, it looks for the file module1.py\r\nin the current working directory (and if it can’t find it there in all the directories in sys.path) and\r\nopens the file module1.py. While parsing the file module1.py from top to bottom, it will add any\r\nfunction definitions in this file into the module1 name space in the calling context (that is the main\r\nprogram in prog.py). It this example, there is only the function someusefulfunction. Once the\r\nimport process is completed, we can make use of module1.someusefulfunction in prog.py. If Python\r\ncomes across statements other than function (and class) definitions while importing module1.py, it\r\ncarries those out immediately. In this case, it will thus come across the statement print \"My name\r\nis\", name . The output of this reads now:\r\nMy name is module1\r\nNote the difference to the output if we import module1.py rather than executing it on its own: name\r\ninside a module takes the value of the module name if the file is imported.\r\n7.5.3 Use of name\r\nIn summary,\r\n• name is \" main \" if the module file is run on its own\r\n• name is the name of the module (i.e. the module filename without the .py suffix) if the\r\nmodule file is imported.\r\nWe can therefor use the following if statement in module1.py to write code that is only run when\r\nthe module is executed on its own:\r\ndef someusefulfunction ():\r\npass\r\nif __name__ == \" __main__ \" :\r\nprint ( \" I am running on my own \" )\r\nThis is useful to keep test programs or demonstrations of the abilities of a module in this “conditional”\r\nmain program. It is common practice for any module files to have such a conditional main program\r\nwhich demonstrates its capabilities.\r\n7.5.4 Example 1\r\nThe next example shows a main program for the another file vectools.py that is used to demonstrate\r\nthe capabilities of the functions defined in that file:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/3a5da566-e7ab-4a91-8356-58bc20432671.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e2dc7272a0db0fa37533a535d17c7ee733d6553b7de097d19ee00dea7486a077",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 406
      },
      {
        "segments": [
          {
            "segment_id": "3bd20730-16a8-4fca-99f7-647e8bb49807",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 74,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "74 CHAPTER 7. FUNCTIONS AND MODULES\r\nfrom __future__ import division\r\nimport math\r\nimport numpy as N\r\ndef norm ( x ):\r\n\"\"\" returns the magnitude of a vector x \"\"\"\r\nreturn math . sqrt (sum ( x ** 2))\r\ndef unitvector ( x ):\r\n\"\"\" returns a unit vector x /| x |. x needs to be a numpy array . \"\"\"\r\nxnorm = norm ( x )\r\nif xnorm == 0:\r\nraise ValueError ( \" Can ’t normalise vector with length 0 \" )\r\nreturn x / norm ( x )\r\nif __name__ == \" __main__ \" :\r\n# a little demo of how the functions in this module can be used :\r\nx1 = N . array ([0 , 1 , 2])\r\nprint ( \" The norm of \" + str( x1 ) + \" is \" + str( norm ( x1 )) + \" . \" )\r\nprint ( \" The unitvector in direction of \" + str( x1 ) + \" is \" \\\r\n+ str( unitvector ( x1 )) + \" . \" )\r\nIf this file is executed using python vectools.py, then name ==\" main \" is true, and the\r\noutput reads\r\nThe norm of [0 1 2] is 2.2360679775 .\r\nThe unitvector in direction of [0 1 2] is [ 0. 0.4472136 0.89442719] .\r\nIf this file is imported (i.e. used as a module) into another python file, then name ==\" main \"\r\nis false, and that statement block will not be executed (and no output produced).\r\nThis is quite a common way to conditionally execute code in files providing library-like functions.\r\nThe code that is executed if the file is run on its own, often consists of a series of tests (to check that\r\nthe file’s functions carry out the right operations – regression tests or unit tests ), or some examples\r\nof how the library functions in the file can be used.\r\n7.5.5 Example 2\r\nEven if a Python program is not intended to be used as a module file, it is good practice to always\r\nuse a conditional main program:\r\n• often, it turns out later that functions in the file can be reused (and saves work then)\r\n• this is convenient for regression testing.\r\nSuppose an exercise is given to write a function that returns the first 5 prime numbers, and in\r\naddition to print them. (There is of course a trivial solution to this as we know the prime numbers,\r\nand we should imagine that the required calculation is more complex). One might be tempted to write",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/3bd20730-16a8-4fca-99f7-647e8bb49807.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fadf4f114626c4c0c21958d0c4dbbd3b0915f1d444dc985e172ceeea7fd17506",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 429
      },
      {
        "segments": [
          {
            "segment_id": "ac47e862-88c2-4a27-8c24-6e233cd992ba",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 75,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "7.5. MODULES 75\r\ndef primes5 ():\r\nreturn (2 , 3 , 5 , 7 , 11)\r\nfor p in primes5 ():\r\nprint \" % d \" % p ,\r\nIt is better style to use a conditional main function, i.e.:\r\ndef primes5 ():\r\nreturn (2 , 3 , 5 , 7 , 11)\r\nif __name__ == \" __main__ \" :\r\nfor p in primes5 ():\r\nprint \" % d \" % p ,\r\nA purist might argue that the following is even cleaner:\r\ndef primes5 ():\r\nreturn (2 , 3 , 5 , 7 , 11)\r\ndef main ():\r\nfor p in primes5 ():\r\nprint \" % d \" % p ,\r\nif __name__ == \" __main__ \" :\r\nmain ()\r\nbut either of the last two options is good.\r\nThe example in section 9.1 demonstrates this technique. Including functions with names starting\r\nwith test is compatible with the very useful py.test regression testing framework (see http://pytest.org/).\r\nFurther Reading\r\n• Python Tutorial Section 6",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/ac47e862-88c2-4a27-8c24-6e233cd992ba.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8ca8665ab4ebae0e96d9f5fa95336dc51a5bb9731d0b2ed6a81dc0c99765042f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d28a43c2-7199-426a-b783-db19d08e51a6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 76,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "76 CHAPTER 7. FUNCTIONS AND MODULES",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/d28a43c2-7199-426a-b783-db19d08e51a6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c13151bf420479726b1dc8e05832bc5ccea1e1ff8d856bfa9537f7621200107c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9d293bcb-3ef4-4fca-a487-c65f4d40e2d2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 77,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 8\r\nFunctional tools\r\nPython provides a few in-built commands such as map, filter, reduce as well lambda (to create\r\nanonymous functions) and list comprehension. These are typical commands from functional languages\r\nof which LISP is probably best known.\r\nFunctional programming can be extremely powerful and one of the strengths of Python is that it\r\nallows to program using (i) imperative/procedural programming style, (ii) object oriented style and\r\n(iii) functional style. It is the programmers choice which tools to select from which style and how to\r\nmix them to best address a given problem.\r\nIn this chapter, we provide some examples for usage of the commands listed above.\r\n8.1 Anonymous functions\r\nAll functions we have seen in Python so far have been defined through the def keyword, for example:\r\ndef f ( x ):\r\nreturn x ** 2\r\nThis funtion has the name f. Once the function is defined (i.e. the Python interpreter has come across\r\nthe def line), we can call the function using its name, for example\r\ny = f ( x )\r\nSometimes, we need to define a function that is only used once, or we want to create a function\r\nbut don’t need a name for it (as for creating closures). In this case, this is called anonymous function\r\nas it does not have a name. In Python, the lambda keyword can create an anonymous function.\r\nWe create a (named) function first, check it’s type and behaviour:\r\n>>> def f ( x ):\r\n... return x ** 2\r\n...\r\n>>> f\r\n< function f at 0 x95a30 >\r\n>>> type ( f )\r\n<type ’ function ’ >\r\n>>> f (10)\r\n100\r\nNow we do the same with an anonymous function:\r\n>>> lambda x : x ** 2\r\n< function <lambda > at 0 x957f0 >\r\n77",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/9d293bcb-3ef4-4fca-a487-c65f4d40e2d2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=12fd111e7aa4cb4cadb10454129dfce2e71c01ba6dd98d653508a853c93dc2ea",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 471
      },
      {
        "segments": [
          {
            "segment_id": "5dc6f1f1-eeb9-4d8d-ae03-7d8ff09f4ed0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 78,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "78 CHAPTER 8. FUNCTIONAL TOOLS\r\n>>> type ( lambda x : x ** 2)\r\n<type ’ function ’ >\r\n>>> ( lambda x : x ** 2)(10)\r\n100\r\nThis works exactly in the same way but – as the anonymous function does not have a name – we\r\nneed to define the function (through the lambda expression) – every time we need it.\r\nAnonymous functions can take more than one argument:\r\n>>> ( lambda x , y : x + y )(10 , 20)\r\n30\r\n>>> ( lambda x , y , z : ( x + y ) * z )(10 , 20 , 2)\r\n60\r\nWe will see some examples using lambda which will clarify typical use cases.\r\n8.2 Map\r\nThe map function lst2 = map(f, s ) applies a function f to all elements in a sequence s. The return\r\nvalue lst2 of map is a list and has the same length as s:\r\n>>> def f ( x ):\r\n... return x ** 2\r\n>>> lst2 = map (f , range (10))\r\n>>> lst2\r\n[0 , 1 , 4 , 9 , 16 , 25 , 36 , 49 , 64 , 81]\r\n>>>\r\n>>> import string\r\n>>> map( string . capitalize , [ ’ banana ’ , ’ apple ’ , ’ orange ’ ])\r\n[ ’ Banana ’ , ’ Apple ’ , ’ Orange ’]\r\nOften, this is combined with the anonymous function lambda:\r\n>>> map( lambda x : x ** 2 , range (10) )\r\n[0 , 1 , 4 , 9 , 16 , 25 , 36 , 49 , 64 , 81]\r\n>>> map( lambda s : s . capitalize () , [ ’ banana ’ , ’ apple ’ , ’ orange ’ ])\r\n[ ’ Banana ’ , ’ Apple ’ , ’ Orange ’]\r\n8.3 Filter\r\nThe filter function lst2 = filter( f, lst) applies the function f to all elements in a sequence s.\r\nThe function f should return True or False. The return value lst2 is a list which will contain only\r\nthose elements si of the sequence s for which f(si) has return True.\r\n>>> def greater_than_5 ( x ):\r\n... if x > 5:\r\n... return True\r\n... else :\r\n... return False\r\n...\r\n>>> filter ( greater_than_5 , range (11))\r\n[6 , 7 , 8 , 9 , 10]",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/5dc6f1f1-eeb9-4d8d-ae03-7d8ff09f4ed0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fdfc86573d14c2d012b50238b5ecce1446c6effde12a11b8875ec48070fd29d5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 397
      },
      {
        "segments": [
          {
            "segment_id": "dfe1fd11-24f3-4df4-9a0f-91c57c9ae208",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 79,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "8.4. LIST COMPREHENSION 79\r\nThe usage of lambda can simplify this significantly:\r\n>>> filter ( lambda x : x > 5 , range (11))\r\n[6 , 7 , 8 , 9 , 10]\r\n>>>\r\n>>> known_names = [ ’ smith ’ , ’ miller ’ , ’ bob ’]\r\n>>> filter ( lambda name : name in known_names , \\\r\n... [ ’ ago ’ , ’ smith ’ , ’ bob ’ , ’ carl ’ ])\r\n[ ’ smith ’ , ’ bob ’]\r\n8.4 List comprehension\r\nList comprehensions provide a concise way to create and modify lists without resorting to use of map(),\r\nfilter() and/or lambda. The resulting list definition tends often to be clearer than lists built using\r\nthose constructs. Each list comprehension consists of an expression followed by a for clause, then\r\nzero or more for or if clauses. The result will be a list resulting from evaluating the expression in\r\nthe context of the for and if clauses which follow it. If the expression would evaluate to a tuple, it\r\nmust be parenthesized.\r\nSome examples will make this clearer:\r\n>>> freshfruit = [ ’ banana ’ , ’ loganberry ’ , ’ passion fruit ’]\r\n>>> [ weapon . strip () for weapon in freshfruit ]\r\n[ ’ banana ’ , ’ loganberry ’ , ’ passion fruit ’]\r\n>>> vec = [2 , 4 , 6]\r\n>>> [3 * x for x in vec ]\r\n[6 , 12 , 18]\r\n>>> [3 * x for x in vec if x > 3]\r\n[12 , 18]\r\n>>> [3 * x for x in vec if x < 2]\r\n[]\r\n>>> [[ x , x ** 2] for x in vec ]\r\n[[2 , 4] , [4 , 16] , [6 , 36]]\r\nWe can also use list comprehension to modify the list of integers returned by the range command\r\nso that our subsequent elements in the list increase by non-integer fractions:\r\n>>> [ x *0.5 for x in range (10)]\r\n[0.0 , 0.5 , 1.0 , 1.5 , 2.0 , 2.5 , 3.0 , 3.5 , 4.0 , 4.5]\r\nLet’s now revisit the examples from the section on filter\r\n>>> [ x for x in range (11) if x >5 ]\r\n[6 , 7 , 8 , 9 , 10]\r\n>>>\r\n>>> [ name for name in [ ’ ago ’ , ’ smith ’ , ’ bob ’ , ’ carl ’] \\\r\n... if name in known_names ]\r\n[ ’ smith ’ , ’ bob ’]\r\nand the examples from the map section\r\n>>> [ x ** 2 for x in range (10) ]\r\n[0 , 1 , 4 , 9 , 16 , 25 , 36 , 49 , 64 , 81]\r\n>>>",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/dfe1fd11-24f3-4df4-9a0f-91c57c9ae208.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b24a00f5c761041d471d3e6073995bc8e2138c807b4ee6d3be28b2fd29845440",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 462
      },
      {
        "segments": [
          {
            "segment_id": "f45d07aa-56ec-4958-a31d-2be99c31853b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 80,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "80 CHAPTER 8. FUNCTIONAL TOOLS\r\n>>> [ fruit . capitalize () for fruit in [ ’ banana ’ , ’ apple ’ , ’ orange ’] ]\r\n[ ’ Banana ’ , ’ Apple ’ , ’ Orange ’]\r\nall of which can be expressed through list comprehensions.\r\nMore details\r\n• Python Tutorial 5.1.4 List comprehensions\r\n8.5 Reduce\r\nThe reduce function takes a binary function f(x,y), a sequence s, and a start value a0. It then\r\napplies the function f to the start value a0 and the first element in the sequence: a1 = f(a,s[0]).\r\nThe second element (s[1]) of the sequence is then processed as follows: the function f is called with\r\narguments a1 and s[1], i.e. a2 = f(a1,s[1]). In this fashion, the whole sequence is processed.\r\nReduce returns a single number.\r\nThis can be used, for example, to compute a sum of numbers in a sequence if the function f(x,y)\r\nreturns x+y:\r\n>>> def add (x , y ):\r\n... return x + y\r\n...\r\n>>> reduce ( add , [1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10] , 0)\r\n55\r\n>>> reduce ( add , [1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10] , 100)\r\n155\r\nWe can modify the function add to provide some more detail about the process:\r\n>>> def add_verbose (x , y ):\r\n... print \" add ( x =% s , y =% s ) -> % s \" % (x , y , x + y )\r\n... return x + y\r\n...\r\n>>> reduce ( add_verbose , [1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10] , 0)\r\nadd ( x =0 , y =1) -> 1\r\nadd ( x =1 , y =2) -> 3\r\nadd ( x =3 , y =3) -> 6\r\nadd ( x =6 , y =4) -> 10\r\nadd ( x =10 , y =5) -> 15\r\nadd ( x =15 , y =6) -> 21\r\nadd ( x =21 , y =7) -> 28\r\nadd ( x =28 , y =8) -> 36\r\nadd ( x =36 , y =9) -> 45\r\nadd ( x =45 , y =10) -> 55\r\n55\r\nIt may be instructive to use an asymmetric function f, such as add len( n, s ) where s is a\r\nsequence and the function returns n+len(s) (suggestion from Thomas Fischbacher):\r\n>>> def add_len (n , s ):\r\n... return n +len( s )\r\n...\r\n>>> reduce ( add_len , [ \" This \" ,\" is \" ,\" a \" ,\" test . \" ] ,0)\r\n12",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/f45d07aa-56ec-4958-a31d-2be99c31853b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=077bafb601f49996d9caf6a4a1c122990a213495962db26e99381cae96d33d7b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 459
      },
      {
        "segments": [
          {
            "segment_id": "5d9a6ab5-117f-4650-972d-8ff8e16099b9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 81,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "8.5. REDUCE 81\r\nAs before, we’ll use a more verbose version of the binary function to see what is happening:\r\n>>> def add_len_verbose (n , s ):\r\n... print \" add_len ( n =% d , s =% s ) -> % d \" % (n , s , n +len( s ))\r\n... return n +len( s )\r\n...\r\n>>> reduce ( add_len_verbose , [ \" This \" , \" is \" , \" a \" , \" test . \" ] , 0)\r\nadd_len ( n =0 , s = This ) -> 4\r\nadd_len ( n =4 , s =is) -> 6\r\nadd_len ( n =6 , s = a ) -> 7\r\nadd_len ( n =7 , s = test .) -> 12\r\n12\r\n>>>\r\nAnother way to understand what the reduce function does is to look at the following function\r\n(kindly provided by Thomas Fischbacher) which behaves like reduce but explains what it does:\r\ndef explain_reduce (f , xs , start = None ):\r\n\"\"\" This function behaves like reduce , but explains what it does ,\r\nstep - by - step .\r\n( Author : Thomas Fischbacher , modifications Hans Fangohr ) \"\"\"\r\nnr_xs = len( xs )\r\nif start == None :\r\nif nr_xs == 0:\r\nraise ValueError ( \" No starting value given - cannot \" + \\\r\n\" process empty list ! \" )\r\nif nr_xs == 1:\r\nprint ( \" reducing over 1 - element list without starting \" + \\\r\n\" value : returning that element . \" )\r\nreturn xs [0]\r\nelse :\r\nprint ( \" reducing over list with >= 2 elements without \" +\\\r\n\" starting value : using the first element as a \" +\\\r\n\" start value . \" )\r\nreturn explain_reduce (f , xs [1:] , xs [0])\r\nelse :\r\ns = start\r\nfor n in range (len( xs )):\r\nx = xs [ n ]\r\nprint ( \" Step % d : value - so - far =% s next - list - element =% s \" \\\r\n% (n , str( s ) , str( x )))\r\ns = f (s , x )\r\nprint ( \" Done . Final result =% s \" % str( s ))\r\nreturn s\r\nHere is an example using the explain reduce function:\r\n>>> from explain_reduce import explain_reduce\r\n>>> def f (a , b ):\r\n... return a + b\r\n...\r\n>>> reduce ( f , [1 ,2 ,3 ,4 ,5] , 0)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/5d9a6ab5-117f-4650-972d-8ff8e16099b9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=406c942503a15a770778ac1706d84d0f5d45b98eb3ec22356c321db5e0d1c9c5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 418
      },
      {
        "segments": [
          {
            "segment_id": "7236c415-9198-4266-ab1d-b562d817e9cb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 82,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "82 CHAPTER 8. FUNCTIONAL TOOLS\r\n15\r\n>>> explain_reduce ( f , [1 ,2 ,3 ,4 ,5] , 0)\r\nStep 0: value - so - far =0 next -list - element =1\r\nStep 1: value - so - far =1 next -list - element =2\r\nStep 2: value - so - far =3 next -list - element =3\r\nStep 3: value - so - far =6 next -list - element =4\r\nStep 4: value - so - far =10 next -list - element =5\r\nDone . Final result =15\r\n15\r\nReduce is often combined with lambda:\r\n>>> reduce ( lambda x , y : x +y , [1 ,2 ,3 ,4 ,5] , 0)\r\n15\r\nThere is also the operator module which provides standard Python operators as functions. For\r\nexample, the function operator. add (a,b) is executed when Python evaluates code such as a+b.\r\nThese are generally faster than lambda expressions. We could write the example above as\r\n>>> import operator\r\n>>> reduce ( operator . __add__ , [1 ,2 ,3 ,4 ,5] , 0)\r\n15\r\nUse help(’operator’) to see the complete list of operator functions.\r\n8.6 Why not just use for-loops?\r\nLet’s compare the example introduced at the beginning of the chapter written (i) using a for-loop and\r\n(ii) list comprehension. Again, we want to compute the numbers 02, 1\r\n2\r\n, 2\r\n2\r\n, 3\r\n2\r\n, ... up to (n − 1)2for a\r\ngiven n.\r\nImplementation (i) using a for-loop with n=10:\r\ny = []\r\nfor i in range (10):\r\ny . append ( i ** 2)\r\nImplementation (ii) using list comprehension:\r\ny = [ x ** 2 for x in range (10) ]\r\nor using map:\r\ny = map( lambda x : x ** 2 , range (10))\r\nThe versions using list comprehension and map fit into one line of code whereas the for-loop needs\r\n3. This example shows that functional code result in very concise expressions. Typically, the number\r\nof mistakes a programmer makes is per line of code written, so the fewer lines of code we have, the\r\nfewer bugs we need to find.\r\nOften programmers find that initially the list-processing tools introduced in this chapter seem less\r\nintuitive than using for-loops to process every element in a list individually, but that – over time –\r\nthey come to value a more functional programming style.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/7236c415-9198-4266-ab1d-b562d817e9cb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b045324eae6cf0e7ff98cbccf0cf6be9e827d5bc0ef6a40c6a11af3afa47a1ec",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 390
      },
      {
        "segments": [
          {
            "segment_id": "19ef0b24-4573-4948-aa5e-f2b43ac6afcb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 83,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "8.7. SPEED 83\r\n8.7 Speed\r\nThe functional tools described in this chapter can also be faster than using explicit (for or while) loops\r\nover list elements.\r\nThe program list comprehension speed.py below computes PN−1\r\ni=0 i\r\n2\r\nfor a large value of N using\r\n4 different methods and records execution time:\r\n• Method 1: for-loop (with pre-allocated list, storing of i\r\n2\r\nin list, then using in-built sum function)\r\n• Method 2: for-loop without list (updating sum as the for-loop progresses)\r\n• Method 3: using list comprehension\r\n• Method 4: using numpy. (Numpy is covered in section 14.1)\r\n\"\"\" Compare calculation of \\ sum_i x_i ^2) with\r\ni going from zero to N -1.\r\nWe use ( i ) for loops and list , ( ii ) for - loop , ( iii ) list comprehension\r\nand ( iv ) numpy .\r\nWe use floating numbers to avoid using Python ’s long int ( which would\r\nbe likely to make the timings less representative ).\r\n\"\"\"\r\nimport time\r\nimport numpy\r\nN = 10000000\r\ndef timeit (f , args ):\r\n\"\"\" Given a function f and a tuple args containing\r\nthe arguments for f , this function calls f (* args ) ,\r\nand measures and returns the execution time in\r\nseconds .\r\nReturn value is tuple : entry 0 is the time ,\r\nentry 1 is the return value of f . \"\"\"\r\nstarttime = time . time ()\r\ny = f (* args ) # use tuple args as input arguments\r\nendtime = time . time ()\r\nreturn endtime - starttime , y\r\ndef forloop1 ( N ):\r\ns = 0\r\nfor i in range ( N ):\r\ns += float ( i ) * float ( i )\r\nreturn s",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/19ef0b24-4573-4948-aa5e-f2b43ac6afcb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d79201ad9302dac5f75a352246ccb1f0a1bc18e14d3099d35329fed832ef9ad3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 292
      },
      {
        "segments": [
          {
            "segment_id": "b5e5201e-30ce-40c0-852b-34dd3604c9c7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 84,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "84 CHAPTER 8. FUNCTIONAL TOOLS\r\ndef forloop2 ( N ):\r\ny = [0] * N\r\nfor i in range ( N ):\r\ny [ i ] = float ( i ) ** 2\r\nreturn sum( y )\r\ndef listcomp ( N ):\r\nreturn sum ([ float ( x ) * x for x in range ( N )])\r\ndef numpy_ ( N ):\r\nreturn numpy . sum ( numpy . arange (0 , N , dtype = ’d ’) ** 2)\r\n# main program starts\r\nprint \" N = \" , N\r\nforloop1_time , f1_res = timeit ( forloop1 , (N ,))\r\nprint \" for - loop1 \" , forloop1_time\r\nforloop2_time , f2_res = timeit ( forloop2 , (N ,))\r\nprint \" for - loop2 \" , forloop2_time\r\nlistcomp_time , lc_res = timeit ( listcomp , (N ,))\r\nprint \" listcomp \" , listcomp_time\r\nnumpy_time , n_res = timeit ( numpy_ , (N ,))\r\nprint \" numpy \" , numpy_time\r\n# ensure that different methods provide identical results\r\nassert f1_res == f2_res\r\nassert f1_res == lc_res\r\nassert f1_res == n_res\r\nThe program produces the following output:\r\nN = 10000000\r\nfor - loop1 7.45045185089\r\nfor - loop2 5.96237707138\r\nlistcomp 4.66884493828\r\nnumpy 0.262656927109\r\nWe see that methods 1 (for-loop with list) is slowest with about 7.5 seconds, method 2 (for-loop\r\nwithout list) is faster with 6 seconds. Method 3 (list comprehension) is faster using only 4.7 seconds.\r\nThe faster method is 4 (using numpy) which only requires 0.25 seconds, and is thus about 30 times\r\nfaster than method 1.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/b5e5201e-30ce-40c0-852b-34dd3604c9c7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5f65fc6dd617ef37c11c63d93570b02360c86ffa0d38570cf0684f67dd31bb28",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fde0b0ac-1acf-46ae-aaa5-c22a5462432f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 85,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 9\r\nCommon tasks\r\nHere we provide a selection of small example programs addressing some common tasks and just\r\nproviding some more Python code that can be read if seeking inspiration how to address a given\r\nproblem.\r\n9.1 Many ways to compute a series\r\nAs an example, we compute the sum of odd numbers in different ways.\r\ndef compute_sum1 ( n ):\r\n\"\"\" computes and returns the sum of 2 ,4 ,6 , ... , m\r\nwhere m is the largest even number smaller than n .\r\nFor example , with n = 7 , we compute 0+2+4+6 = 12.\r\nThis implementation uses a variable ’ mysum ’ that is\r\nincreased in every iteration of the for - loop . \"\"\"\r\nmysum = 0\r\nfor i in range (0 , n , 2):\r\nmysum = mysum + i\r\nreturn mysum\r\ndef compute_sum2 ( n ):\r\n\"\"\" computes and returns ...\r\nThis implementation uses a while - loop :\r\n\"\"\"\r\ncounter = 0\r\nmysum = 0\r\nwhile counter < n :\r\nmysum = mysum + counter\r\ncounter = counter + 2\r\nreturn mysum\r\n85",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/fde0b0ac-1acf-46ae-aaa5-c22a5462432f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b61bf5bdb98c36ae60d7e080f202035104d622ef5341e9014bd1bfd2cacd8ba5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 440
      },
      {
        "segments": [
          {
            "segment_id": "46745fa6-a076-4619-91b8-f5af2bb3b9d2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 86,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "86 CHAPTER 9. COMMON TASKS\r\ndef compute_sum3 (n , startfrom =0):\r\n\"\"\" computes and returns ...\r\nThis is a recursive implementation : \"\"\"\r\nif n <= startfrom :\r\nreturn 0\r\nelse :\r\nreturn startfrom + compute_sum3 (n , startfrom + 2)\r\ndef compute_sum4a ( n ):\r\n\"\"\" A functional approach ... this seems to be\r\nthe shortest and most concise code .\r\n\"\"\"\r\nreturn sum( range (0 , n , 2))\r\ndef compute_sum4b ( n ):\r\n\"\"\" A functional approach ... not making use of ’ sum ’ which\r\nhappens to exist and is of course convenient here .\r\n\"\"\"\r\nreturn reduce ( lambda a , b : a + b , range (0 , n , 2))\r\ndef compute_sum4c ( n ):\r\n\"\"\" A functional approach ... a bit faster than compute_sum4b\r\nas we avoid using lambda .\r\n\"\"\"\r\nimport operator\r\nreturn reduce ( operator . __add__ , range (0 , n , 2))\r\ndef compute_sum4d ( n ):\r\n\"\"\" Using list comprehension . \"\"\"\r\nreturn sum ([ k for k in range (0 , n , 2)])\r\ndef compute_sum4e ( n ):\r\n\"\"\" Using another variation of list comprehension . \"\"\"\r\nreturn sum ([ k for k in range (0 , n ) if k % 2 == 0])\r\ndef compute_sum5 ( n ):\r\n\"\"\" Using numerical python ( numpy ). This is very fast\r\n( but would only pay off if n >> 10). \"\"\"\r\nimport numpy\r\nreturn numpy . sum (2 * numpy . arange (0 , ( n + 1) // 2))",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/46745fa6-a076-4619-91b8-f5af2bb3b9d2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=df8b84d4fb3f5f3b2fb4da15bd69df7b271fd81d6d45b3f4a1b2568a72238cae",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 257
      },
      {
        "segments": [
          {
            "segment_id": "6c826f94-f8df-4153-b025-bd22ddf3e3e0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 87,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "9.1. MANY WAYS TO COMPUTE A SERIES 87\r\ndef test_consistency ():\r\n\"\"\" Check that all compute_sum ?? functions in this file produce\r\nthe same answer for all n >=2 and <N .\r\n\"\"\"\r\ndef check_one_n ( n ):\r\n\"\"\" Compare the output of compute_sum1 with all other functions\r\nfor a given n >=2. Raise AssertionError if outputs disagree . \"\"\"\r\nfuncs = [ compute_sum1 , compute_sum2 , compute_sum3 ,\r\ncompute_sum4a , compute_sum4b , compute_sum4c ,\r\ncompute_sum4d , compute_sum4e , compute_sum5 ]\r\nans1 = compute_sum1 ( n )\r\nfor f in funcs [1:]:\r\nassert ans1 == f ( n ) , \" % s ( n )=% d not the same as % s ( n )=% d \" \\\r\n% ( funcs [0] , funcs [0]( n ) , f , f ( n ))\r\n# main testing loop in test_consistency function\r\nfor n in range (2 , 1000):\r\ncheck_one_n ( n )\r\nif __name__ == \" __main__ \" :\r\nm = 7\r\ncorrect_result = 12\r\nthisresult = compute_sum1 ( m )\r\nprint ( \" this result is {} , expected to be {} \" . format (\r\nthisresult , correct_result ))\r\n# compare with correct result\r\nassert thisresult == correct_result\r\n# also check all other methods\r\nassert compute_sum2 ( m ) == correct_result\r\nassert compute_sum3 ( m ) == correct_result\r\nassert compute_sum4a ( m ) == correct_result\r\nassert compute_sum4b ( m ) == correct_result\r\nassert compute_sum4c ( m ) == correct_result\r\nassert compute_sum4d ( m ) == correct_result\r\nassert compute_sum4e ( m ) == correct_result\r\nassert compute_sum5 ( m ) == correct_result\r\n# a more systematic check for many values\r\ntest_consistency ()\r\nRunning this program produces the following output:\r\nthis result is 12 , expected to be 12\r\nAll the different implementations shown above compute the same result. There are a number of\r\nthings to be learned from this:\r\n• There are a large (probably an infinite) number of solutions for one given problem. (This means\r\nthat writing programs is a task that requires creativity!)\r\n• These may achieve the same ’result’ (in this case computation of a number).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/6c826f94-f8df-4153-b025-bd22ddf3e3e0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8d7bb2c742ee2d62b4256732a5dc17073a902bf2b343d43fdad75db37e685407",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 350
      },
      {
        "segments": [
          {
            "segment_id": "c3433e55-98fc-4ed0-971b-69a0d0afaec3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 88,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "88 CHAPTER 9. COMMON TASKS\r\n• Different solutions may have different characteristics. They might:\r\n. be faster or slower\r\n. use less or more memory\r\n. are easier or more difficult to understand (when reading the source code)\r\n. can be considered more or less elegant.\r\n9.2 Sorting\r\nSuppose we need to sort a list of 2-tuples of user-ids and names, i.e.\r\nmylist = [( \" fangohr \" , \" Hans Fangohr \" ,) ,\r\n( \" admin \" , \" The Administrator \" ) ,\r\n( \" guest \" , \" The Guest \" )]\r\nwhich we want to sort in increasing order of user-ids. If there are two or more identical user-ids, they\r\nshould be ordered by the order of the names associated with these user-ids. This behaviour is just the\r\ndefault behaviour of sort (which goes back to how to sequences are compared).\r\nstuff = mylist # collect your data\r\nstuff . sort () # sort the data in place\r\nprint stuff # inspect the sorted data\r\nSequences are compared by initially comparing the first elements only. If they differ, then a\r\ndecision is reached on the basis of those elements only. If the elements are equal, only then are the\r\nnext elements in the sequence compared ... and so on, until a difference is found, or we run out of\r\nelements. For example:\r\n>>> (2 ,0) > (1 ,0)\r\nTrue\r\n>>> (2 ,1) > (1 ,3)\r\nTrue\r\n>>> (2 ,1) > (2 ,1)\r\nFalse\r\n>>> (2 ,2) > (2 ,1)\r\nTrue\r\nFrom Python 2.4 onwards, it is also possible to do\r\nstuff = sorted ( stuff )\r\nWhere the list is not particularly large, it is generally advisable to use the sorted function (which\r\nreturns a sorted copy of the list) over the sort method of a list (which changes the list into sorted\r\norder of elements, and returns None).\r\nHowever, what if the data we have is stored such that in each tuple in the list, the name comes\r\nfirst, followed by the id, i.e.:\r\nmylist2 = [( \" Hans Fangohr \" , \" fangohr \" ) ,\r\n( \" The Administrator \" , \" admin \" ) ,\r\n( \" The Guest \" , \" guest \" )]\r\nWe want to sort with the id as the primary key. The first approach to do this is to change the order\r\nof mylist2 to that of mylist, and use sort as shown above.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/c3433e55-98fc-4ed0-971b-69a0d0afaec3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a203a8afb0396218ba2cf4bbacc330ef3e513835bd2c5eaa0b46bd47f77bc958",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 408
      },
      {
        "segments": [
          {
            "segment_id": "779eab6c-7ec7-4b98-afa2-3bb660690a72",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 89,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "9.2. SORTING 89\r\nThe second approach (which also works in ancient Pythons), relies on being able to decypher the\r\ncryptic help(list.sort). You should notice that list.sort has three keyword parameters. The first\r\nof these is called cmp. If this argument is None (which it will be, by default), list.sort will use\r\nPython’s built-in cmp function to compare the elements of the list it is sorting. cmp is a function of\r\ntwo arguments which returns a positive number when it considers the first argument to be ’greater’\r\nthen the second, returns 0 when it considers the arguments to be equal, and returns a negative number\r\notherwise. You can instruct list.sort to use a different comparison criterion, by supplying some\r\nother function with the same interface.\r\nLet’s illustrate this in the context of our exercise, by assuming that we have stored a list of pairs\r\nlike this\r\npair = name , id\r\n(i.e. as in mylist2) and that we want to sort according to id and ignore name. We can achieve this\r\nby writing a function that compares the second elements of the pairs it receives, and returns a number\r\nmatching the convention used by cmp as described above.\r\ndef my_cmp (a , b ):\r\nif a [1] > b [1]:\r\nreturn +1\r\nif a [1] == b [1]:\r\nreturn 0\r\nreturn -1\r\nNote that you must remember the convention, and that there is a lot of fiddling around with indices.\r\nA much more concise and less error-prone (and more efficient) way of writing this function is\r\ndef my_cmp (a , b ):\r\nreturn cmp( a [1] , b [1])\r\nNow you can use this function to tell list.sort how to compare the pairs:\r\npairs . sort (cmp= my_cmp )\r\nor\r\npairs . sort ( my_cmp )\r\nor even\r\npairs . sort ( lambda a , b : cmp( a [1] , b [1]))\r\nAnother solution, which became available in Python 2.4, relies on cmp’s keyword parameter key.\r\nHere you can pass a function which list.sort will use to generate values according to which the list’s\r\nelements should be sorted. In our case\r\npairs . sort ( key = lambda p : p [1])\r\nwill do the trick.\r\nA note about efficiency. Sorting typically involves making many comparisons between the elements.\r\nPython’s built-in cmp is an efficient low-level function. By making list.sort use a pure-Python\r\nfunction instead, you are getting hit by the pure-Python function overhead (which is relatively large\r\ncompared to the C function overhead) on each and every comparison. This might slow you down\r\nnoticeably.\r\nThe key function will be called exactly once for every element in the list. This approach is likely\r\nto be measurably faster for large lists than using the cmp approach.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/779eab6c-7ec7-4b98-afa2-3bb660690a72.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=843b36cbde52ef966a799500218f5c619379705443e8aac662bfeddd54c585e3",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "533f1554-0b57-4483-95fa-237f87eca4e7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 90,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "90 CHAPTER 9. COMMON TASKS\r\nIf efficiency is really important (and you have proven that a significant proportion of time is spent\r\nin these functions) then you have the option of re-coding them in C (or another low-level language).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/533f1554-0b57-4483-95fa-237f87eca4e7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=da02afb2e8a81305472d37702391e4692a6fed7ca5fe96a14f48947e474a4209",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 494
      },
      {
        "segments": [
          {
            "segment_id": "c344abbe-043d-4573-bff2-f60a6cab99c1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 91,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 10\r\nFrom Matlab to Python\r\n10.1 Important commands\r\n10.1.1 The for-loop\r\nMatlab Python\r\nfor i = 1:10\r\ndisp ( i )\r\nend\r\nMatlab requires the end key-word at the end\r\nof the block belonging to the for-loop.\r\nfor i in range (1 ,11):\r\nprint ( i )\r\nPython requires a colon (“:”) at the of the\r\nfor-line. (This is important and often for\u0002gotten when you have programmed in Matlab\r\nbefore.) Python requires the commands to be\r\nexecuted within the for-loop to be indented.\r\n10.1.2 The if-then statement\r\nMatlab Python\r\nif a ==0\r\ndisp ( ’a is zero ’)\r\nelseif a <0\r\ndisp ( ’a is negative ’)\r\nelseif a ==42\r\ndisp ( ’a is 42 ’)\r\nelse\r\ndisp ( ’a is positive ’)\r\nend\r\nMatlab requires the end key-word at the very\r\nend of the block belonging to the for-loop.\r\nif a ==0:\r\nprint ( ’a is zero ’)\r\nelif a <0:\r\nprint ( ’a is negative ’)\r\nelif a ==42:\r\nprint ( ’a is 42 ’)\r\nelse :\r\nprint ( ’a is positive ’)\r\nPython requires a colon (“:”) after every con\u0002dition (i.e. at the of the lines starting with if,\r\nelif, else. Python requires the commands to\r\nbe executed within each part of the if-then-else\r\nstatement to be indented.\r\n10.1.3 Indexing\r\nMatlab’s indexing of matrices and vectors starts a 1 (similar to Fortran), whereas Python’s indexing\r\nstarts at 0 (similar to C).\r\n91",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/c344abbe-043d-4573-bff2-f60a6cab99c1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9f7ea6dcf4818614d07849b0574ba57d782a0cf5651340d1433324e257449180",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "7b3a825a-fd17-4b5c-baa0-564dadc619c5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 92,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "92 CHAPTER 10. FROM MATLAB TO PYTHON\r\n10.1.4 Matrices\r\nIn Matlab, every object is a matrix. In Python, there is a specialised extension library called numpy\r\n(see Sec. 14) which provides the array object which in turns provides the corresponding functionality.\r\nSimilar to Matlab, the numpy object is actually based on binary libraries and execution there very\r\nfast.\r\nThere is a dedicated introduction to numpy for Matlab users available at\r\nhttp://www.scipy.org/NumPy for Matlab Users.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/7b3a825a-fd17-4b5c-baa0-564dadc619c5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d5ce030cfb30fcd1fd76e64f45974da18ee29ace36bf71c7203a5df33d6b4978",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 310
      },
      {
        "segments": [
          {
            "segment_id": "a2b1d90b-b47b-45b3-9501-ed2247b00ecf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 93,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 11\r\nPython shells\r\n11.1 IDLE\r\nIDLE comes with every Python distribution and is a useful tool for everyday programming. Its editor\r\nprovides syntax highlighting.\r\nThere are two reasons why you might want to use another Python shell, for example:\r\n• While working with the Python prompt, you like auto-completion of variable names, filenames\r\nand commands. In that case “Ipython” is your tool of choice (see section 11.3.1). Ipython does\r\nnot provide an editor but you can carry on using the IDLE editor to edit files, or any other\r\neditor you like.\r\nIPython provides a number of nice features for the more experienced Python programmer, in\u0002cluding convenient profiling of code (see http://ipython.scipy.org).\r\nRecently, some auto-completion has been added to Idle as well (press tab after having typed the\r\nfirst few letters of object names and keywords).\r\n11.2 Python (command line)\r\nThis is the most basic face of the Python shell. It is very similar to the Python prompt in IDLE but\r\nthere are no menus to click on and no facilities to edit files.\r\n11.3 Interactive Python (IPython)\r\n11.3.1 IPython console\r\nIPython is an improved version of the Python command line. It is a valuable tool and worth exploring\r\nit’s capabilities (see http://ipython.org/ipython-doc/stable/interactive/qtconsole.html)\r\nYou will find the following features very useful:\r\n• auto completion\r\nSuppose you want to type a = range(10). Instead of typing all the letters, just type a = ra\r\nand the press the “Tab” key. Ipython will now show all the possible commands (and variable\r\nnames) that start with ra. If you type a third letter, here n and press “Tab” again, Ipython will\r\nauto complete and append ge automatically.\r\nThis works also for variable names and modules.\r\n• To obtain help on a command, we can use Python’s help command. For example: help(range).\r\nIpython provides a shortcut. To achieve the same, it is sufficient to just type the command\r\nfollowed by a question mark: range?\r\n93",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/a2b1d90b-b47b-45b3-9501-ed2247b00ecf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=94f18ba74df6c9d9fab83c76bb2cfc0b1aa1e4426eec44d3b1992356e6e09ceb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 321
      },
      {
        "segments": [
          {
            "segment_id": "22de121d-9252-41be-b96e-c9287acf4940",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 94,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "94 CHAPTER 11. PYTHON SHELLS\r\n• You can relatively easily navigate directories on your computer. For example,\r\n. !dir lists the content of the current directory (same as ls)\r\n. pwd shows the current working directory\r\n. cd allows to change directories\r\nIn general, using an exclamation mark before the command will pass the command to the shell\r\n(not to the Python interpreter).\r\n• You can execute Python programs from ipython using %run. Suppose you have a file hello.py\r\nin the current directory. You can then execute it by typing: %run hello\r\nNote that this differs from executing a python program in IDLE: IDLE restarts the Python\r\ninterpreter session and thus deletes all existing objects before the execution starts. This is not\r\nthe case with the run command in ipython (and neither when executing chunks of Python code\r\nfrom Emacs using the Emacs Python mode). In particular this can be very useful if one needs\r\nto setup a few objects which are needed to test the code one is working on. Using ipython’s run\r\nor Emacs instead of IDLE allows to keep these objects in the interpreter session and to only\r\nupdate the function/classes/... etc that are being developed.\r\n• allows multi-line editing of command history\r\n• provides on-the-fly syntax highlighting\r\n• displays doc-strings on-the-fly\r\n• can inline matplotlib figures (activate mode with if started with %matplotlib inline)\r\n• %load loads file from disk or form URL for editing\r\n• %timeit measures execution time for a given statement\r\n• . . . and a lot more.\r\n• Read more at http://ipython.org/ipython-doc/dev/interactive/qtconsole.html\r\nIf you have access to this shell, you may want to consider it as your default Python prompt.\r\n11.3.2 IPython Notebook\r\nThe IPython Notebook allows to execute, store, load, re-execute a sequence of Python commands,\r\nand to include explanatory text, images and other media in between.\r\nThis is a recent and exciting development that has the potential to develop into a tool of great\r\nsignificance, for example for\r\n• documenting calculations and data processing\r\n• support learning and teaching of\r\n. Python itself\r\n. statistical methods\r\n. general data post-processing\r\n. . . .\r\n• documentation new code",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/22de121d-9252-41be-b96e-c9287acf4940.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d4c9bfda59214206000a34949bf18df8830ca7732b08b3fe67ca30183e65ad1c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 359
      },
      {
        "segments": [
          {
            "segment_id": "2a071128-9648-4274-9191-506192224134",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 95,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "11.4. SPYDER 95\r\n• automatic regression testing by re-running ipython notebook and comparing stored output with\r\ncomputed output\r\nFurther reading\r\n• IPython notebook (http://ipython.org/notebook.html).\r\n• Further materials at http://ipython.org.\r\n11.4 Spyder\r\nSpyder is the Scientific PYthon Development EnviRonment: a powerful interactive development envi\u0002ronment for the Python language with advanced editing, interactive testing, debugging and introspec\u0002tion features and a numerical computing environment thanks to the support of IPython (enhanced in\u0002teractive Python interpreter) and popular Python libraries such as NumPy (linear algebra), SciPy (sig\u0002nal and image processing) or matplotlib (interactive 2D/3D plotting). See http://pythonhosted.org/spyder/\r\nfor more.\r\nSome important features of Spyder:\r\n• Within Spyder, the IPython console is the default Python interpreter, and\r\n• code in the editor can be fully or partially be executed in this buffer.\r\n• The editor supports automatic checking for Python erros using pyflakes, and\r\n• the editor warns (if desired) if the code formatting deviates from the PEP8 style guide.\r\n• The Ipython Debugger can be activated, and\r\n• a profiler is provided.\r\n• An object explorer shows documentation for functions, methods etc on the fly and a\r\n• variable explorer displays names, size and values for numerical variables.\r\nSpyder is currently (as of 2014) on the way to develop into a powerful and robust multi-platform\r\nintegrated environment for Python development, with particular emphasis on Python for scientific\r\ncomputing and engineering.\r\n11.5 Editors\r\nAll major editors that are used for programming, provide Python modes (such as Emacs, Vim, Sublime\r\nText), some Integrated Development Enviroments (IDEs) come with their own editor (Spyder, Eclipse).\r\nWhich of these is best, is partly a matter of choice.\r\nFor beginners, Spyder seems a sensible choice as it provides an IDE, allows execution of chunks of\r\ncode in an interpreter session and is easy to pick up.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/2a071128-9648-4274-9191-506192224134.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b0aa807b933e356bb81d11512a14786b1d3d5ece84b99243788bd06a4695f43c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e7ca89d3-fe4d-4859-b074-aad9a7548e3a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 96,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "96 CHAPTER 11. PYTHON SHELLS",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/e7ca89d3-fe4d-4859-b074-aad9a7548e3a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cc6809b7cadc48d8f51131d22f8cde487670b3c5902375cefaf3b45beb3c38f0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 300
      },
      {
        "segments": [
          {
            "segment_id": "4974e5dd-905b-4c48-bfe4-1791b8fbbb30",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 97,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 12\r\nSymbolic computation\r\n12.1 SymPy\r\nIn this section, we introduce some basic functionality of the SymPy (SYMbolic Python) library. In\r\ncontrast to numerical computation (involving numbers), in symbolic calculation we are processing and\r\ntransforming generic variables.\r\nThe SymPy home page is http://sympy.org/, and provides the full (and up-to-date) documentation\r\nfor this library.\r\nSymbolic calculation is very slow compared to floating point operation (see for example Sec. 13.1.5),\r\nand thus generally not for direct simulation. However, it is a powerful tool to support the preparation\r\nof code and symbolic work. Occasionally, we use symbolic operations in simulations to work out the\r\nmost efficient numerical code, before that is executed.\r\n12.1.1 Symbols\r\nBefore we can carry out any symbolic operations, we need to create symbolic variables using SymPy’s\r\nSymbol function:\r\n>>> from sympy import Symbol\r\n>>> x = Symbol ( ’x ’)\r\n>>> type ( x )\r\n<class ’ sympy . core . symbol . Symbol ’ >\r\n>>> y = Symbol ( ’y ’)\r\n>>> 2 * x - x\r\nx\r\n>>> x + y + x + 10* y\r\n2* x + 11* y\r\n>>> y + x - y + 10\r\n10 + x\r\nWe can abbreviate the creation of multiple symbolic variables using the symbols function. For\r\nexample, to create the symbolic variables x, y and z, we can use\r\n>>> import sympy\r\n>>> x , y , z = sympy . symbols ( ’x ,y , z ’)\r\n>>> x + 2* y + 3* z - x\r\n2* y + 3* z\r\nOnce we have completed our term manipulation, we sometimes like to insert numbers for variables.\r\nThis can be done using the subs method.\r\n97",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/4974e5dd-905b-4c48-bfe4-1791b8fbbb30.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c8c1f88c0f78d8b1427d9b0d9564c6ae2560f1f240fb91ae3d6e56d8011f9b43",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 281
      },
      {
        "segments": [
          {
            "segment_id": "a0450117-6cb5-4162-a5da-6596be91f3ca",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 98,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "98 CHAPTER 12. SYMBOLIC COMPUTATION\r\n>>> from sympy import symbols\r\n>>> x , y = symbols ( ’x , y ’)\r\n>>> x + 2* y\r\nx + 2* y\r\n>>> x + 2* y . subs (x , 10)\r\nx + 2* y\r\n>>> ( x + 2* y ). subs (x , 10)\r\n10 + 2* y\r\n>>> ( x + 2* y ). subs (x , 10). subs (y , 3)\r\n16\r\n>>> ( x + 2* y ). subs ({ x :10 , y :3})\r\n16\r\nWe can also substitute a symbolic variable for another one such as in this example where y is replaced\r\nwith x before we substitute x with the number 2.\r\n>>> myterm = 3* x + y **2\r\n>>> myterm\r\n3* x + y **2\r\n>>> myterm . subs (x , y )\r\n3* y + y **2\r\n>>> myterm . subs (x , y ). subs (y , 2)\r\n10\r\nFrom this point onward, some of the code fragments and examples we present will assume that the\r\nrequired symbols have already been defined. If you try an example and SymPy gives a message like\r\nNameError: name ’x’ is not defined it is probably because you need to define the symbol using\r\none of the methods above.\r\n12.1.2 isympy\r\nThe isympy executable is a wrapper around ipython (see section 11.3.1) which creates the symbolic\r\n(real) variables x, y and z, the symbolic integer variables k, m and n and the symbolic function variables\r\nf, g and h, and imports all objects from the SymPy toplevel.\r\nThis is convenient to figure out new features or experimenting interactively\r\n$ > isympy\r\nPython 2.6.5 console for SymPy 0.6.7\r\nThese commands were executed :\r\n>>> from __future__ import division\r\n>>> from sympy import *\r\n>>> x , y , z = symbols ( ’ xyz ’)\r\n>>> k , m , n = symbols ( ’ kmn ’ , integer = True )\r\n>>> f , g , h = map ( Function , ’ fgh ’)\r\nDocumentation can be found at http :// sympy . org /\r\nIn [1]:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/a0450117-6cb5-4162-a5da-6596be91f3ca.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7dd996905a15630506eb6cc222d62ed10e3e6a51c64244f80db818d523113d0c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 355
      },
      {
        "segments": [
          {
            "segment_id": "ce422b9e-b443-410e-904b-aa0daef77c03",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 99,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "12.1. SYMPY 99\r\n12.1.3 Numeric types\r\nSymPy has the numeric types Rational and Real. The Rational class represents a rational number\r\nas a pair of two integers: the numerator and the denominator, so Rational(1,2) represents 1/2,\r\nRational(5,2) represents 5/2 and so on.\r\n>>> a = Rational (1 , 10)\r\n>>> a\r\n1/10\r\n>>> b = Rational (45 , 67)\r\n>>> b\r\n45/67\r\n>>> a * b\r\n9/134\r\n>>> a - b\r\n-383/670\r\n>>> a + b\r\n517/670\r\nNote that the Rational class works with rational expressions exactly. This is in contrast to Python’s\r\nstandard float data type which uses floating point representation to approximate (rational) numbers.\r\nWe can convert the sympy.Rational type into a Python floating point variable using float or the\r\nevalf method of the Rational object. The evalf method can take an argument that specifies how\r\nmany digits should be computed for the floating point approximation (not all of those may be used\r\nby Python’s floating point type of course).\r\n>>> c = Rational (2 , 3)\r\n>>> c\r\n2/3\r\n>>> float ( c )\r\n0.66666666666666663\r\n>>> c . evalf ()\r\n0.666666666666667\r\n>>> c . evalf (50)\r\n0.66666666666666666666666666666666666666666666666667\r\n12.1.4 Differentiation and Integration\r\nSymPy is capable of carrying out differentiation and integration of many functions:\r\n>>> from sympy import Symbol , exp , sin , sqrt , diff\r\n>>> x = Symbol ( ’x ’)\r\n>>> y = Symbol ( ’y ’)\r\n>>> diff ( sin ( x ) , x )\r\ncos ( x )\r\n>>> diff ( sin ( x ) , y )\r\n0\r\n>>> diff (10 + 3* x + 4* y + 10* x **2 + x **9 , x )\r\n3 + 20* x + 9* x **8\r\n>>> diff (10 + 3* x + 4* y + 10* x **2 + x **9 , y )\r\n4\r\n>>> diff (10 + 3* x + 4* y + 10* x **2 + x **9 , x ). subs (x ,1)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/ce422b9e-b443-410e-904b-aa0daef77c03.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2ed72475dd8f15d3cd334133ce145d138ef716562e121585d339b1bd31541efb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 327
      },
      {
        "segments": [
          {
            "segment_id": "f4b1572c-e560-4eec-8910-33bd62441c37",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 100,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "100 CHAPTER 12. SYMBOLIC COMPUTATION\r\n32\r\n>>> diff (10 + 3* x + 4* y + 10* x **2 + x **9 , x ). subs (x ,1.5)\r\n263.660156250000\r\n>>> diff ( exp ( x ) , x )\r\nexp ( x )\r\n>>> diff ( exp ( - x ** 2 / 2) , x )\r\n-x * exp ( - x **2/2)\r\nThe SymPy diff() function takes a minimum of two arguments: the function to be differentiated\r\nand the variable with respect to which the differentiation is performed. Higher derivatives may be\r\ncalculated by specifying additional variables, or by adding an optional integer argument:\r\n>>> diff (3* x **4 , x )\r\n12* x **3\r\n>>> diff (3* x **4 , x , x , x )\r\n72* x\r\n>>> diff (3* x **4 , x , 3)\r\n72* x\r\n>>> diff (3* x **4* y **7 , x , 2 , y , 2)\r\n1512* x **2* y **5\r\n>>> diff ( diff (3* x **4* y **7 , x , x ) , y , y )\r\n1512* x **2* y **5\r\nAt times, SymPy may return a result in an unfamiliar form. If, for example, you wish to use\r\nSymPy to check that you differentiated something correctly, a technique that might be of use is to\r\nsubtract the SymPy result from your result, and check that the answer is zero.\r\nTaking the simple example of a multiquadric radial basis function, φ(r) = √r\r\n2 + σ\r\np\r\n2 with r =\r\nx\r\n2 + y2 and σ a constant, we can verify that the first derivative in x is ∂φ/∂x = x/√\r\nr\r\n2 + σ2. In\r\nthis example, we first ask SymPy to print the derivative. See that it is printed in a different form to\r\nour trial derivative, but the subtraction verifies that they are identical:\r\n>>> r = sqrt ( x **2 + y **2)\r\n>>> def phi (x ,y , sigma ):\r\n... return sqrt ( x **2 + y **2 + sigma **2)\r\n...\r\n>>> mydfdx = x / sqrt ( r **2 + sigma **2)\r\n>>> print diff ( phi (x , y , sigma ) , x )\r\nx /( sigma **2 + x **2 + y **2)**(1/2)\r\n>>> print mydfdx - diff ( phi (x , y , sigma ) , x )\r\n0\r\nHere it is trivial to tell that the expressions are identical without SymPy’s help, but in more com\u0002plicated examples there may be many more terms and it would become increasingly difficult, time\r\nconsuming and error-prone to attempt to rearrange our trial derivative and SymPy’s answer into the\r\nsame form. It is in such cases that this subtraction technique is of most use.\r\nIntegration uses a similar syntax. For the indefinite case, specify the function and the variable\r\nwith respect to which the integration is performed:\r\n>>> from sympy import integrate\r\n>>> integrate ( x **2 , x )\r\nx **3/3\r\n>>> integrate ( x **2 , y )\r\ny * x **2",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/f4b1572c-e560-4eec-8910-33bd62441c37.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2f6ad7fd44b3ba5e099ec7b2990158e4ebe786fe5d5d0118ecfcd60957219291",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 509
      },
      {
        "segments": [
          {
            "segment_id": "6284621d-e53b-4d56-a574-11b5c90d4b3b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 101,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "12.1. SYMPY 101\r\n>>> integrate ( sin ( x ) , y )\r\ny * sin ( x )\r\n>>> integrate ( sin ( x ) , x )\r\n- cos ( x )\r\n>>> integrate ( - x * exp ( - x **2/2) , x )\r\nexp ( - x **2/2)\r\nWe can calculate definite integrals by providing integrate() with a tuple containing the variable\r\nof interest, the lower and the upper bounds. If several variables are specified, multiple integration\r\nis performed. When SymPy returns a result in the Rational class, it is possible to evaluate it to a\r\nfloating-point representation at any desired precision (see section 12.1.3).\r\n>>> integrate ( x *2 , (x , 0 , 1))\r\n1\r\n>>> integrate ( x **2 , x )\r\nx **3/3\r\n>>> integrate ( x **2 , x , x )\r\nx **4/12\r\n>>> integrate ( x **2 , x , x , y )\r\ny * x **4/12\r\n>>> integrate ( x **2 , (x , 0 , 2))\r\n8/3\r\n>>> integrate ( x **2 , (x , 0 , 2) , (x , 0 , 2) , (y , 0 , 1))\r\n16/3\r\n>>> float ( integrate ( x **2 , (x , 0 , 2)))\r\n2.6666666666666665\r\n>>> type ( integrate ( x **2 , (x , 0 , 2)))\r\n<class ’ sympy . core . numbers . Rational ’ >\r\n>>> result_rational = integrate ( x **2 , (x , 0 , 2))\r\n>>> result_rational . evalf ()\r\n2.66666666666667\r\n>>> result_rational . evalf (50)\r\n2.6666666666666666666666666666666666666666666666667\r\n12.1.5 Ordinary differential equations\r\nSymPy has inbuilt support for solving several kinds of ordinary differential equation via its dsolve\r\ncommand. We need to set up the ODE and pass it as the first argument, eq. The second argument is\r\nthe function f(x) to solve for. An optional third argument, hint, influences the method that dsolve\r\nuses: some methods are better-suited to certain classes of ODEs, or will express the solution more\r\nsimply, than others.\r\nTo set up the ODE solver, we need a way to refer to the unknown function for which we are solving,\r\nas well as its derivatives. The Function and Derivative classes facilitate this:\r\n>>> from sympy import Symbol , dsolve , Function , Derivative , Eq\r\n>>> y = Function ( \" y \" )\r\n>>> x = Symbol ( ’x ’)\r\n>>> y_ = Derivative ( y ( x ) , x )\r\n>>> print dsolve ( y_ + 5* y ( x ) , y ( x ))\r\ny ( x ) == exp ( C1 - 5* x )",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/6284621d-e53b-4d56-a574-11b5c90d4b3b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=eef3bfab644aba61b5ebf792e1362910919d858b6f68c8e398f622dc4bc4a2db",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 435
      },
      {
        "segments": [
          {
            "segment_id": "f6442353-8eeb-4e02-b3de-0349fe37337d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 102,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "102 CHAPTER 12. SYMBOLIC COMPUTATION\r\nNote how dsolve has introduced a constant of integration, C1. It will introduce as many constants as\r\nare required, and they will all be named Cn, where n is an integer. Note also that the first argument\r\nto dsolve is taken to be equal to zero unless we use the Eq() function to specify otherwise:\r\n>>> print dsolve ( y_ + 5* y ( x ) , y ( x ))\r\ny ( x ) == exp ( C1 - 5* x )\r\n>>> print dsolve ( Eq ( y_ + 5* y ( x ) , 0) , y ( x ))\r\ny ( x ) == exp ( C1 - 5* x )\r\n>>> print dsolve ( Eq ( y_ + 5* y ( x ) , 12) , y ( x ))\r\ny ( x ) == 12/5 - exp ( C1 - 5* x )/5\r\nThe results from dsolve are an instance of the Equality class. This has consequences when we\r\nwish to numerically evaluate the function and use the result elsewhere (e.g. if we wanted to plot y(x)\r\nagainst x), because even after using subs() and evalf(), we still have an Equality, not any sort of\r\nscalar. The way to evaluate the function to a number is via the rhs attribute of the Equality.\r\nNote that, here, we use z to store the Equality returned by dsolve, even though it is an expression\r\nfor a function called y(x), to emphasise the distinction between the Equality itself and the data that\r\nit contains.\r\n>>> z = dsolve ( y_ + 5* y ( x ) , y ( x ))\r\n>>> print z\r\ny ( x ) == exp ( C1 - 5* x )\r\n>>> type ( z )\r\n<class ’ sympy . core . relational . Equality ’ >\r\n>>> print z . rhs\r\nexp ( C1 - 5* x )\r\n>>> C1 = Symbol ( ’ C1 ’)\r\n>>> y3 = z . subs ({ C1 :2 , x :3})\r\n>>> print y3\r\ny (3) == exp ( -13)\r\n>>> y3 . evalf (10)\r\ny (3) == exp ( -13)\r\n>>> y3 . rhs\r\nexp ( -13)\r\n>>> y3 . rhs . evalf (10)\r\n2.260329407 e -6\r\n>>> z . rhs . subs ({ C1 :2 , x :4}). evalf (10)\r\n1.522997974 e -8\r\n>>> z . rhs . subs ({ C1 :2 , x :5}). evalf (10)\r\n1.026187963 e -10\r\n>>> type ( z . rhs . subs ({ C1 :2 , x :5}). evalf (10))\r\n<class ’ sympy . core . numbers . Real ’ >\r\nAt times, dsolve may return too general a solution. One example is when there is a possibility\r\nthat some coefficients may be complex. If we know that, for example, they are always real and positive,\r\nwe can provide dsolve this information to avoid the solution becoming unnecessarily complicated:\r\n>>> from sympy import *\r\n>>> a , x = symbols ( ’a , x ’)\r\n>>> f = Function ( ’f ’)\r\n>>> print dsolve ( Derivative ( f ( x ) , x , 2) + a **4* f ( x ) , f ( x ) )\r\nf ( x ) == ( C1 * sin ( x *abs( im (( - a **4) **(1/2) ) ) ) + C2 * cos ( x * im (( - a **4)\r\n**(1/2) ) ) ) * exp ( x * re (( - a **4) **(1/2) ) ) + ( C3 * sin ( x *abs ( im ( -( - a **4)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/f6442353-8eeb-4e02-b3de-0349fe37337d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2f75d32cc2c2e66d9a0d871781e485fe68918ef0d8879e97471035ce1b010d20",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 603
      },
      {
        "segments": [
          {
            "segment_id": "f6442353-8eeb-4e02-b3de-0349fe37337d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 102,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "102 CHAPTER 12. SYMBOLIC COMPUTATION\r\nNote how dsolve has introduced a constant of integration, C1. It will introduce as many constants as\r\nare required, and they will all be named Cn, where n is an integer. Note also that the first argument\r\nto dsolve is taken to be equal to zero unless we use the Eq() function to specify otherwise:\r\n>>> print dsolve ( y_ + 5* y ( x ) , y ( x ))\r\ny ( x ) == exp ( C1 - 5* x )\r\n>>> print dsolve ( Eq ( y_ + 5* y ( x ) , 0) , y ( x ))\r\ny ( x ) == exp ( C1 - 5* x )\r\n>>> print dsolve ( Eq ( y_ + 5* y ( x ) , 12) , y ( x ))\r\ny ( x ) == 12/5 - exp ( C1 - 5* x )/5\r\nThe results from dsolve are an instance of the Equality class. This has consequences when we\r\nwish to numerically evaluate the function and use the result elsewhere (e.g. if we wanted to plot y(x)\r\nagainst x), because even after using subs() and evalf(), we still have an Equality, not any sort of\r\nscalar. The way to evaluate the function to a number is via the rhs attribute of the Equality.\r\nNote that, here, we use z to store the Equality returned by dsolve, even though it is an expression\r\nfor a function called y(x), to emphasise the distinction between the Equality itself and the data that\r\nit contains.\r\n>>> z = dsolve ( y_ + 5* y ( x ) , y ( x ))\r\n>>> print z\r\ny ( x ) == exp ( C1 - 5* x )\r\n>>> type ( z )\r\n<class ’ sympy . core . relational . Equality ’ >\r\n>>> print z . rhs\r\nexp ( C1 - 5* x )\r\n>>> C1 = Symbol ( ’ C1 ’)\r\n>>> y3 = z . subs ({ C1 :2 , x :3})\r\n>>> print y3\r\ny (3) == exp ( -13)\r\n>>> y3 . evalf (10)\r\ny (3) == exp ( -13)\r\n>>> y3 . rhs\r\nexp ( -13)\r\n>>> y3 . rhs . evalf (10)\r\n2.260329407 e -6\r\n>>> z . rhs . subs ({ C1 :2 , x :4}). evalf (10)\r\n1.522997974 e -8\r\n>>> z . rhs . subs ({ C1 :2 , x :5}). evalf (10)\r\n1.026187963 e -10\r\n>>> type ( z . rhs . subs ({ C1 :2 , x :5}). evalf (10))\r\n<class ’ sympy . core . numbers . Real ’ >\r\nAt times, dsolve may return too general a solution. One example is when there is a possibility\r\nthat some coefficients may be complex. If we know that, for example, they are always real and positive,\r\nwe can provide dsolve this information to avoid the solution becoming unnecessarily complicated:\r\n>>> from sympy import *\r\n>>> a , x = symbols ( ’a , x ’)\r\n>>> f = Function ( ’f ’)\r\n>>> print dsolve ( Derivative ( f ( x ) , x , 2) + a **4* f ( x ) , f ( x ) )\r\nf ( x ) == ( C1 * sin ( x *abs( im (( - a **4) **(1/2) ) ) ) + C2 * cos ( x * im (( - a **4)\r\n**(1/2) ) ) ) * exp ( x * re (( - a **4) **(1/2) ) ) + ( C3 * sin ( x *abs ( im ( -( - a **4)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/f6442353-8eeb-4e02-b3de-0349fe37337d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2f75d32cc2c2e66d9a0d871781e485fe68918ef0d8879e97471035ce1b010d20",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 603
      },
      {
        "segments": [
          {
            "segment_id": "24e3de21-68f6-494c-8d20-33fbc5eaec88",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 103,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "12.1. SYMPY 103\r\n**(1/2) ) ) ) + C4 * cos ( x * im ( -( - a **4) **(1/2) ) ) ) * exp ( x * re ( -( - a **4)\r\n**(1/2) ) )\r\n>>> a = Symbol ( ’a ’ , real = True , positive = True )\r\n>>> print dsolve ( Derivative ( f ( x ) , x , 2) + a **4* f ( x ) , f ( x ) )\r\nf ( x ) == C1 * sin ( x * a **2) + C2 * cos ( x * a **2)\r\n12.1.6 Series expansions and plotting\r\nIt is possible to expand many SymPy expressions as Taylor series. The series method makes this\r\nstraightforward. At minimum, we must specify the expression and the variable in which to expand it.\r\nOptionally, we can also specify the point around which to expand, the maximum term number, and\r\nthe direction of the expansion (try help(Basic.series) for more information).\r\n>>> from sympy import *\r\n>>> x = Symbol ( ’x ’)\r\n>>> sin ( x ). series (x , 0)\r\nx - x **3/6 + x **5/120 + O ( x **6)\r\n>>> series ( sin ( x ) , x , 0)\r\nx - x **3/6 + x **5/120 + O ( x **6)\r\n>>> cos ( x ). series (x , 0.5 , 10)\r\n1 - x **2/2 + x **4/24 - x **6/720 + x **8/40320 + O ( x **10)\r\nIn some cases, especially for numerical evaluation and plotting the results, it is necessary to remove\r\nthe trailing O(n) term:\r\n>>> cos ( x ). series (x , 0.5 , 10). removeO ()\r\n1 - x **2/2 + x **4/24 - x **6/720 + x **8/40320\r\nSymPy provides two inbuilt plotting functions, Plot() from the sympy.plotting module, and\r\nplot from sympy.mpmath.visualization. At the time of writing, these functions lack the ability to\r\nadd a key to the plot, which means they are unsuitable for most of our needs. Should you wish to use\r\nthem nevertheless, their help() text is useful.\r\nFor most of our purposes, Matplotlib should be the plotting tool of choice. The details are in\r\nchapter 15. Here we furnish just one example of how to plot the results of a SymPy computation.\r\nThe resulting plot is shown in figure 12.1.\r\n>>> from sympy import sin , series , Symbol\r\n>>> import pylab\r\n>>> x = Symbol ( ’x ’)\r\n>>> s10 = sin ( x ). series (x ,0 ,10). removeO ()\r\n>>> s20 = sin ( x ). series (x ,0 ,20). removeO ()\r\n>>> s = sin ( x )\r\n>>> xx = []\r\n>>> y10 = []\r\n>>> y20 = []\r\n>>> y = []\r\n>>> for i in range (1000):\r\n... xx . append ( i / 100.0)\r\n... y10 . append ( float ( s10 . subs ({ x : i /100.0})))\r\n... y20 . append ( float ( s20 . subs ({ x : i /100.0})))\r\n... y . append ( float ( s . subs ({ x : i /100.0})))\r\n...",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/24e3de21-68f6-494c-8d20-33fbc5eaec88.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bf7a8748d8b2f14d4f24db10d8ee48fcc0b52b7191cd383c11877acdd28dbdd3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 522
      },
      {
        "segments": [
          {
            "segment_id": "24e3de21-68f6-494c-8d20-33fbc5eaec88",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 103,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "12.1. SYMPY 103\r\n**(1/2) ) ) ) + C4 * cos ( x * im ( -( - a **4) **(1/2) ) ) ) * exp ( x * re ( -( - a **4)\r\n**(1/2) ) )\r\n>>> a = Symbol ( ’a ’ , real = True , positive = True )\r\n>>> print dsolve ( Derivative ( f ( x ) , x , 2) + a **4* f ( x ) , f ( x ) )\r\nf ( x ) == C1 * sin ( x * a **2) + C2 * cos ( x * a **2)\r\n12.1.6 Series expansions and plotting\r\nIt is possible to expand many SymPy expressions as Taylor series. The series method makes this\r\nstraightforward. At minimum, we must specify the expression and the variable in which to expand it.\r\nOptionally, we can also specify the point around which to expand, the maximum term number, and\r\nthe direction of the expansion (try help(Basic.series) for more information).\r\n>>> from sympy import *\r\n>>> x = Symbol ( ’x ’)\r\n>>> sin ( x ). series (x , 0)\r\nx - x **3/6 + x **5/120 + O ( x **6)\r\n>>> series ( sin ( x ) , x , 0)\r\nx - x **3/6 + x **5/120 + O ( x **6)\r\n>>> cos ( x ). series (x , 0.5 , 10)\r\n1 - x **2/2 + x **4/24 - x **6/720 + x **8/40320 + O ( x **10)\r\nIn some cases, especially for numerical evaluation and plotting the results, it is necessary to remove\r\nthe trailing O(n) term:\r\n>>> cos ( x ). series (x , 0.5 , 10). removeO ()\r\n1 - x **2/2 + x **4/24 - x **6/720 + x **8/40320\r\nSymPy provides two inbuilt plotting functions, Plot() from the sympy.plotting module, and\r\nplot from sympy.mpmath.visualization. At the time of writing, these functions lack the ability to\r\nadd a key to the plot, which means they are unsuitable for most of our needs. Should you wish to use\r\nthem nevertheless, their help() text is useful.\r\nFor most of our purposes, Matplotlib should be the plotting tool of choice. The details are in\r\nchapter 15. Here we furnish just one example of how to plot the results of a SymPy computation.\r\nThe resulting plot is shown in figure 12.1.\r\n>>> from sympy import sin , series , Symbol\r\n>>> import pylab\r\n>>> x = Symbol ( ’x ’)\r\n>>> s10 = sin ( x ). series (x ,0 ,10). removeO ()\r\n>>> s20 = sin ( x ). series (x ,0 ,20). removeO ()\r\n>>> s = sin ( x )\r\n>>> xx = []\r\n>>> y10 = []\r\n>>> y20 = []\r\n>>> y = []\r\n>>> for i in range (1000):\r\n... xx . append ( i / 100.0)\r\n... y10 . append ( float ( s10 . subs ({ x : i /100.0})))\r\n... y20 . append ( float ( s20 . subs ({ x : i /100.0})))\r\n... y . append ( float ( s . subs ({ x : i /100.0})))\r\n...",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/24e3de21-68f6-494c-8d20-33fbc5eaec88.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bf7a8748d8b2f14d4f24db10d8ee48fcc0b52b7191cd383c11877acdd28dbdd3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 522
      },
      {
        "segments": [
          {
            "segment_id": "911018fb-f691-409d-9987-c2e536695675",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 104,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "104 CHAPTER 12. SYMBOLIC COMPUTATION\r\n0 2 4 6 8 10\r\nx\r\n4\r\n3\r\n2\r\n1\r\n0\r\n1\r\n2\r\n3\r\n4\r\nf(x)\r\nO(10)\r\nO(20)\r\nsin(x)\r\nFigure 12.1: Plotting SymPy results with Matplotlib.\r\n>>> pylab . figure ()\r\n< matplotlib . figure . Figure object at 0 x3f45e10 >\r\n>>> pylab . plot ( xx , y10 , label = ’O (10) ’)\r\n[ < matplotlib . lines . Line2D object at 0 x44a8d10 >]\r\n>>> pylab . plot ( xx , y20 , label = ’O (20) ’)\r\n[ < matplotlib . lines . Line2D object at 0 x44b6750 >]\r\n>>> pylab . plot ( xx , y , label = ’ sin ( x ) ’)\r\n[ < matplotlib . lines . Line2D object at 0 x3f4eb90 >]\r\n>>> pylab . axis ([0 , 10 , -4 , 4])\r\n[0 , 10 , -4 , 4]\r\n>>> pylab . xlabel ( ’x ’)\r\n< matplotlib . text . Text object at 0 x4374490 >\r\n>>> pylab . ylabel ( ’f ( x ) ’)\r\n< matplotlib . text . Text object at 0 x43698d0 >\r\n>>> pylab . legend ()\r\n< matplotlib . legend . Legend object at 0 x449c710 >\r\n>>> pylab . savefig ( ’ sympy . pdf ’)\r\n>>> pylab . savefig ( ’ sympy . png ’)\r\n>>> pylab . show ()\r\n12.1.7 Linear equations and matrix inversion\r\nSymPy has a Matrix class and associated functions that allow the symbolic solution of systems of\r\nlinear equations (and, of course, we can obtain numerical answers with subs() and evalf()). We",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/911018fb-f691-409d-9987-c2e536695675.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cd46501fba3c88a00fe158a483b1b22bfeb9b96f93f47c67611861b4ad70a759",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 264
      },
      {
        "segments": [
          {
            "segment_id": "fad49b9c-25da-41be-99ae-b27c3e18cbdc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 105,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "12.1. SYMPY 105\r\nshall consider the example of the following simple pair of linear equations:\r\n3x + 7y = 12z\r\n4x − 2y = 5z\r\nWe may write this system in the form A~x = ~b (multiply A by ~x if you want to verify that we recover\r\nthe original equations), where\r\nA =\r\n\u0012\r\n3 7\r\n4 −2\r\n\u0013\r\n, ~x =\r\n\u0012\r\nx\r\ny\r\n\u0013\r\n,\r\n~b =\r\n\u0012\r\n12z\r\n5z\r\n\u0013\r\n.\r\nHere we included a symbol, z, on the right-hand side to demonstrate that symbols will be propa\u0002gated into the solution. In many cases we would have z = 1, but there may still be benefit to using\r\nSymPy over a numerical solver even when the solution contains no symbols because of its ability to\r\nreturn exact fractions rather than approximate floats.\r\nOne strategy to solve for ~x is to invert the matrix A and pre-multiply, i.e. A−1A~x = ~x = A−1~b.\r\nSymPy’s Matrix class has an inv() method that allows us to find the inverse, and * performs matrix\r\nmultiplication for us, when appropriate:\r\n>>> from sympy import symbols , Matrix\r\n>>> x , y , z = symbols ( ’ xyz ’)\r\n>>> A = Matrix (([3 , 7] , [4 , -2]))\r\n>>> print A\r\n[3 , 7]\r\n[4 , -2]\r\n>>> print A . inv ()\r\n[1/17 , 7/34]\r\n[2/17 , -3/34]\r\n>>> b = Matrix (( 12* z ,5* z ))\r\n>>> print b\r\n[12* z ]\r\n[ 5* z ]\r\n>>> x = A . inv ()* b\r\n>>> print x\r\n[59* z /34]\r\n[33* z /34]\r\n>>> print x . subs ({ z :3.3}). evalf (4)\r\n[5.726]\r\n[3.203]\r\n>>> type ( x )\r\n<class ’ sympy . matrices . matrices . Matrix ’ >\r\nAn alternative method of solving the same problem is to construct the system as a matrix in\r\naugmented form; that is the form obtained by appending the columns of (in our example) A and ~b\r\ntogether. The augmented matrix is1:\r\n(A|\r\n~b) = \u0012\r\n3 7 12z\r\n4 −2 5z\r\n\u0013\r\n,\r\nand as before we construct this as a SymPy Matrix object, but in this case we pass it to the\r\nsolve linear system() function:\r\n1\r\nthe vertical line is to show the division between the original components only; mathematically, the augmented matrix\r\nbehaves like any other 2 × 3 matrix, and we code it in SymPy as we would any other.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/fad49b9c-25da-41be-99ae-b27c3e18cbdc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=be4386397af9a25657f1feed0da4f930ebe575ae9323798181276ed5b4f6d362",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 408
      },
      {
        "segments": [
          {
            "segment_id": "2e51b1ac-4cf3-43f3-aeb3-067e33432e46",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 106,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "106 CHAPTER 12. SYMBOLIC COMPUTATION\r\n>>> from sympy import Matrix , symbols , solve_linear_system\r\n>>> x , y , z = symbols ( ’ xyz ’)\r\n>>> system = Matrix (([3 , 7 , 12* z ] ,[4 , -2 , 5* z ]))\r\n>>> print system\r\n[3 , 7 , 12* z ]\r\n[4 , -2 , 5* z ]\r\n>>> sol = solve_linear_system ( system ,x , y )\r\n>>> print sol\r\n{ x : 59* z /34 , y : 33* z /34}\r\n>>> type ( sol )\r\n<type ’ dict ’ >\r\n>>> for k in sol . keys ():\r\n... print k , ’= ’ , sol [ k ]. subs ({ z :3.3}). evalf (4)\r\n...\r\nx = 5.726\r\ny = 3.203\r\nA third option is the solve() method, whose arguments include the individual symbolic equations,\r\nrather than any matrices. Like dsolve() (see section 12.1.5), solve() expects either expressions which\r\nit will assume equal to zero, or Equality objects, which we can conveniently create with Eq():\r\n>>> from sympy import symbols , solve , Eq\r\n>>> x , y , z = symbols ( ’ xyz ’)\r\n>>> solve (( Eq (3* x +7* y ,12* z ) , Eq (4* x -2* y ,5* z )) , x , y )\r\n{ x : 59* z /34 , y : 33* z /34}\r\n>>> solve ((3* x +7* y -12* z , 4* x -2* y -5* z ) , x , y )\r\n{ x : 59* z /34 , y : 33* z /34}\r\nFor more information, see help(solve) and help(solve linear system).\r\n12.1.8 Non linear equations\r\nLet’s solve a simple equation such as\r\nx = x\r\n2\r\n. There are two obvious solutions: x = 0 and x = 1. How can we ask Sympy to compute these for us?\r\n>>> import sympy\r\n>>> x , y , z = sympy . symbols ( ’x , y , z ’) # create some symbols\r\n>>> eq = x - x ** 2 # define the equation\r\n>>> sympy . solve ( eq , x ) # solve eq = 0\r\n[0 , 1] # this is the solution\r\nThe solve() function expects an expression that as meant to be solve so that it evaluates to zero.\r\nFor our example, we rewrite\r\nx = x\r\n2\r\nas\r\nx − x\r\n2 = 0\r\nand then pass this to the solve function.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/2e51b1ac-4cf3-43f3-aeb3-067e33432e46.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e2d45cfe857e4e04d64f6f01b588b1d51fa4aa4ee805086775fa4f6127934898",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 410
      },
      {
        "segments": [
          {
            "segment_id": "b9cc0fda-ff12-4892-810d-b45331d9601c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 107,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "12.1. SYMPY 107\r\nLet’s repeat the same for the equation:\r\nx = x\r\n3\r\nand solve\r\n>>> eq = x - x ** 3 # define the equation\r\n>>> sympy . solve ( eq , x ) # solve eq = 0\r\n[ -1 , 0 , 1]\r\n12.1.9 Output: LATEX interface and pretty-printing\r\nAs is the case with many computer algebra systems, SymPy has the ability to format its output as\r\nLATEX code, for easy inclusion into documents. By default, we get an inline equation, but we may\r\nrequest a displayed equation instead.\r\n>>> series (1/( x + y ) , y , 0 , 3)\r\n1/ x - y / x **2 + y **2/ x **3 + O ( y **3)\r\n>>> print latex ( series (1/( x + y ) , y , 0 , 3) )\r\n$ \\ frac {1}{ x } - \\ frac { y }{ x ^{2}} + \\ frac { y ^{2}}{ x ^{3}} + \\ operatorname {\\\r\nmathcal { O }}\\ left ( y ^{3}\\ right ) $\r\n>>> print latex ( series (1/( x + y ) , y , 0 , 3) , inline = False )\r\n\\ begin { equation *}\\ frac {1}{ x } - \\ frac { y }{ x ^{2}} + \\ frac { y ^{2}}{ x ^{3}} +\r\n\\ operatorname {\\ mathcal { O }}\\ left ( y ^{3}\\ right ) \\ end { equation *}\r\nNote that the print command is important: omitting it will lead to Python escaping the backslashes\r\nin the above to indicate that they are literal, by adding further backslashes, which will affect the\r\nLATEX rendering. Also be aware that in its default mode, latex() outputs code that requires the\r\namsmath package to be loaded via a \\usepackage{amsmath} command in the document preamble.\r\nThe above series is thus rendered:\r\n1\r\nx\r\n−\r\ny\r\nx\r\n2\r\n+\r\ny\r\n2\r\nx\r\n3\r\n+ O\r\n\r\ny\r\n3\r\n\u0001\r\nSymPy also supports a “pretty print” (pprint()) output routine, which produces better-formatted\r\nASCII output than the default printing routine:\r\n>>> cos ( x ). series (x , 0.5 , 10)\r\n1 - x **2/2 + x **4/24 - x **6/720 + x **8/40320 + O ( x **10)\r\n>>> pprint ( cos ( x ). series (x ,0.5 ,10))\r\n2 4 6 8\r\nx x x x\r\n1 - -- + -- - --- + ----- + O ( x **10)\r\n2 24 720 40320\r\n>>> integrate ( x **2* exp ( y ) , x , x )\r\nx **4* exp ( y )/12\r\n>>> pprint ( integrate ( x **2* exp ( y ) , x , x ))\r\n4 y\r\nx . e\r\n-----\r\n12\r\nIf your system is set up optimally, it is likely that pprint() output will look even better than the\r\nabove example, as illustrated in figure 12.2. Note features such as the subscripts for array elements",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/b9cc0fda-ff12-4892-810d-b45331d9601c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=99a6ab5999136d39c47516ba16d2ff443cc7aa47567f603d78da5eb2e83adc4d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 490
      },
      {
        "segments": [
          {
            "segment_id": "7329b83b-ffd9-4c0a-8d1b-add35900278b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 108,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "108 CHAPTER 12. SYMBOLIC COMPUTATION\r\nFigure 12.2: Nicely-formatted output from pprint().\r\nwhose names are of the form T n, the italicised constant e, vertically-centred dots for multiplication,\r\nand the nicely-formed matrix borders and fractions.\r\nFinally, SymPy offers preview(), which displays rendered output on screen:\r\n>>> preview ( integrate ( x **2* exp ( y ) , x , x ))\r\nThe last command results in a rendered formula being displayed, so long as appropriate LATEX tools are\r\navailable on the system2. It can display output in various formats (currently PNG, DVI, PostScript\r\nor PDF). See help(preview) for full details.\r\n12.1.10 Automatic generation of C code\r\nA strong point of many symbolic libraries is that they can convert the symbolic expressions to C-code\r\n(or other code) that can subsequently be compiled for high execution speed. Here is an example that\r\ndemonstrates this:\r\n>>> from sympy import *\r\n>>> from sympy . utilities . codegen import codegen\r\n>>> x = Symbol ( ’x ’)\r\n>>> sin ( x ). series (x , 0 , 6)\r\nx - x **3/6 + x **5/120 + O ( x **6)\r\n>>> print codegen (( \" taylor_sine \" , sin ( x ). series (x ,0 ,6)) ,\r\n\" C \" , \" myHeaderFile \" )[0][1]\r\n/****************************************************\r\n* Code generated with sympy 0.6.6 *\r\n* *\r\n* See http :// www . sympy . org / for more information .*\r\n* *\r\n* This file is part of ’ project ’ *\r\n****************************************************/\r\n2\r\nfrom the help(preview) documentation: “Currently this depends on pexpect, which is not available for windows.”",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/7329b83b-ffd9-4c0a-8d1b-add35900278b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9d9b14f6f3ff2741bf647073281a2d72ac054c29e6c8f8cce39b86dd54543cce",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3de01778-7064-41b2-8106-63219d35c8e5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 109,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "12.2. RELATED TOOLS 109\r\n# include \" myHeaderFile . h \"\r\n# include < math .h >\r\ndouble taylor_sine ( double x ) {\r\nreturn x - pow (x ,3)/6 + pow (x ,5)/120 + O (pow (x ,6));\r\n}\r\n12.2 Related tools\r\nIt is worth noting that the SAGE initiative http://www.sagemath.org/ is trying to “create a vi\u0002able free open source alternative to Magma, Maple, Mathematica and Matlab.” and includes the\r\nSymPy library among many others. Its symbolic capabilities are more powerful than SymPy’s, and\r\nSAGE, but the SymPy features will already cover many of the needs arising in science and engineer\u0002ing. SAGE includes the computer algebra system Maxima, which is also available standalone from\r\nhttp://maxima.sourceforge.net/.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/3de01778-7064-41b2-8106-63219d35c8e5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6c09bd7f64e642c852cb61ed00a84ba3643cb4d2e74162771de89b867a19ce5a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "bdb47025-c9f7-434c-9db9-284df90df9bd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 110,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "110 CHAPTER 12. SYMBOLIC COMPUTATION",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/bdb47025-c9f7-434c-9db9-284df90df9bd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bb4c435df9961be8bcc35a9217af34bffcf1baca50b943a68ebadd0f8826db95",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 384
      },
      {
        "segments": [
          {
            "segment_id": "f4a04b1a-0cb4-4ad0-983f-c7a7a8deff1e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 111,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 13\r\nNumerical Computation\r\n13.1 Numbers and numbers\r\nWe have already seen (3.2) that Python knows different types of numbers:\r\n• floating point numbers such as 3.14\r\n• integers such as 42\r\n• complex numbers such as 3.14 + 1j\r\nThere is one more type which is called long. This is a special integer type which can represent numbers\r\nup to any upper or lower limit (but computations with it are carried out much slower than using the\r\nint integer type).\r\n13.1.1 Limitations of number types\r\nLimitations of ints\r\nMathematics provides the infinite set of natural numbers N = {1, 2, 3, . . .}. Because the computer has\r\nfinite size, it is impossible to represent all of these numbers in the computer. Instead, only a small\r\nsubset of numbers is represented.\r\nThe int-type can (usually1) represent numbers between -2147483648 and +2147483647 and cor\u0002responds to 4 bytes (that’s 4*8 bit, and 232 = 4294967296 which is the range from -2147483648 and\r\n+2147483647).\r\nYou can imagine that the hardware uses a table like this to encode integers using bits (suppose for\r\nsimplicity we use only 8 bits for this):\r\nnatural number bit-representation\r\n0 00000000\r\n1 00000001\r\n2 00000010\r\n3 00000011\r\n4 00000100\r\n5 00000101\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n254 11111110\r\n255 11111111\r\n1The exact value for the upper limit is availabe in sys.maxint.\r\n111",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/f4a04b1a-0cb4-4ad0-983f-c7a7a8deff1e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4dd266c4c1ec36a7d4215714041c6d08645443738ba1c624cb8d00cdd21879fe",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 225
      },
      {
        "segments": [
          {
            "segment_id": "e1e5d519-a4f5-4b53-badb-b2d33eea0456",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 112,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "112 CHAPTER 13. NUMERICAL COMPUTATION\r\nUsing 8 bit we can represent 256 natural numbers (for example from 0 to 255) because we have\r\n2\r\n8 = 256 different ways of combining eight 0s and 1s.\r\nWe could also use a slightly different table to describe 256 integer numbers ranging, for example,\r\nfrom -127 to +128.\r\nThis is in principle how integers are represented in the computer. Depending on the number of\r\nbytes used, only integer numbers between a minimum and a maximum value can be represented. On\r\ntoday’s hardware, it is common to use 4 or 8 bytes to represent one integer, which leads exactly to\r\nthe minimum and maximum values of -2147483648 and +2147483647 as shown above for 4 bytes, and\r\n+9223372036854775807 as the maximum integer for 8 bytes (that’s ≈ 9.2 · 1018).\r\nLimitations of floats\r\nThe floating point numbers in a computer are not the same as the mathematical floating point numbers.\r\n(This is exactly the same as the (mathematical) integer numbers not being the same as the integer\r\nnumbers in a computer: only a subset of the infinite set of integer numbers can be represented by\r\nthe int data type as shown in section 13.1). So how are floating point numbers represented in the\r\ncomputer?\r\n• Any real number x can be written as\r\nx = a · 10b\r\nwhere a is the mantissa and b the exponent.\r\n• Examples:\r\nx a b\r\n123.456 = 1.23456 · 102 1.23456 2\r\n100000 = 1.0 · 106 1.00000 6\r\n0.0000024 = 2.4 · 10−6 2.40000 −6\r\nCan write a and b as integers:\r\n123456 2\r\n100000 6\r\n240000 −6\r\n• Therefore, we can use 2 integers to encode one floating point number!\r\nx = a · 10b\r\n• Following (roughly) the IEEE-754 standard, one uses 8 bytes for one float x: these 64 bits are\r\nsplit as\r\n. 10 bit for the exponent b and\r\n. 54 bit for the mantissa a.\r\nThis results in\r\n. largest possible float ≈ 10308 (quality measure for b)\r\n. smallest possible (positive) float ≈ 10−308 (quality measure for b)\r\n. distance between 1.0 and next larger number ≈ 10−16 (quality measure for a)\r\nNote that this is in principle how floating point numbers are stored (it is actually a bit more compli\u0002cated).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/e1e5d519-a4f5-4b53-badb-b2d33eea0456.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d628522f77730a783153a9cad00b6ab9edbd07b656609193d3863d31c229e409",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 381
      },
      {
        "segments": [
          {
            "segment_id": "8323d659-9ccd-4ebb-81fb-2820f3c4312b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 113,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "13.1. NUMBERS AND NUMBERS 113\r\nLimitations of complex numbers\r\nThe complex number type has essentially the same limitations as the float data type (see section\r\n13.1.1) because a complex number consists of two floats: one represents the real part, the other one\r\nthe imaginary part.\r\n. . . are these number types of practical value?\r\nIn practice, we do not usually find numbers in our daily life that exceed 10300 (this is a number with\r\n300 zeros!), and therefore the floating point numbers cover the range of numbers we usually need.\r\nHowever, be warned that in scientific computation small and large numbers are used which may\r\n(often in intermediate results) exceed the range of floating point numbers.\r\n• Imagine for example, that we have to take the fourth power of the constant ~ = 1.0545716 ·\r\n10−34kgm2/s:\r\n• ~\r\n4 = 1.2368136958909421 · 10−136kg4m8/s4 which is “halfway” to our representable smallest\r\npositive float of the order of 10−308.\r\nIf there is any danger that we might exceed the range of the floating point numbers, we have to rescale\r\nour equations so that (ideally) all numbers are of order unity. Rescaling our equations so that all\r\nrelevant numbers are approximately 1 is also useful in debugging our code: if numbers much greater\r\nor smaller than 1 appear, this may be an indication of an error.\r\n13.1.2 Using floating point numbers (carelessly)\r\nWe know already that we need to take care that our floating point values do not exceed the range of\r\nfloating point numbers that can be represented in the computer (see 13.1.1).\r\nThere is another complication due to the way floating point numbers have to be represented\r\ninternally: not all floating point numbers can be represented exactly in the computer. The number\r\n1.0 can be represented exactly but the numbers 0.1, 0.2 and 0.3 cannot:\r\n>>> 1.0\r\n1.0\r\n>>> 0.1\r\n0.10000000000000001\r\n>>> 0.2\r\n0.20000000000000001\r\n>>> 0.3\r\n0.29999999999999999\r\nInstead, the floating point number “nearest” to the real number is chosen. For 0.1 this is\r\n0.10000000000000001, and for 0.3 this is 0.29999999999999999.\r\nThis can cause problems. Suppose we need a loop where x takes values 0.1, 0.2, 0.3, . . . , 0.9, 1.0.\r\nWe might be tempted to write something like this:\r\nx = 0.0\r\nwhile not x == 1.0:\r\nx = x + 0.1\r\nprint ( \" x =%19.17 g \" % ( x ))\r\nHowever, this loop will never terminate. Here are the first 11 lines of output of the program:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/8323d659-9ccd-4ebb-81fb-2820f3c4312b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=43c7fb624b2df1708798f6da4b882997adced643f9651dbec1d00f799eedd96e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 412
      },
      {
        "segments": [
          {
            "segment_id": "45f631aa-d1af-4420-add2-599b0de606d9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 114,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "114 CHAPTER 13. NUMERICAL COMPUTATION\r\nx =0.10000000000000001\r\nx =0.20000000000000001\r\nx =0.30000000000000004\r\nx =0.40000000000000002\r\nx = 0.5\r\nx =0.59999999999999998\r\nx =0.69999999999999996\r\nx =0.79999999999999993\r\nx =0.89999999999999991\r\nx =0.99999999999999989\r\nx =1.0999999999999999\r\nBecause the variable x never takes exactly the value 1.0, the while loop will continue forever.\r\nThus: Never compare two floating point numbers for equality.\r\n13.1.3 Using floating point numbers carefully 1\r\nThere are a number of alternative ways to solve this problem. For example, we can compare the\r\ndistance between two floating point numbers:\r\nx = 0.0\r\nwhile abs( x - 1.0) > 1e -8:\r\nx = x + 0.1\r\nprint ( \" x =%19.17 g \" % ( x ))\r\n13.1.4 Using floating point numbers carefully 2\r\nAlternatively, we can (for this example) iterate over a sequence of integers and compute the floating\r\npoint number from the integer:\r\nfor i in range (1 , 11):\r\nx = i * 0.1\r\nprint ( \" x =%19.17 g \" % ( x ))\r\nIt is worth showing the output of this program:\r\nx =0.10000000000000001\r\nx =0.20000000000000001\r\nx =0.30000000000000004\r\nx =0.40000000000000002\r\nx = 0.5\r\nx =0.60000000000000009\r\nx =0.70000000000000007\r\nx =0.80000000000000004\r\nx =0.90000000000000002\r\nx = 1\r\nIf we compare this with the output from the program in section 13.1.2, we can see that the floating\r\npoint numbers differ. This means that – in a numerical calculation – it is not true that 0.1 + 0.1 +\r\n0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 = 1.0.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/45f631aa-d1af-4420-add2-599b0de606d9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d1d85ae5f62c56da5bb9c1f4bfae46ea1adade58d4d865d5264f57f2ccb91aa7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 253
      },
      {
        "segments": [
          {
            "segment_id": "ecf852b8-4b61-4ab2-8210-cb1247eb7c26",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 115,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "13.1. NUMBERS AND NUMBERS 115\r\n13.1.5 Symbolic calculation\r\nUsing the sympy package we have arbitrary precision. Using sympy.Rational, we can define the frac\u0002tion 1/10 exactly symbolically. Adding this 10 times will lead exactly to the value 1, as demonstrated\r\nby this script\r\nfrom sympy import Rational\r\ndx = Rational (1 ,10)\r\nx = 0\r\nwhile x != 1.0:\r\nx = x + dx\r\nprint \" Current x =%4 s = %3.1 f \" % (x , x . evalf ())\r\nprint \" Reached x =% s \" % x\r\nand its output\r\nCurrent x =1/10 = 0.1\r\nCurrent x = 1/5 = 0.2\r\nCurrent x =3/10 = 0.3\r\nCurrent x = 2/5 = 0.4\r\nCurrent x = 1/2 = 0.5\r\nCurrent x = 3/5 = 0.6\r\nCurrent x =7/10 = 0.7\r\nCurrent x = 4/5 = 0.8\r\nCurrent x =9/10 = 0.9\r\nCurrent x = 1 = 1.0\r\nReached x =1\r\nHowever, this symbolic calculation is much slower as it is done through software rather than the\r\nCPU-based floating point operations. The next program approximates the relative performances:\r\nfrom sympy import Rational\r\ndx_symbolic = Rational (1 ,10)\r\ndx = 0.1\r\ndef loop_sympy ( n ):\r\nx =0\r\nfor i in xrange ( n ):\r\nx = x + dx_symbolic\r\nreturn x\r\ndef loop_float ( n ):\r\nx =0\r\nfor i in xrange ( n ):\r\nx = x + dx\r\nreturn x\r\ndef time_this (f , n ):\r\nimport time\r\nstarttime = time . time ()\r\nresult = f ( n )\r\nstoptime = time . time ()\r\nprint \" deviation is %16.15 g \" % ( n * dx_symbolic - result )",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/ecf852b8-4b61-4ab2-8210-cb1247eb7c26.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8ecbbc5305be44c5627d368c29b3d2f32f543c14695f564e837e02c1fbff200b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 273
      },
      {
        "segments": [
          {
            "segment_id": "8d021f81-505b-4129-b32b-abf4879a0e04",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 116,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "116 CHAPTER 13. NUMERICAL COMPUTATION\r\nreturn stoptime - starttime\r\nn =100000\r\nprint \" loop using float dx : \"\r\ntime_float = time_this ( loop_float , n )\r\nprint \" float loop n =% d takes %6.5 f seconds \" % (n , time_float )\r\nprint \" loop using sympy symbolic dx : \"\r\ntime_sympy = time_this ( loop_sympy , n )\r\nprint \" sympy loop n =% d takes %6.5 f seconds \" % (n , time_sympy )\r\nprint \" Symbolic loop is a factor %.1 f slower . \" % ( time_sympy / time_float )\r\nOutput (run on MacBook Pro September 2011):\r\nloop using float dx :\r\ndeviation is -1.88483681995422 e -08\r\nfloat loop n =100000 takes 0.01390 seconds\r\nloop using sympy symbolic dx :\r\ndeviation is 0\r\nsympy loop n =100000 takes 2.75708 seconds\r\nSymbolic loop is a factor 198.4 slower .\r\nThis is of course an artificial example: we have added the symbolic code to demonstrate that\r\nthese round off errors originate from the approximative representation of floating point numbers in\r\nthe hardware (and thus programming languages). We can, in principle, avoid these complications by\r\ncomputing using symbolic expressions, but this is in practice too slow.2\r\n13.1.6 Summary\r\nIn summary, we have learned that\r\n• floating point numbers and integers used in numeric computation are generally quite differ\u0002ent from “mathematical numbers” (symbolic calculations are exact and use the “mathematical\r\nnumbers”):\r\n. there is a maximum number and a minimum number that can be represented (for both\r\nintegers and floating point numbers)\r\n. within this range, not every floating point number can be represented in the computer.\r\n• We deal with this limitation by:\r\n. never comparing two floating point numbers for equality (instead we compute the absolute\r\nvalue of the difference)\r\n. use of algorithms that are stable (this means that small deviations from correct numbers can\r\nbe corrected by the algorithm. We have not yet shown any such examples this document.)\r\n• Note that there is a lot more to be said about numerical and algorithmic tricks and methods to\r\nmake numeric computation as accurate as possible but this is outside the scope of this section.\r\n2We add for completeness, that a C-program (or C++ of Fortran) that executes the same loop will be about 100\r\ntimes faster than the python float loop, and thus about 100*200 = 20000 faster than the symbolic loop.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/8d021f81-505b-4129-b32b-abf4879a0e04.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=524894a664a8194dabed76a740ce9416c60dec2508619527bfa742c8fa24d5da",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "599ad993-8f8a-4c5d-ada2-4dc83092d1f7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 117,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "13.1. NUMBERS AND NUMBERS 117\r\n13.1.7 Exercise: infinite or finite loop\r\n1. What does the following piece of code compute? Will the loop ever finish? Why?\r\neps = 1.0\r\nwhile 1.0 + eps > 1.0:\r\neps = eps / 2.0\r\nprint ( eps )",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/599ad993-8f8a-4c5d-ada2-4dc83092d1f7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=35267a23f667cc1e29e0dca5c711f77061f2168b2a4fe0957cb0a2f18e2d24c9",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "04468a2a-7a90-4564-83e5-560f17655692",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 118,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "118 CHAPTER 13. NUMERICAL COMPUTATION",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/04468a2a-7a90-4564-83e5-560f17655692.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=830668b215990b87edca0ea361344fcc7d64ff888e4926f78f92537377a7ddfd",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 447
      },
      {
        "segments": [
          {
            "segment_id": "6b120fa1-b4b6-44d7-a8b4-0fba7a9c7018",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 119,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 14\r\nNumerical Python (numpy): arrays\r\n14.1 Numpy introduction\r\nThe NumPy package (read as NUMerical PYthon) provides access to\r\n• a new data structure called arrays which allow\r\n• efficient vector and matrix operations. It also provides\r\n• a number of linear algebra operations (such as solving of systems of linear equations, computation\r\nof Eigenvectors and Eigenvalues).\r\n14.1.1 History\r\nSome background information: There are two other implementations that provide nearly the same\r\nfunctionality as NumPy. These are called “Numeric” and “numarray”:\r\n• Numeric was the first provision of a set of numerical methods (similar to Matlab) for Python.\r\nIt evolved from a PhD project.\r\n• Numarray is a re-implementation of Numeric with certain improvements (but for our purposes\r\nboth Numeric and Numarray behave virtually identical).\r\n• Early in 2006 it was decided to merge the best aspects of Numeric and Numarray into the\r\nScientific Python (scipy) package and to provide (a hopefully “final”) array data type under\r\nthe module name “NumPy”.\r\nWe will use in the following materials the “NumPy” package as provided by (new) SciPy. If for\r\nsome reason this doesn’t work for you, chances are that your SciPy is too old. In that case, you will\r\nfind that either “Numeric” or “numarray” is installed and should provide nearly the same capabilities.1\r\n14.1.2 Arrays\r\nWe introduce a new data type (provided by NumPy) which is called “array”. An array appears to\r\nbe very similar to a list but an array can keep only elements of the same type (whereas a list can\r\nmix different kinds of objects). This means arrays are more efficient to store (because we don’t need\r\nto store the type for every element). It also makes arrays the data structure of choice for numerical\r\ncalculations where we often deal with vectors and matricies.\r\nVectors and matrices (and matrices with more than two indices) are all called “arrays” in NumPy.\r\n1\r\nIn this text, we usually import numpy under the name N like this: import numpy as N. If you don’t have numpy on\r\nyour machine, you can substitute this line by import Numeric as N or import numarray as N.\r\n119",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/6b120fa1-b4b6-44d7-a8b4-0fba7a9c7018.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e2de9c24e6d7e9e124387292de1f5dae8ee178c9e7c2a077aa6ba0a7868626b0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 355
      },
      {
        "segments": [
          {
            "segment_id": "ace1ccc1-afef-4cd5-bea4-3db8f85d4f56",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 120,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "120 CHAPTER 14. NUMERICAL PYTHON (NUMPY): ARRAYS\r\nVectors (1d-arrays)\r\nThe data structure we will need most often is a vector. Here are a few examples of how we can\r\ngenerate one:\r\n• Conversion of a list (or tuple) into an array using numpy.array:\r\n>>> import numpy as N\r\n>>> x = N . array ([0 , 0.5 , 1 , 1.5])\r\n>>> print ( x )\r\n[ 0. 0.5 1. 1.5]\r\n• Creation of a vector using “ArrayRANGE”:\r\n>>> x = N . arange (0 , 2 , 0.5)\r\n>>> print ( x )\r\n[ 0. 0.5 1. 1.5]\r\n• Creation of vector with zeros\r\n>>> x = N . zeros (4)\r\n>>> print ( x )\r\n[ 0. 0. 0. 0.]\r\nOnce the array is established, we can set and retrieve individual values. For example:\r\n>>> x = N . zeros (4)\r\n>>> x [0] = 3.4\r\n>>> x [2] = 4\r\n>>> print ( x )\r\n[ 3.4 0. 4. 0. ]\r\n>>> print ( x [0])\r\n3.4\r\n>>> print ( x [0: -1])\r\n[ 3.4 0. 4. ]\r\nNote that once we have a vector we can perform calculations on every element in the vector with\r\na single statement:\r\n>>> x = N . arange (0 , 2 , 0.5)\r\n>>> print ( x )\r\n[ 0. , 0.5 , 1. , 1.5]\r\n>>> print ( x + 10)\r\n[ 10. 10.5 11. 11.5]\r\n>>> print ( x ** 2)\r\n[ 0. 0.25 1. 2.25]\r\n>>> print ( N . sin ( x ))\r\n[ 0. 0.47942554 0.84147098 0.99749499]\r\nMatrices (2d-arrays)\r\nHere are two ways to create a 2d-array:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/ace1ccc1-afef-4cd5-bea4-3db8f85d4f56.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=16b82f8924a170b457520c752e9debdb8ab06dbb4148ef104aa040bd0266f441",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 272
      },
      {
        "segments": [
          {
            "segment_id": "5a05ebab-bee8-4f5f-8f65-e9f0469170a0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 121,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "14.1. NUMPY INTRODUCTION 121\r\n• By converting a list of lists (or tuples) into an array:\r\n>>> x = N . array ([[1 , 2 , 3] , [4 , 5 , 6]])\r\n>>> x\r\n[[1 2 3]\r\n[4 5 6]]\r\n• Using the zeros method to create a matrix with 5 rows and 4 columns\r\n>>> x = N . zeros ((5 , 4))\r\n>>> print x\r\n[[ 0. 0. 0. 0.]\r\n[ 0. 0. 0. 0.]\r\n[ 0. 0. 0. 0.]\r\n[ 0. 0. 0. 0.]\r\n[ 0. 0. 0. 0.]]\r\nThe “shape” of a matrix can be queried like this (here we have 2 rows and 3 columns):\r\n>>> x = N . array ([[1 , 2 , 3] , [4 , 5 , 6]])\r\n>>> print x\r\n[[1 2 3]\r\n[4 5 6]]\r\n>>> x . shape\r\n(2 , 3)\r\nIndividual elements can be accessed and set using this syntax:\r\n>>> x = N . array ([[1 , 2 , 3] , [4 , 5 , 6]])\r\n>>> x [0 , 0]\r\n1\r\n>>> x [0 , 1]\r\n2\r\n>>> x [0 , 2]\r\n3\r\n>>> x [1 , 0]\r\n4\r\n>>> x [: , 0]\r\narray ([1 , 4])\r\n>>> x [0 ,:]\r\narray ([1 , 2 , 3])\r\n14.1.3 Convert from array to list or tuple\r\nTo create an array back to a list or tuple, we can use the standard python functions list(s) and\r\ntuple(s) which take a sequence s as the input argument and return a list and tuple, respectively:\r\n>>> a = N . array ([1 , 4 , 10])\r\n>>> a\r\narray ([1 , 4 , 10])\r\n>>> list ( a )\r\n[1 , 4 , 10]",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/5a05ebab-bee8-4f5f-8f65-e9f0469170a0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3ee5650ae56387cd198e0b5a62ad3b949c83a57ca9d566e9c9f20ab4093f2145",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 287
      },
      {
        "segments": [
          {
            "segment_id": "f4aa7221-1af7-4147-a2a7-816431bc0b0b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 122,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "122 CHAPTER 14. NUMERICAL PYTHON (NUMPY): ARRAYS\r\n>>> tuple ( a )\r\n(1 , 4 , 10)\r\n14.1.4 Standard Linear Algebra operations\r\nMaxtrix multiplication\r\nTwo arrays can be multiplied in the usual linear-algebra way using numpy.matrixmultiply. Here is\r\nan example:\r\n>>> import numpy as N\r\n>>> import numpy . random\r\n>>> A = numpy . random . rand (5 , 5) # generates a random 5 by 5 matrix\r\n>>> x = numpy . random . rand (5) # generates a 5 - element vector\r\n>>> b = N . dot (A , x ) # multiply matrix A with vector x\r\nSolving systems of linear equations\r\nTo solve a system of equations Ax = b that is given in matrix form (i.e A is a matrix and x and b are\r\nvectors where A and b are known and we want to find the unknown vector x), we can use the linear\r\nalgebra package (linalg) of numpy:\r\n>>> import numpy . linalg as LA\r\n>>> x = LA . solve (A , b )\r\nComputing Eigenvectors and Eigenvalues\r\nHere is a small example that computes the [trivial] Eigenvectors and Eigenvalues (eig) of the unity\r\nmatrix (eye)):\r\n>>> import numpy\r\n>>> import numpy . linalg as LA\r\n>>> A = numpy . eye (3) # ’ eye ’->I - >1 ( ones on the diagonal )\r\n>>> print A\r\n[[1 0 0]\r\n[0 1 0]\r\n[0 0 1]]\r\n>>> evalues , evectors = LA . eig ( A )\r\n>>> print ( evalues )\r\n[ 1.+0. j 1.+0. j 1.+0. j ]\r\n>>> print ( evectors )\r\n[[ 1. 0. 0.]\r\n[ 0. 1. 0.]\r\n[ 0. 0. 1.]]\r\nNote that each of these commands provides its own documentation. For example, help(LA.eig)\r\nwill tell you all about the eigenvector and eigenvalue function (once you have imported numpy.linalg\r\nas LA).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/f4aa7221-1af7-4147-a2a7-816431bc0b0b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ce4f0e96c79e3938c52ef5c205f0980c3798d444e6448135caf23aca5816db2d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 309
      },
      {
        "segments": [
          {
            "segment_id": "f77e5fe3-db54-43ab-8363-81b893cc7bec",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 123,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "14.1. NUMPY INTRODUCTION 123\r\nCurve fitting of polynomials\r\nLet’s assume we have x-y data to which we like to fit a curve (to minimise the least square deviation\r\nof the fit from the data).\r\nNumpy provides the routine polyfit(x,y,n) (which is similar to Matlab’s polyfit function which\r\ntakes a list x of x-values for data points, a list y of y-values of the same data points and a desired\r\norder of the polynomial that will be determined to fit the data in the least-square sense as well as\r\npossible.\r\nimport numpy\r\n# demo curve fitting : xdata and ydata are input data\r\nxdata = numpy . array ([0.0 , 1.0 , 2.0 , 3.0 , 4.0 , 5.0])\r\nydata = numpy . array ([0.0 , 0.8 , 0.9 , 0.1 , -0.8 , -1.0])\r\n# now do fit for cubic ( order = 3) polynomial\r\nz = numpy . polyfit ( xdata , ydata , 3)\r\n# z is an array of coefficients , highest first , i . e .\r\n# x ^3 X ^2 X 0\r\n# z = array ([ 0.08703704 , -0.81349206 , 1.69312169 , -0.03968254])\r\n# It is convenient to use ‘ poly1d ‘ objects for dealing with polynomials :\r\np = numpy . poly1d ( z ) # creates a polynomial function p from coefficients\r\n# and p can be evaluated for all x then .\r\n# create plot\r\nxs = [0.1 * i for i in range (50)]\r\nys = [ p ( x ) for x in xs ] # evaluate p ( x ) for all x in list xs\r\nimport pylab\r\npylab . plot ( xdata , ydata , ’o ’ , label = ’ data ’)\r\npylab . plot ( xs , ys , label = ’ fitted curve ’)\r\npylab . ylabel ( ’y ’)\r\npylab . xlabel ( ’x ’)\r\npylab . savefig ( ’ polyfit . pdf ’)\r\npylab . show ()\r\nFigure 14.1 shows the fitted curve (solid line) together with the precise computed data points.\r\n14.1.5 More numpy examples. . .\r\n. . . can be found here: http://www.scipy.org/Numpy Example List\r\n14.1.6 Numpy for Matlab users\r\nThere is a dedicated webpage that explains Numpy from the perspective of a (experienced) Matlab\r\nuser at http://www.scipy.org/NumPy for Matlab Users.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/f77e5fe3-db54-43ab-8363-81b893cc7bec.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0939a070d8441d5ce8b4e1b6785002a731c3018f41995a648f21d3ff33e6a9b6",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fae5ba80-21a3-4a7e-a158-30550646d06d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 124,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "124 CHAPTER 14. NUMERICAL PYTHON (NUMPY): ARRAYS\r\n0 1 2 3 4 5\r\nx\r\n1.5\r\n1.0\r\n0.5\r\n0.0\r\n0.5\r\n1.0\r\ny\r\nFigure 14.1: Demonstration of least-squares curvefitting with numpy",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/fae5ba80-21a3-4a7e-a158-30550646d06d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5e38075046a8c999d295f3fec6748f4f23f46345706fd73fa2862a4b42872be4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 412
      },
      {
        "segments": [
          {
            "segment_id": "04120000-2cb7-4240-a9cd-df199c5362a3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 125,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 15\r\nVisualising Data\r\nThe purpose of scientific computation is insight not numbers: To understand the meaning of the\r\n(many) numbers we compute, we often need postprocessing, statistical analysis and graphical visuali\u0002sation of our data. The following sections describe\r\n• Matplotlib/Pylab — which allows us to generate high quality graphs of the type y = f(x) (and\r\na bit more)\r\n• Visual Python — which is a very handy tool to quickly generate animations of time dependent\r\nprocesses taking place in 3d space.\r\n15.1 Matplotlib (Pylab) – plotting y=f(x), (and a bit more)\r\nThe Python library Matplotlib is a python 2D plotting library which produces publication quality\r\nfigures in a variety of hardcopy formats and interactive environments. Matplotlib tries to make easy\r\nthings easy and hard things possible. You can generate plots, histograms, power spectra, bar charts,\r\nerrorcharts, scatterplots, etc, with just a few lines of code.\r\nFor more detailed information, check these links\r\n• A very nice introduction in the object oriented Matplotlib interface, and summary of all impor\u0002tant ways of changing style, figure size, linewidth, etc. This is a useful reference:\r\nhttp://nbviewer.ipython.org/urls/raw.github.com/jrjohansson/scientific-python-lectures/master/Lecture\r\n4-Matplotlib.ipynb\r\n• Matplotlib tutorial http://matplotlib.sourceforge.net/users/index.html\r\n• Matplotlib home page http://matplotlib.sourceforge.net\r\n• List of simple screenshot examples http://matplotlib.sourceforge.net/users/screenshots.html\r\n• Extended thumbnail gallery of examples http://matplotlib.sourceforge.net/gallery.html\r\n15.1.1 Matplotlib and Pylab\r\nMatplotlib as an object oriented plotting library. Pylab is an interface to the same set of functions\r\nthat imitates the (state-driven) Matlab plotting interface.\r\nPylab is slightly more convenient to use for easy plots, and Matplotlib gives far more detailed\r\ncontrol over how plots are created. If you use Matplotlib routinely to produce figures, you are well\r\nadvised to learn about the object oriented matplotlib interface (instead of the pylab interface).\r\nThis chapter focusses on the Pylab interface.\r\n125",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/04120000-2cb7-4240-a9cd-df199c5362a3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=460135ad750b8213fd267823763fe052e23de9a457ab81bd8f0d47e70fa63f20",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 291
      },
      {
        "segments": [
          {
            "segment_id": "efe85a9c-3948-4985-9af0-ad3b81524058",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 126,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "126 CHAPTER 15. VISUALISING DATA\r\nFigure 15.1: The output of pylab1.py.\r\nAn excellent introduction and overview of the Matplotlib plotting interface is available in\r\nhttp://nbviewer.ipython.org/urls/raw.github.com/jrjohansson/scientific-python-lectures/master/Lecture\u00024-Matplotlib.ipynb.\r\n15.1.2 First example\r\nThe recommended way of using Matplotlib in a simple example is shown here (let’s call this example\r\n1a, the output is shown in figure 15.1):\r\n# example 1 a\r\nimport numpy as np # get access to fast arrays\r\nimport matplotlib . pyplot as plt # the plotting functions\r\nx = np . arange ( -3.14 , 3.14 , 0.01) # create x - data\r\ny = np . sin ( x ) # compute y - data\r\nplt . plot (x , y ) # create plot\r\nplt . show () # show plot ( makes window pop up )\r\n15.1.3 How to import matplotlib, pylab, pyplot, numpy and all that\r\nThe submodule matplotlib.pyplot provides an object oriented interface to the plotting library.\r\nMany of the examples in the matplotlib documentation follow the import convention to import\r\nmatplotlib.pyplot as plt and numpy as np. It is of course entirely the user’s decision whether to\r\nimport the numpy library under the name np (as often done in matplotlib examples) or N as done in this\r\ntext (and in the early days when the predecessor of numpy was called “Numeric”) or any other name\r\nyou like. Similarly, it is a matter of taste whether the plotting submodule (matplotlib.pyplot) is",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/efe85a9c-3948-4985-9af0-ad3b81524058.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5be53780147ec6e46537a0d183124340ea820e653f30947437f9cc0fde5147d0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 236
      },
      {
        "segments": [
          {
            "segment_id": "6def5e88-dc6e-4925-8fe6-ad4143344885",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 127,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "15.1. MATPLOTLIB (PYLAB) – PLOTTING Y=F(X), (AND A BIT MORE) 127\r\nimported as plt as is done in the matplotlib documentation or plot (which could be argued is slightly\r\nclearer) etc.\r\nAs always a balance has to be struck between personal preferences and consistency with common\r\npractice in choosing these name. Consistency with common use is of course more important if the\r\ncode is likely to be used by others or published.\r\nPlotting nearly always needs arrays of numerical data and it is for this reason that the numpy\r\nmodule is used a lot: it provides fast and memory efficient array handling for Python (see section\r\n14.1).\r\nWe could thus also have written the example 1a above as in example 1b (which is identical in\r\nfunctionality to the example above and will create the plot shown in figure 15.1):\r\nimport pylab\r\nimport numpy as N\r\nx = N . arange ( -3.14 , 3.14 , 0.01)\r\ny = N . sin ( x )\r\npylab . plot (x , y )\r\npylab . show ()\r\nBecause the numpy.arange and numpy.sin objects have already been imported into the (conve\u0002nience) pylab namespace, we could also write it as example 1c:\r\n\"\"\" example 1 c \"\"\"\r\nimport pylab as p\r\nx = p . arange ( -3.14 , 3.14 , 0.01)\r\ny = p . sin ( x )\r\np . plot (x , y )\r\np . show ()\r\nIf we really want to cut down on characters to type, we could also important the whole functionality\r\nfrom the pylab convenience module, and rewrite the code as example 1d:\r\n\"\"\" example 1 d \"\"\"\r\nfrom pylab import * # not generally recommended\r\n# okay for interactive testing\r\nx = arange ( -3.14 , 3.14 , 0.01)\r\ny = sin ( x )\r\nplot (x , y )\r\nshow ()\r\nThis can be extremely convenient, but comes with a big health warning:\r\n• While using from pylab import * is acceptable at the command prompt to interactively create\r\nplots and analyse data, this should never be used in any plotting scripts.\r\n• The pylab toplevel provides over 800 different objects which are all imported into the global\r\nname space when running from pylab import *. This is not good practice, and could conflict\r\nwith other objects that exist already or are created later.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/6def5e88-dc6e-4925-8fe6-ad4143344885.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=980d8dbd79ef9bff1eca996d93d3af7b77c5985733531f1ef8a2c47e6161e2e0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 390
      },
      {
        "segments": [
          {
            "segment_id": "3f40a8d3-1649-43c0-b63d-9a65916c29b3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 128,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "128 CHAPTER 15. VISUALISING DATA\r\n• As a rule of thumb: do never use from somewhere import * in programs we save. This may\r\nbe okay at the command prompt.\r\nIn the following examples, we usually use the pylab interface to the plotting routines but this is\r\npurely a matter of taste and habit and by no means the only way (note that the Matplotlib authors\r\nrecommend the import style as in example 1a, see also this Matplot FAQ entry: Matplotlib, pylab,\r\nand pyplot: how are they related?)\r\n15.1.4 IPython’s inline mode\r\nIf you have the IPython qtconsole or notebook installed (see section 11.3.1), then we can use the\r\n%matplotlib inline magic command to make further plots appear within our console or notebook.\r\nTo force pop up windows instead, use %matplotlib qt.\r\nThere is also the %pylab magic, which will not only switch to inline plotting but also automatically\r\nexecute from pylab import * .\r\n15.1.5 Saving the figure to a file\r\nOnce you have created the figure (using the plot command) and added any labels, legends etc, you\r\nhave two options to save the plot.\r\n1. You can display the figure (using show) and interactively save it by clicking on the disk icon.\r\n2. You can (without displaying the figure) save it directly from your Python code. The command\r\nto use is savefig. The format is determined by the extension of the file name you provide. Here\r\nis an example (pylabsavefig.py) which saves the plot shown in Figure 15.1.\r\nimport pylab\r\nimport numpy as N\r\nx = N . arange ( -3.14 , 3.14 , 0.01)\r\ny = N . sin ( x )\r\npylab . plot (x , y , label = ’ sin ( x ) ’)\r\npylab . savefig ( ’ myplot . png ’) # saves png file\r\npylab . savefig ( ’ myplot . eps ’) # saves eps file\r\npylab . savefig ( ’ myplot . pdf ’) # saves pdf file\r\nA note on file formats: Choose the png file format if you plan to include your graph in a word\r\ndocument or on a webpage. Choose the eps or pdf file format if you plan to include the figure in a\r\nLATEXdocument – depending on whether you want to compile it using ‘latex (needs eps) or pdflatex\r\n(can use pdf [better] or png). If the version of MS Word (or other text processing software you use)\r\ncan handle pdf files, it is better to use pdf than png.\r\nBoth pdf and eps are vector file formats which means that one can zoom into the image without\r\nloosing quality (lines will still be sharp). File formats such as png (and jpg, gif, tif, bmp) save the\r\nimage in form of a bitmap (i.e. a matrix of colour values) and will appear blurry or pixelated when\r\nzooming in (or when printed in high resolution).\r\n15.1.6 Interactive mode\r\nMatplotlib can be run in two modes:\r\n• non-interactive (this is the default)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/3f40a8d3-1649-43c0-b63d-9a65916c29b3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3eeebe28e4b856181677a1ac98e5c9d5daee0048a36e5250778a6c0aaff6340d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 497
      },
      {
        "segments": [
          {
            "segment_id": "b3bc8145-f013-46d0-844b-44278c675e38",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 129,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "15.1. MATPLOTLIB (PYLAB) – PLOTTING Y=F(X), (AND A BIT MORE) 129\r\nFigure 15.2: The output of pylab2.py.\r\n• interactive.\r\nIn non-interactive mode, no plots will be displayed until the show() command has been issued. In\r\nthis mode, the show() command should be the last statement of your program.\r\nIn interactive mode, plots will be immediately displayed after the plot command has been issued.\r\nOne can switch the interactive mode on using pylab.ion() and off using pylab.ioff().\r\n15.1.7 Fine tuning your plot\r\nMatplotlib allows us to fine tune our plots in great detail. Here is an example (pylab2.py) producing\r\nfigure 15.2:\r\nimport pylab\r\nimport numpy as N\r\nx = N . arange ( -3.14 , 3.14 , 0.01)\r\ny1 = N . sin ( x )\r\ny2 = N . cos ( x )\r\npylab . figure ( figsize =(5 , 5))\r\npylab . plot (x , y1 , label = ’ sin ( x ) ’)\r\npylab . plot (x , y2 , label = ’ cos ( x ) ’)\r\npylab . legend ()\r\npylab . grid ()\r\npylab . xlabel ( ’x ’)\r\npylab . title ( ’ This is the title of the graph ’)\r\npylab . show () # necessary to display graph\r\nshowing some other useful commands:\r\n• figure(figsize=(5,5)) sets the figure size to 5inch by 5inch",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/b3bc8145-f013-46d0-844b-44278c675e38.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5ec0bf69007e593a70c08b2304c02e3ce1d638dde5912c158d78a95ed3f0d3db",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 222
      },
      {
        "segments": [
          {
            "segment_id": "d77c5a05-e14e-4795-bb49-78c2acfd8633",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 130,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "130 CHAPTER 15. VISUALISING DATA\r\n• plot(x,y1,label=’sin(x)’) The “label” keyword defines the name of this line. The line label\r\nwill be shown in the legend if the legend() command is used later.\r\n• Note that calling the plot command repeatedly, allows you to overlay a number of curves.\r\n• axis([-2,2,-1,1]) This fixes the displayed area to go from xmin=-2 to xmax=2 in x-direction,\r\nand from ymin=-1 to ymax=1 in y-direction\r\n• legend() This command will display a legend with the labels as defined in the plot command.\r\nTry help(\"pylab.legend\") to learn more about the placement of the legend.\r\n• grid() This command will display a grid on the backdrop.\r\n• xlabel(’...’) and ylabel(’...’) allow labelling the axes.\r\nNote further than you can chose different line styles, line thicknesses, symbols and colours for the data\r\nto be plotted. (The syntax is very similar to MATLAB.) For example:\r\n• plot(x,y,’og’) will plot circles (o) in green (g)\r\n• plot(x,y,’-r’) will plot a line (-) in red (r)\r\n• plot(x,y,’-b’,linewidth=2) will plot a blue line (b) with two two pixel thickness linewidth=2\r\nwhich is twice as wide as the default.\r\nThe full list of options can be found when typing help(\"pylab.plot\") at the Python prompt. Because\r\nthis documentation is so useful, we repeat parts of it here:\r\nplot (* args , ** kwargs )\r\nPlot lines and /or markers to the\r\n: class : ‘~ matplotlib . axes . Axes ‘. * args * is a variable length\r\nargument , allowing for multiple * x * , * y * pairs with an\r\noptional format string . For example , each of the following is\r\nlegal ::\r\nplot (x , y ) # plot x and y using default line style and color\r\nplot (x , y , ’ bo ’) # plot x and y using blue circle markers\r\nplot ( y ) # plot y using x as index array 0.. N -1\r\nplot (y , ’r + ’) # ditto , but with red plusses\r\nIf * x * and/or * y * is 2 - dimensional , then the corresponding columns\r\nwill be plotted .\r\nAn arbitrary number of * x * , * y * , * fmt * groups can be\r\nspecified , as in ::\r\na . plot ( x1 , y1 , ’g ^ ’ , x2 , y2 , ’g - ’)\r\nReturn value is a list of lines that were added .\r\nThe following format string characters are accepted to control\r\nthe line style or marker :\r\n================ ===============================\r\ncharacter description\r\n================ ===============================\r\n’ - ’ solid line style\r\n’ -- ’ dashed line style\r\n’ -. ’ dash - dot line style\r\n’: ’ dotted line style",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/d77c5a05-e14e-4795-bb49-78c2acfd8633.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3bcf028337f867dfcc1ef60a8912e0ab5aba3e77e6c97986d1d876798de55ffb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 455
      },
      {
        "segments": [
          {
            "segment_id": "b6252106-3afa-4a46-8311-5e541500e71f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 131,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "15.1. MATPLOTLIB (PYLAB) – PLOTTING Y=F(X), (AND A BIT MORE) 131\r\n’. ’ point marker\r\n’ , ’ pixel marker\r\n’o ’ circle marker\r\n’v ’ triangle_down marker\r\n’^ ’ triangle_up marker\r\n’ < ’ triangle_left marker\r\n’ > ’ triangle_right marker\r\n’1 ’ tri_down marker\r\n’2 ’ tri_up marker\r\n’3 ’ tri_left marker\r\n’4 ’ tri_right marker\r\n’s ’ square marker\r\n’p ’ pentagon marker\r\n’* ’ star marker\r\n’h ’ hexagon1 marker\r\n’H ’ hexagon2 marker\r\n’+ ’ plus marker\r\n’x ’ x marker\r\n’D ’ diamond marker\r\n’d ’ thin_diamond marker\r\n’| ’ vline marker\r\n’_ ’ hline marker\r\n================ ===============================\r\nThe following color abbreviations are supported :\r\n========== ========\r\ncharacter color\r\n========== ========\r\n’b ’ blue\r\n’g ’ green\r\n’r ’ red\r\n’c ’ cyan\r\n’m ’ magenta\r\n’y ’ yellow\r\n’k ’ black\r\n’w ’ white\r\n========== ========\r\nIn addition , you can specify colors in many weird and\r\nwonderful ways , including full names ( ‘ ‘ ’ green ’ ‘ ‘) , hex\r\nstrings ( ‘ ‘ ’ #008000 ’ ‘ ‘) , RGB or RGBA tuples ( ‘ ‘(0 ,1 ,0 ,1) ‘ ‘) or\r\ngrayscale intensities as a string ( ‘ ‘ ’ 0.8 ’ ‘ ‘). Of these , the\r\nstring specifications can be used in place of a ‘‘ fmt ‘ ‘ group ,\r\nbut the tuple forms can be used only as ‘‘ kwargs ‘ ‘.\r\nLine styles and colors are combined in a single format string , as in\r\n‘‘ ’ bo ’ ‘‘ for blue circles .\r\nThe * kwargs * can be used to set line properties (any property that has\r\na ‘‘ set_ * ‘ ‘ method ). You can use this to set a line label (for auto\r\nlegends ) , linewidth , anitialising , marker face color , etc . Here is an\r\nexample ::\r\nplot ([1 ,2 ,3] , [1 ,2 ,3] , ’go - ’ , label = ’ line 1 ’ , linewidth =2)\r\nplot ([1 ,2 ,3] , [1 ,4 ,9] , ’ rs ’ , label = ’ line 2 ’)\r\naxis ([0 , 4 , 0 , 10])\r\nlegend ()\r\nIf you make multiple lines with one plot command , the kwargs\r\napply to all those lines , e . g .::",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/b6252106-3afa-4a46-8311-5e541500e71f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=393717fb2a7d09c952beeeee51e3f7897a850c5322e520bb070944925b076c3e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 386
      },
      {
        "segments": [
          {
            "segment_id": "58d0f4bd-032a-4e10-b1df-9cae61a4b920",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 132,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "132 CHAPTER 15. VISUALISING DATA\r\nplot ( x1 , y1 , x2 , y2 , antialised = False )\r\nNeither line will be antialiased .\r\nYou do not need to use format strings , which are just\r\nabbreviations . All of the line properties can be controlled\r\nby keyword arguments . For example , you can set the color ,\r\nmarker , linestyle , and markercolor with ::\r\nplot (x , y , color = ’ green ’ , linestyle = ’ dashed ’ , marker = ’o ’ ,\r\nmarkerfacecolor = ’ blue ’ , markersize =12). See\r\n: class : ‘~ matplotlib . lines . Line2D ‘ for details .\r\nThe use of different line styles and thicknesses is particularly useful when colour cannot be used\r\nto distinguish lines (for example when graph will be used in document that is to be printed in black\r\nand white only).\r\n15.1.8 Plotting more than one curve\r\nThere are three different methods to display more than one curve.\r\nTwo (or more) curves in one graph\r\nBy calling the plot command repeatedly, more than one curve can be drawn in the same graph.\r\nExample:\r\nimport numpy as N\r\nt = N . arange (0 ,2* N . pi ,0.01)\r\nimport pylab\r\npylab . plot (t , N . sin ( t ) , label = ’ sin ( t ) ’)\r\npylab . plot (t , N . cos ( t ) , label = ’ cos ( t ) ’)\r\npylab . legend ()\r\npylab . show ()\r\nTwo (or more graphs) in one figure window\r\nThe pylab.subplot command allows to arrange several graphs within one figure window. The general\r\nsyntax is\r\nsubplot ( numRows , numCols , plotNum )\r\nFor example, to arrange 4 graphs in a 2-by-2 matrix, and to select the first graph for the next plot\r\ncommand, one can use:\r\nsubplot (2 , 2 , 1)\r\nHere is a complete example plotting the sine and cosine curves in two graphs that are aligned\r\nunderneath each other within the same window as shown in figure 15.3 (pylabsubplots.py):\r\nimport numpy as N\r\nt = N . arange (0 , 2 * N . pi , 0.01)\r\nimport pylab\r\npylab . subplot (2 , 1 , 1)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/58d0f4bd-032a-4e10-b1df-9cae61a4b920.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c3620f7db2e0787980fb66b5817f81f91609bdad21fa05bfa4f6bae4ca004ff7",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "8b83ccf6-c5a9-4d1e-8650-376bb7513173",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 133,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "15.1. MATPLOTLIB (PYLAB) – PLOTTING Y=F(X), (AND A BIT MORE) 133\r\nFigure 15.3: The output of pylabsubplots.py.\r\npylab . plot (t , N . sin ( t ))\r\npylab . xlabel ( ’t ’)\r\npylab . ylabel ( ’ sin ( t ) ’)\r\npylab . subplot (2 , 1 , 2)\r\npylab . plot (t , N . cos ( t ))\r\npylab . xlabel ( ’t ’)\r\npylab . ylabel ( ’ cos ( t ) ’)\r\npylab . show ()\r\nTwo (or more) figure windows\r\nimport pylab\r\npylab . figure (1)\r\npylab . plot ( range (10) , ’o ’)\r\npylab . figure (2)\r\npylab . plot ( range (100) , ’x ’)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/8b83ccf6-c5a9-4d1e-8650-376bb7513173.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=970e0d62fa559a76b8077138d81a811082a0764f31e03ba36c9b35bfd4324a82",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 493
      },
      {
        "segments": [
          {
            "segment_id": "06575cd5-eeba-4927-b6e6-3fcb94020d95",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 134,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "134 CHAPTER 15. VISUALISING DATA\r\n40 60 80 100 120 140 160 180\r\nSmarts\r\n0.000\r\n0.005\r\n0.010\r\n0.015\r\n0.020\r\n0.025\r\n0.030\r\nProbability\r\nFigure 15.4: A histogram with fitted curve created with Matplotlib.\r\npylab . show ()\r\nNote that you can use pylab.close() to close one, some or all figure windows (use help(\"pylab.close\")\r\nto learn more).\r\n15.1.9 Histograms\r\nThe program below demonstrates how to create histograms from stastical data in Matplotlib. The\r\nresulting plot is show in figure\r\n# modified version of\r\n# http :// matplotlib . sourceforge . net / plot_directive / mpl_examples /...\r\n# / pylab_examples / histogram_demo . py\r\nimport numpy as np\r\nimport matplotlib . mlab as mlab\r\nimport matplotlib . pyplot as plt\r\n# create data\r\nmu , sigma = 100 , 15\r\nx = mu + sigma * np . random . randn (10000)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/06575cd5-eeba-4927-b6e6-3fcb94020d95.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2044eafe48f07b2f3c0077d3f1a679e79dad8146ac931dcc399a7abd706ec28f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 139
      },
      {
        "segments": [
          {
            "segment_id": "ace8216d-0276-46c0-a850-27e08ea3de22",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 135,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "15.1. MATPLOTLIB (PYLAB) – PLOTTING Y=F(X), (AND A BIT MORE) 135\r\n# histogram of the data\r\nn , bins , patches = plt . hist (x , 50 , normed =1 ,\r\nfacecolor = ’ green ’ , alpha =0.75)\r\n# some finetuning of plot\r\nplt . xlabel ( ’ Smarts ’)\r\nplt . ylabel ( ’ Probability ’)\r\n# Can use Latex strings for labels and titles :\r\nplt . title ( r ’$ \\ mathrm { Histogram \\ of \\ IQ :}\\ \\ mu =100 ,\\ \\ sigma =15 $ ’)\r\nplt . axis ([40 , 160 , 0 , 0.03])\r\nplt . grid ( True )\r\n# add a ’ best fit ’ line\r\ny = mlab . normpdf ( bins , mu , sigma )\r\nl = plt . plot ( bins , y , ’r - - ’ , linewidth =1)\r\n# save to file\r\nplt . savefig ( ’ pylabhistogram . pdf ’)\r\n# then display\r\nplt . show ()\r\nDo not try to understand every single command in this file: some are rather specialised and have\r\nnot been covered in this text. The intention is to provide a few examples to show what can – in\r\nprinciple – be done with Matplotlib. If you need a plot like this, the expectation is that you will need\r\nto experiment and possibly learn a bit more about Matplotlib.\r\n15.1.10 Visualising matrix data\r\nThe program below demonstrates how to create a bitmap-plot of the entries of a matrix. The resulting\r\nplot is show in figure 15.5 and 15.6:\r\nimport numpy as np\r\nimport matplotlib . mlab as mlab # Matlab compatibility commands\r\nimport matplotlib . pyplot as plt\r\n# create matrix Z that contains some interesting data\r\ndelta = 0.1\r\nx = y = np . arange ( -3.0 , 3.0 , delta )\r\nX , Y = np . meshgrid (x , y )\r\nZ = mlab . bivariate_normal (X , Y , 3.0 , 1.0 , 0.0 , 0.0)\r\n# display the ’ raw ’ matrix data of Z in one figure\r\nplt . figure (1)\r\nplt . imshow (Z , interpolation = ’ nearest ’)\r\nplt . title ( \" imshow example 1 a : no interpolation \" )\r\nplt . savefig ( \" pylabimshow1a . pdf \" )\r\n# display the data interpolated in other figure\r\nplt . figure (2)\r\nim = plt . imshow (Z , interpolation = ’ bilinear ’)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/ace8216d-0276-46c0-a850-27e08ea3de22.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=653a567d4115f4a470149e06a515234dc6ca78bc7da594d0c28f7f642505fbba",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b852bb7b-0b21-4ecc-8de8-f0af8315c6bf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 136,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "136 CHAPTER 15. VISUALISING DATA\r\n0 10 20 30 40 50\r\n0\r\n10\r\n20\r\n30\r\n40\r\n50\r\nimshow example 1a: no interpolation\r\nFigure 15.5: The assymmetric Gaussian stored in a matrix, visualised with the imshow() command\r\nwithout interpolation between matrix elements.\r\n0 10 20 30 40 50\r\n0\r\n10\r\n20\r\n30\r\n40\r\n50\r\nimshow example 1b: with bi-linear interpolation\r\nFigure 15.6: The assymmetric Gaussian stored in a matrix, visualised with the imshow() command\r\nwith (bilinear) interpolation between matrix elements.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/b852bb7b-0b21-4ecc-8de8-f0af8315c6bf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ba586783fa33ded1cba6118ba3e3ebabe344b0a2d83a1a0d0b63949845637bc9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 489
      },
      {
        "segments": [
          {
            "segment_id": "05104a6f-c338-4646-95ed-33c793247ee8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 137,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "15.1. MATPLOTLIB (PYLAB) – PLOTTING Y=F(X), (AND A BIT MORE) 137\r\n0 50 100 150 200\r\n0\r\n50\r\n100\r\n150\r\n200\r\ncolourmap jet\r\n0 50 100 150 200\r\n0\r\n50\r\n100\r\n150\r\n200\r\ncolourmap jet_r\r\n0 50 100 150 200\r\n0\r\n50\r\n100\r\n150\r\n200\r\ncolourmap gray\r\n0 50 100 150 200\r\n0\r\n50\r\n100\r\n150\r\n200\r\ncolourmap hsv\r\n0 50 100 150 200\r\n0\r\n50\r\n100\r\n150\r\n200\r\ncolourmap gist_earth\r\n0 50 100 150 200\r\n0\r\n50\r\n100\r\n150\r\n200\r\ncolourmap jet\r\n(10 colours only)\r\nFigure 15.7: The assymmetric Gaussian stored in a matrix, visualised with the imshow() command\r\nusing different colourmaps.\r\nplt . title ( \" imshow example 1 b : with bi - linear interpolation \" )\r\nplt . savefig ( \" pylabimshow1b . pdf \" )\r\nplt . show ()\r\nTo use different colourmaps, we make use of the matplotlib.cm module (where cm stands for\r\nColour Map). The code below demonstrates how we can select colourmaps from the set of already\r\nprovided maps, and how we can modify them (here by reducing the number of colours in the map).\r\nThe resulting plots are shown in figure 15.7. The last example mimics the behaviour of the more\r\nsophisticated contour command that also comes with matplotlib.\r\nimport numpy as np\r\nimport matplotlib . mlab as mlab # Matlab compatibility commands\r\nimport matplotlib . pyplot as plt\r\nimport matplotlib . cm as cm # Colour map submodule\r\n# create matrix Z that contains some data interesting data\r\ndelta = 0.025\r\nx = y = np . arange ( -3.0 , 3.0 , delta )\r\nX , Y = np . meshgrid (x , y )",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/05104a6f-c338-4646-95ed-33c793247ee8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c127e06566cd8ea42b1413ebb1957f62c70849274bfd66b57e65b5140b051a22",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 276
      },
      {
        "segments": [
          {
            "segment_id": "f9fcf075-c198-476d-bc80-8344fb8a84b1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 138,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "138 CHAPTER 15. VISUALISING DATA\r\nZ = mlab . bivariate_normal (X , Y , 3.0 , 1.0 , 0.0 , 0.0)\r\nNx , Ny = 2 , 3\r\nplt . subplot ( Nx , Ny , 1) # next plot will be shown in\r\n# first subplot in Nx x Ny\r\n# matrix of subplots\r\nplt . imshow (Z , cmap = cm . jet ) # default colourmap ’ jet ’\r\nplt . title ( \" colourmap jet \" )\r\nplt . subplot ( Nx , Ny , 2) # next plot for second subplot\r\nplt . imshow (Z , cmap = cm . jet_r ) # reverse colours in jet\r\nplt . title ( \" colourmap jet_r \" )\r\nplt . subplot ( Nx , Ny , 3)\r\nplt . imshow (Z , cmap = cm . gray )\r\nplt . title ( \" colourmap gray \" )\r\nplt . subplot ( Nx , Ny , 4)\r\nplt . imshow (Z , cmap = cm . hsv )\r\nplt . title ( \" colourmap hsv \" )\r\nplt . subplot ( Nx , Ny , 5)\r\nplt . imshow (Z , cmap = cm . gist_earth )\r\nplt . title ( \" colourmap gist_earth \" )\r\nplt . subplot ( Nx , Ny , 6)\r\n# make isolines by reducing number of colours to 10\r\nmycmap = cm . get_cmap ( ’ jet ’ , 10) # 10 discrete colors\r\nplt . imshow (Z , cmap = mycmap )\r\nplt . title ( \" colourmap jet \\ n (10 colours only ) \" )\r\nplt . savefig ( \" pylabimshowcm . pdf \" )\r\nplt . show ()\r\n15.1.11 Plots of z = f(x, y) and other features of Matplotlib\r\nMatplotlib has a large number of features and can create all the standard (1d and 2d) plots such as\r\nhistograms, pie charts, scatter plots, 2d-intensity plots (i.e. z = f(x, y)) and contour lines) and much\r\nmore. Figure 15.8 shows such an example (the contour demo.py program is a standard example of\r\nthe pylab package). This link provides source code to produce this kind of plot: contour demo.py\r\nOther examples are\r\n• http://matplotlib.sourceforge.net/users/screenshots.html\r\n• http://matplotlib.sourceforge.net/gallery.html\r\n• Recently, creation of 3d-plots has been added to pylab: http://matplotlib.sourceforge.net/examples/mplot\r\nexamples",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/f9fcf075-c198-476d-bc80-8344fb8a84b1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e0ffe3d92adf8861fee9b3b1283d85937f0ba682acb8c740c90b6fc2f4f26bad",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9d74af50-7999-4394-aa90-a0f52adfa01c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 139,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "15.1. MATPLOTLIB (PYLAB) – PLOTTING Y=F(X), (AND A BIT MORE) 139\r\nFigure 15.8: The output of contour demo.py.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/9d74af50-7999-4394-aa90-a0f52adfa01c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e15926011aef29e7c2544ede69e3a430d882d14d02fa26a6fd060b88bb1f69e3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 397
      },
      {
        "segments": [
          {
            "segment_id": "86ede9dc-72e6-4280-aa9e-bcaac2308f67",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 140,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "140 CHAPTER 15. VISUALISING DATA\r\n15.2 Visual Python\r\nVisual Python is a Python module that makes it fairly easy to create and animate three-dimensional\r\nscenes.\r\nFurther information:\r\n• The Visual Python home page http://vpython.org\r\n• The Visual Python documentation (explaining all objects with all their parameters)\r\nhttp://vpython.org/webdoc/visual/index.html\r\nShort videos introducing Visual Python:\r\n• Shawn Weatherford, Jeff Polak (students of Ruth Chabay): http://www.youtube.com/vpythonvideos\r\n• Eric Thompson: http://showmedo.com/videotutorials/series?name=pythonThompsonVPythonSeries\r\n15.2.1 Basics, rotating and zooming\r\nHere is an example showing how to create a red and a blue sphere at two different positions together\r\nwith a flat box (vpythondemo1.py):\r\nimport visual\r\nsphere1 = visual . sphere ( pos =[0 , 0 , 0] , color = visual . color . blue )\r\nsphere2 = visual . sphere ( pos =[5 , 0 , 0] , color = visual . color . red , radius =2)\r\nbase = visual . box ( pos =(0 , -2 , 0) , length =8 , height =0.1 , width =10)\r\nOnce you have created such a visual python scene, you can\r\n• rotate the scene by pressing the right mouse button and moving the mouse\r\n• zoom in and out by pressing the middle mouse button (this could be the wheel) and moving the\r\nmouse up and down. (On some (Windows?) installations, one has to press the left and the right\r\nmouse button simultaneously and then move the move the mouse up and down to zoom.)\r\n15.2.2 Setting the frame rate for animations\r\nA particular strength of Visual Python is its ability to display time-dependent data:\r\n• A very useful command is the rate() command which ensures that a loop is only executed\r\nat a certain frame rate. Here is an example printing exactly two “Hello World”s per second\r\n(vpythondemo2.py):\r\nFigure 15.9: Snapshot of vpythondemo1.py.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/86ede9dc-72e6-4280-aa9e-bcaac2308f67.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=485828a29de5e3781e61326e1ea9d60bf79b97ffc4ec99d62b87af769da83c72",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "8d9aa6f2-47dc-4728-804d-9dbeddb49f13",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 141,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "15.2. VISUAL PYTHON 141\r\nFigure 15.10: Snapshot of vpythondemo3.py.\r\nimport visual\r\nfor i in range (10):\r\nvisual . rate (2)\r\nprint ( \" Hello World (0.5 seconds per line ) \" )\r\n• All Visual Python objects (such as the spheres and the box in the example above) have a\r\n.pos attribute which contains the position (of the centre of the object [sphere,box] or one end\r\nof the object [cylinder,helix]). Here is an example showing a sphere moving up and down\r\n(vpythondemo3.py):\r\nimport visual , math\r\nball = visual . sphere ()\r\nbox = visual . box ( pos =[0 , -1 , 0] , width =4 , length =4 , height =0.5)\r\n# tell visual not to automatically scale the image\r\nvisual . scene . autoscale = False\r\nfor i in range (1000):\r\nt = i * 0.1\r\ny = math . sin ( t )\r\n# update the ball ’s position\r\nball . pos = [0 , y , 0]\r\n# ensure we have only 24 frames per second\r\nvisual . rate (24)\r\n15.2.3 Tracking trajectories\r\nYou can track the trajectory of an object using a “curve”. The basic idea is to append positions to\r\nthat curve object as demonstrated in this example (vpythondemo4.py):",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/8d9aa6f2-47dc-4728-804d-9dbeddb49f13.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4d8cf41083de7e4f270af72b0d6b5d85186f57877b54f35cb3129fbcae4d00a7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 503
      },
      {
        "segments": [
          {
            "segment_id": "9280fc18-718d-48dc-b15e-19a8e0d2aa76",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 142,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "142 CHAPTER 15. VISUALISING DATA\r\nFigure 15.11: Snapshot of vpythondemo4.py.\r\nimport visual , math\r\nball = visual . sphere ()\r\nbox = visual . box ( pos =[0 , -1 , 0] , width =4 , length =4 , height =0.5)\r\ntrace = visual . curve ( radius =0.2 , color = visual . color . green )\r\nfor i in range (1000):\r\nt = i * 0.1\r\ny = math . sin ( t )\r\n# update the ball ’s position\r\nball . pos = [t , y , 0]\r\ntrace . append ( ball . pos )\r\n# ensure we have only 24 frames per second\r\nvisual . rate (24)\r\nAs with most visual Python objects, you can specify the colour of the curve (also per appended\r\nelement!) and the radius.\r\n15.2.4 Connecting objects (Cylinders, springs, . . . )\r\nCylinders and helices can be used to “connect” two objects. In addition to the pos attribute (which\r\nstores the position of one end of the object), there is also an axis attribute which stores the vector\r\npointing from pos to the other end of the object. Here is an example showing this for a cylinder:\r\n(vpythondemo5py):\r\nimport visual , math\r\nball1 = visual . sphere ( pos =(0 , 0 , 0) , radius =2)\r\nball2 = visual . sphere ( pos =(5 , 0 , 0) , radius =2)\r\nconnection = visual . cylinder ( pos = ball1 . pos , \\\r\naxis = ball2 . pos - ball1 . pos )\r\nfor t in range (100):",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/9280fc18-718d-48dc-b15e-19a8e0d2aa76.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=21c62890100b70f09a248b30b95d3d6e19df27b01ac0bc01361023002a154682",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "7d567c9a-4f27-48ba-8f0c-29bbf91fad08",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 143,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "15.2. VISUAL PYTHON 143\r\nFigure 15.12: Snapshot of vpythondemo3.py in 3d mode (’redcyan’). With red/cyan glasses, this\r\nappears as a 3d image (with spatial depth).\r\n# move ball2\r\nball2 . pos = ( -t , math . sin ( t ) , math . cos ( t ))\r\n# keep cylinder connection between ball1 and ball2\r\nconnection . axis = ball2 . pos - ball1 . pos\r\nvisual . rate (24)\r\n15.2.5 3d vision\r\nIf you have access to “anaglyphic” (i.e. colored) glasses (best red-cyan but red-green or red-blue works\r\nas well), then you can switch visual python into this stereo mode by adding these two lines to the\r\nbeginning of your program:\r\nvisual . scene . stereo = ’ redcyan ’\r\nvisual . scene . stereodepth =1\r\nNote the effect of the stereodepth parameter:\r\n• stereodepth=0: 3d scene “inside” the screen (default)\r\n• stereodepth=1: 3d scene at screen surface (this often looks best)\r\n• stereodepth=2: 3d scene sticking out of the screen",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/7d567c9a-4f27-48ba-8f0c-29bbf91fad08.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3b47a9d7835e981d0282a599dc5ea66cae056de991371a773d9b7704aaada19c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 423
      },
      {
        "segments": [
          {
            "segment_id": "97458867-dda2-4f2c-bdbe-e26c56cc6893",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 144,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "144 CHAPTER 15. VISUALISING DATA\r\n15.3 Visualising higher dimensional data\r\nOften, we need to understand data defined at 3d positions in space. The data itself is often a scalar\r\nfield (such as temperature) or a 3d vector (such as velocity or magnetic field), or occasionally a tensor.\r\nFor example for a 3d-vector field f defined in 3d-space ( ~f(~x) where ~x ∈ IR3 and ~f(~x) ∈ IR3) we could\r\ndraw a 3d-arrow at every (grid) point in space. It is common for these data sets to be time dependent.\r\nThe probably most commonly used library in Science and Engineering to visualise such data sets\r\nis probably VTK, the Visualisation ToolKit (http://vtk.org). This is a substantial C++ library with\r\ninterfaces to high level languages, including Python.\r\nOne can either call these routines directly from Python code, or write the data to disk in a format\r\nthat the VTK library can read (so called vtk data files), and then use stand-alone programme such\r\nas Mayavi, ParaView and VisIt to read these data files and manipulate them (ofter with a GUI). All\r\nthree of these are using the VTK library internally, and can read vtk data files.\r\nThese package is very well suited to visualise static and timedependent 2d and 3d-fields (scalar,\r\nvector and tensor fields). Two examples are shown below.\r\nThey can be used as a stand-alone executables with a GUI to visualise VTK files. It can also be\r\nscripted from a Python program, or used interactively from a Python session.\r\n15.3.1 Mayavi, Paraview, Visit\r\n• Mayavi Home page http://code.enthought.com/projects/mayavi/\r\n• Paraview Home page http://paraview.org\r\n• VisIt Home page https://wci.llnl.gov/simulation/computer-codes/visit/\r\nTwo examples from MayaVi visualisations.\r\n15.3.2 Writing vtk files from Python (pyvtk)\r\nA small but powerful Python library is pyvtk available at https://code.google.com/p/pyvtk/. This\r\nallows to create vtk files from Python data structures very easily.\r\nGiven a finite element mesh or a finite difference data set in Python, one can use pyvtk to write\r\nsuch data into files, and then use one of the visualisation applications listed above to load the vtk files\r\nand to display and investigate them.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/97458867-dda2-4f2c-bdbe-e26c56cc6893.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5b7ebfc2cbfef6427ba53104abb27912d9434401eddc955451660f17c999605f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 347
      },
      {
        "segments": [
          {
            "segment_id": "bfd93594-3ed1-43a0-83d8-ee9b1d5017cc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 145,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 16\r\nNumerical Methods using Python (scipy)\r\n16.1 Overview\r\nThe core Python language (including the standard libraries) provide enough functionality to carry\r\nout computational research tasks. However, there are dedicated (third-party) Python libraries that\r\nprovide extended functionality which\r\n• provide numerical tools for frequently occurring tasks\r\n• which are convenient to use\r\n• and are more efficient in terms of CPU time and memory requirements than using the code\r\nPython functionality alone.\r\nWe list three such modules in particular:\r\n• The numpy module provides a data type specialised for “number crunching” of vectors and\r\nmatrices (this is the array type provided by “numpy” as introduced in section 14.1), and linear\r\nalgebra tools.\r\n• The matplotlib package (also knows as pylab) provides plotting and visualisation capabilities\r\n(see section 15.1) and the\r\n• scipy package (SCIentific PYthon) which provides a multitude of numerical algorithms and\r\nwhich is introduced in this chapter.\r\nMany of the numerical algorithms available through scipy and numpy are provided by established\r\ncompiled libraries which are often written in Fortran or C. They will thus execute much faster than\r\npure Python code (which is interpreted). As a rule of thumb, we expect compiled code to be two\r\norders of magnitude faster than pure Python code.\r\nYou can use the help function for each numerical method to find out more about the source of the\r\nimplementation.\r\n16.2 SciPy\r\nScipy is built on numpy. All functionality from numpy seems to be available in scipy as well. For\r\nexample, instead of\r\nimport numpy\r\nx = numpy . arange (0 , 10 , 0.1)\r\ny = numpy . sin ( x )\r\n145",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/bfd93594-3ed1-43a0-83d8-ee9b1d5017cc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e9b05746a107afd7ef5b04037b49bd122b39f690a1614f1ff3549c28ac71c122",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "69b81564-1049-4866-af5b-69957f038171",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 146,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "146 CHAPTER 16. NUMERICAL METHODS USING PYTHON (SCIPY)\r\nwe can therefor also use\r\nimport scipy as s\r\nx = s . arange (0 , 10 , 0.1)\r\ny = s . sin ( x )\r\nFirst we need to import scipy:\r\n>>> import scipy\r\nThe scipy package provides information about its own structure when we use the help command:\r\n>>> help ( scipy )\r\nWe only show a part of the output of this command:\r\nstats --- Statistical Functions [*]\r\nsparse --- Sparse matrix [*]\r\nlib --- Python wrappers to external libraries [*]\r\nlinalg --- Linear algebra routines [*]\r\nsignal --- Signal Processing Tools [*]\r\nmisc --- Various utilities that don ’t have another home .\r\ninterpolate --- Interpolation Tools [*]\r\noptimize --- Optimization Tools [*]\r\ncluster --- Vector Quantization / Kmeans [*]\r\nfftpack --- Discrete Fourier Transform algorithms [*]\r\nio --- Data input and output [*]\r\nintegrate --- Integration routines [*]\r\nlib . lapack --- Wrappers to LAPACK library [*]\r\nspecial --- Special Functions [*]\r\nlib . blas --- Wrappers to BLAS library [*]\r\n[*] - using a package requires explicit import ( see pkgload )\r\nIf we are looking for an algorithm to integrate a function, we might explore the integrate package:\r\n>>> import scipy . integrate\r\n>>> help ( scipy . integrate )\r\nThe following sections show examples which demonstrate how to employ the algorithms provided by\r\nscipy.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/69b81564-1049-4866-af5b-69957f038171.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bffff6693e782f004a0947d80ef4ed0da39dc1e0f73ccc24761193e35b451e32",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 501
      },
      {
        "segments": [
          {
            "segment_id": "cff0f315-8d57-41c4-9241-1f048b236ad3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 147,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "16.3. NUMERICAL INTEGRATION 147\r\n16.3 Numerical integration\r\nScientific Python provides a number of integration routines. A general purpose tool to solve integrals\r\nI of the kind\r\nI =\r\nZ b\r\na\r\nf(x)dx\r\nis provided by the quad() function of the scipy.integrate module.\r\nIt takes as input arguments the function f(x) to be integrated (the “integrand”), and the lower\r\nand upper limits a and b. It returns two values (in a tuple): the first one is the computed results and\r\nthe second one is an estimation of the numerical error of that result.\r\nHere is an example:\r\nfrom math import cos , exp , pi\r\nfrom scipy . integrate import quad\r\n# function we want to integrate\r\ndef f ( x ):\r\nreturn exp ( math . cos ( -2 * x * pi )) + 3.2\r\n# call quad to integrate f from -2 to 2\r\nres , err = quad (f , -2 , 2)\r\nprint ( \" The numerical result is {: f } (+ -{: g }) \"\r\n. format ( res , err ))\r\nwhich produces this output:\r\nThe numerical result is 17.864264 (+ -1.55117 e -11)\r\nNote that quad() takes optional parameters epsabs and epsrel to increase or decrease the ac\u0002curacy of its computation. (Use help(quad) to learn more.) The default values are epsabs=1.5e-8\r\nand epsrel=1.5e-8. For the next exercise, the default values are sufficient.\r\n16.3.1 Exercise: integrate a function\r\n1. Using scipy’s quad function, write a program that solves the following integral numerically:\r\nI =\r\nR 1\r\n0\r\ncos(2πx)dx.\r\n2. Find the analytical integral and compare it with the numerical solution.\r\n3. Why is it important to have an estimate of the accuracy (or the error) of the numerical integral?\r\n16.3.2 Exercise: plot before you integrate\r\nIt is good practice to plot the integrand function to check whether it is “well behaved” before you\r\nattempt to integrate. Singularities (i.e. x values where the f(x) tends towards minus or plus infinity)\r\nor other irregular behaviour (such as f(x) = sin( 1\r\nx\r\n) close to x = 0 are difficult to handle numerically.\r\n1. Write a function with name plotquad which takes the same arguments as the quad command\r\n(i.e. f, a and b) and which (i) creates a plot of the integrand f(x) and (ii) computes the integral\r\nnumerically using the quad function. The return values should be as for the quad function.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/cff0f315-8d57-41c4-9241-1f048b236ad3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=790447c930970b0b6ccaa0b28f2d8eafcce0422dd85698d3c8f999a04c2ebcde",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 399
      },
      {
        "segments": [
          {
            "segment_id": "e998959a-e83d-409c-b567-36f7c720bd39",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 148,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "148 CHAPTER 16. NUMERICAL METHODS USING PYTHON (SCIPY)\r\n16.4 Solving ordinary differential equations\r\nTo solve an ordinary differential equation of the type\r\ndy\r\ndt\r\n(t) = f(y, t)\r\nwith a given y(t0) = y0 we can use scipy’s odeint function. Here is a (self explaining) example\r\nprogram (useodeint.py) to find y(t) for t ∈ [0, 2] given this differential equation:\r\ndy\r\ndt\r\n(t) = −2yt with y(0) = 1.\r\nfrom scipy . integrate import odeint\r\nimport numpy as N\r\ndef f (y , t ):\r\n\"\"\" this is the rhs of the ODE to integrate , i . e . dy / dt = f (y , t ) \"\"\"\r\nreturn -2 * y * t\r\ny0 = 1 # initial value\r\na = 0 # integration limits for t\r\nb = 2\r\nt = N . arange (a , b , 0.01) # values of t for\r\n# which we require\r\n# the solution y ( t )\r\ny = odeint (f , y0 , t ) # actual computation of y ( t )\r\nimport pylab # plotting of results\r\npylab . plot (t , y )\r\npylab . xlabel ( ’t ’ ); pylab . ylabel ( ’y ( t ) ’)\r\npylab . show ()\r\nwhich produces the graph shown in figure 16.1.\r\nThe odeint command takes a number of optional parameters to change the default error tolerance\r\nof the integration (and to trigger the production of extra debugging output). Use the help command\r\nto explore these:\r\n>>> help ( scipy . integrate . odeint )\r\n16.4.1 Exercise: using odeint\r\n1. Open a new file with name testodeint.py file in the IDLE editor.\r\n2. Write a program that computes the solution y(t) of this ODE using the odeint algorithm:\r\ndy\r\ndt\r\n= − exp(−t)(10 sin(10t) + cos(10t)) (16.1)\r\nfrom t = 0 to t = 10. The initial value is y(0) = 1.\r\n3. You should display the solution graphically at points t = 0, t = 0.01, t = 0.02, . . . , t = 9.99, t =\r\n10.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/e998959a-e83d-409c-b567-36f7c720bd39.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3f68b4d56314690e4344d03b2b7f7197c460ef3930a4e872e26c6e73f688ff1c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b9bd90ac-b9cf-451a-a54f-2bb52ce768ca",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 149,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "16.4. SOLVING ORDINARY DIFFERENTIAL EQUATIONS 149\r\nFigure 16.1: The output of useodeint.py.\r\nHint: a part of the solution y(t) is shown in the figure below.\r\n8 8.5 9 9.5 10\r\nt\r\n-4e-4\r\n-3e-4\r\n-2e-4\r\n-1e-4\r\n0\r\n1e-4\r\n2e-4\r\n3e-4\r\n4e-4\r\ny(t)\r\nodeint’s approximation",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/b9bd90ac-b9cf-451a-a54f-2bb52ce768ca.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4a2693fba6de305b3c023e8155fc9a1a83f6f9d86966826bdfb1bd6ee2177cdc",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 388
      },
      {
        "segments": [
          {
            "segment_id": "9b13419d-66be-4a2e-876c-c2276b4b3ff8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 150,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "150 CHAPTER 16. NUMERICAL METHODS USING PYTHON (SCIPY)\r\n16.5 Root finding\r\nIf you try to find a x such that\r\nf(x) = 0,\r\nthen this is called root finding. Note that problems like g(x) = h(x) fall in this category as you can\r\nrewrite them as f(x) = g(x) − h(x) = 0.\r\nA number of root finding tools are available in scipy’s optimize module.\r\n16.5.1 Root finding using the bisection method\r\nFirst we introduce the bisect algorithm which is (i) robust and (ii) slow but conceptually very simple.\r\nSuppose we need to compute the roots of f(x) = x\r\n3 − 2x2\r\n. This function has a (double) root at\r\nx = 0 (this is trivial to see) and another root which is located between x = 1.5 (where f(1.5) = −1.125)\r\nand x = 3 (where f(3) = 9). It is pretty straightforward to see that this other root is located at x = 2.\r\nHere is a program that determines this root numerically:\r\nfrom scipy . optimize import bisect\r\ndef f ( x ):\r\n\"\"\" returns f ( x )= x ^3 -2 x ^2. Has roots at\r\nx =0 ( double root ) and x =2 \"\"\"\r\nreturn x ** 3 - 2 * x ** 2\r\n# main program starts here\r\nx = bisect (f , 1.5 , 3 , xtol =1 e -6)\r\nprint \" The root x is approximately x =%14.12 g ,\\ n \" \\\r\n\" the error is less than 1e -6. \" % ( x )\r\nprint \" The exact error is % g . \" % (2 - x )\r\nThis produces the following output:\r\nThe root x is approximately x = 2.00000023842 ,\r\nthe error is less than 1e -6.\r\nThe exact error is -2.38419 e -07.\r\nThe bisect() method takes three compulsory arguments: (i) the function f(x), (ii) a lower limit\r\na (for which we have chosen 1.5 in our example) and (ii) an upper limit b (for which we have chosen\r\n3). The optional parameter xtol determines the maximum error of the method.\r\nOne of the requirements of the bisection method is that the interval [a, b] has to be chosen such\r\nthat the function is either positive at a and negative at b, or that the function is negative at a and\r\npostive at b. In other words: a and b have to enclose a root.\r\n16.5.2 Exercise: root finding using the bisect method\r\n1. Write a program with name sqrttwo.py to determine an approximation of √2 by finding a\r\nroot x of the function f(x) = 2 − x\r\n2 using the bisection algorithm. Choose a tolerance for the\r\napproximation of the root of 10−8\r\n.\r\n2. Document your choice of the initial bracket [a, b] for the root: which values have you chosen for\r\na and for b and why?\r\n3. Study the results:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/9b13419d-66be-4a2e-876c-c2276b4b3ff8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=543f2babb7c69b65f5904da8444740e5b1f2c626cceb7f63695aab7171b6152e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 481
      },
      {
        "segments": [
          {
            "segment_id": "caffe338-3a8e-430a-8cb5-4277610fb6ef",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 151,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "16.6. INTERPOLATION 151\r\n• Which value for the root x does the bisection algorithm return?\r\n• Compute the value of √\r\n2 using math.sqrt(2) and compare this with the approximation\r\nof the root. How big is the absolute error of x? How does this compare with xtol?\r\n16.5.3 Root finding using the fsolve funcion\r\nA (often) better (in the sense of “more efficient”) algorithm than the bisection algorithm is imple\u0002mented in the general purpose fsolve() function for root finding of (multidimensional) functions.\r\nThis algorithm needs only one starting point close to the suspected location of the root (but is not\r\ngaranteed to converge).\r\nHere is an example:\r\nfrom scipy . optimize import fsolve\r\ndef f ( x ):\r\nreturn x ** 3 - 2 * x ** 2\r\nx = fsolve (f , 3) # one root is at x =2.0\r\nprint \" The root x is approximately x =%21.19 g \" % x\r\nprint \" The exact error is % g . \" % (2 - x )\r\nWhich produces this output:\r\nThe root x is approximately x = 2.000000000000006661\r\nThe exact error is -6.66134 e -15.\r\nThe return value1 of fsolve is a numpy array of length n for a root finding problem with n\r\nvariables. In the example above, we have n = 1.\r\n16.6 Interpolation\r\nGiven a set of N points (xi, yi) with i = 1, 2, . . . N, we sometimes need a function ˆf(x) which returns\r\nyi = f(xi) where x == xi, and which in addition provides some interpolation of the data (xi, yi) for\r\nall x.\r\nThe function y0 = scipy.interpolate.interp1d(x,y,kind=’nearest’) does this interpolation\r\nbased on splines of varying order. Note that the function interp1d returns a function y0 which will\r\nthen interpolate the x-y data for any given x when called as y0(x).\r\nThe code below demonstrates this, and we show the different interpolation kinds in figure 16.3.\r\nimport numpy as np\r\nimport scipy . interpolate\r\nimport pylab\r\ndef create_data ( n ):\r\n\"\"\" Given an integer n , returns n data points\r\nx and values y as a numpy . array . \"\"\"\r\nxmax = 5.\r\nx = np . linspace (0 , xmax , n )\r\ny = - x **2\r\n1Historical note: this has changed from scipy version 0.7 to 0.8. Before 0.8, the return value was a float if a one\u0002dimensional problem was to solve.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/caffe338-3a8e-430a-8cb5-4277610fb6ef.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e3e80d218a35ec59c04c742d6a0094c8a74e75743ddb9ecb87e13c3dcf95f4c0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 400
      },
      {
        "segments": [
          {
            "segment_id": "995f65d2-d998-4848-8932-9116a4947789",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 152,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "152 CHAPTER 16. NUMERICAL METHODS USING PYTHON (SCIPY)\r\n# make x - data somewhat irregular\r\ny += 1.5 * np . random . normal ( size =len( x ))\r\nreturn x , y\r\n# main program\r\nn = 10\r\nx , y = create_data ( n )\r\n# use finer and regular mesh for plot\r\nxfine = np . linspace (0.1 , 4.9 , n * 100)\r\n# interpolate with piecewise constant function ( p =0)\r\ny0 = scipy . interpolate . interp1d (x , y , kind = ’ nearest ’)\r\n# interpolate with piecewise linear func ( p =1)\r\ny1 = scipy . interpolate . interp1d (x , y , kind = ’ linear ’)\r\n# interpolate with piecewise constant func ( p =2)\r\ny2 = scipy . interpolate . interp1d (x , y , kind = ’ quadratic ’)\r\npylab . plot (x , y , ’o ’ , label = ’ data point ’)\r\npylab . plot ( xfine , y0 ( xfine ) , label = ’ nearest ’)\r\npylab . plot ( xfine , y1 ( xfine ) , label = ’ linear ’)\r\npylab . plot ( xfine , y2 ( xfine ) , label = ’ cubic ’)\r\npylab . legend ()\r\npylab . xlabel ( ’x ’)\r\npylab . savefig ( ’ interpolate . pdf ’)\r\npylab . show ()\r\n16.7 Curve fitting\r\nWe have already seen in Sect. 16.7 that we can fit polynomial functions through a data set using the\r\nnumpy.polyfit function. Here, we introduce a more generic curve fitting algorithm.\r\nScipy provides a somewhat generic function (based on the Levenburg-Marquardt algorithm )through\r\nscipy.optimize.curve fit to fit a given (Python) function to a given data set. The assumption is\r\nthat we have been given a set of data with points x1, x2, . . . xN and with corresponding function values\r\nyi and a dependence of yi on xi such that yi = f(xi, ~p). We want to determine the parameter vector\r\n~p = (p1, p2, . . . , pk) so that r, the sum of the residuals, is as small as possible:\r\nr =\r\nX\r\nN\r\ni=1\r\n(yi − f(xi, ~p))2. (16.2)\r\nCurve fitting is of particular use if the data is noisy: for a given xi and yi = f(xi, ~p) we have a\r\n(unknown) error term \u000fi so that yi = f(xi, ~p) + \u000fi.\r\nWe use the following example to clarify this:\r\nf(x, ~p) = a exp(−bx) + c, i.e. ~p = a, b, c. (16.3)\r\nimport numpy as np\r\nfrom scipy . optimize import curve_fit",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/995f65d2-d998-4848-8932-9116a4947789.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=da9fd84f3f7250ff7fd474a88ce04bfebd6961a2b5f4b62da0d3f0df10baf0a1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9fcb90d0-99c6-4246-ac90-e3beaf38c57a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 153,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "16.7. CURVE FITTING 153\r\n0 1 2 3 4 5\r\nx\r\n30\r\n25\r\n20\r\n15\r\n10\r\n5\r\n0\r\n5\r\ndata point\r\nnearest\r\nlinear\r\ncubic\r\nFigure 16.2: Blue dots are interpolated by piecewise polynomial of order 0 (“nearest”), order 1(“lin\u0002ear”) and order 3 (“cubic”).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/9fcb90d0-99c6-4246-ac90-e3beaf38c57a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f8b52accd91f8ca54990090fec0338adfad6eea337ead9c53be122b8c325f355",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 475
      },
      {
        "segments": [
          {
            "segment_id": "a68774ba-d73e-41be-b58a-eb51a644b11e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 154,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "154 CHAPTER 16. NUMERICAL METHODS USING PYTHON (SCIPY)\r\ndef f (x , a , b , c ):\r\n\"\"\" Fit function y = f (x , p ) with parameters p =( a ,b , c ). \"\"\"\r\nreturn a * np . exp ( - b * x ) + c\r\n# create fake data\r\nx = np . linspace (0 , 4 , 50)\r\ny = f (x , a =2.5 , b =1.3 , c =0.5)\r\n# add noise\r\nyi = y + 0.2 * np . random . normal ( size =len ( x ))\r\n# call curve fit function\r\npopt , pcov = curve_fit (f , x , yi )\r\na , b , c = popt\r\nprint \" Optimal parameters are a =% g , b =% g , and c =% g \" % (a , b , c )\r\n# plotting\r\nimport pylab\r\nyfitted = f (x , * popt ) # equivalent to f (x , popt [0] , popt [1] , popt [2])\r\npylab . plot (x , yi , ’o ’ , label = ’ data $y_i$ ’)\r\npylab . plot (x , yfitted , ’ - ’ , label = ’ fit $f ( x_i ) $ ’)\r\npylab . xlabel ( ’x ’)\r\npylab . legend ()\r\npylab . savefig ( ’ curvefit . png ’)\r\nPlotting the noisy data together with the fit, we get the plot in figure 16.3.\r\nNote that in the source code above we define the fitting function y = f(x) through Python code.\r\nWe can thus fit (nearly) arbitrary functions using the curve fit method.\r\nThe curve fit function returns a tuple popt, pcov. The first entry popt contains a tuple of the\r\nOPTimal Parameters (in the sense that these minimise equation (16.2). The second entry contains the\r\ncovariance matrix for all parameters. The diagonals provide the variance of the parameter estimations.\r\nFor the curve fitting process to work, the Levenburg-Marquardt algorithm needs to start the fitting\r\nprocess with initial guesses for the final parameters. If these are not specified (as in the example above),\r\nthe value “1.0“ is used for the initial guess.\r\nIf the algorithm fails to fit a function to data (even though the function describes the data rea\u0002sonably), we need to give the algorithm better estimates for the initial parameters. For the example\r\nshown above, we could give the estimates to the curve fit function by changing the line\r\npopt , pcov = curve_fit (f , x , yi )\r\nto\r\npopt , pcov = curve_fit (f , x , yi , p0 =(2 ,1 ,0.6))\r\nif our initial guesses would be a = 2, b = 1 and c = 0.6. Once we take the algorithm “roughly in the\r\nright area” in parameter space, the fitting usually works well.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/a68774ba-d73e-41be-b58a-eb51a644b11e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e75d5dc17fef40653b8c72ff7a5cc078cced6d95cc92f576a7354f9993e8f8a1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 473
      },
      {
        "segments": [
          {
            "segment_id": "cd143166-846d-4d05-bfc2-c7e2830933d2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 155,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "16.7. CURVE FITTING 155\r\n0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0\r\nx\r\n0.0\r\n0.5\r\n1.0\r\n1.5\r\n2.0\r\n2.5\r\n3.0\r\n3.5\r\ndata yi\r\nfit f(xi)\r\nFigure 16.3: Noisy input data yi and fitting result f(x, ~p) (see (16.3) . The particular fitted parameters\r\nfor this run a=2.3669, b=1.06078, and c=0.464289.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/cd143166-846d-4d05-bfc2-c7e2830933d2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7bdb787420688d6eb427f3e6d7c9b3b372ad8c56be26f5b66dbfdd460f902dda",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9d3effe4-0f05-425d-a7f5-dd3ff34d00a6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 156,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "156 CHAPTER 16. NUMERICAL METHODS USING PYTHON (SCIPY)\r\n16.8 Fourier transforms\r\nIn the next example, we create a signal as a superposition of a 50 Hz and 70 Hz sine wave (with a\r\nslight phase shift between them). We then Fourier transform the signal and plot the absolute value\r\nof the (complex) discrete Fourier transform coefficients against frequency, and expect to see peaks at\r\n50Hz and 70Hz.\r\nimport scipy\r\nimport matplotlib . pyplot as plt\r\npi = scipy . pi\r\nsignal_length = 0.5 # [ seconds ]\r\nsample_rate =500 # sampling rate [ Hz ]\r\ndt = 1./ sample_rate # time between two samples [ s ]\r\ndf = 1/ signal_length # frequency between points in\r\n# in frequency domain [ Hz ]\r\nt = scipy . arange (0 , signal_length , dt ) # the time vector\r\nn_t =len( t ) # length of time vector\r\n# create signal\r\ny = scipy . sin (2* pi *50* t )+ scipy . sin (2* pi *70* t + pi /4)\r\n# compute fourier transform\r\nf = scipy . fft ( y )\r\n# work out meaningful frequencies in fourier transform\r\nfreqs = df * scipy . arange (0 ,( n_t -1)/2. , dtype = ’d ’) # d = double precision float\r\nn_freq = len ( freqs )\r\n# plot input data y against time\r\nplt . subplot (2 ,1 ,1)\r\nplt . plot (t ,y , label = ’ input data ’)\r\nplt . xlabel ( ’ time [ s ] ’)\r\nplt . ylabel ( ’ signal ’)\r\n# plot frequency spectrum\r\nplt . subplot (2 ,1 ,2)\r\nplt . plot ( freqs ,abs( f [0: n_freq ]) ,\r\nlabel = ’ abs ( fourier transform ) ’)\r\nplt . xlabel ( ’ frequency [ Hz ] ’)\r\nplt . ylabel ( ’ abs ( DFT ( signal )) ’)\r\n# save plot to disk\r\nplt . savefig ( ’ fft1 . pdf ’)\r\nplt . show () # and display plot on screen\r\nThe resulting plot is shown in figure 16.4.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/9d3effe4-0f05-425d-a7f5-dd3ff34d00a6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8e679e75845a75dc39d5d4968a474a61eaaf0b1be4c49013a7121da7e8f00497",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c22abeac-586d-489e-ae66-42687610e665",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 157,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "16.8. FOURIER TRANSFORMS 157\r\n0.0 0.1 0.2 0.3 0.4 0.5\r\ntime [s]\r\n2.0\r\n1.5\r\n1.0\r\n0.5\r\n0.0\r\n0.5\r\n1.0\r\n1.5\r\n2.0\r\nsignal\r\n0 50 100 150 200 250\r\nfrequency [Hz]\r\n0\r\n20\r\n40\r\n60\r\n80\r\n100\r\n120\r\n140\r\nabs(DFT(signal))\r\nFigure 16.4: The output of fft1.py. The lower plot shows the discrete Fourier transform computed\r\nfrom the data shown in the upper plot.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/c22abeac-586d-489e-ae66-42687610e665.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=93f430a263dfda5ccd03e451ff53446783221e43d6fa726177137be5675cf48f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 457
      },
      {
        "segments": [
          {
            "segment_id": "30142d80-436f-43f0-85ab-01fb15df226b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 158,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "158 CHAPTER 16. NUMERICAL METHODS USING PYTHON (SCIPY)\r\n16.9 Optimisation\r\nOften we need to find the maximum or minimum of a particular function f(x) where f is a scalar\r\nfunction but x could be a vector. Typical applications are the minimisation of entities such as cost, risk\r\nand error, or the maximisation of productivity, efficiency and profit. Optimisation routines typically\r\nprovide a method to minimise a given function: if we need to maximise f(x) we create a new function\r\ng(x) that reverses the sign of f, i.e. g(x) = −f(x) and we minimise g(x).\r\nBelow, we provide an example showing (i) the definition of the test function and (ii) the call of the\r\nscipy.optimize.fmin function which takes as argument a function f to minimise and an initial value\r\nx0 from which to start the search for the minimum, and which returns the value of x for which f(x) is\r\n(locally) minimised. Typically, the search for the minimum is a local search, i.e. the algorithm follows\r\nthe local gradient. We repeat the search for the minimum for two values (x0 = 1.0 and x0 = 2.0,\r\nrespectively) to demonstrate that depending on the starting value we may find different minimar of\r\nthe function f.\r\nThe majority of the commands (after the two calls to fmin) in the file fmin1.py creates the plot\r\nof the function, the start points for the searches and the minima obtained:\r\nfrom scipy import arange , cos , exp\r\nfrom scipy . optimize import fmin\r\nimport pylab\r\ndef f ( x ):\r\nreturn cos ( x ) - 3 * exp ( -( x - 0.2) ** 2)\r\n# find minima of f ( x ) ,\r\n# starting from 1.0 and 2.0 respectively\r\nminimum1 = fmin (f , 1.0)\r\nprint \" Start search at x =1. , minimum is \" , minimum1\r\nminimum2 = fmin (f , 2.0)\r\nprint \" Start search at x =2. , minimum is \" , minimum2\r\n# plot function\r\nx = arange ( -10 , 10 , 0.1)\r\ny = f ( x )\r\npylab . plot (x , y , label = ’$ \\ cos ( x ) -3 e ^{ -( x -0.2)^2} $ ’)\r\npylab . xlabel ( ’x ’)\r\npylab . grid ()\r\npylab . axis ([ -5 , 5 , -2.2 , 0.5])\r\n# add minimum1 to plot\r\npylab . plot ( minimum1 , f ( minimum1 ) , ’ vr ’ ,\r\nlabel = ’ minimum 1 ’)\r\n# add start1 to plot\r\npylab . plot (1.0 , f (1.0) , ’ or ’ , label = ’ start 1 ’)\r\n# add minimum2 to plot\r\npylab . plot ( minimum2 , f ( minimum2 ) , ’ vg ’ ,\\\r\nlabel = ’ minimum 2 ’)\r\n# add start2 to plot\r\npylab . plot (2.0 , f (2.0) , ’ og ’ , label = ’ start 2 ’)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/30142d80-436f-43f0-85ab-01fb15df226b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=74da6ace68f1a296fc59e08e19071e2bfb5ac9523c07eba397a1ce9e5ddc6a1a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 485
      },
      {
        "segments": [
          {
            "segment_id": "20aa4d61-3764-4b3b-9093-b2d0c6bd3bb8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 159,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "16.9. OPTIMISATION 159\r\n4 2 0 2 4\r\nx\r\n2.0\r\n1.5\r\n1.0\r\n0.5\r\n0.0\r\n0.5\r\ncos(x)¡3e\r\n¡(x¡0:2)\r\n2\r\nminimum 1\r\nstart 1\r\nminimum 2\r\nstart 2\r\nFigure 16.5: The output of fmin1.py. The minimisation routine fmin finds the next local minimum\r\nstarting from a user-provided initial position.\r\npylab . legend ( loc = ’ lower left ’)\r\npylab . savefig ( ’ fmin1 . pdf ’)\r\npylab . show ()\r\nThe resulting plot is shown in figure 16.5.\r\nCalling the fmin function, will produce some diagnostic output which can be seen in the following\r\ncapture of the stdout from running the fmin1.py file:\r\nOptimization terminated successfully .\r\nCurrent function value : -2.023866\r\nIterations : 16\r\nFunction evaluations : 32\r\nStart search at x =1. , minimum is [ 0.23964844]\r\nOptimization terminated successfully .\r\nCurrent function value : -1.000529\r\nIterations : 16\r\nFunction evaluations : 32\r\nStart search at x =2. , minimum is [ 3.13847656]",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/20aa4d61-3764-4b3b-9093-b2d0c6bd3bb8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=61749854d8b571ed1d4aec10610523867ad21f0cbb94584ae3e8949df1026593",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a7b4db68-846d-45a0-8f4c-6a270d4bc824",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 160,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "160 CHAPTER 16. NUMERICAL METHODS USING PYTHON (SCIPY)\r\nReturn value of fmin Note that the return value from the fmin function is a numpy array which\r\n– for the example above – contains only one number as we have only one parameter (here x) to vary.\r\nIn general, fmin can be used to find the minimum in a higher-dimensional parameter space if there\r\nare several parameters. In that case, the numpy array would contain those parameters that minimise\r\nthe objective function. The objective function f(x) has to return a scalar even if there are more\r\nparameters, i.e. even if x is a vector as in f(x).",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/a7b4db68-846d-45a0-8f4c-6a270d4bc824.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5b967008a88161b020dc11b1d4778ad4609b1d04b69945e22efd92e79d8cc25d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 261
      },
      {
        "segments": [
          {
            "segment_id": "3fcebfd6-8e49-4bf6-a441-3dccaa62ed71",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 161,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "16.10. OTHER NUMERICAL METHODS 161\r\n16.10 Other numerical methods\r\nScientific Python and Numpy provide access to a large number of other numerical algorithms including\r\nfunction interpolation, Fourier transforms, optimisation, special functions (such as Bessel functions),\r\nsignal processing and filters, random number generation, and more. Start to explore scipy’s and\r\nnumpy’s capabilities using the help function and the documentation provided on the web.\r\n16.11 scipy.io: Scipy-input output\r\nScipy provides routines to read and write Matlab mat files. Here is an example where we create a\r\nMatlab compatible file storing a (1x11) matrix, and then read this data into a numpy array from\r\nPython using the scipy Input-Output library:\r\nFirst we create a mat file in Octave (Octave is [mostly] compatible with Matlab)::\r\noctave :1 > a = -1:0.5:4\r\na =\r\nColumns 1 through 6:\r\n-1.0000 -0.5000 0.0000 0.5000 1.0000 1.5000\r\nColumns 7 through 11:\r\n2.0000 2.5000 3.0000 3.5000 4.0000\r\noctave :2 > save -6 octave_a . mat a % save as version 6\r\nThen we load this array within python:\r\n>>> from scipy . io import loadmat\r\n>>> mat_contents = loadmat ( ’ octave_a . mat ’)\r\n{ ’ __globals__ ’: [] ,\r\n’ __header__ ’: ’ MATLAB 5.0 MAT - file , Octave 3.2 , 2011 -09 -16 22:13:21 ’ ,\r\n’ __version__ ’: ’ 1.0 ’ ,\r\n’a ’: array ([[ -1. , -0.5 , 0. , 0.5 , 1. , 1.5 , 2. , 2.5 ,\\\r\n3. , 3.5 , 4. ]])}\r\n>>> mat_contents [ ’a ’]\r\narray ([[ -1. , -0.5 , 0. , 0.5 , 1. , 1.5 , 2. , 2.5 , \\\r\n3. , 3.5 , 4. ]])\r\nThe function loadmat returns a dictionary: the key for each item in the dictionary is a string which\r\nis the name of that array when it was saved in Matlab. The key is the actual array.\r\nA Matlab matrix file can hold several arrays. Each of those is presented by one key-value pair in\r\nthe dictionary.\r\nLet’s save two arrays from Python to demonstrate that:\r\nimport scipy . io\r\nimport numpy as np\r\n# create two numpy arrays\r\na = np . linspace (0 , 50 , 11)\r\nb = np . ones ((4 , 4))\r\n# save as mat - file\r\n# create dictionary for savemat\r\ntmp_d = { ’a ’: a ,\r\n’b ’: b }",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/3fcebfd6-8e49-4bf6-a441-3dccaa62ed71.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d110d0da25d0249c4afecc6fb23f0d94f019aedee2066a8411382f34a2ebb8b7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 392
      },
      {
        "segments": [
          {
            "segment_id": "549f2e8f-de75-4bdf-a1b8-265d697f0a0c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 162,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "162 CHAPTER 16. NUMERICAL METHODS USING PYTHON (SCIPY)\r\nscipy . io . savemat ( ’ data . mat ’ , tmp_d )\r\nThis program creates the file data.mat, which we can subsequently read using Matlab or here\r\nOctave:\r\nHAL47 : code fangohr$ octave\r\nGNU Octave , version 3.2.4\r\nCopyright ( C ) 2009 John W . Eaton and others .\r\n< snip >\r\noctave :1 > whos\r\nVariables in the current scope :\r\nAttr Name Size Bytes Class\r\n==== ==== ==== ===== =====\r\nans 1 x11 92 cell\r\nTotal is 11 elements using 92 bytes\r\noctave :2 > load data . mat\r\noctave :3 > whos\r\nVariables in the current scope :\r\nAttr Name Size Bytes Class\r\n==== ==== ==== ===== =====\r\na 11 x1 88 double\r\nans 1 x11 92 cell\r\nb 4 x4 128 double\r\nTotal is 38 elements using 308 bytes\r\noctave :4 > a\r\na =\r\n0\r\n5\r\n10\r\n15\r\n20\r\n25\r\n30\r\n35\r\n40\r\n45\r\n50\r\noctave :5 > b\r\nb =\r\n1 1 1 1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/549f2e8f-de75-4bdf-a1b8-265d697f0a0c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3c0e54c1ba9f6e0261a76d4b14b94bc88bb8fffea4b476cc728451cb3e09e5ed",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e1870a1a-fc04-41be-a78e-733b633b4ee0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 163,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "16.11. SCIPY.IO: SCIPY-INPUT OUTPUT 163\r\n1 1 1 1\r\n1 1 1 1\r\n1 1 1 1\r\nNote that there are other functions to read from and write to in formats as used by IDL, Netcdf\r\nand other formats in scipy.io.\r\nMore → see Scipy tutorial.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/e1870a1a-fc04-41be-a78e-733b633b4ee0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6422096f79ae17481531bade8a961481aaf744784416c2a203eb84e6c569c814",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1d494e74-fb43-4475-a091-3a27b53963b4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 164,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "164 CHAPTER 16. NUMERICAL METHODS USING PYTHON (SCIPY)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/1d494e74-fb43-4475-a091-3a27b53963b4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c2aa8d4846ae878a81693a91caa6df32ad0b57536d730592b3d4be6625cfb5c3",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f040fb8f-8bed-41b4-9f6b-8d61838e1579",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 165,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Chapter 17\r\nWhere to go from here?\r\nLearning a programming language is the first step towards becoming a computationalists who advances\r\nscience and engineering through computational modelling and simulation.\r\nWe list some additional skills that can be very beneficial for day-to-day computational science\r\nwork, but is of course not exhaustive.\r\n17.1 Advanced programming\r\nThis text has put emphasis on providing a robust foundation in terms of programming, covering control\r\nflow, data structures and elements from function and procedural programming. We have not touch\r\nObject Orientation in great detail, nor have we discussed some of Python’s more advanced features\r\nsuch as iterators, and decorators, for example.\r\n17.2 Compiled programming language\r\nWhen performance starts to be the highest priority, we may need to use compiled code, and likely\r\nembed this in a Python code to carry out the computational that are the performance bottle neck.\r\nFortran, C and C++ are sensible choices here; maybe Julia in the near future.\r\nWe also need to learn how to integrate the compiled code with Python using tools such as Cython,\r\nBoost, Ctypes and Swig.\r\n17.3 Testing\r\nGood coding is supported by a range of unit and system tests that can be run routinely to check that\r\nthe code works correctly. Tools such as doctest, nose and pytest are invaluable, and we should learn\r\nat least how to use pytest (or nose).\r\n17.4 Simulation models\r\nA number of standard simulation tools such as Monte Carlo, Molecular Dynamics, lattice based models,\r\nagents, finite difference and finite element models are commonly used to solve particular simulation\r\nchallenges – it is useful to have at least a broad overview of these.\r\n165",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/f040fb8f-8bed-41b4-9f6b-8d61838e1579.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1a529204861dceb8a3882dd45cf9e1040824dcdc8fde1315af3acde38a6d7f57",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 498
      },
      {
        "segments": [
          {
            "segment_id": "05a9cfe8-8df0-4bbc-893a-86911e2d25d7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 166,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "166 CHAPTER 17. WHERE TO GO FROM HERE?\r\n17.5 Software engineering for research codes\r\nResearch codes bring particular challenges: the requirements may change during the run time of the\r\nproject, we need great flexibility yet reproducibility. A number of techniques are available to support\r\neffectively.\r\n17.6 Data and visualisation\r\nDealing with large amounts of data, processing and visualising it can be a challenge. Fundamental\r\nknowledge of database design, 3d visualisation and modern data processing tools such as the Pandas\r\nPython package help with this.\r\n17.7 Version control\r\nUsing a version control tool, such as git or mercurial, should be a standard approach and improves\r\ncode writing effectiveness significantly, helps with working in teams, and - maybe most importantly -\r\nsupports reproducibility of computational results.\r\n17.8 Parallel execution\r\nParallel execution of code is a way to make it run orders of magnitude faster. This could be using\r\nMPI for inter-node communication or OpenMP for intra-node parallelisation or a hybrid mode bringing\r\nboth together.\r\nThe recent rise of GPU computing provides yet another avenue of parallelisation, and so do the\r\nmany-core chips such as the Intel Phi.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/05a9cfe8-8df0-4bbc-893a-86911e2d25d7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b364ffa7c93e3573cfb79382e401c9ddc6e8727ac0ca82abc130e94512d8eade",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "5e5b1c54-1d26-4446-89d5-08bf641b6bd1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 167,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "17.8. PARALLEL EXECUTION 167\r\nAcknowledgements\r\nThanks go to\r\n• Marc Molinari for carefully proof reading this manuscript around 2007.\r\n• Neil O’Brien for contributing to the SymPy section.\r\n• Jacek Generowicz for introducing me to Python in the last millennium, and for kindly sharing\r\ncountless ideas from his Python course.\r\n• EPSRC for partial support of this work (GR/T09156/01 and EP/G03690X/1).\r\n• Students and other readers who have provided feedback and pointed out typos and errors etc.\r\nchangeset : 418:321 f2967175e\r\ntag : tip\r\nuser : Hans Fangohr [ iota ] < fangohr@soton . ac . uk >\r\ndate : Mon Sep 07 09:44:40 2015 +0100\r\nsummary : minor improvements from proofreading",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/dd3f7cb9-0f63-4c3b-b8d7-47a23bc012f7/images/5e5b1c54-1d26-4446-89d5-08bf641b6bd1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041925Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1a69225dfd17e25fa7ef5e9856cbdc01be98b44061322e1cf8fedaf25b5ec405",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 297
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "```json\n{\"title\": \"Contents\"}\n```"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Hans Fangohr\n"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "```json\n{\"date_published\": \"September 7, 2015\"}\n```"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "```json\n{\"location\": \"room 1033\"}\n```"
        }
      ]
    }
  }
}