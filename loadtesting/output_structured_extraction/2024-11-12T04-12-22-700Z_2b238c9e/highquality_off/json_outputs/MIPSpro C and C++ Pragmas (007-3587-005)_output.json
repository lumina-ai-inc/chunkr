{
  "file_name": "MIPSpro C and C++ Pragmas (007-3587-005).pdf",
  "task_id": "bc8b83db-5f7a-448b-a16d-6ceb13100a76",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "e69d1037-ad3d-467b-b1f9-50c9c4599443",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 1,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/e69d1037-ad3d-467b-b1f9-50c9c4599443.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d0916a8b5c4240118845fb4a2cbf1bbc1569f365d7e98ba987c4383fdadbe392",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "97913afa-a9fe-4715-9801-b19b5cf3312f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 2,
            "page_width": 612,
            "page_height": 792,
            "content": "COPYRIGHT\r\n© 1999, 2002 - 2003 Silicon Graphics, Inc. All rights reserved; provided portions may be copyright in third parties, as indicated\r\nelsewhere herein. No permission is granted to copy, distribute, or create derivative works from the contents of this electronic\r\ndocumentation in any manner, in whole or in part, without the prior written permission of Silicon Graphics, Inc.\r\nLIMITED RIGHTS LEGEND\r\nThe electronic (software) version of this document was developed at private expense; if acquired under an agreement with the USA\r\ngovernment or any contractor thereto, it is acquired as \"commercial computer software\" subject to the provisions of its applicable\r\nlicense agreement, as specified in (a) 48 CFR 12.212 of the FAR; or, if acquired for Department of Defense units, (b) 48 CFR 227-7202 of\r\nthe DoD FAR Supplement; or sections succeeding thereto. Contractor/manufacturer is Silicon Graphics, Inc., 1600 Amphitheatre Pkwy.,\r\nMountain View, CA 94043-1351.\r\nTRADEMARKS AND ATTRIBUTIONS\r\nSilicon Graphics, SGI, the SGI logo, and IRIX are registered trademarks and OpenMP is a trademark of Silicon Graphics, Inc.. in the\r\nUnited States and/or other countries worldwide. Portions of this publication may have been derived from the OpenMP Language\r\nApplication Program Interface Specification. MIPSpro is a trademark of MIPS Technologies, Inc., and is used under license by Silicon\r\nGraphics, Inc. UNIX and the X device are registered trademarks of The Open Group in the United States and other countries. X/Open\r\nis a trademark of X/Open Company Ltd.\r\nCover design by Sarah Bolles, Sarah Bolles Design, and Dany Galgani, SGI Technical Publications.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/97913afa-a9fe-4715-9801-b19b5cf3312f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6c029508399cf33084008777e56a43d7f9ebf5b7df817e69fdaf9973a2edc88c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "898ddfbf-478f-4002-a608-86e303a85282",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 3,
            "page_width": 612,
            "page_height": 792,
            "content": "New Features in this Guide\r\nSupport for OpenMP 2.0 has been added and is discussed in Chapter 10, \"OpenMP\r\nC/C++ API Multiprocessing Directives\", page 95.\r\n007–3587–005 iii",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/898ddfbf-478f-4002-a608-86e303a85282.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9e3ce3458d79c6f587a440000178afd6580bed4fb7fdc946b1b9ff9686804dc3",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "631f0953-b18a-46cb-96dd-b97b30173123",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 4,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/631f0953-b18a-46cb-96dd-b97b30173123.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6889c507922c602cd4d8b306eb8398c3f9fc313098a21ca4acea0c0e05dd0409",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3445bb5f-97a5-41a1-a6e8-bebb75c0d2a2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 5,
            "page_width": 612,
            "page_height": 792,
            "content": "Record of Revision\r\nVersion Description\r\n7.3 March 1999\r\nThis revision supports the 7.3 version of the MIPSpro compiler.\r\n004 September 2002\r\nThis revision supports the 7.4 version of the MIPSpro compiler\r\nwhich runs on the IRIX operating systems, version 6.5 and later.\r\n005 June 2003\r\nThis revision supports the 7.4.1 version of the MIPSpro compiler\r\nwhich runs on the IRIX operating systems, version 6.5 and later.\r\n007–3587–005 v",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/3445bb5f-97a5-41a1-a6e8-bebb75c0d2a2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=aadad97b6de19f0ab61014c6b6386a88672e644eeb7db5da0dae1c6f505b5ecf",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "22af1362-2076-4864-a672-1b8b44e29f59",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 6,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/22af1362-2076-4864-a672-1b8b44e29f59.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1518d4dac89af02c9cac4a0e861330b7db34f0a5b5fc529450f40f4e31eced48",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 352
      },
      {
        "segments": [
          {
            "segment_id": "509a7134-34ba-4a19-b54c-ea692b9224b0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 7,
            "page_width": 612,
            "page_height": 792,
            "content": "Contents\r\nAbout This Manual . . . ................. xix\r\nRelated Publications . . . . . . . . . . . . . . . . . . . . . . xix\r\nObtaining Publications . . . . . . . . . . . . . . . . . . . . . . xx\r\nConventions . . . . . . . . . . . . . . . . . . . . . . . . . xx\r\nReader Comments . . . . . . . . . . . . . . . . . . . . . . . xxi\r\n1. Alphabetical Listing of Directives . . . . .......... 1\r\n2. Automatic Parallelization #pragma Directives .......... 11\r\n#pragma concurrent . . . . . . . . . . . . . . . . . . . . . 11\r\n#pragma concurrent call . . . . . . . . . . . . . . . . . . . 12\r\n#pragma concurrentize . . . . . . . . . . . . . . . . . . . . 14\r\n#pragma no concurrentize . . . . . . . . . . . . . . . . . . . 14\r\n#pragma permutation . . . . . . . . . . . . . . . . . . . . . 15\r\n#pragma prefer concurrent . . . . . . . . . . . . . . . . . . 15\r\n#pragma prefer serial . . . . . . . . . . . . . . . . . . . . 16\r\n#pragma serial . . . . . . . . . . . . . . . . . . . . . . . 16\r\n3. C++ Instantiation #pragma Directives . . . .......... 17\r\n#pragma instantiate . . . . . . . . . . . . . . . . . . . . . 17\r\n#pragma can_instantiate . . . . . . . . . . . . . . . . . . . 18\r\n#pragma do_not_instantiate . . . . . . . . . . . . . . . . . . 19\r\n4. Data Layout #pragma Directives . . . . . .......... 21\r\n#pragma align_symbol . . . . . . . . . . . . . . . . . . . . 21\r\n#pragma fill_symbol . . . . . . . . . . . . . . . . . . . . . 23\r\n007–3587–005 vii",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/509a7134-34ba-4a19-b54c-ea692b9224b0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=448df4a61882cbf816eec9bbe5769d48a93e963b5037621ebd1c6e69c4c8d852",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 457
      },
      {
        "segments": [
          {
            "segment_id": "56f38b9d-5617-4ee9-bc90-9ca3f8a53af0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 8,
            "page_width": 612,
            "page_height": 792,
            "content": "Contents\r\n#pragma pack . . . . . . . . . . . . . . . . . . . . . . . . 24\r\n5. DSM Optimization #pragma Directives . . .......... 25\r\n#pragma distribute . . . . . . . . . . . . . . . . . . . . . 25\r\nonto Clause . . . . . . . . . . . . . . . . . . . . . . . . 27\r\n#pragma distribute_reshape . . . . . . . . . . . . . . . . . . 28\r\n#pragma dynamic . . . . . . . . . . . . . . . . . . . . . . 30\r\n#pragma page_place . . . . . . . . . . . . . . . . . . . . . 31\r\n#pragma redistribute . . . . . . . . . . . . . . . . . . . . 32\r\nonto Clause . . . . . . . . . . . . . . . . . . . . . . . . 33\r\n6. Inlining #pragma Directives . . . . . . .......... 35\r\n#pragma inline and #pragma noinline . . . . . . . . . . . . . . . 35\r\nKeywords . . . . . . . . . . . . . . . . . . . . . . . . . 36\r\nExamples of #pragma inline and #pragma noinline . . . . . . . . . . 37\r\n7. Loader Information #pragma Directives . . .......... 41\r\n#pragma hidden . . . . . . . . . . . . . . . . . . . . . . . 42\r\n#pragma internal . . . . . . . . . . . . . . . . . . . . . . 42\r\n#pragma no_delete name . . . . . . . . . . . . . . . . . . . . 43\r\n#pragma optional . . . . . . . . . . . . . . . . . . . . . . 43\r\n#pragma protected . . . . . . . . . . . . . . . . . . . . . . 44\r\n#pragma section_gp . . . . . . . . . . . . . . . . . . . . . 45\r\n#pragma section_non_gp . . . . . . . . . . . . . . . . . . . . 45\r\n#pragma weak . . . . . . . . . . . . . . . . . . . . . . . . 46\r\n8. Loop Nest Optimization #pragma Directives .......... 49\r\n#pragma aggressive inner loop fission . . . . . . . . . . . . . 50\r\n#pragma blocking size . . . . . . . . . . . . . . . . . . . . 51\r\n#pragma no blocking . . . . . . . . . . . . . . . . . . . . . 51\r\nviii 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/56f38b9d-5617-4ee9-bc90-9ca3f8a53af0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=55edfad77c3aed569042386460cb18abebe3728caeb0113050d23b5281588263",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 572
      },
      {
        "segments": [
          {
            "segment_id": "56f38b9d-5617-4ee9-bc90-9ca3f8a53af0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 8,
            "page_width": 612,
            "page_height": 792,
            "content": "Contents\r\n#pragma pack . . . . . . . . . . . . . . . . . . . . . . . . 24\r\n5. DSM Optimization #pragma Directives . . .......... 25\r\n#pragma distribute . . . . . . . . . . . . . . . . . . . . . 25\r\nonto Clause . . . . . . . . . . . . . . . . . . . . . . . . 27\r\n#pragma distribute_reshape . . . . . . . . . . . . . . . . . . 28\r\n#pragma dynamic . . . . . . . . . . . . . . . . . . . . . . 30\r\n#pragma page_place . . . . . . . . . . . . . . . . . . . . . 31\r\n#pragma redistribute . . . . . . . . . . . . . . . . . . . . 32\r\nonto Clause . . . . . . . . . . . . . . . . . . . . . . . . 33\r\n6. Inlining #pragma Directives . . . . . . .......... 35\r\n#pragma inline and #pragma noinline . . . . . . . . . . . . . . . 35\r\nKeywords . . . . . . . . . . . . . . . . . . . . . . . . . 36\r\nExamples of #pragma inline and #pragma noinline . . . . . . . . . . 37\r\n7. Loader Information #pragma Directives . . .......... 41\r\n#pragma hidden . . . . . . . . . . . . . . . . . . . . . . . 42\r\n#pragma internal . . . . . . . . . . . . . . . . . . . . . . 42\r\n#pragma no_delete name . . . . . . . . . . . . . . . . . . . . 43\r\n#pragma optional . . . . . . . . . . . . . . . . . . . . . . 43\r\n#pragma protected . . . . . . . . . . . . . . . . . . . . . . 44\r\n#pragma section_gp . . . . . . . . . . . . . . . . . . . . . 45\r\n#pragma section_non_gp . . . . . . . . . . . . . . . . . . . . 45\r\n#pragma weak . . . . . . . . . . . . . . . . . . . . . . . . 46\r\n8. Loop Nest Optimization #pragma Directives .......... 49\r\n#pragma aggressive inner loop fission . . . . . . . . . . . . . 50\r\n#pragma blocking size . . . . . . . . . . . . . . . . . . . . 51\r\n#pragma no blocking . . . . . . . . . . . . . . . . . . . . . 51\r\nviii 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/56f38b9d-5617-4ee9-bc90-9ca3f8a53af0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=55edfad77c3aed569042386460cb18abebe3728caeb0113050d23b5281588263",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 572
      },
      {
        "segments": [
          {
            "segment_id": "1ab4fdfd-60f2-4898-a57b-6ea5b6009b9d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 9,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma fission . . . . . . . . . . . . . . . . . . . . . . 52\r\n#pragma fissionable . . . . . . . . . . . . . . . . . . . . . 52\r\n#pragma no fission . . . . . . . . . . . . . . . . . . . . . 52\r\n#pragma fuse . . . . . . . . . . . . . . . . . . . . . . . . 53\r\n#pragma fusable . . . . . . . . . . . . . . . . . . . . . . 53\r\n#pragma no fusion . . . . . . . . . . . . . . . . . . . . . . 53\r\n#pragma no interchange . . . . . . . . . . . . . . . . . . . . 54\r\n#pragma ivdep . . . . . . . . . . . . . . . . . . . . . . . 54\r\n#pragma prefetch . . . . . . . . . . . . . . . . . . . . . . 55\r\n#pragma prefetch_manual . . . . . . . . . . . . . . . . . . . 56\r\n#pragma prefetch_ref . . . . . . . . . . . . . . . . . . . . 56\r\n#pragma prefetch_ref_disable . . . . . . . . . . . . . . . . . 58\r\n#pragma unroll . . . . . . . . . . . . . . . . . . . . . . . 58\r\n9. Multiprocessing #pragma Directives . . . .......... 61\r\n#pragma copyin . . . . . . . . . . . . . . . . . . . . . . . 62\r\nExample of #pragma copyin . . . . . . . . . . . . . . . . . . 62\r\n#pragma critical . . . . . . . . . . . . . . . . . . . . . . 63\r\n#pragma enter gate and #pragma exit gate . . . . . . . . . . . . . 66\r\n#pragma independent . . . . . . . . . . . . . . . . . . . . . 69\r\n#pragma local . . . . . . . . . . . . . . . . . . . . . . . 70\r\n#pragma no side effects . . . . . . . . . . . . . . . . . . . 71\r\n#pragma one processor . . . . . . . . . . . . . . . . . . . . 71\r\n#pragma parallel . . . . . . . . . . . . . . . . . . . . . . 72\r\n#pragma parallel Clauses . . . . . . . . . . . . . . . . . . . 74\r\nshared: Specifying Shared Variables . . . . . . . . . . . . . . . . 74\r\nlocal: Specifying Local Variables . . . . . . . . . . . . . . . . . 75\r\nif: Specifying Conditional Parallelization . . . . . . . . . . . . . . . 75\r\n007–3587–005 ix",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/1ab4fdfd-60f2-4898-a57b-6ea5b6009b9d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0ea804c6fb6cc5c9eef47e48bacb61ef09e692ead1d133f381d17d1fe7f114d6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 638
      },
      {
        "segments": [
          {
            "segment_id": "1ab4fdfd-60f2-4898-a57b-6ea5b6009b9d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 9,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma fission . . . . . . . . . . . . . . . . . . . . . . 52\r\n#pragma fissionable . . . . . . . . . . . . . . . . . . . . . 52\r\n#pragma no fission . . . . . . . . . . . . . . . . . . . . . 52\r\n#pragma fuse . . . . . . . . . . . . . . . . . . . . . . . . 53\r\n#pragma fusable . . . . . . . . . . . . . . . . . . . . . . 53\r\n#pragma no fusion . . . . . . . . . . . . . . . . . . . . . . 53\r\n#pragma no interchange . . . . . . . . . . . . . . . . . . . . 54\r\n#pragma ivdep . . . . . . . . . . . . . . . . . . . . . . . 54\r\n#pragma prefetch . . . . . . . . . . . . . . . . . . . . . . 55\r\n#pragma prefetch_manual . . . . . . . . . . . . . . . . . . . 56\r\n#pragma prefetch_ref . . . . . . . . . . . . . . . . . . . . 56\r\n#pragma prefetch_ref_disable . . . . . . . . . . . . . . . . . 58\r\n#pragma unroll . . . . . . . . . . . . . . . . . . . . . . . 58\r\n9. Multiprocessing #pragma Directives . . . .......... 61\r\n#pragma copyin . . . . . . . . . . . . . . . . . . . . . . . 62\r\nExample of #pragma copyin . . . . . . . . . . . . . . . . . . 62\r\n#pragma critical . . . . . . . . . . . . . . . . . . . . . . 63\r\n#pragma enter gate and #pragma exit gate . . . . . . . . . . . . . 66\r\n#pragma independent . . . . . . . . . . . . . . . . . . . . . 69\r\n#pragma local . . . . . . . . . . . . . . . . . . . . . . . 70\r\n#pragma no side effects . . . . . . . . . . . . . . . . . . . 71\r\n#pragma one processor . . . . . . . . . . . . . . . . . . . . 71\r\n#pragma parallel . . . . . . . . . . . . . . . . . . . . . . 72\r\n#pragma parallel Clauses . . . . . . . . . . . . . . . . . . . 74\r\nshared: Specifying Shared Variables . . . . . . . . . . . . . . . . 74\r\nlocal: Specifying Local Variables . . . . . . . . . . . . . . . . . 75\r\nif: Specifying Conditional Parallelization . . . . . . . . . . . . . . . 75\r\n007–3587–005 ix",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/1ab4fdfd-60f2-4898-a57b-6ea5b6009b9d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0ea804c6fb6cc5c9eef47e48bacb61ef09e692ead1d133f381d17d1fe7f114d6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 638
      },
      {
        "segments": [
          {
            "segment_id": "d191383a-64e7-40bc-8795-4824c00ac573",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 10,
            "page_width": 612,
            "page_height": 792,
            "content": "Contents\r\nnumthreads: Specifying the Number of Threads . . . . . . . . . . . . 76\r\n#pragma pfor . . . . . . . . . . . . . . . . . . . . . . . . 76\r\nC++ Multiprocessing Considerations With #pragma pfor . . . . . . . . . . 78\r\n#pragma pfor Clauses . . . . . . . . . . . . . . . . . . . . . 79\r\niterate: Specifying the for Loop . . . . . . . . . . . . . . . . . 79\r\nlocal and lastlocal: Specifying Local Variables . . . . . . . . . . . . 80\r\nreduction: Specifying Variables for Reduction . . . . . . . . . . . . . 81\r\naffinity: Thread Affinity . . . . . . . . . . . . . . . . . . . 81\r\naffinity: Data Affinity . . . . . . . . . . . . . . . . . . . . 82\r\nData Affinity for Redistributed Arrays . . . . . . . . . . . . . . . . 83\r\nData Affinity for a Formal Parameter . . . . . . . . . . . . . . . . 84\r\nData Affinity and the #pragma pfor nest Clause . . . . . . . . . . . . 84\r\nnest: Exploiting Nested Concurrency . . . . . . . . . . . . . . . . 85\r\nschedtype: Sharing Loop Iterations Among Processors . . . . . . . . . . 85\r\nchunksize: Specifying the Number of Iterations in a Chunk . . . . . . . . . 88\r\n#pragma pure . . . . . . . . . . . . . . . . . . . . . . . . 89\r\n#pragma set chunksize . . . . . . . . . . . . . . . . . . . . 89\r\n#pragma set numthreads . . . . . . . . . . . . . . . . . . . 90\r\nUsing #pragma set numthreads . . . . . . . . . . . . . . . . 90\r\n#pragma set schedtype . . . . . . . . . . . . . . . . . . . . 90\r\n#pragma shared . . . . . . . . . . . . . . . . . . . . . . . 91\r\n#pragma synchronize . . . . . . . . . . . . . . . . . . . . . 91\r\n10. OpenMP C/C++ API Multiprocessing Directives . . ...... 95\r\nUsing Directives . . . . . . . . . . . . . . . . . . . . . . . . 95\r\nConditional Compilation . . . . . . . . . . . . . . . . . . . . . 96\r\nparallel Construct . . . . . . . . . . . . . . . . . . . . . . 96\r\nx 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/d191383a-64e7-40bc-8795-4824c00ac573.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a15f9afcc91b98cb60f30e4fb0aa12a250460d346f6a04206dae1a1192a777f0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 577
      },
      {
        "segments": [
          {
            "segment_id": "d191383a-64e7-40bc-8795-4824c00ac573",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 10,
            "page_width": 612,
            "page_height": 792,
            "content": "Contents\r\nnumthreads: Specifying the Number of Threads . . . . . . . . . . . . 76\r\n#pragma pfor . . . . . . . . . . . . . . . . . . . . . . . . 76\r\nC++ Multiprocessing Considerations With #pragma pfor . . . . . . . . . . 78\r\n#pragma pfor Clauses . . . . . . . . . . . . . . . . . . . . . 79\r\niterate: Specifying the for Loop . . . . . . . . . . . . . . . . . 79\r\nlocal and lastlocal: Specifying Local Variables . . . . . . . . . . . . 80\r\nreduction: Specifying Variables for Reduction . . . . . . . . . . . . . 81\r\naffinity: Thread Affinity . . . . . . . . . . . . . . . . . . . 81\r\naffinity: Data Affinity . . . . . . . . . . . . . . . . . . . . 82\r\nData Affinity for Redistributed Arrays . . . . . . . . . . . . . . . . 83\r\nData Affinity for a Formal Parameter . . . . . . . . . . . . . . . . 84\r\nData Affinity and the #pragma pfor nest Clause . . . . . . . . . . . . 84\r\nnest: Exploiting Nested Concurrency . . . . . . . . . . . . . . . . 85\r\nschedtype: Sharing Loop Iterations Among Processors . . . . . . . . . . 85\r\nchunksize: Specifying the Number of Iterations in a Chunk . . . . . . . . . 88\r\n#pragma pure . . . . . . . . . . . . . . . . . . . . . . . . 89\r\n#pragma set chunksize . . . . . . . . . . . . . . . . . . . . 89\r\n#pragma set numthreads . . . . . . . . . . . . . . . . . . . 90\r\nUsing #pragma set numthreads . . . . . . . . . . . . . . . . 90\r\n#pragma set schedtype . . . . . . . . . . . . . . . . . . . . 90\r\n#pragma shared . . . . . . . . . . . . . . . . . . . . . . . 91\r\n#pragma synchronize . . . . . . . . . . . . . . . . . . . . . 91\r\n10. OpenMP C/C++ API Multiprocessing Directives . . ...... 95\r\nUsing Directives . . . . . . . . . . . . . . . . . . . . . . . . 95\r\nConditional Compilation . . . . . . . . . . . . . . . . . . . . . 96\r\nparallel Construct . . . . . . . . . . . . . . . . . . . . . . 96\r\nx 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/d191383a-64e7-40bc-8795-4824c00ac573.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a15f9afcc91b98cb60f30e4fb0aa12a250460d346f6a04206dae1a1192a777f0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 577
      },
      {
        "segments": [
          {
            "segment_id": "0461a7c1-6177-42e1-b9b1-773dc5fcb9d7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 11,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nWork–sharing Constructs . . . . . . . . . . . . . . . . . . . . . 97\r\nCombined Parallel Work-sharing Constructs . . . . . . . . . . . . . . . 97\r\nMaster and Synchronization Constructs . . . . . . . . . . . . . . . . 98\r\nData Environment Constructs . . . . . . . . . . . . . . . . . . . 98\r\nDirective Binding . . . . . . . . . . . . . . . . . . . . . . . 99\r\nDirective Nesting . . . . . . . . . . . . . . . . . . . . . . . 100\r\n11. Precompiled Header #pragma Directives . .......... 101\r\n#pragma hdrstop . . . . . . . . . . . . . . . . . . . . . . 101\r\n#pragma no_pch . . . . . . . . . . . . . . . . . . . . . . . 102\r\n#pragma once . . . . . . . . . . . . . . . . . . . . . . . . 102\r\n12. Scalar Optimization #pragma Directives . .......... 103\r\n#pragma mips_frequency_hint . . . . . . . . . . . . . . . . . 103\r\n13. Warning Suppression Control #pragma Directives . . ...... 105\r\n#pragma set woff . . . . . . . . . . . . . . . . . . . . . . 105\r\n#pragma reset woff . . . . . . . . . . . . . . . . . . . . . 106\r\n14. Miscellaneous #pragma Directives . . . .......... 109\r\n#pragma ident . . . . . . . . . . . . . . . . . . . . . . . 109\r\n#pragma int_to_unsigned . . . . . . . . . . . . . . . . . . . 110\r\n#pragma intrinsic . . . . . . . . . . . . . . . . . . . . . . 110\r\n#pragma unknown_control_flow . . . . . . . . . . . . . . . . . 111\r\n15. The Auto-Parallelizing Option (APO) . . .......... 113\r\nIndex . ......................... 115\r\n007–3587–005 xi",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/0461a7c1-6177-42e1-b9b1-773dc5fcb9d7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=aa04093d5861dba041dbc82a37c976ad93ec55fa2d4e9dcef1368e9153ef6e15",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "7281bc4d-7a0f-461a-9900-8f63f8daaa57",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 12,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/7281bc4d-7a0f-461a-9900-8f63f8daaa57.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=44621ea0adba79ffc60ec77840efb73347eecea07d206b7ce9b3d789aa9f1d78",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 437
      },
      {
        "segments": [
          {
            "segment_id": "a71ea089-9eef-447a-b929-46e4927de161",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 13,
            "page_width": 612,
            "page_height": 792,
            "content": "Figures\r\nFigure 9-1 Critical Segment Execution . . . . . . . . . . . . . . . . 65\r\nFigure 9-2 Execution Using Gates . . . . . . . . . . . . . . . . . 67\r\nFigure 9-3 Independent Segment Execution . . . . . . . . . . . . . . 70\r\nFigure 9-4 One Processor Segment . . . . . . . . . . . . . . . . . 72\r\nFigure 9-5 Parallel Code Segments Using #pragma pfor . . . . . . . . . . . 78\r\nFigure 9-6 Loop Scheduling Types . . . . . . . . . . . . . . . . . 87\r\nFigure 9-7 Synchronization . . . . . . . . . . . . . . . . . . . . 93\r\n007–3587–005 xiii",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/a71ea089-9eef-447a-b929-46e4927de161.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1bc9c832631388ef6a2912d7de057a45a19cd849480f9f02b3b9e66cae6265b1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "5f964c8b-e80f-4fa6-b58b-ff5239a8ffe5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 14,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/5f964c8b-e80f-4fa6-b58b-ff5239a8ffe5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e5f1c0c1f5bdac1094c8c0566df6d2992044820c313e0cb006cefbf3eba8c038",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9ac49ba7-79f1-4264-9312-6b83c802dcc7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 15,
            "page_width": 612,
            "page_height": 792,
            "content": "Tables\r\nTable 1-1 SGI #pragma Directives . . . .............. 2\r\nTable 2-1 #pragma Analyzer Directives . . . . . . . . . . . . . . . . 11\r\nTable 3-1 C++ Template Instantiation #pragma Directives . . . . . . . . . . 17\r\nTable 4-1 Data Layout #pragma Directives . . . . . . . . . . . . . . . 21\r\nTable 5-1 Distributed Shared Memory #pragma Directives . . . . . . . . . . 25\r\nTable 6-1 Inlining #pragma Directives . . . . . . . . . . . . . . . . 35\r\nTable 7-1 Loader Information #pragma Directives . . . . . . . . . . . . 41\r\nTable 8-1 Loop Nest Optimization #pragma Directives . . . . . . . . . . . 49\r\nTable 8-2 Clauses for #pragma prefetch_ref . . . . . . . . . . . . 57\r\nTable 9-1 Multiprocessing #pragma Directives . . . . . . . . . . . . . . 61\r\nTable 9-2 Choosing a schedtype . . . . . . . . . . . . . . . . . . 88\r\nTable 11-1 Precompiled Header #pragma Directives . . . . . . . . . . . . 101\r\nTable 12-1 Scalar Optimization #pragma Directives . . . . . . . . . . . . 103\r\nTable 13-1 Warning Suppression Control #pragma Directives . . . . . . . . . 105\r\nTable 14-1 Miscellaneous #pragma Directives . . . . . . . . . . . . . . 109\r\n007–3587–005 xv",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/9ac49ba7-79f1-4264-9312-6b83c802dcc7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=52550408f50977ffcdcc13a88d8724100eb03b0e6b6de8eae4d1f693ae700256",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f6969b58-ec99-48a2-9cc4-c35811be6998",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 16,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/f6969b58-ec99-48a2-9cc4-c35811be6998.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=de62cf8130e746293ca251fad71ee3d239f26087bb4a755fbff2368534bf6a36",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 449
      },
      {
        "segments": [
          {
            "segment_id": "3cc82e22-407f-4349-93f9-51f122cac434",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 17,
            "page_width": 612,
            "page_height": 792,
            "content": "Examples\r\nExample 1-1 #pragma form ................... 1\r\nExample 1-2 _Pragma form ................... 1\r\nExample 2-1 concurrent call: ignoring dependences . . . . . . . . . . 13\r\nExample 2-2 concurrent call: illegal assertion use . . . . . . . . . . . 13\r\nExample 4-1 #pragma align_symbol . . . . . . . . . . . . . . . . 22\r\nExample 4-2 #pragma fill_symbol . . . . . . . . . . . . . . . . 23\r\nExample 5-1 #pragma distribute . . . . . . . . . . . . . . . . 27\r\nExample 5-2 #pragma distribute_reshape . . . . . . . . . . . . . 30\r\nExample 5-3 #pragma page_place . . . . . . . . . . . . . . . . 32\r\nExample 5-4 #pragma redistribute . . . . . . . . . . . . . . . . 34\r\nExample 6-1 Using the here keyword with the #pragma noinline directive . . . 37\r\nExample 6-2 Using the here keyword with the #pragma inline and #pragma noinline\r\ndirectives . . . . . . . . . . . . . . . . . . . . . . . . . . 38\r\nExample 6-3 Using the global keyword with the #pragma inline directive . . . 38\r\nExample 6-4 Using the routine keyword with the #pragma inline directive . . . 39\r\nExample 6-5 Using the routine keyword with the #pragma noinline directive . . 40\r\nExample 8-1 #pragma blocking size . . . . . . . . . . . . . . . 51\r\nExample 8-2 #pragma ivdep . . . . . . . . . . . . . . . . . . 54\r\nExample 8-3 #pragma unroll . . . . . . . . . . . . . . . . . . 59\r\nExample 9-1 #pragma exit gate and #pragma enter gate . . . . . . . . 68\r\nExample 9-2 #pragma parallel . . . . . . . . . . . . . . . . . 73\r\nExample 9-3 iterate clause . . . . . . . . . . . . . . . . . . . 80\r\nExample 9-4 Data affinity . . . . . . . . . . . . . . . . . . . . 82\r\nExample 9-5 Nested pfor . . . . . . . . . . . . . . . . . . . . 84\r\n007–3587–005 xvii",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/3cc82e22-407f-4349-93f9-51f122cac434.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=93575dc9e9cee2c92c5c8bafcf5de5e7240b0e6aa40d396e9516c7cab36afc1a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f8512465-6720-41df-aad3-c65c64ce9967",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 18,
            "page_width": 612,
            "page_height": 792,
            "content": "Contents\r\nExample 13-1 #pragma set woff . . . . . . . . . . . . . . . . . 106\r\nExample 13-2 #pragma reset woff . . . . . . . . . . . . . . . . 107\r\nxviii 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/f8512465-6720-41df-aad3-c65c64ce9967.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=74aa8fe850e0b2faadbf150d85f640c47f9a94a79f97d6987af9407c6c1aa728",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 503
      },
      {
        "segments": [
          {
            "segment_id": "3f4ccea2-2521-41c6-ab67-83dc4f551a26",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 19,
            "page_width": 612,
            "page_height": 792,
            "content": "About This Manual\r\nThis publication documents the #pragma directives that are supported for the 7.4\r\nrelease of the SGI MIPSpro C and C++ compilers. The pragma directives are used\r\nwithin the source program to request special processing. Although pragmas are part\r\nof the C/C++ language, the meaning of the pragma is implementation-specific.\r\nRelated Publications\r\nThe following documents contain information that may be helpful in porting code to\r\nthe newer SGI compilers:\r\n• MIPS O32 Compiling and Performance Tuning Guide\r\n• MIPSpro N32/64 Compiling and Performance Tuning Guide\r\n• MIPSpro N32 ABI Handbook\r\n• MIPSpro 64-Bit Porting and Transition Guide\r\nThe following documents contain information about SGI’s implementation of C and\r\nC++:\r\n• C Language Reference Manual\r\n• C++ Programmer’s Guide\r\nSeveral performance evaluation and debugging tools are available to help you\r\noptimize and evaluate your code. See the ProDev WorkShop: Overview for a\r\ndescription of the different tools that are available.\r\nSee the Guides to SGI Compilers and Compiling Tools for an overview of all SGI\r\ncompilers, compiler documentation, optimization tools, porting tools, and\r\nperformance tools.\r\nIn addition to the above SGI documentation, several third party documents contain\r\nadditional information which may be helpful. These books can be ordered from any\r\nbook vendor:\r\n• Bjarne Stroustrup. The C++ Programming Language. Addison-Wesley Publishing\r\nCompany, special edition, 2000. ISBN 0201700735.\r\n007–3587–005 xix",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/3f4ccea2-2521-41c6-ab67-83dc4f551a26.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=db8e721ff58d6e4305dc57386ebf3d12fef328922c467cf2b20089f3fd58bec0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a0c2ae46-456a-4ff8-8421-54437aefb8ef",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 20,
            "page_width": 612,
            "page_height": 792,
            "content": "About This Manual\r\n• Josuttis, Nicolai. The C++ Standard Library: A Tutorial and Reference.\r\nAddison-Wesley Publishing Company, 1999. ISBN 0201379260.\r\n• The C++ Standard, ISO/IEC 14882, Information Technology — Programming\r\nLanguages — C++ is available from the American Standards Institute at\r\nhttp://www.ansi.org.\r\nObtaining Publications\r\nYou can obtain SGI documentation in the following ways:\r\n• See the SGI Technical Publications Library at http://docs.sgi.com. Various\r\nformats are available. This library contains the most recent and most\r\ncomprehensive set of online books, release notes, man pages, and other\r\ninformation.\r\n• If it is installed on your SGI system, you can use InfoSearch, an online tool that\r\nprovides a more limited set of online books, release notes, and man pages. With\r\nan IRIX system, select Help from the Toolchest, and then select InfoSearch. Or\r\nyou can type infosearch on a command line.\r\n• You can also view release notes by typing either grelnotes or relnotes on a\r\ncommand line.\r\n• You can also view man pages by typing man title on a command line.\r\nConventions\r\nThe following conventions are used throughout this document:\r\nConvention Meaning\r\ncommand This fixed-space font denotes literal items such as\r\ncommands, files, routines, path names, signals,\r\nmessages, and programming language structures.\r\nvariable Italic typeface denotes variable entries and words or\r\nconcepts being defined.\r\nuser input This bold, fixed-space font denotes literal items that the\r\nuser enters in interactive sessions. (Output is shown in\r\nnonbold, fixed-space font.)\r\nxx 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/a0c2ae46-456a-4ff8-8421-54437aefb8ef.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2584be6116b5b8a96d63a797a5edf918b1e93018aac24c45f5bd8f1a2768e2b9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 458
      },
      {
        "segments": [
          {
            "segment_id": "859a2ca5-6285-46ed-8b1b-efcbe7764a11",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 21,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n[ ] Brackets enclose optional portions of a command or\r\ndirective line.\r\n... Ellipses indicate that a preceding element can be\r\nrepeated.\r\nReader Comments\r\nIf you have comments about the technical accuracy, content, or organization of this\r\npublication, contact SGI. Be sure to include the title and document number of the\r\npublication with your comments. (Online, the document number is located in the\r\nfront matter of the publication. In printed publications, the document number is\r\nlocated at the bottom of each page.)\r\nYou can contact SGI in any of the following ways:\r\n• Send e-mail to the following address:\r\ntechpubs@sgi.com\r\n• Use the Feedback option on the Technical Publications Library Web page:\r\nhttp://docs.sgi.com\r\n• Contact your customer service representative and ask that an incident be filed in\r\nthe SGI incident tracking system.\r\n• Send mail to the following address:\r\nTechnical Publications\r\nSGI\r\n1600 Amphitheatre Parkway, M/S 535\r\nMountain View, California 94043–1351\r\n• Send a fax to the attention of “Technical Publications” at +1 650 932 0801.\r\nSGI values your comments and will respond to them promptly.\r\n007–3587–005 xxi",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/859a2ca5-6285-46ed-8b1b-efcbe7764a11.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5f7f54be3d7d7855ac0f37e656107a97d36839a81cb81627c1dd623395a4015e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "4a323bb5-cb2a-4c31-a694-f0f7ac5f90c2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 22,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/4a323bb5-cb2a-4c31-a694-f0f7ac5f90c2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6c9640edbdb3804cfedfcc31adb9785040b1d3866f072ed4f098592f57228fe5",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "bb89a610-a9dc-4147-b57d-eeae6e1cf17b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 23,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 1\r\nAlphabetical Listing of Directives\r\n#pragma directives are used within the source program to request certain kinds of\r\nspecial processing. #pragma directives are part of the C and C++ languages, but the\r\nmeaning of any #pragma directive is defined by the implementation.\r\n#pragma directives are expressed in the following form:\r\n#pragma identifier [arguments]\r\nCompiler directives can also be specified in the following form, which has the\r\nadvantage in that it can appear inside macro definitions:\r\n_Pragma(\"identifier\");\r\nThis form has the same effect as using the #pragma form, except that everything that\r\nappeared on the line following the #pragma must now appear inside the double\r\nquotation marks and parentheses. The expression inside the parentheses must be a\r\nsingle string literal, but it cannot be a macro that expands into a string literal.\r\n_Pragma is a SGI extension to the C and C++ standards.\r\nExample 1-1 #pragma form\r\nThe following is an example using the #pragma form:\r\n#pragma ivdep\r\n#pragma parallel local(i, j, k) \\\r\nshared(a, b, c)\r\nExample 1-2 _Pragma form\r\nThe following is the same example using the alternative form:\r\n_Pragma(\"ivdep\")\r\n_Pragma(\"parallel local(i, j, k) \\\r\nshared(a, b, c)\")\r\nMacro expansion occurs on the directive line after the directive name. (That is, macro\r\nexpansion is applied only to arguments.) For example, if NUM_CHUNKS is a macro\r\ndefined as the value 8, the original code is as follows:\r\n#define NUM_CHUNKS 8\r\n_Pragma(\"parallel numchunks(NUM_CHUNKS)\")\r\n007–3587–005 1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/bb89a610-a9dc-4147-b57d-eeae6e1cf17b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c69d664332c44fc4bdc8a78e4a4ccd6722af7b1dd092ae9fdb3bbcb0ac341fd8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 418
      },
      {
        "segments": [
          {
            "segment_id": "21a5f1d5-d688-4e04-9129-cc564150bec9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 24,
            "page_width": 612,
            "page_height": 792,
            "content": "1: Alphabetical Listing of Directives\r\nTable 1-1, page 2, is an alphabetical list of SGI supported #pragma directives, with a\r\nshort description of each and a link to the chapter where the directive is discussed.\r\nTable 1-1 SGI #pragma Directives\r\n#pragma Short Description Functional Group\r\naggressive inner loop\r\nfission\r\nFission inner loops into as many loops as\r\npossible.\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nalign_symbol Specifies alignment of user variables,\r\ntypically at cache-line or page boundaries.\r\nChapter 4, \"Data Layout\r\n#pragma Directives\", page\r\n21\r\nblocking size Sets the blocksize of the specified loop that\r\nis involved in a blocking for the primary\r\n(secondary) cache.\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\ncan_instantiate Indicates that the specified declaration can\r\nbe instantiated in the current compilation,\r\nbut need not be.\r\nChapter 3, \"C++\r\nInstantiation #pragma\r\nDirectives\", page 17\r\nconcurrent Tells the compiler to ignore assumed\r\ndependences in the following loop.\r\nChapter 2, \"Automatic\r\nParallelization #pragma\r\nDirectives\", page 11\r\nconcurrent call Tells the compiler that the function calls in\r\nthe following loop are safe to execute in\r\nparallel.\r\nChapter 2, \"Automatic\r\nParallelization #pragma\r\nDirectives\", page 11\r\nconcurrentize Tells the compiler to parallelize the next\r\nloop, overriding any #pragma no\r\nconcurrentize directive that may apply\r\nto that loop.\r\nChapter 2, \"Automatic\r\nParallelization #pragma\r\nDirectives\", page 11\r\ncopyin Copies the value from the master thread’s\r\nversion of an -Xlocal-linked global\r\nvariable into the slave thread’s version.\r\nChapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\ncritical Protects access to critical statements. Chapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\n2 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/21a5f1d5-d688-4e04-9129-cc564150bec9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b5ba43a9838c1c896f398d006c7a7dcb22d0313dbb9eb168664c7cfdcde75eca",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d414d80c-2004-408c-8685-b4b85457e03c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 25,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma Short Description Functional Group\r\ndistribute Specifies data distribution. Chapter 5, \"DSM\r\nOptimization #pragma\r\nDirectives\", page 25\r\ndistribute_reshape Specifies data distribution with reshaping. Chapter 5, \"DSM\r\nOptimization #pragma\r\nDirectives\", page 25\r\ndo_not_instantiate Prevents instantiation of the specific\r\ndeclaration in this compilation unit, even if\r\nthat instance is used in the code.\r\nChapter 3, \"C++\r\nInstantiation #pragma\r\nDirectives\", page 17\r\ndynamic Tells the compiler that the specified array\r\nmay be redistributed in the program.\r\nChapter 5, \"DSM\r\nOptimization #pragma\r\nDirectives\", page 25\r\nenter gate Indicates the point that all threads must\r\nclear before any threads are allowed to pass\r\nthe corresponding #pragma exit gate.\r\nChapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\nexit gate Stops threads from passing this point until\r\nall threads have cleared the corresponding\r\n#pragma enter gate.\r\nChapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\nfill_symbol Tells the compiler to insert any necessary\r\npadding to ensure that the user variable\r\ndoes not share a cache-line with any other\r\nsymbol.\r\nChapter 4, \"Data Layout\r\n#pragma Directives\", page\r\n21\r\nfission Fission the enclosing specified levels of\r\nloops after this directive.\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nfissionable Disables validity testing. Chapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nfusable Disables validity testing. Chapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nfuse Fuse the following specified number of\r\nloops, which must be immediately adjacent.\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\n007–3587–005 3",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/d414d80c-2004-408c-8685-b4b85457e03c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=50ab7e7fd67faf4bfd2ba8264f49416808f3f3c23db56030b355ce537dd27178",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 500
      },
      {
        "segments": [
          {
            "segment_id": "599e7be9-f0e2-4fd9-aeea-33ef3914708d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 26,
            "page_width": 612,
            "page_height": 792,
            "content": "1: Alphabetical Listing of Directives\r\n#pragma Short Description Functional Group\r\nhdrstop Indicates the point at which the\r\nprecompiled header mechanism snapshots\r\nthe headers. If -pch is off, #pragma\r\nhdrstop is ignored.\r\nChapter 11, \"Precompiled\r\nHeader #pragma\r\nDirectives\", page 101\r\nhidden Tells the compiler that the specified\r\nsymbols are invisible to all executables or\r\nDSOs except the current one.\r\nChapter 7, \"Loader\r\nInformation #pragma\r\nDirectives\", page 41\r\nident Adds a .comment section in the object file\r\nand puts the revision string inside the\r\n.comment section.\r\nChapter 14, \"Miscellaneous\r\n#pragma Directives\", page\r\n109\r\nindependent Tells the compiler to run an independent\r\ncode section in parallel with the rest of the\r\ncode in the parallel region.\r\nChapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\ninline\r\n{here|routine|global}]\r\nTells the compiler to inline the named\r\nfunctions. Keywords: here (next statement\r\nonly), routine (rest of routine or until\r\ncorresponding noinline is found), and\r\nglobal (entire file, or until corresponding\r\nnoinline is found).\r\nChapter 6, \"Inlining\r\n#pragma Directives\", page\r\n35\r\ninstantiate Causes a specified instance of a template\r\ndeclaration to be immediately instantiated\r\nat that spot.\r\nChapter 3, \"C++\r\nInstantiation #pragma\r\nDirectives\", page 17\r\nint_to_unsigned Identifies the specified function name as a\r\nfunction whose type was int in a previous\r\nrelease of the compilation system, but\r\nwhose type is unsigned int in the\r\nMIPSpro compiler release.\r\nChapter 14, \"Miscellaneous\r\n#pragma Directives\", page\r\n109\r\ninternal Tells the compiler that the specified\r\nsymbols are not referenced outside the\r\ncurrent executable or DSO.\r\nChapter 7, \"Loader\r\nInformation #pragma\r\nDirectives\", page 41\r\nintrinsic Allows certain preselected functions from\r\nmath.h, stdio.h, and string.h to be\r\ninlined at a callsite for execution efficiency.\r\nChapter 14, \"Miscellaneous\r\n#pragma Directives\", page\r\n109\r\n4 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/599e7be9-f0e2-4fd9-aeea-33ef3914708d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=37c7d4423e941163c66dd31205b1f432b9e0c94b50aa9a34474d304ab513c566",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 278
      },
      {
        "segments": [
          {
            "segment_id": "5af0fd52-ff5e-47fa-92f3-7f40d9356255",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 27,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma Short Description Functional Group\r\nivdep Liberalizes dependence analysis. This\r\napplies only to inner loops. Given two\r\nmemory references, where at least one is\r\nloop variant, ignore any loop-carried\r\ndependences between the two references.\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nlocal Tells the compiler the names of all the\r\nvariables that must be local to each thread.\r\nChapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\nmips_frequency_hint\r\n{NEVER|INIT}\r\nSpecifies the expected frequency of\r\nexecution so the compiler can move\r\nexception code and initialization code into\r\nseparate pages to minimize working set\r\nsize.\r\nChapter 12, \"Scalar\r\nOptimization #pragma\r\nDirectives\", page 103\r\nno blocking Prevents the compiler from involving this\r\nloop in cache blocking.\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nno concurrentize Varies with placement. Tells the compiler\r\nto not parallelize any loops in a subroutine\r\nor file.\r\nChapter 2, \"Automatic\r\nParallelization #pragma\r\nDirectives\", page 11\r\nno_delete Inhibits deletion of functions that are never\r\nreferenced.\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nno fission Keeps the following loop from being\r\nfissioned. Its innermost loops, however, are\r\nallowed to be fissioned.\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nno fusion Keeps the following loop from being fused\r\nwith other loops.\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nno interchange Prevents the compiler from involving the\r\nloop directly following this directive (or\r\nany loop nested within this loop) in an\r\ninterchange.\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nno side effects Tells the compiler to assume that all of the\r\nnamed functions are safe to execute\r\nconcurrently.\r\nChapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\n007–3587–005 5",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/5af0fd52-ff5e-47fa-92f3-7f40d9356255.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6a9ce98b81d73d7f16c23de56ed389be4f38ce289cf11b31adae92fd209edb81",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 279
      },
      {
        "segments": [
          {
            "segment_id": "379d89c3-a6e7-441c-9974-4ca83a4d48ea",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 28,
            "page_width": 612,
            "page_height": 792,
            "content": "1: Alphabetical Listing of Directives\r\n#pragma Short Description Functional Group\r\nno_pch Disables the precompiled header\r\nmechanism.\r\nChapter 11, \"Precompiled\r\nHeader #pragma\r\nDirectives\", page 101\r\nnoinline\r\n{here|routine|global}\r\nTells the compiler not to inline the named\r\nfunctions. Keywords: here (next statement\r\nonly), routine (rest of routine or until\r\ncorresponding inline is found), and\r\nglobal (entire file, or until corresponding\r\ninline is found).\r\nChapter 6, \"Inlining\r\n#pragma Directives\", page\r\n35\r\nonce Ensures (in -n32 and -64 mode) that each\r\ninclude file is included at most one time\r\nin each compilation unit.\r\nChapter 11, \"Precompiled\r\nHeader #pragma\r\nDirectives\", page 101\r\none processor Causes next statement to be executed on\r\nonly one processor.\r\nChapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\noptional Tells the linker that the specified symbols\r\nare optional. This is the basic mechanism\r\nused for adding extensions to a library that\r\ncan then be queried.\r\nChapter 7, \"Loader\r\nInformation #pragma\r\nDirectives\", page 41\r\npack Controls the layout of structure offsets,\r\nsuch that the strictest alignment for any\r\nstructure member will be n bytes, where n\r\nis 0, 1, 2, 4, 8, or 16. When n is 0, the\r\ncompiler returns to default alignment for\r\nany subsequent struct definitions.\r\nChapter 4, \"Data Layout\r\n#pragma Directives\", page\r\n21\r\npage_place Controls the placement of data on a DSM\r\n(distributed shared memory) machine.\r\nChapter 5, \"DSM\r\nOptimization #pragma\r\nDirectives\", page 25\r\npermutation The specified array is a permutation array. Chapter 2, \"Automatic\r\nParallelization #pragma\r\nDirectives\", page 11\r\nparallel Starts a parallel region. Chapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\n6 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/379d89c3-a6e7-441c-9974-4ca83a4d48ea.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=185573ad3f65b31a0c9d1a9b24cfb501a1c2e915d56ef83963b951fc51c3bb06",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9a2aa3b7-4866-4cd4-87f1-35f7ba2bf1b5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 29,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma Short Description Functional Group\r\npfor Marks a for loop to run in parallel. Chapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\nprefer concurrent Tells the compiler to parallelize the\r\nfollowing loop if it is safe.\r\nChapter 2, \"Automatic\r\nParallelization #pragma\r\nDirectives\", page 11\r\nprefer serial Tells the compiler not to parallelize the\r\nfollowing loop.\r\nChapter 2, \"Automatic\r\nParallelization #pragma\r\nDirectives\", page 11\r\nprefetch Controls prefetching for each level of the\r\ncache.\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nprefetch_manual Specifies whether manual prefetches\r\n(through #pragma directives) should be\r\nrespected or ignored.\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nprefetch_ref Generates a prefetch and connects it to the\r\nspecified reference (if possible).\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nprefetch_ref_disable Explicitly disables prefetching for the\r\nspecified reference.\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nprotected Tells the compiler that the specified\r\nsymbols are not preemptible.\r\nChapter 7, \"Loader\r\nInformation #pragma\r\nDirectives\", page 41\r\npure Tells the compiler that a call to named\r\nfunctions has no side effects and its return\r\nvalue depends on the values of its\r\narguments.\r\nChapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\nredistribute Specifies dynamic data redistribution. Chapter 5, \"DSM\r\nOptimization #pragma\r\nDirectives\", page 25\r\n007–3587–005 7",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/9a2aa3b7-4866-4cd4-87f1-35f7ba2bf1b5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e9d9adf65e45cfb7de3ea30cac2e6ef19f665490f49fee6e90d45242a9b673eb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 466
      },
      {
        "segments": [
          {
            "segment_id": "4a9d94d4-c901-4fae-9ee1-46328e6f261b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 30,
            "page_width": 612,
            "page_height": 792,
            "content": "1: Alphabetical Listing of Directives\r\n#pragma Short Description Functional Group\r\nreset woff Resets listed warnings to the state specified\r\nin the command line.\r\nChapter 13, \"Warning\r\nSuppression Control\r\n#pragma Directives\", page\r\n105\r\nsection_gp Causes an object to be placed in a\r\ngp_relative section.\r\nChapter 7, \"Loader\r\nInformation #pragma\r\nDirectives\", page 41\r\nsection_non_gp Keeps an object from being placed in a\r\ngp_relative section.\r\nChapter 7, \"Loader\r\nInformation #pragma\r\nDirectives\", page 41\r\nserial Forces the loop immediately following it to\r\nbe serial, and restricts optimization by\r\nforcing all enclosing loops to be serial also.\r\nChapter 2, \"Automatic\r\nParallelization #pragma\r\nDirectives\", page 11\r\nset chunksize Tells the compiler which values to use for\r\nchunksize.\r\nChapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\nset numthreads Tells the compiler which values to use for\r\nnumthreads.\r\nChapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\nset schedtype Tells the compiler which values to use for\r\nschedtype.\r\nChapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\nset woff Suppresses listed compiler warnings. Chapter 13, \"Warning\r\nSuppression Control\r\n#pragma Directives\", page\r\n105\r\nshared Tells the compiler the names of all the\r\nvariables that the threads must share.\r\nChapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\nsynchronize Stops threads until all threads reach this\r\npoint. This directive is a classic barrier\r\nconstruct.\r\nChapter 9, \"Multiprocessing\r\n#pragma Directives\", page\r\n61\r\n8 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/4a9d94d4-c901-4fae-9ee1-46328e6f261b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3d160bfdad1d51c65a1e854027c994f2cd55676616f7625ada83f42a497e7b35",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c22d070d-ebf4-487a-8b36-0bc362ddf9e0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 31,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma Short Description Functional Group\r\nunknown_control_flow Indicates which procedures have a\r\nnonstandard control flow behavior.\r\nChapter 14, \"Miscellaneous\r\n#pragma Directives\", page\r\n109\r\nunroll Suggests to the compiler that n-1 copies of\r\nthe loop body be added to the inner loop.\r\nIf the loop following this directive is an\r\ninner loop, then it indicates standard\r\nunrolling (version 7.2 and later). If the loop\r\nfollowing this directive is not innermost,\r\nthen outer loop unrolling (unroll and jam)\r\nis performed (version 7.0 and later).\r\nChapter 8, \"Loop Nest\r\nOptimization #pragma\r\nDirectives\", page 49\r\nweak weak_symbol = strong_symbol Sets weak_symbol to be an alias for the\r\nfunction or data object denoted by\r\nstrong_symbol, unless a defining declaration\r\nfor weak_symbol is encountered at static link\r\ntime. If encountered, the defining\r\ndeclaration preempts the weak denotation.\r\nChapter 7, \"Loader\r\nInformation #pragma\r\nDirectives\", page 41\r\nweak weak_symbol Tells the link editor not to issue a warning\r\nif it does not find a defining declaration of\r\nweak_symbol. Also allows the overriding of\r\na current definition by a non-weak\r\ndefinition.\r\nChapter 7, \"Loader\r\nInformation #pragma\r\nDirectives\", page 41\r\n007–3587–005 9",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/c22d070d-ebf4-487a-8b36-0bc362ddf9e0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=60e9a507dc6d9be170db3a6786c12c6d9cf8c52b3abc02739e0f96e255b06ba8",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6e33e5e6-a08b-4734-a8a7-e91c25c57ef5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 32,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/6e33e5e6-a08b-4734-a8a7-e91c25c57ef5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=197a36bcf448f1f3d238436df9b4cc60d5e6f71a9ddc3cc52939cdf732d13111",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 402
      },
      {
        "segments": [
          {
            "segment_id": "587a5d12-9720-4a25-a388-924748c03742",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 33,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 2\r\nAutomatic Parallelization #pragma Directives\r\nTable 2-1 lists the #pragma directives discussed in this chapter, along with a brief\r\ndescription of each and the compiler versions in which the directive is supported.\r\nTable 2-1 #pragma Analyzer Directives\r\n#pragma Short Description\r\nCompiler\r\nVersions\r\n#pragma concurrent Tells the compiler to ignore assumed dependences in the\r\nnext loop.\r\n7.2 and later\r\n#pragma concurrent call Tells the compiler that the function calls in the next loop\r\nare safe to execute in parallel.\r\n7.2 and later\r\n#pragma concurrentize Tells the compiler to parallelize the next loop, overriding\r\nany #pragma no concurrentize directive that may\r\napply to that loop.\r\n7.2 and later\r\n#pragma no concurrentize Varies with placement. Tells the compiler to not\r\nparallelize any loops in a function or file.\r\n7.2 and later\r\n#pragma permutation The specified array is a permutation array. 7.2 and later\r\n#pragma prefer concurrent Tells the compiler to parallelize the next loop if it is safe. 7.2 and later\r\n#pragma prefer serial Tells the compiler to not parallelize the next loop. 7.2 and later\r\n#pragma serial Forces the loop immediately following it to be serial, and\r\nrestricts optimization by forcing all enclosing loops to be\r\nserial also.\r\n7.2 and later\r\n#pragma concurrent\r\nThe #pragma concurrent directive instructs the compiler, when analyzing the loop\r\nimmediately following this assertion, to ignore all dependences between two\r\nreferences to the same array.\r\nThe syntax of #pragma concurrent is as follows:\r\n007–3587–005 11",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/587a5d12-9720-4a25-a388-924748c03742.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=53fba8842fea91a923d6a3c4502db47ccfcc31a58ae438df68170c961f8c8b85",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "8454eb7d-150b-45ab-a123-1b4da6654d4e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 34,
            "page_width": 612,
            "page_height": 792,
            "content": "2: Automatic Parallelization #pragma Directives\r\n#pragma concurrent\r\nWhen using this directive, be aware of the following:\r\n• If multiple loops in a nest can be parallelized, #pragma concurrent instructs\r\nthe compiler to parallelize the loop immediately following the directive.\r\n• Applying this directive to an inner loop may cause the loop to be made outermost\r\nby the compiler’s loop interchange operations.\r\n• #pragma concurrent does not affect how the compiler analyzes function calls.\r\nSee \"#pragma concurrent call\", page 12.\r\n• #pragma concurrent does not affect how the compiler analyzes dependences\r\nbetween two potentially aliased pointers.\r\n• If there are real dependences between array references, #pragma concurrent\r\nmay cause the compiler to generate incorrect code.\r\n#pragma concurrent call\r\nThe #pragma concurrent call directive instructs the compiler to ignore the\r\ndependences of any function calls contained in the loop that follows the directive.\r\nThe syntax for #pragma concurrent call is as follows:\r\n#pragma concurrent call\r\nThis directive applies to the loop that immediately follows it and to all loops nested\r\ninside that loop.\r\nTo prevent incorrect parallelization, make sure the following conditions are met when\r\nusing #pragma concurrent call:\r\n• A function inside the loop cannot read from a location that is written to during\r\nanother iteration. This rule does not apply to a location that is a local variable\r\ndeclared inside the function.\r\n• A function inside the loop cannot write to a location that is read from or written\r\nto during another iteration. This rule does not apply to a location that is a local\r\nvariable declared inside the function.\r\n12 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/8454eb7d-150b-45ab-a123-1b4da6654d4e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=22be1ea2a0e9f2644e2a51d147ccbb7e963e23e058ff84fcc8253528535206f0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 500
      },
      {
        "segments": [
          {
            "segment_id": "6182c0cd-1b18-4ca7-9f96-83729e36b693",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 35,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nExample 2-1 concurrent call: ignoring dependences\r\nIn this example the compiler ignores the dependences in the function fred() when it\r\nanalyzes the following loop:\r\n#pragma concurrent call\r\nfor (i = 0; i < N; i++0\r\n{\r\nfred(...)\r\n...\r\n}\r\nvoid fred (...)\r\n{\r\n...\r\n}\r\nExample 2-2 concurrent call: illegal assertion use\r\nThe following code shows an illegal use of the assertion. Function fred() writes to\r\nvariable T, which is also read by wilma() during other iterations.\r\nfloat A[M], B[M];\r\nint i, T;\r\n#pragma concurrent call\r\nfor (i = 0; i < M; i++)\r\n{\r\nfred(B, i, &T);\r\nwilma(A, i, &T);\r\n}\r\nvoid fred(float B[], int i, int* T)\r\n{\r\n*T = B[i];\r\n}\r\nvoid wilma(float A[], int i, int* T)\r\n{\r\nA[i] = *T;\r\n}\r\n007–3587–005 13",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/6182c0cd-1b18-4ca7-9f96-83729e36b693.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=573474c7d3db1910890b4818166220425ded552f8da724e70fca7f340be80e84",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "90e2a395-881f-4690-858f-814841d0ab53",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 36,
            "page_width": 612,
            "page_height": 792,
            "content": "2: Automatic Parallelization #pragma Directives\r\nBy localizing the variable T, you can manually parallelize the preceding example\r\nsafely. But the compiler is not instructed to localize T, and the loop is illegally\r\nparallelized because of the assertion.\r\n#pragma concurrentize\r\nThe #pragma concurrentize directive instructs the compiler to parallelize an\r\nentire file or function.\r\nThe syntax of #pragma concurrentize is as follows:\r\n#pragma concurrentize\r\nPlacing the #pragma concurrentize directive inside a function overrides a\r\n#pragma no concurrentize directive placed outside of it. In other words, this\r\ndirective allows you to selectively parallelize functions in a file that has been made\r\nsequential with #pragma no concurrentize.\r\nThis directive works only with the MIPSpro APO option.\r\n#pragma no concurrentize\r\nThe #pragma no concurrentize directive prevents parallelization of a file or\r\nfunction.\r\nThe syntax of #pragma no concurrentize is as follows:\r\n#pragma no concurrentize\r\nThe effect of #pragma no concurrentize depends on its placement:\r\n• When placed inside a function, the directive prevent its parallelization.\r\n• When placed outside of a function, #pragma no concurrentize prevents the\r\nparallelization of all functions in the file, even those that appear ahead of it in the\r\nfile.\r\nThis directive works only with the MIPSpro APO option.\r\n14 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/90e2a395-881f-4690-858f-814841d0ab53.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8befaa477920b1a6577cd79af847bdb39b7d08ee8fceb57d59d3cb953594d775",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 334
      },
      {
        "segments": [
          {
            "segment_id": "b2f81491-7a6a-4bd1-badb-246c1f3e7295",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 37,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma permutation\r\nWhen placed inside a function, the #pragma permutation directive instructs the\r\ncompiler that the specified array is a permutation array.\r\nThe syntax of #pragma permutation is as follows:\r\n#pragma permutation [array]\r\narray is the name of a permutation array. Every element of array has a distinct value.\r\nThe directive does not require the permutation array to be dense. In other words,\r\nwhile every array[1] must have a distinct value, there can be gaps between those\r\nvalues, such as array[1] = 1, array[2] = 4, array[3] = 9, and so on.\r\nYou can use this assertion to parallelize loops that use arrays for indirect addressing.\r\nWithout this directive, the compiler cannot determine that the array elements used as\r\nindexes are distinct.\r\nThe #pragma permutation directive affects every loop in a function, even those\r\nthat precede it.\r\n#pragma prefer concurrent\r\nThe #pragma prefer concurrent directive instructs the compiler to parallelize\r\nthe loop immediately following the directive, if it is safe to do so.\r\nThe syntax of the #pragma prefer concurrent directive is as follows:\r\n#pragma prefer concurrent\r\nThis pragma is always safe to use. The compiler parallelizes the loop only when it\r\ncan determine that it is safe to do so.\r\nWhen dealing with nested loops, the compiler follows these guidelines:\r\n• If the loop specified by this directive is safe to parallelize, the compiler chooses it\r\nto parallelize, even if other loops are also candidates for parallelization.\r\n• If the specified loop is not safe to parallelize, the compiler uses its heuristics to\r\nchoose among loops that are safe.\r\n007–3587–005 15",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/b2f81491-7a6a-4bd1-badb-246c1f3e7295.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9c36bc6b1ef00527925afed8d714149f6d47db67b1b6b991903708ce42dae5cc",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "2b3207b9-8438-44a3-873d-3ed0b1fab30d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 38,
            "page_width": 612,
            "page_height": 792,
            "content": "2: Automatic Parallelization #pragma Directives\r\n• If this directive is applied to an inner loop, the compiler may make it the\r\noutermost loop.\r\n• If this assertion is applied to more than one loop in a nest, the compiler uses its\r\nheuristics to choose one of the specified loops.\r\nThis directive works only with the MIPSpro APO option.\r\n#pragma prefer serial\r\nThe #pragma prefer serial directive instructs the compiler to not parallelize the\r\nloop that immediately follows it. It performs in the same way as the\r\n#pragma serial directive.\r\nThe syntax of #pragma prefer serial is as follows:\r\n#pragma prefer serial\r\nThis directive works only with the MIPSpro APO option.\r\n#pragma serial\r\nThe #pragma serial directive instructs the compiler to not parallelize the loop\r\nfollowing the assertion. However, the compiler may parallelize another loop in the\r\nsame nest. The parallelized loop may be either inside or outside the designated\r\nsequential loop.\r\nThe syntax for this directive is as follows:\r\n#pragma serial\r\nThis directive works only with the MIPSpro APO option.\r\n16 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/2b3207b9-8438-44a3-873d-3ed0b1fab30d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9343a9b8be391210ab928454e12cad61a7448b1d2161e1032a69e455cc7e252a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 439
      },
      {
        "segments": [
          {
            "segment_id": "6d84475f-29b6-4805-9ed1-9461221e8e77",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 39,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 3\r\nC++ Instantiation #pragma Directives\r\nInstantiation #pragma directives control the instantiation of specific template entities\r\nor sets of template entities.\r\nTable 3-1 lists the C++ instantiation #pragma directives discussed in this chapter,\r\nalong with a brief description of each and the compiler versions in which the\r\ndirective is supported.\r\nTable 3-1 C++ Template Instantiation #pragma Directives\r\n#pragma Short Description\r\nCompiler\r\nVersions\r\n#pragma instantiate Causes a specified instance of a template\r\ndeclaration to be immediately instantiated at that\r\nspot.\r\n7.1 and later\r\n#pragma can_instantiate Indicates that the specified declaration can be\r\ninstantiated in the current compilation, but need\r\nnot be.\r\n7.0 and later\r\n#pragma do_not_instantiate Prevents instantiation of the specific declaration in\r\nthis compilation unit, even if that instance is used\r\nin the code.\r\n7.0 and later\r\n#pragma instantiate\r\nThe #pragma instantiate directive causes a specific instance of a template\r\ndeclaration to be immediately instantiated.\r\nThe syntax of the #pragma instantiate directive is as follows:\r\n#pragma instantiate entity\r\nThe entity argument can be any of the following:\r\n007–3587–005 17",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/6d84475f-29b6-4805-9ed1-9461221e8e77.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c34fcd0c3e7c503d2ab643f328fa1d20b47ac3a6abc74392c48f58b1a4cf862f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6732c072-de7c-49a3-b52e-79a7a2edd9d5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 40,
            "page_width": 612,
            "page_height": 792,
            "content": "3: C++ Instantiation #pragma Directives\r\nA template class name A<int>\r\nA member function name A<int>::foo\r\nA member function declaration void A<int>::foo(int, char)\r\nA static data member name A<int>::name\r\nA template function declaration char* foo(int, float)\r\nThe template definition of entity must be present in the compilation for an\r\ninstantiation to occur. If you use #pragma instantiate to explicitly request the\r\ninstantiation of a class or function for which no template definition is available, the\r\ncompiler issues a warning.\r\nThe declaration needs to be a complete declaration of a function or a static data\r\nmember, exactly as if you had specified it for a specialization of the template.\r\nThe argument to an instantiation #pragma directive cannot be a compiler-generated\r\nfunction, an inline function, or a pure virtual function.\r\nA member function name (for example, A<int>::foo) can be used as an argument\r\nfor a #pragma instantiate directive only if it refers to a single, user-defined\r\nmember function that is not an overloaded function. Compiler-generated functions\r\nare not considered, so a name can refer to a user-defined constructor even if a\r\ncompiler-generated copy constructor of the same name exists. Overloaded member\r\nfunctions can be instantiated by providing the complete member function declaration,\r\nas the following example shows:\r\nchar * A<int>::foo(int))\r\nNote: Using the #pragma instantiate directive to instantiate a template class is\r\nequivalent to repeating the directive for each member function and static data\r\nmember declared in the class. When instantiating an entire class, you can exclude a\r\ngiven member function or static data member by using the\r\n#pragma do_not_instantiate directive.\r\n#pragma can_instantiate\r\nThe #pragma can_instantiate directive indicates that the specified entity can be\r\ninstantiated in the current compilation, but need not be. It is used in conjunction with\r\nautomatic instantiation to indicate potential sites for instantiation if the template\r\nentity is deemed to be required by the compiler.\r\n18 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/6732c072-de7c-49a3-b52e-79a7a2edd9d5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a71340a0ab7fb71470cd315119956f836387c6f8c74d72c550da5352dd513d1f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 477
      },
      {
        "segments": [
          {
            "segment_id": "be3889e6-d82f-4ec2-a550-dce2f327878c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 41,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nThe syntax of the #pragma can_instantiate directive is as follows:\r\n#pragma can_instantiate entity\r\nThe argument, entity, can be any of the following:\r\nA template class name A<int>\r\nA member function name A<int>::foo\r\nA member function declaration void A<int>::foo(int, char)\r\nA static data member name A<int>::name\r\nA template function declaration char* foo(int, float)\r\nThe template definition of entity must be present in the compilation for an\r\ninstantiation to occur. If you use #pragma can_instantiate to explicitly request\r\nthe instantiation of a class or function for which no template definition is available,\r\nthe compiler issues a warning.\r\nThe argument to a #pragma can_instantiate directive cannot be a\r\ncompiler-generated function, an inline function, or a pure virtual function.\r\nA member function name (for example, A<int>::foo) can be used as an argument\r\nfor a #pragma can_instantiate directive only if it refers to a single, user-defined\r\nmember function that is not an overloaded function. Compiler-generated functions\r\nare not considered, so a name can refer to a user-defined constructor even if a\r\ncompiler-generated copy constructor of the same name exists. Overloaded member\r\nfunctions can be instantiated by providing the complete member function declaration,\r\nas shown in the following example:\r\nchar * A<int>::foo(int)\r\n#pragma do_not_instantiate\r\nThe #pragma do_not_instantiate directive suppresses the instantiation of a\r\nspecified entity. It is typically used to suppress the instantiation of an entity for which\r\na specific definition is supplied.\r\nThe syntax of the #pragma do_not_instantiate directive is as follows:\r\n#pragma do_not_instantiate entity\r\n007–3587–005 19",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/be3889e6-d82f-4ec2-a550-dce2f327878c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=67124d6dee0296dd52e6558b478bebce31f0f1e7cc4d6417693023c444cc01b0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "506dd90f-4515-40ff-93bd-c440259b4175",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 42,
            "page_width": 612,
            "page_height": 792,
            "content": "3: C++ Instantiation #pragma Directives\r\nThe argument, entity, can be any of the following:\r\nA template class name A<int>\r\nA member function name A<int>::foo\r\nA member function declaration void A<int>::foo(int, char)\r\nA static data member name A<int>::name\r\nA template function declaration char* foo(int, float)\r\nThe argument to a #pragma do_not_instantiate directive cannot be a\r\ncompiler-generated function, an inline function, or a pure virtual function.\r\nA member function name (for example, A<int>::foo) can be used as an argument\r\nfor the #pragma do_not_instantiate directive only if it refers to a single,\r\nuser-defined member function that is not overloaded. Compiler-generated functions\r\nare not considered, so a name can refer to a user-defined constructor even if a\r\ncompiler-generated copy constructor of the same name exists. Overloaded member\r\nfunctions can be specified by providing the complete member function declaration, as\r\nthe following example shows:\r\nchar * A<int>::foo(int)\r\n20 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/506dd90f-4515-40ff-93bd-c440259b4175.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=aaaf9fa9448709d9a4e9e6d584ef9ac055147def8cd5afff51db447f644e913f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 391
      },
      {
        "segments": [
          {
            "segment_id": "747d5900-03bd-45b9-b002-5b770cee0b25",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 43,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 4\r\nData Layout #pragma Directives\r\nTable 4-1 lists the #pragma directives discussed in this chapter, along with a short\r\ndescription of each and the compiler versions in which the directive is supported.\r\nTable 4-1 Data Layout #pragma Directives\r\n#pragma Short Description\r\nCompiler\r\nVersions\r\n#pragma align_symbol Specifies alignment of user variables, typically at\r\ncache-line or page boundaries.\r\n7.2 and later\r\n#pragma fill_symbol Tells the compiler to insert any necessary padding to\r\nensure that the user variable does not share a cache-line or\r\npage with any other symbol.\r\n7.2 and later\r\n#pragma pack Controls the layout of structure offsets, such that the\r\nstrictest alignment for any structure member will be n\r\nbytes, where n is 0, 1, 2, 4, 8, or 16. When n is 0, the\r\ncompiler returns to default alignment for any subsequent\r\nstruct definitions.\r\n7.0 and later\r\n#pragma align_symbol\r\nThe #pragma align_symbol directive specifies the alignment of user variables,\r\ntypically at cache-line or page boundaries.\r\nThe syntax of the #pragma align_symbol directive is as follows:\r\n#pragma align_symbol [symbol, size]\r\nThe first argument to this directive is a symbol. The symbol can be a global or\r\nautomatic variable, but it cannot be a formal parameter to a function, or an element of\r\na structured type such as a structure or array.\r\nThe second argument, size, can be any one of the following:\r\n007–3587–005 21",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/747d5900-03bd-45b9-b002-5b770cee0b25.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c1c7b6a5e3cdca0a0d45ec4842c45f33948c1976153b64e94386943c0616c04f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1e43df4c-c96c-47c6-bdae-78b5f662ccb6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 44,
            "page_width": 612,
            "page_height": 792,
            "content": "4: Data Layout #pragma Directives\r\n• L1cacheline, a machine-specific first-level cache-line size, typically 32 bytes\r\n• L2cacheline, a machine-specific second-level cache-line size, typically 128 bytes\r\n• page, a machine specific page size, typically 16 Kilobytes\r\n• a user-specified value, which must be a power of two\r\nThe #pragma align_symbol directive aligns the start of symbol at the specified\r\nalignment boundary.\r\nFor global variables, this directive must be specified where the variable is defined.\r\nThe directive is optional where the variable is declared.\r\n!\r\nCaution: When using the #pragma align_symbol directive, there are two points to\r\nkeep in mind:\r\n• The #pragma align_symbol directive is ineffective for local variables of\r\nfixed-size symbols, such as simple scalars or arrays of known size. Theis directive\r\nis most effective for stack-allocated arrays of dynamically determined size.\r\n• A variable cannot have both #pragma fill_symbol and #pragma\r\nalign_symbol directives applied to it.\r\nExample 4-1 #pragma align_symbol\r\nThe following code fragment illustrates the use of the #pragma align_symbol\r\ndirective:\r\nint x;\r\n/* x is a global variable */\r\n#pragma align_symbol (x, 32)\r\n/* x will start at a 32-byte boundary */\r\n#pragma align_symbol (x, 2)\r\n/* Error: cannot request an alignment\r\nlower than the natural alignment of the symbol. */\r\n22 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/1e43df4c-c96c-47c6-bdae-78b5f662ccb6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=68dc72b0ff63a531fcf68846b5ec3265823c1f98e85414b24dc32d9f4c9fb24e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 431
      },
      {
        "segments": [
          {
            "segment_id": "70b2d2e1-6546-4a0f-9fc7-a67bbd91628b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 45,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma fill_symbol\r\nThe #pragma fill_symbol directive instructs the compiler to insert any necessary\r\npadding to ensure that the user variable does not share a cache-line, page, or other\r\nspecified block of memory with any other symbol.\r\nThe syntax of the fill_symbol pragma is as follows:\r\n#pragma fill_symbol [symbol, size]\r\nThe first argument to this pragma is a symbol. The symbol can be a global or\r\nautomatic variable, but it cannot be a formal parameter to a function, or an element of\r\na structured type such as a structure or array.\r\nThe second argument can be any one of the following:\r\n• L1cacheline, a machine-specific first-level cache-line size, typically 32 bytes\r\n• L2cacheline, a machine-specific second-level cache-line size, typically 128 bytes\r\n• page, a machine specific page size, typically 16 kilobytes\r\n• a user-specified value that must be a power of two\r\nThe #pragma fill_symbol directive pads the named symbol with additional\r\nstorage so that the symbol is assured not to overlap with any other data item within\r\nthe storage of the specified size. The additional padding required is heuristically\r\ndivided between each end of the specified variable.\r\nFor instance, a #pragma fill_symbol directive for the L1cacheline guarantees that\r\nthe specified symbol will not suffer from false-sharing (multiple, unrelated symbols\r\nsharing the same cache line) between multiple processors for the L1 cache line.\r\nFor global variables, this directive must be specified where the variable is defined.\r\nThe directive is optional where the variable is declared.\r\nA variable cannot have both #pragma fill_symbol and #pragma align_symbol\r\ndirectives applied to it.\r\nExample 4-2 #pragma fill_symbol\r\nThe following code fragment illustrates the use of #pragma fill_symbol:\r\ndouble y;\r\n/* y is a global or local variable */\r\n007–3587–005 23",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/70b2d2e1-6546-4a0f-9fc7-a67bbd91628b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3d31b923a1fadd4e18624406f4a11c78bff13ea8204f54c49a7a30b76a510909",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 290
      },
      {
        "segments": [
          {
            "segment_id": "a41eb679-2e83-480f-aec7-ad70a597785f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 46,
            "page_width": 612,
            "page_height": 792,
            "content": "4: Data Layout #pragma Directives\r\n#pragma fill_symbol (y, L2cacheline)\r\n/* Allocates extra storage\r\nboth before and after y so that\r\ny is within an L2cacheline (128\r\nbytes) all by itself. */\r\n#pragma pack\r\nThe #pragma pack directive controls the layout of structure offsets. The strictest\r\nalignment for any structure member is the specified number of bytes (1, 2, 4, 8, or 16).\r\nThe syntax of the #pragma pack directive is as follows:\r\n#pragma pack [n]\r\nThe #pragma pack directive works according to the following rules:\r\n• A struct type defined in the scope of a #pragma pack has up to n bytes of\r\nalignment, where n is 0, 1, 2, 4, 8, or 16. When n is 0, the compiler returns to\r\ndefault alignment for any subsequent structure definitions.\r\n• The packed characteristics of the type apply wherever the type is used, even\r\noutside the scope of the pragma in which the type was declared.\r\n• The scope of a #pragma pack ends with the next #pragma pack, hence this\r\npragma does not nest. There is no way to “return” from one instance of the\r\ndirective to a lexically earlier instance of the directive.\r\n!\r\nCaution:\r\n• SGI strongly discourages the use of #pragma pack, because it is a nonportable\r\nfeature and the semantics of this directive may change in future compiler releases.\r\n• A structure declaration must be subjected to identical instances of a #pragma\r\npack directive in all files, or else misaligned memory accesses and erroneous\r\nstructure member dereferencing may ensue.\r\n• References to fields in packed structures may be less efficient than references to\r\nfields in unpacked structures.\r\n• The #pragma pack directive is not supported for C++ in -n32 and -64 modes.\r\n24 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/a41eb679-2e83-480f-aec7-ad70a597785f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=322028cc9ae27254114fd92e6c32dfefed90ac73e8004a824f67bd295cc1486b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 288
      },
      {
        "segments": [
          {
            "segment_id": "ebf62900-bd81-41b7-a483-21e140b1a086",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 47,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 5\r\nDSM Optimization #pragma Directives\r\nTable 5-1 lists the #pragma directives discussed in this chapter, along with a short\r\ndescription of each and the compiler versions in which the directive is supported.\r\nThese directives are useful primarily on systems with distributed shared memory,\r\nsuch as Origin servers.\r\nTable 5-1 Distributed Shared Memory #pragma Directives\r\n#pragma Short Description\r\nCompiler\r\nVersions\r\n#pragma distribute Specifies data distribution. 7.2 and later\r\n#pragma distribute_reshape Specifies data distribution with reshaping. 7.2 and later\r\n#pragma dynamic Tells the compiler that the specified array may be\r\nredistributed in the program.\r\n7.2 and later\r\n#pragma page_place Allows the explicit placement of data. 7.1 and later\r\n#pragma pfor (Discussed in Chapter 9,\r\n\"Multiprocessing #pragma Directives\",\r\npage 61)\r\naffinity clause allows data-affinity or\r\nthread-affinity scheduling; nest clause exploits\r\nnested concurrency. See \"#pragma pfor\r\nClauses\", page 79\r\n6.0 and later\r\n#pragma redistribute Specifies dynamic redistribution of data. 7.2 and later\r\n#pragma distribute\r\nThe #pragma distribute directive specifies the distribution of data across the\r\nprocessors. It functions by influencing the mapping of virtual addresses to physical\r\npages without affecting the layout of the data structure. Because the granularity of\r\ndata allocation is a physical page (at least 16 KB), the achieved distribution is limited\r\nby the underlying page granularity. However, the advantages to using this directive\r\nare that it can be added to an existing program without any restrictions, and can be\r\nused for affinity scheduling. See \"affinity: Thread Affinity\", page 81, for more\r\ninformation about data affinity.\r\n007–3587–005 25",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/ebf62900-bd81-41b7-a483-21e140b1a086.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f2c22cc85f6408c56b26d0d0c4f5f4d223e65032d349f22d9f02d0f6399637aa",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 248
      },
      {
        "segments": [
          {
            "segment_id": "519f65b3-8a95-4782-a166-bc038750e66f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 48,
            "page_width": 612,
            "page_height": 792,
            "content": "5: DSM Optimization #pragma Directives\r\nThe syntax of the #pragma distribute directive is as follows:\r\n#pragma distribute array[dst1][[dst2]...] [onto (dim1, dim2[, dim3 ...])]\r\n• array is the name of the array you want to have distributed.\r\n• array is the name of the array you want to have distributed.\r\n– *: not distributed.\r\n– block: partitions the elements of an array dimension into blocks equal to the\r\nsize of the dimension (N) divided by the number of processors (P). The size of\r\neach block will be equal to N/P, rounded up to the nearest integer value\r\n(ceiling (N/P)).\r\n– cyclic[size_expr]: partitions the elements of an array dimension into chunks\r\nand distributes the chunks sequentially across the processors. The size of the\r\npieces is equal to the value of size_expr. If size_expr is not specified, the chunk\r\nsize defaults to 1. A cyclic distribution with a chunk size that is either greater\r\nthan 1 or is determined at run time is sometimes also called block-cyclic.\r\n• dim is the specification for partitioning the processors across the distributed\r\ndimensions (see \"onto Clause\", page 33, for more information).\r\nThe following is some additional information about #pragma distribute:\r\n• You must specify the #pragma distribute directive in the declaration part of\r\nthe program, along with the array declaration.\r\n• You can specify a data distribution directive for any local or global array.\r\n• Each dimension of a multi-dimensional array can be independently distributed.\r\n• A distributed array is distributed across all of the processors being used in that\r\nparticular execution of the program, as determined by the environment variable\r\nMP_SET_NUMTHREADS.\r\n26 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/519f65b3-8a95-4782-a166-bc038750e66f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b1ee612508ae81d5c20af0206a10c4959a1db5e3acc660c4b3cec31574ff368c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "4dbeedef-4953-49e7-b84a-8fe2df8bd622",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 49,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nExample 5-1 #pragma distribute\r\nThe following code fragment demonstrates the use of #pragma distribute:\r\nfloat A[200][300];\r\n...\r\n#pragma distribute A[cyclic][block];\r\n...\r\nOn a machine with eight processors, the first dimension of array A is distributed\r\nacross the processors in chunks of 1, and the second dimension is distributed in\r\nchunks of 25 for each processor.\r\nonto Clause\r\nIf an array is distributed in more than one dimension, then by default the processors\r\nare apportioned as equally as possible across each distributed dimension. For\r\ninstance, if an array has two distributed dimensions, then an execution with 16\r\nprocessors assigns 4 processors to each dimension (4 \u0002 4 = 16), whereas an execution\r\nwith 8 processors assigns 4 processors to the first dimension and 2 processors to the\r\nsecond dimension.\r\nYou can override this default and explicitly control the number of processors in each\r\ndimension by using the onto clause. The onto clause allows you to specify the\r\nprocessor topology when an array is being distributed in more than one dimension.\r\nFor instance, if an array is distributed in two dimensions, and you want to assign\r\nmore processors to the second dimension than to the first dimension, you can use the\r\nonto clause as in the following code fragment:\r\nfloat A[100][200];\r\n/* Assign to the second dimension twice as many processors as to\r\nthe first dimension. */\r\n#pragma distribute A[block][block] onto (1, 2)\r\n007–3587–005 27",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/4dbeedef-4953-49e7-b84a-8fe2df8bd622.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f90d25d1f04293ad59a32206260ae85540d806ba100e2991c74d529e02261ecf",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 506
      },
      {
        "segments": [
          {
            "segment_id": "15c64438-1e54-41ff-a495-75f24b6e3c49",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 50,
            "page_width": 612,
            "page_height": 792,
            "content": "5: DSM Optimization #pragma Directives\r\n#pragma distribute_reshape\r\nThe #pragma distribute_reshape directive, like #pragma distribute,\r\nspecifies the desired distribution of an array. In addition, however, the\r\n#pragma distribute_reshape directive declares that the program makes no\r\nassumptions about the storage layout of that array. The compiler performs aggressive\r\noptimizations for reshaped arrays that violate standard layout assumptions but\r\nguarantee the desired data distribution for that array.\r\nFor information about using data affinity with #pragma redistribute-reshape,\r\nsee \"affinity: Thread Affinity\", page 81.\r\nThe syntax of the #pragma distribute_reshape directive is as follows:\r\n#pragma distribute_reshape array[dst1][[dst2]...]\r\nThe #pragma distribute_reshape directive accepts the same distributions as the\r\n#pragma distribute directive:\r\n• array is the name of the array you want to have distributed.\r\n• dst is the distribution specification for each dimension of the array. It can be any\r\none of the following:\r\n– *: not distributed.\r\n– block: partitions the elements of an array dimension into blocks equal to the\r\nsize of the dimension (N) divided by the number of processors (P). The size of\r\neach block will be equal to N/P, rounded up to the nearest integer value\r\n(ceiling (N/P)).\r\n– cyclic [size_expr]: partitions the elements of an array dimension into chunks\r\nand distributes the chunks sequentially across the processors. The size of the\r\npieces is equal to the value of size_expr. If size_expr is not specified, the chunk\r\nsize defaults to 1. A cyclic distribution with a chunk size that is either greater\r\nthan 1 or is determined at run time is sometimes also called block-cyclic.\r\nThe following is some additional information about\r\n#pragma distribute_reshape:\r\n• You must specify the #pragma distribute_reshape directive in the\r\ndeclaration part of the program, along with the array declaration.\r\n• You can specify a data distribution directive for any local or global array.\r\n28 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/15c64438-1e54-41ff-a495-75f24b6e3c49.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2e33088083456f8dfb9b835698b54155f717175806f2ede41a6b2b4f796fc4ab",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 299
      },
      {
        "segments": [
          {
            "segment_id": "aa5033ae-7b9d-4a12-a4a9-3cc98e4ec78f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 51,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n• Each dimension of a multi-dimensional array can be independently distributed.\r\n• A distributed array is distributed across all of the processors being used in that\r\nparticular execution of the program, as determined by the environment variable\r\nMP_SET_NUMTHREADS.\r\n• A reshaped array is passed as an actual parameter to a subroutine, in which case\r\ntwo possible scenarios exist:\r\n– The array is passed in its entirety (func(A) passes the entire array A, whereas\r\nfunc(A([i][j]) passes a portion of A). The C compiler automatically clones a\r\ncopy of the called function and compiles it for the incoming distribution. The\r\nactual and formal parameters must match in the number of dimensions, and\r\nthe size of each dimension.\r\nThe C++ compiler does not perform this cloning automatically, due to\r\ninteractions in the compiler with the C++ template instantiation mechanism.\r\nFor C++, therefore, the user has the following two options:\r\n1. The first option is to specify #pragma distribute_reshape directly on\r\nthe formal parameter of the called function.\r\n2. The second option is to compile with -MP:clone=on to enable automatic\r\ncloning in C++.\r\n!\r\nCaution: This option may not work for some programs that use templates.\r\n– You can restrict a function to accept a particular reshaped distribution on a\r\nparameter by specifying a #pragma distribute_reshape directive on the\r\nformal parameter within the function. All calls to this function with a\r\nmismatched distribution will lead to compile- or link-time errors.\r\n– A portion of the array can be passed as a parameter, but the callee must access\r\nonly a single processor’s portion. If the callee exceeds a single processor’s\r\nportion, then the results are undefined. You can use intrinsics to access details\r\nabout the array distribution.\r\n007–3587–005 29",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/aa5033ae-7b9d-4a12-a4a9-3cc98e4ec78f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=79f01ad9a108cf003a3348533ae5f7ca44ff72c3b4c10b373c5aaf912b5d8424",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 289
      },
      {
        "segments": [
          {
            "segment_id": "e23b812e-2e57-4145-a6ed-e5f6b1ed9b21",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 52,
            "page_width": 612,
            "page_height": 792,
            "content": "5: DSM Optimization #pragma Directives\r\n!\r\nCaution: Because the #pragma distribute_reshape directive specifies that the\r\nprogram does not depend on the storage layout of the reshaped array, restrictions on\r\nreshaping arrays include the following (for more details on reshaping arrays, see the\r\nC Language Reference Manual ):\r\n• The distribution of a reshaped array cannot be changed dynamically (that is, there\r\nis no #pragma redistribute_reshape directive).\r\n• Initialized data cannot be reshaped.\r\n• Arrays that are explicitly allocated through alloca/malloc and accessed\r\nthrough pointers cannot be reshaped. Use variable length arrays instead.\r\n• An array that is equivalenced to another array cannot be reshaped.\r\n• A global reshaped array cannot be linked -Xlocal. This user error is not caught\r\nby the compiler or linker.\r\nExample 5-2 #pragma distribute_reshape\r\nThe following code fragment demonstrates the use of\r\n#pragma distribute_reshape:\r\nfloat A[400][300];\r\n...\r\n#pragma distribute_reshape A[block][cyclic(3]);\r\n...\r\nOn a machine with eight processors, the first dimension of array A is distributed in\r\nchunks of 50 for each processor, and the second dimension is distributed across the\r\nprocessors in chunks of 3.\r\n#pragma dynamic\r\nBy default, the compiler assumes that a distributed array is not dynamically\r\nredistributed, and directly schedules a parallel loop for the specified data affinity. In\r\ncontrast, a redistributed array can have multiple possible distributions, and data\r\naffinity for a redistributed array must be implemented in the run-time system based\r\non the particular distribution.\r\nThe #pragma dynamic directive notifies the compiler that the named array may be\r\ndynamically redistributed at some point in the run. This tells the compiler that any\r\ndata affinity for that array must be implemented at run time. For information about\r\n30 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/e23b812e-2e57-4145-a6ed-e5f6b1ed9b21.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c719257d1d8262699cf498a6b9e22d1d9a80e8bfb063b6deb1e69d38ed9d8b31",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 277
      },
      {
        "segments": [
          {
            "segment_id": "400223f2-8eb3-4c57-8389-df0a07d764b5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 53,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nusing data affinity with #pragma dynamic, see \"affinity: Thread Affinity\", page\r\n81.\r\nThe syntax of the #pragma dynamic directive is as follows:\r\n#pragma dynamic array\r\narray is the name of the array in question.\r\nThe #pragma dynamic directive informs the compiler that array may be dynamically\r\nredistributed. Data affinity for such arrays is implemented through a run-time\r\nlookup. Implementing data affinity in this manner incurs some extra overhead\r\ncompared to a direct compile-time implementation, so you should use the\r\n#pragma dynamic directive only if it is actually necessary.\r\nYou must explicitly specify the #pragma dynamic declaration for a redistributed\r\narray under the following conditions:\r\n• The function contains a pfor loop that specifies data affinity for the array.\r\n• The distribution for the array is not known.\r\nUnder the following conditions, you can omit the #pragma dynamic directive and\r\njust supply the #pragma distribute directive with the particular distribution:\r\n• The function contains data affinity for the redistributed array.\r\n• The array has a specified distribution throughout the duration of the function.\r\nBecause reshaped arrays cannot be dynamically redistributed, this is an issue only for\r\nregular data distribution.\r\n#pragma page_place\r\nThe #pragma page_place directive is useful for dealing with irregular data\r\nstructures. It allows you to explicitly place data in the physical memory of a\r\nparticular processor. This directive is often used in conjunction with thread affinity\r\n(see \"affinity: Thread Affinity\", page 81, for more information).\r\nThe syntax of the #pragma page_place directive is as follows:\r\n007–3587–005 31",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/400223f2-8eb3-4c57-8389-df0a07d764b5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b230a6d6e212a15cfe00899199dd071181b10954cfda65a28c2efca8a46f4944",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "590fe808-f1d4-4d1c-bf3d-59c53d222fbc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 54,
            "page_width": 612,
            "page_height": 792,
            "content": "5: DSM Optimization #pragma Directives\r\n#pragma page_place [object, size, threadnum]\r\n1. object is the object you want to place\r\n2. size is the size in bytes\r\n3. threadnum is the number of the destination processor\r\nOn a system with physically distributed shared memory, you can explicitly place all\r\ndata pages spanned by the virtual address range [&object, &object+ size-1] in\r\nthe physical memory of the processor corresponding to the specified thread. This\r\ndirective is an executable statement; therefore, you can use it to place either statically\r\nor dynamically allocated data.\r\nThe function getpagesize() can be invoked to determine the page size. On the\r\nOrigin2000TM server, the minimum page size is 16384 bytes.\r\nExample 5-3 #pragma page_place\r\nThe following is an example of the use of #pragma page_place:\r\ndouble A[8192];\r\n#pragma page_place (A[0], 32768, 0)\r\n#pragma page_place (A[4096], 16384, 1)\r\nThe first #pragma page_place directive causes the first half of the array to be\r\nplaced in the physical memory associated with thread 0. The second causes the next\r\nquarter of the array to be placed in the physical memory associated with thread 1.\r\nThe remaining portion of A is allocated based on the operating system’s allocation\r\npolicy (default is “first-touch”).\r\n#pragma redistribute\r\nThe #pragma redistribute directive allows you to dynamically redistribute\r\npreviously distributed arrays. For information about using data affinity with\r\n#pragma redistribute, see \"affinity: Thread Affinity\", page 81.\r\nThe syntax of the redistribute pragma is as follows:\r\n#pragma redistribute array[dst1][[dst2]...]\r\n[onto (dim1, dim2[, dim3 ...])]\r\n32 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/590fe808-f1d4-4d1c-bf3d-59c53d222fbc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3307aa6d4b368011ca8a2328bb1aec69e6e9a41cb4241ed710c09984859090b5",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 500
      },
      {
        "segments": [
          {
            "segment_id": "617f4aa7-b278-4e07-bf8c-8fa6517b1a43",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 55,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n• array is the name of the array you wish to have distributed.\r\n• dst is the distribution specification for each dimension of the array. It can be any\r\none of the following:\r\n– *: not distributed.\r\n– block: partitions the elements of an array dimension into blocks equal to the\r\nsize of the dimension (N) divided by the number of processors (P). The size of\r\neach block will be equal to N/P, rounded up to the nearest integer value\r\n(ceiling (N/P)).\r\n– cyclic [size_expr]: partitions the elements of an array dimension into chunks\r\nand distributes the chunks sequentially across the processors. The size of the\r\npieces is equal to the value of size_expr. If size_expr is not specified, the chunk\r\nsize defaults to 1. A cyclic distribution with a chunk size that is either greater\r\nthan 1 or is determined at run time is sometimes also called block-cyclic.\r\n• dim is the specification for partitioning the processors across the distributed\r\ndimensions (see \"onto Clause\", page 33, for more information).\r\nThe following is some additional information about #pragma redistribute:\r\n• It is an executable statement and can appear in any executable portion of the\r\nprogram.\r\n• It changes the distribution permanently (or until another redistribute\r\nstatement).\r\n• It also affects subsequent affinity scheduling.\r\nonto Clause\r\nIf an array is distributed in more than one dimension, then by default the processors\r\nare apportioned as equally as possible across each distributed dimension. For\r\ninstance, if an array has two distributed dimensions, then an execution with 16\r\nprocessors assigns 4 processors to each dimension (4 \u0002 4 = 16), whereas an execution\r\nwith 8 processors assigns 4 processors to the first dimension and 2 processors to the\r\nsecond dimension.\r\nYou can override this default and explicitly control the number of processors in each\r\ndimension by using the onto clause. The onto clause allows you to specify the\r\nprocessor topology when an array is being distributed in more than one dimension.\r\nFor instance, if an array is distributed in two dimensions, and you want to assign\r\n007–3587–005 33",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/617f4aa7-b278-4e07-bf8c-8fa6517b1a43.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8aa13cd36e662b324d22d3469dbad92dc966ed2835f2dd3c987d4d73db99b97f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "90cea7a2-0076-4be1-871f-9ee15304dd01",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 56,
            "page_width": 612,
            "page_height": 792,
            "content": "5: DSM Optimization #pragma Directives\r\nmore processors to the second dimension than to the first dimension, you can use the\r\nonto clause as in the following code fragment:\r\nfloat A[100][200];\r\n/* Assign to the second dimension twice as many processors as to\r\nthe first dimension. */\r\n#pragma redistribute A[block][block] onto (1, 2)\r\nExample 5-4 #pragma redistribute\r\nThe following code fragment demonstrates the use of #pragma redistribute:\r\nfloat A[500][300];\r\n...\r\n#pragma redistribute A[cyclic(1)][cyclic (5)];\r\n...\r\nAfter the #pragma redistribute directive, the first dimension of array A is\r\ndistributed across the processors in chunks of 1, the second dimension in chunks of 5.\r\n34 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/90cea7a2-0076-4be1-871f-9ee15304dd01.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3968a64bf98ff644f3f3eb24005c85cb9c19e4d44b0c1cdcdaecd26057625a79",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 452
      },
      {
        "segments": [
          {
            "segment_id": "c0cbf81f-78c1-440b-9f83-16e05119e8f0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 57,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 6\r\nInlining #pragma Directives\r\nTable 6-1 lists the #pragma directives discussed in this chapter, along with a brief\r\ndescription of each and the compiler versions in which the directive is supported.\r\nTable 6-1 Inlining #pragma Directives\r\n#pragmas Short Description\r\nCompiler\r\nVersions\r\n#pragma inline (see \"#pragma\r\ninline and #pragma noinline\",\r\npage 35)\r\nTells the compiler to inline the named functions.\r\nKeywords:\r\n- here (next statement only)\r\n- routine (rest of routine or until corresponding\r\nnoinline or inline is found)\r\n- global (entire file, or until corresponding noinline\r\nor inline is found)\r\n7.1 and later\r\n#pragma noinline (see \"#pragma\r\ninline and #pragma noinline\",\r\npage 35)\r\nTells the compiler not to inline the named functions.\r\nKeywords:\r\n- here (next statement only)\r\n- routine (rest of routine or until corresponding\r\nnoinline or inline is found)\r\n- global (entire file, or until corresponding noinline\r\nor inline is found)\r\n7.1 and later\r\n#pragma inline and #pragma noinline\r\nThe #pragma inline and #pragma noinline directives instruct the compiler\r\nwhether or not to inline the named functions. These directives can have next-line,\r\nentire routine, or global scope.\r\nThe syntax of the #pragma inline and #pragma noinline directives is as follows:\r\n#pragma [no] inline {here|routine|global} [name1[,name2 ...]]\r\n007–3587–005 35",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/c0cbf81f-78c1-440b-9f83-16e05119e8f0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b85ac9da5ef15da6d1eedd46f2ff3fbb8896e4e2dca6550e126883a678eb127b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "2439c2bc-53c1-4aad-980d-94761c6f51d8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 58,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Inlining #pragma Directives\r\nhere, routine, and global are keywords (see \"Keywords\", page 36).\r\nThe optional name1 and name2 are function names. If they are present, they follow\r\nthese rules:\r\n• If any functions are named in the directive, it applies only to them.\r\n• If no function names are given, the pragma applies to all functions.\r\n• If a specified function does not exist, a warning message is issued, and the pragma\r\nis ignored.\r\nIf the list of function names is empty, the parentheses around the function names are\r\nnot required.\r\nKeywords\r\nThe following list describes the here, routine, and global keywords. These\r\nkeywords must appear in lowercase, because function names are case sensitive.\r\nhere The directive applies only to the next statement.\r\nroutine The directive applies to the rest of the routine, or until\r\na corresponding #pragma noinline appears. (Or, if\r\nthe first directive was a #pragma noinline, until the\r\ncorresponding #pragma inline.)\r\nglobal The directive applies to the entire file, or until toggled\r\nwith a #pragma noinline directive. (Or, if the first\r\ndirective was a #pragma noinline, until the\r\ncorresponding #pragma inline directive.) Typically,\r\n#pragma global directives appear only at the top of\r\nthe source file.\r\nno keyword The #pragma inline and #pragma noinline\r\ndirectives with no keyword have the same effect as\r\nusing the here keyword, unless the directives appear\r\nat the top of the file, before any lines of source code. In\r\n36 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/2439c2bc-53c1-4aad-980d-94761c6f51d8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a717ebaf25bac0359eba25d27a4d621449293c76dbe95b0b4fc4ff35c1b6753b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 440
      },
      {
        "segments": [
          {
            "segment_id": "2f6dd456-c0ff-4288-b2ed-8d6222380c9b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 59,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nthat case, the #pragma directives apply to the entire\r\nfile, as if the global keyword had been used.\r\n!\r\nCaution: For C++ code, #pragma inline and #pragma noinline take C++ style\r\nfunction names. If you use mangled names, the results are undefined. The compiler\r\ngives a warning if it cannot find the supplied name.\r\nExamples of #pragma inline and #pragma noinline\r\nThe following examples illustrate different aspects of the #pragma inline and\r\n#pragma noinline directives.\r\nExample 6-1 Using the here keyword with the #pragma noinline directive\r\nThis example illustrates the use of the #pragma noinline directive with the here\r\nkeyword. All occurrences of f1(int) are marked for inlining, except the one directly\r\nfollowing #pragma noinline here.\r\nint ig = 0;\r\ndouble dg = 0.;\r\ninline void f1(int) {ig++;}\r\nvoid f1(double){dg++;}\r\nvoid main ()\r\n{\r\nint i;\r\ndouble d;\r\nf1(i); // f1(int) is marked for inlining\r\nf1(d);\r\n#pragma noinline here (void f1(int))\r\nf1(i); // f1(int) is not marked for inlining\r\nf1(d);\r\nf1(i); // f1(int) is marked for inlining\r\nprintf(‘‘Result is %d\\n’’, ig + (int) dg);\r\n}\r\n007–3587–005 37",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/2f6dd456-c0ff-4288-b2ed-8d6222380c9b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fe27f078144a666e7336a704ce44b0586be44680bd387bdb0e646c71c06fe4ef",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "92adac22-70d8-4900-9d13-dae29501e4f0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 60,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Inlining #pragma Directives\r\nExample 6-2 Using the here keyword with the #pragma inline and #pragma noinline\r\ndirectives\r\nThis example illustrates the use of the #pragma inline and #pragma noinline\r\ndirectives with the here keyword. All occurrences of f1(int) are marked for\r\ninlining, except the one directly following #pragma noinline here. The only\r\noccurrence of f1(double) that is marked for inlining is the one directly following\r\n#pragma inline here.\r\nint ig = 0;\r\ndouble dg = 0.;\r\ninline void f1(int) {ig++;}\r\nvoid f1(double){dg++;}\r\nvoid main ()\r\n{\r\nint i;\r\ndouble d;\r\nf1(i); // f1(int) is marked for inlining\r\nf1(d); // f1(double) is not marked for inlining\r\n#pragma noinline here (void f1(int))\r\nf1(i); // f1(int) is not marked for inlining\r\n#pragma inline here (void f1(double))\r\nf1(d); // f1(double) is marked for inlining\r\nf1(i); // f1(int) is marked for inlining\r\nprintf(‘‘Result is %d\\n’’, ig + (int) dg);\r\n}\r\nExample 6-3 Using the global keyword with the #pragma inline directive\r\nThis example illustrates the use of the #pragma inline directive with the global\r\nkeyword. All occurrences of f1(int) following the #pragma inline global are\r\nmarked for inlining, except the one following the #pragma noinline here.\r\nint ig = 0;\r\ndouble dg = 0.;\r\nvoid f1(int) {ig++;}\r\n38 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/92adac22-70d8-4900-9d13-dae29501e4f0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=387134818cba41ac51812939f67eb4646f5a809ce62e4ebae6877b4a50ad109b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 387
      },
      {
        "segments": [
          {
            "segment_id": "6013bac2-b3bc-4827-8ddc-b99f5cb02d90",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 61,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nvoid f1(double){dg++;}\r\nvoid main ()\r\n{\r\n#pragma inline global (void f1(int));\r\nint i;\r\ndouble d;\r\nf1(i); // f1(int) is marked for inlining\r\nf1(d); // f1(double) is not marked for inlining\r\n#pragma noinline here (void f1(int))\r\nf1(i); // f1(int) is not marked for inlining\r\n#pragma inline here (void f1(double))\r\nf1(d); // f1(double) is marked for inlining\r\nf1(i); // f1(int) is marked for inlining\r\nprintf(‘‘Result is %d\\n’’, ig + (int) dg);\r\n}\r\nExample 6-4 Using the routine keyword with the #pragma inline directive\r\nThis example illustrates the use of the #pragma inline directive with the routine\r\nkeyword. All occurrences of f1(int) following #pragma inline routine are\r\nmarked for inlining, except the one following #pragma noinline here.\r\nint ig = 0;\r\ndouble dg = 0.;\r\nvoid f1(int) {ig++;}\r\nvoid f1(double){dg++;}\r\nvoid main ()\r\n{\r\n#pragma inline routine (void f1(int))\r\nint i;\r\ndouble d;\r\nf1(i); // f1(int) is marked for inlining\r\nf1(d); // f1(double) is not marked for inlining\r\n#pragma noinline here (void f1(int))\r\nf1(i); // f1(int) is not marked for inlining\r\n007–3587–005 39",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/6013bac2-b3bc-4827-8ddc-b99f5cb02d90.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e468e2e8ffa87c393974ae5e86f7f58c8b0b756fe260e6091df1e7bc1c692eec",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f1b88a2a-5e7e-4b5a-bc7c-619472daf439",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 62,
            "page_width": 612,
            "page_height": 792,
            "content": "6: Inlining #pragma Directives\r\n#pragma inline here (void f1(double))\r\nf1(d); // f1(double) is marked for inlining\r\nf1(i); // f1(int) is marked for inlining\r\nprintf(‘‘Result is %d\\n’’, ig + (int) dg);\r\n}\r\nExample 6-5 Using the routine keyword with the #pragma noinline directive\r\nThis example illustrates the use of the #pragma noinline directive with the\r\nroutine keyword. None of the occurrences of f1(int) following\r\n#pragma noinline routine are marked for inlining, except the one following\r\n#pragma inline here.\r\nint ig = 0;\r\ndouble dg = 0.;\r\ninline void f1(int) {ig++;}\r\nvoid f1(double){dg++;}\r\nvoid main ()\r\n{\r\nint i;\r\ndouble d;\r\n#pragma noinline routine (void f1(int))\r\nf1(i); // f1(int) is not marked for inlining\r\nf1(d); // f1(double) is not marked for inlining\r\n#pragma inline here (void f1(int))\r\nf1(i); // f1(int) is marked for inlining\r\n#pragma noinline here (void f1(double))\r\nf1(d); // f1(double) is not marked for inlining\r\nf1(i); // f1(int) is not marked for inlining\r\nprintf(‘‘Result is %d\\n’’, ig + (int) dg);\r\n}\r\n40 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/f1b88a2a-5e7e-4b5a-bc7c-619472daf439.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9bf99a54a061c2aafac40fd7866248e95c72b35ab2dcaec57369d421983ef8a7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 338
      },
      {
        "segments": [
          {
            "segment_id": "31ecb9d5-51f5-4090-8729-6b6e6f17900b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 63,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 7\r\nLoader Information #pragma Directives\r\nTable 7-1 lists the #pragma directives discussed in this chapter, along with a brief\r\ndescription of each and the compiler versions in which the directive is supported.\r\nTable 7-1 Loader Information #pragma Directives\r\n#pragma Short Description\r\nCompiler\r\nVersions\r\n#pragma hidden Tells the compiler that the specified symbols are\r\ninvisible to all executables or DSOs except the\r\ncurrent one.\r\n7.2 and later\r\n#pragma internal Tells the compiler that the specified symbols are not\r\nreferenced outside the current executable or DSO.\r\n7.2 and later\r\n#pragma no_delete Inhibits deletion of functions that are never\r\nreferenced.\r\n7.1 and later\r\n#pragma optional Tells the linker that the specified symbols are\r\noptional. This is the basic mechanism used for\r\nadding extensions to a library that can then be\r\nqueried.\r\n7.2.1 and\r\nlater\r\n#pragma protected Tells the compiler that the specified symbols are not\r\npreemptible.\r\n7.1 and later\r\n#pragma section_gp Causes an object to be placed in a gp_relative\r\nsection.\r\n7.2 and later\r\n#pragma section_non_gp Keeps an object from being placed in a gp_relative\r\nsection.\r\n7.2 and later\r\n007–3587–005 41",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/31ecb9d5-51f5-4090-8729-6b6e6f17900b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=60561a0fede254d3892c52850135b15801973fc8b077dc853525a7b818441c3b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "70b9230a-e554-42aa-8a89-2c601571e2fd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 64,
            "page_width": 612,
            "page_height": 792,
            "content": "7: Loader Information #pragma Directives\r\n#pragma Short Description\r\nCompiler\r\nVersions\r\n#pragma weak Tells the link editor not to issue a warning if it does\r\nnot find a defining declaration of the weak_symbol.\r\nAlso allows the overriding of a current definition by\r\na non-weak definition.\r\n7.0 and later\r\n#pragma weak\r\nweak_symbol = strong_symbol\r\nSets weak_symbol to be an alias for the function or\r\ndata object denoted by strong_symbol, unless a\r\ndefining declaration for weak_symbol is encountered\r\nat static link time. If encountered, the defining\r\ndeclaration preempts the weak denotation.\r\n7.0 and later\r\n#pragma hidden\r\nThe #pragma hidden directive tells the compiler that the specified symbols are\r\ninvisible to all executables or DSOs except the current one. This allows hidden data\r\nobjects to be placed in the small data area and accessed using the (fast) gp-relative\r\nload/store. Hidden symbols need not be put into the hash table of a DSO because\r\nthey are not globally visible.\r\nThe syntax of the #pragma hidden directive is as follows:\r\n#pragma hidden symbol1 [, symbol2 ...]\r\n#pragma hidden is not currently supported in C++, except for symbols marked\r\nextern ‘‘C’’.\r\nAll of the listed symbols are marked as STO_HIDDEN. This means that the symbol\r\ndefinition can be referenced only within an object, not from outside. Even though a\r\nhidden symbol cannot be directly referenced from outside a DSO, its address may be\r\ntaken and passed, so it is possible to call a hidden function from another DSO.\r\n#pragma internal\r\nThe #pragma internal directive tells the compiler that the specified functions are\r\nnot referenced outside the current executable or DSO. Internal symbols are the same\r\n42 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/70b9230a-e554-42aa-8a89-2c601571e2fd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1c91e0c8eb1c0140a6c9741b03816316b9cc62c294aeefc56e0586777adea3f9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 449
      },
      {
        "segments": [
          {
            "segment_id": "cc8327a6-973a-4521-b7ce-189bba433776",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 65,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nas hidden symbols, except that they are guaranteed not to be referenced from outside\r\na DSO, even through pointers or weak bindings.\r\nThe syntax of the #pragma internal directive is as follows:\r\n#pragma internal func1 [, func2 ...]\r\n#pragma internal is not currently supported in C++, except for symbols marked\r\nextern ‘‘C’’.\r\nThe specified functions are marked STO_INTERNAL. This means that this function\r\nneed not save, restore, or recalculate $gp (global pointer), because it is callable only\r\nfrom a location that has the same $gp (global pointer) value.\r\n#pragma no_delete name\r\nThe #pragma no_delete directive inhibits deletion of functions that are never\r\nreferenced.\r\nThe syntax of the #pragma no_delete directive is as follows:\r\n#pragma no_delete\r\nNote: This pragma applies only to C++ and is not available for C programs. It\r\napplies only to functions, not data. It changes the ELF symbol name from its current\r\nname to a local name, thus making the ELF name (as seen by dis(1)) unusual and\r\ncausing the name to not appear to debuggers.\r\n#pragma optional\r\nThe #pragma optional directive tells the linker that the specified symbols are\r\noptional.\r\nThe static linker (ld), converts references to optional definitions (in another DSO) to\r\noptional references. Unresolved optional references are not reported as errors.\r\n007–3587–005 43",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/cc8327a6-973a-4521-b7ce-189bba433776.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3e0c1cbc6d3be88e59b80379d902ad0c4d7a9dabd4738871d44dd6680e6cf956",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "572f1d41-9c3b-436b-a7f5-c021a02cee49",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 66,
            "page_width": 612,
            "page_height": 792,
            "content": "7: Loader Information #pragma Directives\r\nThe run-time linker (rld) resolves any unresolved optional references to a special\r\nsymbol in libc.so.1.\r\nPrograms can check for the existence of an optional symbol by use of macros defined\r\nin the header file /usr/include/optional_sym.h.\r\nThis is the basic mechanism used for adding extensions to a library that you can then\r\nquery. For example, when new functions are added to the next revision of\r\nlibfoo.so, they can be added as optional functions; then programs can check for\r\ntheir existence and use them only when the new revision of the library is available\r\nand avoid them on older systems, thus giving backwards and forwards compatibility\r\nacross a series of releases.\r\nThe syntax of the #pragma optional directive is as follows:\r\n#pragma optional symbol1 [, symbol2 ... ]\r\nThe following rules apply to #pragma optional:\r\n• #pragma optional must come after the declaration or definition of symbol.\r\n• #pragma optional is not currently supported in C++, except for symbols\r\nmarked extern ‘‘C’’.\r\n#pragma protected\r\nThe #pragma protected directive tells the compiler that the specified symbols are\r\nnot preemptible, but are visible from outside of a DSO.\r\nThe syntax of the #pragma protected directive is as follows:\r\n#pragma protected symbol1 [, symbol2 ...]\r\n#pragma protected is not currently supported in C++, except for symbols marked\r\nextern ‘‘C’’.\r\nThe specified symbols are marked STO_PROTECTED. This means that the symbol\r\ndefinition cannot be preempted by another definition.\r\n44 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/572f1d41-9c3b-436b-a7f5-c021a02cee49.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f275a64e069affbe6192862b7189b7b348abc30aedea0c450f5475cd879744c9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 453
      },
      {
        "segments": [
          {
            "segment_id": "e837f9e9-3084-4d77-a100-674b40bc73e7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 67,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma section_gp\r\nMIPS binaries have a global pointer (gp) that can be used to reference global data\r\nmore efficiently (by using gp + offset) than constructing the entire address when that\r\nvariable is referenced. Only a limited set of elements can be referenced in this fashion\r\nbecause the size of offset is limited to 16 bits. The compiler heuristically places global\r\ndata in either gp-relative or non-gp-relative sections. However, it is sometimes useful\r\nto manually control which variables go within the gp-relative section and which need\r\nto be addressed explicitly.\r\nThe #pragma section_gp directive causes an object to be placed in a gp_relative\r\nsection, while the #pragma section_non_gp directive causes an object to be placed\r\nin a non-gp-relative section.\r\nThe syntax of the #pragma section_gp directive is as follows:\r\n#pragma section_gp symbol1[, symbol2 ...]\r\nsymbol must be a static or global variable.\r\n#pragma section_non_gp\r\nMIPS binaries have a global pointer (gp) that can be used to reference global data\r\nmore efficiently (by using gp + offset) than constructing the entire address when that\r\nvariable is referenced. Only a limited set of elements can be referenced in this fashion\r\nbecause the size of offset is limited to 16 bits. The compiler heuristically places global\r\ndata in either gp-relative or non-gp-relative sections. However, it is sometimes useful\r\nto manually control which variables go within the gp-relative section and which need\r\nto be addressed explicitly.\r\nThe #pragma section_gp directive causes an object to be placed in a gp_relative\r\nsection, while the #pragma section_non_gp directive causes an object to be placed\r\nin a non-gp-relative section.\r\nThe syntax of the #pragma section_non_gp directive is as follows:\r\n#pragma section_non_gp symbol1[, symbol2 ...]\r\nsymbol must be a static or global variable.\r\n007–3587–005 45",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/e837f9e9-3084-4d77-a100-674b40bc73e7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f4c75bdd4d75033506ad9350a50b394a4219c3af4eae6932be5206056ae7a60d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 291
      },
      {
        "segments": [
          {
            "segment_id": "a869f40a-b68c-4fb7-acbd-6340f7ea213b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 68,
            "page_width": 612,
            "page_height": 792,
            "content": "7: Loader Information #pragma Directives\r\n#pragma weak\r\nThe #pragma weak directive can be used in two ways. It can instruct the link editor\r\nto not issue a warning if it does not find a defining declaration of the specified weak\r\nsymbol, or it can allow the overriding of a current definition by a non-weak definition.\r\nWeak definitions behave as follows:\r\n• A definition is weak if a symbol defined in an executable or DSO is marked as\r\nweak at the point of definition.\r\n• A weak definition is preemptible and will be preempted by any strong global\r\ndefinition of the same name in the executable, the DSOs linked in at static link\r\ntime, or the DSOs linked in at run time. Multiple weak definitions follow the\r\nsame preemption rules as for global symbols except that they will all be\r\npreempted by any strong definition of their name.\r\n• Multiple global weak definitions of a symbol may or may not result in an error:\r\n– At static link time, multiple global definitions of a weak symbol within a DSO\r\nor executable result in an error. For example, linking a.o and b.o when they\r\nboth have definitions for the symbol x results in an error.\r\n– At run time, multiple global weak definitions of a symbol across the executable\r\nand its DSOs, result in the first definition preempting all others. No error\r\nmessage is generated. For example, if your executable, j, references the DSOs\r\nk.so and l.so that have weak definitions of the symbol y, the first definition\r\nencountered is used, and the other is ignored.\r\n• Unresolved weak references do not cause a run-time error, even if the\r\nenvironment variable LD_BIND_NOW is set. They have a value of 0 (that is, the\r\nsymbol address is taken as 0). Attempting a call of a weak undefined function\r\nsymbol gets either a core dump (if LD_BIND_NOW is 1) or a fatal run-time linker\r\nerror on an attempted address of an unresolved symbol (if LD_BIND_NOW is not\r\n1). Attempting a load or store of an undefined weak symbol results in a core\r\ndump because the address is 0, and 0 is normally not a legal virtual address.\r\n• Weak references do not trigger the loading of delay-loaded libraries. This implies\r\nthat weak object references may go unresolved until some other event triggers the\r\nloading of the delay-load library.\r\nThe syntax of the #pragma weak directive is as follows:\r\n#pragma weak weak_symbol [= strong_symbol]\r\n46 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/a869f40a-b68c-4fb7-acbd-6340f7ea213b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=eacfb5b7637951559b4a32ad4f0042fb82bee5e49ddd385e1d9481f8303acbfe",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 411
      },
      {
        "segments": [
          {
            "segment_id": "d6e38b55-2e76-4b94-8359-787c50662171",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 69,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nWhen #pragma weak applies to a C++ function, weak_symbol and strong_symbol must\r\nbe the mangled names.\r\nThe #pragma weak directive can be used in the following two ways:\r\n• #pragma weakweak_symbol\r\nUsed in this way, the #pragma weak directive tells the link editor to not issue a\r\nwarning if it does not find a defining declaration of weak_symbol. References to the\r\nsymbol use the appropriate lvalue if the symbol is defined; otherwise, it uses\r\nmemory location zero (0).\r\n• #pragma weak weak_symbol = strong_symbol\r\nIn this case, the weak_symbol is an alias that denotes the same function or data\r\nobject as that denoted by the strong_symbol, unless a defining declaration for the\r\nweak_symbol is encountered at static link time or in dynamically linked libraries. If\r\nencountered, the defining declaration preempts the weak denotation.\r\nObserve the following conventions when using this form of the directive:\r\n– Define the strong_symbol within the same compilation unit in which the\r\ndirective occurs.\r\n– Declare the weak and strong symbols with compatible types. When the strong\r\nsymbol is a data object, its declaration must be initialized.\r\n– Declare the weak_symbol with extern linkage in the same compilation unit. The\r\nextern declaration of the weak symbol is not required, unless the symbol is\r\nreferenced within the compilation unit, but Silicon Graphics recommends it for\r\ntype-checking purposes.\r\nWeak extern declarations are typically used to export non-ANSI C symbols\r\nfrom a library without polluting the ANSI C name-space. As an example, libc\r\nmay export a weak symbol read(), which aliases a strong symbol _read(),\r\nwhere _read() is used in the implementation of the exported symbol\r\nfread(). You can either use the exported (weak) version of read(), or define\r\nyour own version of read(), thereby preempting the weak denotation of this\r\nsymbol. This will not alter the definition of fread(), because it depends only\r\non the (strong) symbol _read(), which is outside of the ANSI C name-space.\r\nFor example, the following code defines a new version of read() (which is a\r\nweak symbol in libc.so.1):\r\n007–3587–005 47",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/d6e38b55-2e76-4b94-8359-787c50662171.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=47f342619bfad404edf4c86a20a895a1454e5486d61cc8bde4dc5d67f0c49f65",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3fc72912-219e-4101-9fb5-51ab42b67a0d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 70,
            "page_width": 612,
            "page_height": 792,
            "content": "7: Loader Information #pragma Directives\r\n/* read() is a weak symbol in libc.so.1\r\nThis program omits error checking and makes no\r\nattempt at good style!\r\n*/\r\n#include <stdio.h>\r\nchar *read(int);\r\nint main(int argc, char **argv)\r\n{\r\nchar *var;\r\nint c;\r\nc = getchar();\r\nvar = read(c);\r\nprintf(‘‘%s\\n’’,var);\r\nreturn c;\r\n}\r\nchar *read(int val)\r\n{\r\nstatic char buf[100];\r\nsprintf(buf,’’%d’’,val);\r\nreturn buf;\r\n}\r\nThis program reads a single character from standard input and prints the\r\ncharacter’s decimal value. Even though getchar() uses the libc.so version\r\nof fread(), the redefinition of read() has no effect on the internal processing\r\nin libc.so because fread() uses the strong symbol _read().\r\n!\r\nCaution: The #pragma weak directive is not supported in -o32 C++.\r\n48 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/3fc72912-219e-4101-9fb5-51ab42b67a0d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bc3ed18dbf38434aebd1cba0e36f59708d000f61c86b662669af4188661229f6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 462
      },
      {
        "segments": [
          {
            "segment_id": "1b9a1568-1455-4f66-9c28-b00238166152",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 71,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 8\r\nLoop Nest Optimization #pragma Directives\r\nTable 8-1 contains an alphabetical list of the #pragma directives discussed in this\r\nchapter, along with a brief description of each and the compiler versions in which the\r\ndirective is supported.\r\nTable 8-1 Loop Nest Optimization #pragma Directives\r\n#pragma Short Description\r\nCompiler\r\nVersions\r\n#pragma aggressive inner\r\nloopfission\r\nTells the compiler to fission inner loops into as many\r\nloops as possible.\r\n7.0 and later\r\n#pragma blocking size Sets the blocksize of the specified loop, if it is involved\r\nin a blocking for the primary (or secondary) cache.\r\n7.0 and later\r\n#pragma fission Tells the compiler to fission the enclosing specified\r\nlevels of loops after this directive.\r\n7.0 and later\r\n#pragma fissionable Disables validity testing. 7.0 and later\r\n#pragma fusable Disables validity testing. 7.0 and later\r\n#pragma fuse Tells the compiler to fuse the following n loops, which\r\nmust be immediately adjacent.\r\n7.0 and later\r\n#pragma ivdep Liberalizes dependence analysis. This applies only to\r\ninner loops. Given two memory references, where at\r\nleast one is loop variant, ignore any loop-carried\r\ndependences between the two references.\r\n6.0 and later\r\n#pragma no blocking Prevents the compiler from involving this loop in cache\r\nblocking.\r\n7.0 and later\r\n#pragma no fission Keeps the following loop from being fissioned. Its\r\ninnermost loops, however, are allowed to be fissioned.\r\n7.0 and later\r\n#pragma no fusion Keeps the following loop from being fused with other\r\nloops.\r\n7.0 and later\r\n007–3587–005 49",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/1b9a1568-1455-4f66-9c28-b00238166152.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=12fe1e36cc017b5a5301ec5e1a15b22e75b4e950ffa414b1932900712f401b03",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f0482d8b-4770-4c49-8da3-de2fabd41bde",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 72,
            "page_width": 612,
            "page_height": 792,
            "content": "8: Loop Nest Optimization #pragma Directives\r\n#pragma Short Description\r\nCompiler\r\nVersions\r\n#pragma no interchange Prevents the compiler from involving the loop directly\r\nfollowing this directive (or any loop nested within this\r\nloop) in an interchange.\r\n7.0 and later\r\n#pragma prefetch Specifies prefetching for each level of the cache. Scope:\r\nentire function containing the directive.\r\n7.1 and later\r\n#pragma prefetch_manual Specifies whether manual prefetches (through #pragma\r\ndirectives) should be respected or ignored. Scope:\r\nentire function containing the directive.\r\n7.1 and later\r\n#pragma prefetch_ref Generates a prefetch and connects it to the specified\r\nreference (if possible).\r\n7.0 and later\r\n#pragma\r\nprefetch_ref_disable\r\nDisables prefetching for the specified reference in the\r\ncurrent loop nest.\r\n7.1 and later\r\n#pragma unroll Suggests to the compiler that a specified number of\r\ncopies of the loop body be added to the inner loop. If\r\nthe loop following this directive is an inner loop, then it\r\nindicates standard unrolling (version 7.2 and later). If\r\nthe loop following this directive is not innermost, then\r\nouter loop unrolling (unroll and jam) is performed\r\n(version 7.0 and later).\r\n7.0 and later\r\n#pragma aggressive inner loop fission\r\nThe #pragma aggressive inner loop fission directive instructs the compiler\r\nto fission inner loops into as many loops as possible.\r\nThe syntax of the #pragma aggressive inner loop fission directive is as\r\nfollows:\r\n#pragma aggressive inner loop fission\r\nThe #pragma aggressive inner loop fission directive must be followed by\r\nan inner loop and has no effect if that loop is no longer inner after loop interchange.\r\n50 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/f0482d8b-4770-4c49-8da3-de2fabd41bde.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1817c117f113d27cf553614c2f386b521f15ef5289d8e2ee87293a52a9d6f6cd",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 491
      },
      {
        "segments": [
          {
            "segment_id": "d5e3c03a-32ba-43f0-bb5f-47044728a253",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 73,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma blocking size\r\nThe #pragma blocking size directive sets the blocksize of the specified loop.\r\nThe syntax of the #pragma blocking size directive is as follows:\r\n#pragma blocking size [n1, n2]\r\nThe loop specified, if it is involved in a blocking for the primary (secondary) cache,\r\nwill have a blocksize of n1 (n2). The compiler tries to include this loop within such a\r\nblock. If a 0 blocking size is specified, then the loop is not stripped, but the entire\r\nloop is inside the block.\r\nExample 8-1 #pragma blocking size\r\nIn the following code, the compiler makes 20 \u0002 20 blocks when blocking:\r\nvoid amat (double x, double y, double z, int n, int m, int mm)\r\n{\r\nint i, j, k;\r\nfor (k = 0; k < n; k++)\r\n{\r\n#pragma blocking size (20)\r\nfor (j = 0; j < m; j++)\r\n{\r\n#pragma blocking size (20)\r\nfor (i = 0; i < mm; i++)\r\nz[i,k] = z[i,k] + x[i,j] * y[j,k]\r\n}\r\n}\r\n}\r\n#pragma no blocking\r\nThe #pragma no blocking directive prevents the compiler from involving this\r\nloop in cache blocking.\r\nThe syntax of the #pragma no blocking directive is as follows:\r\n007–3587–005 51",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/d5e3c03a-32ba-43f0-bb5f-47044728a253.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ca6cf8e247bb9899a37f53028f6726c999818226e02da9fc56d2e59f1073f9b6",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ab054eac-4b57-444c-b01c-44bbe2a5a942",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 74,
            "page_width": 612,
            "page_height": 792,
            "content": "8: Loop Nest Optimization #pragma Directives\r\n#pragma no blocking\r\n#pragma fission\r\nThe #pragma fission directive instructs the compiler to fission the enclosing n\r\nlevels of loops after this directive.\r\nThe syntax of the #pragma fission directive is as follows:\r\n#pragma fission [n]\r\nThe default for n is 1. The compiler performs a validity test unless\r\n#pragma fissionable is also specified. The compiler does not reorder statements.\r\n#pragma fissionable\r\nThe #pragma fissionable directive disables validity testing for loop fissioning.\r\nThe syntax of the #pragma fissionable directive is as follows:\r\n#pragma fissionable\r\n#pragma no fission\r\nThe #pragma no fission instructs the compiler to not fission the loop directly\r\nfollowing this directive. Any inner loops, however, are allowed to be fissioned.\r\nThe syntax of the #pragma no fission directive is as follows:\r\n#pragma no fission\r\n52 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/ab054eac-4b57-444c-b01c-44bbe2a5a942.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=06bc5bc9b23d6f08fa28a05391945db3cdc4dfe0540ecc6ce60c580ea4555c77",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 336
      },
      {
        "segments": [
          {
            "segment_id": "b828f91d-4174-411d-8321-a40a0d65e454",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 75,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma fuse\r\nThe #pragma fuse directive instructs the compiler to fuse the specified number of\r\nimmediately adjacent loops.\r\nThe syntax of the #pragma fuse directive is as follows:\r\n#pragma fuse [num, level]\r\nThe loops to be fused must immediately follow the #pragma fusion directive.\r\nThe default value for num is 2. Fusion is attempted on each pair of adjacent loops\r\nand the level, by default, is determined by the maximal perfectly nested loop levels of\r\nthe fused loops, although partial fusion is allowed. Iterations may be peeled as\r\nneeded during fusion; the limit of this peeling is 5 or the number specified by the\r\n-LNO:fusion_peeling_limit option. No fusion is done for non-adjacent outer\r\nloops.\r\nWhen the #pragma fusable directive is present, no validity test is done and the\r\nfusion is done up to the maximal common levels.\r\n#pragma fusable\r\nThe #pragma fusable directive disables validity testing for loop fusing.\r\nThe syntax of the #pragma fusable directive is as follows:\r\n#pragma fusable\r\n#pragma no fusion\r\nThe #pragma no fusion directive instructs the compiler that the loop following\r\nthis directive should not be fused with other loops.\r\nThe syntax of the #pragma no fusion directive is as follows:\r\n#pragma no fusion\r\n007–3587–005 53",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/b828f91d-4174-411d-8321-a40a0d65e454.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=879ed1c611ceb87f34f71a7923dd41ac5a4d64d0521ab6a952b94855eb49bd3c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "45d4ec7e-5c49-41fa-8cf3-75e2bfc9e739",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 76,
            "page_width": 612,
            "page_height": 792,
            "content": "8: Loop Nest Optimization #pragma Directives\r\n#pragma no interchange\r\nThe #pragma no interchange directive prevents the compiler from involving the\r\nnext loop in an interchange. This directive also applies to any loop nested within the\r\nindicated loop.\r\nThe syntax of the #pragma no interchange directive is as follows:\r\n#pragma no interchange\r\nThe pragma directive statement must immediately precede the loop to which it\r\napplies.\r\n#pragma ivdep\r\nThe #pragma ivdep directive instructs the compiler to liberalize dependence\r\nanalysis.\r\nThe syntax of the #pragma ivdep directive is as follows:\r\n#pragma ivdep\r\nGiven two memory references, where at least one is loop variant, this directive\r\ninstructs the compiler to ignore any loop-carried dependences between the two\r\nreferences. The #pragma ivdep directive applies only to inner loops. If\r\n#pragma ivdep is used on a loop that has an inner loop, the compiler ignores it.\r\nExample 8-2 #pragma ivdep\r\nThe following are some examples of the use of #pragma ivdep:\r\n• ivdep does not break the dependence because b(k) is not loop variant:\r\n#pragma ivdep\r\nfor (i = 0; i < n; i++)\r\nb[k] = b[k] +a[i];\r\n• ivdep breaks the dependence, but the compiler warns the user that it is breaking\r\nan obvious dependence:\r\n#pragma ivdep\r\nfor (i = 0; i < n; i++)\r\n54 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/45d4ec7e-5c49-41fa-8cf3-75e2bfc9e739.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fdd48349a40f84ab981cb476014cdb4a527f8863cc72c64a28c0c9cce00c12c0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 418
      },
      {
        "segments": [
          {
            "segment_id": "ca55e408-4aef-4098-b11f-0a6cf7ae9a61",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 77,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\na[i] = a[i-1] + 3.0;\r\n• ivdep breaks the dependence:\r\n#pragma ivdep\r\nfor (i = 0; i < n; i++)\r\na[b[i]] = a[b[i]] + 3.0;\r\n• ivdep does not break the dependence on a[i] because it is within an iteration:\r\n#pragma ivdep\r\nfor (i = 0; i < n; i++)\r\n{\r\na[i] = b[i];\r\nc[i] = a[i] + 3.0;\r\n}\r\nIf -OPT:cray_ivdep=TRUE is specified, ivdep instructs the compiler to use Cray\r\nsemantics and break all backward dependences:\r\n• ivdep breaks the dependence but the compiler warns the user that it is breaking\r\nan obvious dependence:\r\n#pragma ivdep\r\nfor (i = 0; i < n; i++)\r\n{\r\na[i] = a[i - 1] + 3.0;\r\n}\r\n• ivdep does not break the dependence, because the it is from the load to the store,\r\nand the load comes lexically before the store:\r\n#pragma ivdep\r\nfor (i = 0; i < n; i++)\r\n{\r\na[i] = a[i + 1] + 3.0;\r\n}\r\nTo break all dependences, specify the following: -OPT:liberal_ivdep=TRUE.\r\n#pragma prefetch\r\nThe #pragma prefetch directive specifies prefetching for each level of the cache.\r\n007–3587–005 55",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/ca55e408-4aef-4098-b11f-0a6cf7ae9a61.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=281d8af432a96fc47f6245d9b5e23d355f6798db728fe9ecbe407e2dbe658d23",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "21fb2f7d-1d56-4463-80dc-d6a2e08e0c5e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 78,
            "page_width": 612,
            "page_height": 792,
            "content": "8: Loop Nest Optimization #pragma Directives\r\nThe syntax of the #pragma prefetch directive is as follows:\r\n#pragma prefetch [n1, n2]\r\nn1 controls the level 1 cache; n2 controls level 2. n1 and n2 can have the following\r\nvalues:\r\n•\r\n• 0: prefetching is off (default for all processors except R10000)\r\n• 1: prefetching is on but conservative (default at -03 when prefetch is on)\r\n• 2: prefetching on and aggressive\r\nThe scope of this directive is the entire function that contains it.\r\n#pragma prefetch_manual\r\nThe #pragma prefetch_manual directive instructs the compiler as to whether\r\nmanual prefetches (through #pragma directives) should be respected or ignored.\r\nThe syntax of the #pragma prefetch_manual directive is as follows:\r\n#pragma prefetch_manual[n]\r\nn can have a value of 0 (the compiler ignores manual prefetches; this is the default for\r\nall processors except R10000) or 1 (the compiler respects manual prefetches; default at\r\n-03 for R10000 and beyond).\r\nThe scope of this directive is the entire function that contains it.\r\n#pragma prefetch_ref\r\nThe #pragma prefetch_ref directive generates a prefetch and connects it to the\r\nspecified reference (if possible).\r\nThe syntax of the #pragma prefetch_ref directive is as follows:\r\n56 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/21fb2f7d-1d56-4463-80dc-d6a2e08e0c5e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c229fe369979b9567662220809ab00d6650e393f395e8dd5d820af8f863b667b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 380
      },
      {
        "segments": [
          {
            "segment_id": "1cb87086-a97c-4a50-9ffc-506982695891",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 79,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\npragma prefetch_ref = ref [, stride = num1 [, num2]]\r\n[, level = [lev1][, lev2]]\r\n[, kind = {rd|wr}]\r\n[, size = sz]\r\nref is the object you want prefetched.\r\nTable 8-2, page 57 describes each of the possible #pragma prefetch_ref clauses.\r\nThese clauses are optional.\r\nTable 8-2 Clauses for #pragma prefetch_ref\r\nClause Effect\r\nDefault\r\nValue\r\nstride Prefetches every num iteration(s) of this loop. 1\r\nlevel Specifies the level in memory hierarchy to prefetch. The\r\npossible values for level are\r\n1: prefetch from L2 to L1 cache\r\n2: prefetch from memory to L1 cache\r\n2\r\nkind Specifies read or write. write\r\nsize Specifies the size (in KB) of the object referenced in this\r\nloop. Must be a constant.\r\nN/A\r\nThe #pragma prefetch_ref directive instructs the compiler to take the following\r\nactions:\r\n• Generate a prefetch and connect to the specified object (if possible).\r\n• Search for references in the current loop-nest that match the supplied object.\r\n– If such a reference is found, then the prefetch for that object is scheduled\r\nrelative to the prefetch node, based on the miss latency for the specified level\r\nof the cache.\r\n– If no such reference is found, the prefetch is generated at the start of the loop\r\nbody.\r\n• Ignore all references by the automatic prefetcher (if enabled) to this variable in this\r\nloop-nest.\r\n007–3587–005 57",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/1cb87086-a97c-4a50-9ffc-506982695891.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f9e213942eaaecde1d48af2609f774cd3baf576c3a5556fb18f23acdacc53d45",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "25546fab-3558-4dab-84c3-dc512a446ad9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 80,
            "page_width": 612,
            "page_height": 792,
            "content": "8: Loop Nest Optimization #pragma Directives\r\n• Have the automatic prefetcher (if enabled) use the supplied size (if specified) in its\r\nvolume analysis for this object.\r\nThis directive has no scope; it just generates a prefetch.\r\n#pragma prefetch_ref_disable\r\nThe #pragma prefetch_ref_disable directive explicitly disables prefetching for\r\nthe specified reference (in the current loop nest).\r\nThe syntax of the #pragma prefetch_ref_disable directive is as follows:\r\n#pragma prefetch_ref_disable = ref [, size = num]\r\n• ref is the object for which you want to disable prefetching.\r\n• num specifies the size (in KB) of the object referenced in this loop (optional). The\r\nsize must be a constant. This explicitly disables the prefetching of all references to\r\nobject ref in the current loop nest. If enabled, the auto-prefetcher runs but ignores\r\nref. The size is used for volume analysis.\r\nThe scope of this directive is the entire function containing it.\r\n#pragma unroll\r\nThe #pragma unroll directive suggests to the compiler the type of unrolling that\r\nshould be done.\r\nThe syntax of the #pragma unroll directive is as follows:\r\n#pragma unroll [n]\r\nThis directive instructs the compiler to add n-1 copies of the loop body to the inner\r\nloop. If the loop that this directive immediately precedes is an inner loop, then it\r\nindicates standard unrolling (version 7.2 and later). If the loop that this directive\r\nimmediately precedes is not innermost, then outer loop unrolling (unroll and jam) is\r\nperformed (version 7.0 and later).\r\n58 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/25546fab-3558-4dab-84c3-dc512a446ad9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a5ac1dd426b35cf31e4f71fedf03bed91c0575c1078362e6991589956c8b645c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 471
      },
      {
        "segments": [
          {
            "segment_id": "487b9132-9ab0-4064-af49-ffa373718bcf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 81,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nThe value of n must be at least 1. If it is 1, then unrolling is not performed.\r\n!\r\nCaution: The #pragma unroll directive works only on loops that are legal to\r\nunroll. Loops are often not unrollable in C because of potential aliasing. In these\r\ncases, you may want to use restrict pointers or the option -OPT:alias=disjoint\r\n(see the C Language Reference Manual for more information on restrict pointers). When\r\n-OPT:alias=disjoint is specified, distinct pointer expressions are assumed to\r\npoint to distinct, non-overlapping objects.\r\n-OPT:alias=disjoint is unsafe and may cause existing C programs to fail in\r\nobscure ways, so it should be used with extreme care.\r\nExample 8-3 #pragma unroll\r\nThe following code samples show the effect of using #pragma unroll. The code in\r\nSample 1 becomes Sample 2, not Sample 3:\r\n• Sample 1:\r\n#pragma unroll (2)\r\nfor (i = 0; i < 10; i++)\r\n{\r\nfor (j = 0; j < 10; j++)\r\n{\r\na i[j] = a[i][j] + b[i][j];\r\n}\r\n}\r\n• Sample 2:\r\nfor (i = 0; i < 10; i + 2)\r\n{\r\nfor (j = 0; j < 10; j++)\r\n{\r\na [i][j] = a[i][j] + b[i][j];\r\nai+1j = ai+1j + bi+1j;\r\n}\r\n}\r\n• Sample 3:\r\nfor (i = 0; i < 10; i + 2)\r\n{\r\n007–3587–005 59",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/487b9132-9ab0-4064-af49-ffa373718bcf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e36417163b9e96c0c53be848a2ba2ad39087e6387a27dd7b0ca2862deccf1a24",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "806dcaa3-2124-4f6a-a2cd-84c15474a042",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 82,
            "page_width": 612,
            "page_height": 792,
            "content": "8: Loop Nest Optimization #pragma Directives\r\nfor (j = 0; j < 10; j++)\r\na[i][j] = a[i][j] + b[i][j];\r\nfor (j = 0; j < 10; j++)\r\n{\r\na[i+1][j] = a[i+1][[j] + b[i+1][j];\r\n}\r\n}\r\nThe #pragma unroll directive is attached to the given loop, so that if an\r\ninterchange is performed, the corresponding loop is still unrolled. That is, Sample\r\n1 is equivalent to the following:\r\n#pragma interchange\r\nfor (j = 0; j < 10; j++)\r\n{\r\n#pragma unroll (2)\r\nfor (i = 0; i < 10; i++)\r\na[i][j] = a[i][j] + b[i][j];\r\n}\r\n60 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/806dcaa3-2124-4f6a-a2cd-84c15474a042.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4dab9838678f945721f60856e87f05503bb1fe4ba5d8f240da98f0a69de637c4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 319
      },
      {
        "segments": [
          {
            "segment_id": "81b403f5-d6f7-4827-972c-9d9628cd0626",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 83,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 9\r\nMultiprocessing #pragma Directives\r\nTable 9-1 contains an alphabetical list of the #pragma directives discussed in this\r\nchapter, along with a brief description of each and the compiler versions in which the\r\ndirective is supported.\r\nTable 9-1 Multiprocessing #pragma Directives\r\n#pragma Short Description\r\nCompiler\r\nVersions\r\n#pragma copyin Copies the value from the master thread’s version of\r\nan -Xlocal-linked global variable into the slave\r\nthread’s version.\r\n6.0 and later\r\n#pragma critical Protects access to critical statements. 6.0 and later\r\n#pragma enter gate (see \"#pragma\r\nenter gate and #pragma exit\r\ngate\", page 66)\r\nIndicates the point that all threads must clear before\r\nany threads are allowed to pass the corresponding\r\nexit gate.\r\n6.0 and later\r\n#pragma exit gate (see \"#pragma\r\nenter gate and #pragma exit\r\ngate\", page 66)\r\nStops threads from passing this point until all\r\nthreads have cleared the corresponding enter\r\ngate.\r\n6.0 and later\r\n#pragma independent Tells the compiler to run independent code section\r\nin parallel with the rest of the code in the parallel\r\nregion.\r\n6.0 and later\r\n#pragma local Tells the compiler the names of all the variables that\r\nmust be local to each thread.\r\n6.0 and later\r\n#pragma no side effects Tells the compiler to assume that all of the named\r\nfunctions are safe to execute concurrently.\r\n7.1 and later\r\n#pragma one processor Causes the next statement to be executed on only\r\none processor.\r\n6.0 and later\r\n#pragma parallel (see also\r\n\"#pragma parallel Clauses\", page\r\n74)\r\nMarks the start of a parallel region. 6.0 and later\r\n007–3587–005 61",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/81b403f5-d6f7-4827-972c-9d9628cd0626.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a668d21615e9d43b35835b4ee89fff4a50ada4dd40b919f224d4c33ad0da986f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0d7bd6af-e511-416e-a445-d784d4ce5a94",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 84,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\n#pragma Short Description\r\nCompiler\r\nVersions\r\n#pragma pfor (see also \"#pragma\r\npfor Clauses\", page 79)\r\nMarks a for loop to run in parallel. 6.0 and later\r\n#pragma pure Tells the compiler that return value depends\r\nexclusively on argument values and causes no side\r\neffects.\r\n7.3 and later\r\n#pragma set chunksize Tells the compiler which values to use for\r\nchunksize.\r\n6.0 and later\r\n#pragma set numthreads Tells the compiler which values to use for\r\nnumthreads.\r\n6.0 and later\r\n#pragma set schedtype Tells the compiler which values to use for\r\nschedtype.\r\n6.0 and later\r\n#pragma shared Tells the compiler the names of all the variables that\r\nthe threads must share.\r\n6.0 and later\r\n#pragma synchronize Stops threads until all threads reach this point. 6.0 and later\r\n#pragma copyin\r\nThe #pragma copyin directive allows you to copy values from the master thread’s\r\nversion of an -Xlocal-linked global variable into the slave thread’s version.\r\n#pragma copyin has the following syntax:\r\n#pragma copyin item1 [, item2 ...]\r\nEach item must be a localized (that is, linked -Xlocal) global variable.\r\nDo not place this directive inside a parallel region.\r\nExample of #pragma copyin\r\nThe following line of code demonstrates the use of the #pragma copyin directive:\r\n62 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/0d7bd6af-e511-416e-a445-d784d4ce5a94.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=88df588b66231078a3525de6d06a57f02b4090de68be12b9761d7d1aa193db37",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 457
      },
      {
        "segments": [
          {
            "segment_id": "861cb340-274b-4858-bd06-58851fa66ae8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 85,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma copyin x,y, A[i]\r\nThis propagates the master thread’s values for x, y, and the ith element of array A\r\ninto each slave thread’s copy of the corresponding variable. All of these items must\r\nbe linked -Xlocal. This directive is translated into executable code, so in this\r\nexample i is evaluated at the time this statement is executed.\r\n#pragma critical\r\nSometimes the bulk of the work done by a loop can be done in parallel, but the entire\r\nloop cannot run in parallel because of a single data-dependent statement. Often, you\r\ncan move such a statement out of the parallel region. When that is not possible, you\r\ncan use the #pragma critical directive to place a lock on the statement to\r\npreserve the integrity of the data.\r\nThe syntax of the #pragma critical directive is as follows:\r\n#pragma critical [lock_variable]\r\n[code]\r\nThe statement after the #pragma critical directive code is executed by all threads,\r\none at a time.\r\nIn the multiprocessing C/C++ compiler, you can use the #pragma critical\r\ndirective to put a lock on a critical statement (or compound statement using {}). When\r\nyou put a lock on a statement, only one thread at a time can execute that statement. If\r\none thread is already working on a #pragma critical protected statement, any\r\nother thread that needs to execute that statement must wait until the first thread has\r\nfinished executing it.\r\nThe lock variable is an optional integer variable that must be initialized to zero. The\r\nparentheses are required. If you do not specify a lock variable, the compiler\r\nautomatically uses a global lock variable. Multiple critical constructs inside the same\r\nparallel region are considered to be dependent on each other unless they use distinct\r\nexplicit lock variables.\r\n007–3587–005 63",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/861cb340-274b-4858-bd06-58851fa66ae8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7754a6a8b363452510b30ed664056bb86503db0f4e76a31e0bb09232001772f5",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ad343f5c-c455-403b-bf08-228dce38fce6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 86,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\n!\r\nCaution: This #pragma directive works slightly differently in the IRIS POWER C\r\nAnalyzer (PCA) for compiler versions 7.1 and older. See theIRIS POWER C User’s\r\nGuide for more information.\r\nFigure 9-1, page 65, illustrates critical segment execution.\r\n64 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/ad343f5c-c455-403b-bf08-228dce38fce6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=49856946a5ceddc69da1a1687e3b9bad965124c1de61e2368ba430ea4896579e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e2882591-f96c-461a-8ca8-888bfdf33083",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 87,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nA\r\nA\r\nA\r\nA\r\n...\r\n#pragma parallel ...\r\n{ ...\r\n#pragma critical\r\n { ...\r\n }\r\n} ...\r\n} A\r\na12043\r\nFigure 9-1 Critical Segment Execution\r\n007–3587–005 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/e2882591-f96c-461a-8ca8-888bfdf33083.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2ea787f1f316df44764dd348d1e2477308eaf6b1f274c2e69a73105dfa43080d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 372
      },
      {
        "segments": [
          {
            "segment_id": "7b3f523c-3679-4bbc-8c55-cd52ecc67d3d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 88,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\n#pragma enter gate and #pragma exit gate\r\nThe #pragma enter gate and #pragma exit gate directives provide an\r\nadditional tool for coordinating the processing of code within a parallel region. These\r\ndirectives work as a matched set, by establishing a section of code bounded by gates at\r\nthe beginning and end. These gates form a special barrier. No thread can exit a gated\r\nregion until all threads have entered it. This construct gives more flexibility when\r\nmanaging dependences between the work-sharing constructs in a parallel region.\r\nBy using #pragma enter gate and #pragma exit gate pairs, you can make\r\nsubtle distinctions about which construct is dependent on which other construct.\r\nThe syntax of the #pragma enter gate directive is as follows:\r\n#pragma enter gate\r\nPut this directive after the work-sharing construct that all threads must clear before\r\nany can pass #pragma exit gate.\r\nThe syntax of the #pragma exit gate directive is as follows:\r\n#pragma exit gate\r\nPut this directive before the work-sharing construct that is dependent on the\r\npreceding #pragma enter gate. No thread enters this work-sharing construct until\r\nall threads have cleared the work-sharing construct controlled by the corresponding\r\n#pragma enter gate.\r\nNesting of the #pragma enter gate and #pragma exit gate directives is not\r\nsupported.\r\n!\r\nCaution: These directives work slightly differently in the IRIS POWER C Analyzer\r\n(PCA) for compiler versions 7.1 and older. See the IRIS POWER C User’s Guide for\r\nmore information.\r\nFigure 9-2, page 67, is a “time-lapse” sequence showing execution using enter and\r\nexit gates.\r\n66 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/7b3f523c-3679-4bbc-8c55-cd52ecc67d3d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c60c5de49a52926699566d600ec90891f6d794031a5dd52f134d7e54bc5134e7",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "02f09846-0c55-4be8-b8ad-c70457e73d16",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 89,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n1\r\nenter gate\r\nexit gate\r\n2\r\n3\r\n4\r\n...\r\n#pragma parallel ...\r\n{ ...\r\n#pragma enter gate\r\n ...\r\n#pragma exit gate\r\n ...\r\n} ...\r\na12044\r\nFigure 9-2 Execution Using Gates\r\n007–3587–005 67",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/02f09846-0c55-4be8-b8ad-c70457e73d16.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2fd1b8a2776667b4fb22ee192c1206deac6fcb6832ff3a31fda1237d1c5bfb39",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 296
      },
      {
        "segments": [
          {
            "segment_id": "d3d2293e-fc39-4936-bd50-a8335628be0a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 90,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\nExample 9-1 #pragma exit gate and #pragma enter gate\r\nThis example shows how to use these two directives to work with parallelized\r\nsegments that have some dependences.\r\nSuppose you have a parallel region consisting of the work-sharing constructs A, B, C,\r\nD, E, and so forth. A dependence may exist between B and E such that you cannot\r\nexecute E until all the work on B has completed (see the following code).\r\n#pragma parallel ...\r\n{\r\n..A..\r\n..B..\r\n..C..\r\n..D..\r\n..E.. (depends on B)\r\n}\r\nOne option is to put a #pragma synchronize before E. But this #pragma directive\r\nis wasteful if all the threads have cleared B and are already in C or D. All the faster\r\nthreads pause before E until the slowest thread completes C and D.\r\n#pragma parallel ...\r\n{\r\n..A..\r\n..B..\r\n..C..\r\n..D..\r\n#pragma synchronize\r\n..E..\r\n}\r\nTo reflect this dependence, put #pragma enter gate after B and\r\n#pragma exit gate before E. Putting #pragma enter gate after B tells the\r\nsystem to note which threads have completed the B work-sharing construct. Putting\r\n#pragma exit gate prior to the E work sharing construct tells the system to allow\r\nno thread into E until all threads have cleared B. See the following example:\r\n#pragma parallel ...\r\n{\r\n..A..\r\n..B..\r\n#pragma enter gate\r\n68 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/d3d2293e-fc39-4936-bd50-a8335628be0a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4e040211abc8f4b5c143fd10b35d22ced38943c97611d3c9845a36643c0bd9ac",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6c3fd1a4-648b-4250-8013-ca1a37af12c9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 91,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n..C..\r\n..D..\r\n#pragma exit gate\r\n..E..\r\n}\r\n#pragma independent\r\nRunning a loop in parallel is a class of parallelism sometimes called “fine-grained\r\nparallelism” or “homogeneous parallelism.” It is called homogeneous because all the\r\nthreads execute the same code on different data. Another class of parallelism is called\r\n“coarse-grained parallelism” or “heterogeneous parallelism.” As the name suggests,\r\nthe code in each thread of execution is different.\r\nEnsuring data independence for heterogeneous code executed in parallel is not\r\nalways as easy as it is for homogeneous code executed in parallel. (Ensuring data\r\nindependence for homogeneous code is not a trivial task, either.)\r\nThe syntax of the #pragma independent directive is as follows:\r\n#pragma independent\r\n[code]\r\nThe #pragma independent directive has no modifiers. Use this directive to tell the\r\nmultiprocessing C/C++ compiler to run code in parallel with the rest of the code in\r\nthe parallel region. Other threads can proceed past this code as soon as it starts\r\nexecution.\r\nFigure 9-3, page 70, shows an independent segment with execution by only one\r\nthread.\r\n007–3587–005 69",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/6c3fd1a4-648b-4250-8013-ca1a37af12c9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cb8c5eda30da5fdb12d05902d70d4e5197f7f781a9cbdac3d3d5d3b935b6a6f1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "19cdb99b-1a04-422c-8456-178a74167e50",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 92,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\nA B\r\n...\r\n#pragma parallel ...\r\n{ ...\r\n#pragma independent\r\n { ...\r\n }\r\n#pragma independent\r\n { ...\r\n } \r\n} ...\r\n} A\r\n} B\r\na12045\r\nFigure 9-3 Independent Segment Execution\r\n#pragma local\r\nThe #pragma local directive tells the multiprocessing C/C++ compiler the names\r\nof all the variables that must be local to each thread.\r\nThe syntax of the #pragma local directive is as follows:\r\n#pragma local variable1 [, variable2...]\r\n70 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/19cdb99b-1a04-422c-8456-178a74167e50.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=54c0ac24a389fe78926599086467a8d6fc877f4818749229bff14e4c89cbfee1",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 475
      },
      {
        "segments": [
          {
            "segment_id": "58c528e0-b095-4f51-967b-562dd5c6ac1d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 93,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nNote: A variable in a local clause cannot have initializers and cannot be an array\r\nelement or a field within a class, structure, or union.\r\n#pragma no side effects\r\nThe #pragma no side effects directive tells the compiler that the only\r\nobservable effect of a call to any of the named functions is its return value. In\r\nparticular, the function does not modify an object or file that exists before it is called,\r\nand does not create a new object or file that persists after the completion of the call.\r\nThis implies that if its return value is not used, the call may be skipped.\r\nThe syntax of the #pragma no side effects directive is as follows:\r\n#pragma no side effects function1 [, function2...]\r\nThe functions named must be declared before the directive.\r\n#pragma no side effects is not currently supported in C++, except for symbols\r\nmarked extern‘‘C’’.\r\n#pragma one processor\r\nThe #pragma one processor directive causes the statement that follows it to be\r\nexecuted by one thread.\r\nThe syntax of the #pragma one processor directive is as follows:\r\n#pragma one processor\r\n[code]\r\nIf a thread is executing the statement enclosed by this directive, other threads that\r\nencounter this statement must wait until the statement has been executed by the first\r\nthread, then skip the statement and continue.\r\n007–3587–005 71",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/58c528e0-b095-4f51-967b-562dd5c6ac1d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7d4916547aa3f355d00ec90ea1a5c6d868f60a0e8717614ae82b76ec4ec04db1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e2dff973-fac0-4df8-b57c-4a0451a0e20c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 94,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\nIf a thread has completed execution of the statement enclosed by this directive, then all\r\nthreads encountering this statement skip the statement and continue without pause.\r\nFigure 9-4, page 72, shows code executed by only one thread. No thread can proceed\r\npast this code until it has been executed.\r\npause for A pause for A pause for A A\r\n...\r\n#pragma parallel ...\r\n{ ...\r\n#pragma one processor\r\n { ...\r\n }\r\n} ...\r\n} A\r\na12046\r\nFigure 9-4 One Processor Segment\r\n#pragma parallel\r\nThe #pragma parallel directive indicates that the subsequent statement (or\r\ncompound statement) is to be run in parallel. #pragma parallel has four clauses,\r\nshared, local, if, and numthreads, that provide the compiler with more\r\ninformation on how to run the block of code (see \"#pragma parallel Clauses\",\r\n72 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/e2dff973-fac0-4df8-b57c-4a0451a0e20c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d9c9a2ca7668ef19eb35511bb5e24a1b34b68fbb7a05366a89cde3f402377817",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 361
      },
      {
        "segments": [
          {
            "segment_id": "4766fc5b-c6c3-4301-ac01-199242eae7df",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 95,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\npage 74). These clauses can either be listed on the same line as the #pragma\r\nparallel directive or broken out into separate #pragma directives.\r\nThe syntax of the #pragma parallel directive is as follows:\r\n#pragma parallel [clause1[, clause2 ...]]\r\nUse the #pragma parallel directive to start a parallel region. This directive has a\r\nnumber of clauses (see \"#pragma parallel Clauses\", page 74 for more details), but\r\nto run a single loop in parallel, the only clauses you usually need are shared and\r\nlocal. These options tell the multiprocessing C/C++ compiler which variables to\r\nshare between all threads of execution and which variables to treat as local.\r\nThe code that makes up the parallel region is usually delimited by curly braces ({ })\r\nand immediately follows the #pragma parallel directives and its modifiers.\r\nObjects are shared by default unless declared within a parallel program region. If they\r\nare declared within a parallel program region, they are local by default. For example:\r\nmain() {\r\nint x, s, l;\r\n#pragma parallel shared (s) local (l)\r\n{\r\nint y;\r\n/* within this parallel region, by the default rules\r\nx and s are shared whereas l and y are local */\r\n...\r\n}\r\n...\r\n}\r\n!\r\nCaution: This directive works slightly differently in the IRIS POWER CTM Analyzer\r\n(PCA) for compiler versions 7.1 and older. See the IRIS POWER C User’s Guide for\r\nmore information.\r\nExample 9-2 #pragma parallel\r\nFor example, suppose you want to start a parallel region in which to run the\r\nfollowing code in parallel:\r\n007–3587–005 73",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/4766fc5b-c6c3-4301-ac01-199242eae7df.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e9811aa31597bcb8674b20a20790b0b02695612d53d02d2b1d5f34510b8bf7a0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "bc396e8c-8e41-4149-8bdc-357cc62a2d30",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 96,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\nfor (idx=n; idx; idx--) {\r\na[idx] = b[idx] + c[idx];\r\n}\r\nEnter the following code before the statement or compound statement (code in curly\r\nbraces, { }) that makes up the parallel region:\r\n#pragma parallel shared( a, b, c ) shared(n) local( idx )\r\n#pragma pfor\r\nOr you can enter the following code:\r\n#pragma parallel\r\n#pragma shared( a, b, c )\r\n#pragma shared(n)\r\n#pragma local(idx)\r\n#pragma pfor\r\nAny code within a parallel region, but not within any of the explicit parallel\r\nconstructs (pfor, independent, one processor, and critical), is local code. Local code\r\ntypically modifies only local data and is run by all threads.\r\n#pragma parallel Clauses\r\nThe #pragma parallel directive has four possible clauses; each clause may also be\r\nwritten as a separate directive, following the #pragma parallel directive:\r\n• shared\r\n• local\r\n• if\r\n• numthreads\r\nshared: Specifying Shared Variables\r\nThe shared clause tells the compiler the names of all the variables that the threads\r\nmust share.\r\nThe syntax of #pragma parallel with the shared clause is as follows:\r\n74 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/bc396e8c-8e41-4149-8bdc-357cc62a2d30.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=386e8c15b372a2ca121813a169c4810c479b0dc5dd7e36cb7e5a6131138f49f0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 437
      },
      {
        "segments": [
          {
            "segment_id": "b7e7b32d-b239-4dd6-be63-a2911f109c59",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 97,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma parallel shared [var1 [, var2 ...]]\r\nNote: A variable in a shared clause cannot be an array element or a field within a\r\nclass, structure, or union.\r\nlocal: Specifying Local Variables\r\nThe local clause tells the multiprocessing C/C++ compiler the names of all the\r\nvariables that must be local to each thread.\r\nThe syntax of #pragma parallel with the local clause is as follows:\r\n#pragma parallel local [var1 [, var2 ...]]\r\nA variable in a local clause cannot have initializers and cannot be any of the following:\r\n• An array element\r\n• A field within a class, structure, or union\r\n• An instance of a C++ class\r\nif: Specifying Conditional Parallelization\r\nThe if clause lets you set up a condition that is evaluated at run time to determine\r\nwhether to run the statements serially or in parallel. At compile time, it is not always\r\npossible to judge how much work a parallel region does (for example, loop indices\r\nare often calculated from data supplied at run time). The if clause lets you avoid\r\nrunning trivial amounts of code in parallel when the possible speedup does not\r\ncompensate for the overhead associated with running code in parallel.\r\nThe syntax of #pragma parallel with the if clause is as follows:\r\n#pragma parallel if [expr]\r\nThe if condition, expr, must evaluate to an integer. If expr is false (evaluates to zero),\r\nthen the subsequent statements run serially. Otherwise, the statements run in parallel.\r\n007–3587–005 75",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/b7e7b32d-b239-4dd6-be63-a2911f109c59.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d64fcb0784211e37280ade079ec651d96c9321c319cffcf9f0dc2e03c6689b57",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "388a09c7-d65d-40f4-bbcf-32ed68bf5733",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 98,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\nnumthreads: Specifying the Number of Threads\r\nThe numthreads clause tells the multiprocessing C/C++ compiler how many of the\r\navailable threads to use when running this region in parallel. (The default is all the\r\navailable threads.)\r\nIn general, you should avoid having more threads of execution than you have\r\nprocessors, and you should specify numthreads with the MP_SET_NUMTHREADS\r\nenvironment variable at run time. If you want to run a loop in parallel while you run\r\nother code, you can use this option to tell the compiler to use only some of the\r\navailable threads.\r\nThe syntax of #pragma parallel with the numthreads clause is as follows:\r\n#pragma parallel numthreads [expr]\r\nThe variable expr should evaluate to a positive integer.\r\n#pragma pfor\r\nThe #pragma pfordirective marks a for loop to run in parallel. This directive must\r\nfollow a #pragma parallel directive and be contained within a parallel region.\r\n#pragma pfor takes several clauses (see \"#pragma parallel Clauses\", page 74,\r\nfor more details), which control the following aspects:\r\n• How the work load is partitioned over the available processors\r\n• Which variables are local to each process\r\n• Which variables are involved in a reduction operation\r\n• Which iterations are assigned to which threads\r\n• How the iterations are shared by the available processors\r\n• How many iterations make up the “chunks” assigned to the threads\r\nUse #pragma pfor to run a for loop in parallel only if the loop meets all of the\r\nfollowing conditions:\r\n• The #pragma pfor is contained within a parallel region.\r\n76 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/388a09c7-d65d-40f4-bbcf-32ed68bf5733.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=efb7c27eab59ca1c8ce5d45e7ccde8f19609314eb4d194bb9bd13ef62fe1a5ad",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 507
      },
      {
        "segments": [
          {
            "segment_id": "88d69f00-5303-42bb-b259-b0675482a655",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 99,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n• All the values of the index variable can be computed independently of the\r\niterations.\r\n• All iterations are independent of each other; that is, data used in one iteration\r\ndoes not depend on data created by another iteration. If the loop can be run\r\nbackwards, the iterations are probably independent.\r\n• The number of iterations is known (no infinite or data-dependent loops) at\r\nexecution time. The number of times the loop must be executed must be\r\ndetermined once, upon entry to the loop, and based on the loop initialization, loop\r\ntest, and loop increment statements.\r\nNote: If the number of times the loop is actually executed is different from what is\r\ncomputed above, the results are undefined. This can happen if the loop test and\r\nincrement change during the execution of the loop, or if there is an early exit from\r\nwithin the for loop. An early exit or a change to the loop test and increment\r\nduring execution may have serious performance implications.\r\n• The chunksize, if specified, is computed before the loop is executed, and the\r\nbehavior is undefined if its value changes within the loop.\r\n• The loop control variable cannot be an array element, or a field within a class,\r\nstructure, or union.\r\n• The test or the increment should not contain expressions with side effects.\r\n!\r\nCaution: This directive works differently in the IRIS POWER CTM Analyzer (PCA) for\r\ncompiler versions 7.1 and older. See the IRIS POWER C User’s Guide for more\r\ninformation.\r\nFigure 9-5, page 78, shows parallel code segments using #pragma pfor running on\r\nfour threads with simple scheduling.\r\n007–3587–005 77",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/88d69f00-5303-42bb-b259-b0675482a655.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5037a55955f095318a600a87825ebf31a2674a3fc36466d0de3002fb901d8cf6",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c0a20d59-d15e-4b2f-ab27-cd3d2a886c5e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 100,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\nA(0-99) A(100-199) A(200-299) A(300-399)\r\n...\r\n#pragma parallel local (i)...\r\n{\r\n#pragma pfor\r\n for (i=0;i<400;i++) {\r\n ...\r\n }\r\n} ...\r\n} A(0-399)\r\na12047\r\nFigure 9-5 Parallel Code Segments Using #pragma pfor\r\nC++ Multiprocessing Considerations With #pragma pfor\r\nIf you are writing a #pragma pfor loop for the multiprocessing C++ compiler, the\r\nindex variable i can be declared within the for statement using the following:\r\nint i = 0;\r\nThe ANSI C++ Standard states that the scope of the index variable declared in a for\r\nstatement extends to the end of the for statement, as in the following example:\r\n#pragma pfor\r\nfor (int i = 0, ...) { ... }\r\nThe MIPSpro 7.2 C++ compiler does not enforce this rule. By default, the scope\r\nextends to the end of the enclosing block. The default behavior can be changed by\r\n78 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/c0a20d59-d15e-4b2f-ab27-cd3d2a886c5e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=eaf5d1e124e1020e062546c1118e569212b349d37f0666b0dbbd33f1225f6d90",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 418
      },
      {
        "segments": [
          {
            "segment_id": "28b0fe46-0dce-4fae-96a8-5a753e0efd17",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 101,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nusing the command line option -LANG:ansi-for-init-scope=on which enforces\r\nthe ANSI C++ standard.\r\nTo avoid future problems, write for loops in accordance with the ANSI standard, so\r\na subsequent change in the compiler implementation of the default scope rules does\r\nnot break your code.\r\n#pragma pfor Clauses\r\nThe #pragma pfor directive accepts the following clauses:\r\n• iterate: tells the multiprocessing C compiler the information it needs to\r\npartition the work load over the available processors.\r\n• local: specifies the variables that are local to each process.\r\n• lastlocal: specifies the variables that are local to each process, saving only the\r\nvalue of the variables from the logically last iteration of the loop.\r\n• reduction: specifies variables involved in a reduction operation.\r\n• affinity: assigns certain iterations to specific threads (for Origin200TM and\r\nOrigin2000TM only).\r\n• nest: exploits nested concurrency.\r\n• schedtype: specifies how the loop iterations are to be shared among the\r\nprocessors.\r\n• chunksize: specifies how many iterations make up a chunk.\r\niterate: Specifying the for Loop\r\nThe syntax of #pragma pfor with the iterate clause is as follows:\r\n#pragma pfor iterate [index = expr1; expr2; expr3]\r\nThe iterate clause tells the multiprocessing C compiler the information it needs to\r\nidentify the unique iterations of the loop and partition them to particular threads of\r\nexecution. This clause is optional. The compiler automatically infers the appropriate\r\nvalues from the subsequent for loop.\r\n007–3587–005 79",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/28b0fe46-0dce-4fae-96a8-5a753e0efd17.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bcdb00677edfee1412e4c0521c60c1c9fb2459a1d7c1d33e43ff64726813ded3",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "36c5f1b5-e5ad-4e8b-8769-37f69b9016ed",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 102,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\nThe following list describes the components of the iterate clause.\r\n• index: the index variable of the for loop you want to run in parallel.\r\n• expr1: the starting value for the index variable.\r\n• expr2: the number of iterations for the loop you want to run in parallel.\r\n• expr3: the increment of the for loop you want to run in parallel.\r\nExample 9-3 iterate clause\r\nThe following is an example using the iterate clause:\r\nConsider this for loop:\r\nfor (idx=n; idx; idx--)\r\n{\r\na[idx] = b[idx] + c[idx];\r\n}\r\nThe iterate clause to pfor should be as follows:\r\niterate(idx=n;n;-1)\r\nThis loop counts down from the value of n, so the starting value is the current value\r\nof n. The number of trips through the loop is n, and the increment is -1.\r\nlocal and lastlocal: Specifying Local Variables\r\nThe syntax of #pragma pfor with the local clause is as follows:\r\n#pragma pfor local [var1[, var2,...]]\r\nThe local clause specifies the variables that are local to each process. If a variable is\r\ndeclared as local, each iteration of the loop is given its own uninitialized copy of the\r\nvariable. You can declare a variable as local if its value does not depend on any other\r\niteration of the loop and if its value is used only within a single iteration. In effect the\r\nlocal variable is just temporary; a new copy can be created in each loop iteration\r\nwithout changing the final answer.\r\nThe pfor local clause has the same restrictions as the parallel local clause\r\n(see \"local: Specifying Local Variables\", page 75).\r\n80 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/36c5f1b5-e5ad-4e8b-8769-37f69b9016ed.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dfc29f0ab8f17b759b171e54f4cea3143ef83709446eced28a397cdf3b2ad320",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 508
      },
      {
        "segments": [
          {
            "segment_id": "d4d90e58-7b35-4181-80cc-2bf428e255b1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 103,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nThe syntax of #pragma pfor with the lastlocal clause is as follows:\r\n#pragma pfor lastlocal (var1[, var2,...])\r\nThe lastlocal clause specifies the variables that are local to each process. Unlike\r\nwith the local clause, the compiler saves the value from only the logically last\r\niteration of the loop when it completes.\r\nreduction: Specifying Variables for Reduction\r\nThe syntax of #pragma pfor with the reduction clause is as follows:\r\n#pragma pfor reduction [var1[, var2,...]]\r\nSpecifies variables involved in a reduction operation. In a reduction operation, the\r\ncompiler keeps local copies of the variables and combines them when it exits the\r\nloop. An element of the reduction list must be an individual variable (also called a\r\nscalar variable) and cannot be an array or structure. However, it can be an individual\r\nelement of an array. When the reduction clause is used, it appears in the list with\r\nthe correct subscripts.\r\nOne element of an array can be used in a reduction operation, while other elements of\r\nthe array are used in other ways. To allow for this, if an element of an array appears\r\nin the reduction list, the entire array can also appear in the share list.\r\nThe two types of reductions supported are sum(+) and product(*). For more\r\ninformation, see the C Language Reference Manual .\r\nThe compiler confirms that the reduction expression is legal by making some simple\r\nchecks. The compiler does not, however, check all statements in the for loop for\r\nillegal reductions. You must ensure that the reduction variable is used correctly in a\r\nreduction operation.\r\naffinity: Thread Affinity\r\nThread affinity assigns particular iterations to a particular thread.\r\nThe syntax of #pragma pfor with the affinity clause for thread affinity is as\r\nfollows:\r\n007–3587–005 81",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/d4d90e58-7b35-4181-80cc-2bf428e255b1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6cae61b31cbe6a4ddc2f9221ef1f186d82b3d6ed9d93585c8a5b1a27c871fbc0",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 293
      },
      {
        "segments": [
          {
            "segment_id": "dcf140b9-930b-4509-bde5-d1215461c12e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 104,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\n#pragma pfor affinity variable = thread [expr]\r\nThe effect of thread affinity is to execute iteration i on the thread number given by the\r\nuser-supplied expression (modulo the number of threads). Because the threads may\r\nneed to evaluate this expression in each iteration of the loop, the variables used in the\r\nexpression (other than the loop induction variable) must be declared shared and must\r\nnot be modified during the execution of the loop. Violating these rules may lead to\r\nincorrect results.\r\nIf the expression does not depend on the loop induction variable, then all iterations\r\nwill execute on the same thread and will not benefit from parallel execution.\r\nThread affinity is often used in conjunction with the #pragma page-place directive\r\n(\"#pragma page_place\", page 31).\r\nData affinity for loops with non-unit stride can sometimes result in non-linear affinity\r\nexpressions. In such situations the compiler issues a warning, ignores the affinity\r\nclause, and defaults to simple scheduling.\r\naffinity: Data Affinity\r\nData affinity applies only to distributed arrays and is supported only on Origin\r\nsystems. See Chapter 5, \"DSM Optimization #pragma Directives\", page 25 for more\r\ninformation about distributed arrays.\r\nThe syntax of #pragma pfor with the affinity clause for data affinity is as\r\nfollows:\r\n#pragma pfor affinity[idx] = data[array[expr]]\r\nidx is the loop-index variable\r\narray is the distributed array\r\nexpr indicates an element owned by the processor on which you want this iteration to\r\nexecute\r\nExample 9-4 Data affinity\r\nThe following code shows an example of data affinity:\r\n82 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/dcf140b9-930b-4509-bde5-d1215461c12e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c99073a1f6c49877e40a6941d54aa44d88d185500fa233f359824eec0ee01c4a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 252
      },
      {
        "segments": [
          {
            "segment_id": "5803d116-4f69-442e-80cd-32610e7c3cde",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 105,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma distribute A[block]\r\n#pragma parallel shared (A, a, b) local (i)\r\n#pragma pfor affinity(i) = data(A[a*i + b])\r\nfor (i = 0; i < n; i++)\r\nA[a*i + b] = 0;\r\nThe multiplier for the loop index variable (a) and the constant term (b) must both be\r\nliteral constants, with a greater than zero.\r\nThe effect of this clause is to distribute the iterations of the parallel loop to match the\r\ndata distribution specified for the array A, such that iteration i is executed on the\r\nprocessor that owns element A[a*i + b], based on the distribution for A. The iterations\r\nare scheduled based on the specified distribution, and are not affected by the actual\r\nunderlying data-distribution (which may differ at page boundaries, for example).\r\nIn the case of a multi-dimensional array, affinity is provided for the dimension that\r\ncontains the loop-index variable. The loop-index variable cannot appear in more than\r\none dimension in an affinity directive.\r\nIn the following example, the loop is scheduled based on the block distribution of the\r\nfirst dimension. See Chapter 5, \"DSM Optimization #pragma Directives\", page 25, for\r\nmore information about distribution directives.\r\n#pragma distribute A[block][cyclic(1)]\r\n#pragma parallel shared (A, n) local (i, j)\r\n#pragma pfor\r\n#pragma affinity (i) = data(A[i + 3, j])\r\nfor (i = 0; i < n; i++)\r\nfor (j = 0; j < n; j++)\r\nA[i + 3, j] = A[i + 3, j-1];\r\nData Affinity for Redistributed Arrays\r\nBy default, the compiler assumes that a distributed array is not dynamically\r\nredistributed, and directly schedules a parallel loop for the specified data affinity. In\r\ncontrast, a redistributed array can have multiple possible distributions, and data\r\naffinity for a redistributed array must be implemented in the run-time system based\r\non the particular distribution.\r\nHowever, the compiler does not know whether or not an array is redistributed,\r\nbecause the array may be redistributed in another function (possibly even in another\r\nfile). Therefore, you must explicitly specify the #pragma dynamic declaration for\r\n007–3587–005 83",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/5803d116-4f69-442e-80cd-32610e7c3cde.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c3965232d8c1fb1e9c00054fad567b73456c133c61db4738275adb72f492a9ab",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 337
      },
      {
        "segments": [
          {
            "segment_id": "390c3ca8-fc43-496b-b7c4-e9377459dfdd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 106,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\nredistributed arrays. This directive is required only in those functions that contain a\r\npfor loop with data affinity for that array (see \"#pragma dynamic\", page 30, for\r\nadditional information). This informs the compiler that the array can be dynamically\r\nredistributed. Data affinity for such arrays is implemented through a run-time lookup.\r\nData Affinity for a Formal Parameter\r\nYou can supply a distribute directive on a formal parameter, thereby specifying\r\nthe distribution on the incoming actual parameter. If different calls to the subroutine\r\nhave parameters with different distributions, then you can omit the distribute\r\ndirective on the formal parameter; data affinity loops in that subroutine are\r\nautomatically implemented through a run-time lookup of the distribution. (This is\r\npermissible only for regular data distribution. For reshaped array parameters, the\r\ndistribution must be fully specified on the formal parameter.)\r\nData Affinity and the #pragma pfor nest Clause\r\nThe nest clause for #pragma pfor is described in \"nest: Exploiting Nested\r\nConcurrency\", page 85. This section discusses how the nest clause interacts with the\r\naffinity clause when the program has reshaped arrays.\r\nWhen you combine a nest clause and an affinity clause, the default scheduling is\r\nsimple, except when the program has reshaped arrays and is compiled -O3. In that\r\ncase, the default is to use data affinity scheduling for the most frequently accessed\r\nreshaped array in the loop (chosen heuristically by the compiler). To obtain simple\r\nscheduling even at -O3, you can explicitly specify the schedtype on the parallel loop.\r\nExample 9-5 Nested pfor\r\nThe following example illustrates a nested pfor with an affinity clause:\r\n#pfor nest(i, j) affinity(i, j) = data(A[i][j])\r\nfor (i = 2; i < n; i++)\r\nfor (j = 2; j < m; j++)\r\nA[i][j] = A[i][j] + i * j;\r\n84 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/390c3ca8-fc43-496b-b7c4-e9377459dfdd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=96e6451c5b2fe19bead891652185b965823aff6688a2ef25d2972b413dba3641",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 297
      },
      {
        "segments": [
          {
            "segment_id": "04f5b2a5-f3a0-40fd-b5d3-e89f8ee4c716",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 107,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nnest: Exploiting Nested Concurrency\r\nThe nest clause allows you to exploit nested concurrency in a limited manner.\r\nAlthough true nested parallelism is not supported, you can exploit parallelism across\r\niterations of a perfectly nested loop-nest.\r\nThe syntax of #pragma pfor with the nest clause is as follows:\r\n#pragma pfor nest[i, j[, ...]]\r\nThis clause specifies that the entire set of iterations across the (i, j[...]) loops\r\ncan be executed concurrently. The restriction is that the loops must be perfectly\r\nnested; that is, no code is allowed between either the for statements or the ends of\r\nthe respective loops, as illustrated in the following example:\r\n#pragma pfor nest(i, j)\r\nfor (i = 0; i < n; i++)\r\nfor (j = 0; j < m; j++)\r\nA[i][j] = 0;\r\nThe existing clauses, such as local and shared, behave as before. You can combine\r\na nested pfor with a schedtype of simple or interleaved (dynamic and gss are\r\nnot currently supported). The default is simple scheduling.\r\nNote: The nest clause requires support from the MP run-time library (libmp). IRIX\r\noperating system versions 6.3 (and above) are automatically shipped with this new\r\nlibrary. If you want to access these features on a system running IRIX 6.2, then\r\ncontact your local SGI service provider or SGI Customer Support for libmp.\r\nschedtype: Sharing Loop Iterations Among Processors\r\nThe syntax of #pragma pfor with the schedtype clause is as follows:\r\n#pragma pfor schedtype [type]\r\nThe schedtype clause tells the multiprocessing C compiler how to share the loop\r\niterations among the processors. The schedtype chosen depends on the type of\r\nsystem you are using and the number of programs executing (see Table 9-2, page 88).\r\n007–3587–005 85",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/04f5b2a5-f3a0-40fd-b5d3-e89f8ee4c716.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=568e850464fad403e4bc6baa1dcc710eb948ebf20a9eabe942784711744ea1a0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "36812ced-f23d-4f31-a554-951f6089f881",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 108,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\nYou can use the types in the following list to modify schedtype.\r\n• simple (the default): tells the run-time scheduler to partition the iterations evenly\r\namong all the available threads.\r\n• dynamic: tells the run-time scheduler to give each thread chunksize iterations of\r\nthe loop. chunksize should be smaller than the number of total iterations divided\r\nby the number of threads. The advantage of dynamic over simple is that dynamic\r\nhelps distribute the work more evenly than simple.\r\n• interleave: tells the run-time scheduler to give each thread chunksize iterations\r\nof the loop, which are then assigned to the threads in an interleaved way.\r\n• gss (guided self-scheduling): tells the run-time scheduler to give each processor a\r\nvaried number of iterations of the loop. This is like dynamic, but instead of a fixed\r\nchunksize, the chunksize iterations begin with big pieces and end with small pieces.\r\nIf I iterations remain and P threads are working on them, the piece size is roughly\r\nI/(2P) + 1.\r\nPrograms with triangular matrices should use gss.\r\n• runtime: tells the compiler that the real schedule type will be specified at run\r\ntime, based on environment variables.\r\nFigure 9-6, page 87, shows how the iteration chunks are apportioned over the various\r\nprocessors by the different types of loop scheduling.\r\n86 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/36812ced-f23d-4f31-a554-951f6089f881.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1be553f1efb21213e09fe96103b85817dc3708be52f11268c21d24c6f9e6a326",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 504
      },
      {
        "segments": [
          {
            "segment_id": "00e8c1d0-a54a-449e-a501-af8ffa5876b2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 109,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nsimple T1 T2 T3 T4\r\ndynamic T1 T1 T2 T2 T3 T3 T4 T1 T4 T2 T3 T4\r\ngss\r\nruntime Selected by MP_SCHEDTYPE environment variable\r\ninterleave\r\nT2 T4 T1 T3\r\nT1 T2 T2 T1 T3 T4 T4 T1 T2 T3 T4 T3 T1 T2 T3 T4\r\nT1 T4 T2 T1 T4 T3 T2 T3 T1 T4 T3 T2\r\na12048\r\nFigure 9-6 Loop Scheduling Types\r\nThe best schedtype to use for any given program depends on your system,\r\nprogram, and data. For instance, with certain types of data, some iterations of a loop\r\ncan take longer to compute than others, so some threads may finish long before the\r\nothers. In this situation, if the iterations are distributed by simple, then the thread\r\nwaits for the others. But if the iterations are distributed by dynamic, the thread does\r\nnot wait, but goes back to get another chunksize iteration until the threads of\r\nexecution have run all the iterations of the loop.\r\nThe following table describes how to choose a schedtype.\r\n007–3587–005 87",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/00e8c1d0-a54a-449e-a501-af8ffa5876b2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a89e276fba9feb288934896e8cbfc29c6871de7bc140cc0090be0df23151dd0a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "844f76e5-d23b-4440-a57a-b1ab678d6cb1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 110,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\nTable 9-2 Choosing a schedtype\r\nFor a... Where... Use...\r\nSingle-User System iterations take same amount of time simple\r\ndata-sensitive iterations vary slightly gss\r\ndata-sensitive iterations vary greatly dynamic\r\nMultiuser System data-sensitive iterations vary slightly gss\r\ndata-sensitive iterations vary greatly dynamic\r\nIf you are on a single-user system but are executing multiple programs, select the\r\nscheduling from the multiuser rows.\r\nIf you are on a multiuser system, you should also consider using the environment\r\nvariable, MP_SUGNUMTHD. Setting MP_SUGNUMTHD causes the run-time library to\r\nautomatically adjust the number of active threads based on the overall system load.\r\nWhen idle processors exist, this process increases the number of threads, up to a\r\nmaximum of MP_SET_NUMTHREADS. When the system load increases, it decreases the\r\nnumber of threads. For more details about MP_SUGNUMTHD, see the C Language\r\nReference Manual.\r\nchunksize: Specifying the Number of Iterations in a Chunk\r\nThe chunksize clause tells the multiprocessing C compiler how many iterations to\r\ndefine as a chunk when using the dynamic or interleave clause (see \"schedtype:\r\nSharing Loop Iterations Among Processors\", page 85).\r\nThe syntax of #pragma pfor with the chunksize clause is as follows:\r\n#pragma pfor chunksize [expr]\r\nexpr should be a positive integer. SGI recommends using the following formula:\r\n(number of iterations)/X\r\nX should be between twice and ten times the number of threads. Select twice the\r\nnumber of threads when iterations vary slightly. Reduce the chunk size to reflect the\r\n88 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/844f76e5-d23b-4440-a57a-b1ab678d6cb1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fe92f826a673f51932770166dc3380b27540975b48e95ab2239f928487bbeec8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 416
      },
      {
        "segments": [
          {
            "segment_id": "89ec0714-3aaf-4234-aadc-9488b23e49c3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 111,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nincreasing variance in the iterations. Performance gains may diminish after increasing\r\nX to ten times the number of threads.\r\n#pragma pure\r\nThe #pragma pure directive tells the compiler that a call to any of the named\r\nfunctions has no side effects (see #pragma no side effects), and that its return\r\nvalue depends only on the values of its arguments. In particular, it does not access an\r\nexisting object or file after its arguments have been evaluated. If the arguments of\r\nsuch a call are loop-invariant, then the compiler may move the call out of the loop.\r\nThe syntax of the #pragma pure directive is as follows:\r\n#pragma pure [function1 [, function2...]]\r\nThe functions named must be declared before the directive.\r\n#pragma pure is not currently supported in C++, except for symbols marked\r\nextern‘‘C’’.\r\n#pragma set chunksize\r\nThe #pragma set chunksize directive sets the value of chunksize, which tells\r\nthe multiprocessing C compiler how many iterations to define as a chunk when using\r\nthe dynamic or interleave clause (see \"#pragma set schedtype\", page 90, and\r\n\"#pragma pfor Clauses\", page 79, for more information).\r\nThe syntax of the #pragma set chunksize directive is as follows:\r\n#pragma set chunksize [n]\r\nSGI recommends using the following formula:\r\n(number of iterations)/X\r\nX should be between twice and ten times the number of threads. Select twice the\r\nnumber of threads when iterations vary slightly. Reduce the chunk size to reflect the\r\n007–3587–005 89",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/89ec0714-3aaf-4234-aadc-9488b23e49c3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d0907649b24aff2774a294a87b98a667b25880f66017960265da1c686c7d1b93",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "cd21d041-a811-439d-9ad8-9c42d5ba8d22",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 112,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\nincreasing variance in the iterations. Performance gains may diminish after increasing\r\nX to ten times the number of threads.\r\n#pragma set numthreads\r\nThe #pragma set numthreads directive sets the value for numthreads, which\r\ntells the multiprocessing C/C++ compiler how many of the available threads to use\r\nwhen running this region in parallel. The default is all the available threads.\r\nIf you want to run a loop in parallel while you run some other code, you can use this\r\noption to tell the compiler to use only some of the available threads.\r\nUsing #pragma set numthreads\r\nThe syntax of the #pragma set numthreads directive is as follows:\r\n#pragma set numthreads [n]\r\nn can range from 1 to 255. If if n is greater than 255, the compiler assumes the\r\nmaximum and generates a warning message. If n is less than 1, the compiler\r\ngenerates a warning message and ignores the directive.\r\nIn general, you should never have more threads of execution than you have\r\nprocessors, and you should specify numthreads with the MP_SET_NUMTHREADS\r\nenvironment variable at run time (see the C Language Reference Manual for more\r\ninformation).\r\n#pragma set schedtype\r\nThe #pragma set schedtype directive sets the value of schedtype, which tells\r\nthe multiprocessing C compiler how to share the loop iterations among the\r\nprocessors. The schedtype chosen depends on the type of system you are using and\r\nthe number of programs executing (see \"#pragma pfor Clauses\", page 79, for more\r\ninformation on schedtype).\r\nThe syntax of the #pragma set schedtype directive is as follows:\r\n90 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/cd21d041-a811-439d-9ad8-9c42d5ba8d22.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bc63cc4c5665fce7767f277157dcac8519d953df1047f20383e0d512fe060e8d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 502
      },
      {
        "segments": [
          {
            "segment_id": "638a6bd7-fd2c-423c-9add-0a935faa063e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 113,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma set schedtype [type]\r\nThe schedtype types are\r\n• simple\r\n• dynamic\r\n• interleave\r\n• gss\r\n• runtime\r\n#pragma shared\r\nThe #pragma shared directive tells the multiprocessing C/C++ compiler the names\r\nof all the variables that the threads must share. This directive must be used in\r\nconjunction with the #pragma parallel directive. #pragma shared can also be\r\nused as a clause for the #pragma parallel directive (see \"#pragma parallel\r\nClauses\", page 74).\r\nThe syntax of #pragma shared is as follows:\r\n#pragma shared [variable1, [, variable2...]]\r\nNote: A variable in a shared clause cannot be an array element or a field within a\r\nclass, structure, or union.\r\n#pragma synchronize\r\nThe #pragma synchronize directive tells the multiprocessing C/C++ compiler that\r\nwithin a parallel region, no thread can execute the statement that follows this\r\ndirective until all threads have reached it. This directive is a classic barrier construct.\r\nThe syntax of #pragma synchronize is as follows:\r\n#pragma synchronize\r\n007–3587–005 91",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/638a6bd7-fd2c-423c-9add-0a935faa063e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=666ebd84920fb406a5c5751d973f69db1c96936e8f804a8624ae347bef0934ba",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "770d841c-56e7-4db0-b2d6-50180439d6a8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 114,
            "page_width": 612,
            "page_height": 792,
            "content": "9: Multiprocessing #pragma Directives\r\nThe following figure is a time-lapse sequence showing the synchronization of all\r\nthreads.\r\n92 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/770d841c-56e7-4db0-b2d6-50180439d6a8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c8302d5afc275c8aa398c2d0aedf81f12b9c6bb5606377a20c16aabf94029467",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "38caef23-c7eb-4c59-9569-1072b1fc4dd7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 115,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n1\r\n2\r\n3\r\n4\r\n5\r\nA\r\nA\r\n...\r\n#pragma parallel ...\r\n{ ...\r\n#pragma synchronize\r\n ...\r\n} ... } A\r\na12049\r\nFigure 9-7 Synchronization\r\n007–3587–005 93",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/38caef23-c7eb-4c59-9569-1072b1fc4dd7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c7c352fc0186683d61318166fdc467e7119a2f5f5ace3fb094beec9977e12d3c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "42e853ab-c661-4375-942a-310db3bfabfe",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 116,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/42e853ab-c661-4375-942a-310db3bfabfe.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dd303a28ea99531da2d849b532196fd30be2f8b0b5f6f692895b87c7eb7aba32",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "34d89f42-f176-40cd-af2b-c301435dd979",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 117,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 10\r\nOpenMP C/C++ API Multiprocessing Directives\r\nThis chapter provides an overview of the multiprocessing directives that MIPSpro C\r\nand C++ compilers support. These directives are based on the OpenMP C/C++\r\nApplication Program Interface (API) standard, version 2.0, which is available in the\r\n7.4.1 release. Programs that use these directives are portable and can be compiled by\r\nother compilers that support the OpenMP standard.\r\nThe complete OpenMP standard is available at http://www.openmp.org/specs.\r\nSee that documentation for complete examples, rules of usage, and restrictions. This\r\nchapter provides only an overview of the supported directives and does not give\r\ncomplete details or restrictions.\r\nTo enable recognition of the OpenMP directives, specify -mp on the cc or CC\r\ncommand line.\r\nIn addition to directives, the OpenMP C/C++ API describes several library functions\r\nand environment variables. Information on the library functions can be found on the\r\nomp_lock(3), omp_nested(3), and omp_threads(3) man pages. Information on the\r\nenvironment variables can be found on the pe_environ(5) man page.\r\nNote: The SGI multiprocessing directives, including the Origin series distributed\r\nshared memory directives, are outmoded. Their preferred alternatives are the\r\nOpenMP C/C++ API directives described in this chapter.\r\nUsing Directives\r\nEach OpenMP directive starts with #pragma omp, to reduce the potential for conflict\r\nwith other #pragma directives with the same name. They have the following form:\r\n#pragma omp directive-name [clause[ clause] ...] new-line\r\nExcept for starting with #pragma omp, the directive follows the conventions of the C\r\nand C++ standards for compiler directives.\r\nDirectives are case-sensitive. The order in which clauses appear in directives is not\r\nsignificant. Only one directive name can be specified per directive.\r\n007–3587–005 95",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/34d89f42-f176-40cd-af2b-c301435dd979.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2e2309e7ef1809d233e63de91aceb08c1ba0e4789baf96a63563eb0fbfe74f2d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 481
      },
      {
        "segments": [
          {
            "segment_id": "99d63d4b-de6a-4fd3-8e13-0fa477cf689b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 118,
            "page_width": 612,
            "page_height": 792,
            "content": "10: OpenMP C/C++ API Multiprocessing Directives\r\nAn OpenMP directive applies to at most one succeeding statement, which must be a\r\nstructured block.\r\nConditional Compilation\r\nThe _OPENMP macro name is defined by OpenMP-compliant implementations as the\r\ndecimal constant, yyyymm, which will be the year and month of the approved\r\nspecification. This macro must not be the subject of a #define or a #undef\r\npreprocessing directive.\r\n#ifdef _OPENMP\r\niam = omp_get_thread_num() + index;\r\n#endif\r\nIf vendors define extensions to OpenMP, they may specify additional predefined\r\nmacros.\r\nIf an implementation is not OpenMP-compliant, or if its OpenMP mode is disabled, it\r\nmay ignore the OpenMP directives in a program. In effect, an OpenMP directive\r\nbehaves as if it were enclosed within #ifdef _OPENMP and #endif. Thus, the\r\nfollowing two examples are equivalent:\r\nif(cond)\r\n{\r\n#pragma omp flush (x)\r\n}\r\nX++;\r\nif(cond)\r\n#ifdef )OPENMP\r\n#pragma omp flush (x)\r\n#endif\r\nx++;\r\nparallel Construct\r\nThe #pragma omp parallel directive defines a parallel region, which is a region of\r\nthe program that is to be executed by multiple threads in parallel.\r\nWhen a thread encounters a parallel construct and no if clause is present, or the if\r\nexpression evaluates to a nonzero value, a team of threads is created. This thread\r\n96 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/99d63d4b-de6a-4fd3-8e13-0fa477cf689b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f1c24ff8bfac3313d30081563eacfcd37b042ff82fad08f467511f9324ac88e2",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "72a3b864-438b-43dd-813c-7ffbe59ecbb2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 119,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nbecomes the master thread with a thread number of 0. If the value of the if\r\nexpression is zero, the region is serialized.\r\nWork–sharing Constructs\r\nA work-sharing construct distributes the execution of the associated statement among\r\nthe members of the team that encounter it. The work-sharing directives do not launch\r\nnew threads, and there is no implied barrier on entry to a work-sharing construct.\r\nThe sequence of work-sharing constructs and barrier directives encountered must be\r\nthe same for every thread in a team.\r\nOpenMP defines the following work-sharing constructs:\r\n• The #pragma omp for directive identifies an iterative work-sharing construct\r\nthat specifies the iterations of the associated loop should be executed in parallel.\r\nThe iterations of the for loop are distributed across threads that already exist.\r\n• The #pragma omp sections directive identifies a non-iterative work-sharing\r\nconstruct that specifies a set of constructs that are to be divided among threads in\r\na team. Each section is executed once by a thread in the team. Each section is\r\npreceded by a sections directive, although the sections directive is optional\r\nfor the first section.\r\n• The #pragma omp single directive identifies a construct that specifies that the\r\nassociated structured block is executed by only one thread in the team (not\r\nnecessarily the master thread).\r\nCombined Parallel Work-sharing Constructs\r\nCombined parallel work-sharing constructs are short cuts for specifying a parallel\r\nregion that contains only one work-sharing construct. The semantics of these\r\ndirectives are identical to that of explicitly specifying a parallel directive followed\r\nby a single work-sharing construct.\r\n• The parallel for directive is a shortcut for a parallel region that contains\r\none for directive.\r\n• The #pragma omp parallel sections directive provides a shortcut form for\r\nspecifying a parallel region containing one sections directive.\r\n007–3587–005 97",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/72a3b864-438b-43dd-813c-7ffbe59ecbb2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f5a1a77e35f5989a98e3c9a756ea641fab73e7b6335d90a05a58e8d90cf4e9c8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 505
      },
      {
        "segments": [
          {
            "segment_id": "1ce854e6-a100-4c8e-9a29-3a8876445e1b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 120,
            "page_width": 612,
            "page_height": 792,
            "content": "10: OpenMP C/C++ API Multiprocessing Directives\r\nMaster and Synchronization Constructs\r\nThe following list describes the synchronization constructs:\r\n• The #pragma omp master directive identifies a construct that specifies a\r\nstructured block that is executed by the master thread of the team.\r\n• The #pragma omp critical directive identifies a construct that restricts\r\nexecution of the associated structured block to one thread at a time.\r\n• The #pragma omp barrier directive synchronizes all the threads in a team,\r\neach thread waiting until all other threads have reached this point.\r\n• The #pragma omp atomic directive ensures that a specific memory location is\r\nupdated atomically.\r\n• The #pragma omp flush directive, explicit or implied, identifies precise\r\nsynchronization points at which the implementation is required to provide a\r\nconsistent view of certain objects in memory. This means that previous evaluations\r\nof expressions that reference those objects are complete and subsequent\r\nevaluations have not yet begun.\r\n• A #pragma omp ordered directive must be within the dynamic extent of a for\r\nor parallel for construct that has an ordered clause. The structured-block\r\nfollowing an ordered directive is executed in the same order as iterations in a\r\nsequential loop.\r\nData Environment Constructs\r\nThe #pragma omp threadprivate directive makes file-scope, namespace-scope, or\r\nstatic block-scope variables local to a thread but global within the thread. This\r\ndirective is not implemented for block-scope variables requiring dynamic\r\ninitialization in C++.\r\nSeveral directives accept clauses that allow a user to control the scope attributes of\r\nvariables for the duration of the construct. Not all of the clauses are allowed on all\r\ndirectives, but the clauses that are valid on a particular directive are included with the\r\ndescription of the directive. Usually, if no data scope clauses are specified for a\r\ndirective, the default scope for variables affected by the directive is share.\r\nThe following list describes the data scope attribute clauses:\r\n98 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/1ce854e6-a100-4c8e-9a29-3a8876445e1b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ac8d72f5385b3fff5104eb17e4363965d3abbd40e44c26324e73b9842aae9db3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 313
      },
      {
        "segments": [
          {
            "segment_id": "4f1a07f1-805a-492a-8372-5ee7cd61f4ad",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 121,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n• The private clause declares the variables in list to be private to each thread in a\r\nteam.\r\n• The firstprivate clause provides a superset of the functionality provided by\r\nthe private clause.\r\n• The lastprivate clause provides a superset of the functionality provided by the\r\nprivate clause.\r\n• The shared clause shares variables that appear in the list among all the threads in\r\na team. All threads within a team access the same storage area for shared\r\nvariables.\r\n• The default clause allows the user to specify the data-sharing attributes of\r\nvariables.\r\n• The reduction clause performs a reduction on the scalar variables specified,\r\nwith the operator specified.\r\n• The copyin clause lets you assign the same value to threadprivate variables\r\nfor each thread in the team executing the parallel region. For each variable\r\nspecified, the value of the variable in the master thread of the team is copied to\r\nthe threadprivate copies at the beginning of the parallel region.\r\n• The copyprivate clause provides a mechanism to use a private variable to\r\nbroadcast a value from one member of a team to the other members.\r\nDirective Binding\r\nSome directives are bound to other directives. A binding specifies the way in which\r\none directive is related to another. For instance, a directive is bound to a second\r\ndirective if it can appear in the dynamic extent of that second directive. The following\r\nrules apply with respect to the dynamic binding of directives:\r\n• The for, sections, single, master, and barrier directives bind to the\r\ndynamically enclosing parallel directive, if one exists. If no parallel region is\r\ncurrently being executed, the directives are executed by a team composed of only\r\nthe master thread.\r\n• The ordered directive binds to the dynamically enclosing for directive.\r\n• The atomic directive enforces exclusive access with respect to atomic directives\r\nin all threads, not just the current team.\r\n007–3587–005 99",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/4f1a07f1-805a-492a-8372-5ee7cd61f4ad.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5f36d17081c55b5fa2561d2d9f8830b84d90a9cb3c6406b4344aa6ff4e549899",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 321
      },
      {
        "segments": [
          {
            "segment_id": "7d8533e6-53f2-4641-8865-03ab8e0e52cb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 122,
            "page_width": 612,
            "page_height": 792,
            "content": "10: OpenMP C/C++ API Multiprocessing Directives\r\n• The critical directive enforces exclusive access with respect to critical\r\ndirectives in all threads, not just the current team.\r\n• A directive cannot bind to a directive outside the closest dynamically enclosing\r\nparallel directive.\r\nDirective Nesting\r\nDynamic nesting of directives must adhere to the following rules:\r\n• A parallel directive dynamically inside another parallel directive logically\r\nestablishes a new team, which is composed of only the current thread, unless\r\nnested parallelism is enabled.\r\n• for, sections, and single directives that bind to the same parallel directive\r\nare not allowed to be nested inside each other.\r\n• critical directives with the same name are not allowed to be nested inside each\r\nother.\r\n• for, sections, and single directives are not permitted in the dynamic extent\r\nof critical, ordered, and master regions if the directives bind to the same\r\nparallel as the regions.\r\n• barrier directives are not permitted in the dynamic extent of for, ordered,\r\nsections, single, master, and critical regions if the directives bind to the\r\nsame parallel as the regions.\r\n• master directives are not permitted in the dynamic extent of for, sections,\r\nand single directives if the master directives bind to the same parallel as the\r\nregions.\r\n• ordered directives are not allowed in the dynamic extent of critical regions if\r\nthe directives bind to the same parallel as the regions.\r\n• Any directive that is permitted when executed dynamically inside a parallel\r\nregion is also permitted when executed outside a parallel region. When\r\nexecuted dynamically outside a user-specified parallel region, the directive is\r\nexecuted with respect to a team composed of only the master thread.\r\n100 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/7d8533e6-53f2-4641-8865-03ab8e0e52cb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=40c0e4690040fdf266cc2b0f2c755431bef9e88a3d9c7bf826ebb3333fca52b3",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "827288a8-a8ed-4242-a64e-83602f45e35e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 123,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 11\r\nPrecompiled Header #pragma Directives\r\nTable 11-1 lists the precompiled header #pragmas directives, along with a short\r\ndescription of each and the compiler versions in which the directive is supported.\r\nTable 11-1 Precompiled Header #pragma Directives\r\n#pragma Short Description\r\nCompiler\r\nVersions\r\n#pragma hdrstop Indicates the point at which the precompiled header\r\nmechanism snapshots the headers. If -pch is off, #pragma\r\nhdrstop is ignored.\r\n7.2 and later\r\n#pragma no_pch Disables the precompiled header mechanism. 7.2 and later\r\n#pragma once Ensures (in -n32 and -64 mode) that an include file is\r\nincluded at most one time in each compilation unit.\r\n7.0 and later\r\n#pragma hdrstop\r\nThe #pragma hdrstop directive indicates the point at which the precompiled\r\nheader mechanism snapshots the headers.\r\nThe syntax of the #pragma hdrstop directive is as follows:\r\n#pragma hdrstop\r\nIf -pch is on, #pragma hdrstop indicates the point at which the precompiled\r\nheader mechanism snapshots the headers.\r\nIf -pch is off, #pragma hdrstop is ignored.\r\nSee the MIPSpro N32/64 Compiling and Performance Tuning Guide for details on the\r\nprecompiled header mechanism.\r\n007–3587–005 101",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/827288a8-a8ed-4242-a64e-83602f45e35e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0b594b76ed63bb3a290d7ffaf362271a255902d332ab0590170724c00c660feb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 453
      },
      {
        "segments": [
          {
            "segment_id": "cf73c385-44bc-4b43-a877-8e5d4ed454d5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 124,
            "page_width": 612,
            "page_height": 792,
            "content": "11: Precompiled Header #pragma Directives\r\n#pragma no_pch\r\nThe #pragma no_pch directive disables the precompiled header mechanism.\r\nThe syntax of #pragma no_pch is as follows:\r\n#pragma no_pch\r\n#pragma once\r\nThe #pragma once directive ensures (in -n32 and -64 mode) that each include\r\nfile is included one time in each compilation unit.\r\nThe syntax of #pragma once is as follows:\r\n#pragma once\r\nThis directive has no effect in -o32 mode, but will ensure idempotent include files\r\nin -n32 and -64 mode (that is, that an include file is included at most one time in\r\neach compilation unit).\r\nSGI recommends enclosing the contents of an afile.h include file with an #ifdef\r\ndirective similar to the following:\r\n#ifndef afile_INCLUDED\r\n#define afile_INCLUDED\r\n<contents of afile.h>\r\n#endif\r\n102 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/cf73c385-44bc-4b43-a877-8e5d4ed454d5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=73000a8bd9daa2f3c4ce18d70529407f3659b7bb25c19ca5ab3c3ea931a67363",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "272365bd-fdb1-44dc-bd05-fe1ce0f77340",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 125,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 12\r\nScalar Optimization #pragma Directives\r\nTable 12-1 lists the #pragma directives discussed in this chapter, along with a short\r\ndescription of each and the compiler versions in which the directive is supported.\r\nTable 12-1 Scalar Optimization #pragma Directives\r\n#pragma Short Description\r\nCompiler\r\nVersions\r\n#pragma mips_frequency_hint Specifies the expected frequency of execution\r\nso that cord2 can move exception code and\r\ninitialization code into separate pages to\r\nminimize working set size.\r\n7.2 and later\r\n#pragma section_gp (in Chapter 7,\r\n\"Loader Information #pragma Directives\",\r\npage 41)\r\nCauses an object to be placed in a gp_relative\r\nsection.\r\n7.2 and later\r\n#pragma section_non_gp (in Chapter 7,\r\n\"Loader Information #pragma Directives\",\r\npage 41)\r\nKeeps an object from being placed in a\r\ngp_relative section.\r\n7.2 and later\r\n#pragma unroll (in Chapter 8, \"Loop Nest\r\nOptimization #pragma Directives\", page 49)\r\nSuggests to the compiler that a specified\r\nnumber of copies of the loop body be added to\r\nthe inner loop. If the loop following this\r\ndirective is an inner loop, then it indicates\r\nstandard unrolling. If the loop following this\r\ndirective is not innermost, then outer loop\r\nunrolling (unroll and jam) is performed.\r\n7.2 and later\r\n#pragma mips_frequency_hint\r\nThis directive allows you to specify the expected frequency of execution of the named\r\nfunction so the compiler can move exception code and initialization code into\r\nseparate pages to minimize working-set size.\r\nThe syntax of #pragma mips_frequency_hint is as follows:\r\n007–3587–005 103",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/272365bd-fdb1-44dc-bd05-fe1ce0f77340.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2c1c8acada49db0529816d185d6012efd2f908396ea375c2e012ba5d88386a0c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 356
      },
      {
        "segments": [
          {
            "segment_id": "127e214c-920e-4604-a09a-5a7dfb94c266",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 126,
            "page_width": 612,
            "page_height": 792,
            "content": "12: Scalar Optimization #pragma Directives\r\n#pragma mips_frequency_hint [NEVER|INIT] [function_name]\r\n#pragma mips_frequency_hint is not currently supported in C++, except for\r\nsymbols marked extern ‘‘C’’.\r\nThis directive provides a mechanism for you to specify information about execution\r\nfrequency for certain regions in the code. You can provide the following frequency\r\nspecifications:\r\n• NEVER: this region of code is never or rarely executed. The compiler might move\r\nthis region of the code away from the normal path. This movement might either\r\nbe at the end of the procedure or at some point to an entirely separate section.\r\n• INIT: this region of code is executed only during initialization or startup of the\r\nprogram. The compiler might try to put all regions under “INIT” together to\r\nprovide better locality during startup of a program.\r\nYou can use this directive in two ways:\r\n1. You can specify it with a function declaration. The directive then applies\r\neverywhere the function is called.\r\nextern void Error_Routine();\r\n#pragma mips_frequency_hint NEVER Error_Routine\r\nNote: In this case, the directive must appear after the function declaration.\r\n2. You can specify it without a function declaration. In this case, you can place the\r\ndirective anywhere in the body of a procedure. It then applies to the statement\r\ndirectly following the directive.\r\nif (some_condition)\r\n{\r\n#pragma mips_frequency_hint NEVER\r\nError_Routine ();\r\n...\r\n}\r\n!\r\nCaution: This is directive is supported on compiler version 7.2 only, and it does not\r\nwork for -o32 because it requires an ELF object file with .MIPS.content sections.\r\n104 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/127e214c-920e-4604-a09a-5a7dfb94c266.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=970e69bbd055c3cb98c91920a9e14b393d9db752507e2bd84540b7a2aab290ff",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1255cc16-4a9b-46cc-812f-6897647160dd",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 127,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 13\r\nWarning Suppression Control #pragma Directives\r\nTable 13-1 lists the #pragma directives discussed in this chapter, along with a brief\r\ndescription and the compiler versions in which the directive is supported.\r\nTable 13-1 Warning Suppression Control #pragma Directives\r\n#pragma Short Description\r\nCompiler\r\nVersions\r\n#pragma set woff Suppresses compiler warnings (either all, or by warning\r\nnumber).\r\n7.2 and later\r\n#pragma reset woff Resets listed warnings to the state specified in the command\r\nline.\r\n7.2 and later\r\n#pragma set woff\r\nThe #pragma set woff directive suppresses compiler warnings individually by\r\nwarning number.\r\nThe syntax of #pragma set woff is as follows:\r\n#pragma set woff [warning_list]\r\nwarning_list is a list of the warning numbers that you want suppressed. Ranges are\r\nallowed. Only the specified compiler warnings are suppressed.\r\nFor example, the following directive turns off warnings 1, 2, 300 through 310, and 8:\r\n#pragma set woff 1,2,300-310,8\r\n#pragma set woff does not nest. That is, any #pragma reset woff on a given\r\nnumber resets the value to that implied by the command line.\r\n007–3587–005 105",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/1255cc16-4a9b-46cc-812f-6897647160dd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=487bed99b18e580e7edca0407f3d3b345a78d45db9b22ee03544aa5899e919f7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 423
      },
      {
        "segments": [
          {
            "segment_id": "779b478e-3eb4-4168-9e04-17e32c483206",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 128,
            "page_width": 612,
            "page_height": 792,
            "content": "13: Warning Suppression Control #pragma Directives\r\nExample 13-1 #pragma set woff\r\nThe following code illustrates the use of #pragma set woff:\r\ncc -woff 300,302\r\n/* example.c */\r\n#pragma set woff 400\r\n/* warnings 300,302, and 400 are off in example.c */\r\n#include ‘‘example.h’’\r\n/* You would expect that warnings 300,302,and 400 would be off\r\nin example.h. However, the #pragma set woff does not travel\r\ninto #includes properly. In MIPSpro7.2 300 and 302 are off, but\r\n400 is on in example.h. In a future release 400 may be off in\r\nexample.h\r\n*/\r\n#pragma reset woff 400\r\n/* 400 is reset to command line state; that is, 400 is on. */\r\n#pragma reset woff 300\r\n/* 300 is reset to command line state; that is, 300 is still off */\r\n#pragma reset woff\r\nThe #pragma reset woff directive resets listed warnings to the state specified in\r\nthe command line.\r\nThe syntax of #pragma reset woff is as follows:\r\n#pragma reset woff [warning_list]\r\nwarning_list consists of a list of the warning numbers that you want reset to the state\r\nspecified in the command line. Ranges are allowed. Only the specified compiler\r\nwarnings are reset.\r\nFor example, the following directive sets warnings 1, 2, 300 through 310, and 8 back\r\nto the command-line setting:\r\n106 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/779b478e-3eb4-4168-9e04-17e32c483206.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8b1457f3e09762c71cad0abcd62d1c30b7956bd166efe8f81acfac8b18463677",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "914f7b1d-24ec-4260-bb4a-b0080b742404",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 129,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n#pragma set woff 1,2,300-310,8\r\nThis directive does not nest.\r\nExample 13-2 #pragma reset woff\r\nThe following code illustrates the use of #pragma reset woff:\r\ncc -woff 300,302\r\n/* example.c */\r\n#pragma set woff 400\r\n/* warnings 300,302, and 400 are off in example.c */\r\n#include ‘‘example.h’’\r\n/* You would expect that warnings 300,302,and 400 would be off\r\nin example.h. However, the #pragma set woff does not travel\r\ninto #includes properly. In MIPSpro7.2 300 and 302 are off,\r\nbut 400 is on in example.h. In a future release 400 may be off\r\nin example.h\r\n*/\r\n#pragma reset woff 400\r\n/* 400 is reset to command line state; that is, 400 is on. */\r\n#pragma reset woff 300\r\n/* 300 is reset to command line state; that is, 300 is still off */\r\n007–3587–005 107",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/914f7b1d-24ec-4260-bb4a-b0080b742404.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=62a8ad3d7d7fcb2b94365dd7f8c301b83b6a3fbf03c1c87b3f18367024e37552",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fe15d6b4-4458-4d27-9bc1-212d42cdf210",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 130,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/fe15d6b4-4458-4d27-9bc1-212d42cdf210.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2574502122d9da299aaa3943a2965fe125d33c50e97099bf631077ee1f271a82",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 350
      },
      {
        "segments": [
          {
            "segment_id": "77e57ca1-c20d-4943-be47-dd4358094809",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 131,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 14\r\nMiscellaneous #pragma Directives\r\nTable 14-1 lists the #pragma directives described in this chapter, along with a brief\r\ndescription of each and the compiler version in which they are supported.\r\nTable 14-1 Miscellaneous #pragma Directives\r\n#pragma Short Description\r\nCompiler\r\nVersions\r\n#pragma ident Adds a .comment section to the object file and puts the\r\nsupplied string inside the .comment section.\r\n6.0 and later\r\n(-o32 only)\r\n#pragma int_to_unsigned Identifies identifier as a function whose type was int in\r\na previous release of the compilation system, but whose\r\ntype is unsigned int in the MIPSpro compiler release.\r\n7.0 and later\r\n#pragma intrinsic Allows certain preselected functions from math.h,\r\nstdio.h, and string.h to be inlined at a call site. Can\r\nalso enable the compiler to get additional information\r\nabout the function to improve execution efficiency.\r\n7.0 and later\r\n#pragma\r\nunknown_control_flow\r\nIndicates user level functions that have behavior similar\r\nto setjmp and getcontext.\r\n7.3 and later\r\n#pragma ident\r\nThe #pragma ident directive adds a .comment section to the object file and puts\r\nthe supplied string inside the .comment section.\r\nThe syntax of #pragma ident is as follows:\r\n#pragma ident ‘‘string’’\r\nstring is the string you want to add to the .comment section in the object file. The\r\nstring must be enclosed in double quotation marks.\r\n007–3587–005 109",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/77e57ca1-c20d-4943-be47-dd4358094809.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c2b23c6104db4dd13ef6771c2559e4f26552fe59ebc1a137b69733c1931c7643",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3ca60f0a-e56f-4cfa-b022-e22518c7c5f6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 132,
            "page_width": 612,
            "page_height": 792,
            "content": "14: Miscellaneous #pragma Directives\r\n!\r\nCaution: The #pragma ident directive is only available in -o32 mode.\r\n#pragma int_to_unsigned\r\nThe #pragma int_to_unsigned directive tells the compiler that the named\r\nfunction has a different type (unsigned int) in the MIPSpro compiler release than\r\nit did in previous releases (int).\r\nThe syntax of #pragma int_to_unsigned is as follows:\r\n#pragma int_to_unsigned function_name\r\n#pragma int_to_unsigned is not currently supported in C++, except for symbols\r\nmarked extern ‘‘C’’.\r\nThis directive identifies function_name as a function whose type was int in a previous\r\nrelease of the compilation system, but whose type is unsigned int in the MIPSpro\r\ncompiler release. The declaration of the identifier must precede the directive:\r\nunsigned int strlen(const char*);\r\n#pragma int_to_unsigned strlen\r\nThis declaration makes it possible for the compiler to identify where the changed type\r\nmay affect the evaluation of expressions.\r\n#pragma intrinsic\r\nThe #pragma intrinsic directive allows certain preselected functions from\r\nmath.h, stdio.h, and string.h to be inlined at a call site for execution efficiency.\r\nThe syntax of #pragma intrinsic is as follows:\r\n#pragma intrinsic [function_name]\r\n110 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/3ca60f0a-e56f-4cfa-b022-e22518c7c5f6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9f365ae0ad1f1186cd3bac626144c888e1240e81e3548df9ef25e2dcea3da74a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 389
      },
      {
        "segments": [
          {
            "segment_id": "fed7a20d-6f26-49b1-ba3d-90ecf2fbc49c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 133,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\n!\r\nCaution:\r\n• This directive has no effect on functions other than the preselected ones.\r\n• Exactly which functions may be inlined, how they are inlined, and under what\r\ncircumstances inlining occurs is implementation-defined and may vary from one\r\nrelease of the compilers to the next.\r\n• The inlining of intrinsics may violate some aspect of the ANSI C standard (for\r\nexample, the errno setting for math.h functions).\r\n• All intrinsics are activated through directives in the respective standard header\r\nfiles and only when the preprocessor symbol __INLINE_INTRINSICS is defined\r\nand the appropriate include files are included. __INLINE_INTRINSICS is\r\npredefined by default only in -cckr and -xansi mode.\r\n#pragma unknown_control_flow\r\nThe #pragma unknown_control_flow directive indicates that the procedures\r\nlisted as func1, func2, etc. have a nonstandard control flow behavior, such as setjmp\r\nor getcontext. This type of behavior interferes with optimizations such as tail call\r\noptimization.\r\nThe syntax of #pragma unknown_control_flow is as follows:\r\n#pragma unknown_control_flow [func1 , [func2] ...]\r\nThis directive should appear after the external declaration of the function(s).\r\n007–3587–005 111",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/fed7a20d-6f26-49b1-ba3d-90ecf2fbc49c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b5582c031627d7aacdffd954ad651972187ccc8ab42f83cc255c7a7f9a53b655",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "951bf095-7386-4378-be7f-97cb1628ba4b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 134,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/951bf095-7386-4378-be7f-97cb1628ba4b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8394de0e0658c462c567007b53fc0d5a38873e9d8d34bb2b3ed5e1dc417aea51",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "4140c438-29b2-45ce-86ef-285359c95e8d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 135,
            "page_width": 612,
            "page_height": 792,
            "content": "Chapter 15\r\nThe Auto-Parallelizing Option (APO)\r\nThe Auto-Parallelizing Option (APO) enables the MIPSpro C/C++ compilers to\r\noptimize parallel codes and enhances performance on multiprocessor systems. APO is\r\ncontrolled with command line options and source directives.\r\nAPO is integrated into the compiler; it is not a source-to-source preprocessor.\r\nAlthough run-time performance suffers slightly on single-processor systems,\r\nparallelized programs can be created and debugged with APO enabled.\r\nParallelization is the process of analyzing sequential programs for parallelism and\r\nrestructuring them to run efficiently on multiprocessor systems. The goal is to\r\nminimize the overall computation time by distributing the computational workload\r\namong the available processors. Parallelization can be automatic or manual.\r\nDuring automatic parallelization, the compiler analyzes and restructures the program\r\nwith little or no intervention by you. With APO, the compiler automatically generates\r\ncode that splits the processing of loops among multiple processors. An alternative is\r\nmanual parallelization, in which you perform the parallelization using compiler\r\ndirectives and other programming techniques.\r\nAPO integrates automatic parallelization with other compiler optimizations, such as\r\ninterprocedural analysis (IPA), optimizations for single processors, and loop nest\r\noptimization (LNO). In addition, run-time and compile-time performance is improved.\r\nFor details on using APO command line options and source directives, see the\r\nMIPSpro C++ Programmer’s Guide\r\n007–3587–005 113",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/4140c438-29b2-45ce-86ef-285359c95e8d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f247a03e366a9f1661b6b7f7ec36cc9579e23da43af53fd4f6912d33b2d27ed5",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "5b84ebfa-e6be-4ddd-b971-ed774384040a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 136,
            "page_width": 612,
            "page_height": 792,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/5b84ebfa-e6be-4ddd-b971-ed774384040a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0c15d1e94b7e341abfa63bee0cb29df835a00bcee84b8418bacbb37869d52ab4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 386
      },
      {
        "segments": [
          {
            "segment_id": "f220bda0-e57b-473b-9a4e-abcd8fa57af6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 137,
            "page_width": 612,
            "page_height": 792,
            "content": "Index\r\nA\r\nABI\r\nN32 APO, 113\r\nN64 APO, 113\r\naffinity, 81, 82\r\naggressive inner loop fission, 50\r\nalign_symbol, 21\r\nAPO, 113\r\nApplication Program Interface, 95\r\nAuto-Parallelizing Option\r\nSee \"APO\", 113\r\nAutomatic parallelization\r\ndefinition, 113\r\nautomatic parallelization, 11\r\nB\r\nblocking size, 51\r\nC\r\nC++ instatiation directives, 17\r\ncan_instantiate, 18\r\nchunksize, 88\r\nClauses\r\naffinity, 81, 82\r\nchunksize, 88\r\nfor #pragma parallel, 74\r\nfor #pragma pfor, 79\r\nfor #pragma prefetch_ref, 57\r\nif, 75\r\niterate, 79\r\nlastlocal, 80\r\nlocal, 75, 80\r\nnest, 85\r\nnumthreads, 76\r\nonto, 27, 33\r\nreduction, 81\r\nschedtype, 85\r\nshared, 74\r\nconcurrent, 11\r\nconcurrent call, 12\r\nconcurrentize, 14\r\ncopyin, 62\r\ncritical, 63\r\nD\r\nData layout directives, 21\r\nDirectives\r\nOpenMP, 95\r\nSee \"#pragma\", 11\r\nDirectives, list of, 2\r\ndistribute, 25\r\ndistribute_reshape, 28\r\nDistributed shared memory optimization, 25\r\ndo_not_instantiate, 19\r\nDSM optimization, 25\r\ndynamic, 30\r\nE\r\nenter gate, 66\r\nexit gate, 66\r\nF\r\nfill_symbol, 23\r\n007–3587–005 115",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/f220bda0-e57b-473b-9a4e-abcd8fa57af6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3f86837d9ec4f1de3b0507dfc75308d8063d131d4a806e099ad4f8a65165680f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f54b3909-70cc-4e9b-b42d-eee48583386e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 138,
            "page_width": 612,
            "page_height": 792,
            "content": "Index\r\nfission, 52\r\nfissionable, 52\r\nfusable, 53\r\nfuse, 53\r\nH\r\nhdrstop, 101\r\nhidden, 42\r\nI\r\nident, 109\r\nif, 75\r\nindependent, 69\r\ninline, 35\r\nInlining directives, 35\r\ninstantiate, 17\r\ninstantiation directives, 17\r\nint_to_unsigned, 110\r\ninternal, 42\r\nintrinsic, 110\r\nIPA\r\nautomatic parallelization, 113\r\niterate, 79\r\nivdep, 54\r\nL\r\nlastlocal, 80\r\nLNO\r\nautomatic parallelization, 113\r\nLoader information directives, 41\r\nlocal, 70, 75, 80\r\nLoop nest optimization directives, 49\r\nM\r\nManual parallelization, 113\r\nmips_frequency_hint, 103\r\nMultiprocessing c compiler directives, 2\r\nMultiprocessing directives, 61\r\nN\r\nnest, 85\r\nno blocking, 51\r\nno fission, 52\r\nno fusion, 53\r\nno interchange, 54\r\nno side effects, 71\r\nno_delete, 43\r\nno_pch, 102\r\nnoconcurrentize, 14\r\nnoinline, 35\r\nnumthreads, 76\r\nO\r\nonce, 102\r\none processor, 71\r\nonto clause\r\n#pragma distribute, 27\r\n#pragma redistribute, 33\r\nOpemMP\r\nmultiprocessing directives, 95\r\nOptimization\r\nAPO, 113\r\noptional, 43\r\nP\r\npack, 24\r\npage_place, 31\r\n116 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/f54b3909-70cc-4e9b-b42d-eee48583386e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6f2fc0e53f35966f7ec8c54a147535c27feb21fba535e501402807c6e213c267",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fed3380b-337e-48f7-9b1f-78225336a1e5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 139,
            "page_width": 612,
            "page_height": 792,
            "content": "MIPSproTM C and C++ Pragmas\r\nparallel, 72\r\nParallelization\r\nautomatic, 113\r\ndefinition, 113\r\nmanual, 113\r\npermutation, 15\r\npfor, 76\r\n#pragma\r\naggressive inner loop fission, 50\r\nalign_symbol, 21\r\nblocking size, 51\r\ncan_instantiate, 18\r\nconcurrent, 11\r\nconcurrent call, 12\r\nconcurrentize, 14\r\ncopyin, 62\r\ncritical, 63\r\ndistribute, 25\r\ndistribute_reshape, 28\r\ndo_not_instantiate, 19\r\ndynamic, 30\r\nenter gate, 66\r\nexit gate, 66\r\nfill_symbol, 23\r\nfission, 52\r\nfissionable, 52\r\nfusable, 53\r\nfuse, 53\r\nhdrstop, 101\r\nhidden, 42\r\nident, 109\r\nindependent, 69\r\ninline, 35\r\ninstantiate, 17\r\nint_to_unsigned, 110\r\ninternal, 42\r\nintrinsic, 110\r\nivdep, 54\r\nlocal, 70\r\nmips_frequency_hint, 103\r\nno blocking, 51\r\nno fission, 52\r\nno fusion, 53\r\nno interchange, 54\r\nno side effects, 71\r\nno_delete, 43\r\nno_pch, 102\r\nnoconcurrentize, 14\r\nnoinline, 35\r\nonce, 102\r\none processor, 71\r\noptional, 43\r\npack, 24\r\npage_place, 31\r\nparallel, 72\r\npermutation, 15\r\npfor, 76\r\nprefer concurrent, 15\r\nprefer serial, 16\r\nprefetch, 55\r\nprefetch_manual, 56\r\nprefetch_ref, 56\r\nprefetch_ref_disable, 58\r\nprotected, 44\r\npure, 89\r\nredistribute, 32\r\nreset woff, 106\r\nsection_gp, 45\r\nsection_non_gp, 45\r\nserial, 16\r\nset chunksize, 89\r\nset numthreads, 90\r\nset schedtype, 90\r\nset woff, 105\r\nshared, 91\r\nsynchronize, 91\r\nunknown_control_flow, 111\r\nunroll, 58\r\nweak, 46\r\nPrecompiled header directives, 101\r\nprefer concurrent, 15\r\nprefer serial, 16\r\nprefetch, 55\r\n007–3587–005 117",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/fed3380b-337e-48f7-9b1f-78225336a1e5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bb268d474ba2b690517163c92f29d05525cc234264f3afb00472329e9374db4d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 478
      },
      {
        "segments": [
          {
            "segment_id": "0b7ea25c-3f14-4bf1-8dc0-9ea42efa1feb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 140,
            "page_width": 612,
            "page_height": 792,
            "content": "Index\r\nprefetch_manual, 56\r\nprefetch_ref, 56\r\nprefetch_ref_disable, 58\r\nprefetching, 55\r\nprotected, 44\r\npure, 89\r\nR\r\nredistribute, 32\r\nreduction, 81\r\nreset woff, 106\r\nS\r\nScalar optimization directives, 103\r\nschedtype, 85\r\nsection_gp, 45\r\nsection_non_gp, 45\r\nserial, 16\r\nset chunksize, 89\r\nset numthreads, 90\r\nset schedtype, 90\r\nset woff, 105\r\nshared, 74, 91\r\nsynchronize, 91\r\nU\r\nunknown_control_flow, 111\r\nunroll, 58\r\nW\r\nWarning suppression control directives, 105\r\nweak, 46\r\n118 007–3587–005",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/bc8b83db-5f7a-448b-a16d-6ceb13100a76/images/0b7ea25c-3f14-4bf1-8dc0-9ea42efa1feb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041617Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=77f9558816b81e4f47be310c91ce210c195e155f0fb5978326b7fc0986ee710e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 66
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "```json\n{\"title\": \"MIPSpro™ C and C++ Pragmas\"}\n```"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Silicon Graphics, Inc.\n"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "```json\n{\"date_published\": \"2003-06\"}\n```"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "```json\n{\"location\": \"65\"}\n```"
        }
      ]
    }
  }
}