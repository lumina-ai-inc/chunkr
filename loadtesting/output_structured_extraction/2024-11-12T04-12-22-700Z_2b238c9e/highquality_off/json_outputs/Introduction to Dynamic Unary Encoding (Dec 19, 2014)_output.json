{
  "file_name": "Introduction to Dynamic Unary Encoding (Dec 19, 2014).pdf",
  "task_id": "451354ce-0b03-4f59-b3ae-bfc632eae090",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "15e32771-5c95-44f8-88b3-cfafdc2f4695",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 1,
            "page_width": 612,
            "page_height": 792,
            "content": "Introduction to Dynamic Unary Encoding\r\nErnst D. Berg\r\nernst@eberg.us\r\nTurlock, CA.\r\nDecember 19, 2014\r\nAbstract\r\nDynamic Unary Encoding takes Unary Encoding to the next level. Every n-bit binary string is an\r\nencoding of dynamic unary and every n-bit binary string is encodable by dynamic unary. By utilizing\r\nboth forms of unary code and a single bit of parity information dynamic unary encoding partitions 2\r\nn\r\nnon-negative integers into n sets of disjoint cycles of n-bit elements. These cycles have been employed\r\nas virtual data sets, binary transforms and as a mathematical object. Characterization of both the cycles\r\nand of the cycle spectrum is given. Examples of encoding and decoding algorithms are given. Examples\r\nof other constructs utilizing the principles of dynamic unary encoding are presented. The cycle as a\r\nmathematical object is demonstrated.\r\n1 Introduction\r\nDynamic Unary Encoding (DUE), in the form of a binary data encoder, was discovered by this author\r\nin January of 2010 during an effort to satisfy a data compression challenge through experimental binary\r\nencoding schemes involving iterative functions. Although the effort to find a solution to that challenge\r\ncontinues; DUE is a discovery of importance. Effort is made to present DUE in an introductory format\r\nleading to suggestions of applications in higher mathematics and computer science. It has not escaped\r\nobservation that Dynamic Unary has applications beyond data encoding.\r\n1.1 Overview\r\nThe history and development of Dynamic Unary Encoding is a reflection of my search for innovative binary\r\nencoding resulting in four categories of algorithms developed through experimentation and observation.\r\nThe first category of encoder developed is introduced as an iterative function exporting the parity of the\r\nfirst bit, in the binary string being encoded, as the transform. An example of this category of algorithm is\r\npresented in 5.1.\r\nThe second category includes binary string constructions and deconstructions exploring the relationship\r\nof parity information and unary code to binary string structure. An example is presented in 5.2.\r\nThe third category communicates the parity structure of the source string via the terminus parity of the\r\nunary code. Through iteration of encoding or decoding it was observed that for all n-bit binary strings DUE\r\ngenerated a cycle of n-bit elements.\r\nFor the fourth category the cycles of DUE as a complete orbit are successfully utilized as a mathematical\r\nobject; a type of dynamic integer or Quantum Numbers perhaps? A non-DUE cycle is generated as the\r\nexample of this category.\r\n1\r\narXiv:1405.2846v7 [cs.IT] 15 Dec 2014",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/15e32771-5c95-44f8-88b3-cfafdc2f4695.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6c93b07df7becc321a560ce40d85a7835d8fcf02345832d746a14198c43451b4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 408
      },
      {
        "segments": [
          {
            "segment_id": "b102ca9b-ed31-43f7-84f9-21203433ba65",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 2,
            "page_width": 612,
            "page_height": 792,
            "content": "1.2 Unary code\r\nUnary Code[1] is an entropy code that represents a non-negative integer. Unary code has the form of a body\r\nof zero or more bits of one parity and a single bit terminus of the opposite parity.\r\n• Example: Integer value four can be represented in unary code as both 0111 and 10001.\r\nA finite length binary string may contain more than one unary coded integer. Each integer is delimited by\r\nthe terminus parity.\r\n• Example: In the binary string “0111011110110100” unary codes with a terminus of the 0 parity\r\nrepresent integers {4, 5, 3, 2, 1, 1}.\r\n1.3 Parity structure of binary strings and the Parity Reference\r\nBinary strings have the quality of being dividable into segments of same parity bits in an alternating parity\r\npattern forming the parity structure of the binary string.\r\n• Example: For “ 0111011110110100 ” same parity bit segments are {0, 111, 0, 1111, 0, 11, 0, 1, 00}.\r\nThis parity structure is communicated with a single bit by knowing the parity of a single bit at a specific bit\r\nposition. The term for this is the Parity Reference. The term Parity Reference incorporates both the physical\r\nlocation of that bit and the information of that bit’s parity state. The Parity Reference may be internal to\r\nthe encoding or can be external. Bit position notation follows conventional representation of b0 (first bit)\r\nthrough bn−1 for some finite length binary string. A finite length binary string is also referenced as an n-bit.\r\n2 Encoding and Decoding\r\nThe Cycle and Mathematical Object aspects of Dynamic Unary Encoding are presented first followed by\r\ntwo encoding constructs utilizing external Parity Reference constructs. Dynamic Unary Encoding utilizes\r\nUnary Code and Parity Reference information for all constructs.\r\n2.1 Encoding\r\nFirst, encoding parses a finite length binary string into same parity segments. The terminus parity of the\r\nunary code is determined by the parity of the bit at the Parity Reference bit position. Once the binary string\r\nparity structure is exported as terminus parity a simple bijection of segment length and unary code exists.\r\nThe lengths of those segments are then represented in a new string by unary codes. An example encode\r\nalgorithm is presented in figure 1.\r\n• Let σ represent encoding.\r\n• Let our source string be “0100100001100101011011000110110001101111” “Hello” in ASCII code.\r\n• Let the Parity Reference = b0 making the unary code terminus = 1.\r\nSame parity segments 0 1 00 1 0000 11 00 1 0 1 0 11 0 11 000 11 0 11 000 11 0 1111\r\nUnary Encoded 1 1 10 1 1000 10 10 1 1 1 1 10 1 10 100 10 1 10 100 10 1 1000\r\nσ(0100100001100101011011000110110001101111)0 = (1110110001010111110110100101101001011000)1\r\n1Binary[2] data are presented in the Western Positional Notation of right to left.\r\n2",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/b102ca9b-ed31-43f7-84f9-21203433ba65.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=78fcfa3dd49ee03f6e25a128a1592938bf46fb7b73db0eeee830f5fe10148fbb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 465
      },
      {
        "segments": [
          {
            "segment_id": "abb68f8d-d2f5-4af9-8b79-2c185a57b20c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 3,
            "page_width": 612,
            "page_height": 792,
            "content": "2.2 Decoding\r\nFirst, decoding determines the terminus parity of the unary code used to encode from the nth (bn−1) bit of\r\nthe string. Then the string is parsed into unary codes by terminus boundaries. Same parity segments, of\r\nthe length the unary code communicates, are then written in correct parity order using the Parity Reference\r\ninformation. An example decode algorithm is presented in figure 2.\r\n• Let -σ represent decoding.\r\n• Let our source string be “1110110001010111110110100101101001011000”\r\n• Let our unary code terminus be 1 and our Parity Reference = b0. Terminus information is read at bn−1.\r\nParse the string into unary codes 1 1 10 1 1000 10 10 1 1 1 1 10 1 10 100 10 1 10 100 10 1 1000\r\nSame parity bit segments 0 1 00 1 0000 11 00 1 0 1 0 11 0 11 000 11 0 11 000 11 0 1111\r\n-σ(1110110001010111110110100101101001011000)1 = (0100100001100101011011000110110001101111)0\r\n3 Cycles and Cycle Spectrum\r\nEvery n-bit binary string is an encoding of dynamic unary and every n-bit binary string is encodable by\r\ndynamic unary. Through experimentation and observation iteration of encoding or decoding resulted in\r\na cycle of k elements of length n bits. By utilizing both forms of unary code and the parity structure\r\ninformation of the source string dynamic unary partitions 2\r\nn non-negative integers into disjoint cycles[3][4]\r\nof n-bit elements creating a dynamic data type. The spectrum of these cycles is an infinite progression of\r\nsets[10] of cycles that have in common relationships to powers of two.2 The quality of the cycles being\r\ndisjoint was first determined by observations of the cycles of the shorter length strings which are easy\r\nto generate by hand. The disjoint quality of the cycles was also observed with a C-Language program\r\ngenerating the cycles of thirty two bit elements, as a data set, of all 2\r\n32 non-negative integers. Encoding\r\nis further defined as generating the next element in cycle and decoding is further defined as generating the\r\nprevious element in cycle.\r\nS0 = {0000} n = 4 k = 8 PRef = b0 Si+1 = σ(S0)i or -σ(S0)i for 0 ≥ i < k Sk = S0\r\nσ(0000) = ( 0111 1100 0101 1111 1000 0011 1010 0000 ) = ( 7 12 5 15 8 3 10 0 )\r\n-σ(0000) = ( 1010 0011 1000 1111 0101 1100 0111 0000 ) = ( 10 3 8 15 5 12 7 0 )\r\nS0 7→ S1 7→ S2 7→ S3 7→ S4 7→ S5 7→ S6 7→ S7 = S0\r\nExample cycle in both the encode direction and the decode direction of a 4-bit string.\r\nThe number of cycles for a n-bit binary string and a specific Parity Reference bit position is determined by\r\nx equals the number of elements in a cycle and 2\r\nn\r\nthe number of non-negative integers such that cycles =\r\n2\r\nn/x. That there are n choices for a Parity Reference means we also have n sets of cycles for each n-bit\r\nstring.\r\n• From observations of the cycle data, cycle spectrum can be separated into three categories.\r\n• String length (2n)\r\nb0 has (21+n) cycles of (2n) elements for n = 0 .3\r\n• Binary string lengths that are a power of two, greater than one, and Parity Reference of b0 have been observed\r\nas having an element count of (2\r\n1+n\r\n) and cycle count of (2\r\n2\r\nn\r\n/2\r\n1+n\r\n) for n ∈ {1, 2, 3, . . . }.\r\n• All other lengths and Parity Reference combinations may be defined as(21+blog2 nc) elements 4and (2\r\n1+n/21+blog2 nc\r\n)\r\ncycles for n ∈ {1, 2, 3, . . .}.\r\n2A complete listing of the cycles for string lengths one through eight is presented in table one.\r\n3\r\nIn researching the Mathematics of Cycles it was observed that a cycling of a single element is not generally considered a\r\nCycle;[3] however, what applies to a string of one bit, in DUE, applies to all strings and is therefore included as such.\r\n4\r\n(21+blog2 nc)n∈{1,2,3,...} = {2, 4, 4, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16, 32, 32, 32, ...}\r\n3",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/abb68f8d-d2f5-4af9-8b79-2c185a57b20c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a0323407283a311e6a457a93bfe55dbe3e324ddef68e98c212b98c117a0c63eb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 698
      },
      {
        "segments": [
          {
            "segment_id": "abb68f8d-d2f5-4af9-8b79-2c185a57b20c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 3,
            "page_width": 612,
            "page_height": 792,
            "content": "2.2 Decoding\r\nFirst, decoding determines the terminus parity of the unary code used to encode from the nth (bn−1) bit of\r\nthe string. Then the string is parsed into unary codes by terminus boundaries. Same parity segments, of\r\nthe length the unary code communicates, are then written in correct parity order using the Parity Reference\r\ninformation. An example decode algorithm is presented in figure 2.\r\n• Let -σ represent decoding.\r\n• Let our source string be “1110110001010111110110100101101001011000”\r\n• Let our unary code terminus be 1 and our Parity Reference = b0. Terminus information is read at bn−1.\r\nParse the string into unary codes 1 1 10 1 1000 10 10 1 1 1 1 10 1 10 100 10 1 10 100 10 1 1000\r\nSame parity bit segments 0 1 00 1 0000 11 00 1 0 1 0 11 0 11 000 11 0 11 000 11 0 1111\r\n-σ(1110110001010111110110100101101001011000)1 = (0100100001100101011011000110110001101111)0\r\n3 Cycles and Cycle Spectrum\r\nEvery n-bit binary string is an encoding of dynamic unary and every n-bit binary string is encodable by\r\ndynamic unary. Through experimentation and observation iteration of encoding or decoding resulted in\r\na cycle of k elements of length n bits. By utilizing both forms of unary code and the parity structure\r\ninformation of the source string dynamic unary partitions 2\r\nn non-negative integers into disjoint cycles[3][4]\r\nof n-bit elements creating a dynamic data type. The spectrum of these cycles is an infinite progression of\r\nsets[10] of cycles that have in common relationships to powers of two.2 The quality of the cycles being\r\ndisjoint was first determined by observations of the cycles of the shorter length strings which are easy\r\nto generate by hand. The disjoint quality of the cycles was also observed with a C-Language program\r\ngenerating the cycles of thirty two bit elements, as a data set, of all 2\r\n32 non-negative integers. Encoding\r\nis further defined as generating the next element in cycle and decoding is further defined as generating the\r\nprevious element in cycle.\r\nS0 = {0000} n = 4 k = 8 PRef = b0 Si+1 = σ(S0)i or -σ(S0)i for 0 ≥ i < k Sk = S0\r\nσ(0000) = ( 0111 1100 0101 1111 1000 0011 1010 0000 ) = ( 7 12 5 15 8 3 10 0 )\r\n-σ(0000) = ( 1010 0011 1000 1111 0101 1100 0111 0000 ) = ( 10 3 8 15 5 12 7 0 )\r\nS0 7→ S1 7→ S2 7→ S3 7→ S4 7→ S5 7→ S6 7→ S7 = S0\r\nExample cycle in both the encode direction and the decode direction of a 4-bit string.\r\nThe number of cycles for a n-bit binary string and a specific Parity Reference bit position is determined by\r\nx equals the number of elements in a cycle and 2\r\nn\r\nthe number of non-negative integers such that cycles =\r\n2\r\nn/x. That there are n choices for a Parity Reference means we also have n sets of cycles for each n-bit\r\nstring.\r\n• From observations of the cycle data, cycle spectrum can be separated into three categories.\r\n• String length (2n)\r\nb0 has (21+n) cycles of (2n) elements for n = 0 .3\r\n• Binary string lengths that are a power of two, greater than one, and Parity Reference of b0 have been observed\r\nas having an element count of (2\r\n1+n\r\n) and cycle count of (2\r\n2\r\nn\r\n/2\r\n1+n\r\n) for n ∈ {1, 2, 3, . . . }.\r\n• All other lengths and Parity Reference combinations may be defined as(21+blog2 nc) elements 4and (2\r\n1+n/21+blog2 nc\r\n)\r\ncycles for n ∈ {1, 2, 3, . . .}.\r\n2A complete listing of the cycles for string lengths one through eight is presented in table one.\r\n3\r\nIn researching the Mathematics of Cycles it was observed that a cycling of a single element is not generally considered a\r\nCycle;[3] however, what applies to a string of one bit, in DUE, applies to all strings and is therefore included as such.\r\n4\r\n(21+blog2 nc)n∈{1,2,3,...} = {2, 4, 4, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16, 32, 32, 32, ...}\r\n3",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/abb68f8d-d2f5-4af9-8b79-2c185a57b20c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a0323407283a311e6a457a93bfe55dbe3e324ddef68e98c212b98c117a0c63eb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 698
      },
      {
        "segments": [
          {
            "segment_id": "6662906e-f893-4a89-b014-778be57c9458",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 4,
            "page_width": 612,
            "page_height": 792,
            "content": "4 The Cycle as a mathematical object\r\n4.1 Introduction\r\nBy utilizing the complete orbit, application as a mathematical object is realized. As a demonstration a\r\nnon-DUE cycle is presented. The concepts of “Cycle-Of” (σOf ) and “Cycle-On” (σOn) are now introduced\r\nto differentiate types of cycles. Cycle-Of is defined as the dynamic unary cycle of an element. Cycle-On is\r\ndefined as applying Cycle-Of to an element. In the following example a function utilizing the orbits of\r\nthree integers and the logical operation exclusive-or[9], a (σOn) cycle of thirty two elements is generated.\r\nThat for the element length of sixteen bits and a Parity Reference b0 the number of (σOf ) elements is thirty\r\ntwo and the number of elements in the (σOn) is also thirty two. This is not always the case. For example\r\nchange the Parity Reference to any other bit position and the number of elements in the (σOf ) cycle is\r\nsixteen. Curiously the number of elements in the (σOn) orbit is still thirty two. Thus for Parity Reference\r\nb0 only one (σOf ) orbit occurs and for all other Parity References two (σOf ) orbits are required to generate\r\na complete (σOn) orbit. The halting condition of both the Cycle-Of and the Cycle-On is when the element\r\ngenerated equals the starting element. The reason only one (σOf ) orbit occurs for string lengths of powers\r\nof two and a Parity Reference of b0 is seen in the element structure of the cycle in that the elements of those\r\ncycles can be divided into two sets where the members of each are parity inverses of the other.\r\n• An example of length four bits σOf (0000) = (0111 1100 0101 1111 1000 0011 1010 0000 )\r\n—————————\r\nFor the following initial conditions this function generates a (σOn) orbit for the element S0 = 2014 .\r\n• Let the length of string be sixteen bits.\r\n• Let the Parity Reference be b0.\r\n• Let 0 ≤ j < 32 and 0 ≤ i < 32 where S32 = S0, X32 = X0, Y32 = Y0 and Z32 = Z0\r\n• Let X0 = 1, Y0 = 99, Z0 = 6408 and S0 = 2014\r\n• Let Sj+1 = Sj ⊕ σ(X)i ⊕ σ(Y )i ⊕ σ(Z)i\r\nThe Cycle-On cycle : σOn(2014) = ( 28158 19761 64921 60058 30232 23332 8057 63754\r\n27712 19536 951 60323 34882 23123 57674 2015\r\n37376 19760 615 60059 35302 23333 57479 63755\r\n37822 19537 64585 60322 30652 23122 7860 2014 )\r\nIf we examine the mapping it is clear that the next element in the (σOn) cycle is not a result of Dynamic\r\nUnary Encoding. 0000011111011110 7→ 0110110111111110. The value 2,014 is mapped to the value\r\n28,158. A quality of this (σOn) orbit is that by knowing one element in the cycle and it’s index the original\r\nelement (S0) can be retrieved.\r\nThis example utilizes cycles of the same type, direction of spin and element count for simplicity of\r\ndemonstration however constructs are not limited to same type of cycle, same number of cycles in a\r\nfunction, same spin direction or the cycles being of the same k size.\r\n4",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/6662906e-f893-4a89-b014-778be57c9458.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dbfb98af80267263eeeccffa8ec022f6174dc390081cd0ee6b7dfc0bba4c8235",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 527
      },
      {
        "segments": [
          {
            "segment_id": "6662906e-f893-4a89-b014-778be57c9458",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 4,
            "page_width": 612,
            "page_height": 792,
            "content": "4 The Cycle as a mathematical object\r\n4.1 Introduction\r\nBy utilizing the complete orbit, application as a mathematical object is realized. As a demonstration a\r\nnon-DUE cycle is presented. The concepts of “Cycle-Of” (σOf ) and “Cycle-On” (σOn) are now introduced\r\nto differentiate types of cycles. Cycle-Of is defined as the dynamic unary cycle of an element. Cycle-On is\r\ndefined as applying Cycle-Of to an element. In the following example a function utilizing the orbits of\r\nthree integers and the logical operation exclusive-or[9], a (σOn) cycle of thirty two elements is generated.\r\nThat for the element length of sixteen bits and a Parity Reference b0 the number of (σOf ) elements is thirty\r\ntwo and the number of elements in the (σOn) is also thirty two. This is not always the case. For example\r\nchange the Parity Reference to any other bit position and the number of elements in the (σOf ) cycle is\r\nsixteen. Curiously the number of elements in the (σOn) orbit is still thirty two. Thus for Parity Reference\r\nb0 only one (σOf ) orbit occurs and for all other Parity References two (σOf ) orbits are required to generate\r\na complete (σOn) orbit. The halting condition of both the Cycle-Of and the Cycle-On is when the element\r\ngenerated equals the starting element. The reason only one (σOf ) orbit occurs for string lengths of powers\r\nof two and a Parity Reference of b0 is seen in the element structure of the cycle in that the elements of those\r\ncycles can be divided into two sets where the members of each are parity inverses of the other.\r\n• An example of length four bits σOf (0000) = (0111 1100 0101 1111 1000 0011 1010 0000 )\r\n—————————\r\nFor the following initial conditions this function generates a (σOn) orbit for the element S0 = 2014 .\r\n• Let the length of string be sixteen bits.\r\n• Let the Parity Reference be b0.\r\n• Let 0 ≤ j < 32 and 0 ≤ i < 32 where S32 = S0, X32 = X0, Y32 = Y0 and Z32 = Z0\r\n• Let X0 = 1, Y0 = 99, Z0 = 6408 and S0 = 2014\r\n• Let Sj+1 = Sj ⊕ σ(X)i ⊕ σ(Y )i ⊕ σ(Z)i\r\nThe Cycle-On cycle : σOn(2014) = ( 28158 19761 64921 60058 30232 23332 8057 63754\r\n27712 19536 951 60323 34882 23123 57674 2015\r\n37376 19760 615 60059 35302 23333 57479 63755\r\n37822 19537 64585 60322 30652 23122 7860 2014 )\r\nIf we examine the mapping it is clear that the next element in the (σOn) cycle is not a result of Dynamic\r\nUnary Encoding. 0000011111011110 7→ 0110110111111110. The value 2,014 is mapped to the value\r\n28,158. A quality of this (σOn) orbit is that by knowing one element in the cycle and it’s index the original\r\nelement (S0) can be retrieved.\r\nThis example utilizes cycles of the same type, direction of spin and element count for simplicity of\r\ndemonstration however constructs are not limited to same type of cycle, same number of cycles in a\r\nfunction, same spin direction or the cycles being of the same k size.\r\n4",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/6662906e-f893-4a89-b014-778be57c9458.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dbfb98af80267263eeeccffa8ec022f6174dc390081cd0ee6b7dfc0bba4c8235",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 527
      },
      {
        "segments": [
          {
            "segment_id": "5e1ed681-b9aa-4596-9fef-f7c53b5ffd5a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 5,
            "page_width": 612,
            "page_height": 792,
            "content": "4.2 Observations\r\nIt has been observed that the cycles with element lengths, greater than one, that are a power of two of Parity\r\nReference b0 and powers of two plus one of Parity Reference b1 have elements, when considered to be\r\nunsigned integers, that sum to the same value.\r\n• Let α represent binary strings length 2\r\nn and β represent binary strings length 2n + 1 for 0 < n ≤ ∞\r\n•\r\nP2(2n)\r\ni=1 σ(α)\r\nb0\r\ni\r\n= (22\r\nn\r\n− 1)2n: {\r\nPσ(α)|6, 60, 2040, 1048560, 137438953440, . . . }\r\n•\r\nP(21+blog2(2n+1)c\r\n)\r\ni=1 σ(β)\r\nb1\r\ni\r\n= (22\r\nn+1 − 1)2n\r\n: {\r\nPσ(β)|14, 124, 4088, 2097136, 274877906912, . . . }\r\nOther n-bit and Parity Reference combinations have been observed as those cycles having more than a\r\nsingle sum suggesting that those cycles may be grouped by a conserved quantity quality.\r\n5 Alternate algorithms\r\nDynamic Unary has two components, the Unary Code and the Parity Reference information. Each part can\r\nbe utilized in constructs separately. Two encoding schemes are presented as examples.\r\n5.1 Drop-T\r\nThe Drop-T algorithm exports the parity at Parity Reference b0 as the encoding transform. The source n-bit\r\nis then encoded in fixed parity terminus unary codes. Each iteration of the encoding then “drops” the nth bit\r\nof the newly unary encoded n-bit source string before the next iteration. Each iteration reduces the source\r\nn-bit length by one bit and increases output n-bit length by one bit until all source bits are processed.\r\nDecoding requires that the terminus parity be known. Decoding reads each bit sequentially from the\r\nsource n-bit providing the parity information needed to reconstruct the parity structure of the n-bit binary\r\nstring of each iteration. Because the construct of encoding is the collection of all the parities of each\r\niteration, Parity Reference is considered external to this n-bit being constructed. Decoding starts with a\r\nsingle bit unary code and processes it’s parity structure then adds a new terminus bit to the end of that n-bit\r\nincreasing the length of the n-bit string by one bit. This iterative process completes when all the source\r\nn-bit bits are used.\r\n• Let our source be {011} and our Parity Reference be b0. Our fixed parity terminus is 1.\r\n• The encoded string then is all the parities sampled at b0\r\n{011} 7→ {110} , {10} 7→ {11} , {1} 7→ {1} so {011} 7→ {101}\r\nIt was hoped that Drop-T would be a single bijective cycle for all n-bit elements representing all 2\r\nn\r\nnon-negative integers however it was discovered that some elements maped to themselves.\r\n• With a terminus parity of 1 and a string of “000” the element maps to itself\r\n{000} 7→ {100} , {00} 7→ {10} , {0} 7→ {1} so {000} 7→ {000}\r\nTherefore there are more than one cycle for each n-bit.\r\n• Let our Parity Reference be b0. Our fixed parity terminus is 0.\r\n• For length one the cycles are {(0),(1)}\r\n• For length two the cycles are {( 00 01 10 ),( 11 ) }\r\n• For length three the cycles are {( 000 011 110 ),( 001 100 010 ),( 101 ),( 111 )}\r\n5",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/5e1ed681-b9aa-4596-9fef-f7c53b5ffd5a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8233451b84c1ab54c45d28571093e6e5dc966d6e9d04d06f223da24bb210c0a3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 534
      },
      {
        "segments": [
          {
            "segment_id": "5e1ed681-b9aa-4596-9fef-f7c53b5ffd5a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 5,
            "page_width": 612,
            "page_height": 792,
            "content": "4.2 Observations\r\nIt has been observed that the cycles with element lengths, greater than one, that are a power of two of Parity\r\nReference b0 and powers of two plus one of Parity Reference b1 have elements, when considered to be\r\nunsigned integers, that sum to the same value.\r\n• Let α represent binary strings length 2\r\nn and β represent binary strings length 2n + 1 for 0 < n ≤ ∞\r\n•\r\nP2(2n)\r\ni=1 σ(α)\r\nb0\r\ni\r\n= (22\r\nn\r\n− 1)2n: {\r\nPσ(α)|6, 60, 2040, 1048560, 137438953440, . . . }\r\n•\r\nP(21+blog2(2n+1)c\r\n)\r\ni=1 σ(β)\r\nb1\r\ni\r\n= (22\r\nn+1 − 1)2n\r\n: {\r\nPσ(β)|14, 124, 4088, 2097136, 274877906912, . . . }\r\nOther n-bit and Parity Reference combinations have been observed as those cycles having more than a\r\nsingle sum suggesting that those cycles may be grouped by a conserved quantity quality.\r\n5 Alternate algorithms\r\nDynamic Unary has two components, the Unary Code and the Parity Reference information. Each part can\r\nbe utilized in constructs separately. Two encoding schemes are presented as examples.\r\n5.1 Drop-T\r\nThe Drop-T algorithm exports the parity at Parity Reference b0 as the encoding transform. The source n-bit\r\nis then encoded in fixed parity terminus unary codes. Each iteration of the encoding then “drops” the nth bit\r\nof the newly unary encoded n-bit source string before the next iteration. Each iteration reduces the source\r\nn-bit length by one bit and increases output n-bit length by one bit until all source bits are processed.\r\nDecoding requires that the terminus parity be known. Decoding reads each bit sequentially from the\r\nsource n-bit providing the parity information needed to reconstruct the parity structure of the n-bit binary\r\nstring of each iteration. Because the construct of encoding is the collection of all the parities of each\r\niteration, Parity Reference is considered external to this n-bit being constructed. Decoding starts with a\r\nsingle bit unary code and processes it’s parity structure then adds a new terminus bit to the end of that n-bit\r\nincreasing the length of the n-bit string by one bit. This iterative process completes when all the source\r\nn-bit bits are used.\r\n• Let our source be {011} and our Parity Reference be b0. Our fixed parity terminus is 1.\r\n• The encoded string then is all the parities sampled at b0\r\n{011} 7→ {110} , {10} 7→ {11} , {1} 7→ {1} so {011} 7→ {101}\r\nIt was hoped that Drop-T would be a single bijective cycle for all n-bit elements representing all 2\r\nn\r\nnon-negative integers however it was discovered that some elements maped to themselves.\r\n• With a terminus parity of 1 and a string of “000” the element maps to itself\r\n{000} 7→ {100} , {00} 7→ {10} , {0} 7→ {1} so {000} 7→ {000}\r\nTherefore there are more than one cycle for each n-bit.\r\n• Let our Parity Reference be b0. Our fixed parity terminus is 0.\r\n• For length one the cycles are {(0),(1)}\r\n• For length two the cycles are {( 00 01 10 ),( 11 ) }\r\n• For length three the cycles are {( 000 011 110 ),( 001 100 010 ),( 101 ),( 111 )}\r\n5",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/5e1ed681-b9aa-4596-9fef-f7c53b5ffd5a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8233451b84c1ab54c45d28571093e6e5dc966d6e9d04d06f223da24bb210c0a3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 534
      },
      {
        "segments": [
          {
            "segment_id": "97704c9a-17f6-46fd-93e8-566be93782a9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 6,
            "page_width": 612,
            "page_height": 792,
            "content": "5.2 Binary string construction and deconstruction algorithms\r\nDuring this phase of development several construction and deconstruction concepts were explored in the\r\nhopes of finding some “data encoding magic.” Imagination was key during this phase. The basic constructs\r\nof this category process unary code separately from Parity Reference information. Several variations of this\r\ntype of encoding were explored resulting in unique encoding schemes. For this example, any string length\r\nn, two strings of length n + 1 can be generated. The Parity Reference is an external and fixed parity.\r\n• Given an arbitrary string “011” then adding terminus’ 0+011 and 1+011 then decoding for a fixed\r\nParity Reference of 0 we get {1000} and {0010} because it is assumed the nth bit is the terminus\r\nparity. Therefore it is possible to generate an eight bit string from three bits of information.\r\n• So for this decode {011} 7→ {10000010}\r\nRelated work\r\nThe cycle structure was first observed by Gustavus J. Simmons[5] and is presented in the paper Parity\r\nEncoding of Binary Sequences. Simmons applies an exclusive-or summation algorithm; a “mod 2 sum of\r\nthe summands”, on binary strings which have in common a finite length and a parity of 1 in the most\r\nsignificant bit position. The cycles generated prove to be a subset of those generated by DUE for the\r\nconditions of the decode direction with the Parity Reference bit position of bn−1 when that bit is parity 1.5\r\nIt is interesting that two different algorithms generate the cycle structure and raises the question of what do\r\nexclusive-or and DUE have mathematically in common?\r\nConclusion\r\nDynamic Unary Encoding introduces new choices of how binary data is represented and processed. DUE\r\nemerged out of efforts to discover innovative encoding methods. DUE has been applied as a bijective\r\ntransform changing one binary data file into millions of different files. DUE was an important part of a\r\nsurjective data encoder where many choices of what binary code would represent a source n-bit string were\r\ngenerated. As a tool of deconstruction or construction binary data is processed bit by bit. Utilized as a\r\nmathematical object, the forms a data can take is limited only by imagination because anything that can be\r\ndone and undone to a data can be a part of some encoding algorithm utilizing DUE. As a virtual data set\r\ndynamic unary requires only one element in order to access all k elements of a cycle. That quality also\r\nextends to simple encryption of data by simply cycling a data in it’s orbit.\r\nIt is not difficult to envision applications of dynamic unary in categories such as the design of\r\nmicroprocessors, robotics, artificial intelligence, cryptography, logic and control and possibly physics.\r\nAll in all there is more to DUE than has been done. More to discover about Dynamic Unary and it’s\r\napplications. The questions now are what needs to be done, how is it to be applied and what results will be\r\nrealized.\r\nOn a personal note, like Gottfried Leibniz[6] I too find the relationship of binary numbers and the\r\nI-Ching[7] interesting. Dynamic Unary introduces a quality that I believe Leibniz would find interesting\r\nand that is, as noted in the I-Ching and Dynamic Unary Encoding, that one element can change to another.\r\nMetaphorically speaking, a Gate of Wonders6[8] has been opened and the garden that is DUE awaits.\r\n5Table One presents the encode data in left to right order. Decode direction equals right to left order.\r\n6Duyvendal’s translation is recommended as the context of this comment.\r\n6",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/97704c9a-17f6-46fd-93e8-566be93782a9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=331ba26e051fc70935ad24c02dc015c9741ad1b2e84f8daadc43981fcdcff69d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 586
      },
      {
        "segments": [
          {
            "segment_id": "97704c9a-17f6-46fd-93e8-566be93782a9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 6,
            "page_width": 612,
            "page_height": 792,
            "content": "5.2 Binary string construction and deconstruction algorithms\r\nDuring this phase of development several construction and deconstruction concepts were explored in the\r\nhopes of finding some “data encoding magic.” Imagination was key during this phase. The basic constructs\r\nof this category process unary code separately from Parity Reference information. Several variations of this\r\ntype of encoding were explored resulting in unique encoding schemes. For this example, any string length\r\nn, two strings of length n + 1 can be generated. The Parity Reference is an external and fixed parity.\r\n• Given an arbitrary string “011” then adding terminus’ 0+011 and 1+011 then decoding for a fixed\r\nParity Reference of 0 we get {1000} and {0010} because it is assumed the nth bit is the terminus\r\nparity. Therefore it is possible to generate an eight bit string from three bits of information.\r\n• So for this decode {011} 7→ {10000010}\r\nRelated work\r\nThe cycle structure was first observed by Gustavus J. Simmons[5] and is presented in the paper Parity\r\nEncoding of Binary Sequences. Simmons applies an exclusive-or summation algorithm; a “mod 2 sum of\r\nthe summands”, on binary strings which have in common a finite length and a parity of 1 in the most\r\nsignificant bit position. The cycles generated prove to be a subset of those generated by DUE for the\r\nconditions of the decode direction with the Parity Reference bit position of bn−1 when that bit is parity 1.5\r\nIt is interesting that two different algorithms generate the cycle structure and raises the question of what do\r\nexclusive-or and DUE have mathematically in common?\r\nConclusion\r\nDynamic Unary Encoding introduces new choices of how binary data is represented and processed. DUE\r\nemerged out of efforts to discover innovative encoding methods. DUE has been applied as a bijective\r\ntransform changing one binary data file into millions of different files. DUE was an important part of a\r\nsurjective data encoder where many choices of what binary code would represent a source n-bit string were\r\ngenerated. As a tool of deconstruction or construction binary data is processed bit by bit. Utilized as a\r\nmathematical object, the forms a data can take is limited only by imagination because anything that can be\r\ndone and undone to a data can be a part of some encoding algorithm utilizing DUE. As a virtual data set\r\ndynamic unary requires only one element in order to access all k elements of a cycle. That quality also\r\nextends to simple encryption of data by simply cycling a data in it’s orbit.\r\nIt is not difficult to envision applications of dynamic unary in categories such as the design of\r\nmicroprocessors, robotics, artificial intelligence, cryptography, logic and control and possibly physics.\r\nAll in all there is more to DUE than has been done. More to discover about Dynamic Unary and it’s\r\napplications. The questions now are what needs to be done, how is it to be applied and what results will be\r\nrealized.\r\nOn a personal note, like Gottfried Leibniz[6] I too find the relationship of binary numbers and the\r\nI-Ching[7] interesting. Dynamic Unary introduces a quality that I believe Leibniz would find interesting\r\nand that is, as noted in the I-Ching and Dynamic Unary Encoding, that one element can change to another.\r\nMetaphorically speaking, a Gate of Wonders6[8] has been opened and the garden that is DUE awaits.\r\n5Table One presents the encode data in left to right order. Decode direction equals right to left order.\r\n6Duyvendal’s translation is recommended as the context of this comment.\r\n6",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/97704c9a-17f6-46fd-93e8-566be93782a9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=331ba26e051fc70935ad24c02dc015c9741ad1b2e84f8daadc43981fcdcff69d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 586
      },
      {
        "segments": [
          {
            "segment_id": "f03455dc-d17a-4952-a90a-f2dd47521c49",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 7,
            "page_width": 612,
            "page_height": 792,
            "content": "Acknowledgments\r\nI wish to thank Gustavus Simmons for the paper Parity Encoding of Binary Sequences which has provided\r\nboth an independent validation of the cycle structure and a guide for this my first paper.\r\nThanks goes to Henning Makholm and mathstackexchange.com for assistance with the element\r\nprogression equation.\r\nJ.J.L. Duyvendal’s translation of chapter one of the Tao Te Ching is unique among many and has been an\r\ninspiration in my efforts to understand the nature of information..\r\nAlso, thanks goes to Mark Nelson whose Million Digit Challenge has provided me with a trustworthy\r\ndata-set and an incredibly difficult challenge. And to all those who have been a part of that experience\r\nthrough the years.\r\nDedication\r\nIn memory of James Herbert Jones; my step-father not forgotten, observing his early Sunday morning\r\nmaths doodles with coffee was the genesis of my realization that there is a realm of creativity to\r\nMathematics.\r\nReferences\r\n[1] Khalid Sayood. Data Compression, 3rd ed, Morgan Kaufmann. ISBN-10: 012620862X — ISBN-13:\r\n978-0126208627\r\n[2] Binary number - Wikipedia, the free encyclopedia, Wikipedia.org\r\n[3] Anderson, Marlow and Feil, Todd (2005), A First Course in Abstract Algebra, Chapman and Hall/CRC; 2nd\r\nedition. ISBN 1-58488-515-7.\r\n[4] John Fraleigh, (2002), A first course in abstract algebra (7th ed.), Addison Wesley, ISBN 978-0-201-76390-4\r\n[5] Gustavus J. Simmons. Parity Encoding of Binary Sequences. Designs, Codes and Cryptography, 27,157–164,\r\n2002\r\n[6] Eric J.Aiton. Leibniz: A Biography, Taylor and Francis. (1985) pp. 245–8. ISBN 0-85274-470-6.\r\n[7] Edward Hacker; Steve Moore; Lorraine Patsco (2002). I Ching: An Annotated Bibliography. Routledge. ISBN\r\n978-0-415-93969-0.\r\n[8] J.J.L. Duyvendal, Tao Te Ching, Pg 17, ISBN 0 8048 1813 4\r\n[9] Exclusive or - Wikipedia, the free encyclopedia, Wikipedia.org\r\n[10] Marvin L. Bittinger, Logic, Proof and Sets, ISBN 0-201-10384-2\r\n7",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/f03455dc-d17a-4952-a90a-f2dd47521c49.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=61275d1a4784bcbd69e4ac59b19bada339d9da21d7fac9a857986a6a7f5055df",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "899198a3-f8ec-48b3-853a-16c88efe5aac",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 8,
            "page_width": 612,
            "page_height": 792,
            "content": "Figure 1: Example encode algorithm\r\n8",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/899198a3-f8ec-48b3-853a-16c88efe5aac.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=19029ac033e91e4e18324077424f221a6c8170752a18ae69c94ace4e77db46af",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "01162ddd-c890-4887-9ced-0d199a03f700",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 9,
            "page_width": 612,
            "page_height": 792,
            "content": "Figure 2: Example decode algorithm\r\n9",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/01162ddd-c890-4887-9ced-0d199a03f700.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5139f64ee9d5faf5a2b9a3a9d665d514d5ce48733e5bac2f870b02faff188de8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 299
      },
      {
        "segments": [
          {
            "segment_id": "d18f9f70-ef30-4ba6-9479-047abc493507",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 10,
            "page_width": 612,
            "page_height": 792,
            "content": "========================================================\r\nLength of string 1 bit.\r\n( 0 ) ( 1 ) Parity reference b0 Number of Cycles 2 of 1 Element\r\n—————-\r\nLength of string 2 bits.\r\n( 1 3 2 0 ) Parity reference b0 Number of Cycles 1 of 4 Elements\r\n( 1 0 ) ( 3 2 ) Parity reference b1 Number of Cycles 2 of 2 Elements\r\n—————-\r\nLength of string 3 bits.\r\n( 3 6 2 0 ) ( 5 7 4 1 ) Parity reference b0 Number of Cycles 2 of 4 Elements\r\n( 3 6 5 0 ) ( 2 7 4 1 ) Parity reference b1 Number of Cycles 2 of 4 Elements\r\n( 3 1 2 0 ) ( 6 5 7 4 ) Parity reference b2 Number of Cycles 2 of 4 Elements\r\n—————-\r\nLength of string 4 bits.\r\n( 7 12 5 15 8 3 10 0 ) ( 9 13 11 14 6 2 4 1 ) Parity reference b0 Number of Cycles 2 of 8 Elements\r\n( 7 12 5 0 ) ( 6 13 4 1 ) ( 11 14 9 2 ) ( 10 15 8 3 ) Parity reference b1 Number of Cycles 4 of 4 Elements\r\n( 7 12 10 0 ) ( 6 13 11 1 ) ( 4 14 9 2 ) ( 5 15 8 3 ) Parity reference b2 Number of Cycles 4 of 4 Elements\r\n( 7 3 5 0 ) ( 6 2 4 1 ) ( 12 10 15 8 ) ( 13 11 14 9 ) Parity reference b3 Number of Cycles 4 of 4 Elements\r\n—————-\r\nLength of string 5 bits.\r\n( 15 24 11 30 14 6 10 0 ) ( 17 25 21 31 16 7 20 1 ) ( 12 5 23 28 13 27 22 2 ) ( 18 4 9 29 19 26 8 3 )\r\nParity reference b0 Number of Cycles 4 of 8 Elements\r\n( 15 24 11 30 17 6 21 0 ) ( 14 25 10 31 16 7 20 1 ) ( 19 26 23 28 13 4 9 2 ) ( 18 27 22 29 12 5 8 3 )\r\nParity reference b1 Number of Cycles 4 of 8 Elements\r\n( 15 24 11 1 14 25 10 0 ) ( 12 26 8 3 13 27 9 2 ) ( 22 29 19 5 23 28 18 4 ) ( 21 31 16 7 20 30 17 6 )\r\nParity reference b2 Number of Cycles 4 of 8 Elements\r\n( 15 24 20 1 14 25 21 0 ) ( 12 26 23 3 13 27 22 2 ) ( 9 29 19 5 8 28 18 4 ) ( 10 31 16 7 11 30 17 6 )\r\nParity reference b3 Number of Cycles 4 of 8 Elements\r\n( 15 7 11 1 14 6 10 0 ) ( 12 5 8 3 13 4 9 2 ) ( 24 20 30 17 25 21 31 16 ) ( 27 22 29 19 26 23 28 18 )\r\nParity reference b4 Number of Cycles 4 of 8 Elements\r\n—————-\r\nLength of string 6 bits.\r\n( 31 48 23 60 29 51 42 0 ) ( 33 49 41 61 35 50 20 1 ) ( 28 13 43 62 30 14 22 2 ) ( 34 12 21 63 32 15 40 3 )\r\n( 25 53 47 56 27 54 18 4 ) ( 39 52 17 57 37 55 44 5 ) ( 26 8 19 58 24 11 46 6 ) ( 36 9 45 59 38 10 16 7 )\r\nParity reference b0 Number of Cycles 8 of 8 Elements\r\n( 31 48 23 60 29 12 21 0 ) ( 30 49 22 61 28 13 20 1 ) ( 35 50 43 62 33 14 41 2 ) ( 34 51 42 63 32 15 40 3 )\r\n( 25 10 47 56 27 54 45 4 ) ( 24 11 46 57 26 55 44 5 ) ( 37 8 19 58 39 52 17 6 ) ( 36 9 18 59 38 53 16 7 )\r\nParity reference b1 Number of Cycles 8 of 8 Elements\r\n( 31 48 23 60 34 12 42 0 ) ( 30 49 22 61 35 13 43 1 ) ( 28 50 20 62 33 14 41 2 ) ( 29 51 21 63 32 15 40 3 )\r\n( 38 53 47 56 27 9 18 4 ) ( 39 52 46 57 26 8 19 5 ) ( 37 55 44 58 24 11 17 6 ) ( 36 54 45 59 25 10 16 7 )\r\nParity reference b2 Number of Cycles 8 of 8 Elements\r\n( 31 48 23 3 29 51 21 0 ) ( 30 49 22 2 28 50 20 1 ) ( 25 53 16 7 27 54 18 4 ) ( 24 52 17 6 26 55 19 5 )\r\n( 44 58 39 11 46 57 37 8 ) ( 45 59 38 10 47 56 36 9 ) ( 42 63 32 15 40 60 34 12 ) ( 43 62 33 14 41 61 35 13 )\r\nParity reference b3 Number of Cycles 8 of 8 Elements\r\n( 31 48 40 3 29 51 42 0 ) ( 30 49 41 2 28 50 43 1 ) ( 25 53 47 7 27 54 45 4 ) ( 24 52 46 6 26 55 44 5 )\r\n( 19 58 39 11 17 57 37 8 ) ( 18 59 38 10 16 56 36 9 ) ( 21 63 32 15 23 60 34 12 ) ( 20 62 33 14 22 61 35 13 )\r\nParity reference b4 Number of Cycles 8 of 8 Elements\r\n( 31 15 23 3 29 12 21 0 ) ( 30 14 22 2 28 13 20 1 ) ( 25 10 16 7 27 9 18 4 ) ( 24 11 17 6 26 8 19 5 )\r\n( 48 40 60 34 51 42 63 32 ) ( 49 41 61 35 50 43 62 33 ) ( 54 45 59 38 53 47 56 36 ) ( 55 44 58 39 52 46 57 37 )\r\nParity reference b5 Number of Cycles 8 of 8 Elements\r\n—————-\r\nLength of string 7 bits.\r\n( 63 96 47 120 59 102 42 0 ) ( 65 97 81 121 69 103 84 1 ) ( 60 29 83 122 56 27 86 2 ) ( 66 28 45 123 70 26 40 3 )\r\n( 57 101 87 124 61 99 82 4 ) ( 71 100 41 125 67 98 44 5 ) ( 58 24 43 126 62 30 46 6 ) ( 68 25 85 127 64 31 80 7 )\r\n( 51 106 32 15 72 19 90 8 ) ( 77 107 94 14 54 18 36 9 ) ( 48 23 92 13 75 110 38 10 ) ( 78 22 34 12 53 111 88 11 )\r\n( 39 116 49 105 93 115 74 16 ) ( 89 117 79 104 35 114 52 17 ) ( 33 113 73 109 91 118 50 20 ) ( 95 112 55 108 37 119 76 21 )\r\nParity reference b0 Number of Cycles 16 of 8 Elements\r\n( 63 96 47 120 59 102 85 0 ) ( 62 97 46 121 58 103 84 1 ) ( 67 98 83 122 71 100 41 2 ) ( 66 99 82 123 70 101 40 3 )\r\n( 57 26 87 124 61 28 45 4 ) ( 56 27 86 125 60 29 44 5 ) ( 69 24 43 126 65 30 81 6 ) ( 68 25 42 127 64 31 80 7 )\r\n( 51 106 95 112 55 108 37 8 ) ( 50 107 94 113 54 109 36 9 ) ( 79 104 35 114 75 110 89 10 ) ( 78 105 34 115 74 111 88 11 )\r\n( 53 16 39 116 49 22 93 12 ) ( 52 17 38 117 48 23 92 13 ) ( 73 18 91 118 77 20 33 14 ) ( 72 19 90 119 76 21 32 15 )\r\nParity reference b1 Number of Cycles 16 of 8 Elements\r\n( 63 96 47 120 59 25 42 0 ) ( 62 97 46 121 58 24 43 1 ) ( 60 98 44 122 56 27 41 2 ) ( 61 99 45 123 57 26 40 3 )\r\n( 70 101 87 124 66 28 82 4 ) ( 71 100 86 125 67 29 83 5 ) ( 69 103 84 126 65 30 81 6 ) ( 68 102 85 127 64 31 80 7 )\r\n( 51 21 95 112 55 108 90 8 ) ( 50 20 94 113 54 109 91 9 ) ( 48 23 92 114 52 110 89 10 ) ( 49 22 93 115 53 111 88 11 )\r\n( 74 16 39 116 78 105 34 12 ) ( 75 17 38 117 79 104 35 13 ) ( 73 18 36 118 77 107 33 14 ) ( 72 19 37 119 76 106 32 15 )\r\nParity reference b2 Number of Cycles 16 of 8 Elements\r\n( 63 96 47 120 68 25 85 0 ) ( 62 97 46 121 69 24 84 1 ) ( 60 98 44 122 71 27 86 2 ) ( 61 99 45 123 70 26 87 3 )\r\n( 57 101 40 124 66 28 82 4 ) ( 56 100 41 125 67 29 83 5 ) ( 58 103 43 126 65 30 81 6 ) ( 59 102 42 127 64 31 80 7 )\r\n( 76 106 95 112 55 19 37 8 ) ( 77 107 94 113 54 18 36 9 ) ( 79 104 92 114 52 17 38 10 ) ( 78 105 93 115 53 16 39 11 )\r\n( 74 111 88 116 49 22 34 12 ) ( 75 110 89 117 48 23 35 13 ) ( 73 109 91 118 50 20 33 14 ) ( 72 108 90 119 51 21 32 15 )\r\nParity reference b3 Number of Cycles 16 of 8 Elements\r\n( 63 96 47 7 59 102 42 0 ) ( 62 97 46 6 58 103 43 1 ) ( 60 98 44 5 56 100 41 2 ) ( 61 99 45 4 57 101 40 3 )\r\n( 51 106 32 15 55 108 37 8 ) ( 50 107 33 14 54 109 36 9 ) ( 48 104 35 13 52 110 38 10 ) ( 49 105 34 12 53 111 39 11 )\r\n( 88 116 78 22 93 115 74 16 ) ( 89 117 79 23 92 114 75 17 ) ( 91 118 77 20 94 113 73 18 ) ( 90 119 76 21 95 112 72 19 )\r\n( 84 126 65 30 81 121 69 24 ) ( 85 127 64 31 80 120 68 25 ) ( 87 124 66 28 82 123 70 26 ) ( 86 125 67 29 83 122 71 27 )\r\nParity reference b4 Number of Cycles 16 of 8 Elements\r\n( 63 96 80 7 59 102 85 0 ) ( 62 97 81 6 58 103 84 1 ) ( 60 98 83 5 56 100 86 2 ) ( 61 99 82 4 57 101 87 3 )\r\n( 51 106 95 15 55 108 90 8 ) ( 50 107 94 14 54 109 91 9 ) ( 48 104 92 13 52 110 89 10 ) ( 49 105 93 12 53 111 88 11 )\r\n( 39 116 78 22 34 115 74 16 ) ( 38 117 79 23 35 114 75 17 ) ( 36 118 77 20 33 113 73 18 ) ( 37 119 76 21 32 112 72 19 )\r\n( 43 126 65 30 46 121 69 24 ) ( 42 127 64 31 47 120 68 25 ) ( 40 124 66 28 45 123 70 26 ) ( 41 125 67 29 44 122 71 27 )\r\nParity reference b5 Number of Cycles 16 of 8 Elements\r\n( 63 31 47 7 59 25 42 0 ) ( 62 30 46 6 58 24 43 1 ) ( 60 29 44 5 56 27 41 2 ) ( 61 28 45 4 57 26 40 3 )\r\n( 51 21 32 15 55 19 37 8 ) ( 50 20 33 14 54 18 36 9 ) ( 48 23 35 13 52 17 38 10 ) ( 49 22 34 12 53 16 39 11 )\r\n( 96 80 120 68 102 85 127 64 ) ( 97 81 121 69 103 84 126 65 ) ( 99 82 123 70 101 87 124 66 ) ( 98 83 122 71 100 86 125 67 )\r\n( 108 90 119 76 106 95 112 72 ) ( 109 91 118 77 107 94 113 73 ) ( 111 88 116 78 105 93 115 74 ) ( 110 89 117 79 104 92 114 75 )\r\nParity reference b6 Number of Cycles 16 of 8 Elements\r\n—————-\r\n10",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/d18f9f70-ef30-4ba6-9479-047abc493507.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=42dc21c2af7e7ee66957903bbd64b24f37637b1491f01b54d5195552fe8da054",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 2272
      },
      {
        "segments": [
          {
            "segment_id": "d18f9f70-ef30-4ba6-9479-047abc493507",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 10,
            "page_width": 612,
            "page_height": 792,
            "content": "========================================================\r\nLength of string 1 bit.\r\n( 0 ) ( 1 ) Parity reference b0 Number of Cycles 2 of 1 Element\r\n—————-\r\nLength of string 2 bits.\r\n( 1 3 2 0 ) Parity reference b0 Number of Cycles 1 of 4 Elements\r\n( 1 0 ) ( 3 2 ) Parity reference b1 Number of Cycles 2 of 2 Elements\r\n—————-\r\nLength of string 3 bits.\r\n( 3 6 2 0 ) ( 5 7 4 1 ) Parity reference b0 Number of Cycles 2 of 4 Elements\r\n( 3 6 5 0 ) ( 2 7 4 1 ) Parity reference b1 Number of Cycles 2 of 4 Elements\r\n( 3 1 2 0 ) ( 6 5 7 4 ) Parity reference b2 Number of Cycles 2 of 4 Elements\r\n—————-\r\nLength of string 4 bits.\r\n( 7 12 5 15 8 3 10 0 ) ( 9 13 11 14 6 2 4 1 ) Parity reference b0 Number of Cycles 2 of 8 Elements\r\n( 7 12 5 0 ) ( 6 13 4 1 ) ( 11 14 9 2 ) ( 10 15 8 3 ) Parity reference b1 Number of Cycles 4 of 4 Elements\r\n( 7 12 10 0 ) ( 6 13 11 1 ) ( 4 14 9 2 ) ( 5 15 8 3 ) Parity reference b2 Number of Cycles 4 of 4 Elements\r\n( 7 3 5 0 ) ( 6 2 4 1 ) ( 12 10 15 8 ) ( 13 11 14 9 ) Parity reference b3 Number of Cycles 4 of 4 Elements\r\n—————-\r\nLength of string 5 bits.\r\n( 15 24 11 30 14 6 10 0 ) ( 17 25 21 31 16 7 20 1 ) ( 12 5 23 28 13 27 22 2 ) ( 18 4 9 29 19 26 8 3 )\r\nParity reference b0 Number of Cycles 4 of 8 Elements\r\n( 15 24 11 30 17 6 21 0 ) ( 14 25 10 31 16 7 20 1 ) ( 19 26 23 28 13 4 9 2 ) ( 18 27 22 29 12 5 8 3 )\r\nParity reference b1 Number of Cycles 4 of 8 Elements\r\n( 15 24 11 1 14 25 10 0 ) ( 12 26 8 3 13 27 9 2 ) ( 22 29 19 5 23 28 18 4 ) ( 21 31 16 7 20 30 17 6 )\r\nParity reference b2 Number of Cycles 4 of 8 Elements\r\n( 15 24 20 1 14 25 21 0 ) ( 12 26 23 3 13 27 22 2 ) ( 9 29 19 5 8 28 18 4 ) ( 10 31 16 7 11 30 17 6 )\r\nParity reference b3 Number of Cycles 4 of 8 Elements\r\n( 15 7 11 1 14 6 10 0 ) ( 12 5 8 3 13 4 9 2 ) ( 24 20 30 17 25 21 31 16 ) ( 27 22 29 19 26 23 28 18 )\r\nParity reference b4 Number of Cycles 4 of 8 Elements\r\n—————-\r\nLength of string 6 bits.\r\n( 31 48 23 60 29 51 42 0 ) ( 33 49 41 61 35 50 20 1 ) ( 28 13 43 62 30 14 22 2 ) ( 34 12 21 63 32 15 40 3 )\r\n( 25 53 47 56 27 54 18 4 ) ( 39 52 17 57 37 55 44 5 ) ( 26 8 19 58 24 11 46 6 ) ( 36 9 45 59 38 10 16 7 )\r\nParity reference b0 Number of Cycles 8 of 8 Elements\r\n( 31 48 23 60 29 12 21 0 ) ( 30 49 22 61 28 13 20 1 ) ( 35 50 43 62 33 14 41 2 ) ( 34 51 42 63 32 15 40 3 )\r\n( 25 10 47 56 27 54 45 4 ) ( 24 11 46 57 26 55 44 5 ) ( 37 8 19 58 39 52 17 6 ) ( 36 9 18 59 38 53 16 7 )\r\nParity reference b1 Number of Cycles 8 of 8 Elements\r\n( 31 48 23 60 34 12 42 0 ) ( 30 49 22 61 35 13 43 1 ) ( 28 50 20 62 33 14 41 2 ) ( 29 51 21 63 32 15 40 3 )\r\n( 38 53 47 56 27 9 18 4 ) ( 39 52 46 57 26 8 19 5 ) ( 37 55 44 58 24 11 17 6 ) ( 36 54 45 59 25 10 16 7 )\r\nParity reference b2 Number of Cycles 8 of 8 Elements\r\n( 31 48 23 3 29 51 21 0 ) ( 30 49 22 2 28 50 20 1 ) ( 25 53 16 7 27 54 18 4 ) ( 24 52 17 6 26 55 19 5 )\r\n( 44 58 39 11 46 57 37 8 ) ( 45 59 38 10 47 56 36 9 ) ( 42 63 32 15 40 60 34 12 ) ( 43 62 33 14 41 61 35 13 )\r\nParity reference b3 Number of Cycles 8 of 8 Elements\r\n( 31 48 40 3 29 51 42 0 ) ( 30 49 41 2 28 50 43 1 ) ( 25 53 47 7 27 54 45 4 ) ( 24 52 46 6 26 55 44 5 )\r\n( 19 58 39 11 17 57 37 8 ) ( 18 59 38 10 16 56 36 9 ) ( 21 63 32 15 23 60 34 12 ) ( 20 62 33 14 22 61 35 13 )\r\nParity reference b4 Number of Cycles 8 of 8 Elements\r\n( 31 15 23 3 29 12 21 0 ) ( 30 14 22 2 28 13 20 1 ) ( 25 10 16 7 27 9 18 4 ) ( 24 11 17 6 26 8 19 5 )\r\n( 48 40 60 34 51 42 63 32 ) ( 49 41 61 35 50 43 62 33 ) ( 54 45 59 38 53 47 56 36 ) ( 55 44 58 39 52 46 57 37 )\r\nParity reference b5 Number of Cycles 8 of 8 Elements\r\n—————-\r\nLength of string 7 bits.\r\n( 63 96 47 120 59 102 42 0 ) ( 65 97 81 121 69 103 84 1 ) ( 60 29 83 122 56 27 86 2 ) ( 66 28 45 123 70 26 40 3 )\r\n( 57 101 87 124 61 99 82 4 ) ( 71 100 41 125 67 98 44 5 ) ( 58 24 43 126 62 30 46 6 ) ( 68 25 85 127 64 31 80 7 )\r\n( 51 106 32 15 72 19 90 8 ) ( 77 107 94 14 54 18 36 9 ) ( 48 23 92 13 75 110 38 10 ) ( 78 22 34 12 53 111 88 11 )\r\n( 39 116 49 105 93 115 74 16 ) ( 89 117 79 104 35 114 52 17 ) ( 33 113 73 109 91 118 50 20 ) ( 95 112 55 108 37 119 76 21 )\r\nParity reference b0 Number of Cycles 16 of 8 Elements\r\n( 63 96 47 120 59 102 85 0 ) ( 62 97 46 121 58 103 84 1 ) ( 67 98 83 122 71 100 41 2 ) ( 66 99 82 123 70 101 40 3 )\r\n( 57 26 87 124 61 28 45 4 ) ( 56 27 86 125 60 29 44 5 ) ( 69 24 43 126 65 30 81 6 ) ( 68 25 42 127 64 31 80 7 )\r\n( 51 106 95 112 55 108 37 8 ) ( 50 107 94 113 54 109 36 9 ) ( 79 104 35 114 75 110 89 10 ) ( 78 105 34 115 74 111 88 11 )\r\n( 53 16 39 116 49 22 93 12 ) ( 52 17 38 117 48 23 92 13 ) ( 73 18 91 118 77 20 33 14 ) ( 72 19 90 119 76 21 32 15 )\r\nParity reference b1 Number of Cycles 16 of 8 Elements\r\n( 63 96 47 120 59 25 42 0 ) ( 62 97 46 121 58 24 43 1 ) ( 60 98 44 122 56 27 41 2 ) ( 61 99 45 123 57 26 40 3 )\r\n( 70 101 87 124 66 28 82 4 ) ( 71 100 86 125 67 29 83 5 ) ( 69 103 84 126 65 30 81 6 ) ( 68 102 85 127 64 31 80 7 )\r\n( 51 21 95 112 55 108 90 8 ) ( 50 20 94 113 54 109 91 9 ) ( 48 23 92 114 52 110 89 10 ) ( 49 22 93 115 53 111 88 11 )\r\n( 74 16 39 116 78 105 34 12 ) ( 75 17 38 117 79 104 35 13 ) ( 73 18 36 118 77 107 33 14 ) ( 72 19 37 119 76 106 32 15 )\r\nParity reference b2 Number of Cycles 16 of 8 Elements\r\n( 63 96 47 120 68 25 85 0 ) ( 62 97 46 121 69 24 84 1 ) ( 60 98 44 122 71 27 86 2 ) ( 61 99 45 123 70 26 87 3 )\r\n( 57 101 40 124 66 28 82 4 ) ( 56 100 41 125 67 29 83 5 ) ( 58 103 43 126 65 30 81 6 ) ( 59 102 42 127 64 31 80 7 )\r\n( 76 106 95 112 55 19 37 8 ) ( 77 107 94 113 54 18 36 9 ) ( 79 104 92 114 52 17 38 10 ) ( 78 105 93 115 53 16 39 11 )\r\n( 74 111 88 116 49 22 34 12 ) ( 75 110 89 117 48 23 35 13 ) ( 73 109 91 118 50 20 33 14 ) ( 72 108 90 119 51 21 32 15 )\r\nParity reference b3 Number of Cycles 16 of 8 Elements\r\n( 63 96 47 7 59 102 42 0 ) ( 62 97 46 6 58 103 43 1 ) ( 60 98 44 5 56 100 41 2 ) ( 61 99 45 4 57 101 40 3 )\r\n( 51 106 32 15 55 108 37 8 ) ( 50 107 33 14 54 109 36 9 ) ( 48 104 35 13 52 110 38 10 ) ( 49 105 34 12 53 111 39 11 )\r\n( 88 116 78 22 93 115 74 16 ) ( 89 117 79 23 92 114 75 17 ) ( 91 118 77 20 94 113 73 18 ) ( 90 119 76 21 95 112 72 19 )\r\n( 84 126 65 30 81 121 69 24 ) ( 85 127 64 31 80 120 68 25 ) ( 87 124 66 28 82 123 70 26 ) ( 86 125 67 29 83 122 71 27 )\r\nParity reference b4 Number of Cycles 16 of 8 Elements\r\n( 63 96 80 7 59 102 85 0 ) ( 62 97 81 6 58 103 84 1 ) ( 60 98 83 5 56 100 86 2 ) ( 61 99 82 4 57 101 87 3 )\r\n( 51 106 95 15 55 108 90 8 ) ( 50 107 94 14 54 109 91 9 ) ( 48 104 92 13 52 110 89 10 ) ( 49 105 93 12 53 111 88 11 )\r\n( 39 116 78 22 34 115 74 16 ) ( 38 117 79 23 35 114 75 17 ) ( 36 118 77 20 33 113 73 18 ) ( 37 119 76 21 32 112 72 19 )\r\n( 43 126 65 30 46 121 69 24 ) ( 42 127 64 31 47 120 68 25 ) ( 40 124 66 28 45 123 70 26 ) ( 41 125 67 29 44 122 71 27 )\r\nParity reference b5 Number of Cycles 16 of 8 Elements\r\n( 63 31 47 7 59 25 42 0 ) ( 62 30 46 6 58 24 43 1 ) ( 60 29 44 5 56 27 41 2 ) ( 61 28 45 4 57 26 40 3 )\r\n( 51 21 32 15 55 19 37 8 ) ( 50 20 33 14 54 18 36 9 ) ( 48 23 35 13 52 17 38 10 ) ( 49 22 34 12 53 16 39 11 )\r\n( 96 80 120 68 102 85 127 64 ) ( 97 81 121 69 103 84 126 65 ) ( 99 82 123 70 101 87 124 66 ) ( 98 83 122 71 100 86 125 67 )\r\n( 108 90 119 76 106 95 112 72 ) ( 109 91 118 77 107 94 113 73 ) ( 111 88 116 78 105 93 115 74 ) ( 110 89 117 79 104 92 114 75 )\r\nParity reference b6 Number of Cycles 16 of 8 Elements\r\n—————-\r\n10",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/d18f9f70-ef30-4ba6-9479-047abc493507.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=42dc21c2af7e7ee66957903bbd64b24f37637b1491f01b54d5195552fe8da054",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 2272
      },
      {
        "segments": [
          {
            "segment_id": "a6b63f77-d6ee-4590-a440-007fd9ce65af",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 11,
            "page_width": 612,
            "page_height": 792,
            "content": "Length of string 8 bits.\r\n( 127 192 95 240 119 204 85 255 128 63 160 15 136 51 170 0 ) ( 129 193 161 241 137 205 171 254 126 62 94 14 118 50 84 1 )\r\n( 124 61 163 242 116 49 169 253 131 194 92 13 139 206 86 2 ) ( 130 60 93 243 138 48 87 252 125 195 162 12 117 207 168 3 )\r\n( 121 197 167 244 113 201 173 251 134 58 88 11 142 54 82 4 ) ( 135 196 89 245 143 200 83 250 120 59 166 10 112 55 172 5 )\r\n( 122 56 91 246 114 52 81 249 133 199 164 9 141 203 174 6 ) ( 132 57 165 247 140 53 175 248 123 198 90 8 115 202 80 7 )\r\n( 103 212 65 225 145 217 181 239 152 43 190 30 110 38 74 16 ) ( 153 213 191 224 111 216 75 238 102 42 64 31 144 39 180 17 )\r\n( 100 41 189 227 146 36 73 237 155 214 66 28 109 219 182 18 ) ( 154 40 67 226 108 37 183 236 101 215 188 29 147 218 72 19 )\r\n( 97 209 185 229 151 220 77 235 158 46 70 26 104 35 178 20 ) ( 159 208 71 228 105 221 179 234 96 47 184 27 150 34 76 21 )\r\n( 98 44 69 231 148 33 177 233 157 211 186 24 107 222 78 22 ) ( 156 45 187 230 106 32 79 232 99 210 68 25 149 223 176 23 )\r\nParity reference b0 Number of Cycles 16 of 16 Elements\r\n( 127 192 95 240 119 204 85 0 ) ( 126 193 94 241 118 205 84 1 ) ( 131 194 163 242 139 206 169 2 ) ( 130 195 162 243 138 207 168 3 )\r\n( 121 58 167 244 113 54 173 4 ) ( 120 59 166 245 112 55 172 5 ) ( 133 56 91 246 141 52 81 6 ) ( 132 57 90 247 140 53 80 7 )\r\n( 115 202 175 248 123 198 165 8 ) ( 114 203 174 249 122 199 164 9 ) ( 143 200 83 250 135 196 89 10 ) ( 142 201 82 251 134 197 88 11 )\r\n( 117 48 87 252 125 60 93 12 ) ( 116 49 86 253 124 61 92 13 ) ( 137 50 171 254 129 62 161 14 ) ( 136 51 170 255 128 63 160 15 )\r\n( 103 212 65 30 145 38 181 16 ) ( 102 213 64 31 144 39 180 17 ) ( 155 214 189 28 109 36 73 18 ) ( 154 215 188 29 108 37 72 19 )\r\n( 97 46 185 26 151 220 77 20 ) ( 96 47 184 27 150 221 76 21 ) ( 157 44 69 24 107 222 177 22 ) ( 156 45 68 25 106 223 176 23 )\r\n( 79 232 99 210 187 230 149 32 ) ( 78 233 98 211 186 231 148 33 ) ( 179 234 159 208 71 228 105 34 ) ( 178 235 158 209 70 229 104 35 )\r\n( 67 226 147 218 183 236 101 40 ) ( 66 227 146 219 182 237 100 41 ) ( 191 224 111 216 75 238 153 42 ) ( 190 225 110 217 74 239 152 43 )\r\nParity reference b1 Number of Cycles 32 of 8 Elements\r\n( 127 192 95 240 119 204 170 0 ) ( 126 193 94 241 118 205 171 1 ) ( 124 194 92 242 116 206 169 2 ) ( 125 195 93 243 117 207 168 3 )\r\n( 134 197 167 244 142 201 82 4 ) ( 135 196 166 245 143 200 83 5 ) ( 133 199 164 246 141 203 81 6 ) ( 132 198 165 247 140 202 80 7 )\r\n( 115 53 175 248 123 57 90 8 ) ( 114 52 174 249 122 56 91 9 ) ( 112 55 172 250 120 59 89 10 ) ( 113 54 173 251 121 58 88 11 )\r\n( 138 48 87 252 130 60 162 12 ) ( 139 49 86 253 131 61 163 13 ) ( 137 50 84 254 129 62 161 14 ) ( 136 51 85 255 128 63 160 15 )\r\n( 103 212 190 225 110 217 74 16 ) ( 102 213 191 224 111 216 75 17 ) ( 100 214 189 227 109 219 73 18 ) ( 101 215 188 226 108 218 72 19 )\r\n( 158 209 70 229 151 220 178 20 ) ( 159 208 71 228 150 221 179 21 ) ( 157 211 69 231 148 222 177 22 ) ( 156 210 68 230 149 223 176 23 )\r\n( 107 33 78 233 98 44 186 24 ) ( 106 32 79 232 99 45 187 25 ) ( 104 35 77 235 97 46 185 26 ) ( 105 34 76 234 96 47 184 27 )\r\n( 146 36 182 237 155 41 66 28 ) ( 147 37 183 236 154 40 67 29 ) ( 145 38 181 239 152 43 65 30 ) ( 144 39 180 238 153 42 64 31 )\r\nParity reference b2 Number of Cycles 32 of 8 Elements\r\n( 127 192 95 240 119 51 85 0 ) ( 126 193 94 241 118 50 84 1 ) ( 124 194 92 242 116 49 86 2 ) ( 125 195 93 243 117 48 87 3 )\r\n( 121 197 88 244 113 54 82 4 ) ( 120 196 89 245 112 55 83 5 ) ( 122 199 91 246 114 52 81 6 ) ( 123 198 90 247 115 53 80 7 )\r\n( 140 202 175 248 132 57 165 8 ) ( 141 203 174 249 133 56 164 9 ) ( 143 200 172 250 135 59 166 10 ) ( 142 201 173 251 134 58 167 11 )\r\n( 138 207 168 252 130 60 162 12 ) ( 139 206 169 253 131 61 163 13 ) ( 137 205 171 254 129 62 161 14 ) ( 136 204 170 255 128 63 160 15 )\r\n( 103 43 190 225 110 217 181 16 ) ( 102 42 191 224 111 216 180 17 ) ( 100 41 189 227 109 219 182 18 ) ( 101 40 188 226 108 218 183 19 )\r\n( 97 46 185 229 104 220 178 20 ) ( 96 47 184 228 105 221 179 21 ) ( 98 44 186 231 107 222 177 22 ) ( 99 45 187 230 106 223 176 23 )\r\n( 148 33 78 233 157 211 69 24 ) ( 149 32 79 232 156 210 68 25 ) ( 151 35 77 235 158 209 70 26 ) ( 150 34 76 234 159 208 71 27 )\r\n( 146 36 73 237 155 214 66 28 ) ( 147 37 72 236 154 215 67 29 ) ( 145 38 74 239 152 212 65 30 ) ( 144 39 75 238 153 213 64 31 )\r\nParity reference b3 Number of Cycles 32 of 8 Elements\r\n( 127 192 95 240 136 51 170 0 ) ( 126 193 94 241 137 50 171 1 ) ( 124 194 92 242 139 49 169 2 ) ( 125 195 93 243 138 48 168 3 )\r\n( 121 197 88 244 142 54 173 4 ) ( 120 196 89 245 143 55 172 5 ) ( 122 199 91 246 141 52 174 6 ) ( 123 198 90 247 140 53 175 7 )\r\n( 115 202 80 248 132 57 165 8 ) ( 114 203 81 249 133 56 164 9 ) ( 112 200 83 250 135 59 166 10 ) ( 113 201 82 251 134 58 167 11 )\r\n( 117 207 87 252 130 60 162 12 ) ( 116 206 86 253 131 61 163 13 ) ( 118 205 84 254 129 62 161 14 ) ( 119 204 85 255 128 63 160 15 )\r\n( 152 212 190 225 110 38 74 16 ) ( 153 213 191 224 111 39 75 17 ) ( 155 214 189 227 109 36 73 18 ) ( 154 215 188 226 108 37 72 19 )\r\n( 158 209 185 229 104 35 77 20 ) ( 159 208 184 228 105 34 76 21 ) ( 157 211 186 231 107 33 78 22 ) ( 156 210 187 230 106 32 79 23 )\r\n( 148 222 177 233 98 44 69 24 ) ( 149 223 176 232 99 45 68 25 ) ( 151 220 178 235 97 46 70 26 ) ( 150 221 179 234 96 47 71 27 )\r\n( 146 219 182 237 100 41 66 28 ) ( 147 218 183 236 101 40 67 29 ) ( 145 217 181 239 103 43 65 30 ) ( 144 216 180 238 102 42 64 31 )\r\nParity reference b4 Number of Cycles 32 of 8 Elements\r\n( 127 192 95 15 119 204 85 0 ) ( 126 193 94 14 118 205 84 1 ) ( 124 194 92 13 116 206 86 2 ) ( 125 195 93 12 117 207 87 3 )\r\n( 121 197 88 11 113 201 82 4 ) ( 120 196 89 10 112 200 83 5 ) ( 122 199 91 9 114 203 81 6 ) ( 123 198 90 8 115 202 80 7 )\r\n( 103 212 65 30 110 217 74 16 ) ( 102 213 64 31 111 216 75 17 ) ( 100 214 66 28 109 219 73 18 ) ( 101 215 67 29 108 218 72 19 )\r\n( 97 209 70 26 104 220 77 20 ) ( 96 208 71 27 105 221 76 21 ) ( 98 211 69 24 107 222 78 22 ) ( 99 210 68 25 106 223 79 23 )\r\n( 176 232 156 45 187 230 149 32 ) ( 177 233 157 44 186 231 148 33 ) ( 179 234 159 47 184 228 150 34 ) ( 178 235 158 46 185 229 151 35 )\r\n( 182 237 155 41 189 227 146 36 ) ( 183 236 154 40 188 226 147 37 ) ( 181 239 152 43 190 225 145 38 ) ( 180 238 153 42 191 224 144 39 )\r\n( 168 252 130 60 162 243 138 48 ) ( 169 253 131 61 163 242 139 49 ) ( 171 254 129 62 161 241 137 50 ) ( 170 255 128 63 160 240 136 51 )\r\n( 174 249 133 56 164 246 141 52 ) ( 175 248 132 57 165 247 140 53 ) ( 173 251 134 58 167 244 142 54 ) ( 172 250 135 59 166 245 143 55 )\r\nParity reference b5 Number of Cycles 32 of 8 Elements\r\n( 127 192 160 15 119 204 170 0 ) ( 126 193 161 14 118 205 171 1 ) ( 124 194 163 13 116 206 169 2 ) ( 125 195 162 12 117 207 168 3 )\r\n( 121 197 167 11 113 201 173 4 ) ( 120 196 166 10 112 200 172 5 ) ( 122 199 164 9 114 203 174 6 ) ( 123 198 165 8 115 202 175 7 )\r\n( 103 212 190 30 110 217 181 16 ) ( 102 213 191 31 111 216 180 17 ) ( 100 214 189 28 109 219 182 18 ) ( 101 215 188 29 108 218 183 19 )\r\n( 97 209 185 26 104 220 178 20 ) ( 96 208 184 27 105 221 179 21 ) ( 98 211 186 24 107 222 177 22 ) ( 99 210 187 25 106 223 176 23 )\r\n( 79 232 156 45 68 230 149 32 ) ( 78 233 157 44 69 231 148 33 ) ( 76 234 159 47 71 228 150 34 ) ( 77 235 158 46 70 229 151 35 )\r\n( 73 237 155 41 66 227 146 36 ) ( 72 236 154 40 67 226 147 37 ) ( 74 239 152 43 65 225 145 38 ) ( 75 238 153 42 64 224 144 39 )\r\n( 87 252 130 60 93 243 138 48 ) ( 86 253 131 61 92 242 139 49 ) ( 84 254 129 62 94 241 137 50 ) ( 85 255 128 63 95 240 136 51 )\r\n( 81 249 133 56 91 246 141 52 ) ( 80 248 132 57 90 247 140 53 ) ( 82 251 134 58 88 244 142 54 ) ( 83 250 135 59 89 245 143 55 )\r\nParity reference b6 Number of Cycles 32 of 8 Elements\r\n( 127 63 95 15 119 51 85 0 ) ( 126 62 94 14 118 50 84 1 ) ( 124 61 92 13 116 49 86 2 ) ( 125 60 93 12 117 48 87 3 )\r\n( 121 58 88 11 113 54 82 4 ) ( 120 59 89 10 112 55 83 5 ) ( 122 56 91 9 114 52 81 6 ) ( 123 57 90 8 115 53 80 7 )\r\n( 103 43 65 30 110 38 74 16 ) ( 102 42 64 31 111 39 75 17 ) ( 100 41 66 28 109 36 73 18 ) ( 101 40 67 29 108 37 72 19 )\r\n( 97 46 70 26 104 35 77 20 ) ( 96 47 71 27 105 34 76 21 ) ( 98 44 69 24 107 33 78 22 ) ( 99 45 68 25 106 32 79 23 )\r\n( 192 160 240 136 204 170 255 128 ) ( 193 161 241 137 205 171 254 129 ) ( 195 162 243 138 207 168 252 130 ) ( 194 163 242 139 206 169 253 131 )\r\n( 198 165 247 140 202 175 248 132 ) ( 199 164 246 141 203 174 249 133 ) ( 197 167 244 142 201 173 251 134 ) ( 196 166 245 143 200 172 250 135 )\r\n( 216 180 238 153 213 191 224 144 ) ( 217 181 239 152 212 190 225 145 ) ( 219 182 237 155 214 189 227 146 ) ( 218 183 236 154 215 188 226 147 )\r\n( 222 177 233 157 211 186 231 148 ) ( 223 176 232 156 210 187 230 149 ) ( 221 179 234 159 208 184 228 150 ) ( 220 178 235 158 209 185 229 151 )\r\nParity reference b7 Number of Cycles 32 of 8 Elements\r\n========================================================\r\nTable 1:\r\nElements and cycles for string lengths one through eight bits in the encode direction.\r\n11",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/a6b63f77-d6ee-4590-a440-007fd9ce65af.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=47e4ab4681bc4d973e14b3f2f5db90ba1e7d1a59d3f5892ee4262e74b4953363",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 2631
      },
      {
        "segments": [
          {
            "segment_id": "a6b63f77-d6ee-4590-a440-007fd9ce65af",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 11,
            "page_width": 612,
            "page_height": 792,
            "content": "Length of string 8 bits.\r\n( 127 192 95 240 119 204 85 255 128 63 160 15 136 51 170 0 ) ( 129 193 161 241 137 205 171 254 126 62 94 14 118 50 84 1 )\r\n( 124 61 163 242 116 49 169 253 131 194 92 13 139 206 86 2 ) ( 130 60 93 243 138 48 87 252 125 195 162 12 117 207 168 3 )\r\n( 121 197 167 244 113 201 173 251 134 58 88 11 142 54 82 4 ) ( 135 196 89 245 143 200 83 250 120 59 166 10 112 55 172 5 )\r\n( 122 56 91 246 114 52 81 249 133 199 164 9 141 203 174 6 ) ( 132 57 165 247 140 53 175 248 123 198 90 8 115 202 80 7 )\r\n( 103 212 65 225 145 217 181 239 152 43 190 30 110 38 74 16 ) ( 153 213 191 224 111 216 75 238 102 42 64 31 144 39 180 17 )\r\n( 100 41 189 227 146 36 73 237 155 214 66 28 109 219 182 18 ) ( 154 40 67 226 108 37 183 236 101 215 188 29 147 218 72 19 )\r\n( 97 209 185 229 151 220 77 235 158 46 70 26 104 35 178 20 ) ( 159 208 71 228 105 221 179 234 96 47 184 27 150 34 76 21 )\r\n( 98 44 69 231 148 33 177 233 157 211 186 24 107 222 78 22 ) ( 156 45 187 230 106 32 79 232 99 210 68 25 149 223 176 23 )\r\nParity reference b0 Number of Cycles 16 of 16 Elements\r\n( 127 192 95 240 119 204 85 0 ) ( 126 193 94 241 118 205 84 1 ) ( 131 194 163 242 139 206 169 2 ) ( 130 195 162 243 138 207 168 3 )\r\n( 121 58 167 244 113 54 173 4 ) ( 120 59 166 245 112 55 172 5 ) ( 133 56 91 246 141 52 81 6 ) ( 132 57 90 247 140 53 80 7 )\r\n( 115 202 175 248 123 198 165 8 ) ( 114 203 174 249 122 199 164 9 ) ( 143 200 83 250 135 196 89 10 ) ( 142 201 82 251 134 197 88 11 )\r\n( 117 48 87 252 125 60 93 12 ) ( 116 49 86 253 124 61 92 13 ) ( 137 50 171 254 129 62 161 14 ) ( 136 51 170 255 128 63 160 15 )\r\n( 103 212 65 30 145 38 181 16 ) ( 102 213 64 31 144 39 180 17 ) ( 155 214 189 28 109 36 73 18 ) ( 154 215 188 29 108 37 72 19 )\r\n( 97 46 185 26 151 220 77 20 ) ( 96 47 184 27 150 221 76 21 ) ( 157 44 69 24 107 222 177 22 ) ( 156 45 68 25 106 223 176 23 )\r\n( 79 232 99 210 187 230 149 32 ) ( 78 233 98 211 186 231 148 33 ) ( 179 234 159 208 71 228 105 34 ) ( 178 235 158 209 70 229 104 35 )\r\n( 67 226 147 218 183 236 101 40 ) ( 66 227 146 219 182 237 100 41 ) ( 191 224 111 216 75 238 153 42 ) ( 190 225 110 217 74 239 152 43 )\r\nParity reference b1 Number of Cycles 32 of 8 Elements\r\n( 127 192 95 240 119 204 170 0 ) ( 126 193 94 241 118 205 171 1 ) ( 124 194 92 242 116 206 169 2 ) ( 125 195 93 243 117 207 168 3 )\r\n( 134 197 167 244 142 201 82 4 ) ( 135 196 166 245 143 200 83 5 ) ( 133 199 164 246 141 203 81 6 ) ( 132 198 165 247 140 202 80 7 )\r\n( 115 53 175 248 123 57 90 8 ) ( 114 52 174 249 122 56 91 9 ) ( 112 55 172 250 120 59 89 10 ) ( 113 54 173 251 121 58 88 11 )\r\n( 138 48 87 252 130 60 162 12 ) ( 139 49 86 253 131 61 163 13 ) ( 137 50 84 254 129 62 161 14 ) ( 136 51 85 255 128 63 160 15 )\r\n( 103 212 190 225 110 217 74 16 ) ( 102 213 191 224 111 216 75 17 ) ( 100 214 189 227 109 219 73 18 ) ( 101 215 188 226 108 218 72 19 )\r\n( 158 209 70 229 151 220 178 20 ) ( 159 208 71 228 150 221 179 21 ) ( 157 211 69 231 148 222 177 22 ) ( 156 210 68 230 149 223 176 23 )\r\n( 107 33 78 233 98 44 186 24 ) ( 106 32 79 232 99 45 187 25 ) ( 104 35 77 235 97 46 185 26 ) ( 105 34 76 234 96 47 184 27 )\r\n( 146 36 182 237 155 41 66 28 ) ( 147 37 183 236 154 40 67 29 ) ( 145 38 181 239 152 43 65 30 ) ( 144 39 180 238 153 42 64 31 )\r\nParity reference b2 Number of Cycles 32 of 8 Elements\r\n( 127 192 95 240 119 51 85 0 ) ( 126 193 94 241 118 50 84 1 ) ( 124 194 92 242 116 49 86 2 ) ( 125 195 93 243 117 48 87 3 )\r\n( 121 197 88 244 113 54 82 4 ) ( 120 196 89 245 112 55 83 5 ) ( 122 199 91 246 114 52 81 6 ) ( 123 198 90 247 115 53 80 7 )\r\n( 140 202 175 248 132 57 165 8 ) ( 141 203 174 249 133 56 164 9 ) ( 143 200 172 250 135 59 166 10 ) ( 142 201 173 251 134 58 167 11 )\r\n( 138 207 168 252 130 60 162 12 ) ( 139 206 169 253 131 61 163 13 ) ( 137 205 171 254 129 62 161 14 ) ( 136 204 170 255 128 63 160 15 )\r\n( 103 43 190 225 110 217 181 16 ) ( 102 42 191 224 111 216 180 17 ) ( 100 41 189 227 109 219 182 18 ) ( 101 40 188 226 108 218 183 19 )\r\n( 97 46 185 229 104 220 178 20 ) ( 96 47 184 228 105 221 179 21 ) ( 98 44 186 231 107 222 177 22 ) ( 99 45 187 230 106 223 176 23 )\r\n( 148 33 78 233 157 211 69 24 ) ( 149 32 79 232 156 210 68 25 ) ( 151 35 77 235 158 209 70 26 ) ( 150 34 76 234 159 208 71 27 )\r\n( 146 36 73 237 155 214 66 28 ) ( 147 37 72 236 154 215 67 29 ) ( 145 38 74 239 152 212 65 30 ) ( 144 39 75 238 153 213 64 31 )\r\nParity reference b3 Number of Cycles 32 of 8 Elements\r\n( 127 192 95 240 136 51 170 0 ) ( 126 193 94 241 137 50 171 1 ) ( 124 194 92 242 139 49 169 2 ) ( 125 195 93 243 138 48 168 3 )\r\n( 121 197 88 244 142 54 173 4 ) ( 120 196 89 245 143 55 172 5 ) ( 122 199 91 246 141 52 174 6 ) ( 123 198 90 247 140 53 175 7 )\r\n( 115 202 80 248 132 57 165 8 ) ( 114 203 81 249 133 56 164 9 ) ( 112 200 83 250 135 59 166 10 ) ( 113 201 82 251 134 58 167 11 )\r\n( 117 207 87 252 130 60 162 12 ) ( 116 206 86 253 131 61 163 13 ) ( 118 205 84 254 129 62 161 14 ) ( 119 204 85 255 128 63 160 15 )\r\n( 152 212 190 225 110 38 74 16 ) ( 153 213 191 224 111 39 75 17 ) ( 155 214 189 227 109 36 73 18 ) ( 154 215 188 226 108 37 72 19 )\r\n( 158 209 185 229 104 35 77 20 ) ( 159 208 184 228 105 34 76 21 ) ( 157 211 186 231 107 33 78 22 ) ( 156 210 187 230 106 32 79 23 )\r\n( 148 222 177 233 98 44 69 24 ) ( 149 223 176 232 99 45 68 25 ) ( 151 220 178 235 97 46 70 26 ) ( 150 221 179 234 96 47 71 27 )\r\n( 146 219 182 237 100 41 66 28 ) ( 147 218 183 236 101 40 67 29 ) ( 145 217 181 239 103 43 65 30 ) ( 144 216 180 238 102 42 64 31 )\r\nParity reference b4 Number of Cycles 32 of 8 Elements\r\n( 127 192 95 15 119 204 85 0 ) ( 126 193 94 14 118 205 84 1 ) ( 124 194 92 13 116 206 86 2 ) ( 125 195 93 12 117 207 87 3 )\r\n( 121 197 88 11 113 201 82 4 ) ( 120 196 89 10 112 200 83 5 ) ( 122 199 91 9 114 203 81 6 ) ( 123 198 90 8 115 202 80 7 )\r\n( 103 212 65 30 110 217 74 16 ) ( 102 213 64 31 111 216 75 17 ) ( 100 214 66 28 109 219 73 18 ) ( 101 215 67 29 108 218 72 19 )\r\n( 97 209 70 26 104 220 77 20 ) ( 96 208 71 27 105 221 76 21 ) ( 98 211 69 24 107 222 78 22 ) ( 99 210 68 25 106 223 79 23 )\r\n( 176 232 156 45 187 230 149 32 ) ( 177 233 157 44 186 231 148 33 ) ( 179 234 159 47 184 228 150 34 ) ( 178 235 158 46 185 229 151 35 )\r\n( 182 237 155 41 189 227 146 36 ) ( 183 236 154 40 188 226 147 37 ) ( 181 239 152 43 190 225 145 38 ) ( 180 238 153 42 191 224 144 39 )\r\n( 168 252 130 60 162 243 138 48 ) ( 169 253 131 61 163 242 139 49 ) ( 171 254 129 62 161 241 137 50 ) ( 170 255 128 63 160 240 136 51 )\r\n( 174 249 133 56 164 246 141 52 ) ( 175 248 132 57 165 247 140 53 ) ( 173 251 134 58 167 244 142 54 ) ( 172 250 135 59 166 245 143 55 )\r\nParity reference b5 Number of Cycles 32 of 8 Elements\r\n( 127 192 160 15 119 204 170 0 ) ( 126 193 161 14 118 205 171 1 ) ( 124 194 163 13 116 206 169 2 ) ( 125 195 162 12 117 207 168 3 )\r\n( 121 197 167 11 113 201 173 4 ) ( 120 196 166 10 112 200 172 5 ) ( 122 199 164 9 114 203 174 6 ) ( 123 198 165 8 115 202 175 7 )\r\n( 103 212 190 30 110 217 181 16 ) ( 102 213 191 31 111 216 180 17 ) ( 100 214 189 28 109 219 182 18 ) ( 101 215 188 29 108 218 183 19 )\r\n( 97 209 185 26 104 220 178 20 ) ( 96 208 184 27 105 221 179 21 ) ( 98 211 186 24 107 222 177 22 ) ( 99 210 187 25 106 223 176 23 )\r\n( 79 232 156 45 68 230 149 32 ) ( 78 233 157 44 69 231 148 33 ) ( 76 234 159 47 71 228 150 34 ) ( 77 235 158 46 70 229 151 35 )\r\n( 73 237 155 41 66 227 146 36 ) ( 72 236 154 40 67 226 147 37 ) ( 74 239 152 43 65 225 145 38 ) ( 75 238 153 42 64 224 144 39 )\r\n( 87 252 130 60 93 243 138 48 ) ( 86 253 131 61 92 242 139 49 ) ( 84 254 129 62 94 241 137 50 ) ( 85 255 128 63 95 240 136 51 )\r\n( 81 249 133 56 91 246 141 52 ) ( 80 248 132 57 90 247 140 53 ) ( 82 251 134 58 88 244 142 54 ) ( 83 250 135 59 89 245 143 55 )\r\nParity reference b6 Number of Cycles 32 of 8 Elements\r\n( 127 63 95 15 119 51 85 0 ) ( 126 62 94 14 118 50 84 1 ) ( 124 61 92 13 116 49 86 2 ) ( 125 60 93 12 117 48 87 3 )\r\n( 121 58 88 11 113 54 82 4 ) ( 120 59 89 10 112 55 83 5 ) ( 122 56 91 9 114 52 81 6 ) ( 123 57 90 8 115 53 80 7 )\r\n( 103 43 65 30 110 38 74 16 ) ( 102 42 64 31 111 39 75 17 ) ( 100 41 66 28 109 36 73 18 ) ( 101 40 67 29 108 37 72 19 )\r\n( 97 46 70 26 104 35 77 20 ) ( 96 47 71 27 105 34 76 21 ) ( 98 44 69 24 107 33 78 22 ) ( 99 45 68 25 106 32 79 23 )\r\n( 192 160 240 136 204 170 255 128 ) ( 193 161 241 137 205 171 254 129 ) ( 195 162 243 138 207 168 252 130 ) ( 194 163 242 139 206 169 253 131 )\r\n( 198 165 247 140 202 175 248 132 ) ( 199 164 246 141 203 174 249 133 ) ( 197 167 244 142 201 173 251 134 ) ( 196 166 245 143 200 172 250 135 )\r\n( 216 180 238 153 213 191 224 144 ) ( 217 181 239 152 212 190 225 145 ) ( 219 182 237 155 214 189 227 146 ) ( 218 183 236 154 215 188 226 147 )\r\n( 222 177 233 157 211 186 231 148 ) ( 223 176 232 156 210 187 230 149 ) ( 221 179 234 159 208 184 228 150 ) ( 220 178 235 158 209 185 229 151 )\r\nParity reference b7 Number of Cycles 32 of 8 Elements\r\n========================================================\r\nTable 1:\r\nElements and cycles for string lengths one through eight bits in the encode direction.\r\n11",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/451354ce-0b03-4f59-b3ae-bfc632eae090/images/a6b63f77-d6ee-4590-a440-007fd9ce65af.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041832Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=47e4ab4681bc4d973e14b3f2f5db90ba1e7d1a59d3f5892ee4262e74b4953363",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 2631
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "No response"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "No response"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "No response"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "No response"
        }
      ]
    }
  }
}