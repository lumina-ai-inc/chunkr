{
  "file_name": "LSM-trie - An LSM-tree-based Ultra-Large Key-Value Store for Small Data - Slides (atc15_slides_wu).pdf",
  "task_id": "684713fa-e8d1-43d6-8359-5474caf5f0cb",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "ffd82f70-c0a6-476f-b62f-e5fc56a88125",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 1,
            "page_width": 720,
            "page_height": 540,
            "content": "LSM-trie: An LSM-tree-based Ultra-Large \r\nKey-Value Store for Small Data\r\nXingbo Wu\r\nYuehai Xu\r\nSong Jiang\r\nZili Shao\r\nThe Hong Kong \r\nPolytechnic University",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/ffd82f70-c0a6-476f-b62f-e5fc56a88125.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=add8fe904092d95677709ad7911ac5f7c3f39b74d6f1dfceee7a75cab92a9cf2",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fde34d16-aa4f-49f1-a518-272db3c423ff",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 2,
            "page_width": 720,
            "page_height": 540,
            "content": "The Challenge on Today’s Key-Value Store\r\n• Trends on workloads\r\n– Larger single-store capacity\r\n• Multi-TB SSD\r\n• Flash array of over 100 TB\r\n–Smaller key-value items\r\n• In a Facebook KV pool 99% of the items are ≤ 68B.\r\n• Large metadata set on a single node\r\n1",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/fde34d16-aa4f-49f1-a518-272db3c423ff.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=08310d9cdf863d7d60387e8f223813c1fd1b74c554283f6cfdca0a89f6906aaf",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "2157380b-2f37-4263-bb6b-2e08d4f11bff",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 3,
            "page_width": 720,
            "page_height": 540,
            "content": "Consequences of a Large Metadata Set\r\n• Less caching space for hot KV items.\r\n– Low hit ratio compromises system throughput.\r\n• Long warm-up time.\r\n– It may take tens of minutes to read all metadata into memory.\r\n• High read cost for out-of-core metadata.\r\n– It’s expensive to read multiple pages to serve a single GET.\r\n• LevelDB has managed to reduce the metadata size.\r\n2",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/2157380b-2f37-4263-bb6b-2e08d4f11bff.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c0c22ccda81d3ac1b2f8660c8f03bcdface782b033f38dbf6ec2d51457903046",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d1d3e787-4125-4883-a684-b6163211c0b2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 4,
            "page_width": 720,
            "page_height": 540,
            "content": "LevelDB Reduces Metadata Size with SSTable\r\n• To construct an SSTable:\r\n– Sort data into a list.\r\n– Build memory-efficient block-index.\r\n– Generate Bloom filters to avoid unnecessary reads.\r\n• How to support insertions on SSTable?\r\n3\r\n[1,2,3,5,8,9] [10,11,13,15,16,18] [19,20,23,24,25]\r\n1 10 19\r\n4KB 4KB 4KB\r\nBloom filter\r\nGet 20 Get 22",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/d1d3e787-4125-4883-a684-b6163211c0b2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=119116c875c481822622813bb894bcbaa474cce2b7119ea558d0bdcbe19bfdcb",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "083f792d-3822-43c8-b7c6-f6cea91c0074",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 5,
            "page_width": 720,
            "page_height": 540,
            "content": "MemTable\r\nReorganizing Data Across Levels\r\n• LSM-tree (Log-Structured Merge-tree)\r\n– New items are first accumulated in MemTable.\r\n– Each filled MemTable is converted to an SSTable at Level 0.\r\n– LevelDB conducts compaction to merge the SSTables.\r\n• A store can exponentially grow to several TBs with a \r\nfew levels.\r\n1-13 14-26 27-37 38-49 50-62 63-74 75-86 87-99\r\n1-25 26-50 51-77 78-99\r\n1-99\r\nLevel 0\r\nLevel 1 Compaction\r\n4\r\nVery Expensive!",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/083f792d-3822-43c8-b7c6-f6cea91c0074.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2eec8c488aacc7043195f5b2669b7935cfd70a1f780d051b284b5b9602b83943",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ebb2ffc9-7452-4012-9b9b-102e5f47899f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 6,
            "page_width": 720,
            "page_height": 540,
            "content": "In one compaction (1:10 size ratio):\r\n• Read 11 tables\r\n• Write 11 tables\r\n• Add only 1 table to the lower level\r\n45x WA for a 5-level store\r\n(WA: write amplification)\r\nA Closer Look at Compaction\r\nSteps in compaction:\r\n1. Read overlapping SSTables into memory.\r\n2. Merge-Sort the data in memory to form a list of new SSTables.\r\n3. Write the new SSTables onto the disk to replace the old ones.\r\n70-75 76-79 80-84 85-90\r\nMemory\r\nDisk\r\n70-77 78-84 85-90\r\n70-90\r\n5\r\nLevel N+1\r\nLevel N",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/ebb2ffc9-7452-4012-9b9b-102e5f47899f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a71f139f6df26fc9cc05a168373b5d1a421f46fabfed124f79fb380706d9d92a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "90a4d9c2-352a-4a77-b4bc-2b08eb63ebcf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 7,
            "page_width": 720,
            "page_height": 540,
            "content": "Compaction can be very Expensive\r\n• The workload:\r\n– PUT 2 billion items of random keys (~250GB).\r\n– 16-byte key and 100-byte value.\r\n• PUT throughput reduces to 18K QPS (2MB/s).\r\n6",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/90a4d9c2-352a-4a77-b4bc-2b08eb63ebcf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3dbf30e1b739c444363194f1666fd6c854de717dbaf77c5512636aa0b64572ab",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "db30d479-519b-4568-bb40-a2f4ce225751",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 8,
            "page_width": 720,
            "page_height": 540,
            "content": "Metadata I/O is Inefficient\r\n• Facts about LevelDB’s metadata:\r\n• Block Index: ~12 bytes per block.\r\n• Bloom filter: ~10 bits per key.\r\n• How large is it in a 10-TB store of 100-byte KV items?\r\n– 155GB metadata: 30 GB block index + 125 GB Bloom filter.\r\n7\r\n~10% raw SSD IOPS\r\n4-GB memory holds 25% of the \r\nmetadata for a 1-TB store.\r\n~50% raw SSD IOPS",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/db30d479-519b-4568-bb40-a2f4ce225751.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=124d97838292bd78eccf270287d6532f9cd32891d2b9e33f6f50ef5c3da521e7",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "46136ac0-e891-4d28-8b37-6fc7e2e7c313",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 9,
            "page_width": 720,
            "page_height": 540,
            "content": "Our solution: LSM-trie\r\n• Build an ultra-large KV store for small data.\r\n– Using a trie structure to improve compaction \r\nefficiency.\r\n– Clustering Bloom filters for efficiently reading out\u0002of-core metadata.\r\n8",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/46136ac0-e891-4d28-8b37-6fc7e2e7c313.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=88deae47c1a9c03d1b02d89402115c2535ab1bd38d0e86d916defdd3acd66057",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 479
      },
      {
        "segments": [
          {
            "segment_id": "154a6d9d-3a47-4bd3-a8e2-a951f34720d6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 10,
            "page_width": 720,
            "page_height": 540,
            "content": "Organizing Tables in a Trie (Prefix Tree)\r\n• KV items are located in the trie according to their hashed key.\r\n• Each trie node contains a pile of immutable tables.\r\n• The nodes at the same depth form a conceptual level.\r\n• How does LSM-trie help with efficient compaction?\r\n00 01 10 11\r\n00 01 10 11\r\n00 01 10 11\r\nLevel 0\r\nLevel 1\r\n9\r\nHash prefix: 00 10 11",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/154a6d9d-3a47-4bd3-a8e2-a951f34720d6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cf13d7b0eac63a9dd2c08fb0785e6abf682fdc954aeaf976c8cf79629ed3bdf1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "578a4ed7-f6e6-468b-b437-5fdd98c95ee7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 11,
            "page_width": 720,
            "page_height": 540,
            "content": "For one compaction:\r\n• Read 8 tables (1:8 fan-out)\r\n• Write 8 tables\r\n• Add 8 tables to the lower level\r\nOnly 5x WA for a 5-level LSM-trie\r\nEfficient Compaction in LSM-trie\r\nCompaction steps:\r\n1. Read tables from the parent node into memory.\r\n2. Assign the items to new tables according to hash-prefixes.\r\n3. Write new tables into its child nodes.\r\nMemory\r\n#00 #01 #10\r\nTables linearly \r\ngrow at each node\r\n10\r\n#11",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/578a4ed7-f6e6-468b-b437-5fdd98c95ee7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=443db31963091b5df01e65f8e44085d5d984c4a0a1b3c6e85348c5183f722abe",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "099287fb-b8ff-4326-a4c2-91573ba70db7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 12,
            "page_width": 720,
            "page_height": 540,
            "content": "Introducing HTable*\r\n• HTable: Immutable hash-table of key-value items\r\n– Each bucket has 4KB space by default.\r\n• Some buckets have overflowed items.\r\n– Migrating the overflowed items.\r\nKV\r\nKV\r\nKV\r\nKV\r\nKV\r\nKV\r\nKV\r\nKV\r\nKV\r\nKV\r\nKV\r\nKV\r\nKV\r\nKV\r\nKV\r\nBucket ID: 0 to 3 0 1 2 3\r\n*It’s not the HTable in HBase. 11",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/099287fb-b8ff-4326-a4c2-91573ba70db7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=19e2607e7ad3ba53061b428ea208d8672e53b09ce2d6cada3c3667b612d21cc3",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c6422af6-c786-40d7-bb88-33a1920755f3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 13,
            "page_width": 720,
            "page_height": 540,
            "content": "Selecting Items for Migration\r\n• Sorting items in a bucket according to their key’s hash.\r\n• Migrating the items above the watermark (HashMark).\r\n• Recording the HashMark and the corresponding IDs.\r\n– 2B Source ID, 2B Target ID, 4B HashMark\r\n0x33\r\n0x56\r\n0x6d\r\n0x9a\r\n0xa0\r\n0xef HashMark: 0xa0\r\n0\r\nMove to another bucket\r\n12",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/c6422af6-c786-40d7-bb88-33a1920755f3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e0a3e515a3a8f919fe14c1d05964cea7659725edd69457f7bdac3c068718f50b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "4bd7774b-08c6-4923-a412-97d8eebc42ba",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 14,
            "page_width": 720,
            "page_height": 540,
            "content": "Caching HashMarks for Efficient GETs\r\n• Only cache HashMark for most overloaded buckets.\r\n– 1.01 amortized reads per GET.\r\n– A 1-TB store only needs ~400MB in-memory HashMark.\r\n0x35\r\n0x10\r\n0xac\r\n7\r\n0x95\r\n0x2a\r\n0x33\r\n0x60\r\n1\r\n0x86\r\nMetadata in bucket 1\r\nBucket ID: 1\r\nHashMark: 0x95\r\nTarget ID: 7 KV Item owned by Bucket 1\r\nKV Item owned by Bucket 7\r\nThe only item that \r\ntriggers a 2nd read.\r\n13",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/4bd7774b-08c6-4923-a412-97d8eebc42ba.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=90d35f8f7beca81a185ac11814845bc84fc627d064b8d889e5e1253a0667a556",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "77d99e82-47ec-4d31-89fc-8b2a972809c9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 15,
            "page_width": 720,
            "page_height": 540,
            "content": "Most Metadata is in the Last Level\r\n• The first four levels contain 1.9 GB Bloom filters (BF).\r\n• The last level may contain over one hundred GB BFs.\r\n• We explicitly cache the BFs for Level 0 to Level 3.\r\n• The BFs at the last level are managed differently.\r\n256 MB\r\n2 GB\r\n16 GB\r\n128 GB\r\nN TB\r\n147 GB data\r\n14\r\nData size distribution \r\nacross the levels:",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/77d99e82-47ec-4d31-89fc-8b2a972809c9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e5cced0191250916f9173e1814cb634a23d5504fb6b1c8b1c1bc4b0d25efc9e0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "97630852-a8ac-43ff-b602-9d0b07710004",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 16,
            "page_width": 720,
            "page_height": 540,
            "content": "Clustering Bloom Filter for Efficient Read\r\n• Each hash(key) indicates a column of 4-KB buckets.\r\n• We collect all the BFs in a column to form a BloomCluster.\r\n• Each GET requires one SSD read for all the out-of-core BFs.\r\n15",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/97630852-a8ac-43ff-b602-9d0b07710004.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=eff8e98b886a54242f1820b1365f7322eb387a3aa9d34b123d8d6b4b8444dada",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "66e9aa79-9e51-4606-9a2e-f05f64d65919",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 17,
            "page_width": 720,
            "page_height": 540,
            "content": "Exploiting Full SSD Performance\r\n• Using an additional small SSD to host BloomClusters.\r\n– e.g., a 10-TB SSD for data + a 128-GB SSD for metadata.\r\n• Plenty of memory space is left for your data cache!\r\nBloom-Cluster KV items\r\n2 1\r\nnd Read st Read\r\nIn-memory \r\nMetadata\r\nGET\r\n50K QPS\r\n52K \r\nIOPS\r\n16\r\nA few GBs",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/66e9aa79-9e51-4606-9a2e-f05f64d65919.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c9dd37703c2acb99bd407432a1ff520d2d7f9c9cef16be9fb8d259b59d204140",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 497
      },
      {
        "segments": [
          {
            "segment_id": "57d79c25-0ce3-4b40-8433-f65195b7ad8d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 18,
            "page_width": 720,
            "page_height": 540,
            "content": "Performance Evaluation of PUT\r\nConsistent \r\nThroughput (TP) \r\non HDD:\r\n2x-3x higher \r\nthan the others\r\nExpected high \r\nTP on SSD\r\nTP dropped due to static \r\nwear-leveling in SSD\r\nHigh TP lasts \r\nlonger on two SSDs\r\n17",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/57d79c25-0ce3-4b40-8433-f65195b7ad8d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e1769db5f8e93c365a354b792028170d3607211093c64a67d4cb9adb1ff5d2b3",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ea9d0f5b-3a8e-4af3-9287-5822b531f1f3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 19,
            "page_width": 720,
            "page_height": 540,
            "content": "Write Amplification Comparison\r\nConsistent 5x WA ratio\r\n18",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/ea9d0f5b-3a8e-4af3-9287-5822b531f1f3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a94a6c77c40e8cdbdc1073b44b00f68e6772f5f0eb8c6d3c3255ab04d48253f6",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "45901f55-4707-4a2f-9aec-3f2dd89afa86",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 20,
            "page_width": 720,
            "page_height": 540,
            "content": "Read Performance with 4GB Memory\r\n~50% raw \r\nSSD IOPS\r\nOnly one SSD is used.\r\n19\r\nSSD IOPS\r\n*No data cache for LSM-trie",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/45901f55-4707-4a2f-9aec-3f2dd89afa86.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c1f60583d8a9102b4c9384ac8db43bc00f68c662cf7da55a49af12409a4e03b6",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "98109fc0-cc18-4dae-a51a-026897e4880f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 21,
            "page_width": 720,
            "page_height": 540,
            "content": "Read Performance with 4GB Memory\r\nGains 96% raw \r\nSSD IOPS with \r\nan additional \r\nSSD.\r\n20 *No data cache for LSM-trie",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/98109fc0-cc18-4dae-a51a-026897e4880f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=93d3d3193b179e1d5d6d1712217a24f508b132af17d8fa0d03841ebb86ae6d00",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "707fff39-b64d-4c54-be27-e561f7d3b770",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 22,
            "page_width": 720,
            "page_height": 540,
            "content": "Summary\r\n• LSM-trie is designed to manage a large set of small data.\r\n• It reduces the write-amplification by an order of magnitude.\r\n• It delivers high throughput even with out-of-core metadata.\r\nThe LSM-trie source code can be downloaded at:\r\nhttps://github.com/wuxb45/lsm-trie-release\r\n21",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/707fff39-b64d-4c54-be27-e561f7d3b770.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bad880c09e022f9e231e3f7d5dd6d2d98f7938f9ed6de8fc2061adb0a9649a24",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "bdc8038e-cc3d-4555-bd5e-1a32bba4019c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 23,
            "page_width": 720,
            "page_height": 540,
            "content": "Thank you!\r\n\r\nQ & A \r\n22",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/684713fa-e8d1-43d6-8359-5474caf5f0cb/images/bdc8038e-cc3d-4555-bd5e-1a32bba4019c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041718Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=14b928617abd6be1dee6524c513182874da2f95742c74b8f0582174c837554d8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 134
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "LSM-trie: An LSM-tree-based Ultra-Large Key-Value Store for Small Data\n"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Xingbo Wu, Yuehai Xu, Song Jiang, Zili Shao\n"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "I am unable to extract the publication date of this document. While the document discusses LSM-trie, its performance, and comparisons to LevelDB, it does not contain information about its publication date.  There is no date information provided within the text itself.\n"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "The Hong Kong Polytechnic University\n"
        }
      ]
    }
  }
}