{
  "file_name": "MISTRAL - Processing Relational Queries Using a Multidimensional Access Method - 2000 - Slides and Comments.pdf",
  "task_id": "c3c6312f-6357-473f-bfe5-25c9e12a1904",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "0f148416-2058-4c87-aae6-be6891e2713c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 1,
            "page_width": 595,
            "page_height": 842,
            "content": "1\r\nThis Presentation consists of several animations and is mostly compiled out of the Ph.D. defense \r\npresentation of Volker Markl. Many parts and fragments have also been presented at several \r\nworkshops and conferences (including VLDB 2000, ICDE 1999, IDEAS 1999) as well as at \r\nseveral DBMS vendors in U.S., Germany, and Japan.\r\nThe UB-Tree is a multidimensional access method that has been invented by Rudolf Bayer in \r\n1996 and has been investigated by Volker Markl and Rudolf Bayer since then.\r\nThe presentation gives an overview of the MISTRAL project, an international research and \r\ndevelopment project with the goal to investigate the UB-Tree and its applications which has been \r\nundertaken at FORWISS from 1997 to 2000.\r\nFurther references, information, animations and interactive visualization tools can be found under \r\nURL http://mistral.in.tum.de\r\nFor detailed explanation of UB-Trees please refer to\r\n[Bay96] R. Bayer. The Universal B-Tree for multidimensional Indexing. Technical Report TUM\u0002I9637,November 1996. http://mistral.in.tum.de/results/publications/TUM-I9637.pdf\r\n[Mar99] V. Markl. MISTRAL: Processing Relational Queries using a Multidimensional Access \r\nTechnique, Ph.D. Thesis, TU München, 1999, published by infix Verlag, St. Augustin, DISDBIS \r\n59, ISBN 3-89601-459-5, 1999. http://mistral.in.tum.de/results/publications/Mar99.pdf \r\n[MZB99] V. Markl, M. Zirkel, and R. Bayer. Processing Operations with Restrictions in \r\nRelational Database Management Systems without external Sorting. Proc. of ICDE Conf., \r\nSydney, Australia, 1999. http://mistral.in.tum.de/results/publications/MZB99.pdf\r\n[MRB99] V. Markl, F. Ramsak, and R. Bayer. Improving OLAP Performance by \r\nMultidimensional Hierarchical Clustering. Proc. of IDEAS Conf., Montreal, Canada, 1999. \r\nhttp://mistral.in.tum.de/results/publications/MRB99.pdf\r\n[RMF+00] F. Ramsak, V. Markl, R. Fenk et al. Integrating the UB-Tree into a Database System \r\nKernel Proc. of VLDB Conf. 2000, Cairo, Egypt, 2000. \r\nhttp://mistral.in.tum.de/results/publications/RMF+00.pdf\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n1\r\nMISTRAL\r\nProcessing Relational Queries Using a Multidimensional Access \r\nMethod\r\nVolker Markl\r\nRudolf Bayer\r\nhttp://mistral.in.tum.de\r\nFORWISS \r\n(Bayerisches Forschungszentrum\r\nfür Wissensbasierte Systeme)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/0f148416-2058-4c87-aae6-be6891e2713c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7036e93e621b19c93f9247e4bee20fa0d3e32e74a13a338e1f2da652e111754c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ffdeca50-2097-4c91-805e-ce8968b456d4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 2,
            "page_width": 595,
            "page_height": 842,
            "content": "2\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n2\r\nStaff Members\r\nMISTRAL Project Management\r\nProf. Rudolf Bayer, Ph.D. (FORWISS Knowledge Bases Group Head)\r\nDr. Volker Markl (MISTRAL Project Leader, Deputy Research Group Head)\r\nMISTRAL Research Assistants\r\nDipl. Inform. Robert Fenk\r\nDipl. Inform. Roland Pieringer\r\nFrank Ramsak, M.Sc.\r\nDipl. Inform. Martin Zirkel\r\nMISTRAL Master Students and Interns\r\nRalf Acker, Bulent Altan, Sonja Antunes, Michael Bauer, Sascha Catelin, Naoufel Boulila, Nils Frielinghaus, \r\nSebastian Hick, Stefan Krause, Jörg Lanzinger, Christian Leiter, Yiwen Lue, Stephan Merkel, Nasim Nadjafi, Oliver \r\nNickel, Daniel Ovadya, Markus Pfadenauer, Timka Piric, Sabine Rauschendorfer, Antonius Salim, Maximilian \r\nSchramm, Michael Streichsbier, Anton Tichatschek \r\nThe MISTRAL project team consists of 5 full time researchers and a large set of \r\nmaster students, interns and guests of the participating companies.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/ffdeca50-2097-4c91-805e-ce8968b456d4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b8f4df29f797c668203dc8fb68f1132543eae149b8abf48dfad0c7905654d071",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "af2cab03-3580-45fc-8e42-18d60d3fb164",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 3,
            "page_width": 595,
            "page_height": 842,
            "content": "3\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n3\r\nhttp://mistral.in.tum.de\r\nRange Queries\r\nTetris Algorithm\r\nThe partners on this slide have been sponsoring the MISTRAL work.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/af2cab03-3580-45fc-8e42-18d60d3fb164.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3171b28b1068655e8bda75f690b373f75323bc070981020d85859f6439e3f1cb",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b0bbf283-e5b7-4369-aa3e-6b117c55d11c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 4,
            "page_width": 595,
            "page_height": 842,
            "content": "4\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n4\r\nOverview\r\n1. Concept of the UB-Tree: Z-Regions\r\n2. Insertion\r\n3. Range Query Algorithm \r\n4. Tetris Algorithm\r\n5. Kernel Integration\r\n6. Performance Overview",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/b0bbf283-e5b7-4369-aa3e-6b117c55d11c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a7c778cfa44c12af6be037d580a526aa107ad1820cd5a3ad81e2f043460bc264",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 459
      },
      {
        "segments": [
          {
            "segment_id": "695690b0-db3d-4764-adfc-bc39ac69fda4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 5,
            "page_width": 595,
            "page_height": 842,
            "content": "5\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n5\r\nRelations and MD Space\r\n● Decision Support Relation (similar to TPC-D)\r\n– Fact(customer, product, time, Sales)\r\n\u0001 defines a three dimensional cube\r\n● Point Query\r\n– All sales for one customer for one specific product on\r\na certain day\r\n● Partial Match Query\r\n– All sales for product X\r\n● Range Query\r\n– All sales for year 1999 for a specific product group\r\nfor a specific customer group\r\nThis slide gives an example of how to map queries with multi-attribute \r\nrestrictions on a relational table to multidimensional range queries. Queries with \r\nmulti-attribute restrictions are typical for decision support applications, but also \r\nfrequent in archiving, geographical applications and relational database systems \r\nin general.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/695690b0-db3d-4764-adfc-bc39ac69fda4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=82dfccb18401ab5b9a6ae5f1ecb0a141e1ae84b0be6e70846eedb97e84d7b3ba",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "5cc3a7b0-de5f-44ab-942c-62f4ed272653",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 6,
            "page_width": 595,
            "page_height": 842,
            "content": "6\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n6\r\nDesign Goals\r\n● clustering tuples on disk pages while preserving \r\nspatial proximity\r\n● efficient incremental organization\r\n● logarithmic worst-case guarantees for insertion, \r\ndeletion and point queries\r\n● efficient handling of range queries\r\n● good average memory utilization\r\nThe design goals on this slide are generic for designing an access method, both \r\nfor single-attribute or multi-attribute access methods. However, most multi\u0002attribute methods do not fulfill all of the design goals. R-Trees, for instance, do \r\nnot offer a good average memory utilization. Most multidimensional access \r\nmethods like R*-Trees, Grid-Files or kd-B-Trees do not allow for efficient \r\nincremental organization, e.g., by requiring forced reinsertion, Grid-Splits or \r\neven complex reorganizations. Since UB-Trees (as we will see) rely on standard \r\nB-Trees for their storage organization of so-called Z-regions, they inherit all of \r\nthe above properties from the underlying B-Tree structure.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/5cc3a7b0-de5f-44ab-942c-62f4ed272653.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=29f25e341d01ce1b18bd6071f3691bfe3cf40502d2795513aab8ebdf9dc86d11",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "95c991b0-8f61-4a2b-997d-b53eea506e21",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 7,
            "page_width": 595,
            "page_height": 842,
            "content": "7\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n7\r\nZ-Ordering \r\n\u0001\u0001\r\n−\r\n= =\r\n⋅ + − = ⋅\r\n1\r\n0 1\r\n1\r\n, Z( ) 2\r\ns\r\ni\r\nd\r\nj\r\ni d j\r\nj i x x\r\n0 5 1 4 17 16 21 20\r\n2 7 3 6 19 18 23 22\r\n8 13 9 12 25 24 29 28\r\n10 15 11 14 27 26 31 30\r\n32 37 33 36 49 48 53 52\r\n34 39 35 38 51 50 55 54\r\n40 45 41 44 57 56 61 60\r\n42 47 43 46 59 58 63 62\r\n0 3 1 2 5 4 7 6\r\n1\r\n0\r\n4\r\n2\r\n5\r\n3\r\n7\r\n6\r\n(a) (b)\r\nZ(x) is a bijective function that computes for every tuple x its Z-address, i.e., its \r\nposition on the space filling Z-curve. The slide presents the Z-addresses (or Z\u0002values) for an 8x8 universe. Z-values are efficiently computed by bit-interleaving \r\nas described e.g. by Orenstein and Merret in 1984. An additional animation \r\nhttp://mistral.in.tum.de/results/presentations/ppt/zaddress.ppt\r\non the Mistral Web Site describes bit-interleaving.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/95c991b0-8f61-4a2b-997d-b53eea506e21.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=062a87794191f8324e013cea7ee193f401252079b13ce6056dde11c7a004ec69",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 437
      },
      {
        "segments": [
          {
            "segment_id": "a3072d90-6db7-444d-b0ff-59d69c1766ed",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 8,
            "page_width": 595,
            "page_height": 842,
            "content": "8\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n8\r\nZ-regions/UB-Trees\r\nA Z-region [α : β] is the space covered by an interval \r\non the Z-curve and is defined by two Z-addresses α and β.\r\nUB-Tree partitioning:\r\n[0 : 3],[4 : 20],\r\n[21 : 35], [36 : 47],\r\n[48 : 63]\r\nZ-region [4 : 20]\r\n4 20\r\npoint data creating \r\nthe UB-Tree on the \r\nleft for a page\r\ncapacity of 2 points\r\nA Z-region is the space covered by an interval on the Z-curve. Thus a Z-region has two \r\nmeaningful interpretations, a linear interpretation as an interval as well as a spatial interpretation. \r\nThe left part of this animation shows the Z-region [4:20] and its spatial interpretation. The spatial \r\nextent of the Z-region becomes clearer if we draw the Z-region into the picture. Please note that \r\nbit-interleaving is an efficient means to calculate the Z-value for a tuple (or the inverse, i.e., the \r\ntuple values for a given Z-value). Thus we can arbitrarily switch between the linear Z-space and \r\nthe geometric interpretation.\r\nThe middle part shows a Z-region partitioning (or also called UB-Tree partitioning) which is a \r\ndisjoint set of Z-regions whose union covers the entire multidimensional space. In this picture the \r\npartitioning consists of 5 Z-regions. Most Z-regions preserve spatial proximity, i.e., neighboring \r\npoints of a given point are in the same region with a high probability. The orange region [21 : 35] \r\nconsists of two disconnected parts. If a Z-region could consist of many disconnected parts, this \r\nwould prevent Z-regions from being suitable for clustering. However, [Mar99] gives a proof that \r\nregardless of the dimensionality of the Z-ordered space (i.e., not only for 2d) the number of not \r\nconnected parts of a Z-region is at most two.\r\nWe can consider a Z-region corresponding to a disk page, i.e., being a container of a fixed or \r\nvariable capacity storing tuples which fall into the spatial extent of the Z-region. The right part of \r\nthe animation shows a point distribution of 10 points which with a page capacity of two points per \r\npage might be stored in the Z-region partitioning of the middle picture of this slide .\r\nWe use a B-Tree to store the upper limit of the Z-value of each Z-region and call the \r\ncorresponding B-Tree storing the Z-region organization Universal B-Tree (UB-Tree) [Bay96, \r\nMar99] ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/a3072d90-6db7-444d-b0ff-59d69c1766ed.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=55226a8d294918f7789dfb66b6a661a7485ecd8234813e875436d9e37416ef93",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 384
      },
      {
        "segments": [
          {
            "segment_id": "bd39d4f3-7b0b-418e-9c99-62075aec660d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 9,
            "page_width": 595,
            "page_height": 842,
            "content": "9\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n9\r\nUB-Tree Insertion 1/2/3/4\r\nUB-Tree disk pages correspond to Z-regions. Each tuple is stored on a disk page corresponding to \r\nthe Z-region that this tuple spatially belongs to. Each Z-region can store a certain capacity of \r\ntuples and must be split into two Z-regions during insertion if the page capacity of a Z-region is \r\nexceeded. Details can be found in [Bay96] and [Mar99]\r\nThis animation shows how data is inserted into a two-dimensional UB-Tree assuming a page (Z\u0002region) capacity of two tuples (or points). We start with an empty UB-Tree consisting of a single \r\nZ-region corresponding to one disk page (the root node of the UB-Tree). Now points are inserted \r\ninto the universe (indicated by red circles). As soon as the third point is inserted, the Z-region \r\ncovering the the entire universe must be split into two Z-regions. This is done by choosing a \r\nseparator Z address on that page which ensures that 50% of the tuples stored already on that page \r\nwill have a lower value (in Z-order) than the separator. Choosing this separator for the split\r\nensures a page utilization of 50%. To optimize the geometric shape of Z-regions, an additional \r\nheuristics exploiting the remaining freedom of choice for the separator may be used to avoid \r\nfringes (however, this optimization is not used in the animation above). In addition, the geometric \r\nshape of the region may be improved (be more rectangular) by lowering the page utilization and \r\nthereby offering a greater freedom of choice for the separator selection. However, in practice one \r\ncan remain with the 50% choice.\r\nAfter the (in this case horizontal) split, the UB-Tree consists of two Z-regions. Inserting further \r\npoints causes further splits each time the page capacity of a Z-region is exceeded. This animation \r\ncontinues until a UB-Tree consisting of 4 Z-regions storing 8 tuples has been created. \r\nIn the enclosed file \r\nhttp://mistral.in.tum.de/results/presentations/ppt/insert.ppt\r\none can find another animation of the UB-Tree insertion, using our standard view with a screen \r\nsplit into three sections CODE, Z-SPACE and GEOMETRIC SPACE (in this presentation the \r\nrange query animation uses that layout) which allows to see the algorithm running view the code, \r\nthe events happening in geometric space as well as the events happening in linear Z-space as \r\nstored in the B-Tree of the UB-Tree. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/bd39d4f3-7b0b-418e-9c99-62075aec660d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=55fee1e5af18f8bc9485b81e191a45e46f09f05c28733626d01407ba7d8925f9",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "dc8d2964-a2c2-45bf-b79f-efca140a4516",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 10,
            "page_width": 595,
            "page_height": 842,
            "content": "10\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n10\r\nUB-Tree Insertion 18/19\r\nThis slide shows that insertion into UB-Trees is a local operation and thus allows \r\nfor efficient incremental updates. We have inserted further points into the UB\u0002Tree which induced further splits into 18 Z-regions (left UB-Tree visualization). \r\nThe UB-Tree on the right side was created by inserting further points into the last \r\nZ-region (in Z-order) of the second quadrant (in the UB-Tree on the left). It is \r\nimportant to note that only this single Z-region is split, resulting in one update \r\nand one write of B-Tree leaf pages (plus possible further splits on the upper B\u0002Tree levels). This is a major difference to other multidimensional access methods \r\nlike R-Trees or Grid-Files.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/dc8d2964-a2c2-45bf-b79f-efca140a4516.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1deb37b65dc41a313e12fd30f84dffd6e45fcbe916487e936d9fee8c6eed998a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 504
      },
      {
        "segments": [
          {
            "segment_id": "95b7225a-c794-4b20-ac72-1485de2b00d9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 11,
            "page_width": 595,
            "page_height": 842,
            "content": "11\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n11\r\nMultidimensional Range Query\r\nSELECT * FROM table\r\nWHERE (A1 BETWEEN a1 AND b1) AND\r\n(A2 BETWEEN a2 AND b2) AND\r\n.....\r\n(An BETWEEN an AND bn) \r\nThe goal of a multidimensional access methods is to efficiently answer \r\nmultidimensional range queries which are created by the SQL query template \r\nabove.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/95b7225a-c794-4b20-ac72-1485de2b00d9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bf5a03911b37cc0cefffc152ff5ed2a355a2f55ba4aec78ccdbbbbbf2892005a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "2247b6c8-d931-4e97-9623-e4b6c2cbb2a9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 12,
            "page_width": 595,
            "page_height": 842,
            "content": "12\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n12\r\nTheoretical Comparison of the \r\nRangequery Performance\r\nideal\r\ncase\r\ns1*s2*P\r\nmultidimensional\r\nindex\r\ns1\r\n↑ *s2↑ *P\r\nmultiple\r\nB-Trees,\r\nbitmap indexes\r\ns1*I1+s2*I2+s1*s2*T\r\ncomposite\r\nkey clustering\r\nB-Tree\r\ns1*P\r\nThis slide illustrates how range queries are processed with access methods that \r\nare standard in today‘s relational DBMS. For simplification of our illustration we \r\nassume uniformly distributed data as well as independence of the dimensions. We \r\nassume a table consisting of P disk pages and a query box with the selectivities s1 \r\nand s2. In the ideal case we thus have to retrieve s1*s2*P disk pages to answer \r\nthe query. With a composite key B-Tree, however, only the leading dimension of \r\nthe composite key can be utilized, resulting in reading s1*P disk pages in the blue \r\nstripe. The result set is then determined by post filtering the tuples in main \r\nmemory after retrieval. With bitmap indexes or multiple B-Trees, index \r\nintersection results in reading row ids or bitmaps with sizes s1*i1 and s2*i2 for \r\nindex sizes of i1 respectively i2 pages. After this intersection, the result set tuples\r\nare retrieved by random access, resulting in s1*s2*T page reads, if T tuples are \r\nstored in the table. Note the difference between T (the number of tuples in the \r\ntable) and P (the number of pages in the table). With an average of 30 tuples\r\n(empirical value from our project partners) per page bitmap indexes or multiple \r\nB-Trees are immediately more than 30 times worse than the ideal case. In \r\ncontrast to that, a multidimensional index clusters the data more symmetrically \r\nwith respect to all dimensions. Since this clustering or partitioning is discrete, \r\nthere is always an overhead. However, with large database sizes the overhead \r\ngets smaller. In general this means that multidimensional indexes approximate \r\nthe ideal case with some kind of ceiling function for each selectivity. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/2247b6c8-d931-4e97-9623-e4b6c2cbb2a9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3427c4977babfd0000e0fb716974563873bf9ede8c2c370562b23dbfcd1b1a50",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 363
      },
      {
        "segments": [
          {
            "segment_id": "fe42ea1c-5f48-4049-876d-773352d07aef",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 13,
            "page_width": 595,
            "page_height": 842,
            "content": "13\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n13\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree\r\nThis slide and the following slides explain the UB-Tree range query algorithm. \r\nThe screen is divided into 4 sections: The left part shows the code, the right part \r\nshows the geometrical interpretation of the UB-Tree (UB-Tree), the linear B*-\r\nTree as well as the linear Z-space. Please note that the UB-Tree and the B*-Tree \r\non the linear Z-space are merely two different interpretations or visualizations of \r\nthe same data set. In the algorithms we can arbitrarily switch between both \r\nrepresentations. In the following we show how the read query box defined by the \r\ntuples ql and qh with (ql, qh) is processed by the range query algorithm. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/fe42ea1c-5f48-4049-876d-773352d07aef.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=90ff31912cc28277934f63ff60192f1f0a30f7db787779dddc917d07ca4285dd",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a766effb-6fd5-4d98-8793-d12a9fcf4019",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 14,
            "page_width": 595,
            "page_height": 842,
            "content": "14\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n14\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree\r\nFirst the algorithm calculates the start and the end Z-values of the query box \r\ncoordinates ql and qh.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/a766effb-6fd5-4d98-8793-d12a9fcf4019.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1b4d83d304709e180fc647d41abcbe7c66d5682cd7a209b87d3c9523799675f8",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "539b26f5-0084-4aaa-8103-c3013b608bb2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 15,
            "page_width": 595,
            "page_height": 842,
            "content": "15\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n15\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree\r\nFirst the region separator of the Z-region where the start point of the query box is \r\nlocated is determined by a single B-Tree point search (in SQL: SELECT min(Z) \r\nwhere Z>cur) as illustrated by the blue path through the B-Tree.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/539b26f5-0084-4aaa-8103-c3013b608bb2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=638141b318317ff29047f6376611d1fabdbe826b2dbb63e5be58c9b7539a1736",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d994ec46-21ad-4117-a59e-3057deb6c9d9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 16,
            "page_width": 595,
            "page_height": 842,
            "content": "16\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n16\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree\r\nThen the leaf page corresponding to that Z-region is retrieved as illustrated by the \r\nblue leaf page in the B-Tree as well as the green colored space in the UB-Tree.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/d994ec46-21ad-4117-a59e-3057deb6c9d9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d8550e762fb7cf9869fbbfbf99db09098bd526d19003c9248f80af1e32a6f838",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "661fd48b-2675-4eb7-8480-98dcfc33142a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 17,
            "page_width": 595,
            "page_height": 842,
            "content": "17\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n17\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree\r\nThen all tuples of that page that are inside the query box are returned.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/661fd48b-2675-4eb7-8480-98dcfc33142a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3545e2f19e3260ec2c7f9be7d56d2d3caef4568a24eb8a7403691413451797b3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 499
      },
      {
        "segments": [
          {
            "segment_id": "65b67377-fc77-4ebd-b7fe-7fb0f5f1a48a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 18,
            "page_width": 595,
            "page_height": 842,
            "content": "18\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n18\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree\r\nNow the next Z-address intersecting the query box is computed, i.e.,\r\ncur = min { Z(x) where x in [[ql, qh]] and Z(x) > cur ) \r\nThis is achieved by an algorithm that only requires O(n) bit operations (copy and \r\ncompare) where n is the number of bits (i.e., length) of the Z-address cur.\r\nThe details of that algorithm can be found in [Mar99] and [RMF+00].",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/65b67377-fc77-4ebd-b7fe-7fb0f5f1a48a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=72bf91f5cede0fec356ba8db4babf07ff4899e44dd0721475d82da132c6ea667",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d93ef1fa-c8cb-4ff6-a06d-35e7e9fb5534",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 19,
            "page_width": 595,
            "page_height": 842,
            "content": "19\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n19\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree\r\nAfter that the algorithm proceeds in the same way as described before until the \r\nentire query box has been processed, i.e., cur > end.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/d93ef1fa-c8cb-4ff6-a06d-35e7e9fb5534.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c38df6d42b037bfda0ba00631ff6479c7a0aa6b9e8e3d04af75ab4ec85d383a8",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "45950f36-159e-48d0-8794-89c8cd215087",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 20,
            "page_width": 595,
            "page_height": 842,
            "content": "20\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n20\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/45950f36-159e-48d0-8794-89c8cd215087.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7ef6b15c94937ad99cb1e7247585027d8f08eb2cbd10bb93759a49647804ec30",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "7731f17c-ce49-40ef-b464-425d90d6c2ec",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 21,
            "page_width": 595,
            "page_height": 842,
            "content": "21\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n21\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/7731f17c-ce49-40ef-b464-425d90d6c2ec.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e2b524254aacae21b400b0473a21fcb8d7bef9126f63762e2c24e5fa7260e342",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "7b7accb7-4c4a-4692-8625-1f47e4094cb1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 22,
            "page_width": 595,
            "page_height": 842,
            "content": "22\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n22\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/7b7accb7-4c4a-4692-8625-1f47e4094cb1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=75d12c133cc94e2d804ae0792b8f8aefb6739a99c41483a1a326c883a0568aff",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e9c3a8e4-c254-4d0a-b49f-034680a16d5e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 23,
            "page_width": 595,
            "page_height": 842,
            "content": "23\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n23\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/e9c3a8e4-c254-4d0a-b49f-034680a16d5e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=923838438d9f10eaefcca0429d02ec71ba663b7b473de82c9c0d3ab419f3caab",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "362dc20d-7309-4954-99ae-531864a88c67",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 24,
            "page_width": 595,
            "page_height": 842,
            "content": "24\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n24\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/362dc20d-7309-4954-99ae-531864a88c67.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4c75d7e47ede3fba0a801b0b12f0ca43d108bf46f367312c3c40c0e5b7ba3bb3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 496
      },
      {
        "segments": [
          {
            "segment_id": "353db79d-b621-4b74-9804-8cc739ecae12",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 25,
            "page_width": 595,
            "page_height": 842,
            "content": "25\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n25\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/353db79d-b621-4b74-9804-8cc739ecae12.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9fb4207d316d9eac05ec004873c468b8c51f09ec27b82928ccb70d64e7f604a8",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f374d45c-451e-43fb-bd4e-ec82066c3fb0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 26,
            "page_width": 595,
            "page_height": 842,
            "content": "26\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n26\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/f374d45c-451e-43fb-bd4e-ec82066c3fb0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dda4ce99570dd2e5b34a61ecb7f488736a29ddf591e572fb66ab16245f488ea1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6fb66d50-d5d3-4325-a786-43d4726b10c6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 27,
            "page_width": 595,
            "page_height": 842,
            "content": "27\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n27\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/6fb66d50-d5d3-4325-a786-43d4726b10c6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f3956c0b667867b63235374bc5d25e882f80d793ff0a900768f601f4c2fea04e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e3877eb9-f40d-4206-87e4-9ad6cca2a277",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 28,
            "page_width": 595,
            "page_height": 842,
            "content": "28\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n28\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/e3877eb9-f40d-4206-87e4-9ad6cca2a277.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6cde06e5324a956d9273c45a314c3328375d402ca0dc0896c33d6dd5aef80485",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b5762ce2-39d5-4538-a96e-6bc0fea1a140",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 29,
            "page_width": 595,
            "page_height": 842,
            "content": "29\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n29\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/b5762ce2-39d5-4538-a96e-6bc0fea1a140.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=da7e0198ebfcb6b14d6b592fb4029b8f463c14f66270c97cea13c22dae8448c4",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3285201e-99ee-43d4-9780-61925b793513",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 30,
            "page_width": 595,
            "page_height": 842,
            "content": "30\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n30\r\nrangeQuery(Tuple ql, Tuple qh) \r\n{\r\nZaddress start = Z(ql);\r\nZaddress cur = start;\r\nZaddress end = Z(qh);\r\nPage page = {};\r\nwhile (1) \r\n{\r\ncur = getRegionSeparator(cur);\r\npage = getPage(cur);\r\noutputMatchingTuples(page, ql, qh); \r\nif ( cur >= end ) break;\r\ncur = getNextZAddress(cur, start, end);\r\n}\r\n}\r\nB*-Tree\r\nlinear Z-space\r\nUB-Tree\r\nNow the end condition is satisfied, since the largest address of the Z-region is \r\nlarger than the end address of the query box. Thus, the algorithm can terminate \r\nnow.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/3285201e-99ee-43d4-9780-61925b793513.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cbdfb72197fe2b0084cf242e060b2332febd44e453d82fd01710ee72fe4870c6",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ece8edb9-21c2-4eab-960a-cac6511ff7cf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 31,
            "page_width": 595,
            "page_height": 842,
            "content": "31\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n31\r\nRange Queries and Data Distributions\r\nThis slide shows range queries in sparsely and densely populated parts of the \r\nuniverse. The data of this UB-Tree consists of 5 clusters (please note that small \r\nZ-regions denote parts of the space that are densely populated since each Z\u0002region stores about the same number of tuples). Whereas a query in a densely \r\npopulated part of the space (left side) retrieves a lot of Z-regions, a query in the \r\nsparsely populated part (right side) retrieves only 3 Z-regions. This means that \r\nthe number of pages retrieved is correlated with the results set size, resulting in a \r\nvery desirable response time behavior.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/ece8edb9-21c2-4eab-960a-cac6511ff7cf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=361f5389b459a1ba52050a7ff7d81e4c174d70de44866808bcaf1e708189ed51",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 490
      },
      {
        "segments": [
          {
            "segment_id": "147eb4e4-9f4e-44df-ab00-5ce35ae485a8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 32,
            "page_width": 595,
            "page_height": 842,
            "content": "32\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n32\r\nGrowing Databases\r\n1000 tuples 50 000 tuples\r\nThis slide shows that with larger database sizes the Z-region partitioning gets \r\nfiner and query boxes are better approximated by the partitioning. This slide also \r\nshows that the UB-Tree partitioning will very well answer a range query if the \r\nquery box is larger than the average Z-region size. Of course, if the query box is \r\nsmaller than a Z-region, only one or very few Z-regions must be retrieved.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/147eb4e4-9f4e-44df-ab00-5ce35ae485a8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2caf0bc871a96ac19a42cab5752a2ab092830d633adad1480c89aad55a5e0a44",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "7767831e-daa3-47fd-a723-f71748b0509c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 33,
            "page_width": 595,
            "page_height": 842,
            "content": "33\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n33\r\nSummary UB-Trees\r\n➼ 50% storage utilization, dynamic updates\r\n➼ Efficient Z-address calculation (bit-interleaving)\r\n➼ Logarithmic performance for the basic operations\r\n➼ Efficient range query algorithm (bit-operations)\r\n➼ Prototype UB/API above RDBMS (Oracle 8, \r\nInformix, DB2 UDB, TransBase, MS SQL 7.0) using\r\nESQL/C\r\n\u0001 Patent application\r\nThis slide summarizes the achievements of the MISTRAL project with respect to \r\nthe UB-Tree prototype implementation.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/7767831e-daa3-47fd-a723-f71748b0509c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5693d7f7e140ec62f8d9ab991e62d8c2698f08b37b2a527e93e8fcc58628790d",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1153db72-c5f5-4a16-b376-df3a763f88ce",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 34,
            "page_width": 595,
            "page_height": 842,
            "content": "34\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n34\r\nStandard Query Pattern\r\nSELECT * FROM table\r\nWHERE (A1 BETWEEN a1 AND b1) AND\r\n(A2 BETWEEN a2 AND b2) AND\r\n.....\r\n(An BETWEEN an AND bn) \r\nORDER BY Ai\r\n, Aj, Ak, ...\r\n(GROUP BY Ai\r\n, Aj, Ak, ...)\r\nIn addition to range queries, sorting is a very important and frequent operation in \r\nrelational databases. Sorting is not only used for ordering, but also provides a \r\nbasis for efficient algorithms for duplicate elimination or join operations as well \r\nas for group by operations. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/1153db72-c5f5-4a16-b376-df3a763f88ce.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6d6c886d5656beb9355dadee5303691e0ec0721c82414ed4e808c834b4c8914f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a1132acc-83c7-4113-ba3d-45466c725fda",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 35,
            "page_width": 595,
            "page_height": 842,
            "content": "35\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n35\r\nZ-Order/Tetris Order\r\n0 3 1 2 5 4 7 6\r\n1\r\n0\r\n4\r\n2\r\n5\r\n3\r\n7\r\n6\r\nA\r\n2\r\nA\r\n1\r\n0\r\n63\r\n0 3 1 2 5 4 7 6\r\n1\r\n0\r\n4\r\n2\r\n5\r\n3\r\n7\r\n6\r\nA\r\n2\r\nA\r\n1\r\n0\r\n63\r\nTj(x) = xj ◦ Z(x1,...,xj-1,xj+1,...,xd)\r\n1\r\n0\r\n4\r\n2\r\n5\r\n3\r\n7\r\n6\r\n0 3 1 2 5 4 7 6 A\r\n2\r\nA1\r\nSorting a Z-ordered space means to introduce a Tetris order, an ordering that \r\nextracts a single attribute out of a Z-ordered space. The Z-regions are read in this \r\nTetris order as opposed to the Z-order that the range query uses to retrieve Z\u0002regions. Please confer to [MZB99] for detailed information about Tetris order \r\nand the Tetris algorithm.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/a1132acc-83c7-4113-ba3d-45466c725fda.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cd963984a30b972f573668e0b9dac73625a65e3e2a5adcc98509c9fa6e0c1bc4",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1fabb6af-2ef7-4180-a173-35063edea404",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 36,
            "page_width": 595,
            "page_height": 842,
            "content": "36",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/1fabb6af-2ef7-4180-a173-35063edea404.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2db460dcf24b193068a0d4ebb095e3a7a247eb2d730f75d722423c5c059de4f1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e468ebb4-bd2f-488f-8cc1-9aa96ac9b772",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 37,
            "page_width": 595,
            "page_height": 842,
            "content": "37\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n37\r\nSummary Tetris\r\n● Combines sort process and evaluation of multi\u0002attribute restrictions in one processing step\r\n● I/O-time linear w.r. to result set size \r\n● temporary storage sublinear w.r. to result set size\r\n● Sorting no longer a “blocking operation” \r\n\u0001 Patent application\r\nThis slide summarizes the main results of the Tetris algorithm.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/e468ebb4-bd2f-488f-8cc1-9aa96ac9b772.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d0cfbd026a98a24995bc4d4c77324dc39e697ad4f85181f2831969847eb61dee",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 435
      },
      {
        "segments": [
          {
            "segment_id": "ca9735d6-3b98-41a9-b2ae-92279833cfcf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 38,
            "page_width": 595,
            "page_height": 842,
            "content": "38\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n38\r\nIntegration Issues\r\n● Starting point with TransBase:\r\n– clustering B*-Tree\r\n– appropriate data type for Z-values: variable bit strings\r\n● Modifications to B*-Tree in TransBase:\r\n– support for computed keys: \r\n» Z-values are only stored in the index, not together with the\r\ntuples \r\n» tuples are stored in Z-order\r\n– generalization of splitting algorithm:\r\n» computed page separators for improved space partitioning\r\nIn the MDA project between FORWISS, GfK, and TransAction Software the \r\nUB-Tree was integrated seamlessly into the RDBMS TransBase. The resulting \r\nproduct TransBase HyperCube is shipping since Systems 1999 and was awarded \r\nthe 2001 IT-Prize by EUROCASE and the European Commission.\r\nThe TransBase RDBMS already provided clustering B*-Trees and a bitstring \r\ndatatype, which are a pre-requisite for a UB-Tree implementation. These \r\nimplementations had to be slightly modified and enhanced in order to store the Z\u0002addresses used by the UB-Tree.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/ca9735d6-3b98-41a9-b2ae-92279833cfcf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7efe5fc26fcbd81394f03f9ab9247155c69170387702829266d1e7349afbaaff",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "bc81e4cf-0611-41c4-94ea-fb1c603d3583",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 39,
            "page_width": 595,
            "page_height": 842,
            "content": "39\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n39\r\n● Minor extensions:\r\n● Major extensions:\r\n● New modules:\r\n● NO changes for:\r\n– DML\r\n– Multi-user support, i.e., \r\nlocking, logging facilities\r\n\u0001 handled by underlying B*-\r\nTree Access Structure \r\nManager\r\nQuery \r\nProcessor\r\nLock\r\nManager\r\nCatalog\r\nManager\r\nCreation of UB-Trees\r\nSQL\r\nCompiler/Interpreter\r\nExtend Parser with \r\nDDL statements\r\nfor UB-Trees\r\nQuery\r\nOptimizer\r\nNew Rules+Cost Model\r\nfor UB-Trees\r\nUB-Tree Range \r\nQuery Support\r\nUB-Tree Modules:\r\nTransformation Functions, Page Splitting, \r\nRange Query\r\nStorage\r\nManager\r\nRecovery \r\nManager\r\nBuffer\r\nManager\r\nCommunication Manager\r\nThis slide shows the extensions that had to be made to TransBase in order to \r\nincorporate the UB-Tree. It is important to note that UB-Trees rely on an \r\nunderlying B-Tree; thus locking, caching and recovery did not need to be \r\nmodified. Further details about the kernel integration can be found in [RMF+00].",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/bc81e4cf-0611-41c4-94ea-fb1c603d3583.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a48f4f6768dd28941fe899eb2251ae519eace99ff2c609c71b4b9275e43bf4b6",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "dc4d6055-ae60-46b4-98f8-b6122140a017",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 40,
            "page_width": 595,
            "page_height": 842,
            "content": "40\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n40\r\nSummary Integration\r\n● Integration of the UB-Tree has been achieved within one year\r\n● TransBase HyperCube is shipping since Systems 1999 and \r\nwas awarded the 2001 IT-Prize by EUROCASE and the \r\nEuropean Commission\r\n● UB-Trees speed up relational DBMS for multidimensional \r\napplications like Geo-DB and data warehouse up to two orders \r\nof magnitude\r\n● Speedup is even more dramatic for CD-ROM databases \r\n(archives)\r\nThis slide summarizes the integration of the UB-Tree into TransBase.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/dc4d6055-ae60-46b4-98f8-b6122140a017.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cde21d006ba2c178db51938a683fbe0dd8bb540210140f3d308550ff4dc68114",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 363
      },
      {
        "segments": [
          {
            "segment_id": "f273c847-7b06-48a1-8f72-26ad34b79285",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 41,
            "page_width": 595,
            "page_height": 842,
            "content": "41\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n41\r\nApplication Fields of the UB-Tree\r\n● Data Warehouses\r\n– Measurements with SAP BW Data\r\n» UB-Tree/API for Oracle\r\n» UB-Tree on top of Oracle outperforms conventional B-Tree and \r\nBitmap indexes in Oracle!\r\n– Measurements with the GfK Data Warehouse\r\n» UB-Tree in TransBase HyperCube\r\n» significant performance increases (Factor of 10)\r\n● Geographic Databases\r\n● „Multidimensional Problems“\r\n– Archiving Systems, Lifecycle-Management, Data Mining, OLAP, OLTP, etc.\r\nThe UB-Tree can be applied to any large record set that is queried and retrieved \r\nby multidimensional range queries.\r\nA typical application is data warehousing: Measurements with an UB-Tree API \r\non top of Oracle compared to built-in Oracle indexes (including bitmap and IOT) \r\nshowed speed-ups in favor of the UB-Tree, sometimes of more than two orders of \r\nmagnitude. Similar results have been achieved with TransBase HyperCube\r\ncompared to native TransBase indexes.\r\nThe product TransBase is also used for GIS database, for instance for tracking the \r\nsignal quality of the cells of a mobile phone network. Further application areas \r\nfor TransBase HyperCube include archiving systems, data ming, and lifecycle \r\nmanagement. Due to the good update and multi-user characteristics, UB-Trees \r\ncan also be used to organize OLTP databases. \r\nPerformance measurements details and applications of the UB-Tree and \r\nTransBase HyperCube can be found under http://mistral.in.tum.de and \r\nhttp://www.transaction.de",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/f273c847-7b06-48a1-8f72-26ad34b79285.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f0dfee65caf90264aab307c9380988d0d070346f3ec56b1bb7512fd67854dc33",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "4de86dae-6993-418a-9f5f-67d8beed8bf3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 42,
            "page_width": 595,
            "page_height": 842,
            "content": "42\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n42\r\nThe UB-Tree\r\nThe figure above shows the Z-region partitioning for a GIS database storing point \r\ndata for Africa, Europe and the Americas.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/4de86dae-6993-418a-9f5f-67d8beed8bf3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dcf347c2d065bbbe11f149d667857c239942da9ef3c0948a4936e59b2f6be219",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d7633922-3069-4b5c-9963-89bd0a12f80e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595,
              "height": 842
            },
            "page_number": 43,
            "page_width": 595,
            "page_height": 842,
            "content": "43\r\n© 2000 FORWISS, http://mistral.in.tum.de/results/presentations/ppt/ubtree.ppt\r\nFORWISS\r\n43\r\nFurther Information\r\nTetris\r\nHI\r\nMISTRAL\r\nUB-Tree\r\nTemptris\r\nhttp://mistral.in.tum.de\r\nmistral@in.tum.de",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/c3c6312f-6357-473f-bfe5-25c9e12a1904/images/d7633922-3069-4b5c-9963-89bd0a12f80e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041613Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=92d9e8011538f1daacaff7ca2a38732cfc2daea41b97980e82c7e60981ebd950",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 262
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "MISTRAL\nProcessing Relational Queries Using a Multidimensional Access Method\n"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Volker Markl\nRudolf Bayer\n"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "\"2000\"\n"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "Africa, Europe, Americas"
        }
      ]
    }
  }
}