{
  "file_name": "Lossless Source Coding (03_Lossless-Coding-WS12).pdf",
  "task_id": "fed617d5-0b6f-48a5-adf8-1b4b09bd4b76",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "988e7d09-378c-444a-9d2c-e2becfe22aed",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 1,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Introduction\r\nLossless Source Coding - Contents\r\nClassification of Lossless Source Codes\r\nVariable-Length Coding for Scalars\r\nUnique Decodability\r\nEntropy\r\nThe Huffman Algorithm\r\nConditional Huffman Codes\r\nAdaptive Huffman Codes\r\nVariable-Length Coding for Vectors\r\nHuffman Codes for Fixed-Length Vectors\r\nHuffman Codes for Variable-Length Vectors\r\nElias Coding and Arithmetic Coding\r\nElias Coding\r\nArithmetic Coding\r\nProbability Interval Partitioning Entropy Coding\r\nComparison of Lossless Coding Techniques\r\nAdaptive Coding\r\nOctober 25, 2012 1 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/988e7d09-378c-444a-9d2c-e2becfe22aed.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e721000d58232807d36c7897d9e9d61f675ad3716907c04e86fae8ed440da123",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "82d76733-b837-4853-b8f1-f7694f948479",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 2,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Introduction\r\nLossless Source Coding - Overview\r\nReversible mapping of sequence of discrete source symbols into sequences of\r\ncodewords\r\nOther names: noiseless coding, entropy coding\r\nOriginal source sequence can be exactly reconstructed - not the case in lossy\r\ncoding\r\nBit rate reduction possible, if source data contain statistical properties that\r\nare exploitable for data compression\r\nOctober 25, 2012 2 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/82d76733-b837-4853-b8f1-f7694f948479.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dfa756a517ebacb1869c3ada6014d509b1dee2b5d0a1b1f710aff9a7c3f7a013",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9cb3c45b-dd19-4315-aa6e-6645e174e5c7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 3,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Introduction\r\nLossless Source Coding - Terminology\r\nMessage s\r\n(L) ={s0, · · · , sL−1} drawn from stochastic process S ={Sn}\r\nSequence b\r\n(K) ={b0, · · · , bK−1} of K bits (bk ∈ B={0, 1})\r\nProcess of lossless coding: Message s\r\n(L)\r\nis converted to b\r\n(K)\r\nAssume:\r\nSubsequence s\r\n(N) = {sn, · · · , sn+N−1} with 1 ≤ N ≤ L and\r\nBits b\r\n(`)\r\n(s\r\n(N)\r\n) = {b0, · · · , b`−1} assigned to it\r\nLossless source code\r\nEncoder mapping:\r\nb\r\n(`) = γ\r\n\r\ns\r\n(N)\r\n\u0001\r\n(1)\r\nDecoder mapping:\r\ns\r\n(N) = γ−1\r\n\r\nb\r\n(`)\r\n\u0001\r\n= γ\r\n−1\r\n\r\nγ\r\n\r\ns\r\n(N)\r\n\u0001 \u0001 (2)\r\nOctober 25, 2012 3 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/9cb3c45b-dd19-4315-aa6e-6645e174e5c7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9dcea96c7edd1a42236f234baec7b5dec052a2013ff143fc9ec399f2409c3d81",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "48ceaaae-b2a8-4c4c-9eef-3b675519e280",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 4,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Introduction\r\nClassification of Lossless Source Codes\r\nLossless source code\r\nEncoder mapping:\r\nb\r\n(`) = γ\r\n\r\ns\r\n(N)\r\n\u0001\r\n(3)\r\nDecoder mapping:\r\ns\r\n(N) = γ−1\r\n\r\nb\r\n(`)\r\n\u0001\r\n= γ\r\n−1\r\n\r\nγ\r\n\r\ns\r\n(N)\r\n\u0001 \u0001 (4)\r\nFixed-to-fixed mapping: N and ` are both fixed (discussed as special case of\r\nfixed-to-variable)\r\nFixed-to-variable mapping: N fixed and ` variable - Huffman algorithm for\r\nscalars and vectors (discussed in lecture)\r\nVariable-to-fixed mapping: N variable and ` fixed - Tunstall\r\ncodes [Tunstall, 1967, Savari and Gallager, 1997] (not discussed in lecture)\r\nVariable-to-variable mapping: ` and N are both variable - arithmetic codes\r\nand PIPE codes (discussed in lecture)\r\nOctober 25, 2012 4 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/48ceaaae-b2a8-4c4c-9eef-3b675519e280.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dd3868054f15bad320c4ead28c64ebb6bb6fc76eb9f1c9a48a8171dab6c9d9c4",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "070e62ed-c2b7-4407-a62f-08fbd3e7ae8a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 5,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nVariable-Length Coding for Scalars\r\nAssign a separate codeword to each scalar symbol sn of a message s\r\n(L)\r\nAssume: message s\r\n(L) generated by stationary discrete random process\r\nS = {Sn}\r\nRandom variables Sn = S with symbol alphabet A = {a0, · · · , aM−1} and\r\nmarginal pmf p(a) = P(S = a)\r\nLossless source code: Assign each ai to binary codeword\r\nbi = {b\r\ni\r\n0\r\n, · · · , bi\r\n`(ai)−1\r\n}, length `(ai) ≥ 1\r\nAverage codeword length\r\n¯` = E {`(S)} =\r\nM\r\nX−1\r\ni=0\r\np(ai) `(ai) (5)\r\nOctober 25, 2012 5 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/070e62ed-c2b7-4407-a62f-08fbd3e7ae8a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f44d20e1d480c3b026908ab720dc81da9b02f3bec0c31169ac413171a250cc65",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 484
      },
      {
        "segments": [
          {
            "segment_id": "c08d56f2-1535-4378-9463-677be5041a90",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 6,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nOptimization Problem\r\nAverage code word length is given as\r\n¯` =\r\nK\r\nX−1\r\nk=0\r\np(ak) · `(ak) (6)\r\nThe goal of the entropy code design problem is to minimize ¯` while being\r\nable to uniquely decode\r\nai p(ai) code A code B code C code D code E\r\na0 0.5 0 0 0 00 0\r\na1 0.25 10 01 01 01 10\r\na2 0.125 11 010 011 10 110\r\na3 0.125 11 011 111 110 111\r\n¯` 1.5 1.75 1.75 2.125 1.75\r\nOctober 25, 2012 6 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/c08d56f2-1535-4378-9463-677be5041a90.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cf4edad9b3ac25943360cf5c0f63e4b6ef569f87b7385fc29a27092e95cf4150",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a032d825-8627-47f2-8134-fda65cc028a8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 7,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nUnique Decodability and Prefix Codes\r\nFor unique decodability, we need to generate a code γ : ai → bi such that\r\nif ak 6= aj then bk 6= bj (7)\r\nFor sequences of symbols, above constraint needs to be extended to the\r\nconcatenation of multiple symbols\r\n→ For a uniquely decodable code, a sequence of code words can only be\r\ngenerated by one possible sequence of source symbols.\r\nOne class of codes that satisfies the constraint of unique decodability is called\r\nprefix codes\r\nA code is called a prefix code if no code word is a prefix of any other code\r\nword\r\nIt is obvious that if condition (7) is satisfied and the code is a prefix code,\r\nthen a concatenation of symbols can be uniquely decodable\r\nOctober 25, 2012 7 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/a032d825-8627-47f2-8134-fda65cc028a8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6675db0f9d48412671243443924b76372bd777ec7dd795f2ca8051d7eb09f723",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1b63afdc-baf0-4d5a-9199-fac3d9cca86a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 8,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nBinary Code Trees\r\nPrefix codes can be represented by trees\r\n‘\r0\r’\r\r\n‘\r0\r’\r\r\n‘\r0\r’\r\r\n‘\r0\r’\r\r\n’\r10\r’\r\r\n‘\r1\r’\r\r\n‘\r1\r’\r\r\n‘\r1\r’\r ‘\r110\r’\r\r\n‘\r111\r’\r\r\nroot node\r\r\ninterior\r\r\nnode\r\r\nterminal \r\r\nnode\r\r\nbranch\r\r\n‘\r0\r’\r\r\n‘\r0\r’\r\r\n‘\r0\r’\r\r\n‘\r0\r’\r\r\n’\r10\r’\r\r\n‘\r1\r’\r\r\n‘\r1\r’\r\r\n‘\r1\r’\r ‘\r110\r’\r\r\n‘\r111\r’\r\r\nroot node\r\r\ninterior\r\r\nnode\r\r\nterminal \r\r\nnode\r\r\nbranch\r\r\nA binary tree contains nodes with two branches (labelled as ’0’ and ’1’)\r\nleading to other nodes starting from a root node\r\nA node from which branches depart is called an interior node while a node\r\nfrom which no branches depart is called a terminal node\r\nA prefix code can be contracted by assigning letters of the alphabet A to\r\nterminal nodes of a binary tree\r\nOctober 25, 2012 8 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/1b63afdc-baf0-4d5a-9199-fac3d9cca86a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=df5f8fb121e24327b3a4ad5f3062fffdb5f4c686fe17fc8bace304a6779fb9c8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 401
      },
      {
        "segments": [
          {
            "segment_id": "176547f5-6864-4deb-9192-c0002e4f837d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 9,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nParsing of Prefix Codes\r\nGiven the code word assignment to terminal nodes of the binary tree, the\r\nparsing rule for this prefix code is given as follows\r\n1 Set the current node ni equal to the root node\r\n2 Read the next bit b from the bitstream\r\n3 Follow the branch labeled with the value of b from the current node ni to the\r\ndescendant node nj\r\n4 If nj is a terminal node, return the associated alphabet letter and proceed with\r\nstep 1 Otherwise, set the current node ni equal to nj and repeat the previous\r\ntwo steps\r\nPrefix codes are not only uniquely decodable, but also instantaneously\r\ndecodable\r\nOctober 25, 2012 9 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/176547f5-6864-4deb-9192-c0002e4f837d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9d607d8246c8bd8616c16d87cc93a2c157b6d8af8b4ea9eed2df5c4a46fbefb9",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6a1a0190-dce2-4739-898b-ec529f60635a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 10,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nUniquely Decodability: Kraft Inequality\r\nAssume fully balanced tree with depth `max (=longest code word)\r\nCodewords assigned to nodes with codeword length `(ak) ≤ `max\r\nEach choice with `(ak) ≤ `max eliminates 2\r\n`max−`(ak) possibilities of code\r\nword assignment at level `max, example:\r\n→ `max − `(ak) = 0, one option is covered\r\n→ `max − `(ak) = 1, two options are covered\r\nNumber of terminal nodes is less than or equal to number of terminal nodes\r\nin balanced tree with depth `max, which is 2\r\n`max\r\nK\r\nX−1\r\nk=0\r\n2\r\n`max−`(ak) ≤ 2`max (8)\r\nA code γ may be uniquely decodable (McMillan) if\r\nKraft inequality: ζ(γ) =\r\nK\r\nX−1\r\nk=0\r\n2\r\n−`(ak) ≤ 1 (9)\r\nProof: [Cover and Thomas, 2006, p.116] or [Wiegand and Schwarz, 2011, p.25]\r\nOctober 25, 2012 10 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/6a1a0190-dce2-4739-898b-ec529f60635a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=97c37dfd2129ca34b3e7db5c6b33c1d98c03c1e6f07aabbc7941a613967bcd0c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f6b9e3ca-a7f6-4591-a24d-5223c1947419",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 11,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nLower Bound for Average Codeword Length I\r\nAverage codeword length\r\n¯` =\r\nM\r\nX−1\r\ni=0\r\np(ai) `(ai) = −\r\nM\r\nX−1\r\ni=0\r\np(ai) log2\r\n\u0012\r\n2\r\n−`(ai)\r\np(ai)\r\n\u0013\r\n−\r\nM\r\nX−1\r\ni=0\r\np(ai) log2 p(ai) (10)\r\nWith the definition q(ai) = 2−`(ai)/\r\n\u0010PM−1\r\nk=0 2\r\n−`(ak)\r\n\u0011\r\n, we obtain\r\n¯` = − log2\r\n M\r\nX−1\r\ni=0\r\n2\r\n−`(ai)\r\n!\r\n−\r\nM\r\nX−1\r\ni=0\r\np(ai) log2\r\n\u0012\r\nq(ai)\r\np(ai)\r\n\u0013\r\n−\r\nM\r\nX−1\r\ni=0\r\np(ai) log2 p(ai) (11)\r\nWe will show that\r\n¯` ≥ −\r\nM\r\nX−1\r\ni=0\r\np(ai) log2 p(ai) = H(S) (Entropy) (12)\r\nOctober 25, 2012 11 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/f6b9e3ca-a7f6-4591-a24d-5223c1947419.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=16834c3e4c17c2e3bd369e36b8959069510a54a4b507c6bbb1b6b2f0b7f0919b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1b3a1cbe-815e-4eaf-82a6-d5cd6c7adbfb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 12,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nHistorical Reference\r\nC. E. Shannon published entropy as a measure for average information\r\nPublished 1 year later as: ”The Mathematical Theory of Communication”\r\nOctober 25, 2012 12 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/1b3a1cbe-815e-4eaf-82a6-d5cd6c7adbfb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=446be9f677e508abc710309a5087ee9b0901164213500b1fd237b361fbf25510",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 412
      },
      {
        "segments": [
          {
            "segment_id": "5a9111cf-dc6d-4f24-ac91-bcae5aa9832e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 13,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nLower Bound for Average Codeword Length II\r\nAverage codeword length\r\n¯` = − log2\r\n M\r\nX−1\r\ni=0\r\n2\r\n−`(ai)\r\n!\r\n−\r\nM\r\nX−1\r\ni=0\r\np(ai) log2\r\n\u0012\r\nq(ai)\r\np(ai)\r\n\u0013\r\n−\r\nM\r\nX−1\r\ni=0\r\np(ai) log2 p(ai) (13)\r\nKraft inequality PM−1\r\ni=0 2\r\n−`(ai) ≤ 1 applicable to first term\r\n− log2\r\n M\r\nX−1\r\ni=0\r\n2\r\n−`(ai)\r\n!\r\n≥ 0 (14)\r\nInequality ln x ≤ x − 1 (with equality if and only if x = 1), applicable to\r\nsecond term\r\n−\r\nM\r\nX−1\r\ni=0\r\np(ai) log2\r\n\u0012\r\nq(ai)\r\np(ai)\r\n\u0013\r\n≥\r\n1\r\nln 2\r\nM\r\nX−1\r\ni=0\r\np(ai)\r\n\u0012\r\n1 −\r\nq(ai)\r\np(ai)\r\n\u0013\r\n=\r\n1\r\nln 2 M\r\nX−1\r\ni=0\r\np(ai) −\r\nM\r\nX−1\r\ni=0\r\nq(ai)\r\n!\r\n= 0 (15)\r\nOctober 25, 2012 13 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/5a9111cf-dc6d-4f24-ac91-bcae5aa9832e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=30565815552755ee72ec5013b809b3e78ae21a48b12823ef6ff08b32459f9dd1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "15f6ce5d-10a6-44d0-8172-672bdd66d544",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 14,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nEntropy\r\nAverage codeword length ¯` for uniquely decodable codes is bounded\r\n¯` ≥ H(S) = E {− log2 p(S)} = −\r\nM\r\nX−1\r\ni=0\r\np(ai) log2 p(ai) (16)\r\nRedundancy of a code is given by the difference\r\n% = ¯` − H(S) ≥ 0 (17)\r\nRedundancy is zero only, if the first and second term on the right side of (13)\r\nare equal to 0\r\nUpper bound of ¯`: choose `(ai) = d− log2 p(ai)e, ∀ai ∈ A\r\n¯` =\r\nM\r\nX−1\r\ni=0\r\np(ai) d− log2 p(ai)e <\r\nM\r\nX−1\r\ni=0\r\np(ai) (1− log2 p(ai)) = H(S) + 1 (18)\r\nBounds on minimum average codeword length ¯`min\r\nH(S) ≤ ¯`min < H(S) + 1 (19)\r\nOctober 25, 2012 14 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/15f6ce5d-10a6-44d0-8172-672bdd66d544.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a3d21da26e67397fc80818186f4236835cc2e6092a31f932ae8dd4ace06c7f68",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "12da98d7-aebb-45aa-ac4f-d2ddafab5dee",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 15,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nEntropy of a Binary Source\r\nA binary source has probabilities p(0) = p and p(1) = 1 − p\r\nThe entropy of the binary source is given as\r\nH(S) = −p log2 p − (1 − p) log2(1 − p) = Hb(p) (20)\r\nwith Hb(x) being the so-called binary entropy function\r\n0 0.25 0.5 0.75 1\r\n0\r\n0.2\r\n0.4\r\n0.6\r\n0.8\r\n1\r\np(a0)\r\nR [bit/symbol]\r\nOctober 25, 2012 15 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/12da98d7-aebb-45aa-ac4f-d2ddafab5dee.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c6b43df1c634a7844b47cef9a1aff0ea0277278d41775233d1c01c8c07e5f24e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "21304d0f-a720-4ebd-a8a4-09e29dc031a1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 16,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nThe Huffman Algorithm\r\nNow the question arises how to generate such a prefix code\r\nThe answer to this question was given by D. A. Huffman in\r\n1952 [Huffman, 1952]\r\nThe so-called Huffman algorithm always finds a prefix-free code with\r\nminimum redundancy\r\nFor a proof that Huffman codes are optimal instantaneous codes (with\r\nminimum expected length), see [Cover and Thomas, 2006, p. 124ff]\r\nThe code tree is obtained as follows:\r\n1 Given an ensemble representing a memoryless discrete source\r\n2 Pick the two symbols with lowest probabilities and merge them into a new\r\nauxiliary symbol and calculate its probability\r\n3 If more than one symbol remains, repeat the previous step\r\n4 Convert the code tree into a prefix code\r\nOctober 25, 2012 16 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/21304d0f-a720-4ebd-a8a4-09e29dc031a1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=de7bad11252e63498f4f9d54683f44e6a0ed4e5ef7e4330bdd026402cde94233",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 476
      },
      {
        "segments": [
          {
            "segment_id": "af299718-6d83-4a0f-bd7d-e0edb2af8c43",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 17,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nExample for the design of a Huffman code\r\n‘0’ P=0.03\r\n‘1’\r\nP=0.06\r\n‘0’\r\n‘1’ P=0.13\r\n‘0’\r\n‘1’ P=0.27\r\n‘0’\r\n‘1’ P=0.43\r\n‘0’\r\n‘1’\r\nP=0.57\r\n‘0’\r\n‘1’\r\n‘0’\r\n‘1’\r\nP(7)=0.29\r\nP(6)=0.28 \r\nP(5)=0.16 \r\nP(4)=0.14\r\nP(3)=0.07\r\nP(2)=0.03\r\nP(1)=0.02\r\nP(0)=0.01 \r\n’11’\r\n’10’\r\n‘01’\r\n‘001’\r\n‘0001’\r\n‘00001’\r\n‘000001’\r\n‘000000’\r\nOctober 25, 2012 17 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/af299718-6d83-4a0f-bd7d-e0edb2af8c43.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e003d2b90481eb4fcd63fe30a80158a05b377072b09ae0cf866d2ad3e23b4354",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1e213524-67b2-40bd-a0cc-86a91177e602",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 18,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nConditional Huffman Codes\r\nRandom process {Sn} with memory: design VLC for conditional pmf\r\nExample:\r\nStationary discrete Markov process, A = {a0, a1, a2}\r\nConditional pmfs p(a|ak) = P(Sn =a | Sn−1 =ak) with k = 0, 1, 2\r\na a0 a1 a2 entropy\r\np(a|a0) 0.90 0.05 0.05 H(Sn|a0) = 0.5690\r\np(a|a1) 0.15 0.80 0.05 H(Sn|a1) = 0.8842\r\np(a|a2) 0.25 0.15 0.60 H(Sn|a2) = 1.3527\r\np(a) 0.64 0.24 0.1 H(S) = 1.2575\r\nDesign Huffman code for conditional pmfs\r\nai\r\nHuffman codes for conditional pmfs Huffman code\r\nSn− for marginal pmf 1 = a0 Sn−1 = a1 Sn−1 = a2\r\na0 1 00 00 1\r\na1 00 1 01 00\r\na2 01 01 1 01\r\n¯`0 = 1.1¯`1 = 1.2¯`2 = 1.4¯` = 1.3556\r\nOctober 25, 2012 18 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/1e213524-67b2-40bd-a0cc-86a91177e602.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ab45abad1c86572f263839b5521fa310cd30edccc2d0d77da287c6e4fda5a3fa",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a3924a0e-b04b-4906-9b37-621528808a7d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 19,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nAverage Codeword Length of Conditional Huffman Codes\r\nAverage codeword length ¯`k = ¯`(Sn−1 =ak) is bounded by\r\nH(Sn|ak) ≤ ¯`k < H(Sn|ak) + 1 (21)\r\nwith conditional entropy of Sn given event {Sn−1 =ak}\r\nH(Sn|ak) = H(Sn|Sn−1 =ak) = −\r\nM\r\nX−1\r\ni=0\r\np(ai|ak) log2 p(ai|ak) (22)\r\nResulting average codeword length\r\n¯` =\r\nM\r\nX−1\r\nk=0\r\np(ak)\r\n¯`k (23)\r\nConditional entropy H(Sn|Sn−1) of Sn given random variable Sn−1\r\nH(Sn|Sn−1) = E {− log2 p(Sn|Sn−1)} =\r\nM\r\nX−1\r\nk=0\r\np(ak) H(Sn|Sn−1 =ak) (24)\r\nOctober 25, 2012 19 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/a3924a0e-b04b-4906-9b37-621528808a7d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ec99d62836cb2a69ef6b5c27ed27e5f246d1094486becf1a728267d4f275f5d0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "8a80a317-b71d-4b91-bbe5-40e489a1418e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 20,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Scalars\r\nConditioning may reduce lower bound on transmission bit rate\r\nMinimum average codeword length ¯`min\r\nH(Sn|Sn−1) ≤ ¯`min < H(Sn|Sn−1) + 1 (25)\r\nConditioning May Lower Bit Rate\r\nH(S) − H(Sn|Sn−1) = −\r\nM\r\nX−1\r\ni=0\r\nM\r\nX−1\r\nk=0\r\np(ai, ak)\r\n\u0010\r\nlog2 p(ai) − log2 p(ai|ak)\r\n\u0011\r\n= −\r\nM\r\nX−1\r\ni=0\r\nM\r\nX−1\r\nk=0\r\np(ai, ak) log2\r\np(ai) p(ak)\r\np(ai, ak)\r\n≥ 0 (26)\r\nIn the example:\r\nNo conditioning: H(S) = 1.2575, `min = 1.3556\r\nConditioning: H(Sn|Sn−1) = 0.7331, `min = 1.1578\r\nOctober 25, 2012 20 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/8a80a317-b71d-4b91-bbe5-40e489a1418e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=eb7ade9b14c1af4acb8ef374ffd9600bebed067dd0a4884ecb6923962661f865",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 387
      },
      {
        "segments": [
          {
            "segment_id": "96b9f302-156a-4a67-8104-7f055d40c737",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 21,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Vectors\r\nHuffman Coding of Fixed-Length Vectors\r\nStationary discrete random sources S = {Sn} with an M-ary alphabet\r\nA = {a0, · · · , aM−1}\r\nN symbols are coded jointly: design Huffman code joint pmf\r\np(a0, · · · , aN−1) = P(Sn =a0, · · · , Sn+N−1 =aN−1)\r\nAverage codeword length ¯`min per symbol is bounded\r\nH(Sn, · · · , Sn+N−1)\r\nN\r\n≤ ¯`min <\r\nH(Sn, · · · , Sn+N−1)\r\nN\r\n+\r\n1\r\nN\r\n(27)\r\nwhere the block entropy is defined by\r\nH(Sn, · · · , Sn+N−1) = E {− log2 p(Sn, · · · , Sn+N−1)} (28)\r\nThe following limit is called entropy rate\r\nH¯ (S) = lim\r\nN→∞\r\nH(S0, · · · , SN−1)\r\nN\r\n(29)\r\nOctober 25, 2012 21 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/96b9f302-156a-4a67-8104-7f055d40c737.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b840e85df6bcab74ab0bf03bc15771dc71e4659f68d522f030d6ed65c5755db2",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "96cf7cf9-21d0-4376-8c75-bbba3ba9aa58",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 22,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Vectors\r\nEntropy Rate\r\nEntropy rate\r\nH¯ (S) = lim\r\nN→∞\r\nH(S0, · · · , SN−1)\r\nN\r\n(30)\r\nThe limit in (30) always exists for stationary sources [Gallager, 1968]\r\nEntropy rate H¯ (S): greatest lower bound for the average codeword length ¯`\r\nper symbol\r\n¯` ≥ H¯ (S) (31)\r\nEntropy rate for iid processes\r\nH¯ (S) = lim\r\nN→∞\r\nE {− log2 p(S0, S1, · · · , SN−1)}\r\nN\r\n= lim\r\nN→∞\r\nPN−1\r\nn=0 E {− log2 p(Sn)}\r\nN\r\n= H(S) (32)\r\nOctober 25, 2012 22 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/96cf7cf9-21d0-4376-8c75-bbba3ba9aa58.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=03efb3cfbf3819f785cb67c9dd657f69d9c219946316414e446e6aa6e7a27317",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ca95e444-18c5-4626-b891-45aae368f540",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 23,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Vectors\r\nEntropy Rate for Markov Processes\r\nEntropy rate for stationary Markov processes\r\nH¯ (S) = lim\r\nN→∞\r\nE {− log2 p(S0, S1, · · · , SN−1)}\r\nN\r\n= lim\r\nN→∞\r\nE {− log2 p(S0)} +\r\nPN−1\r\nn=1 E {− log2 p(Sn|Sn−1)}\r\nN\r\n= H(Sn|Sn+1) (33)\r\nExample: joint Huffman coding of 2 events and ¯` vs. table size NC\r\naiak p(ai, ak) codewords\r\na0a0 0.58 1\r\na0a1 0.032 00001\r\na0a2 0.032 00010\r\na1a0 0.036 0010\r\na1a1 0.195 01\r\na1a2 0.012 000000\r\na2a0 0.027 00011\r\na2a1 0.017 000001\r\na2a2 0.06 0011\r\nN ¯` NC\r\n1 1.3556 3\r\n2 1.0094 9\r\n3 0.9150 27\r\n4 0.8690 81\r\n5 0.8462 243\r\n6 0.8299 729\r\n7 0.8153 2187\r\n8 0.8027 6561\r\n9 0.7940 19683\r\nOctober 25, 2012 23 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/ca95e444-18c5-4626-b891-45aae368f540.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c1bdfc5d198ff9b7aabfd6a650574c3ba7714d4267d9dda04f06124d03777487",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "690d47ae-6e4e-45e8-8366-8bdec85019fc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 24,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Vectors\r\nHuffman Codes for Variable-Length Vectors\r\nAssign codewords to variable-length vectors: V2V codes\r\nAssociate each leaf node Lk of the symbol tree with a codeword\r\nUse pmf of leaf nodes p(Lk) for Huffman design\r\nAverage number of bits per alphabet letter\r\n¯` =\r\nPNL−1\r\nk=0 p(Lk) `k\r\nPNL−1\r\nk=0 p(Lk) Nk\r\n(34)\r\nwhere Nk denotes number of alphabet letters associated with Lk\r\nOctober 25, 2012 24 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/690d47ae-6e4e-45e8-8366-8bdec85019fc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6d9fe806be883d52f207f95f90a7c0f529a5f8bd19306970196ec13caee03d24",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 440
      },
      {
        "segments": [
          {
            "segment_id": "aaa8f6f2-5caa-4942-92ff-b3a7f7c5eb1c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 25,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Variable-Length Coding for Vectors\r\nV2V Code Performance\r\nExample Markov process: H(Sn|Sn−1) = 0.7331\r\nFaster reduction of ¯` with increasing NC compared to fixed-length vector\r\nHuffman coding\r\nak p(Lk) codewords\r\na0a0 0.5799 1\r\na0a1 0.0322 00001\r\na0a2 0.0322 00010\r\na1a0 0.0277 00011\r\na1a1a0 0.0222 000001\r\na1a1a1 0.1183 001\r\na1a1a2 0.0074 0000000\r\na1a2 0.0093 0000001\r\na2 0.1708 01\r\nNC\r\n¯`\r\n5 1.1784\r\n7 1.0551\r\n9 1.0049\r\n11 0.9733\r\n13 0.9412\r\n15 0.9293\r\n17 0.9074\r\n19 0.8980\r\n21 0.8891\r\nOctober 25, 2012 25 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/aaa8f6f2-5caa-4942-92ff-b3a7f7c5eb1c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0ea23b94151b17cebe2ebfb118c434cf9508606278fae039102817d3f5dfc6fe",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a95a8f1c-a260-48c6-ad1d-37120898b72e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 26,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nElias Coding and Arithmetic Coding\r\nDrawbacks of block Huffman codes: large table sizes\r\nAnother class of uniquely decodable codes are Elias codes and Arithmetic\r\ncodes\r\nMapping of a string of N symbols s = {s0, s1, ..., sN−1} onto a string of M\r\nbits b = {b0, b1, ..., bM−1}\r\nγ : s → b (35)\r\nStream decoding or parsing maps the bit string onto the string of symbols\r\nγ\r\n−1\r\n: b → s (36)\r\nComplexity of code construction: linear per symbol\r\nOctober 25, 2012 26 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/a95a8f1c-a260-48c6-ad1d-37120898b72e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c004f88af31d7ae89fd9e9aed29693c928cb2931ccad3092322e5ad02b0a2910",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c045269f-d8ef-4c90-a2a8-883cc115c720",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 27,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nMapping of the String into a Number\r\nConsider S = {S0, S1, . . . , SN−1}, each Si with alphabet of size Ki\r\nA realization of S: s = {s0, s1, . . . , sN−1} can be represented by a unqiue\r\nreal number v ∈ [0, 1)\r\nv = ζ(s) =\r\nN\r\nX−1\r\ni=0\r\nsiBi with Bi =\r\nY\r\ni\r\nj=0\r\nK\r\n−1\r\nj\r\n(37)\r\nNote that when all Kj = K, the basis simplifies to Bi = K−i−1\r\nExamples\r\ns = 310, 110, 210, 110 → v =\r\n3\r\n10\r\n+\r\n1\r\n10 · 10\r\n+\r\n2\r\n103\r\n+\r\n1\r\n104\r\n= 0.312110\r\ns = 35, 12, 23, 12 → v =\r\n3\r\n5\r\n+\r\n1\r\n5 · 2\r\n+\r\n2\r\n5 · 2 · 3\r\n+\r\n1\r\n5 · 2 · 3 · 2\r\n= 0.766710\r\nAssuming va = ζ(sa) and vb = ζ(sb)\r\nsa > sb if va > vb (38)\r\nOctober 25, 2012 27 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/c045269f-d8ef-4c90-a2a8-883cc115c720.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=63bbcffa5d9193361680509be7e71ea48e52853852070b4d0025de4be2289933",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "86687867-0ed5-4f93-9041-3909b58f92d8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 28,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nMapping Symbol Sequences to Intervals\r\nJoint pmf\r\np(s) = P(S =s) = P(S0 =s0, S1 =s1, · · · , SN−1 =sN−1) (39)\r\nUsing (38), pmf of s can be written\r\np(s) = P(S =s) = P(S ≤s) − P(S <s) (40)\r\nMapping of s = {s0, s1, . . . , sN−1} to half-open interval IN ⊂ [0, 1)\r\nIN (s) = [LN , LN +WN ) = \u0002P(S <s), P(S ≤s)\r\n\u0001\r\n(41)\r\nwith\r\nLN = P(S < s) (42)\r\nWN = P(S = s) = p(s) (43)\r\nOctober 25, 2012 28 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/86687867-0ed5-4f93-9041-3909b58f92d8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=62ec465bd975e2e64db4d47b878c18d1e636b2d0ad61c3486e342e1fdc59655b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 460
      },
      {
        "segments": [
          {
            "segment_id": "146f994c-94f4-45b1-9a61-ce9c52df7c1e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 29,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nUnique Identification: The Intervals are Disjoint\r\nProof by mapping of s\r\nx onto Ix\r\nN = [P(S < s\r\nx\r\n), P(S ≤ s\r\nx\r\n)) with x = a or\r\nx = b\r\nAssuming sa < sb, it follows\r\nL\r\nb\r\nN = P(S <sb)\r\n= P( {S ≤sa} ∪ {sa < S ≤ sb})\r\n= P(S ≤sa) + P(S >sa, S <sb)\r\n| {z }\r\n≥0\r\n≥ P(S ≤ sa) = L\r\na\r\nN + WaN (44)\r\n→ Intervals I\r\na\r\nN and I\r\nb\r\nN do not overlap: any number in the interval IN (s)\r\nuniquely identifies s\r\nOctober 25, 2012 29 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/146f994c-94f4-45b1-9a61-ce9c52df7c1e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e57a1b9a9c4cbdef80c8b791dfc3f56f293791b8fa62bfc1a6c337fceeb7603c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "5c2566c6-2ff1-4046-a685-28b5fc0a1c62",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 30,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nHow Many Bits To Identify an Interval?\r\nSymbol sequence s in interval IN (s) is to be transmitted\r\nHow many bits b0, b1, . . . , bK−1 to uniquely identify IN (s)?\r\nv =\r\nmX−1\r\ni=0\r\nbi2\r\ni−1 = 0.b0b1 · · · bK−1 ∈ IN (s) (45)\r\nSize of interval (= p(s)) governs number m of bits that are needed to\r\nidentify the interval\r\np(s)= 1/2 → B={.0, .1}\r\np(s)= 1/4 → B={.00, .01, .10, .11}\r\np(s)= 1/8 → B={.000, .001, .010, .011, .100, .101, .110, .111}\r\nMinimum number of bits is\r\nK = K(s) = d− log2 p(s)e (46)\r\nwith the binary number v identifying the interval In being\r\nv = dLN · 2\r\nKe · 2−K (47)\r\nOctober 25, 2012 30 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/5c2566c6-2ff1-4046-a685-28b5fc0a1c62.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=33cae1dc7791e88205d33a924222ff693223aaf7db423f3e9fafa3c470928f38",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "98680178-41b1-41a4-9c41-d9d43def07ec",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 31,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nAnalytical Derivation of Number of Bits and Bitstring\r\nBinary number v identifying the interval In\r\nv = dLN · 2\r\nKe · 2−K (48)\r\nWith dxe ≥ x and dxe < x + 1, we obtain\r\nLN ≤ v < LN + 2−K (49)\r\nUsing the expression for the required number of bits\r\nK ≥ − log2 p(s) → 2\r\n−K ≤ p(s) = WN (50)\r\nyields\r\nLN ≤ v < LN + WN (51)\r\nHence, the representative v = 0.b0b1 . . . bm−1 always lies inside the interval\r\nIN (s)\r\n→ Message s can be uniquely decoded from the transmitted bit string\r\nb = {b0, b1, . . . , bK−1} of K(s) = d− log2 p(s)e bits\r\nOctober 25, 2012 31 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/98680178-41b1-41a4-9c41-d9d43def07ec.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c3b9bef0633fdc9b4694eb1cbaf528b1f1685a034dd1f965ddc5fcc85258668a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ab6a8b54-7959-40e5-937f-0e6bcefea82b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 32,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nRedundancy of Elias Coding\r\nAverage codeword length per symbol\r\n¯` =\r\n1\r\nN\r\nE {K(S)} =\r\n1\r\nN\r\nE\r\n\b\u0006 − log2 p(S)\u0007\t (52)\r\nApplying inequalities dxe ≥ x and dxe < x + 1, we obtain\r\n1\r\nN\r\nE {− log2 p(S)} ≤ ¯` < 1\r\nN\r\nE {1 − log2 p(S)} (53)\r\nAverage codeword length is bounded\r\n1\r\nN\r\nH(S) ≤ ¯` ≤\r\n1\r\nN\r\nH(S) + 1\r\nN\r\n(54)\r\nOctober 25, 2012 32 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/ab6a8b54-7959-40e5-937f-0e6bcefea82b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5cf257e4fadb2609d279bcff09eba9b61dddb1e2666ad66fed5dc729f993ba99",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 474
      },
      {
        "segments": [
          {
            "segment_id": "9a9c3bdf-f0f0-46aa-b46c-c6ed3dcf8201",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 33,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nDerivation of Iterative Algorithm for Elias Coding I\r\nIterative construction of codewords\r\nConsider sub-sequences s\r\n(n) = {s0, s1, · · · , sn−1} with 1 ≤ n ≤ N\r\nInterval width Wn+1 for the sub-sequence s\r\n(n+1) = {s(n)\r\n, sn}\r\nWn+1 = P\r\n\r\nS\r\n(n+1) =s\r\n(n+1)\u0001\r\n= P\r\n\r\nS\r\n(n) =s\r\n(n)\r\n, Sn =sn\r\n\u0001\r\n= P\r\n\r\nS\r\n(n) =s\r\n(n)\r\n\u0001\r\n· P\r\n\r\nSn =sn\r\n\f\r\n\f S\r\n(n) =s\r\n(n)\r\n\u0001\r\nIteration rule of interval width\r\nWn+1 = Wn · p(sn | s0, s1, . . . , sn−1 ) (55)\r\nSince p(sn | s0, s1, . . . , sn−1 ) ≤ 1, it follows\r\nWn+1 ≤ Wn (56)\r\nOctober 25, 2012 33 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/9a9c3bdf-f0f0-46aa-b46c-c6ed3dcf8201.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=099198319f59f4383a4ab6efee2f92e8f5ae76a0d738dee3a837cc7a41a2dbc1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b1dd4fec-24df-418b-8469-fb6e80799dd5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 34,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nDerivation of Iterative Algorithm for Elias Coding II\r\nDerivation for lower interval border Ln+1 for the\r\nsub-sequence s\r\n(n+1) = {s(n)\r\n, sn}\r\nLn+1 = P\r\n\r\nS\r\n(n+1) <s\r\n(n+1)\u0001\r\n= P\r\n\r\nS\r\n(n) <s\r\n(n)\r\n\u0001\r\n+ P\r\n\r\nS\r\n(n) =s\r\n(n)\r\n, Sn <sn\r\n\u0001\r\n= P\r\n\r\nS\r\n(n) <s\r\n(n)\r\n\u0001\r\n+ P\r\n\r\nS\r\n(n) =s\r\n(n)\r\n\u0001\r\n· P\r\n\r\nSn <sn\r\n\f\r\n\fS\r\n(n) =s\r\n(n)\r\n\u0001\r\nIteration rule of lower interval boundary\r\nLn+1 = Ln + Wn · c(sn | s0, s1, . . . , sn−1 ) (57)\r\nwith the cmf c(·) being defined as\r\nc(sn | s0, s1, . . . , sn−1 ) = X\r\n∀a∈An: a<sn\r\np(a | s0, s1, . . . , sn−1 ) (58)\r\nSince Wn · c(sn | s0, s1, . . . , sn−1 ) ≥ 0, it follows\r\nLn+1 ≥ Ln (59)\r\nOctober 25, 2012 34 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/b1dd4fec-24df-418b-8469-fb6e80799dd5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d021ae8c8d125b8889028fa2f765ce80793aaec2ba24181ac68e526824b42af1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "50172d4f-7783-4f7e-8fe2-663fb11e81fc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 35,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nElias Coding for Different Sources\r\nDerivation above for general case of dependent and differently distributed\r\nrandom variables\r\nFor i.i.d. sources, interval refinement can be simplified\r\nWn = Wn−1 · p(sn−1) (60)\r\nLn = Ln−1 + Wn−1 · c(sn−1) (61)\r\nFor 1-st order Markov sources: conditional pmf p(sn|sn−1) and conditional\r\ncmf c(sn|sn−1)\r\nWn = Wn−1 · p(sn−1|sn−2) (62)\r\nLn = Ln−1 + Wn−1 · c(sn−1|sn−2) (63)\r\nFor non-stationary sources, the probability p(·) needs to be adapted\r\nOctober 25, 2012 35 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/50172d4f-7783-4f7e-8fe2-663fb11e81fc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c9308f7f42f3bf98f010f72697d349650590e079686aea6141eea6fc61356780",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 380
      },
      {
        "segments": [
          {
            "segment_id": "3bacd900-d9ab-4265-988a-f90ac80dfc32",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 36,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nExample: iid Source\r\nExample for an iid source for which an optimum Huffman code exists\r\nsymbol ak pmf p(ak) Huffman code cmf c(ak)\r\na0=‘A’ 0.25 = 2−200 0.00 = 0\r\na1=‘B’ 0.25 = 2−201 0.25 = 2−2\r\na2=‘C’ 0.50 = 2−11 0.50 = 2−1\r\nSuppose we intend to send the symbol string s =0 CABAC0\r\nUsing the Huffman code, the bit string would be b = 10001001\r\nAn alternative to Huffman coding is interval subdivision in stream entropy\r\ncoding\r\np(s) = p(\r\n0C0\r\n) · p(\r\n0A0\r\n) · p(\r\n0B0\r\n) · p(\r\n0A0\r\n) · p(\r\n0C0\r\n) = 1\r\n2\r\n1\r\n4\r\n1\r\n4\r\n1\r\n4\r\n1\r\n2 =\r\n1\r\n256\r\nThe size of the bit stream is − log2 p(s) = 8 bits\r\nOctober 25, 2012 36 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/3bacd900-d9ab-4265-988a-f90ac80dfc32.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b3d943bedf0f17c54d783d10eb91daa9bb0e850269173b05baa215fdfb5e72ae",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "292ca2d7-7c58-4265-bc9e-f237231182ec",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 37,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nEncoding Algorithm for Elias Codes\r\nEncoding algorithm:\r\n1 Given is a sequence {s0, · · · , sN−1} of N symbols\r\n2 Initialization of the iterative process by W0 = 1, L0 = 0\r\n3 For each n = 0, 1, · · · , N − 1, determine the interval In+1 by\r\nWn+1 = Wn · p(sn|s0, · · · , sn−1)\r\nLn+1 = Ln + Wn · c(sn|s0, · · · , sn−1)\r\n4 Determine the codeword length by K = d− log2 WN e\r\n5 Transmit the codeword b\r\n(K)\r\nof K bits that represents\r\nthe fractional part of v = dLN 2\r\nKe 2−K\r\nOctober 25, 2012 37 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/292ca2d7-7c58-4265-bc9e-f237231182ec.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f235d7ae6cc70c10ee7aa27cec1cc1b98ce974140363854f8eb5d19b701598de",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b4014995-64bb-44e9-82bc-c41c5c50069f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 38,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nExample for Elias encoding\r\ns0=‘C’ s1=‘A’ s2=‘B’\r\nW1 = W0 · p(‘C’) W2 = W1 · p(‘A’) W3 = W2 · p(‘B’)\r\n= 1 · 2\r\n−1 = 2−1 = 2−1\r\n· 2\r\n−2 = 2−3 = 2−3\r\n· 2\r\n−2 = 2−5\r\n= (0.1)b = (0.001)b = (0.00001)b\r\nL1 = L0 + W0 · c(‘C’) L2 = L1 + W1 · c(‘A’) L3 = L2 + W2 · c(‘B’)\r\n= L0 + 1 · 2\r\n−1 = L1 + 2−1\r\n· 0 = L2 + 2−3· 2\r\n−2\r\n= 2−1 = 2−1 = 2−1 + 2−5\r\n= (0.1)b = (0.100)b = (0.10001)b\r\ns3=‘A’ s4=‘C’ termination\r\nW4 = W3 · p(‘A’) W5 = W4 · p(‘C’) K = d− log2 W5e = 8\r\n= 2−5· 2\r\n−2 = 2−7 = 2−7\r\n· 2\r\n−1 = 2−8\r\n= (0.0000001)b = (0.00000001)b v =\r\n\u0006\r\nL5 2\r\nK\r\n\u0007\r\n2\r\n−K\r\nL4 = L3 + W3 · c(‘A’) L5 = L4 + W4 · c(‘C’) = 2−1 + 2−5 + 2−8\r\n= L3 + 2−5\r\n· 0 = L4 + 2−7· 2\r\n−1\r\n= 2−1 + 2−5 = 2−1 + 2−5 + 2−8b = ‘100010010\r\n= (0.1000100)b = (0.10001001)b\r\nOctober 25, 2012 38 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/b4014995-64bb-44e9-82bc-c41c5c50069f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1cc8d355dccc6015b2250c9e103c19d0247ffe63537eec19d1b1b92f38a37fff",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "2729f9da-af81-4979-be55-f56472ba615e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 39,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nIllustration of Iteration\r\nOctober 25, 2012 39 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/2729f9da-af81-4979-be55-f56472ba615e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=754991e5e9640a8fd4a5a23b543f2450102d09a740f44b238d550bacdb56af21",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 495
      },
      {
        "segments": [
          {
            "segment_id": "92e1258d-0407-439e-ac72-2b7735495538",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 40,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nDecoding Algorithm for Elias codes\r\nDecoding algorithm:\r\n1 Given is the number N of symbols to be decoded and\r\na codeword b\r\n(K) = {b0, · · · , bK−1} of KN bits\r\n2 Determine the interval representative v according to\r\nv =\r\nK\r\nX−1\r\ni=0\r\nbi 2\r\n−i\r\n3 Initialization of the iterative process by W0 = 1, L0 = 0\r\n4 For each n = 0, 1, · · · , N − 1, do the following:\r\n1 For each ai ∈ An, determine the interval In+1(ai) by\r\nWn+1(ai) = Wn · p(ai|s0, . . . , sn−1)\r\nLn+1(ai) = Ln + Wn · c(ai|s0, . . . , sn−1)\r\n2 Select the letter ai ∈ An for which v ∈ In+1(ai)\r\nand set sn = ai, Wn+1 = Wn+1(ai), Ln+1 = Ln+1(ai)\r\nOctober 25, 2012 40 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/92e1258d-0407-439e-ac72-2b7735495538.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1882b6173f56e318c6773ee9b71fb6f414b2b3c210499af5880523949d00e650",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "cff2e348-3cfb-4fc6-a2f2-7c0c0e06cbb7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 41,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nArithmetic Coding I\r\nProblem with Elias codes: precision requirement for WN and LN\r\nArithmetic codes: variant of Elias codes with fixed-precision integer\r\narithmetic\r\nRepresent pmfs p(a) and cmfs c(a) by V -bit positive integers pV (a) and\r\ncV (a)\r\np(a) = pV (a) · 2\r\n−V\r\nc(a) = cV (a) · 2\r\n−V =\r\nX\r\nai<a\r\npV (ai) · 2\r\n−V\r\n(64)\r\nElias code remains decodable if intervals are always nested\r\n0 < Wn+1 ≤ Wn · p(sn) (65)\r\n→ Rounding down of Wn · p(sn) at each iteration to keep fixed-length integer\r\narithmetic (results in rate increase)\r\nOctober 25, 2012 41 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/cff2e348-3cfb-4fc6-a2f2-7c0c0e06cbb7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=88c722f2535ad5c91536c6aba611bd4a8d116cf15be25475a81e6d7e4227adbb",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d0ddec3f-b6d9-4239-91f3-24e2c4d74693",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 42,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nArithmetic Coding II\r\nUse U-bit integer An and integer zn ≥ U\r\nWn = An · 2\r\n−zn (66)\r\nApproximate W0 = 1 by A0 = 2U − 1 and z0 = U\r\nInterval refinement for integer arithmetic\r\nWn+1 = Wn · p(sn) = An · 2\r\n−zn · pV (sn) · 2−V\r\n(67)\r\n→ An+1 =\r\n\u0004\r\nAn · pV (sn) · 2\r\n−yn\r\n\u0005\r\n(68)\r\n→ zn+1 = zn + V − yn (69)\r\nRestriction of An to\r\n2\r\nU−1\r\n| {z }\r\nmax. precision\r\n≤ An < 2\r\nU\r\n|{z}\r\nWn<1\r\n(70)\r\nresults in\r\nyn =\r\n\u0006\r\nlog2( An · pV (sn) + 1)\u0007− U (71)\r\nOctober 25, 2012 42 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/d0ddec3f-b6d9-4239-91f3-24e2c4d74693.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0824fffa27eab19de67d8ee2f6238400bd799b808b5504693565a1355cbc2a33",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 387
      },
      {
        "segments": [
          {
            "segment_id": "a7d8fbc0-c200-4e82-81f1-20a04bd625e7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 43,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nArithmetic Coding III\r\nRepresentation of the product Wn · c(sn):\r\nfirst zn−U bits are zero, following U +V bits represent An · cV (sn)\r\nWn · c(sn) = An · cV (sn) · 2\r\n−(zn+V )\r\n= 0. 00000 · · · 0\r\n| {z }\r\nzn−U bits\r\nxxxxx · · · x | {z }\r\nU +V bits\r\n00000 · · ·\r\nRepresentation of lower interval boundary\r\nLn = 0. aaaaa · · · a\r\n| {z }\r\nzn−cn−U\r\nsettled bits\r\n0111111 · · · 1\r\n| {z }\r\ncn\r\noutstanding bits\r\nxxxxx · · · x | {z }\r\nU +V\r\nactive bits\r\n00000 · · ·\r\n| {z }\r\ntrailing bits\r\ntrailing bits: equal to 0, but maybe changed later\r\nactive bits: directly modified by the update Ln+1 = Ln + Wn · c(sn)\r\noutstanding bits: may be modified by a carry from the active bits\r\nsettled bits: not modified in any following interval update\r\nOctober 25, 2012 43 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/a7d8fbc0-c200-4e82-81f1-20a04bd625e7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=631b33cb1468e3ef4831b124e14d61faee98547eba7986efc76b31b18fa17351",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "8cafc190-b486-404f-a18d-9057adc297f4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 44,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nEfficiency of Arithmetic Codes\r\nFixed-length integer precision achieved by rounding down reduces Wn in each\r\niteration\r\nExcess rate\r\n∆` =\r\n\u0006\r\n− log2 WN\r\n\u0007\r\n−\r\n\u0006\r\n− log2 p(s)\r\n\u0007\r\n< 1 + log2\r\np(s)\r\nWN\r\n(72)\r\nUpper bound for increase in codeword length per symbol\r\n∆¯` < 1\r\nN\r\n+ log2\r\n\r\n1 + 21−U\r\n\u0001\r\n− log2\r\n\u0012\r\n1 −\r\n2\r\n−V\r\npmin \u0013\r\n(73)\r\nExample:\r\nnumber of coded symbols N = 1000,\r\nprecision for representing probabilities V = 16,\r\nprecision for representing intervals U = 12,\r\nminimum probablity pmin = 0.02\r\n→ Increase in codeword length is less than 0.003 bit per symbol\r\nOctober 25, 2012 44 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/8cafc190-b486-404f-a18d-9057adc297f4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5aa06f3609fdbb77338756e871c495f7841e1902fd08622f88031df825d028f9",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "28675fa0-639d-439a-96bc-2da1d2f0c781",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 45,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Elias Coding and Arithmetic Coding\r\nBinary Arithmetic Coding\r\nComplexity reduction: most popular type of arithmetic coding\r\nBinarization of S ∈ {a0, a1, . . . , aM−1} produces C ∈ {0, 1}\r\nExample in table: unary truncated binarization\r\nSn number of bins B C0 C1 C2 · · · CM−2 CM−1\r\na0 1 1\r\na1 2 0 1\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\naM−2 M − 2 0 0 0 · · · 0 1\r\naM−1 M − 2 0 0 0 · · · 0 0\r\nEntropy and efficiency of coding unchanged due to binarization\r\nH(S) = H(C) (74)\r\n= H(C0) + H(C1|C0) + . . . + H(CM−1|C0, C1, . . . , CM−2)\r\nOctober 25, 2012 45 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/28675fa0-639d-439a-96bc-2da1d2f0c781.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1b8583098e13f327f4476de1414e5471e0fabc514b933b83fbf82eaaba80ca6a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "35913e62-c2b1-4bc9-8226-9ab008be364b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 46,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nProbability Interval Partitioning Entropy (PIPE) Coding\r\nAlternative to arithmetic coding\r\nQuantization into probability intervals combined with variable-length coding\r\nof variable-length vectors\r\nOctober 25, 2012 46 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/35913e62-c2b1-4bc9-8226-9ab008be364b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f97c818d0b847570341b05ac46ce588433d6bcb32a6ecb1a1730568ed12f00b2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 467
      },
      {
        "segments": [
          {
            "segment_id": "596d0d05-7fd4-4222-8d82-6dc5e597a0a7",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 47,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nAlgorithm for PIPE Coding\r\n1 Binarization: The sequence s = {s0, s1, · · · , sN−1} is converted into a\r\nsequence c = {c0, c1, · · · , cB−1} bins with pmfs; each bin ciis characterized\r\nby a probability P(Ci = 0)\r\n2 Decomposition: The bin sequence c is decomposed into U sub-sequences; a\r\nsub-sequence uk contains the bins ci with P(Ci = 0) ∈ Ik in the same order\r\nas in the bin sequence c\r\n3 Binary Coding: Each sub-sequence of bins uk is coded using a distinct V2V\r\ncode resulting in U codeword sequences bk\r\n4 Multiplexing: The data packet is produced by multiplexing the U codeword\r\nsequences bk\r\nOctober 25, 2012 47 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/596d0d05-7fd4-4222-8d82-6dc5e597a0a7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e5f1e76ce04f52c8d695df17537931fcf9b8dcfaf22e3a9f0e70ed1176ad7376",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "80a0d9d4-962d-4b26-ae32-4b2bea15a3a9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 48,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nBinarization: Bijective Mapping\r\n1 Mapping of source symbols sn to bin sequence\r\ndn = (d\r\nn\r\n0\r\n, . . .) = γ\r\nn\r\nd\r\n(sn) (75)\r\nand dn being concatenated to d = (d0, d1, . . . , dB−1)\r\n2 Less probable bin value\r\nv\r\ni\r\nLPB =\r\n\u001a\r\n0, if P(di = 0) ≤ 0.5\r\n1, if P(di = 0) > 0.5\r\n(76)\r\nand probability\r\np\r\ni\r\nLPB =\r\n\u001a\r\nP(di = 0), if P(di = 0) ≤ 0.5\r\n1 − P(di = 0), if P(di = 0) > 0.5\r\n(77)\r\n3 Resulting expression for coding bins\r\nbi = di ⊕ v\r\ni\r\nLPB (78)\r\nprovides the mapping (s0, s1, .., sN−1) → (b0, b1, .., bB−1)\r\nOctober 25, 2012 48 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/80a0d9d4-962d-4b26-ae32-4b2bea15a3a9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=87c4464c2a98221dbf830b12de492f0cf608af438ac3484f87d7611d76140ffb",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6d0cd4b6-7652-45ef-8465-5858bd08def9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 49,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nProbability Interval Partitioning and Bin Assignment\r\nThe binary values bi ∈ (b0, b1, .., bB−1) have associated probabilities p\r\ni\r\nLPB\r\nwith\r\np\r\ni\r\nLPB ∈ (0, 0.5] (79)\r\nPartition the interval into K partitions such that\r\nK\r\n[−1\r\nk=0\r\nIk = (0, 0.5] and Ik ∩ Ij = ∅ for k 6= j (80)\r\nDecompose (b0, b1, .., bB−1) into K separate sequences\r\nuk = (u\r\nk\r\n0\r\n, uk\r\n1\r\n, . . .) = (bi: bi ∈ b, pi\r\nLPB ∈ Ik) (81)\r\nOctober 25, 2012 49 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/6d0cd4b6-7652-45ef-8465-5858bd08def9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=45a3b5278a05fad62bfc04c096d4e35680fa0e61979e790c857f9ce5ae9c9032",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "2305c07c-0619-4fa2-b01f-3aad1c309b3c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 50,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nWhat is the Loss of Probability Interval Partitioning?\r\nRepresent all bins of interval Ik using one fixed probability pIk ∈ Ik\r\nAssuming optimal entropy coder for probability pIk,\r\nrate when coding a bin with probability p is given as\r\nR(p, pIk) = −p log2(pIk) − (1 − p) log2(1 − pIk)\r\n= Hb(pIk) + (p − pIk) H0\r\nb\r\n(pIk) (82)\r\nwhere Hb(p) represents the binary entropy function\r\nHb(p) = −p log2 p − (1 − p) log2(1 − p) (83)\r\nand H0\r\nb\r\n(p) its first derivative\r\nH0\r\nb\r\n(p) = log2\r\n\u0012\r\n1 − p\r\np\r\n\u0013\r\n(84)\r\nOctober 25, 2012 50 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/2305c07c-0619-4fa2-b01f-3aad1c309b3c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b2bb1aae2904914f17bb1402518c156cb06b22e8ab7f15a5ea033bfce6bbe148",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 483
      },
      {
        "segments": [
          {
            "segment_id": "f9109b67-85ef-4b74-9635-959bc9e87c39",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 51,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nExample with 4 Intervals\r\nK = 4 intervals and p being uniformly distributed (0, 0.5], redundancy is given\r\n% =\r\nE {R(p, pIk)}\r\nE {H(p)}\r\n− 1 = 1% (85)\r\nOctober 25, 2012 51 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/f9109b67-85ef-4b74-9635-959bc9e87c39.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=027eda50123a8141ebd6bc7cb58b52582767661c86234218e8eeca1e865ea273",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "292f46cf-e9e5-4313-81d3-cf846b3357de",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 52,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nEntropy Coding for Each Probability Interval\r\nAssuming fixed probabilities p = pIk\r\nfor each probability interval Ik\r\nEntropy coding of the corresponding sub-sequences of coding bins uk:\r\nsimplified binary arithmetic coding or variable length coding\r\nFor variable length coding, create a variable number of bins to variable\r\nnumber of bits (V2V) code\r\nExample for p = 1 − q = 0.37, excess rate % = 0.2%\r\nq \r\np \r\np 2 \r\np q \r\nq 2 q 3\r\nq p \r\nq 2 p\r\n0.25 \r\n0.1469 \r\n0.2331 \r\n0.2331 \r\n0.1369 \r\n11 \r\n001 \r\n01 \r\n10 \r\n000 \r\npL Code\r\nLeaf probability pL(j) = p\r\nxj (1 − p)\r\nyj\r\nOctober 25, 2012 52 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/292f46cf-e9e5-4313-81d3-cf846b3357de.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a61d6896fbdb887f2b33d25df3963f5ad7b1dff8ae77e06b8174204016cb14fa",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "473fda5b-0796-4313-900e-4932d4c15899",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 53,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nExcess Rate for Optimal V2V Codes\r\nOctober 25, 2012 53 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/473fda5b-0796-4313-900e-4932d4c15899.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4e88b97ed7aa096eff571ab232602e81e0d05d72e055a25d0a58dbe8b6cf362e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e4ad202f-608f-4d04-867b-1bedc8ea85cb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 54,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nCombined Design\r\nAssuming uniform distribution of encoded probabilities\r\nExcess rate %¯opt = 0.12%, %¯V2V = 0.24%\r\nOctober 25, 2012 54 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/e4ad202f-608f-4d04-867b-1bedc8ea85cb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=94b57794a8bda464861dc112ed6be4a807d8c49c0ca23d13f9ab890f8e2fa43f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3a49ec1d-795a-4a4e-9d45-51f96748811f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 55,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nUnique Decodability and Multiplexing\r\nPIPE coding: partition sequence of coding bins into K sub-sequences uk\r\n{u0, . . . ,uK−1} = γm(b) (86)\r\nTo each sub-sequence uk, a sequence of codewords ck(uk) is assigned\r\nA sequence of coding bins b is uniquely decodable given K sequences of\r\ncodewords ck(uk), if each sub-sequence is uniquely decodable and the\r\nmultiplexing rule γm is known to the decoder\r\nThe multiplexing rule γm could come in many flavors:\r\nConcatenate the sub-sequences\r\nInterleave codewords event driven\r\nCreate fixed multiplexing partitions\r\n...\r\nOctober 25, 2012 55 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/3a49ec1d-795a-4a4e-9d45-51f96748811f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=74dc10c47a70b3aae6e666395199e4a63c3b9cf5eb6155ba2a4b7a7322c76e76",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "72045486-930c-4bf1-8b89-472f8c3a4bb1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 56,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nComparison of Lossless Coding Techniques\r\nInstantaneous entropy rate\r\nH¯\r\ninst(S, L) = 1\r\nL\r\nH(S0, S1, . . . , SL−1) (87)\r\nExample: Markov source\r\nOctober 25, 2012 56 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/72045486-930c-4bf1-8b89-472f8c3a4bb1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8e70a68870bdfc35223e742bc637ccaa3d347e839d2a1454565cb71beb922980",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e6d63e24-3ba9-48e2-be1a-36a9fa865faa",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 57,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nConditional and Adaptive Codes\r\nThe question arises how sources with memory and/or with varying statistics\r\ncan be efficiently entropy-coded\r\nOne approach would be a switch Huffman code trained on the conditional\r\nprobabilities\r\nThe resulting number of Huffman code tables is often too large in practise\r\nHence, conditional entropy coding is typically done using arithmetic codes\r\nIn adaptive arithmetic coding, probabilities p(ak) are estimated/adapted\r\nsimultaneously at encoder and decoder\r\nStatistical dependencies can be exploited using so-called context modeling\r\ntechniques: conditional probabilities p(ak|zk) with zk being a context/state\r\nthat is simultaneously computed at encoder and decoder\r\nOctober 25, 2012 57 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/e6d63e24-3ba9-48e2-be1a-36a9fa865faa.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e09a4e21fb16b8a69d7f67697c074d92872237a7fd2a3139777316ab97aba7e2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 472
      },
      {
        "segments": [
          {
            "segment_id": "e58e5eec-91b8-43b8-9ea5-6059574e090c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 58,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nForward and Backward Adaptation\r\nThe two basic approaches for adaptation are\r\nForward adaptation:\r\nGather statistics for a large enough block of source symbols\r\nTransmit adaptation signal to decoder as side information\r\nDisadvantage: increased bit-rate due to side information\r\nBackward adaptation:\r\nGather statistics simultaneously at coder and decoder\r\nDrawback: error resilience\r\nWith today’s packet-switched transmission systems, an efficient combination of\r\nthe two adaptation approaches can be achieved:\r\n1 Gather statistics for the entire packet and provide initialization of entropy\r\ncode at the beginning of the packet\r\n2 Conduct backwards adaptation for each symbol inside the packet in order to\r\nminimize the size of the packet\r\nOctober 25, 2012 58 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/e58e5eec-91b8-43b8-9ea5-6059574e090c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2d0e41019100cc8c66f78e467459a69a424e7a8586b2c214df0d6363b633ecd0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6cb5a90c-d45e-4af2-b3ce-3a6c03e9d0a2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 59,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nForward and Backward Adaptation\r\nEncoding\r\r\nChannel\r\r\nDecoding\r Reconstructed\r\r\nsymbols\r\r\nSource\r\r\nsymbols\r\r\nChannel\r\r\nComputation\r\r\nof adaptation\r\r\nsignal\r\r\nDelay\r\r\nComputation\r\r\nof adaptation\r\r\nsignal\r\r\nDelay\r\r\nEncoding\r\r\nComputation\r\r\nof adaptation\r\r\nsignal\r\r\nDelay\r\r\nDecoding\r Reconstructed\r\r\nsymbols\r\r\nForward Adaptation\r\r\nBackward Adaptation\r\r\nSource\r\r\nsymbols\r\r\nOctober 25, 2012 59 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/6cb5a90c-d45e-4af2-b3ce-3a6c03e9d0a2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9c6234b612b3b110368d74c4b7bf3152f8fd5c611421ceb3350048f6d31ef705",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "558af9bd-3616-47f6-b43c-09bc6ced8b00",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 60,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nCoding of Geometric Sources\r\nGeometric/exponential pdfs are very typical in source coding\r\nConsider a Geometric source with probability mass function\r\np(s) = 2−(s+1), s = 0, 1, 2, 3, . . .\r\nInformation content in bits\r\nl(s) = − log2 p(s) = s + 1\r\nOptimal code with redundancy % = 0 is ’unary’ code\r\nc0 = 0, c1 = 10, c2 = 110, c3 = 1110\r\nConsider geometric source with decay β\r\np(s) = (1 − β)β\r\ns\r\n, s ≥ 0\r\nAverage codeword length when using Unary code\r\nlav =\r\nX∞\r\ns=0\r\np(s)(s + 1) = X∞\r\ns=0\r\n(1 − β)β\r\ns\r\n· (s + 1) = 1\r\n1 − β\r\nOctober 25, 2012 60 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/558af9bd-3616-47f6-b43c-09bc6ced8b00.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=07b0a14a53b58f8595c54fc23428824bb4db67e8e6ca64f42ac48f0cec3421e0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9978fc17-119d-4949-86f0-6639c0cec18b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 61,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nEfficiency of Unary Coding\r\nEntropy of geometric source with decay β:\r\nH = − log2(1 − β) −\r\nβ\r\n(1 − β)\r\nlog2 β\r\n0 5 10 15 20 25 0\r\n0.2\r\n0.4\r\n0.6\r\n0.8\r\ns\r\np(s)\r\nβ=0.5\r\nβ=0.9\r\nβ=0.25\r\n(a) Geometric source 0 0.2 0.4 0.6 0.8 1\r\n0\r\n5\r\n10\r\n15\r\n20\r\nβ\r\nR [bits]\r\nAvg. unary code length\r\nEntropy\r\n(b) Length using Unary code and En\u0002tropy\r\nOctober 25, 2012 61 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/9978fc17-119d-4949-86f0-6639c0cec18b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fb57f581a3e2c5fc1935a41d6cda255b03c7c2b6aaa99bfa85d5037c4f43e0fb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 387
      },
      {
        "segments": [
          {
            "segment_id": "b2182083-5a11-49af-a566-d7079146aa9a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 62,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nCoding of Geometric Sources with 0 < β < 2\r\n−1\r\nFor 0 < β < 2\r\n−1\r\n, the unary code is still optimum single-letter VLC code, but\r\nnot redundancy-free\r\nInformation content in bits\r\nl(s) = − log2(1 − β) − s · log2 β\r\nOptimality of symbol code is proved by the fact that the Huffman algorithm\r\nalways yields the unary code (except for least probable code word)\r\nTerm − log2 β > 1 for β < 2\r\n−1\r\n, i.e., l(s + 1) > l(s) + 1 and the unary code\r\nis not redundancy free\r\nNearly optimal coding possible by using binary arithmetic codes\r\nBinarize the geometric source using unary code\r\nEncode each ’bin’ using a binary arithmetic coder\r\nOctober 25, 2012 62 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/b2182083-5a11-49af-a566-d7079146aa9a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=32b8eb01f86221ebe7786d24b9d48c235e6e401de01426097785691e63f4112c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f154c50c-b371-4065-ab8e-477512d939cb",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 63,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nBinary Arithmetic Coding of Unary Codes\r\nGeometric source p(s) = β\r\ns\r\n(1 − β) with 0 < β < 2\r\n−1\r\nBinarize s using unary code\r\nUse binary arithmetic code for each ’bin’\r\nEach bin has probabilities: pb(0) = 1 − β, pb(1) = β\r\nBin number\r\ns 0 1 2 3 4 5 6 p(s)\r\n0 0 1 − β\r\n1 1 0 β · (1 − β)\r\n2 1 1 0 β · β · (1 − β)\r\n3 1 1 1 0 β · β · β · (1 − β)\r\n4 1 1 1 1 0 β · β · β · β · (1 − β)\r\n5 1 1 1 1 1 0 β · β · β · β · β · (1 − β)\r\n6 1 1 1 1 1 1 0 β · β · β · β · β · β · (1 − β)\r\n... ... ...\r\nOctober 25, 2012 63 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/f154c50c-b371-4065-ab8e-477512d939cb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6a509bf824ebe0e6ae6984364562e666a6f8f7b1378ac292368288df478de663",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "af82ec8a-109c-4bb4-b799-a19bd182b9f3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 64,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nSummary\r\nEntropy describes the average information of a source\r\nEntropy is the lower bound for the average number of bits/symbol\r\nHuffman coding\r\nis an efficient and simple entropy coding method\r\nneeds code table\r\ncan be inefficient for certain probabilities\r\ndifficult to use for exploiting statistical dependencies and time-varying\r\nprobabilities\r\nArithmetic coding\r\nis a universal method for encoding strings of symbols\r\ndoes not need a code table, but a table for storing probabilities\r\ntypically requires serial computation of interval and probability estimation\r\nupdate (in case probabilities are adapted)\r\napproaches entropy for long strings\r\nis well suited for exploiting statistical dependencies and coding time-varying\r\nprobabilities\r\nOctober 25, 2012 64 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/af82ec8a-109c-4bb4-b799-a19bd182b9f3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6bcb6b108396055c6a2c7fdfad5a67385c609db67de0b7dcb74f35553ef01e6d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 431
      },
      {
        "segments": [
          {
            "segment_id": "0a06c440-cc56-4630-8fbf-527b423d95dc",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 362.835,
              "height": 272.126
            },
            "page_number": 65,
            "page_width": 362.835,
            "page_height": 272.126,
            "content": "o\r\nLossless Source Coding Probability Interval Partitioning Entropy (PIPE) Coding\r\nSummary (cont’d)\r\nPIPE coding\r\nis an alternative to Arithmetic and Huffman coding\r\ncan exploit statistical dependencies and coding time-varying probabilities\r\nallows for very low redundancy via increasing number of intervals or increasing\r\nsize of V2V codes\r\nallows for larger throughput than Arithmetic coding by use of V2V codes\r\nmultiplexing to accumulate V2V codes - requires buffering process\r\nCoding of Geometric Sources\r\nGeometric pdf is very typical input for entropy coding\r\nUnary code is optimal for representing Geometric pdf with β = 2−1\r\nFast decaying geometric pdf can be coded using unary binarization followed by\r\nbinary arithmetic coding\r\nOctober 25, 2012 65 / 65",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fed617d5-0b6f-48a5-adf8-1b4b09bd4b76/images/0a06c440-cc56-4630-8fbf-527b423d95dc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041527Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e37984e955f0061cb8840e931d0d2d491d7849c31f3ac4c3a7ae4f8494365784",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 113
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "```json\n{\"title\": \"Lossless Source Coding\"}\n```"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "```json\n{\"author\": null}\n```"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "October 25, 2012"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "October 25, 2012"
        }
      ]
    }
  }
}