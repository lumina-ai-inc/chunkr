{
  "file_name": "Learned Monotone Minimal Perfect Hashing - 2023 (2304.11012).pdf",
  "task_id": "8b69ffee-254b-4d9a-b8e1-3af08e89da90",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "291d50c5-5cd1-423a-96c8-5dbb8313a8b0",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 1,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "Learned Monotone Minimal Perfect Hashing\r\nPaolo Ferragina #\r\nUniversity of Pisa, Italy\r\nHans-Peter Lehmann #\r\nKarlsruhe Institute of Technology, Germany\r\nPeter Sanders #\r\nKarlsruhe Institute of Technology, Germany\r\nGiorgio Vinciguerra #\r\nUniversity of Pisa, Italy\r\nAbstract\r\nA Monotone Minimal Perfect Hash Function (MMPHF) constructed on a set S of keys is a function\r\nthat maps each key in S to its rank. On keys not in S, the function returns an arbitrary value.\r\nApplications range from databases, search engines, data encryption, to pattern-matching algorithms.\r\nIn this paper, we describe LeMonHash, a new technique for constructing MMPHFs for integers.\r\nThe core idea of LeMonHash is surprisingly simple and effective: we learn a monotone mapping\r\nfrom keys to their rank via an error-bounded piecewise linear model (the PGM-index), and then we\r\nsolve the collisions that might arise among keys mapping to the same rank estimate by associating\r\nsmall integers with them in a retrieval data structure (BuRR). On synthetic random datasets,\r\nLeMonHash needs 34% less space than the next larger competitor, while achieving about 16 times\r\nfaster queries. On real-world datasets, the space usage is very close to or much better than the\r\nbest competitors, while achieving up to 19 times faster queries than the next larger competitor. As\r\nfar as the construction of LeMonHash is concerned, we get an improvement by a factor of up to 2,\r\ncompared to the competitor with the next best space usage.\r\nWe also investigate the case of keys being variable-length strings, introducing the so-called\r\nLeMonHash-VL: it needs space within 13% of the best competitors while achieving up to 3 times\r\nfaster queries than the next larger competitor.\r\n2012 ACM Subject Classification Theory of computation → Data compression; Information systems\r\n→ Point lookups\r\nKeywords and phrases compressed data structure, monotone minimal perfect hashing, retrieval\r\nRelated Version An extended abstract of this paper appears in the Proceedings of the 31st Annual\r\nEuropean Symposium on Algorithms (ESA 2023): https://doi.org/10.4230/LIPIcs.ESA.2023.46\r\nSupplementary Material Software (Source Code): https://github.com/ByteHamster/LeMonHash\r\nFunding This project has received funding from the European Research Council (ERC) under the\r\nEuropean Union’s Horizon 2020 research and innovation programme (grant agreement No. 882500).\r\nPF and GV have been supported by the European Union – Horizon 2020 Program under the scheme\r\n“INFRAIA-01-2018-2019 – Integrating Activities for Advanced Communities”, Grant Agreement n.\r\n871042, “SoBigData++: European Integrated Infrastructure for Social Mining and Big Data Analyt\u0002ics” (http://www.sobigdata.eu), by the NextGenerationEU – National Recovery and Resilience Plan\r\n(Piano Nazionale di Ripresa e Resilienza, PNRR) – Project: “SoBigData.it – Strengthening the Italian\r\nRI for Social Mining and Big Data Analytics” – Prot. IR0000013 – Avviso n. 3264 del 28/12/2021, by\r\nthe spoke “FutureHPC & BigData” of the ICSC – Centro Nazionale di Ricerca in High-Performance\r\nComputing, Big Data and Quantum Computing funded by European Union – NextGenerationEU –\r\nPNRR, by the Italian Ministry of University and Research “Progetti di Rilevante Interesse Nazionale”\r\nproject: “Multicriteria data structures and algorithms” (grant n. 2017WR7SHH).\r\nAcknowledgements We thank Stefan Walzer for early discussions leading to this paper.\r\narXiv:2304.11012v3 [cs.DS] 30 Aug 2023",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/291d50c5-5cd1-423a-96c8-5dbb8313a8b0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2563205d1f7a50dc81a86286c67c3dfabaab803c9d6252b883e068a603d135b8",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 502
      },
      {
        "segments": [
          {
            "segment_id": "be98fbcf-6b58-48d8-bd9e-f8e895d1c684",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 2,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "2 Learned Monotone Minimal Perfect Hashing\r\n1 Introduction\r\nGiven a set S of n keys drawn from a universe [u] = {0, . . . , u − 1}, a Monotone Minimal\r\nPerfect Hash Function (MMPHF) is a hash function that maps keys from S to their rank,\r\nand returns an arbitrary value for keys not in S. As the name suggests, such a function\r\nis both perfect because it has no collisions on S, and minimal because its output range is\r\n[n]. Differently from a Minimal Perfect Hash Function (MPHF) [4, 13, 18, 27, 41, 43, 45, 51],\r\nwhich maps keys from S bijectively to [n] in any order, and from an Order-Preserving MPHF\r\n(OPMPHF) [26], which retains a given (arbitrary) order on the keys, an MMPHF takes\r\nadvantage of the natural order of the universe to rank the keys in S in small space, i.e. without\r\nencoding them. Indeed, encoding S needs log \r\nu\r\nn\r\n\u0001\r\n/n = Ω(log u\r\nn\r\n) bits per key, and encoding\r\nthe ranks via an OPMPHF needs log(n!)/n = Ω(log n) bits per key, whilst an MMPHF may\r\nuse as few as O(log log log u) bits per key [2], which was recently proven to be optimal [1].\r\nThroughout this paper, log x stands for log2 x, and we use the w-bit word RAM model.\r\nMMPHFs have numerous applications [1]. They enable efficient queries both in encrypted\r\ndata [12] and databases [40, 42]. Further applications can be found in information retrieval,\r\nwhere MMPHFs can be used to index the lexicon [55] or to compute term frequencies [7, 47],\r\nand in pattern matching [5, 28, 33], where MMPHFs are applied mostly to integer sequences\r\nrepresenting the occurrences of certain characters in a text.\r\nDespite the widespread use of MMPHFs and recent advancements on their asymptotic\r\nbounds [1], the practical implementations have not made significant progress in terms of\r\nnew designs and improved space-time performance since their introduction more than a\r\ndecade ago [3], with only some exceptions targeting query time [34]. As a matter of fact, the\r\nsolutions in [3] are very sophisticated and well-optimised, and they offer a vast number of\r\nefficient space-time trade-offs that were hard to beat.\r\nIn this paper, we offer a fresh new perspective on MMPHFs that departs from existing\r\napproaches, which are mostly based on a trie-like data structure on the keys. We build upon\r\nrecent advances in (learning-based) indexing data structures, namely the PGM-index [21,25],\r\nand in retrieval data structures (or static functions), namely BuRR [15]. The former learns a\r\npiecewise linear approximation mapping keys in S to their rank estimate. The latter allows\r\nassociating a small fixed-width integer to each key in S, without storing S. We combine these\r\ntwo seemingly unrelated data structures in a surprisingly simple and effective way. First, we\r\nuse the PGM to monotonically map keys to buckets according to their rank estimate, and we\r\nstore the global rank of each bucket’s first key in a compressed data structure. Second, since\r\nthe rank estimate of some keys might coincide, we solve such bucket collisions by storing the\r\nlocal ranks of these keys using BuRR. We call our proposal LeMonHash, because it learns and\r\nleverages the smoothness of the input data to build a space-time efficient monotone MPHF.\r\nOn the theoretical side, this achieves O(1) bits per key for inputs which are sufficiently\r\nrandom within buckets— breaking the superlinear lower bound. Practically, on various\r\ninteger datasets tried, it needs about one-third less space than previous approaches and is an\r\norder of magnitude faster. We also extend LeMonHash to support variable-length string keys.\r\nThis approach needs space within 13% of the best competitors while being up to 3× faster.\r\nOutline. We first describe the basic building blocks of LeMonHash in Section 2 and discuss\r\nrelated work in Section 3. In Section 4, we describe LeMonHash for integers and then extend\r\nit to variable-length strings in Section 5. In Section 6, we discuss variants and refinements,\r\nbefore proving the space-time guarantees of LeMonHash in Section 7. In Section 8, we present\r\nour experiments. In Section 9, we summarise the paper and give an outlook for future work.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/be98fbcf-6b58-48d8-bd9e-f8e895d1c684.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4a3e957849f8f339d1359ad2548c0a7dda6704bf5d35fe015f7c62186b5a27cb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 693
      },
      {
        "segments": [
          {
            "segment_id": "be98fbcf-6b58-48d8-bd9e-f8e895d1c684",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 2,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "2 Learned Monotone Minimal Perfect Hashing\r\n1 Introduction\r\nGiven a set S of n keys drawn from a universe [u] = {0, . . . , u − 1}, a Monotone Minimal\r\nPerfect Hash Function (MMPHF) is a hash function that maps keys from S to their rank,\r\nand returns an arbitrary value for keys not in S. As the name suggests, such a function\r\nis both perfect because it has no collisions on S, and minimal because its output range is\r\n[n]. Differently from a Minimal Perfect Hash Function (MPHF) [4, 13, 18, 27, 41, 43, 45, 51],\r\nwhich maps keys from S bijectively to [n] in any order, and from an Order-Preserving MPHF\r\n(OPMPHF) [26], which retains a given (arbitrary) order on the keys, an MMPHF takes\r\nadvantage of the natural order of the universe to rank the keys in S in small space, i.e. without\r\nencoding them. Indeed, encoding S needs log \r\nu\r\nn\r\n\u0001\r\n/n = Ω(log u\r\nn\r\n) bits per key, and encoding\r\nthe ranks via an OPMPHF needs log(n!)/n = Ω(log n) bits per key, whilst an MMPHF may\r\nuse as few as O(log log log u) bits per key [2], which was recently proven to be optimal [1].\r\nThroughout this paper, log x stands for log2 x, and we use the w-bit word RAM model.\r\nMMPHFs have numerous applications [1]. They enable efficient queries both in encrypted\r\ndata [12] and databases [40, 42]. Further applications can be found in information retrieval,\r\nwhere MMPHFs can be used to index the lexicon [55] or to compute term frequencies [7, 47],\r\nand in pattern matching [5, 28, 33], where MMPHFs are applied mostly to integer sequences\r\nrepresenting the occurrences of certain characters in a text.\r\nDespite the widespread use of MMPHFs and recent advancements on their asymptotic\r\nbounds [1], the practical implementations have not made significant progress in terms of\r\nnew designs and improved space-time performance since their introduction more than a\r\ndecade ago [3], with only some exceptions targeting query time [34]. As a matter of fact, the\r\nsolutions in [3] are very sophisticated and well-optimised, and they offer a vast number of\r\nefficient space-time trade-offs that were hard to beat.\r\nIn this paper, we offer a fresh new perspective on MMPHFs that departs from existing\r\napproaches, which are mostly based on a trie-like data structure on the keys. We build upon\r\nrecent advances in (learning-based) indexing data structures, namely the PGM-index [21,25],\r\nand in retrieval data structures (or static functions), namely BuRR [15]. The former learns a\r\npiecewise linear approximation mapping keys in S to their rank estimate. The latter allows\r\nassociating a small fixed-width integer to each key in S, without storing S. We combine these\r\ntwo seemingly unrelated data structures in a surprisingly simple and effective way. First, we\r\nuse the PGM to monotonically map keys to buckets according to their rank estimate, and we\r\nstore the global rank of each bucket’s first key in a compressed data structure. Second, since\r\nthe rank estimate of some keys might coincide, we solve such bucket collisions by storing the\r\nlocal ranks of these keys using BuRR. We call our proposal LeMonHash, because it learns and\r\nleverages the smoothness of the input data to build a space-time efficient monotone MPHF.\r\nOn the theoretical side, this achieves O(1) bits per key for inputs which are sufficiently\r\nrandom within buckets— breaking the superlinear lower bound. Practically, on various\r\ninteger datasets tried, it needs about one-third less space than previous approaches and is an\r\norder of magnitude faster. We also extend LeMonHash to support variable-length string keys.\r\nThis approach needs space within 13% of the best competitors while being up to 3× faster.\r\nOutline. We first describe the basic building blocks of LeMonHash in Section 2 and discuss\r\nrelated work in Section 3. In Section 4, we describe LeMonHash for integers and then extend\r\nit to variable-length strings in Section 5. In Section 6, we discuss variants and refinements,\r\nbefore proving the space-time guarantees of LeMonHash in Section 7. In Section 8, we present\r\nour experiments. In Section 9, we summarise the paper and give an outlook for future work.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/be98fbcf-6b58-48d8-bd9e-f8e895d1c684.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4a3e957849f8f339d1359ad2548c0a7dda6704bf5d35fe015f7c62186b5a27cb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 693
      },
      {
        "segments": [
          {
            "segment_id": "d6c416a9-7e4f-426c-97da-b45ceeb7baab",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 3,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 3\r\n2 Preliminaries\r\nIn this section, we describe the basic building blocks of LeMonHash.\r\nBit Vectors. Given a bit vector of size n and b ∈ {0, 1}, the rankb(x) operation returns the\r\nnumber of b-bits before position x, and the selectb(i) operation returns the position of the ith\r\nb-bit. These operations can be executed in constant time using as little as o(n) bits on top\r\nof the bit vector [14, 35], and they have very space-time efficient implementations [31, 39, 53].\r\nElias-Fano. Elias-Fano Coding [17,19] is a way to efficiently store a non-decreasing sequence\r\nof n integers over a universe of size u. An integer at position i is split into two parts. The\r\nlog n upper bits x are stored in a bit vector H as a 1-bit in H[i + x]. The remaining lower\r\nbits are directly stored in an array L. Integers can be accessed in constant time by finding\r\nthe ith 1-bit in H using a select1 data structure and by looking up the lower bits in L.\r\nPredecessor queries are possible by determining the range of integers that share the same\r\nupper bits of the query key using two select0 queries, and then performing a binary search\r\non that range. If there are no duplicates, this binary search takes O\r\n\r\nmin{log n, log u\r\nn\r\n}\r\n\u0001\r\ntime.\r\nThe space usage of an Elias-Fano coded sequence is n⌈log u\r\nn\r\n⌉ + 2n + o(n) bits (see [48, §4.4]).\r\nPartitioned Elias-Fano [50] is an extension that uses dynamic programming to partition the\r\ninput into multiple independent Elias-Fano sequences to minimise the overall space usage.\r\nPGM-index. The PGM-index [25] is a space-efficient data structure for predecessor and\r\nrank queries on a sorted set of n keys from an integer universe [u]. Given a query q ∈ [u],\r\nit computes a rank estimate that is guaranteed to be close to the correct rank by a given\r\ninteger parameter ε. If one stores the input keys, then the correct rank can be recovered\r\nvia an O(log ε)-time binary search on 2ε + 1 keys around the rank estimate. The PGM\r\nis constructed in O(n) time by first mapping the sorted integers x1, . . . , xn in S to points\r\n(x1, 1), . . . ,(xn, n) in a key-position Cartesian plane, and then learning a piecewise linear\r\nε-approximation of these points, i.e. a sequence of m linear models each approximating the\r\nrank of the keys in a certain sub-range of [u] with a maximum absolute error ε. The value m,\r\nwhich impacts on the space of the PGM, can range between 1 and m ≤ n/(2ε) [25, Lemma 2]\r\ndepending on the “approximate linearity” of the points. In practice, it is very low and can\r\nbe proven to be m = O\r\n\r\nn/ε2\r\n\u0001\r\nwhen the gaps between keys are random variables from a\r\nproper distribution [21]. The time complexity to compute the rank estimate with a PGM\r\nis given by the time to search for the linear model that contains the searched key q, which\r\nboils down to a predecessor search on m integers from a universe of size u. For this, there\r\nexist many trade-offs in various models of computations [25, 49].\r\nRetrieval Data Structures. A retrieval data structure or static function on a set S of n keys\r\ndenotes a function f : S → {0, 1}\r\nr\r\nthat returns a specific r-bit value for each key. Applying\r\nthe function on a key not in S returns an arbitrary value. Retrieval data structures take\r\n(1 + η)rn bits, where η ≥ 0 is the space overhead over the space lower bound of rn bits.\r\nMWHC [44] is a retrieval data structure based on hypergraph peeling, has an overhead\r\nη = 0.23 and can be evaluated in constant time. 2-step MWHC [3] can have a smaller\r\noverhead than MWHC by using two MWHC functions of different widths.\r\nThe more recently proposed Bumped Ribbon Retrieval (BuRR) data structure [15] basically\r\nconsists of a matrix. The output value for a key can be obtained by multiplying the hash\r\nof the key with that matrix. The matrix can be calculated by solving a linear equation",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/d6c416a9-7e4f-426c-97da-b45ceeb7baab.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4fbb7d5b5bb6021edc14a802cc3a5a9c062e82d2b5618b2fdfb848e25f1b080b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 707
      },
      {
        "segments": [
          {
            "segment_id": "d6c416a9-7e4f-426c-97da-b45ceeb7baab",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 3,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 3\r\n2 Preliminaries\r\nIn this section, we describe the basic building blocks of LeMonHash.\r\nBit Vectors. Given a bit vector of size n and b ∈ {0, 1}, the rankb(x) operation returns the\r\nnumber of b-bits before position x, and the selectb(i) operation returns the position of the ith\r\nb-bit. These operations can be executed in constant time using as little as o(n) bits on top\r\nof the bit vector [14, 35], and they have very space-time efficient implementations [31, 39, 53].\r\nElias-Fano. Elias-Fano Coding [17,19] is a way to efficiently store a non-decreasing sequence\r\nof n integers over a universe of size u. An integer at position i is split into two parts. The\r\nlog n upper bits x are stored in a bit vector H as a 1-bit in H[i + x]. The remaining lower\r\nbits are directly stored in an array L. Integers can be accessed in constant time by finding\r\nthe ith 1-bit in H using a select1 data structure and by looking up the lower bits in L.\r\nPredecessor queries are possible by determining the range of integers that share the same\r\nupper bits of the query key using two select0 queries, and then performing a binary search\r\non that range. If there are no duplicates, this binary search takes O\r\n\r\nmin{log n, log u\r\nn\r\n}\r\n\u0001\r\ntime.\r\nThe space usage of an Elias-Fano coded sequence is n⌈log u\r\nn\r\n⌉ + 2n + o(n) bits (see [48, §4.4]).\r\nPartitioned Elias-Fano [50] is an extension that uses dynamic programming to partition the\r\ninput into multiple independent Elias-Fano sequences to minimise the overall space usage.\r\nPGM-index. The PGM-index [25] is a space-efficient data structure for predecessor and\r\nrank queries on a sorted set of n keys from an integer universe [u]. Given a query q ∈ [u],\r\nit computes a rank estimate that is guaranteed to be close to the correct rank by a given\r\ninteger parameter ε. If one stores the input keys, then the correct rank can be recovered\r\nvia an O(log ε)-time binary search on 2ε + 1 keys around the rank estimate. The PGM\r\nis constructed in O(n) time by first mapping the sorted integers x1, . . . , xn in S to points\r\n(x1, 1), . . . ,(xn, n) in a key-position Cartesian plane, and then learning a piecewise linear\r\nε-approximation of these points, i.e. a sequence of m linear models each approximating the\r\nrank of the keys in a certain sub-range of [u] with a maximum absolute error ε. The value m,\r\nwhich impacts on the space of the PGM, can range between 1 and m ≤ n/(2ε) [25, Lemma 2]\r\ndepending on the “approximate linearity” of the points. In practice, it is very low and can\r\nbe proven to be m = O\r\n\r\nn/ε2\r\n\u0001\r\nwhen the gaps between keys are random variables from a\r\nproper distribution [21]. The time complexity to compute the rank estimate with a PGM\r\nis given by the time to search for the linear model that contains the searched key q, which\r\nboils down to a predecessor search on m integers from a universe of size u. For this, there\r\nexist many trade-offs in various models of computations [25, 49].\r\nRetrieval Data Structures. A retrieval data structure or static function on a set S of n keys\r\ndenotes a function f : S → {0, 1}\r\nr\r\nthat returns a specific r-bit value for each key. Applying\r\nthe function on a key not in S returns an arbitrary value. Retrieval data structures take\r\n(1 + η)rn bits, where η ≥ 0 is the space overhead over the space lower bound of rn bits.\r\nMWHC [44] is a retrieval data structure based on hypergraph peeling, has an overhead\r\nη = 0.23 and can be evaluated in constant time. 2-step MWHC [3] can have a smaller\r\noverhead than MWHC by using two MWHC functions of different widths.\r\nThe more recently proposed Bumped Ribbon Retrieval (BuRR) data structure [15] basically\r\nconsists of a matrix. The output value for a key can be obtained by multiplying the hash\r\nof the key with that matrix. The matrix can be calculated by solving a linear equation",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/d6c416a9-7e4f-426c-97da-b45ceeb7baab.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4fbb7d5b5bb6021edc14a802cc3a5a9c062e82d2b5618b2fdfb848e25f1b080b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 707
      },
      {
        "segments": [
          {
            "segment_id": "3063b2d3-5bc0-486f-a12f-5cedd0c705a4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 4,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "4 Learned Monotone Minimal Perfect Hashing\r\nsystem. Because BuRR uses hash functions with spacial coupling [54], the equation system\r\nis almost a diagonal matrix, which makes it very efficient to solve. When some rows of\r\nthe equation system would prevent successful solving, BuRR bumps these rows (and the\r\ncorresponding keys) to the next layer of the same data structure. BuRR has an overhead\r\nη = O\r\n\r\nlog W/(rW2)\r\n\u0001\r\nand can be evaluated in O(1 + rW/ log n) time, where W = O(log n)\r\nis a parameter called ribbon width. In practice, BuRR achieves space overheads well below\r\nη = 1% while being faster than widely used data structures with much larger overhead [15].\r\n3 Related Work\r\nNon-monotone perfect hash functions are a related and very active area of research [4, 8, 13,\r\n18, 27, 41, 43, 45, 51]. Due to space constraints, we do not review them in detail. For a more\r\ndetailed list, refer to Ref. [41]. We also do not describe order-preserving minimal perfect\r\nhash functions [26] because their theoretical lower bound can trivially be reached by using a\r\nretrieval data structure taking log n bits per key (plus a small overhead). Another loosely\r\nrelated result is using learned models as a replacement for hash functions in traditional hash\r\ntables [38, 52], but it generally has a negative impact on the probe/insert throughput (and\r\nmost likely on the space too, due to the storage of the models’ parameters, which these\r\nstudies do not evaluate). We now look at monotone minimal perfect hash functions, first\r\ndescribing the idea of bucketing before then continuing with specific MMPHF constructions.\r\nBucketing. Bucketing [3] is a general technique to break down MMPHF construction into\r\nsmaller sub-problems. The idea is to store a simple monotone, but not necessarily minimal or\r\nperfect distributor function that maps input keys to buckets. Each bucket receives a smaller\r\nnumber of keys that can then be handled using some (smaller) MMPHF data structure.\r\nTo determine the global rank of a key, we need the prefix sum of the bucket sizes. For\r\nequally-sized buckets, this is trivial. Otherwise, this sequence can be stored with Elias-Fano\r\ncoding. In the paper by Belazzougui et al. [3], where many of the following techniques are\r\ndescribed, the authors use MWHC [44] to explicitly store the ranks within each bucket.\r\nLeMonHash uses a learned distributor and buckets of expected size 1 (see Section 4).\r\nLongest Common Prefix. Bucketing with Longest Common Prefixes (LCP) [2] maps keys\r\nto equally sized buckets. A first retrieval data structure maps all keys to the length of the\r\nLCP among all keys in its bucket. A second one then maps the value of the LCP to the\r\nbucket index. Overall, it uses O(log log u) bits per key and query time O((log u)/w), and in\r\npractice it has been shown to be the fastest but the most space-inefficient MMPHF [3].\r\nPartial Compacted Trie. First map the keys to equally sized buckets and consider the last\r\nkey of each bucket as a router indexed by a compacted trie, e.g., a binary tree where every\r\nnode contains a bit string denoting the common prefix of its descending keys. During queries,\r\nthe trie is traversed by comparing the bit string of the traversed nodes with the key to decide\r\nwhether to stop the search operation at some node (if the prefix does not match), or descend\r\ninto the left or right subtree based on the next bit of the key. A Partial Compacted Trie\r\n(PaCo Trie) [3] compresses the compacted trie above by 30–50% by exploiting the fact that,\r\nin an MMPHF, the trie needs to correctly rank only the keys from the input set. Therefore,\r\neach node can store a shorter bit string just long enough to correctly route all input keys.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/3063b2d3-5bc0-486f-a12f-5cedd0c705a4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dd4cd75ed3ee162cc1163f2881f2ad208ac9ccf852d09309268abb9fdef0573b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 632
      },
      {
        "segments": [
          {
            "segment_id": "3063b2d3-5bc0-486f-a12f-5cedd0c705a4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 4,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "4 Learned Monotone Minimal Perfect Hashing\r\nsystem. Because BuRR uses hash functions with spacial coupling [54], the equation system\r\nis almost a diagonal matrix, which makes it very efficient to solve. When some rows of\r\nthe equation system would prevent successful solving, BuRR bumps these rows (and the\r\ncorresponding keys) to the next layer of the same data structure. BuRR has an overhead\r\nη = O\r\n\r\nlog W/(rW2)\r\n\u0001\r\nand can be evaluated in O(1 + rW/ log n) time, where W = O(log n)\r\nis a parameter called ribbon width. In practice, BuRR achieves space overheads well below\r\nη = 1% while being faster than widely used data structures with much larger overhead [15].\r\n3 Related Work\r\nNon-monotone perfect hash functions are a related and very active area of research [4, 8, 13,\r\n18, 27, 41, 43, 45, 51]. Due to space constraints, we do not review them in detail. For a more\r\ndetailed list, refer to Ref. [41]. We also do not describe order-preserving minimal perfect\r\nhash functions [26] because their theoretical lower bound can trivially be reached by using a\r\nretrieval data structure taking log n bits per key (plus a small overhead). Another loosely\r\nrelated result is using learned models as a replacement for hash functions in traditional hash\r\ntables [38, 52], but it generally has a negative impact on the probe/insert throughput (and\r\nmost likely on the space too, due to the storage of the models’ parameters, which these\r\nstudies do not evaluate). We now look at monotone minimal perfect hash functions, first\r\ndescribing the idea of bucketing before then continuing with specific MMPHF constructions.\r\nBucketing. Bucketing [3] is a general technique to break down MMPHF construction into\r\nsmaller sub-problems. The idea is to store a simple monotone, but not necessarily minimal or\r\nperfect distributor function that maps input keys to buckets. Each bucket receives a smaller\r\nnumber of keys that can then be handled using some (smaller) MMPHF data structure.\r\nTo determine the global rank of a key, we need the prefix sum of the bucket sizes. For\r\nequally-sized buckets, this is trivial. Otherwise, this sequence can be stored with Elias-Fano\r\ncoding. In the paper by Belazzougui et al. [3], where many of the following techniques are\r\ndescribed, the authors use MWHC [44] to explicitly store the ranks within each bucket.\r\nLeMonHash uses a learned distributor and buckets of expected size 1 (see Section 4).\r\nLongest Common Prefix. Bucketing with Longest Common Prefixes (LCP) [2] maps keys\r\nto equally sized buckets. A first retrieval data structure maps all keys to the length of the\r\nLCP among all keys in its bucket. A second one then maps the value of the LCP to the\r\nbucket index. Overall, it uses O(log log u) bits per key and query time O((log u)/w), and in\r\npractice it has been shown to be the fastest but the most space-inefficient MMPHF [3].\r\nPartial Compacted Trie. First map the keys to equally sized buckets and consider the last\r\nkey of each bucket as a router indexed by a compacted trie, e.g., a binary tree where every\r\nnode contains a bit string denoting the common prefix of its descending keys. During queries,\r\nthe trie is traversed by comparing the bit string of the traversed nodes with the key to decide\r\nwhether to stop the search operation at some node (if the prefix does not match), or descend\r\ninto the left or right subtree based on the next bit of the key. A Partial Compacted Trie\r\n(PaCo Trie) [3] compresses the compacted trie above by 30–50% by exploiting the fact that,\r\nin an MMPHF, the trie needs to correctly rank only the keys from the input set. Therefore,\r\neach node can store a shorter bit string just long enough to correctly route all input keys.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/3063b2d3-5bc0-486f-a12f-5cedd0c705a4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dd4cd75ed3ee162cc1163f2881f2ad208ac9ccf852d09309268abb9fdef0573b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 632
      },
      {
        "segments": [
          {
            "segment_id": "142a317c-9797-4a7b-8dff-b7c730a39447",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 5,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 5\r\nHollow Trie. A Hollow Trie [3] only stores the position of the next bit to look at. Hollow\r\ntries can be represented succinctly using balanced parentheses [46]. To use hollow tries for\r\nbucketing, and thus allow the routing of not-indexed keys, we need a modification to the\r\ndata structure. The Hollow Trie Distributor [3] uses a retrieval data structure that maps the\r\ncompacted substrings of each key in each tree node to the behaviour of that key in the node\r\n(stopping at the left or right of the node, or following the trie using the next bit of the key).\r\nOverall, it uses O(log log log u) bits per key and query time O(log u).\r\nZFast Trie. To construct a ZFast Trie [2], we first generate a path-compacted trie. Then,\r\nfor prefixes of a specific length (2-fattest number) of all input keys, a dictionary stores the trie\r\nnode that represents that prefix. A query can then perform a binary search over the length\r\nof the queried key. If there is no node in the dictionary for a given prefix, the search can\r\ncontinue with the pivot as its upper bound. If there is a node, the lower bound of the search\r\ncan be set to the length of the longest common prefix of all keys represented by that node.\r\nThe ZFast trie uses O(log log log u) bits per key and query time O((log u)/w + log log u).\r\nPath Decomposed Trie. In the previous paragraphs, we described binary tries with a rather\r\nhigh height. However, those tries are inefficient to query because of the pointer chasing to\r\nnon-local memory areas. The main idea behind Path Decomposed Tries [20], which can be\r\nused as an MMPHF [34], is to reduce the height of the tries. We first select one path all\r\nthe way from the root node to a leaf. This path is now contracted to a single node, which\r\nbecomes the root node in our new path decomposed trie. The remaining nodes in the original\r\ntrie form subtries branching from every node in that path. We take all of these subtries,\r\nmake them children of the root node, and annotate them by their branching character with\r\nrespect to the selected path. The subtries are then converted to path decomposed tries\r\nrecursively. In centroid path decomposition, the path to be contracted is always the one that\r\ndescends to the node with the most leaves in its subtree.\r\n4 LeMonHash\r\nWe now introduce the main contribution of this paper— the MMPHF LeMonHash. The\r\ncore idea of LeMonHash is surprisingly simple. We take all the n input integers and map\r\nthem to n buckets using some monotone mapping function, that we will describe later. We\r\nstore an Elias-Fano coded sequence with the global ranks of the first key in each bucket using\r\n2n + o(n) bits. Given a bucket of size b, we use a ⌈log b⌉-bit retrieval data structure (see\r\nSection 2) to store the local ranks of all its keys. Note that we do not need to store local\r\nranks if the bucket has only 0 or 1 keys. For squeezing space, instead of storing one retrieval\r\ndata structure per bucket, we store a collection of retrieval data structures so that the ith\r\none stores the local ranks of all keys mapped to buckets whose size b is such that i = ⌈log b⌉.\r\nAn illustration of the overall data structure is given in Figure 1a.\r\nBucket Mapping Function. The space efficiency of LeMonHash is directly related to the\r\nquality of the monotone mapping function. For uniform random integers, a linear mapping\r\nfrom input keys to n buckets, i.e. a mapping from a key x to the bucket number ⌊xn/u⌋,\r\nleads to an MMPHF with a space usage of just 2.915 bits per key (see Theorem 1). Intuitively,\r\nsuch a linear mapping returns a rank estimate in [n] for a given key. However, for skewed\r\ndistributions, the rank estimate can be far away which can create large buckets whose local\r\nranks are expensive to store. For example, if the majority of the keys are such that x < u/n,",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/142a317c-9797-4a7b-8dff-b7c730a39447.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=99b65f05c12b19d6ba7bd3d280bad28eebc5be424c53872314ac84dfd2029dd2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 698
      },
      {
        "segments": [
          {
            "segment_id": "142a317c-9797-4a7b-8dff-b7c730a39447",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 5,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 5\r\nHollow Trie. A Hollow Trie [3] only stores the position of the next bit to look at. Hollow\r\ntries can be represented succinctly using balanced parentheses [46]. To use hollow tries for\r\nbucketing, and thus allow the routing of not-indexed keys, we need a modification to the\r\ndata structure. The Hollow Trie Distributor [3] uses a retrieval data structure that maps the\r\ncompacted substrings of each key in each tree node to the behaviour of that key in the node\r\n(stopping at the left or right of the node, or following the trie using the next bit of the key).\r\nOverall, it uses O(log log log u) bits per key and query time O(log u).\r\nZFast Trie. To construct a ZFast Trie [2], we first generate a path-compacted trie. Then,\r\nfor prefixes of a specific length (2-fattest number) of all input keys, a dictionary stores the trie\r\nnode that represents that prefix. A query can then perform a binary search over the length\r\nof the queried key. If there is no node in the dictionary for a given prefix, the search can\r\ncontinue with the pivot as its upper bound. If there is a node, the lower bound of the search\r\ncan be set to the length of the longest common prefix of all keys represented by that node.\r\nThe ZFast trie uses O(log log log u) bits per key and query time O((log u)/w + log log u).\r\nPath Decomposed Trie. In the previous paragraphs, we described binary tries with a rather\r\nhigh height. However, those tries are inefficient to query because of the pointer chasing to\r\nnon-local memory areas. The main idea behind Path Decomposed Tries [20], which can be\r\nused as an MMPHF [34], is to reduce the height of the tries. We first select one path all\r\nthe way from the root node to a leaf. This path is now contracted to a single node, which\r\nbecomes the root node in our new path decomposed trie. The remaining nodes in the original\r\ntrie form subtries branching from every node in that path. We take all of these subtries,\r\nmake them children of the root node, and annotate them by their branching character with\r\nrespect to the selected path. The subtries are then converted to path decomposed tries\r\nrecursively. In centroid path decomposition, the path to be contracted is always the one that\r\ndescends to the node with the most leaves in its subtree.\r\n4 LeMonHash\r\nWe now introduce the main contribution of this paper— the MMPHF LeMonHash. The\r\ncore idea of LeMonHash is surprisingly simple. We take all the n input integers and map\r\nthem to n buckets using some monotone mapping function, that we will describe later. We\r\nstore an Elias-Fano coded sequence with the global ranks of the first key in each bucket using\r\n2n + o(n) bits. Given a bucket of size b, we use a ⌈log b⌉-bit retrieval data structure (see\r\nSection 2) to store the local ranks of all its keys. Note that we do not need to store local\r\nranks if the bucket has only 0 or 1 keys. For squeezing space, instead of storing one retrieval\r\ndata structure per bucket, we store a collection of retrieval data structures so that the ith\r\none stores the local ranks of all keys mapped to buckets whose size b is such that i = ⌈log b⌉.\r\nAn illustration of the overall data structure is given in Figure 1a.\r\nBucket Mapping Function. The space efficiency of LeMonHash is directly related to the\r\nquality of the monotone mapping function. For uniform random integers, a linear mapping\r\nfrom input keys to n buckets, i.e. a mapping from a key x to the bucket number ⌊xn/u⌋,\r\nleads to an MMPHF with a space usage of just 2.915 bits per key (see Theorem 1). Intuitively,\r\nsuch a linear mapping returns a rank estimate in [n] for a given key. However, for skewed\r\ndistributions, the rank estimate can be far away which can create large buckets whose local\r\nranks are expensive to store. For example, if the majority of the keys are such that x < u/n,",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/142a317c-9797-4a7b-8dff-b7c730a39447.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=99b65f05c12b19d6ba7bd3d280bad28eebc5be424c53872314ac84dfd2029dd2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 698
      },
      {
        "segments": [
          {
            "segment_id": "20ff18ef-5209-483f-9383-7dc6767203e3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 6,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "6 Learned Monotone Minimal Perfect Hashing\r\n0 1 1 3 4 4 5 6 6 9 10 11 0 1 00 01 10 n input keys n buckets Retrieval u\r\nMapper Global ranks ∈ [n]\r\n(a) LeMonHash. Keys are mapped to buckets.\r\nRanks within buckets are stored in (a collection\r\nof) retrieval data structures.\r\n0 3 7 20 23 23 25 35 35 First chunks of all n input keys\r\nFew keys\r\nwith these\r\nchunks,\r\nstore local\r\nranks Next chunks Next chunks 3 11 11 20 23 29 29 35 2\r\nw\r\nc buckets Global ranks ∈ [n]\r\nMapper\r\n(b) LeMonHash-VL. Global ranks in each level are\r\nstored together. Buckets that are not handled re\u0002cursively use retrieval data structures like before.\r\nFigure 1 Illustration of the LeMonHash and LeMonHash-VL data structures.\r\nthen the first bucket will be large enough to require Θ(log n) bits per key, i.e. our MMPHF\r\ndegenerates to a trivial OPMPHF. To tackle this problem, we implement the mapping\r\nfunction with a PGM-index [25]. As we observed in Section 2, the PGM was originally\r\ndesigned as a predecessor-search data structure. Here, we use the PGM as a rank estimator\r\nthat, for a given key, returns an ε-bounded estimate of its rank. To achieve this result\r\nin LeMonHash, we do not store the list of indexed keys and simply use the PGM’s rank\r\nestimate as the bucket index. The PGM internally adapts to the input data by learning the\r\nsmoothness in the distribution via a piecewise linear ε-approximation model, thus it can be\r\nthought of as a “local” approximation of the linear mapping above. Real-world data sets can\r\noften be approximated using piecewise linear models, as discussed in the literature [21] and\r\nalso demonstrated by the good space efficiency of our experiments (see Section 8). There\r\nis a trade-off between the amount of space needed to represent the PGM and the quality\r\nof the mapping, which depends on both the input data distribution and the given integer\r\nparameter ε. In Section 8, we test both a version with a constant ε value and a version\r\nthat auto-tunes its value by constructing multiple PGMs and then selecting the optimal ε.\r\nFinally, we observe that with the PGM mapper, unlike for the linear mapping and other non\r\nerror-bounded learning-based approaches [24, 37], the number of retrieval data structures we\r\nneed to keep is bounded by O(log ε) regardless of the input key distribution (see Theorem 2).\r\nQueries. Given a key q, we obtain its bucket i using the mapping function. The global rank\r\nof the (first key in the) bucket is the ith integer in the Elias-Fano coded sequence of global\r\nranks, which can be accessed in constant time, and the bucket size is computed by subtraction\r\nfrom the next integer in that sequence. The bucket size b directly tells us which retrieval data\r\nstructure to query, i.e. the ⌈log b⌉th one. Evaluating the retrieval data structure with q gives\r\nus its local rank in the bucket. Adding this to the global rank of the bucket gives us the rank\r\nof q. As we show in Section 7, for uniform data, the linear bucket mapper gives constant time\r\nqueries, while for other inputs we use the PGM mapper and the query time is O(log log u).\r\nComparison to Known Solutions. Known MMPHFs in the literature typically divide\r\nthe keys into equal-size buckets and build a compact trie-based distributor. Unlike them,\r\nLeMonHash learns the data linearities and leverages them to distribute keys to buckets close\r\nto their rank. Whenever some keys collide into a bucket, LeMonHash handles these keys via\r\na (small) collection of succinct retrieval structures. In contrast to known solutions, whenever",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/20ff18ef-5209-483f-9383-7dc6767203e3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6673d327be3fcc52bb66a2bf182ceb8ead2ede59a49b25a8fae5d7234454c5a4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 612
      },
      {
        "segments": [
          {
            "segment_id": "20ff18ef-5209-483f-9383-7dc6767203e3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 6,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "6 Learned Monotone Minimal Perfect Hashing\r\n0 1 1 3 4 4 5 6 6 9 10 11 0 1 00 01 10 n input keys n buckets Retrieval u\r\nMapper Global ranks ∈ [n]\r\n(a) LeMonHash. Keys are mapped to buckets.\r\nRanks within buckets are stored in (a collection\r\nof) retrieval data structures.\r\n0 3 7 20 23 23 25 35 35 First chunks of all n input keys\r\nFew keys\r\nwith these\r\nchunks,\r\nstore local\r\nranks Next chunks Next chunks 3 11 11 20 23 29 29 35 2\r\nw\r\nc buckets Global ranks ∈ [n]\r\nMapper\r\n(b) LeMonHash-VL. Global ranks in each level are\r\nstored together. Buckets that are not handled re\u0002cursively use retrieval data structures like before.\r\nFigure 1 Illustration of the LeMonHash and LeMonHash-VL data structures.\r\nthen the first bucket will be large enough to require Θ(log n) bits per key, i.e. our MMPHF\r\ndegenerates to a trivial OPMPHF. To tackle this problem, we implement the mapping\r\nfunction with a PGM-index [25]. As we observed in Section 2, the PGM was originally\r\ndesigned as a predecessor-search data structure. Here, we use the PGM as a rank estimator\r\nthat, for a given key, returns an ε-bounded estimate of its rank. To achieve this result\r\nin LeMonHash, we do not store the list of indexed keys and simply use the PGM’s rank\r\nestimate as the bucket index. The PGM internally adapts to the input data by learning the\r\nsmoothness in the distribution via a piecewise linear ε-approximation model, thus it can be\r\nthought of as a “local” approximation of the linear mapping above. Real-world data sets can\r\noften be approximated using piecewise linear models, as discussed in the literature [21] and\r\nalso demonstrated by the good space efficiency of our experiments (see Section 8). There\r\nis a trade-off between the amount of space needed to represent the PGM and the quality\r\nof the mapping, which depends on both the input data distribution and the given integer\r\nparameter ε. In Section 8, we test both a version with a constant ε value and a version\r\nthat auto-tunes its value by constructing multiple PGMs and then selecting the optimal ε.\r\nFinally, we observe that with the PGM mapper, unlike for the linear mapping and other non\r\nerror-bounded learning-based approaches [24, 37], the number of retrieval data structures we\r\nneed to keep is bounded by O(log ε) regardless of the input key distribution (see Theorem 2).\r\nQueries. Given a key q, we obtain its bucket i using the mapping function. The global rank\r\nof the (first key in the) bucket is the ith integer in the Elias-Fano coded sequence of global\r\nranks, which can be accessed in constant time, and the bucket size is computed by subtraction\r\nfrom the next integer in that sequence. The bucket size b directly tells us which retrieval data\r\nstructure to query, i.e. the ⌈log b⌉th one. Evaluating the retrieval data structure with q gives\r\nus its local rank in the bucket. Adding this to the global rank of the bucket gives us the rank\r\nof q. As we show in Section 7, for uniform data, the linear bucket mapper gives constant time\r\nqueries, while for other inputs we use the PGM mapper and the query time is O(log log u).\r\nComparison to Known Solutions. Known MMPHFs in the literature typically divide\r\nthe keys into equal-size buckets and build a compact trie-based distributor. Unlike them,\r\nLeMonHash learns the data linearities and leverages them to distribute keys to buckets close\r\nto their rank. Whenever some keys collide into a bucket, LeMonHash handles these keys via\r\na (small) collection of succinct retrieval structures. In contrast to known solutions, whenever",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/20ff18ef-5209-483f-9383-7dc6767203e3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6673d327be3fcc52bb66a2bf182ceb8ead2ede59a49b25a8fae5d7234454c5a4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 612
      },
      {
        "segments": [
          {
            "segment_id": "0845055a-37e4-46f0-82fb-e2b54fd5d64b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 7,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 7\r\na key is the only one mapped to its bucket, no information needs to be stored in (and no\r\nquery is issued on) a retrieval data structure. These features allow LeMonHash to possibly\r\nachieve reduced space occupancy compared to classic MMPHFs, which are oblivious to data\r\nlinearities. Also, LeMonHash can reduce the query time by replacing the cache-inefficient\r\ntraversal of a trie with the PGM mapper, which in practice is fast to evaluate.\r\n5 LeMonHash-VL\r\nOf course, the idea of LeMonHash can be immediately applied to keys whose maximum\r\nlongest common prefix (LCP) is less than w bits. In this case, each string prefix and the\r\nfollowing bit (which are sufficient to distinguish every string from each other) fit into one\r\nmachine word and thus can be handled efficiently in time and in space by the PGM mapper.\r\nFor strings with longer LCPs, we introduce a tree data structure that we call LeMonHash-VL\r\n(since it handles Variable-Length strings). The main idea is to simply compute the bucket\r\nmapping on a length-w substring of each string, which we call a chunk. Buckets that receive\r\nmany keys using this procedure are then handled recursively. Details follow.\r\nOverview. We start with a root node representing all the string keys in S and consider the\r\nset of chunks extracted from each key starting from position |p| (which we store), where p is\r\nthe LCP among the keys in S. Given these c distinct chunks, we construct a PGM mapper\r\nto distribute the keys to buckets in [c], and we store an Elias-Fano coded sequence with the\r\nglobal ranks of the first key in each bucket. Clearly, different keys can be mapped to the\r\nsame bucket because the PGM mapper is not perfect (as in the integer case) and because\r\nthey share the same chunk value (unlike in the integer case). For example, for the strings\r\nS = {cherry, cocoa, coconut} with p = c and chunks composed of 3 characters, the keys\r\ncocoa and coconut share the chunk value oco and will be mapped to the same bucket.\r\nIf a bucket of size b contains fewer input strings than a specific threshold t, we store the\r\nlocal ranks of the strings in the bucket in a ⌈log b⌉-bit retrieval data structure. Once again,\r\nwe do not need to store local ranks if the bucket has only 0 or 1 keys. If instead the bucket is\r\nlarge (i.e. b ≥ t), we create a child node in the tree data structure by applying the same idea\r\nrecursively on the strings S\r\n′ of that bucket. This means that we compute a PGM mapper on\r\nthe chunks extracted from each string in S\r\n′\r\nstarting from position |p\r\n′\r\n|, where p\r\n′\r\nis the LCP\r\namong the bucket strings S\r\n′\r\n. Notice that |p\r\n′\r\n| ≥ |p| but we always guarantee that S\r\n′ ⊊ S, so\r\nthe recursion is bounded. In practice, we set the threshold t = 128 (see Section 8.1).\r\nAt query time, we can use the sequence of global ranks to calculate the bucket size b,\r\nwhich allows determining whether we need to continue recursively on a child (because b ≥ t)\r\nor directly return the global rank of the bucket plus the local rank stored in the ⌈log b⌉-bit\r\nretrieval data structure. Figure 1b gives an overview of the data structure.\r\nWe observe that the global ranks of each node increase monotonically from left to right\r\nin each level of the overall tree. Therefore, we merge all these global ranks in a level into one\r\nElias-Fano sequence, thereby avoiding the space overhead of storing many small sequences.\r\nOf course, each inner node of the tree needs some extra metadata, like the encoding of its\r\nbucket mapper, the value of |p|, and an offset to its first global rank in the per-level Elias-Fano\r\nsequence. We associate a node to its metadata via a minimal perfect hash function, where\r\nthe identifier of a node is given by the path of the buckets’ indices leading to it.\r\nGiven the overall idea, there is a wide range of optimisations that we use. In the\r\nfollowing, we outline the main algorithmic ones and refer the interested reader to our\r\nimplementation [29] and Appendix C for the many other small-and-tricky optimisations,",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/0845055a-37e4-46f0-82fb-e2b54fd5d64b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=524a00245eb87ab9dcb7dd2b8ed37ff3e94cec7bf7d23ced53e6a16a2e874fc3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 726
      },
      {
        "segments": [
          {
            "segment_id": "0845055a-37e4-46f0-82fb-e2b54fd5d64b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 7,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 7\r\na key is the only one mapped to its bucket, no information needs to be stored in (and no\r\nquery is issued on) a retrieval data structure. These features allow LeMonHash to possibly\r\nachieve reduced space occupancy compared to classic MMPHFs, which are oblivious to data\r\nlinearities. Also, LeMonHash can reduce the query time by replacing the cache-inefficient\r\ntraversal of a trie with the PGM mapper, which in practice is fast to evaluate.\r\n5 LeMonHash-VL\r\nOf course, the idea of LeMonHash can be immediately applied to keys whose maximum\r\nlongest common prefix (LCP) is less than w bits. In this case, each string prefix and the\r\nfollowing bit (which are sufficient to distinguish every string from each other) fit into one\r\nmachine word and thus can be handled efficiently in time and in space by the PGM mapper.\r\nFor strings with longer LCPs, we introduce a tree data structure that we call LeMonHash-VL\r\n(since it handles Variable-Length strings). The main idea is to simply compute the bucket\r\nmapping on a length-w substring of each string, which we call a chunk. Buckets that receive\r\nmany keys using this procedure are then handled recursively. Details follow.\r\nOverview. We start with a root node representing all the string keys in S and consider the\r\nset of chunks extracted from each key starting from position |p| (which we store), where p is\r\nthe LCP among the keys in S. Given these c distinct chunks, we construct a PGM mapper\r\nto distribute the keys to buckets in [c], and we store an Elias-Fano coded sequence with the\r\nglobal ranks of the first key in each bucket. Clearly, different keys can be mapped to the\r\nsame bucket because the PGM mapper is not perfect (as in the integer case) and because\r\nthey share the same chunk value (unlike in the integer case). For example, for the strings\r\nS = {cherry, cocoa, coconut} with p = c and chunks composed of 3 characters, the keys\r\ncocoa and coconut share the chunk value oco and will be mapped to the same bucket.\r\nIf a bucket of size b contains fewer input strings than a specific threshold t, we store the\r\nlocal ranks of the strings in the bucket in a ⌈log b⌉-bit retrieval data structure. Once again,\r\nwe do not need to store local ranks if the bucket has only 0 or 1 keys. If instead the bucket is\r\nlarge (i.e. b ≥ t), we create a child node in the tree data structure by applying the same idea\r\nrecursively on the strings S\r\n′ of that bucket. This means that we compute a PGM mapper on\r\nthe chunks extracted from each string in S\r\n′\r\nstarting from position |p\r\n′\r\n|, where p\r\n′\r\nis the LCP\r\namong the bucket strings S\r\n′\r\n. Notice that |p\r\n′\r\n| ≥ |p| but we always guarantee that S\r\n′ ⊊ S, so\r\nthe recursion is bounded. In practice, we set the threshold t = 128 (see Section 8.1).\r\nAt query time, we can use the sequence of global ranks to calculate the bucket size b,\r\nwhich allows determining whether we need to continue recursively on a child (because b ≥ t)\r\nor directly return the global rank of the bucket plus the local rank stored in the ⌈log b⌉-bit\r\nretrieval data structure. Figure 1b gives an overview of the data structure.\r\nWe observe that the global ranks of each node increase monotonically from left to right\r\nin each level of the overall tree. Therefore, we merge all these global ranks in a level into one\r\nElias-Fano sequence, thereby avoiding the space overhead of storing many small sequences.\r\nOf course, each inner node of the tree needs some extra metadata, like the encoding of its\r\nbucket mapper, the value of |p|, and an offset to its first global rank in the per-level Elias-Fano\r\nsequence. We associate a node to its metadata via a minimal perfect hash function, where\r\nthe identifier of a node is given by the path of the buckets’ indices leading to it.\r\nGiven the overall idea, there is a wide range of optimisations that we use. In the\r\nfollowing, we outline the main algorithmic ones and refer the interested reader to our\r\nimplementation [29] and Appendix C for the many other small-and-tricky optimisations,",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/0845055a-37e4-46f0-82fb-e2b54fd5d64b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=524a00245eb87ab9dcb7dd2b8ed37ff3e94cec7bf7d23ced53e6a16a2e874fc3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 726
      },
      {
        "segments": [
          {
            "segment_id": "bc7fafcc-1f1e-4e38-8849-9dbca629a34a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 8,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "8 Learned Monotone Minimal Perfect Hashing\r\nsuch as the use of specialised instructions like popcount and bextr, or lookup tables.\r\nAlphabet Reduction. The number of nodes and the depth of LeMonHash-VL depend on\r\nboth the length and distribution of the input strings, and on how well the PGM mapper\r\nat each node can map strings to distinct buckets given their w-bit chunks. Therefore, we\r\nshould aim to fit as much information as possible in the w-bit chunks. We do so by exploiting\r\nthe fact that, in real-world data sets, often only a very small alphabet Σ of branching\r\ncharacters distinguish the strings in each bucket, and that we do not care about the other\r\ncharacters. We extract chunks from the suffix of each string starting from the position\r\nfollowing the LCP p, as before, but interpret the suffix as a number in radix σ = |Σ| where\r\neach character is replaced by its 0-based index in Σ if present, or by 0 if not present. For\r\nexample, for a node on the strings {shoppers, shopping, shops} whose LCP is p = shop,\r\nwe would store the alphabet Σ = {e, i, p, s} and map the suffix “pers” of “shoppers” to\r\nindex(p)σ\r\n3 + index(e)σ2 + index(r)σ1 + index(s)σ0 = 2σ3 + 0σ2 + 0σ1 + 3σ0\r\n. Observe that\r\nthe chunks computed in this way still preserve the lexicographic order of the strings. The\r\nnumber of characters we extract is computed to fit as many characters as possible in a w-bit\r\nword, i.e. ⌊w/ log σ⌋ characters. In our implementation over bytes, we store Σ via a bitmap\r\nof size 128 or 256, depending on whether its characters are a subset of ASCII or not. Finally,\r\nwe mention that a mapping from strings to numbers in radix σ has also been used to build\r\ncompressed string dictionaries [9], but the twist here is that we are considering only the\r\nalphabet of the branching characters since we do not need to store the keys.\r\nElias-Fano Sequences. The large per-level Elias-Fano sequences of global ranks have a very\r\nirregular structure. For example, if many of the strings in a node share the same chunks,\r\nthere is a large gap between two of the stored ranks. We can deal with these irregularities and\r\nreduce the overall space usage by using partitioned Elias-Fano [50]. Furthermore, the PGM\r\nmappers do not always provide a very uniform mapping, which thus results in empty buckets.\r\nAn empty bucket corresponds to a duplicate offset value being stored in the Elias-Fano\r\nsequences (see e.g. the duplicate offset 23 in Figure 1b). To optimise the space usage of\r\nsuch duplicates, we filter them out before constructing the partitioned Elias-Fano sequence.\r\nWe do this by grouping the stored numbers in groups of 3 numbers. If all 3 numbers are\r\nduplicates of the number before that group, we do not need to store the group. A bit vector\r\nwith rank support indicates which groups were removed.\r\nPerfect Chunk Mapping. In many datasets, there might be only a small number of different\r\nchunks, even if the number of strings they represent is large. For instance, chunks computed\r\non the first bytes of a set of URLs might be a few due to the scarcity of hostnames, but\r\neach host may contain many distinct pages. In these cases, instead of a PGM, it might be\r\nmore space-efficient to build a (perfect) map from chunks to buckets in [c] via a retrieval\r\ndata structure taking c⌈log c⌉ bits overall (plus a small overhead), where c is the number of\r\ndistinct chunks. In practice, we apply this optimisation whenever c < 128 (see Section 8.1).\r\nComparison to Known Solutions. In essence, LeMonHash-VL applies the idea of LeM\u0002onHash recursively to handle variable-length strings. Therefore, unlike known solutions, it\r\ncan leverage data linearities to distribute w-bit chunks from the input strings to buckets\r\nusing small space, and use additional child nodes only whenever a bucket contains many\r\nstrings that thus require inspecting the following chunks to be distinguished. Additionally, it\r\nperforms an adaptive alphabet reduction within the buckets to fit more information in the",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/bc7fafcc-1f1e-4e38-8849-9dbca629a34a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f67266e6ddcb397942fc8765ddcc47285801795d46a1aa8a66522aacf928b569",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 687
      },
      {
        "segments": [
          {
            "segment_id": "bc7fafcc-1f1e-4e38-8849-9dbca629a34a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 8,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "8 Learned Monotone Minimal Perfect Hashing\r\nsuch as the use of specialised instructions like popcount and bextr, or lookup tables.\r\nAlphabet Reduction. The number of nodes and the depth of LeMonHash-VL depend on\r\nboth the length and distribution of the input strings, and on how well the PGM mapper\r\nat each node can map strings to distinct buckets given their w-bit chunks. Therefore, we\r\nshould aim to fit as much information as possible in the w-bit chunks. We do so by exploiting\r\nthe fact that, in real-world data sets, often only a very small alphabet Σ of branching\r\ncharacters distinguish the strings in each bucket, and that we do not care about the other\r\ncharacters. We extract chunks from the suffix of each string starting from the position\r\nfollowing the LCP p, as before, but interpret the suffix as a number in radix σ = |Σ| where\r\neach character is replaced by its 0-based index in Σ if present, or by 0 if not present. For\r\nexample, for a node on the strings {shoppers, shopping, shops} whose LCP is p = shop,\r\nwe would store the alphabet Σ = {e, i, p, s} and map the suffix “pers” of “shoppers” to\r\nindex(p)σ\r\n3 + index(e)σ2 + index(r)σ1 + index(s)σ0 = 2σ3 + 0σ2 + 0σ1 + 3σ0\r\n. Observe that\r\nthe chunks computed in this way still preserve the lexicographic order of the strings. The\r\nnumber of characters we extract is computed to fit as many characters as possible in a w-bit\r\nword, i.e. ⌊w/ log σ⌋ characters. In our implementation over bytes, we store Σ via a bitmap\r\nof size 128 or 256, depending on whether its characters are a subset of ASCII or not. Finally,\r\nwe mention that a mapping from strings to numbers in radix σ has also been used to build\r\ncompressed string dictionaries [9], but the twist here is that we are considering only the\r\nalphabet of the branching characters since we do not need to store the keys.\r\nElias-Fano Sequences. The large per-level Elias-Fano sequences of global ranks have a very\r\nirregular structure. For example, if many of the strings in a node share the same chunks,\r\nthere is a large gap between two of the stored ranks. We can deal with these irregularities and\r\nreduce the overall space usage by using partitioned Elias-Fano [50]. Furthermore, the PGM\r\nmappers do not always provide a very uniform mapping, which thus results in empty buckets.\r\nAn empty bucket corresponds to a duplicate offset value being stored in the Elias-Fano\r\nsequences (see e.g. the duplicate offset 23 in Figure 1b). To optimise the space usage of\r\nsuch duplicates, we filter them out before constructing the partitioned Elias-Fano sequence.\r\nWe do this by grouping the stored numbers in groups of 3 numbers. If all 3 numbers are\r\nduplicates of the number before that group, we do not need to store the group. A bit vector\r\nwith rank support indicates which groups were removed.\r\nPerfect Chunk Mapping. In many datasets, there might be only a small number of different\r\nchunks, even if the number of strings they represent is large. For instance, chunks computed\r\non the first bytes of a set of URLs might be a few due to the scarcity of hostnames, but\r\neach host may contain many distinct pages. In these cases, instead of a PGM, it might be\r\nmore space-efficient to build a (perfect) map from chunks to buckets in [c] via a retrieval\r\ndata structure taking c⌈log c⌉ bits overall (plus a small overhead), where c is the number of\r\ndistinct chunks. In practice, we apply this optimisation whenever c < 128 (see Section 8.1).\r\nComparison to Known Solutions. In essence, LeMonHash-VL applies the idea of LeM\u0002onHash recursively to handle variable-length strings. Therefore, unlike known solutions, it\r\ncan leverage data linearities to distribute w-bit chunks from the input strings to buckets\r\nusing small space, and use additional child nodes only whenever a bucket contains many\r\nstrings that thus require inspecting the following chunks to be distinguished. Additionally, it\r\nperforms an adaptive alphabet reduction within the buckets to fit more information in the",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/bc7fafcc-1f1e-4e38-8849-9dbca629a34a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f67266e6ddcb397942fc8765ddcc47285801795d46a1aa8a66522aacf928b569",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 687
      },
      {
        "segments": [
          {
            "segment_id": "8efd544a-606a-4c0e-a4ef-a7b6868ea325",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 9,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 9\r\nw-bit chunks, thus leveraging the presence of more regularities in the input data. Overall,\r\nthese features result in a data structure that has a small height and is efficient to be traversed.\r\n6 Variants and Refinements\r\nLeMonHash can be refined in numerous ways, which we only mention briefly due to space\r\nconstraints. Looking at a possible external memory implementation, LeMonHash can be\r\nconstructed trivially by a linear sweep and queries are possible using a suitable representation\r\nof the predecessor and bucket-size data structures. LeMonHash can also be constructed in\r\nparallel without affecting the queries, in contrast to the trivial parallelisation by partitioning\r\nthe input. In LeMonHash-VL, extracting chunks from non-contiguous bytes reduces the\r\nheight of the trees but has worse trade-offs in practice. Finally, we present an alternative\r\nto storing the local ranks explicitly. The idea is to recursively split the universe size of that\r\nbucket and record the number of keys smaller than that midpoint. Despite its query overhead,\r\nthis technique might be of general interest for MMPHFs. Refer to Appendix A for details.\r\n7 Analysis\r\nWe now prove some properties of our LeMonHash data structure for integers. In our analysis,\r\nwe use succinct retrieval data structures taking rn + o(n) bits per stored value and answering\r\nqueries in constant time (see Section 2 and [15]). Furthermore, since our bucket mappers\r\nneed multiplications and divisions, we make the simplifying assumption u = 2w to avoid\r\ndealing with the increased complexity of these arithmetic operations over large integers.\r\n▶ Theorem 1. A LeMonHash data structure with a bucket mapper that simply performs a\r\nlinear interpolation of the universe on a list of n uniform random keys needs ≈ n(2.91536 +\r\no(1)) bits on average1 and answers queries in constant time.\r\nProof. We approximate the number of keys per bucket using a Poisson distribution which\r\nresults in 0.91536n + o(n) bits of space for the retrieval data structures. On top of that, an\r\nElias-Fano coding of the global bucket ranks gives 2n + o(n) bits. Refer to Appendix B for\r\nthe full proof. ◀\r\nWhile this result is formally only valid for a global uniform distribution, for use in\r\nLeMonHash it suffices if each segment computed by the PGM-index is sufficiently smooth. It\r\nneed not even be uniformly random as long as each local bucket has a constant average size.\r\nAs long as the space for encoding the segments is in O(n) bits, we retain the linear space\r\nbound of Theorem 1. Moreover, the following worst-case analysis gives us a fallback position\r\nthat holds regardless of any assumptions.\r\n▶ Theorem 2. A LeMonHash data structure with the PGM mapper takes n(⌈log(2ε+ 1)⌉+ 2+\r\no(1))+O\r\n\r\nm log u\r\nm\r\n\u0001\r\nbits of space in the worst case and answers queries in O\r\n\r\nlog logw\r\nu\r\nm\r\n\u0001\r\ntime,\r\nwhere m is the number of linear models in a PGM with an integer parameter ε ≥ 0 constructed\r\non the n input keys.\r\n1 Numerically, we find that a better space usage of ≈ 2.902n bits can be achieved by mapping the n keys to\r\nonly ≈ 0.909n buckets, but this difference is irrelevant in practice. It is also interesting to note that this is\r\nclose to the space requirements of most of the practical non-monotone MPHFs [4,8,13,18,27,41,43,45,51].\r\nUsing an MMPHF can be useful when indexing an array through an MPHF, because sorting the hash\r\nvalues can be more cache efficient than a large number of random accesses to the array.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/8efd544a-606a-4c0e-a4ef-a7b6868ea325.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0187cabe05af2399fb4f998c065c085113cbc1189f942cda5b691ab3fe3e86b6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 587
      },
      {
        "segments": [
          {
            "segment_id": "8efd544a-606a-4c0e-a4ef-a7b6868ea325",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 9,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 9\r\nw-bit chunks, thus leveraging the presence of more regularities in the input data. Overall,\r\nthese features result in a data structure that has a small height and is efficient to be traversed.\r\n6 Variants and Refinements\r\nLeMonHash can be refined in numerous ways, which we only mention briefly due to space\r\nconstraints. Looking at a possible external memory implementation, LeMonHash can be\r\nconstructed trivially by a linear sweep and queries are possible using a suitable representation\r\nof the predecessor and bucket-size data structures. LeMonHash can also be constructed in\r\nparallel without affecting the queries, in contrast to the trivial parallelisation by partitioning\r\nthe input. In LeMonHash-VL, extracting chunks from non-contiguous bytes reduces the\r\nheight of the trees but has worse trade-offs in practice. Finally, we present an alternative\r\nto storing the local ranks explicitly. The idea is to recursively split the universe size of that\r\nbucket and record the number of keys smaller than that midpoint. Despite its query overhead,\r\nthis technique might be of general interest for MMPHFs. Refer to Appendix A for details.\r\n7 Analysis\r\nWe now prove some properties of our LeMonHash data structure for integers. In our analysis,\r\nwe use succinct retrieval data structures taking rn + o(n) bits per stored value and answering\r\nqueries in constant time (see Section 2 and [15]). Furthermore, since our bucket mappers\r\nneed multiplications and divisions, we make the simplifying assumption u = 2w to avoid\r\ndealing with the increased complexity of these arithmetic operations over large integers.\r\n▶ Theorem 1. A LeMonHash data structure with a bucket mapper that simply performs a\r\nlinear interpolation of the universe on a list of n uniform random keys needs ≈ n(2.91536 +\r\no(1)) bits on average1 and answers queries in constant time.\r\nProof. We approximate the number of keys per bucket using a Poisson distribution which\r\nresults in 0.91536n + o(n) bits of space for the retrieval data structures. On top of that, an\r\nElias-Fano coding of the global bucket ranks gives 2n + o(n) bits. Refer to Appendix B for\r\nthe full proof. ◀\r\nWhile this result is formally only valid for a global uniform distribution, for use in\r\nLeMonHash it suffices if each segment computed by the PGM-index is sufficiently smooth. It\r\nneed not even be uniformly random as long as each local bucket has a constant average size.\r\nAs long as the space for encoding the segments is in O(n) bits, we retain the linear space\r\nbound of Theorem 1. Moreover, the following worst-case analysis gives us a fallback position\r\nthat holds regardless of any assumptions.\r\n▶ Theorem 2. A LeMonHash data structure with the PGM mapper takes n(⌈log(2ε+ 1)⌉+ 2+\r\no(1))+O\r\n\r\nm log u\r\nm\r\n\u0001\r\nbits of space in the worst case and answers queries in O\r\n\r\nlog logw\r\nu\r\nm\r\n\u0001\r\ntime,\r\nwhere m is the number of linear models in a PGM with an integer parameter ε ≥ 0 constructed\r\non the n input keys.\r\n1 Numerically, we find that a better space usage of ≈ 2.902n bits can be achieved by mapping the n keys to\r\nonly ≈ 0.909n buckets, but this difference is irrelevant in practice. It is also interesting to note that this is\r\nclose to the space requirements of most of the practical non-monotone MPHFs [4,8,13,18,27,41,43,45,51].\r\nUsing an MMPHF can be useful when indexing an array through an MPHF, because sorting the hash\r\nvalues can be more cache efficient than a large number of random accesses to the array.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/8efd544a-606a-4c0e-a4ef-a7b6868ea325.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0187cabe05af2399fb4f998c065c085113cbc1189f942cda5b691ab3fe3e86b6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 587
      },
      {
        "segments": [
          {
            "segment_id": "690c8970-c928-4da5-93fb-3fff1d60d6a4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 10,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "10 Learned Monotone Minimal Perfect Hashing\r\nProof. The basic idea is that the rank estimate returned by the PGM is guaranteed to be\r\nfar from the correct rank by ε, which limits the space of the retrieval data structures. The\r\nO\r\n\r\nm log u\r\nm\r\n\u0001\r\n-term in the space bound is given by a compressed encoding of the linear models\r\nin the PGM, and the query time is given by a predecessor search structure on the linear\r\nmodels’ keys. Refer to Appendix B for the full proof. ◀\r\nThe worst-case bounds obtained in Theorem 2 are hard to compare with the ones of classic\r\nMMPHF (see Section 3) due to the presence of m (and ε), which depends on (and must be\r\ntuned according to) the approximate linearity of the input data, which classic MMPHFs are\r\noblivious to.2 Refer to Section 2 for bounds on m. Our experiments show that we obtain\r\nbetter space or space close to the best classic MMPHFs, while being much faster (we use\r\na weaker but practical predecessor search structure than the one in Theorem 2). Refer to\r\nSection 8 for details.\r\n8 Experiments\r\nIn the following section, we first compare different configurations of LeMonHash and\r\nLeMonHash-VL before comparing them with competitors from the literature.\r\nExperimental Setup. We perform our experiments on an Intel Xeon E5-2670 v3 with a\r\nbase clock speed of 2.3 GHz running Ubuntu 20.04 with Linux 5.10.0. We use the GNU C++\r\ncompiler version 11.1.0 with optimisation flags -O3 -march=native. As a retrieval data\r\nstructure, we use BuRR [15] with 64-bit ribbon width and 2-bit bumping info. To store the\r\nbucket sizes, we use the select data structure by Kurpicz [39] in LeMonHash and Partitioned\r\nElias-Fano [50] in LeMonHash-VL. To map tree paths to the node metadata, we use the\r\nMPHF PTHash [51]. For the PGM implementation in LeMonHash, we use the encoding\r\nfrom Theorem 2 and use a predecessor search on the Elias-Fano sequence (Section 2). In\r\nLeMonHash-VL, since the number of linear models in a node is typically small, we encode\r\nthem explicitly as fixed-width triples (key, slope, intercept) and find the predecessor via a\r\nbinary search on the keys. All our experiments are executed on a single thread. Because the\r\nvariation is very small, we run each experiment only twice and report the average. We run\r\nthe Java competitors on OpenJDK 17.0.4 and perform one warm-up run for the just-in-time\r\ncompiler that is not measured. With this, the Java performance is expected to be close to\r\nC++ [3]. Because Java does not have an unsigned 64-bit integer type, we subtract 2\r\n63 from\r\neach input key to keep their relative order.\r\nThe code and scripts needed to reproduce our experiments are available on GitHub under\r\nthe General Public License [29, 30].\r\nDatasets. Our datasets, as in previous evaluations [3, 34], are a text dataset that contains\r\nterms appearing in the text of web pages [3] and urls crawled from .uk domains in 2007 [11].\r\nAdditionally, we also test with dna sequences consisting of 32-mers [23]. Regarding real-world\r\ninteger datasets, 5gram contains positions of the most frequent letter in the BWT of a text\r\nfile containing 5-grams found in books indexed by Google [10, 32]. The fb dataset contains\r\nFacebook user IDs [36] and osm contains OpenStreetMap locations [36]. As synthetic integer\r\ndatasets, we use 64-bit uniform, normal, and exponential distributions. Refer to Table 1 for\r\ndetails.\r\n2 This happens also in other problems in which data is encoded with linear models [10, 22].",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/690c8970-c928-4da5-93fb-3fff1d60d6a4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a38d24ca01a801934cee6f2880dde37b946325102f5ba17f55ecac83e9370aeb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 586
      },
      {
        "segments": [
          {
            "segment_id": "690c8970-c928-4da5-93fb-3fff1d60d6a4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 10,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "10 Learned Monotone Minimal Perfect Hashing\r\nProof. The basic idea is that the rank estimate returned by the PGM is guaranteed to be\r\nfar from the correct rank by ε, which limits the space of the retrieval data structures. The\r\nO\r\n\r\nm log u\r\nm\r\n\u0001\r\n-term in the space bound is given by a compressed encoding of the linear models\r\nin the PGM, and the query time is given by a predecessor search structure on the linear\r\nmodels’ keys. Refer to Appendix B for the full proof. ◀\r\nThe worst-case bounds obtained in Theorem 2 are hard to compare with the ones of classic\r\nMMPHF (see Section 3) due to the presence of m (and ε), which depends on (and must be\r\ntuned according to) the approximate linearity of the input data, which classic MMPHFs are\r\noblivious to.2 Refer to Section 2 for bounds on m. Our experiments show that we obtain\r\nbetter space or space close to the best classic MMPHFs, while being much faster (we use\r\na weaker but practical predecessor search structure than the one in Theorem 2). Refer to\r\nSection 8 for details.\r\n8 Experiments\r\nIn the following section, we first compare different configurations of LeMonHash and\r\nLeMonHash-VL before comparing them with competitors from the literature.\r\nExperimental Setup. We perform our experiments on an Intel Xeon E5-2670 v3 with a\r\nbase clock speed of 2.3 GHz running Ubuntu 20.04 with Linux 5.10.0. We use the GNU C++\r\ncompiler version 11.1.0 with optimisation flags -O3 -march=native. As a retrieval data\r\nstructure, we use BuRR [15] with 64-bit ribbon width and 2-bit bumping info. To store the\r\nbucket sizes, we use the select data structure by Kurpicz [39] in LeMonHash and Partitioned\r\nElias-Fano [50] in LeMonHash-VL. To map tree paths to the node metadata, we use the\r\nMPHF PTHash [51]. For the PGM implementation in LeMonHash, we use the encoding\r\nfrom Theorem 2 and use a predecessor search on the Elias-Fano sequence (Section 2). In\r\nLeMonHash-VL, since the number of linear models in a node is typically small, we encode\r\nthem explicitly as fixed-width triples (key, slope, intercept) and find the predecessor via a\r\nbinary search on the keys. All our experiments are executed on a single thread. Because the\r\nvariation is very small, we run each experiment only twice and report the average. We run\r\nthe Java competitors on OpenJDK 17.0.4 and perform one warm-up run for the just-in-time\r\ncompiler that is not measured. With this, the Java performance is expected to be close to\r\nC++ [3]. Because Java does not have an unsigned 64-bit integer type, we subtract 2\r\n63 from\r\neach input key to keep their relative order.\r\nThe code and scripts needed to reproduce our experiments are available on GitHub under\r\nthe General Public License [29, 30].\r\nDatasets. Our datasets, as in previous evaluations [3, 34], are a text dataset that contains\r\nterms appearing in the text of web pages [3] and urls crawled from .uk domains in 2007 [11].\r\nAdditionally, we also test with dna sequences consisting of 32-mers [23]. Regarding real-world\r\ninteger datasets, 5gram contains positions of the most frequent letter in the BWT of a text\r\nfile containing 5-grams found in books indexed by Google [10, 32]. The fb dataset contains\r\nFacebook user IDs [36] and osm contains OpenStreetMap locations [36]. As synthetic integer\r\ndatasets, we use 64-bit uniform, normal, and exponential distributions. Refer to Table 1 for\r\ndetails.\r\n2 This happens also in other problems in which data is encoded with linear models [10, 22].",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/690c8970-c928-4da5-93fb-3fff1d60d6a4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a38d24ca01a801934cee6f2880dde37b946325102f5ba17f55ecac83e9370aeb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 586
      },
      {
        "segments": [
          {
            "segment_id": "3aa91287-1083-4ccf-95f7-b4f136cd77fe",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 11,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 11\r\nTable 1 Datasets used for the experiments, together with their length or average (ø) length. Top:\r\nreal-world string datasets. Middle: real-world integer datasets. Bottom: synthetic integer datasets.\r\nDataset n Length Description\r\ntext 35M ø 11 bytes Terms appearing in the text of web pages, GOV2 corpus [3]\r\ndna 367M 32 bytes 32-mer from a DNA sequence, Pizza&Chili corpus [23]\r\nurls 106M ø 105 bytes Web URLs crawled from .uk domains in 2007 [11]\r\n5gram 145M 32 bits Positions of the most frequent letter in the BWT of a text file\r\ncontaining 5-grams found in books indexed by Google [10, 32]\r\nfb 200M 64 bits Facebook user IDs [36]\r\nosm 800M 64 bits OpenStreetMap locations [36]\r\nuniform 100M 64 bits Uniform random\r\nnormal 100M 64 bits Normal distribution (µ = 1015, σ\r\n2 = 1010)\r\nexponential 100M 64 bits Exponential distribution (λ = 1, scaled with 1015)\r\n8.1 Tuning Parameters\r\nIn the following section, we compare several configuration parameters of LeMonHash and\r\nshow how they provide a trade-off between space usage and performance.\r\nLeMonHash. Different ways of mapping the keys to buckets have their own advantages and\r\ndisadvantages. Table 2 gives measurements of the construction and query throughput, as well\r\nas the space consumption of different bucket mappers. Our implementation of LeMonHash\r\nwith a linear bucket mapper achieves a space usage of 2.94n bits, which is remarkably close\r\nto the theoretical space usage of 2.91n bits (see Theorem 1). Of course, a global, linear\r\nmapping does not work for all datasets. A bucket mapper that creates equal-width segments\r\nby interpolating between sampled keys (denoted as “Segmented” in the table) is fast to\r\nconstruct and query, and it achieves good space usage. But, as for the global linear mapping,\r\nthis approach is not robust enough to manage arbitrary input distributions. In particular,\r\nfor this heuristic mapper, it is easy to come up with a worst-case input that degenerates the\r\nspace usage. Conversely, with the PGM mapper, LeMonHash still achieves 2.96n and 2.98n\r\nbits on uniform random integers but it is more performant and robust on other datasets\r\n(except on osm, where the heuristic mapper obtains a good enough mapping with only its\r\nequal-width segments, which are inexpensive to store). In fact, we explicitly avoided heuristic\r\ndesign choices in our PGM mapper (such as sampling input keys, removing outliers, or using\r\nlinear regression) to not inflate our performance on the tested datasets at the expense of\r\nrobustness on unknown ones (see Ref. [37]). Finally, on most input distributions, auto-tuning\r\nthe value of ε ∈ {15, 31, 63} does not have a large effect on the space usage.\r\nLeMonHash-VL. Table 3 lists the effect of alphabet reduction on the query and construction\r\nperformance. In general, alphabet reduction enables noticeable space improvements with\r\nonly a small impact on the construction time. For the dna dataset, which uses only 15\r\ndifferent characters, the alphabet reduction has the largest effect, saving 1.3 bits per key and\r\nsimultaneously making the queries 40% faster. The faster queries can be explained by the\r\nreduced tree height. Note that alphabet reduction makes the queries slightly slower for the\r\nother datasets. The reason is that instead of one single bswap instruction for chunk extraction,\r\nit needs multiple arithmetic operations (including popcount) for each input character. The",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/3aa91287-1083-4ccf-95f7-b4f136cd77fe.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7087fd82b20686782164b7c0af6f176a052c4b283881468128d3c661e385ceeb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 553
      },
      {
        "segments": [
          {
            "segment_id": "3aa91287-1083-4ccf-95f7-b4f136cd77fe",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 11,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 11\r\nTable 1 Datasets used for the experiments, together with their length or average (ø) length. Top:\r\nreal-world string datasets. Middle: real-world integer datasets. Bottom: synthetic integer datasets.\r\nDataset n Length Description\r\ntext 35M ø 11 bytes Terms appearing in the text of web pages, GOV2 corpus [3]\r\ndna 367M 32 bytes 32-mer from a DNA sequence, Pizza&Chili corpus [23]\r\nurls 106M ø 105 bytes Web URLs crawled from .uk domains in 2007 [11]\r\n5gram 145M 32 bits Positions of the most frequent letter in the BWT of a text file\r\ncontaining 5-grams found in books indexed by Google [10, 32]\r\nfb 200M 64 bits Facebook user IDs [36]\r\nosm 800M 64 bits OpenStreetMap locations [36]\r\nuniform 100M 64 bits Uniform random\r\nnormal 100M 64 bits Normal distribution (µ = 1015, σ\r\n2 = 1010)\r\nexponential 100M 64 bits Exponential distribution (λ = 1, scaled with 1015)\r\n8.1 Tuning Parameters\r\nIn the following section, we compare several configuration parameters of LeMonHash and\r\nshow how they provide a trade-off between space usage and performance.\r\nLeMonHash. Different ways of mapping the keys to buckets have their own advantages and\r\ndisadvantages. Table 2 gives measurements of the construction and query throughput, as well\r\nas the space consumption of different bucket mappers. Our implementation of LeMonHash\r\nwith a linear bucket mapper achieves a space usage of 2.94n bits, which is remarkably close\r\nto the theoretical space usage of 2.91n bits (see Theorem 1). Of course, a global, linear\r\nmapping does not work for all datasets. A bucket mapper that creates equal-width segments\r\nby interpolating between sampled keys (denoted as “Segmented” in the table) is fast to\r\nconstruct and query, and it achieves good space usage. But, as for the global linear mapping,\r\nthis approach is not robust enough to manage arbitrary input distributions. In particular,\r\nfor this heuristic mapper, it is easy to come up with a worst-case input that degenerates the\r\nspace usage. Conversely, with the PGM mapper, LeMonHash still achieves 2.96n and 2.98n\r\nbits on uniform random integers but it is more performant and robust on other datasets\r\n(except on osm, where the heuristic mapper obtains a good enough mapping with only its\r\nequal-width segments, which are inexpensive to store). In fact, we explicitly avoided heuristic\r\ndesign choices in our PGM mapper (such as sampling input keys, removing outliers, or using\r\nlinear regression) to not inflate our performance on the tested datasets at the expense of\r\nrobustness on unknown ones (see Ref. [37]). Finally, on most input distributions, auto-tuning\r\nthe value of ε ∈ {15, 31, 63} does not have a large effect on the space usage.\r\nLeMonHash-VL. Table 3 lists the effect of alphabet reduction on the query and construction\r\nperformance. In general, alphabet reduction enables noticeable space improvements with\r\nonly a small impact on the construction time. For the dna dataset, which uses only 15\r\ndifferent characters, the alphabet reduction has the largest effect, saving 1.3 bits per key and\r\nsimultaneously making the queries 40% faster. The faster queries can be explained by the\r\nreduced tree height. Note that alphabet reduction makes the queries slightly slower for the\r\nother datasets. The reason is that instead of one single bswap instruction for chunk extraction,\r\nit needs multiple arithmetic operations (including popcount) for each input character. The",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/3aa91287-1083-4ccf-95f7-b4f136cd77fe.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7087fd82b20686782164b7c0af6f176a052c4b283881468128d3c661e385ceeb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 553
      },
      {
        "segments": [
          {
            "segment_id": "db19086f-2674-44bd-9d8e-c87604856514",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 12,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "12 Learned Monotone Minimal Perfect Hashing\r\nTable 2 Comparison of different bucket mappers. The space usage is given in bits per key, the\r\nquery throughput in kQueries/second, and the construction throughput (c.t.) in MKeys/second.\r\nDataset Linear mapper PGM ε = auto PGM ε = 31 Segmented\r\nbpk kq/s c.t. bpk kq/s c.t. bpk kq/s c.t. bpk kq/s c.t.\r\n5gram 5.60 1833.5 6.2 2.62 1747.0 3.8 2.63 1779.4 8.5 2.64 2145.9 14.5\r\nfb 34.35 0.8 5.1 4.91 1156.1 2.8 4.91 1150.7 5.1 4.93 1441.3 7.2\r\nosm 12.92 1525.3 5.5 4.42 999.6 2.8 4.42 998.6 5.0 4.33 1272.9 6.8\r\nuniform 2.94 3244.6 8.7 2.96 1903.3 3.5 2.98 1850.5 6.5 3.03 2192.0 8.7\r\nnormal 34.27 105.3 4.8 2.95 1935.0 3.6 2.97 1858.0 6.6 3.00 1727.7 8.7\r\nexponential 5.42 2715.9 6.0 2.95 1876.9 3.6 2.98 1791.5 6.6 3.01 2085.1 8.8\r\nTable 3 Comparison of different variants of LeMonHash-VL. The space usage is given in bits\r\nper key, the query throughput in kQueries/second, and the construction throughput (c.t.) in\r\nMKeys/second. Variants with and without alphabet reduction (AR), a special indexed variant (Idx,\r\nsee Appendix A), and a variant with fixed instead of auto-tuned parameter ε for the bucket mapper.\r\nDataset ε = auto, no AR ε = auto, AR ε = 63, AR Idx, ε = auto, AR\r\nbpk kq/s c.t. bpk kq/s c.t. bpk kq/s c.t. bpk kq/s c.t.\r\ntext 6.52 1062.9 1.7 6.03 1005.8 1.6 6.08 1001.8 2.5 6.10 933.2 2.3\r\ndna 7.66 452.8 2.0 6.32 631.3 1.7 6.25 644.8 2.7 6.27 601.1 2.4\r\nurls 7.14 282.7 2.3 6.37 298.8 1.8 6.46 295.1 2.3 6.63 298.1 1.6\r\nindexed variant that builds chunks from the distinguishing bytes instead of a contiguous\r\nbyte range (see Appendix A) is slower to construct but does not show clear space savings,\r\nwhich can be explained by larger per-node metadata. We also experimented with different\r\nthresholds for when to stop recursion, as well as the perfect chunk mapping (see Section 5).\r\nGiven that the space overhead from each bucket mapper is the same for all data sets, it is not\r\nsurprising that the same threshold (128 keys) works well for all datasets (see Appendix D).\r\nFinally, making the ε value of the PGM mapper constant instead of auto-tuned, we naturally\r\nget faster construction. As in the integer case, one would expect a fixed ε value to always\r\nproduce results that are the same or worse than the auto-tuned version. This is not the case\r\nbecause, in the recursive setting, it is hard to estimate the effect of a mapper on the overall\r\nspace usage. Therefore, an ε value that needs more space locally can lead to a mapping that\r\nproves useful on a later level of the tree. This is why ε = 63 can achieve better space usage\r\nthan the auto-tuned version on the dna dataset.\r\n8.2 Comparison with Competitors\r\nIn this section, we compare the performance of LeMonHash and LeMonHash-VL with\r\ncompetitors from the literature. Competitors include the C++ implementation by Grossi and\r\nOttaviano [34] of the Centroid Hollow Trie, Hollow Trie, and Path Decomposed Trie. Because\r\nthat implementation only supports string inputs, we convert the integers to a list of fixed\u0002length strings. We point out that the Path Decomposed Trie crashes at an internal assertion\r\nwhen being run on integer datasets. For the Hollow Trie, we encode the skips with either\r\nGamma or Elias-Fano coding, whatever is better on the dataset. We also include the Java\r\nimplementations by Belazzougui et al. [3] of a range of techniques (see Section 3). We use",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/db19086f-2674-44bd-9d8e-c87604856514.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ec59c77007938d8e1312963a036d3a643847fca3b5e5c46707aaefbba004f4d2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 586
      },
      {
        "segments": [
          {
            "segment_id": "db19086f-2674-44bd-9d8e-c87604856514",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 12,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "12 Learned Monotone Minimal Perfect Hashing\r\nTable 2 Comparison of different bucket mappers. The space usage is given in bits per key, the\r\nquery throughput in kQueries/second, and the construction throughput (c.t.) in MKeys/second.\r\nDataset Linear mapper PGM ε = auto PGM ε = 31 Segmented\r\nbpk kq/s c.t. bpk kq/s c.t. bpk kq/s c.t. bpk kq/s c.t.\r\n5gram 5.60 1833.5 6.2 2.62 1747.0 3.8 2.63 1779.4 8.5 2.64 2145.9 14.5\r\nfb 34.35 0.8 5.1 4.91 1156.1 2.8 4.91 1150.7 5.1 4.93 1441.3 7.2\r\nosm 12.92 1525.3 5.5 4.42 999.6 2.8 4.42 998.6 5.0 4.33 1272.9 6.8\r\nuniform 2.94 3244.6 8.7 2.96 1903.3 3.5 2.98 1850.5 6.5 3.03 2192.0 8.7\r\nnormal 34.27 105.3 4.8 2.95 1935.0 3.6 2.97 1858.0 6.6 3.00 1727.7 8.7\r\nexponential 5.42 2715.9 6.0 2.95 1876.9 3.6 2.98 1791.5 6.6 3.01 2085.1 8.8\r\nTable 3 Comparison of different variants of LeMonHash-VL. The space usage is given in bits\r\nper key, the query throughput in kQueries/second, and the construction throughput (c.t.) in\r\nMKeys/second. Variants with and without alphabet reduction (AR), a special indexed variant (Idx,\r\nsee Appendix A), and a variant with fixed instead of auto-tuned parameter ε for the bucket mapper.\r\nDataset ε = auto, no AR ε = auto, AR ε = 63, AR Idx, ε = auto, AR\r\nbpk kq/s c.t. bpk kq/s c.t. bpk kq/s c.t. bpk kq/s c.t.\r\ntext 6.52 1062.9 1.7 6.03 1005.8 1.6 6.08 1001.8 2.5 6.10 933.2 2.3\r\ndna 7.66 452.8 2.0 6.32 631.3 1.7 6.25 644.8 2.7 6.27 601.1 2.4\r\nurls 7.14 282.7 2.3 6.37 298.8 1.8 6.46 295.1 2.3 6.63 298.1 1.6\r\nindexed variant that builds chunks from the distinguishing bytes instead of a contiguous\r\nbyte range (see Appendix A) is slower to construct but does not show clear space savings,\r\nwhich can be explained by larger per-node metadata. We also experimented with different\r\nthresholds for when to stop recursion, as well as the perfect chunk mapping (see Section 5).\r\nGiven that the space overhead from each bucket mapper is the same for all data sets, it is not\r\nsurprising that the same threshold (128 keys) works well for all datasets (see Appendix D).\r\nFinally, making the ε value of the PGM mapper constant instead of auto-tuned, we naturally\r\nget faster construction. As in the integer case, one would expect a fixed ε value to always\r\nproduce results that are the same or worse than the auto-tuned version. This is not the case\r\nbecause, in the recursive setting, it is hard to estimate the effect of a mapper on the overall\r\nspace usage. Therefore, an ε value that needs more space locally can lead to a mapping that\r\nproves useful on a later level of the tree. This is why ε = 63 can achieve better space usage\r\nthan the auto-tuned version on the dna dataset.\r\n8.2 Comparison with Competitors\r\nIn this section, we compare the performance of LeMonHash and LeMonHash-VL with\r\ncompetitors from the literature. Competitors include the C++ implementation by Grossi and\r\nOttaviano [34] of the Centroid Hollow Trie, Hollow Trie, and Path Decomposed Trie. Because\r\nthat implementation only supports string inputs, we convert the integers to a list of fixed\u0002length strings. We point out that the Path Decomposed Trie crashes at an internal assertion\r\nwhen being run on integer datasets. For the Hollow Trie, we encode the skips with either\r\nGamma or Elias-Fano coding, whatever is better on the dataset. We also include the Java\r\nimplementations by Belazzougui et al. [3] of a range of techniques (see Section 3). We use",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/db19086f-2674-44bd-9d8e-c87604856514.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ec59c77007938d8e1312963a036d3a643847fca3b5e5c46707aaefbba004f4d2",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 586
      },
      {
        "segments": [
          {
            "segment_id": "b8b66d57-b7d3-4442-9797-f7b14980b9e3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 13,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 13\r\n0\r\n0.5\r\n1\r\nQuery MKeys/s\r\ntext dna urls\r\n0\r\n1\r\n2\r\nQuery MKeys/s\r\n5gram fb osm\r\n5 10\r\n0\r\n1\r\n2\r\n≥\r\nBits/key\r\nQuery MKeys/s\r\nuniform\r\n5 10 ≥\r\nBits/key\r\nnormal\r\n5 10 ≥\r\nBits/key\r\nexponential\r\nFigure 2 Query throughput for string, integer, and synthetic integer datasets vs space usage.\r\nThe top-left corner of every plot shows the top-performing solutions in terms of space-time efficiency.\r\n0\r\n1\r\n2\r\n3\r\nConstr. MKeys/s\r\ntext dna urls\r\n0\r\n2\r\n4\r\n6\r\n8\r\nConstr. MKeys/s\r\n5gram fb osm\r\n5 10\r\n0\r\n2\r\n4\r\n6\r\n8\r\n≥\r\nBits/key\r\nConstr. MKeys/s\r\nuniform\r\n5 10 ≥\r\nBits/key\r\nnormal\r\n5 10 ≥\r\nBits/key\r\nexponential\r\nCentroid HT [34] HTDist [3] Hollow [34] Hollow [3] ZFast [3]\r\nLCP 2-step [3] LCP [3] VLLCP [3] PaCo [3] VLPaCo [3]\r\nPath Decomp. [34] LeMonHash-VL LeMonHash\r\nFigure 3 Construction throughput for string, integer, and synthetic integer datasets. Competitors\r\nwith the symbol in the legend are implemented in Java.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/b8b66d57-b7d3-4442-9797-f7b14980b9e3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=26ad53d029862591a848567275d0be91916c85795a4326a10f29ccb7254608eb",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 164
      },
      {
        "segments": [
          {
            "segment_id": "fedc9479-c801-484b-92fe-a403c5eac5a3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 14,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "14 Learned Monotone Minimal Perfect Hashing\r\neither the FixedLong or PrefixFreeUtf16 transformation, depending on the data type of the\r\ninput. For LeMonHash, we use the PGM mapper with ε = 31. For LeMonHash-VL, we use\r\nthe PGM mapper with ε = 63, alphabet reduction and a recursion threshold t = 128.\r\nQueries. Figure 2 plots the query throughput against the achieved storage space. In\r\nTable A.1 in the Appendix, we additionally detail the numbers in tabular format. The\r\nLCP-based methods (see Section 3) have very fast queries but also need the most space (in\r\nfact, they appear to the top-right of the plots). At the same time, LeMonHash matches or\r\neven outperforms the query throughput of LCP-based methods, while being significantly more\r\nspace efficient (in fact, it appears towards the top-left of the plots). Compared to competitors\r\nwith similar space usage, LeMonHash offers significantly higher query throughput.\r\nConstruction. Figure 3 plots the construction throughput against the space needed. On\r\nmost synthetic integer datasets, LeMonHash provides a significant improvement to the\r\nstate-of-the-art approaches, whereas it matches or outperforms the competitors on real-world\r\ndatasets. LeMonHash improves the construction throughput by up to a factor of 2, compared\r\nto the competitor with the next best space usage (typically, variants of the Hollow Trie).\r\nWhile LeMonHash-VL does not achieve the same space usage as the Hollow Trie Distributor,\r\nits construction is significantly faster, and still it is the second best in space usage.\r\n9 Conclusion and Future Work\r\nIn this paper, we have introduced the monotone minimal perfect hash function LeMonHash.\r\nLeMonHash, unlike previous solutions, learns and leverages data smoothness to obtain a\r\nsmall space usage and significantly faster queries. On most synthetic and real-world datasets,\r\nLeMonHash dominates all competitors — simultaneously — on space usage, construction and\r\nquery throughput. Our extension to variable-length strings, LeMonHash-VL, consists of\r\ntrees that are significantly more flat and efficient to traverse than competitors. This enables\r\nextremely fast queries with space consumption similar to competitors.\r\nFuture Work. Many MMPHF construction algorithms are based on the idea of explicitly\r\nstoring ranks of keys within a small bucket. The idea to split small buckets recursively that\r\nwe mention in Section 6 can help to reduce the space usage. It remains an open problem\r\nwhether the idea works in practice, especially when the distribution of keys inside the bucket\r\nis skewed. It is also worth investigating a different construction of the piecewise linear\r\napproximation in the PGM that minimises the overall space given by the segments and\r\nthe local ranks stored in retrieval data structures, rather than the current approach that\r\nmaximises the length of the segment (thus minimising just the segments space). Applying\r\nnon-linear transformations like low-degree polynomials within each segment would also be\r\ninteresting future work. Finally, it would be interesting to apply smoothed analysis to\r\nformally show that many real-world distributions locally behave as if they were uniform\r\nrandom, therefore leading to tighter space bounds.\r\nReferences\r\n1 Sepehr Assadi, Martin Farach-Colton, and William Kuszmaul. Tight bounds for monotone\r\nminimal perfect hashing. In Proc. 34th Annual ACM-SIAM Symposium on Discrete Algorithms\r\n(SODA), pages 456–476, 2023. doi:10.1137/1.9781611977554.CH20.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/fedc9479-c801-484b-92fe-a403c5eac5a3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=07028501a0aa58f3c7d6a17005bd8e61f2ee90d90d012e002cf3ed3238569f2f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 517
      },
      {
        "segments": [
          {
            "segment_id": "fedc9479-c801-484b-92fe-a403c5eac5a3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 14,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "14 Learned Monotone Minimal Perfect Hashing\r\neither the FixedLong or PrefixFreeUtf16 transformation, depending on the data type of the\r\ninput. For LeMonHash, we use the PGM mapper with ε = 31. For LeMonHash-VL, we use\r\nthe PGM mapper with ε = 63, alphabet reduction and a recursion threshold t = 128.\r\nQueries. Figure 2 plots the query throughput against the achieved storage space. In\r\nTable A.1 in the Appendix, we additionally detail the numbers in tabular format. The\r\nLCP-based methods (see Section 3) have very fast queries but also need the most space (in\r\nfact, they appear to the top-right of the plots). At the same time, LeMonHash matches or\r\neven outperforms the query throughput of LCP-based methods, while being significantly more\r\nspace efficient (in fact, it appears towards the top-left of the plots). Compared to competitors\r\nwith similar space usage, LeMonHash offers significantly higher query throughput.\r\nConstruction. Figure 3 plots the construction throughput against the space needed. On\r\nmost synthetic integer datasets, LeMonHash provides a significant improvement to the\r\nstate-of-the-art approaches, whereas it matches or outperforms the competitors on real-world\r\ndatasets. LeMonHash improves the construction throughput by up to a factor of 2, compared\r\nto the competitor with the next best space usage (typically, variants of the Hollow Trie).\r\nWhile LeMonHash-VL does not achieve the same space usage as the Hollow Trie Distributor,\r\nits construction is significantly faster, and still it is the second best in space usage.\r\n9 Conclusion and Future Work\r\nIn this paper, we have introduced the monotone minimal perfect hash function LeMonHash.\r\nLeMonHash, unlike previous solutions, learns and leverages data smoothness to obtain a\r\nsmall space usage and significantly faster queries. On most synthetic and real-world datasets,\r\nLeMonHash dominates all competitors — simultaneously — on space usage, construction and\r\nquery throughput. Our extension to variable-length strings, LeMonHash-VL, consists of\r\ntrees that are significantly more flat and efficient to traverse than competitors. This enables\r\nextremely fast queries with space consumption similar to competitors.\r\nFuture Work. Many MMPHF construction algorithms are based on the idea of explicitly\r\nstoring ranks of keys within a small bucket. The idea to split small buckets recursively that\r\nwe mention in Section 6 can help to reduce the space usage. It remains an open problem\r\nwhether the idea works in practice, especially when the distribution of keys inside the bucket\r\nis skewed. It is also worth investigating a different construction of the piecewise linear\r\napproximation in the PGM that minimises the overall space given by the segments and\r\nthe local ranks stored in retrieval data structures, rather than the current approach that\r\nmaximises the length of the segment (thus minimising just the segments space). Applying\r\nnon-linear transformations like low-degree polynomials within each segment would also be\r\ninteresting future work. Finally, it would be interesting to apply smoothed analysis to\r\nformally show that many real-world distributions locally behave as if they were uniform\r\nrandom, therefore leading to tighter space bounds.\r\nReferences\r\n1 Sepehr Assadi, Martin Farach-Colton, and William Kuszmaul. Tight bounds for monotone\r\nminimal perfect hashing. In Proc. 34th Annual ACM-SIAM Symposium on Discrete Algorithms\r\n(SODA), pages 456–476, 2023. doi:10.1137/1.9781611977554.CH20.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/fedc9479-c801-484b-92fe-a403c5eac5a3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=07028501a0aa58f3c7d6a17005bd8e61f2ee90d90d012e002cf3ed3238569f2f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 517
      },
      {
        "segments": [
          {
            "segment_id": "f562a0b7-8726-4e31-9f80-8985691132e8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 15,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 15\r\n2 Djamal Belazzougui, Paolo Boldi, Rasmus Pagh, and Sebastiano Vigna. Monotone minimal\r\nperfect hashing: searching a sorted table with O(1) accesses. In Proc. 20th Annual ACM\u0002SIAM Symposium on Discrete Algorithms (SODA), pages 785–794, 2009. doi:10.1137/1.\r\n9781611973068.86.\r\n3 Djamal Belazzougui, Paolo Boldi, Rasmus Pagh, and Sebastiano Vigna. Theory and practice\r\nof monotone minimal perfect hashing. ACM J. Exp. Algorithmics, 16, 2011. doi:10.1145/\r\n1963190.2025378.\r\n4 Djamal Belazzougui, Fabiano C. Botelho, and Martin Dietzfelbinger. Hash, displace, and\r\ncompress. In Proc. 17th Annual European Symposium on Algorithms (ESA), pages 682–693,\r\n2009. doi:10.1007/978-3-642-04128-0_61.\r\n5 Djamal Belazzougui, Fabio Cunial, Juha Kärkkäinen, and Veli Mäkinen. Linear-time string\r\nindexing and analysis in small space. ACM Trans. Algorithms, 16(2):17:1–17:54, 2020. doi:\r\n10.1145/3381417.\r\n6 Djamal Belazzougui and Gonzalo Navarro. Optimal lower and upper bounds for representing\r\nsequences. ACM Trans. Algorithms, 11(4):31:1–31:21, 2015. doi:10.1145/2629339.\r\n7 Djamal Belazzougui, Gonzalo Navarro, and Daniel Valenzuela. Improved compressed indexes\r\nfor full-text document retrieval. J. Discrete Algorithms, 18:3–13, 2013. doi:10.1016/j.jda.\r\n2012.07.005.\r\n8 Dominik Bez, Florian Kurpicz, Hans-Peter Lehmann, and Peter Sanders. High performance\r\nconstruction of RecSplit based minimal perfect hash functions. In Proc. 31st Annual European\r\nSymposium on Algorithms (ESA), pages 19:1–19:16, 2023. doi:10.4230/LIPIcs.ESA.2023.19.\r\n9 Antonio Boffa, Paolo Ferragina, Francesco Tosoni, and Giorgio Vinciguerra. Compressed string\r\ndictionaries via data-aware subtrie compaction. In Proc. 29th International Symposium on\r\nString Processing and Information Retrieval (SPIRE), pages 233–249, 2022. doi:10.1007/\r\n978-3-031-20643-6_17.\r\n10 Antonio Boffa, Paolo Ferragina, and Giorgio Vinciguerra. A learned approach to design\r\ncompressed rank/select data structures. ACM Trans. Algorithms, 18(3):24:1–24:28, 2022.\r\ndoi:10.1145/3524060.\r\n11 Paolo Boldi, Massimo Santini, and Sebastiano Vigna. A large time-aware web graph. SIGIR\r\nForum, 42(2):33–38, 2008. doi:10.1145/1480506.1480511.\r\n12 Alexandra Boldyreva, Nathan Chenette, and Adam O’Neill. Order-preserving encryption revis\u0002ited: Improved security analysis and alternative solutions. In Proc. 31st Annual International\r\nCryptology Conference (CRYPTO), pages 578–595, 2011. doi:10.1007/978-3-642-22792-9_\r\n33.\r\n13 Jarrod A. Chapman, Isaac Ho, Sirisha Sunkara, Shujun Luo, Gary P. Schroth, and Daniel S.\r\nRokhsar. Meraculous: De novo genome assembly with short paired-end reads. PLOS ONE,\r\n6(8):1–13, 08 2011. doi:10.1371/journal.pone.0023501.\r\n14 David Richard Clark. Compact Pat Trees. PhD thesis, University of Waterloo, Canada, 1996.\r\n15 Peter C. Dillinger, Lorenz Hübschle-Schneider, Peter Sanders, and Stefan Walzer. Fast succinct\r\nretrieval and approximate membership using ribbon. In Proc. 20th International Symposium\r\non Experimental Algorithms (SEA), pages 4:1–4:20, 2022. doi:10.4230/LIPICS.SEA.2022.4.\r\n16 Patrick Dinklage, Johannes Fischer, Alexander Herlez, Tomasz Kociumaka, and Florian\r\nKurpicz. Practical performance of space efficient data structures for longest common extensions.\r\nIn Proc. 28th Annual European Symposium on Algorithms (ESA), pages 39:1–39:20, 2020.\r\ndoi:10.4230/LIPIcs.ESA.2020.39.\r\n17 Peter Elias. Efficient storage and retrieval by content and address of static files. J. ACM,\r\n21(2):246–260, 1974. doi:10.1145/321812.321820.\r\n18 Emmanuel Esposito, Thomas Mueller Graf, and Sebastiano Vigna. RecSplit: Minimal perfect\r\nhashing via recursive splitting. In Proc. 22nd Symposium on Algorithm Engineering and\r\nExperiments (ALENEX), pages 175–185, 2020. doi:10.1137/1.9781611976007.14.\r\n19 Robert Mario Fano. On the number of bits required to implement an associative memory.\r\nTechnical report, MIT, Computer Structures Group, 1971. Project MAC, Memorandum 61\".",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/f562a0b7-8726-4e31-9f80-8985691132e8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=057d34a26d34c56ee6237ef8230ffd882b0f137afbdd45d37c763092a129a476",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 491
      },
      {
        "segments": [
          {
            "segment_id": "ee006a66-6aae-4340-98f6-718ec1cce734",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 16,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "16 Learned Monotone Minimal Perfect Hashing\r\n20 Paolo Ferragina, Roberto Grossi, Ankur Gupta, Rahul Shah, and Jeffrey Scott Vitter. On\r\nsearching compressed string collections cache-obliviously. In Proc. 27th ACM Symposium on\r\nPrinciples of Database Systems (PODS), pages 181–190, 2008. doi:10.1145/1376916.1376943.\r\n21 Paolo Ferragina, Fabrizio Lillo, and Giorgio Vinciguerra. On the performance of learned data\r\nstructures. Theor. Comput. Sci., 871:107–120, 2021. doi:10.1016/J.TCS.2021.04.015.\r\n22 Paolo Ferragina, Giovanni Manzini, and Giorgio Vinciguerra. Compressing and querying\r\ninteger dictionaries under linearities and repetitions. IEEE Access, 10:118831–118848, 2022.\r\ndoi:10.1109/ACCESS.2022.3221520.\r\n23 Paolo Ferragina and Gonzalo Navarro. Pizza&Chili corpus. Accessed: February 2023. URL:\r\nhttp://pizzachili.dcc.uchile.cl/texts.html.\r\n24 Paolo Ferragina and Giorgio Vinciguerra. Learned data structures. In Luca Oneto, Nicolò\r\nNavarin, Alessandro Sperduti, and Davide Anguita, editors, Recent Trends in Learning From\r\nData, pages 5–41. Springer International Publishing, 2020. doi:10.1007/978-3-030-43883-8_\r\n2.\r\n25 Paolo Ferragina and Giorgio Vinciguerra. The PGM-index: a fully-dynamic compressed\r\nlearned index with provable worst-case bounds. PVLDB, 13(8):1162–1175, 2020. doi:10.\r\n14778/3389133.3389135.\r\n26 Edward A. Fox, Qi Fan Chen, Amjad M. Daoud, and Lenwood S. Heath. Order-preserving\r\nminimal perfect hash functions and information retrieval. ACM Trans. Inf. Syst., 9(3):281–308,\r\n1991. doi:10.1145/125187.125200.\r\n27 Edward A. Fox, Qi Fan Chen, and Lenwood S. Heath. A faster algorithm for constructing\r\nminimal perfect hash functions. In Proc. 15th Annual International ACM Conference on\r\nResearch and Development in Information Retrieval (SIGIR), pages 266–273, 1992. doi:\r\n10.1145/133160.133209.\r\n28 Travis Gagie, Gonzalo Navarro, and Nicola Prezza. Fully functional suffix trees and optimal text\r\nsearching in BWT-runs bounded space. J. ACM, 67(1):2:1–2:54, 2020. doi:10.1145/3375890.\r\n29 LeMonHash - GitHub. https://github.com/ByteHamster/LeMonHash, 2023.\r\n30 MMPHF-Experiments - GitHub. https://github.com/ByteHamster/MMPHF-Experiments,\r\n2023.\r\n31 Simon Gog, Timo Beller, Alistair Moffat, and Matthias Petri. From theory to practice: Plug\r\nand play with succinct data structures. In Proc. 13th International Symposium on Experimental\r\nAlgorithms (SEA), pages 326–337, 2014. doi:10.1007/978-3-319-07959-2_28.\r\n32 Google. Google ngram exports. Accessed: March 2023. URL: https://storage.googleapis.\r\ncom/books/ngrams/books/datasetsv3.html.\r\n33 Roberto Grossi, Alessio Orlandi, and Rajeev Raman. Optimal trade-offs for succinct string\r\nindexes. In Proc. 37th International Colloquium on Automata, Languages and Programming\r\n(ICALP), pages 678–689, 2010. doi:10.1007/978-3-642-14165-2_57.\r\n34 Roberto Grossi and Giuseppe Ottaviano. Fast compressed tries through path decompositions.\r\nACM J. Exp. Algorithmics, 19(1), 2014. doi:10.1145/2656332.\r\n35 Guy Jacobson. Space-efficient static trees and graphs. In Proc. 30th IEEE Symposium on\r\nFoundations of Computer Science (FOCS), pages 549–554, 1989. doi:10.1109/SFCS.1989.\r\n63533.\r\n36 Andreas Kipf, Ryan Marcus, Alexander van Renen, Mihail Stoian, Alfons Kemper, Tim Kraska,\r\nand Thomas Neumann. SOSD: A benchmark for learned indexes. CoRR, abs/1911.13014,\r\n2019.\r\n37 Evgenios M. Kornaropoulos, Silei Ren, and Roberto Tamassia. The price of tailoring the\r\nindex to your data: Poisoning attacks on learned index structures. In Proc. 48th International\r\nConference on Management of Data (SIGMOD), pages 1331–1344, 2022. doi:10.1145/\r\n3514221.3517867.\r\n38 Tim Kraska, Alex Beutel, Ed H. Chi, Jeffrey Dean, and Neoklis Polyzotis. The case for learned\r\nindex structures. In Proc. 44th International Conference on Management of Data (SIGMOD),\r\npages 489–504, 2018. doi:10.1145/3183713.3196909.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/ee006a66-6aae-4340-98f6-718ec1cce734.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b01133f0264e04fc5e107bfea15ca5f96e435c4b6568f9c1587df1bed640502a",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 473
      },
      {
        "segments": [
          {
            "segment_id": "21a6c541-1665-441a-89df-966ff5f786b1",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 17,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 17\r\n39 Florian Kurpicz. Engineering compact data structures for rank and select queries on bit\r\nvectors. In Proc. 29th International Symposium on String Processing and Information Retrieval\r\n(SPIRE), pages 257–272, 2022. doi:10.1007/978-3-031-20643-6\\_19.\r\n40 Florian Kurpicz, Hans-Peter Lehmann, and Peter Sanders. PaCHash: Packed and compressed\r\nhash tables. In Proc. 25th Symposium on Algorithm Engineering and Experiments (ALENEX),\r\npages 162–175, 2023. doi:10.1137/1.9781611977561.ch14.\r\n41 Hans-Peter Lehmann, Peter Sanders, and Stefan Walzer. SicHash - small irregular cuckoo\r\ntables for perfect hashing. In Proc. 25th Symposium on Algorithm Engineering and Experiments\r\n(ALENEX), pages 176–189, 2022. doi:10.1137/1.9781611977561.ch15.\r\n42 Hyeontaek Lim, Bin Fan, David G. Andersen, and Michael Kaminsky. SILT: a memory\u0002efficient, high-performance key-value store. In Proc. 23rd ACM Symposium on Operating\r\nSystems Principles (SOSP), pages 1–13, 2011. doi:10.1145/2043556.2043558.\r\n43 Antoine Limasset, Guillaume Rizk, Rayan Chikhi, and Pierre Peterlongo. Fast and scalable\r\nminimal perfect hashing for massive key sets. In Proc. 16th International Symposium on\r\nExperimental Algorithms (SEA), pages 25:1–25:16, 2017. doi:10.4230/LIPICS.SEA.2017.25.\r\n44 Bohdan S. Majewski, Nicholas C. Wormald, George Havas, and Zbigniew J. Czech. A family of\r\nperfect hashing methods. Comput. J., 39(6):547–554, 1996. doi:10.1093/COMJNL/39.6.547.\r\n45 Ingo Müller, Peter Sanders, Robert Schulze, and Wei Zhou. Retrieval and perfect hashing\r\nusing fingerprinting. In Proc. 13th International Symposium on Experimental Algorithms\r\n(SEA), pages 138–149, 2014. doi:10.1007/978-3-319-07959-2_12.\r\n46 J. Ian Munro and Venkatesh Raman. Succinct representation of balanced parentheses and\r\nstatic trees. SIAM J. Comput., 31(3):762–776, 2001. doi:10.1137/S0097539799364092.\r\n47 Gonzalo Navarro. Spaces, trees, and colors: The algorithmic landscape of document retrieval\r\non sequences. ACM Comput. Surv., 46(4):1–47, 2014. doi:10.1145/2535933.\r\n48 Gonzalo Navarro. Compact data structures: a practical approach. Cambridge University Press,\r\n2016.\r\n49 Gonzalo Navarro and Javiel Rojas-Ledesma. Predecessor search. ACM Comput. Surv., 53(5),\r\n2020. doi:10.1145/3409371.\r\n50 Giuseppe Ottaviano and Rossano Venturini. Partitioned Elias-Fano indexes. In Proc. 37th\r\nInternational ACM Conference on Research and Development in Information Retrieval (SIGIR),\r\npages 273–282, 2014. doi:10.1145/2600428.2609615.\r\n51 Giulio E. Pibiri and Roberto Trani. PTHash: Revisiting FCH minimal perfect hashing. In Proc.\r\n44th International ACM Conference on Research and Development in Information Retrieval\r\n(SIGIR), pages 1339–1348, 2021. doi:10.1145/3404835.3462849.\r\n52 Ibrahim Sabek, Kapil Vaidya, Dominik Horn, Andreas Kipf, Michael Mitzenmacher, and\r\nTim Kraska. Can learned models replace hash functions? PVLDB, 16(3):532–545, 2022.\r\ndoi:10.14778/3570690.3570702.\r\n53 Sebastiano Vigna. Broadword implementation of rank/select queries. In Proc. 7th International\r\nWorkshop on Experimental Algorithms (WEA), pages 154–168. Springer, 2008. doi:10.1007/\r\n978-3-540-68552-4_12.\r\n54 Stefan Walzer. Peeling close to the orientability threshold - spatial coupling in hashing-based\r\ndata structures. In Proc. 32nd ACM-SIAM Symposium on Discrete Algorithms (SODA), pages\r\n2194–2211, 2021. doi:10.1137/1.9781611976465.131.\r\n55 Ian H. Witten, Alistair Moffat, and Timothy C. Bell. Managing Gigabytes: Compressing and\r\nIndexing Documents and Images. Morgan Kaufmann, 2nd edition, 1999.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/21a6c541-1665-441a-89df-966ff5f786b1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e1ef243ea3740370c1069f1d88530eab577af91c216f19f0e145099b09a0e8f4",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 442
      },
      {
        "segments": [
          {
            "segment_id": "217213b6-19b0-4813-ae0f-bce354be5fe8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 18,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "18 Learned Monotone Minimal Perfect Hashing\r\nA Variants and Refinements\r\nThe following section explains in detail our proposed variants and refinements inside the\r\nLeMonHash framework.\r\nExternal Memory Construction. To construct the PGM-index with a specific ε value, a\r\nsingle scan over the input data is sufficient. As soon as one of the segments is constructed, the\r\ncorresponding keys can be mapped to buckets and the input for the retrieval data structures\r\ncan be generated. The retrieval data structures can be constructed in external memory as\r\nwell [15]. The construction of LeMonHash can therefore be performed entirely in external\r\nmemory. External memory queries are possible by selecting a suitable data structure for\r\npredecessor queries inside the PGM-index (such as the recursive structure in [25]), as well\r\nas an external-memory encoding of the bucket sizes. LeMonHash-VL can be constructed\r\nand queried in external memory using similar considerations. While the recursion needs\r\nadditional passes over the input data, note that the construction is performed in depth-first\r\norder, so it can profit from the locality between different levels.\r\nParallel Construction. As described in [3], it is easy to divide any MMPHF into multiple\r\nbuckets (see Section 3). The buckets can then be constructed independently in parallel,\r\nbut this naive construction introduces some query overhead due to adding another layer\r\non top of the data structure. Instead, the LeMonHash construction can be parallelised\r\ntransparently to the queries. We can divide the input data into ranges and construct\r\nindependent PGM-indexes on each range. When concatenating the linear models of all\r\nranges, we get a PGM-index for the whole input set. An advantage of this approach is that it\r\nis transparent to the queries. With the naive division, this index stores a negligible number\r\nof additional segments linear in the number of processors, but these cut-points can likely\r\nbe “repaired” locally, so that we do not get a space overhead for most inputs. Mapping\r\nall keys to buckets by evaluating the PGM and therefore determining the input for the\r\nretrieval data structures is possible in parallel as well. Finally, the retrieval data structures\r\ncan be constructed in parallel. This is again transparent to the queries and introduces only a\r\nnegligible space overhead linear in the number of processors [15]. For variable-length strings,\r\neach node of the LeMonHash-VL construction can be parallelised just like described above.\r\nOn top of that, different child nodes can be constructed independently in parallel.\r\nRecursive Bucket Splitting. Inside a bucket, our implementation explicitly stores the ranks\r\nof all keys. Let us call this strategy Direct Rank Storing (DRS). An alternative method to\r\ndetermine the ranks within a bucket is Recursive Bucket Splitting (RBS). Take a bucket of\r\nsize b that can contain keys from the range (L, R). We can now split this bucket in half by\r\nstoring how many of the keys are smaller than M = (L + R)/2. This takes ⌈log2(b + 1)⌉ bits\r\nand splits the bucket into two sub-buckets of average size b/2. The two sub-buckets can be\r\nhandled recursively. For uniform random inputs with an average bucket size of b ≥ 3, RBS\r\nneeds less space than DRS. This reduction in space usage comes at the cost of more expensive\r\nquery operations. In particular, we need to query the retrieval data structures for every level\r\nin that bucket-internal tree. An additional problem with this variant is that it depends on the\r\ndistribution of keys. In the worst case, when all key values are very close to L, the approach\r\nrepeatedly needs to store the fact that b keys are smaller than the midpoint. This can lead\r\nto a space usage close to log(b)log(R − L), which can be arbitrarily large depending on the\r\nuniverse size. We therefore did not implement this construction for LeMonHash.Whether the",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/217213b6-19b0-4813-ae0f-bce354be5fe8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=341123f783b551e5c53bdc05bdc63a5864898bdef7626254dc8c045748a8cbed",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 628
      },
      {
        "segments": [
          {
            "segment_id": "217213b6-19b0-4813-ae0f-bce354be5fe8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 18,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "18 Learned Monotone Minimal Perfect Hashing\r\nA Variants and Refinements\r\nThe following section explains in detail our proposed variants and refinements inside the\r\nLeMonHash framework.\r\nExternal Memory Construction. To construct the PGM-index with a specific ε value, a\r\nsingle scan over the input data is sufficient. As soon as one of the segments is constructed, the\r\ncorresponding keys can be mapped to buckets and the input for the retrieval data structures\r\ncan be generated. The retrieval data structures can be constructed in external memory as\r\nwell [15]. The construction of LeMonHash can therefore be performed entirely in external\r\nmemory. External memory queries are possible by selecting a suitable data structure for\r\npredecessor queries inside the PGM-index (such as the recursive structure in [25]), as well\r\nas an external-memory encoding of the bucket sizes. LeMonHash-VL can be constructed\r\nand queried in external memory using similar considerations. While the recursion needs\r\nadditional passes over the input data, note that the construction is performed in depth-first\r\norder, so it can profit from the locality between different levels.\r\nParallel Construction. As described in [3], it is easy to divide any MMPHF into multiple\r\nbuckets (see Section 3). The buckets can then be constructed independently in parallel,\r\nbut this naive construction introduces some query overhead due to adding another layer\r\non top of the data structure. Instead, the LeMonHash construction can be parallelised\r\ntransparently to the queries. We can divide the input data into ranges and construct\r\nindependent PGM-indexes on each range. When concatenating the linear models of all\r\nranges, we get a PGM-index for the whole input set. An advantage of this approach is that it\r\nis transparent to the queries. With the naive division, this index stores a negligible number\r\nof additional segments linear in the number of processors, but these cut-points can likely\r\nbe “repaired” locally, so that we do not get a space overhead for most inputs. Mapping\r\nall keys to buckets by evaluating the PGM and therefore determining the input for the\r\nretrieval data structures is possible in parallel as well. Finally, the retrieval data structures\r\ncan be constructed in parallel. This is again transparent to the queries and introduces only a\r\nnegligible space overhead linear in the number of processors [15]. For variable-length strings,\r\neach node of the LeMonHash-VL construction can be parallelised just like described above.\r\nOn top of that, different child nodes can be constructed independently in parallel.\r\nRecursive Bucket Splitting. Inside a bucket, our implementation explicitly stores the ranks\r\nof all keys. Let us call this strategy Direct Rank Storing (DRS). An alternative method to\r\ndetermine the ranks within a bucket is Recursive Bucket Splitting (RBS). Take a bucket of\r\nsize b that can contain keys from the range (L, R). We can now split this bucket in half by\r\nstoring how many of the keys are smaller than M = (L + R)/2. This takes ⌈log2(b + 1)⌉ bits\r\nand splits the bucket into two sub-buckets of average size b/2. The two sub-buckets can be\r\nhandled recursively. For uniform random inputs with an average bucket size of b ≥ 3, RBS\r\nneeds less space than DRS. This reduction in space usage comes at the cost of more expensive\r\nquery operations. In particular, we need to query the retrieval data structures for every level\r\nin that bucket-internal tree. An additional problem with this variant is that it depends on the\r\ndistribution of keys. In the worst case, when all key values are very close to L, the approach\r\nrepeatedly needs to store the fact that b keys are smaller than the midpoint. This can lead\r\nto a space usage close to log(b)log(R − L), which can be arbitrarily large depending on the\r\nuniverse size. We therefore did not implement this construction for LeMonHash.Whether the",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/217213b6-19b0-4813-ae0f-bce354be5fe8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=341123f783b551e5c53bdc05bdc63a5864898bdef7626254dc8c045748a8cbed",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 628
      },
      {
        "segments": [
          {
            "segment_id": "6c58bb7a-bff3-407e-88b0-80eb68a15363",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 19,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 19\r\nRBS technique still works well with real-world data sets remains an open question. Given\r\nthat many MMPHF construction algorithms use the bucketing technique (see Section 3), the\r\nRBS technique might still be of general interest for MMPHFs.\r\nIndexed Chunk Extraction. As described in Section 5, the chunks in LeMonHash-VL\r\nare generated from consecutive characters. Now consider an input where the positions of\r\nbranching characters of the keys are very far. Then the chunks encode a lot of data that is not\r\nnecessary to differentiate the keys. Instead, it is possible to determine the distinct minima of\r\nthe LCP values of strings in the corresponding node. Then chunks can be generated from\r\nthe positions at these minima, which reduces the height of the tree. In practice, however, we\r\nfind that the plain version is faster and more space efficient (see Section 8.1).\r\nB Full Proofs\r\nFull proof of Theorem 1. For n uniform random integers mapped to n buckets, the number\r\nof keys per bucket follows a binomial distribution with p = 1/n. For large n, we can\r\napproximate this by the Poisson distribution with λ = n · 1/n = 1. Therefore, the probability\r\nthat a bucket has size k is λ\r\nk\r\ne\r\n−λ\r\nk! =\r\n1\r\nk! e\r\n. Storing a bucket of size k requires k entries in the\r\ncorresponding retrieval data structure, and each needs ⌈log k⌉ bits. Note that buckets of size\r\n0 and 1 do not need to store ranks. Using the linearity of expectation, the average total\r\nnumber of bits to store in retrieval data structures is:\r\nE(space) = n · E(space per bucket) = n ·\r\nX∞\r\nk=2\r\nk⌈log k⌉ · 1\r\nk! e\r\n≈ 0.91536n.\r\nA succinct retrieval data structure can then store this using ≈ 0.91536n + o(n) bits of\r\nspace. The Elias-Fano coded sequence of global ranks takes 2n + o(n) bits. Overall, we get a\r\nspace usage of ≈ n(2.91536 + o(1)) bits.\r\nFor queries, the evaluation of the linear function and rounding can be executed in constant\r\ntime. Now that we have the bucket index, we retrieve its offset and size from that binary\r\nsequence using two constant time select1 queries. From that, we know which retrieval data\r\nstructure to query, and the actual query works in constant time [15]. ◀\r\nFull proof of Theorem 2. The rank estimate returned by the PGM is guaranteed to be far\r\nfrom the correct rank by ε. In other words, given a bucket number i ∈ [n], any of the input\r\nkeys with rank between max{1, i − ε} and min{i + ε, n} can be mapped to it, thus yielding\r\na bucket of size at most b = 2ε + 1. In the worst case, there are n/(2ε + 1) of such size-b\r\nbuckets, which overall require storing n local ranks in a ⌈log b⌉-bit retrieval data structure.\r\nAdditional 2n + o(n) bits are needed for the Elias-Fano coded sequence of global ranks.\r\nThe remaining term of the space bound is given by the PGM, that we encode with an Elias\u0002Fano representation of linear models’ (x, y)-endpoints in m(log u\r\nm + log nm + 2 log(2ε + 1)) +\r\nO(m) bits [22]. This can be bounded by O\r\n\r\nm log u\r\nm\r\n\u0001\r\nbits, since from [25, Lemma 2] it holds\r\n2ε ≤ n/m ≤ u/m. Finally, we build the predecessor structure of [6, Theorem A.1] on the linear\r\nmodels’ keys, which takes O\r\n\r\nm log u\r\nm\r\n\u0001\r\nbits and yields a query time of O\r\n\r\nlog logw\r\nu\r\nm\r\n\u0001\r\n. ◀\r\nC Low-Level Optimizations\r\nIn addition to the main algorithmic optimizations described in the main part, we here detail\r\nsome more low-level optimizations of our implementation.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/6c58bb7a-bff3-407e-88b0-80eb68a15363.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=744aed4c67fefd86c69589c64c59f4cc8d8daf2cff631900d1a6bff2673f087c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 630
      },
      {
        "segments": [
          {
            "segment_id": "6c58bb7a-bff3-407e-88b0-80eb68a15363",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 19,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 19\r\nRBS technique still works well with real-world data sets remains an open question. Given\r\nthat many MMPHF construction algorithms use the bucketing technique (see Section 3), the\r\nRBS technique might still be of general interest for MMPHFs.\r\nIndexed Chunk Extraction. As described in Section 5, the chunks in LeMonHash-VL\r\nare generated from consecutive characters. Now consider an input where the positions of\r\nbranching characters of the keys are very far. Then the chunks encode a lot of data that is not\r\nnecessary to differentiate the keys. Instead, it is possible to determine the distinct minima of\r\nthe LCP values of strings in the corresponding node. Then chunks can be generated from\r\nthe positions at these minima, which reduces the height of the tree. In practice, however, we\r\nfind that the plain version is faster and more space efficient (see Section 8.1).\r\nB Full Proofs\r\nFull proof of Theorem 1. For n uniform random integers mapped to n buckets, the number\r\nof keys per bucket follows a binomial distribution with p = 1/n. For large n, we can\r\napproximate this by the Poisson distribution with λ = n · 1/n = 1. Therefore, the probability\r\nthat a bucket has size k is λ\r\nk\r\ne\r\n−λ\r\nk! =\r\n1\r\nk! e\r\n. Storing a bucket of size k requires k entries in the\r\ncorresponding retrieval data structure, and each needs ⌈log k⌉ bits. Note that buckets of size\r\n0 and 1 do not need to store ranks. Using the linearity of expectation, the average total\r\nnumber of bits to store in retrieval data structures is:\r\nE(space) = n · E(space per bucket) = n ·\r\nX∞\r\nk=2\r\nk⌈log k⌉ · 1\r\nk! e\r\n≈ 0.91536n.\r\nA succinct retrieval data structure can then store this using ≈ 0.91536n + o(n) bits of\r\nspace. The Elias-Fano coded sequence of global ranks takes 2n + o(n) bits. Overall, we get a\r\nspace usage of ≈ n(2.91536 + o(1)) bits.\r\nFor queries, the evaluation of the linear function and rounding can be executed in constant\r\ntime. Now that we have the bucket index, we retrieve its offset and size from that binary\r\nsequence using two constant time select1 queries. From that, we know which retrieval data\r\nstructure to query, and the actual query works in constant time [15]. ◀\r\nFull proof of Theorem 2. The rank estimate returned by the PGM is guaranteed to be far\r\nfrom the correct rank by ε. In other words, given a bucket number i ∈ [n], any of the input\r\nkeys with rank between max{1, i − ε} and min{i + ε, n} can be mapped to it, thus yielding\r\na bucket of size at most b = 2ε + 1. In the worst case, there are n/(2ε + 1) of such size-b\r\nbuckets, which overall require storing n local ranks in a ⌈log b⌉-bit retrieval data structure.\r\nAdditional 2n + o(n) bits are needed for the Elias-Fano coded sequence of global ranks.\r\nThe remaining term of the space bound is given by the PGM, that we encode with an Elias\u0002Fano representation of linear models’ (x, y)-endpoints in m(log u\r\nm + log nm + 2 log(2ε + 1)) +\r\nO(m) bits [22]. This can be bounded by O\r\n\r\nm log u\r\nm\r\n\u0001\r\nbits, since from [25, Lemma 2] it holds\r\n2ε ≤ n/m ≤ u/m. Finally, we build the predecessor structure of [6, Theorem A.1] on the linear\r\nmodels’ keys, which takes O\r\n\r\nm log u\r\nm\r\n\u0001\r\nbits and yields a query time of O\r\n\r\nlog logw\r\nu\r\nm\r\n\u0001\r\n. ◀\r\nC Low-Level Optimizations\r\nIn addition to the main algorithmic optimizations described in the main part, we here detail\r\nsome more low-level optimizations of our implementation.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/6c58bb7a-bff3-407e-88b0-80eb68a15363.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=744aed4c67fefd86c69589c64c59f4cc8d8daf2cff631900d1a6bff2673f087c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 630
      },
      {
        "segments": [
          {
            "segment_id": "8112eba5-2c48-4880-a62d-c4fa7660525a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 20,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "20 Learned Monotone Minimal Perfect Hashing\r\n64 128 256 512\r\n6\r\n6.5\r\n7\r\nRecursion threshold\r\nBits/key\r\ntext\r\n64 128 256 512\r\nRecursion threshold\r\ndna\r\n64 128 256 512\r\nRecursion threshold\r\nurls\r\nPerfect Chunk Mapping threshold: 32 64 128 256\r\nFigure A.1 Different thresholds for when to store ranks (of keys and chunks) explicitly.\r\nWe encode the alphabet reduction as a bitmap and use the popcount instruction to\r\ndetermine a character’s index. For determining how many characters fit into a chunk with\r\na given alphabet, we use a lookup table of size 256 because that is more efficient than a\r\n(floating point) logarithm and division. Depending on the dataset, multiple nodes of the\r\ntree might use alphabet reduction with a similar alphabet. When constructing a node, we\r\ntherefore look if another node stores a superset of the alphabet that still leads to the same\r\nnumber of characters fitting into a chunk, and possibly re-use the alphabet. If no alphabet\r\nreduction is used, we use the bswap instruction to immediately convert the next 8 characters\r\nto a chunk.\r\nTo speed up access in Elias-Fano coded sequences, we use the clz instruction, which\r\ncounts the number of leading zeroes in a word. When calculating the LCP of strings, we\r\ndo so for multiple bytes at once using 64-bit comparisons. This general idea was already\r\nevaluated in Ref. [16]. To avoid accessing the strings during alphabet map creation (which\r\nwould lead to cache faults), we annotate the LCP array with the branching characters.\r\nTo decode the PGM metadata, which is stored as integers of small width, we use the\r\nbextr instruction to extract specific bits from a word. To evaluate the PGM, we use a 64-bit\r\ndivision with overflow detection instead of a 128-bit division because in practice, 64 bits are\r\noften enough to store the operands. For the PGM that auto-tunes its ε value, we abort early\r\nwhen we detect that the PGM itself is already larger than the optimal cost. This way, very\r\nsmall ε values can often be ruled out earlier.\r\nD Additional Experimental Data\r\nTable A.1 repeats the measurements of Figures 2 and 3, so that exact values can be compared.\r\nThresholds. Figure A.1 compares different thresholds for when to stop recursion (see\r\nSection 5), as well as when to store ranks of chunks explicitly (see Section 5) in LeMonHash\u0002VL. The behaviour of the different datasets is very similar, which is (as mentioned in\r\nSection 8.1) not surprising since the space overhead of a single-segment PGM bucket mapper\r\nis constant. While we have not plotted the query performance here, note that queries get\r\nslightly faster when increasing the recursion threshold because that reduces the height of the\r\ntree.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/8112eba5-2c48-4880-a62d-c4fa7660525a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0d79df379477234ec38b946b91d3b4354bba93fcaad6991047a8e3c78c6cf2d9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 448
      },
      {
        "segments": [
          {
            "segment_id": "9af1272d-d044-411a-be4d-40d78f84e6f5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 595.276,
              "height": 841.89
            },
            "page_number": 21,
            "page_width": 595.276,
            "page_height": 841.89,
            "content": "P. Ferragina, H.-P. Lehmann, P. Sanders, G. Vinciguerra 21 Table A.1 Comparison of string data sets. Query throughput is given in kQueries/s and space usage is given in bit/key (bpk). Method text dna urls 5gram fb osm uniform normal exponential kq/s bpk kq/s bpk kq/s bpk kq/s bpk kq/s bpk kq/s bpk kq/s bpk kq/s bpk kq/s bpk Centroid HT [34] 560 6.78 294 9.05 399 8.36 398 5.09 363 5.47 295 5.95 413 5.55 400 5.54 375 5.55 HTDist [3] 92 5.40 80 5.67 52 5.70 115 4.67 97 4.84 73 4.81 133 4.69 122 4.69 127 4.69 Hollow [34] 345 5.84 252 7.87 153 7.42 300 4.15 276 4.53 187 5.01 351 4.61 339 4.60 356 4.61 Hollow [3] 148 6.90 124 9.26 73 8.41 162 4.07 150 4.50 110 4.96 179 4.54 169 4.53 188 4.54 LCP 2-step [3] 1176 13.12 834 11.62 394 17.81 926 9.98 938 10.79 903 11.00 1193 9.46 1096 9.87 1093 9.97 LCP [3] 1291 21.61 1161 16.23 430 22.74 1429 12.90 1269 12.90 1364 12.97 1535 11.77 1711 12.87 1660 12.87 PaCo [3] 339 7.88 350 8.77 181 11.09 429 6.13 397 6.44 340 6.69 522 6.50 463 6.30 471 6.42 Path Decomp. [34] 579 54.44 185 148.27 224 228.88 crashes on integers VLLCP [3] 816 18.43 611 20.13 315 22.59 723 16.30 690 17.56 692 16.86 823 16.26 780 16.27 868 16.27 VLPaCo [3] 337 8.19 360 9.86 177 11.06 423 7.25 404 7.56 320 7.81 500 7.61 449 7.41 465 7.53 ZFast [3] 530 8.88 269 8.71 198 8.77 487 7.59 441 7.73 345 7.87 591 7.63 581 7.64 611 7.78 LeMonHash-VL 1278 6.08 790 6.25 338 6.46 1458 2.98 1111 4.91 857 4.39 1572 3.33 1647 3.32 1635 3.33 LeMonHash only supports integers 2421 2.63 1463 4.91 1338 4.42 2718 2.98 2657 2.97 2493 2.98",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/8b69ffee-254b-4d9a-b8e1-3af08e89da90/images/9af1272d-d044-411a-be4d-40d78f84e6f5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041831Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e5786d0e964e9e56779b0991ccc4737a37add0ef5b572e68ccb0a8ffa1860d18",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 307
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "No response"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "No response"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "No response"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "No response"
        }
      ]
    }
  }
}