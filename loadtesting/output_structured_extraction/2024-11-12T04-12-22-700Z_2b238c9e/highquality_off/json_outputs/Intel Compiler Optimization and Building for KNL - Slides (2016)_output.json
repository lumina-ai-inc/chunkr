{
  "file_name": "Intel Compiler Optimization and Building for KNL - Slides (2016).pdf",
  "task_id": "2fca873f-4f8c-423c-a2d4-4417e98d72cf",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "9af7610e-3abd-4d24-997c-e2a28cd24c93",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 1,
            "page_width": 720,
            "page_height": 540,
            "content": "Intel® Compiler Optimization AND \r\nbuilding for KNL\r\nSoftware Solutions Group\r\nIntel® Corporation",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/9af7610e-3abd-4d24-997c-e2a28cd24c93.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b4a3a97b48f41a2d3ee5c115c6db5bee99ab378befa568555a78d3617909bc42",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "47ce80ab-e5e8-4889-91b7-9d684b272cf2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 2,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nAgenda\r\nOptimization:\r\nBrief overview\r\nAdvanced vectorization\r\nBuilding for KNL:\r\nNew optimization opportunities with Intel® AVX-512\r\nAllocating high bandwidth memory\r\n2",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/47ce80ab-e5e8-4889-91b7-9d684b272cf2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=df9203a56298f6c03c66b52e6325dd280bc75dd60a836807e1013946cd15d1c4",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "64c9e58d-3cae-40e9-8aeb-cf183f5a1731",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 3,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\n-O0 no optimization; sets -g for debugging\r\n-O1 scalar optimizations\r\n• Excludes optimizations tending to increase code size\r\n-O2 default for icc / ifort (except with -g)\r\n• includes vectorization; some loop transformations such as unrolling; \r\ninlining within source file;\r\n• Start with this (after initial debugging at -O0)\r\n-O3 more aggressive loop optimizations\r\n• Including cache blocking, loop fusion, loop interchange, …\r\n• May not help all applications; need to test\r\n-qopt-report[=0-5] reports what optimizations were performed\r\ngfortran, gcc most optimizations off by default\r\n-O3 includes vectorization and most inlining\r\n3\r\nBasic Optimizations with icc or ifort -O…",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/64c9e58d-3cae-40e9-8aeb-cf183f5a1731.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0cbbfc1028f4b97bbc9263c198e7deaf8324dbe6ac92e8e6b9b23a507fb05294",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d9126990-c633-4d18-bb67-2acfd005b8f4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 4,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nifort (or icc or icpc or icl) -O3\r\nLoop optimizations:\r\n Automatic vectorization‡(use of packed SIMD instructions)\r\n Loop interchange ‡ (for more efficient memory access)\r\n Loop unrolling‡ (more instruction level parallelism) \r\n Prefetching (for patterns not recognized by h/w prefetcher)\r\n Cache blocking (for more reuse of data in cache)\r\n Loop versioning ‡ (for loop count; data alignment; \r\n runtime dependency tests)\r\n Memcpy recognition ‡ (call Intel’s fast memcpy, memset)\r\n Loop splitting ‡ (facilitate vectorization)\r\n Loop fusion (more efficient vectorization)\r\n Scalar replacement‡ (reduce array accesses by scalar temps)\r\n Loop rerolling (enable vectorization)\r\n Loop peeling ‡ (allow for misalignment)\r\n Loop reversal (handle dependencies)\r\n etc.\r\n‡ all or partly enabled at -O2\r\n4\r\nIntel® Compilers: Loop Optimizations",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/d9126990-c633-4d18-bb67-2acfd005b8f4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=13214db13868245f3d9002dde1937000e36782a5254e000d5302afb3462802e3",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b0186196-e86d-4a58-b1b0-0fa763c9e9e5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 5,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nProcessor-specific Compiler Switches\r\nIntel® processors only Intel and non-Intel (-m also GCC)\r\n-xsse2 -msse2 (default)\r\n-xsse3 -msse3\r\n-xssse3 -mssse3\r\n-xsse4.1 -msse4.1\r\n-xsse4.2 -msse4.2\r\n-xavx -mavx\r\n-xcore-avx2\r\n-xmic-avx512\r\n-xHost -xHost (-march=native)\r\nIntel cpuid check No cpu id check\r\nRuntime message if run on \r\nunsupported processor\r\nIllegal instruction error if run on \r\nunsupported processor\r\n5",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/b0186196-e86d-4a58-b1b0-0fa763c9e9e5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c978595d003356c83b3a13781fc98a8f477d68d8ad8693db7be49d60812e0b1f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 397
      },
      {
        "segments": [
          {
            "segment_id": "2cfe01bf-a572-4ec6-87a6-a63eb52f904e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 6,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nInterProcedural Optimization (IPO)\r\nicc -ipo \r\nAnalysis & Optimization across function and source file boundaries, e.g.\r\n• Function inlining; Interprocedural constant propagation; Alignment analysis; \r\nDisambiguation; Data & Function Layout; etc.\r\n2-step process: \r\n• Compile phase – objects contain intermediate representation\r\n• “Link” phase – compile and optimize over all such objects\r\n• Fairly seamless: the linker automatically detects objects built with -ipo, and their \r\ncompile options\r\n• May increase build-time and binary size\r\n• But can be done in parallel with -ipo=n\r\n• Entire program need not be built with IPO/LTO, just hot modules\r\nParticularly effective for apps with many smaller functions\r\nGet report on inlined functions with -qopt-report-phase=ipo\r\n6",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/2cfe01bf-a572-4ec6-87a6-a63eb52f904e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=460b7d7802426a65670d098fac9abd1127b4d83e2030947c27449e35e731b00a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "2a005934-6631-4247-97cb-279c8f940cff",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 7,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nMath Libraries\r\nicc (ifort) comes with optimized math libraries\r\n• libimf (scalar) and libsvml (vector)\r\n• Faster than GNU libm\r\n• Driver links libimf automatically, ahead of libm\r\n• More functionality (replace math.h by mathimf.h for C)\r\n• Optimized paths for Intel® AVX2 and Intel® AVX-512 (detected at run-time)\r\nDon’t link to libm explicitly! -lm \r\n• May give you the slower libm functions instead\r\n• Though the Intel driver may try to prevent this\r\n• GCC needs -lm, so it is often found in old makefiles\r\nOptions to control precision and “short cuts” for vectorized math library:\r\n• -fimf-precision = < high | medium | low >\r\n• -fimf-domain-exclusion = < mask >\r\n• Library need not check for special cases (, nan, singularities )\r\n7",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/2a005934-6631-4247-97cb-279c8f940cff.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=00817ccf52468a5e27287f80e07e30dad0a18b370226633113e0bc59379fd129",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c7fb6978-7e07-419c-8409-d8fc0b98f894",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 8,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nAgenda\r\nOptimization:\r\nBrief overview\r\nAdvanced vectorization\r\nBuilding for KNL:\r\nNew optimization opportunities with Intel® AVX-512\r\nAllocating high bandwidth memory\r\n8",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/c7fb6978-7e07-419c-8409-d8fc0b98f894.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3eb809ce07938cf09f0d67bad82c27c14184c5529f198be025db1acaffa501bf",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "cac5f5f3-e753-46e6-8543-c16ade1fb872",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 9,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nAvoid manual unrolling in source (common in legacy codes)\r\n• (re)write as simple “for” or “DO” loops\r\n• Easier for the compiler to optimize and align\r\n• Less platform-dependent\r\n• More readable\r\nMake loop induction variables local scalars (including loop limits)\r\n• Compiler knows they can’t be aliased\r\nDisambiguate function arguments for C/C++\r\n• E.g. By using -fargument-noalias or “restrict”\r\nBeware Fortran pointer and assumed shape array arguments\r\n• Compiler can’t assume they are unit stride\r\n• Declare CONTIGUOUS where appropriate\r\n• Prefer allocatable arrays to pointers where possible\r\n• Compiler must also worry about pointer aliasing\r\n9\r\nSome General Advice for Auto-Vectorization",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/cac5f5f3-e753-46e6-8543-c16ade1fb872.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=230ef8e4d72cba9788ce06ac2a2695141c6763728072f694a0a5b31500bd673c",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 446
      },
      {
        "segments": [
          {
            "segment_id": "defe7958-6169-429c-8e52-a2a8d12f1688",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 10,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\n<Multiversioned v1>\r\n remark #25233: Loop multiversioned for stride tests on Assumed shape arrays\r\nOne version has unit stride loads, one has gathers.\r\nIn more complex cases, may prevent vectorization.\r\nIf arguments have unit stride, tell the compiler:\r\n Real, contiguous :: a(:), b(:) (or real :: a(*), b(*) )\r\nMay sometimes need contiguous also in caller to avoid temporary array copy\r\n10\r\nFortran Assumed Shape Array Arguments \r\nmay not be contiguous\r\nsubroutine func( a, b, n )\r\n real :: a(:), b(:)\r\n integer :: i, n\r\n do i=1,n\r\n b(i) = b(i) + a(i) * 2.\r\n end do\r\nend",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/defe7958-6169-429c-8e52-a2a8d12f1688.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=21cbdee9d78d62f87017fa02cbcbe0033de6522d0a314f5e3650e5efb65493f5",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6274c220-2c13-48e1-bf3c-be10d22f5859",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 11,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nFrom the Old Days, recap…\r\nRequirements for Auto-Vectorization\r\nInnermost loop of nest \r\nStraight-line code\r\nAvoid:\r\n• Function/subroutine calls\r\n• Loop carried data dependencies \r\n• Non-contiguous data (indirect addressing; non-unit stride) \r\n• Inconsistently aligned data\r\nSee http://software.intel.com/en-us/articles/requirements-for-vectorizable-loops/\r\nStill good advice, but no longer absolute requirements\r\n11",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/6274c220-2c13-48e1-bf3c-be10d22f5859.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d2c8a897d5df21c97d5830389c8a9a495531911c5ffaf95886d3a484f0bdb284",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "7dbed322-f5a8-4f3d-8c4a-5bc4bd84b946",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 12,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nExplicit Vector Programming\r\nVectorization is so important for performance\r\n consider explicit vector programming\r\nModeled on OpenMP* for threading (explicit parallel programming)\r\n• Enables reliable vectorization of complex loops that the compiler can’t \r\nauto-vectorize\r\n• E.g. outer loops\r\n• Directives are commands to the compiler, not hints\r\n #pragma omp simd or !$OMP SIMD etc.\r\n• Programmer is responsible for correctness (just like OpenMP threading)\r\n• E.g. PRIVATE and REDUCTION clauses\r\n• Overrides all dependencies and cost-benefit analysis\r\n• Now incorporated in OpenMP 4.0  portable\r\n• -qopenmp or -qopenmp-simd to enable\r\n12",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/7dbed322-f5a8-4f3d-8c4a-5bc4bd84b946.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=75e99f59c8b7488a323973696c89e958f1f6f4809f52ba5858a4495bed1b056a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "8c9d5735-fbc5-46e6-bd0a-c3ed2474fe37",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 13,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nClauses for OMP SIMD directives\r\nThe programmer (i.e. you!) is responsible for correctness\r\n Just like for race conditions in loops with OpenMP* threading\r\nAvailable clauses:\r\n PRIVATE \r\n FIRSTPRIVATE \r\n LASTPRIVATE like OpenMP for threading\r\n REDUCTION \r\n COLLAPSE (for nested loops)\r\n LINEAR (additional induction variables)\r\n SAFELEN (max iterations that can be executed concurrently)\r\n ALIGNED (tells compiler about data alignment)\r\n13",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/8c9d5735-fbc5-46e6-bd0a-c3ed2474fe37.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7a4a266a07b92d566912b61c185a737ce32f3495b05048ab2dc199976d80562a",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "8bce5aa4-2c72-408c-ba7a-59d996acc6a3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 14,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nExample: Outer Loop Vectorization\r\nsubroutine dist(pt, dis, n, nd, ptref)\r\nimplicit none\r\n integer, intent(in ) :: n, nd\r\n real, dimension(nd,n), intent(in ) :: pt\r\n real, dimension (n), intent(out) :: dis\r\n real, dimension(nd), intent(in ) :: ptref\r\n integer :: ipt, j\r\n real :: d\r\n!$omp simd private(d)\r\n do ipt=1,n\r\n d = 0.\r\n#ifdef KNOWN_TRIP_COUNT \r\n do j=1,MYDIM ! Defaults to 3\r\n#else\r\n do j=1,nd\r\n#endif \r\n d = d + (pt(j,ipt) - ptref(j))**2\r\n enddo\r\n \r\n dis(ipt) = sqrt(d)\r\n enddo\r\nInner loop with\r\nlow trip count\r\n! Calculate distance from data points to reference point\r\nend\r\nOuter loop with\r\nhigh trip count\r\n14",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/8bce5aa4-2c72-408c-ba7a-59d996acc6a3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=23358b155fd74729e6a985a228690748538f29f3b9f26ac850cb2b09957fb808",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 506
      },
      {
        "segments": [
          {
            "segment_id": "3892f020-aaaf-418e-b073-3e8934248016",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 15,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nOuter Loop Vectorization\r\nifort -qopt-report-phase=loop,vec -qopt-report-file=stderr -c dist.F90\r\n…\r\nLOOP BEGIN at dist.F90(17,3)\r\n remark #15542: loop was not vectorized: inner loop was already vectorized\r\n…\r\nLOOP BEGIN at dist.F90(24,6)\r\n remark #15300: LOOP WAS VECTORIZED\r\nWe can vectorize the outer loop by activating the directive\r\n!$omp simd private(d) using -qopenmp-simd\r\nEach iteration must have its own “private” copy of d.\r\nifort -qopenmp-simd -qopt-report-phase=loop,vec -qopt-report-file=stderr \r\n-qopt-report-routine=dist -c dist.F90\r\n…\r\nLOOP BEGIN at dist.F90(17,3)\r\n remark #15301: OpenMP SIMD LOOP WAS VECTORIZED\r\n LOOP BEGIN at dist.F90(24,6)\r\n remark #25460: No loop optimizations reported\r\n LOOP END\r\n15",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/3892f020-aaaf-418e-b073-3e8934248016.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e67dc36a78109e475d21d50a66a381b10c715598879debe40a4e9a0959ee71f7",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "9f1499f0-6f21-470b-b1f9-77ad3f9d421e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 16,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nUnrolling the Inner Loop\r\nThere is still an inner loop.\r\nIf the trip count is fixed and the compiler knows it,\r\nthe inner loop can be fully unrolled.\r\nifort -qopenmp-simd -DKNOWN_TRIP_COUNT -qopt-report-phase=loop,vec\r\n-qopt-report-file=stderr -qopt-report-routine=dist drive_dist.F90 dist.F90\r\n…\r\nLOOP BEGIN at dist.F90(17,3)\r\n remark #15301: OpenMP SIMD LOOP WAS VECTORIZED\r\n LOOP BEGIN at dist.F90(22,6)\r\n remark #25436: completely unrolled by 3 (pre-vector)\r\n LOOP END\r\nLOOP END In this case, the outer loop can\r\nbe vectorized more efficiently;\r\nSIMD may not be needed.\r\n16",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/9f1499f0-6f21-470b-b1f9-77ad3f9d421e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7e02e3c76ea37e295ecab3afa934460ed4f53965856ad91e249441fe044d54e3",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1624c5d3-a5cb-43d0-8bc9-69bea7659bf4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 17,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nOptimization Options Speed-up What’s going on\r\n-O1 1.0 No vectorization\r\n-O2 1.1 Inner loop \r\nvectorization\r\n-O2 -qopenmp-simd 1.7 Outer loop \r\nvectorization\r\n-O2 -qopenmp-simd\r\n-DKNOWN_TRIP_COUNT\r\n1.9 Inner loop\r\nfully unrolled\r\n-O2 -qopenmp-simd -xcore-avx2\r\n-DKNOWN_TRIP_COUNT\r\n2.4 Intel® AVX2 including\r\nFMA instructions\r\n17\r\nOuter Loop Vectorization - performance\r\nPerformance tests are measured using specific computer systems, components, \r\nsoftware, operations and functions. Any change to any of those factors may \r\ncause the results to vary. \r\nThe results above were obtained on a 4th Generation Intel® Core™ i7-4790 \r\nsystem, frequency 3.6 GHz, running Red Hat* Enterprise Linux* version 7.0 and \r\nusing the Intel® Fortran Compiler version 16.0 beta.",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/1624c5d3-a5cb-43d0-8bc9-69bea7659bf4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=15dbd7ecae9f5d20b2f638525178b1d452461d6796415ab282975d4bc5d4ce58",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "061bb09e-f523-4cbf-863e-6ae8648c97a9",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 18,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nFunction calls can have side effects that introduce a loop-carried \r\ndependency, preventing vectorization\r\nPossible remedies:\r\n• Inlining \r\n• best for small functions\r\n• Must be in same source file, or else use -ipo\r\n• !$OMP SIMD directive to vectorize remainder of loop, while \r\npreserving scalar calls to function (last resort)\r\n• SIMD-enabled functions\r\n• Good for large, complex functions and in contexts where \r\ninlining is difficult\r\n• Call from regular “for” or “DO” loop\r\n• SIMD-enabled function may be called with array section argument\r\n• For Fortran, also needs “ELEMENTAL” keyword\r\n18\r\nLoops Containing Function Calls",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/061bb09e-f523-4cbf-863e-6ae8648c97a9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0204b30b914ba3cf24142698a30ea258438373bd6d6b4dac382754ed8e2a7380",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 458
      },
      {
        "segments": [
          {
            "segment_id": "96223db6-1e09-4343-9e19-2cbff7830dc8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 19,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nSIMD-enabled Function\r\nCompiler generates vector version of a scalar function that can be called \r\nfrom a vectorized loop:\r\n#pragma omp declare simd (uniform(y,z,xp,yp,zp))\r\nfloat func(float x, float y, float z, float xp, float yp, float zp) \r\n{\r\nfloat denom = (x-xp)*(x-xp) + (y-yp)*(y-yp) + (z-zp)*(z-zp);\r\n denom = 1./sqrtf(denom);\r\n return denom;\r\n}\r\n….\r\n#pragma omp simd private(x) reduction(+:sumx)\r\nfor (i=1;i<nx;i++) {\r\n x = x0 + (float)i*h;\r\n sumx = sumx + func(x,y,z,xp,yp,zp);\r\n }\r\n19\r\nThese clauses are \r\nrequired for correctness, \r\njust like for OpenMP*\r\nFUNCTION WAS VECTORIZED with…\r\nSIMD LOOP WAS VECTORIZED\r\ny, z, xp, yp and zp \r\nare constant, \r\nx can be a vector\r\n19",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/96223db6-1e09-4343-9e19-2cbff7830dc8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=57ec51a4f9e91706fba6f6e0cc0f6ae390b46de1d7029b0a7aca429cd4a8c384",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "47ed0c82-cd07-442b-831d-298d60c79239",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 20,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nClauses for SIMD-enabled Functions\r\n#pragma omp declare simd (C/C++)\r\n!$OMP DECLARE SIMD (fn_name) (Fortran)\r\n• LINEAR (REF|VAL|UVAL) (additional induction variables)\r\nuse REF(X) when vector argument \r\nis passed by reference (Fortran default)\r\n• UNIFORM (argument is never vector)\r\n• INBRANCH / NOTINBRANCH (will function be called conditionally?)\r\n• SIMDLEN (vector length)\r\n• ALIGNED (tells compiler about data alignment)\r\n• PROCESSOR (tells compiler which processor to\r\n• core_2nd_gen_avx target. NOT controlled by –x… switch.\r\n• core_4th_gen_avx Intel extension in 17.0 compiler)\r\n• mic_avx512, …\r\n20 20",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/47ed0c82-cd07-442b-831d-298d60c79239.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=73050bc0b1cae3f7576d0ea92ac29e0c717d4410725719cf6ad19a310d34f442",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c916d711-f3b0-45a8-8f16-f1698edf9b8f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 21,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nUse PROCESSOR clause to get full benefit on KNL\r\n (with 17.0 compiler)\r\n#pragma omp declare simd uniform(y,z,xp,yp,zp)\r\nremark #15347: FUNCTION WAS VECTORIZED with xmm, simdlen=4, \r\nunmasked, formal parameter types: (vector,uniform,uniform,uniform)\r\nremark #15347: FUNCTION WAS VECTORIZED with xmm, simdlen=4, \r\nmasked, formal parameter types: (vector,uniform,uniform,uniform)\r\n• default ABI requires passing arguments in 128 bit xmm registers\r\n#pragma omp declare simd uniform(y,z,xp,yp,zp), processor(mic-avx512), \r\nnotinbranch\r\nremark #15347: FUNCTION WAS VECTORIZED with zmm, simdlen=16, \r\nunmasked, formal parameter types: (vector,uniform,uniform,uniform)\r\n• Passing arguments in zmm registers facilitates 512 bit vectorization\r\n• Independent of -xmic-avx512 switch\r\n• notinbranch means compiler need not generate masked function version\r\n21",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/c916d711-f3b0-45a8-8f16-f1698edf9b8f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=698173ede15f81ad9268b1eb7d9aac97c94bdcdc58f2a5664f76fa8256f9e177",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "45f3a933-1d33-42d8-92de-75a77cb53945",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 22,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nSIMD-enabled Subroutine\r\nCompiler generates SIMD-enabled (vector) version of a scalar subroutine \r\nthat can be called from a vectorized loop:\r\nsubroutine test_linear(x, y)\r\n!$omp declare simd (test_linear) linear(ref(x, y))\r\n real(8),intent(in) :: x\r\n real(8),intent(out) :: y \r\n y = 1. + sin(x)**3\r\nend subroutine test_linear\r\n…\r\nInterface \r\n…\r\ndo j = 1,n\r\n call test_linear(a(j), b(j))\r\nenddo\r\nSIMD-enabled routine must have explicit interface\r\n!$omp simd not needed in simple cases like this\r\n22\r\nremark #15301: FUNCTION WAS VECTORIZED.\r\nremark #15300: LOOP WAS VECTORIZED.\r\nImportant because arguments \r\npassed by reference in Fortran\r\n22",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/45f3a933-1d33-42d8-92de-75a77cb53945.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f339485e2b8358ae2e4834692ad3f6016342df75be9c11944b3d24be6079e731",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 464
      },
      {
        "segments": [
          {
            "segment_id": "bdfb4e23-2ef6-4735-a663-10eda3eaf9ef",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 23,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nSIMD-enabled Subroutine\r\nThe LINEAR(REF) clause is very important\r\n• In C, compiler places consecutive argument values in a vector register\r\n• But Fortran passes arguments by reference\r\n• By default compiler places consecutive addresses in a vector register\r\n• Leads to a gather of the 4 addresses (slow)\r\n• LINEAR(REF(X)) tells the compiler that the addresses are consecutive; \r\nonly need to dereference once and copy consecutive values to vector register\r\n• New in compiler version 16.0.1\r\n• Same method could be used for C arguments passed by reference\r\n23\r\nApprox speed-up for double precision array of 1M elements\r\nNo DECLARE SIMD 1.0\r\nDECLARE SIMD but no LINEAR(REF) 0.9\r\nDECLARE SIMD with LINEAR(REF) clause 3.6\r\nPerformance tests are measured using specific computer systems, components, software, operations and \r\nfunctions. Any change to any of those factors may cause the results to vary. \r\nThe results above were obtained on an Intel® Xeon® E7-4850 v3 system, frequency 2.2 GHz, running Red \r\nHat* Enterprise Linux* version 7.1 and using the Intel® Fortran Compiler version 16.0.1.\r\n23",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/bdfb4e23-2ef6-4735-a663-10eda3eaf9ef.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a2feb53ac35a70078436934e3524aaf4c61c94d794c72c4d10f483def08572de",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "726848cf-b0b5-4ad2-8b03-0990bdada077",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 24,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nLoop Optimization Summary\r\nThe importance of SIMD parallelism is increasing\r\n• Moore’s law leads to wider vectors as well as more cores\r\n• Don’t leave performance “on the table”\r\n• Be ready to help the compiler to vectorize, if necessary\r\n• With compiler directives and hints\r\n• Using information from optimization reports\r\n• With explicit vector programming\r\n• Use Intel® Advisor and/or Intel® VTune™ Amplifier to find the best places \r\n(hotspots) to focus your efforts\r\n• No need to re-optimize vectorizable code for new processors\r\n• Typically a simple recompilation\r\n24",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/726848cf-b0b5-4ad2-8b03-0990bdada077.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0ab1383f861febb726e7c7e5d4f1e36082763d68c8dc4e24b807b955d272760b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "ef34605c-0529-4058-8173-3b2991eb930d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 25,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nAgenda\r\nOptimization:\r\nBrief overview\r\nAdvanced vectorization\r\nBuilding for KNL:\r\nNew optimization opportunities with Intel® AVX-512\r\nAllocating high bandwidth memory\r\n25",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/ef34605c-0529-4058-8173-3b2991eb930d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=08aaf04a1b335faa0c00b31ea07bfa1a2aa55073203adabf668869c22b23c9df",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6d752857-5dea-4ff0-b745-913e3f699765",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 26,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nReminder: AVX-512 – KNL and SKX\r\n KNL and SkyLake server \r\narchitecture share a large set \r\nof instructions\r\n– but sets are not identical \r\n Subsets are represented by \r\nindividual feature flags \r\n(CPUID) \r\nKNL\r\nSSE*\r\nAVX\r\nAVX2*\r\nAVX-512F\r\nFuture Xeon\r\n(SKX) \r\nSSE*\r\nAVX\r\nAVX2\r\nAVX-512F\r\nSNB\r\nSSE*\r\nAVX\r\nHSW\r\nSSE*\r\nAVX\r\nAVX2\r\nNHM\r\nSSE*\r\nAVX-512CD AVX-512CD\r\nAVX-512ER\r\nAVX-512PR AVX-512BW\r\nAVX-512DQ\r\nAVX-512VL\r\nMPX,SHA, …\r\nCommon Instruction Set \r\n26",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/6d752857-5dea-4ff0-b745-913e3f699765.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=828d4500e9f60820f94daa41a0493ebb6c253dab0b476b47b91179080679fab6",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 437
      },
      {
        "segments": [
          {
            "segment_id": "8bba1855-5c66-4052-b392-f889a19d2f1e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 27,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\n27\r\nIntel® Compiler Switches Targeting Intel® AVX-512\r\nSwitch Description\r\n-xmic-avx512 KNL only\r\n-xcore-avx512 Future Xeon only\r\n-xcommon-avx512 AVX-512 subset common to both. \r\nNot a fat binary.\r\n-m, -march, /arch Not yet !\r\n-axmic-avx512 etc. Fat binaries. Allows to target KNL \r\nand other Intel® Xeon® processors\r\n-qoffload-arch=mic-avx512 Offload to KNL coprocessor\r\nDon’t use -mmic with KNL !\r\nAll supported in 16.0 and 17.0 compilers\r\nBinaries built for earlier Intel® Xeon® processors will run unchanged on KNL\r\nBinaries built for Intel® Xeon Phi™ coprocessors will not. ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/8bba1855-5c66-4052-b392-f889a19d2f1e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=91f11548f7e048cd32ac1d7299aa16917be88e0f754ccc4cce045c4f7a2ebaab",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "64fc3dbf-37c0-437b-b43f-501106e3fe3c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 28,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nConsider Cross-Compiling\r\nKNL is suited to highly parallel applications\r\n• It’s scalar processor is less powerful than that of a “large core” Intel® Xeon® \r\nprocessor\r\nThe Intel® Compiler is a mostly serial application\r\n• Compilation is likely to be faster on an Intel® Xeon® processor\r\n• For parallelism, try make -j\r\n28",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/64fc3dbf-37c0-437b-b43f-501106e3fe3c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1c5cf96082595b6b84c905deb653b015b95cda125a8ebc9717bd4e6c700242dd",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0c320ea9-f63c-4266-9763-c9f2f6d13f1e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 29,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nImproved Optimization Report\r\nsubroutine test1(a, b ,c, d)\r\n integer, parameter :: len=1024\r\n complex(8), dimension(len) :: a, b, c\r\n real(4), dimension(len) :: d\r\n do i=1,len\r\n c(i) = exp(d(i)) + a(i)/b(i)\r\n enddo\r\nEnd\r\n$ ifort -c -S -xmic-avx512 -O3 -qopt-report=4 -qopt-report-file=stderr \r\n-qopt-report-phase=loop,vec,cg -qopt-report-embed test_rpt.f90\r\n• 1 vector iteration comprises\r\n• 16 floats in a single AVX-512 register (d)\r\n• 16 double complex in 4 AVX-512 registers per variable (a, b, c)\r\n• Replace exp(d(i)) by d(i) and the compiler will choose a vector length of 4\r\n• More efficient to convert d immediately to double complex\r\n29\r\nFrom assembly listing: \r\n# VECTOR LENGTH 16\r\n# MAIN VECTOR TYPE: 32-bits floating point",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/0c320ea9-f63c-4266-9763-c9f2f6d13f1e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e4ad313c51994b96ba2f66089c6370f9090b8550e683cc63db81f23bf68d55fd",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "2c084fb2-a9ab-48fc-9686-cd664c1888ff",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 30,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nImproved Optimization Report\r\nCompiler options: -c -S -xmic-avx512 -O3 -qopt-report=4 -qopt-report-file=stderr \r\n-qopt-report-phase=loop,vec,cg -qopt-report-embed\r\n…\r\n remark #15305: vectorization support: vector length 16\r\n remark #15309: vectorization support: normalized vectorization overhead 0.087\r\n remark #15417: vectorization support: number of FP up converts: single \r\nprecision to double precision 1 [ test_rpt.f90(7,6) ]\r\n remark #15300: LOOP WAS VECTORIZED\r\n remark #15482: vectorized math library calls: 1\r\n remark #15486: divides: 1\r\n remark #15487: type converts: 1\r\n…\r\n• New features include the code generation (CG) / register allocation report\r\n• Includes temporaries; stack variables; spills to/from memory\r\n30",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/2c084fb2-a9ab-48fc-9686-cd664c1888ff.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bbb704fcea55726e24b872a9bd8d616ac2e7cc965685be3b3e425f470aff88d9",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 423
      },
      {
        "segments": [
          {
            "segment_id": "012315cd-8d8b-4ac6-b98d-b3975deb43e5",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 31,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nWith Intel® AVX2, does not auto-vectorize\r\n• And vectorizing with SIMD would be too inefficient\r\nifort -c -xcore-avx2 -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec compress.f90\r\n…\r\nLOOP BEGIN at compress.f90(11,3)\r\n remark #15344: loop was not vectorized: vector dependence prevents vectorization. \r\nFirst dependence is shown below. Use level 5 report for details\r\n remark #15346: vector dependence: assumed ANTI dependence between line 13 and line 13\r\nLOOP END\r\n• C code behaves the same\r\n31\r\nCompress/Expand Loops with Intel® AVX-512\r\nnb = 0\r\n do ia=1, na ! line 11\r\n if(a(ia) > 0.) then\r\n nb = nb + 1 \r\n b(nb) = a(ia)\r\n endif\r\n enddo\r\nfor (int i; i <N; i++) { \r\n if (a[i] > 0) { \r\n b[j++] = a[i]; // compress \r\n// c[i] = a[k++]; // expand \r\n } \r\n} \r\n• Cross-iteration dependencies by j and k ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/012315cd-8d8b-4ac6-b98d-b3975deb43e5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d7d2bddef340520b45bcf0761aa169031ffc7b4c22123fb03212c783a8d5e85f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6b36ba62-3a95-424e-97bb-fd86aeff7f10",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 32,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nCompile for KNL:\r\nifort -c -qopt-report=3 -qopt-report-phase=vec -xmic-avx512 compress.f90\r\n…\r\nLOOP BEGIN at compress.f90(11,3)\r\n remark #15300: LOOP WAS VECTORIZED\r\n remark #15450: unmasked unaligned unit stride loads: 1\r\n remark #15457: masked unaligned unit stride stores: 1\r\n…\r\n remark #15478: estimated potential speedup: 14.040\r\n remark #15497: vector compress: 1\r\nLOOP END\r\ngrep vcompress compress.s\r\n vcompressps %zmm4, -4(%rsi,%rdx,4){%k1} #14.7 c7 stall 1\r\n vcompressps %zmm1, -4(%rsi,%r12,4){%k1} #14.7 c5\r\n vcompressps %zmm1, -4(%rsi,%r12,4){%k1} #14.7 c5\r\n vcompressps %zmm4, -4(%rsi,%rdi,4){%k1} #14.7 c7 stall 1\r\nObserved speed-up is substantial but depends on problem size, data layout, etc.\r\n• I saw about 8x for my single precision test case\r\n32\r\nCompress Loop",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/6b36ba62-3a95-424e-97bb-fd86aeff7f10.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fb7865a6bb161041c66a034f083c03e58329b54af9d1f17bb0ab4e995c88fa2e",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3ae16958-3703-4f69-8168-808034b13396",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 33,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\n33\r\nAdjacent Gather Optimizations\r\nIntel Confidential\r\nOr “Neighborhood Gather Optimizations”\r\ndo j=1,n\r\ny(j) = x(1,j) + x(2,j) + x(3,j) + x(4,j) ….\r\n• Elements of x are adjacent in memory, but vector index is in other \r\ndimension\r\n• Compiler generates simd loads and shuffles for x instead of gathers\r\n• Before AVX-512: gather of x(1,1), x(1,2), x(1,3), x(1,4)\r\n• With AVX-512: SIMD loads of x(1,1), x(2,1), x(3,1), x(4,1) etc., \r\nfollowed by permutes to get back to x(1,1), x(1,2), x(1,3), x(1,4) etc.\r\n• Message in optimization report:\r\nremark #34029: adjacent sparse (indexed) loads optimized for speed\r\n• Arrays of short vectors or structs are very common",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/3ae16958-3703-4f69-8168-808034b13396.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=678b8b256f731d3268e691205e2604aec4c7f75f923ed451719d076eb226472b",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 403
      },
      {
        "segments": [
          {
            "segment_id": "ff26af6c-fce3-4a77-bdbc-0d728222e237",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 34,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nWith Intel® AVX2, this does not vectorize\r\n• Store to h is a scatter\r\n• ih can have the same value for different values of i\r\n• Vectorization with a SIMD directive would cause incorrect results\r\nifort -c -xcore-avx2 histo2.f90 -qopt-report-file=stderr -qopt-report-phase=vec\r\nLOOP BEGIN at histo2.f90(11,4)\r\n remark #15344: loop was not vectorized: vector dependence prevents vectorization. \r\nFirst dependence is shown below. Use level 5 report for details\r\n remark #15346: vector dependence: assumed FLOW dependence between line 15 and line 15\r\nLOOP END\r\n34\r\nHistogramming with Intel® AVX2\r\n! Accumulate histogram of sin(x) in h\r\n do i=1,n\r\n y = sin(x(i)*twopi) \r\n ih = ceiling((y-bot)*invbinw)\r\n ih = min(nbin,max(1,ih))\r\n h(ih) = h(ih) + 1 ! line 15\r\n enddo",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/ff26af6c-fce3-4a77-bdbc-0d728222e237.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5bd67699fdf1c25eb6f382e31163ec6dc910e1a3fd6763d5d7d6b71a20521499",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "23865f0b-ee97-405a-9969-3a6868db52a2",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 35,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nCompile for KNL using Intel® AVX-512CD:\r\nifort -c -xmic-avx512 histo2.f90 -qopt-report-file=stderr -qopt-report=3 –S\r\n…\r\nLOOP BEGIN at histo2.f90(11,4)\r\n remark #15300: LOOP WAS VECTORIZED\r\n remark #15458: masked indexed (or gather) loads: 1 \r\n remark #15459: masked indexed (or scatter) stores: 1\r\n remark #15478: estimated potential speedup: 13.930\r\n remark #15499: histogram: 2\r\nLOOP END\r\nvpminsd %zmm5, %zmm21, %zmm3 #14.7 c19\r\nvpconflictd %zmm3, %zmm1 #15.7 c21\r\nvpgatherdd -4(%rsi,%zmm3,4), %zmm6{%k1} #15.15 c21\r\nvptestmd %zmm18, %zmm1, %k0 #15.7 c23\r\nkmovw %k0, %r10d #15.7 c27 stall 1\r\nvpaddd %zmm19, %zmm6, %zmm2 #15.7 c27\r\ntestl %r10d, %r10d\r\n…\r\nvpscatterdd %zmm2, -4(%rsi,%zmm3,4){%k1} #15.7 c3 \r\n35\r\nHistogramming with Intel® AVX-512\r\nSome remarks\r\nomitted",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/23865f0b-ee97-405a-9969-3a6868db52a2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6c4e2ef8ffd9f9ec7fd8f8171719ea68c5a0af5f44de8348ec7983fd67ba6de0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "973a40b7-029b-4b78-bce2-f6277fc7c5de",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 36,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nObserved speed-up between AVX2 (non-vectorized) and AVX512 \r\n(vectorized) can be large, but depends on problem details\r\n• ~9x in my little example\r\n• Comes mostly from vectorization of other heavy computation in the loop\r\n• Not from the scatter itself\r\n• Speed-up may be (much) less if there are many conflicts\r\n• E.g. histograms with a singularity or narrow spike\r\nOther problems map to this\r\n• E.g. energy deposition in cells in particle transport Monte Carlos\r\n36\r\nHistogramming with Intel® AVX-512",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/973a40b7-029b-4b78-bce2-f6277fc7c5de.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=48bb2c2874cc4d83a8eadb3387e0601cc8b7f4dfee8b229e88fda534f1b552da",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "d62b1ce1-8972-4dbd-bf92-88ba67d0763d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 37,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nPrefetching for KNL\r\nHardware prefetcher is more effective than for KNC\r\nSoftware (compiler-generated) prefetching is off by default\r\n• Like for Intel® Xeon® processors\r\n• Enable by -qopt-prefetch=[1-5]\r\nKNL has gather/scatter prefetch\r\n• Enable auto-generation to L2 with -qopt-prefetch=5\r\n• Along with all other types of prefetch, in addition to h/w prefetcher – careful.\r\n• Or hint for specific prefetches\r\n• !DIR$ PREFETCH var_name [ : type : distance ]\r\n• Needs at least -qopt-prefetch=2\r\n• Or call intrinsic\r\n• _mm_prefetch((char *) &a[i], hint);\r\n• MM_PREFETCH(A, hint)\r\n37",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/d62b1ce1-8972-4dbd-bf92-88ba67d0763d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3d3b796c5ab3e613c3328e1adf336b20683c9704fe03dc1b02c541fcec7d25b3",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 474
      },
      {
        "segments": [
          {
            "segment_id": "ba959245-ac77-45d6-adf8-5cb007a8e1c4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 38,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nPrefetching for KNL\r\nvoid foo(int n, int* A, int *B, int *C) {\r\n // pragma_prefetch var:hint:distance\r\n#pragma prefetch A:1:3\r\n#pragma vector aligned\r\n#pragma simd\r\nfor(int i=0; i<n; i++)\r\n C[i] = A[B[i]];\r\n}\r\nicc -O3 -xmic-avx512 -qopt-prefetch=3 -qopt-report=4 -qopt-report-file=stderr -c -S emre5.cpp\r\n remark #25033: Number of indirect prefetches=1, dist=2\r\n remark #25035: Number of pointer data prefetches=2, dist=8\r\n remark #25150: Using directive-based hint=1, distance=3 for indirect memory reference [ emre5.cpp(…\r\n remark #25540: Using gather/scatter prefetch for indirect memory reference, dist=3 [ emre5.cpp(9,12) ]\r\n remark #25143: Inserting bound-check around lfetches for loop\r\n% grep gatherpf emre5.s\r\n vgatherpf1dps (%rsi,%zmm0){%k1} #9.12 c7 stall 2\r\n% grep prefetch emre5.s\r\n# mark_description \"-O3 -xmic-avx512 -qopt-prefetch=3 -qopt-report=4 -qopt-report-file=stderr -c -S -g\";\r\n prefetcht0 512(%r9,%rcx) #9.14 c1\r\n prefetcht0 512(%r9,%r8) #9.5 c7\r\n38",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/ba959245-ac77-45d6-adf8-5cb007a8e1c4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=cb0981d7c3c8c3343670857c97726cd69efca2de5311e4826a7dff47b19aced9",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "838cfa28-d661-4283-ba80-92d8935e6a09",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 39,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nTo get consistent results between KNL and Intel Xeon processors, use\r\n-fp-model precise -fimf-arch-consistency=true -no-fma\r\n(you could try omitting -no-fma for Xeon processors that support FMA, \r\nbut FMA’s could still possibly lead to differences)\r\nIn the 17.0 compiler, this can be done with a single switch:\r\n• -fp-model consistent\r\nTo get consistent results that are as close as possible between KNC and \r\nIntel® Xeon® processors or KNL, try\r\n-fp-model precise -no-fma on both.\r\n39\r\nBottom Line for FP consistency",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/838cfa28-d661-4283-ba80-92d8935e6a09.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=83cd387a757db371ad067340b31ec6e3dd54a29fd5ae55c7e02cefe325abbfc5",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0f9563f2-6dac-4cde-b7df-512fbf017765",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 40,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nFMAs\r\nMost common cause of floating-point differences between Intel® Xeon® \r\nprocessors and Intel® Xeon Phi™ coprocessors or KNL\r\n• Not disabled by -fp-model precise\r\n• Can disable for testing with -no-fma\r\n• Or by function-wide pragma or directive:\r\n #pragma float_control(fma,off)\r\n !dir$ nofma\r\n• With some impact on performance\r\n• -fp-model strict disables FMAs, amongst other things\r\n• But on KNC, results in non-vectorizable x87 code\r\n• The fma() intrinsic in C should always give a result with a single \r\nrounding, even on processors with no FMA instruction\r\n40",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/0f9563f2-6dac-4cde-b7df-512fbf017765.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a70838946051b24f188bd449dd4c9d3062b3706e541840d13e99c6f65adf992b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "4e4c0cc9-ecbf-4a21-b3fb-8745c80d648b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 41,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nFMAs\r\nCan cause issues even when both platforms support them\r\n (e.g. Haswell and KNL)\r\n• Optimizer may not generate them in the same places\r\n• No language rules\r\n• FMAs may break the symmetry of an expression:\r\n c = a; d = -b;\r\n result = a*b + c*d; ( = 0 if no FMAs )\r\nIf FMAs are supported, the compiler may convert to either\r\nresult = fma(c, d, (a*b)) or result = fma(a, b, (c*d))\r\nBecause of the different roundings, these may give results that are \r\nnon-zero and/or different from each other.\r\n41",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/4e4c0cc9-ecbf-4a21-b3fb-8745c80d648b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=aceaa3dce993f5b08a43a57bac09ec1cd2fb52c449be2a1f72ee6cf168caa68f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 471
      },
      {
        "segments": [
          {
            "segment_id": "0c4a7884-bcd3-48cd-8588-c2bfc385adc3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 42,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nAgenda\r\nOptimization:\r\nBrief overview\r\nAdvanced vectorization\r\nBuilding for KNL:\r\nNew optimization opportunities with Intel® AVX-512\r\nAllocating high bandwidth memory\r\n42",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/0c4a7884-bcd3-48cd-8588-c2bfc385adc3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=06417b52758279414c647e429ee95b5d3c10f0a9f1fbe84bbfd42d1d13ad6dd9",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0d4ba397-ea82-4af6-800c-0b26c7f54d63",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 43,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\n• API is open-sourced (BSD licenses)\r\n• https://github.com/memkind ; also part of XPPSL at \r\nhttps://software.intel.com/articles/xeon-phi-software\r\n• User jemalloc API underneath \r\n• http://www.canonware.com/jemalloc/\r\n• https://www.facebook.com/notes/facebook-engineering/scalable-memory\u0002allocation-using-jemalloc/480222803919\r\nmalloc replacement: \r\n43\r\nHigh Bandwidth Memory API\r\n#include <memkind.h>\r\nhbw_check_available()\r\n hbw_malloc, _calloc, _realloc,… (memkind_t kind, …)\r\n hbw_free()\r\n hbw_posix_memalign(), _posix_memalign_psize()\r\n hbw_get_policy(), _set_policy()\r\nld … -ljemalloc –lnuma –lmemkind –lpthread",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/0d4ba397-ea82-4af6-800c-0b26c7f54d63.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2cd912158f1d0bd93daa256d3ec11e19808edc7773b1faf7e954a03fbafa3d7b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "deb306ce-8a03-4443-b084-b2da4df5f643",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 44,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nFortran:\r\n!DIR$ ATTRIBUTES FASTMEM :: data_object1, data_object2 (15.0, 16.0)\r\n• Flat or hybrid mode only\r\n• More Fortran data types may be supported eventually\r\n• Global, local, stack or heap; OpenMP private copies;\r\n• Currently just allocatable arrays (16.0) and pointers (17.0)\r\n• Must remember to link with libmemkind !\r\nPossible additions in a 17.0 compiler:\r\n• Attaching new FASTMEM directive to ALLOCATE statement\r\n• Instead of ALLOCATABLE declaration\r\nC++: can pass hbw_malloc() etc.\r\nstandard allocator replacement for e.g. STL like \r\n#include <hbwmalloc.h>\r\nstd::vector<int, hbw::allocator::allocate>\r\nAvailable already, working on documentation\r\n44\r\nHBW API for Fortran, C++\r\nIntel Confidential",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/deb306ce-8a03-4443-b084-b2da4df5f643.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a671579619bd9f24b477719a2d309e4fd383bf484bf5000d64bdf265b98bd390",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "628f678a-d72c-455a-a3df-4ed466ab3610",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 45,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nWhat Happens if HBW Memory is Unavailable?\r\n(Fortran)\r\nIn 16.0: silently default over to regular memory\r\nNew Fortran intrinsic in module IFCORE in 17.0:\r\ninteger(4) FOR_GET_HBW_AVAILABILITY()\r\n Return values:\r\n• FOR_K_HBW_NOT_INITIALIZED (= 0)\r\n• Automatically triggers initialization of internal variables\r\n• In this case, call a second time to determine availability\r\n• FOR_K_HBW_AVAILABLE (= 1)\r\n• FOR_K_HBW_NO_ROUTINES (= 2) e.g. because libmemkind not linked\r\n• FOR_K_HBW_NOT_AVAILABLE (= 3)\r\n• does not distinguish between HBW memory not present; too little HBW available; \r\nand failure to set MEMKIND_HBW_NODES\r\nNew RTL diagnostics when ALLOCATE to fast memory cannot be honored:\r\n183/4 warning/error libmemkind not linked\r\n185/6 warning/error HBW memory not available\r\nSevere errors 184, 186 may be returned in STAT field of ALLOCATE statement\r\n45 Intel Confidential",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/628f678a-d72c-455a-a3df-4ed466ab3610.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c776d489f4ad23908974d8f76ac7a7134fa2f9c5012d7eb4b962d26e835f5c85",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "dc07e4b7-7704-49dd-9365-ad6c90c4eaea",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 46,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nControlling What Happens if HBM is Unavailable\r\n(Fortran)\r\nIn 16.0: you can’t\r\nNew Fortran intrinsic in module IFCORE in 17.0:\r\ninteger(4) FOR_SET_FASTMEM_POLICY(new_policy) \r\n input arguments:\r\n• FOR_FASTMEM_INFO (= 0) return current policy unchanged\r\n• FOR_FASTMEM_NORETRY (= 1) error if unavailable (default)\r\n• FOR_FASTMEM_RETRY_WARN (= 2) warn if unavailable, use default memory\r\n• FOR_FASTMEM_RETRY (= 3) if unavailable, silently use default memory\r\n• returns previous HBW policy\r\nEnvironment variables (to be set before program execution):\r\n• FOR_FASTMEM_NORETRY =T/F default False\r\n• FOR_FASTMEM_RETRY =T/F default False\r\n• FOR_FASTMEM_RETRY_WARM=T/F default False\r\n46 Intel Confidential",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/dc07e4b7-7704-49dd-9365-ad6c90c4eaea.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=837280ffd5b7bbea8f0a285a60c8ddc5afd266c75253593b94ca3e385a17f522",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 492
      },
      {
        "segments": [
          {
            "segment_id": "24ba400a-f3f4-41c1-88c5-89cbfbd92b74",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 47,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\n#include <memkind.h>\r\nint hbw_get_size(int partition, size_t * total, size_t * free) { // partition=1 for flat HBM\r\n memkind_t kind; \r\n int stat = memkind_get_kind_by_partition(partition, &kind);\r\n if(stat==0) stat = memkind_get_size(kind, total, free);\r\n return stat;\r\n}\r\nFortran interface: (use Fortran 2003 C-interoperability features)\r\ninterface\r\n function hbw_get_size(partition, total, free) result(istat) bind(C, name='hbw_get_size')\r\n use iso_c_binding\r\n implicit none\r\n integer(C_INT) :: istat\r\n integer(C_INT), value :: partition\r\n integer(C_SIZE_T) :: total, free\r\n end function hbw_get_size\r\n end interface\r\nHBM doesn’t show as “used” until first access after allocation\r\n47\r\nHow much HBM is left?",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/24ba400a-f3f4-41c1-88c5-89cbfbd92b74.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b9c31ce33818109645d8787cbb65ca30b836c4be9cb3416bec4a9731996ca5c1",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f6c0c979-52cd-414f-896e-3cab3cec41d3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 48,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nSummary\r\nIntel provides a powerful, optimizing compiler for x86 architecture and for \r\nIntel® MIC architecture\r\n• Best performance on Intel architecture, and competitive performance on \r\nnon-Intel systems\r\n• More optimizations in the pipeline\r\nOur focus is on\r\n• Performance\r\n• Comprehensive coverage of parallelism\r\n• Ease of use\r\n• Compatibility and software investment protection\r\n• Customer Support\r\n48\r\nVisit http://software.intel.com/developer-tools-technical-enterprise \r\n48",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/f6c0c979-52cd-414f-896e-3cab3cec41d3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5bc4dbe2fc853c898d60cdf5e99bf3bfe5b92dcebedb2f7a5ba2bcc445d49546",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6f88a0b5-521e-4425-a46c-4ae785d069ca",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 49,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nAdditional Resources (Optimization)\r\nWebinars: \r\nhttps://software.intel.com/videos/getting-the-most-out-of-the-intel-compiler-with-new\u0002optimization-reports\r\nhttps://software.intel.com/videos/new-vectorization-features-of-the-intel-compiler \r\nhttps://software.intel.com/articles/further-vectorization-features-of-the-intel-compiler\u0002webinar-code-samples\r\nhttps://software.intel.com/videos/from-serial-to-awesome-part-2-advanced-code\u0002vectorization-and-optimization\r\nhttps://software.intel.com/videos/data-alignment-padding-and-peel-remainder-loops\r\nVectorization Guide (C): \r\nhttps://software.intel.com/articles/a-guide-to-auto-vectorization-with-intel-c-compilers/\r\nExplicit Vector Programming in Fortran:\r\nhttps://software.intel.com/articles/explicit-vector-programming-in-fortran\r\nInitially written for Intel® Xeon Phi™ coprocessors, but also applicable elsewhere:\r\nhttps://software.intel.com/articles/vectorization-essential\r\nhttps://software.intel.com/articles/fortran-array-data-and-arguments-and-vectorization\r\nCompiler User Forums at http://software.intel.com/forums\r\n49",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/6f88a0b5-521e-4425-a46c-4ae785d069ca.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=360d0061de30993b5b3c53815d0be2dda55a0b4dcc9adcf115fffc752941dbe6",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "2b2a42fa-8373-4430-9f6b-cbddf2b6489f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 50,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nAdditional Resources (KNL & General)\r\nhttps://software.intel.com/articles/xeon-phi-software\r\nhttps://software.intel.com/articles/intel-xeon-phi-coprocessor-code-named\u0002knights-landing-application-readiness\r\nhttps://software.intel.com/sites/default/files/managed/4c/1c/parallel_mag_issue20.\r\npdf\r\nhttps://software.intel.com/articles/intel-software-development-emulator\r\nhttps://github.com/memkind\r\nhttps://software.intel.com/articles/consistency-of-floating-point-results-using-the\u0002intel-compiler\r\nIntel® Compiler User and Reference Guides:\r\nhttps://software.intel.com/intel-cplusplus-compiler-16.0-user-and-reference-guide\r\nhttps://software.intel.com/intel-fortran-compiler-16.0-user-and-reference-guide\r\n50",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/2b2a42fa-8373-4430-9f6b-cbddf2b6489f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=531a78f569bd64e72169529b031086008b04d6b1a9152b40056448827cc58269",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "20c43093-bc9b-417a-ac5d-962ad6ac64ee",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 51,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nQuestions?\r\n51",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/20c43093-bc9b-417a-ac5d-962ad6ac64ee.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fe560fa764487154c9b098dc16a5aee3d84961a3526c49348a721f792492f333",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 316
      },
      {
        "segments": [
          {
            "segment_id": "10caab53-17ae-432c-b461-12a71efa607a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 52,
            "page_width": 720,
            "page_height": 540,
            "content": "Copyright © 2016, Intel Corporation. All rights reserved. \r\n*Other names and brands may be claimed as the property of others.\r\nOptimization Notice\r\nLegal Disclaimer & Optimization Notice\r\nINFORMATION IN THIS DOCUMENT IS PROVIDED “AS IS”. NO LICENSE, EXPRESS OR IMPLIED, BY ESTOPPEL OR \r\nOTHERWISE, TO ANY INTELLECTUAL PROPERTY RIGHTS IS GRANTED BY THIS DOCUMENT. INTEL ASSUMES NO \r\nLIABILITY WHATSOEVER AND INTEL DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY, RELATING TO THIS \r\nINFORMATION INCLUDING LIABILITY OR WARRANTIES RELATING TO FITNESS FOR A PARTICULAR PURPOSE, \r\nMERCHANTABILITY, OR INFRINGEMENT OF ANY PATENT, COPYRIGHT OR OTHER INTELLECTUAL PROPERTY RIGHT.\r\nSoftware and workloads used in performance tests may have been optimized for performance only on Intel \r\nmicroprocessors. Performance tests, such as SYSmark and MobileMark, are measured using specific computer \r\nsystems, components, software, operations and functions. Any change to any of those factors may cause the results \r\nto vary. You should consult other information and performance tests to assist you in fully evaluating your \r\ncontemplated purchases, including the performance of that product when combined with other products. \r\nCopyright © 2016, Intel Corporation. All rights reserved. Intel, Pentium, Xeon, Xeon Phi, Core, VTune, Cilk, and the Intel \r\nlogo are trademarks of Intel Corporation in the U.S. and other countries.\r\nOptimization Notice\r\nIntel’s compilers may or may not optimize to the same degree for non-Intel microprocessors for optimizations that \r\nare not unique to Intel microprocessors. These optimizations include SSE2, SSE3, and SSSE3 instruction sets and \r\nother optimizations. Intel does not guarantee the availability, functionality, or effectiveness of any optimization on \r\nmicroprocessors not manufactured by Intel. Microprocessor-dependent optimizations in this product are intended \r\nfor use with Intel microprocessors. Certain optimizations not specific to Intel microarchitecture are reserved for Intel \r\nmicroprocessors. Please refer to the applicable product User and Reference Guides for more information regarding \r\nthe specific instruction sets covered by this notice.\r\nNotice revision #20110804\r\n52",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/10caab53-17ae-432c-b461-12a71efa607a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b0020ae1c9c0682e312b1fabd71c3d62c27800830f4e9dd5e1706d34e3b4ed1c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "35c6b483-d10c-4a8c-b961-1541b42e2400",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 720,
              "height": 540
            },
            "page_number": 53,
            "page_width": 720,
            "page_height": 540,
            "content": "",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/2fca873f-4f8c-423c-a2d4-4417e98d72cf/images/35c6b483-d10c-4a8c-b961-1541b42e2400.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041444Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3130a804c34fe43aa941d9ddab6b47df7204ce2ff925b4fde65276855805d885",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 306
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "Intel® Compiler Optimization AND building for KNL\n"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Intel Corporation"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "2016"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "emre5.cpp\nemre5.s\nhisto2.f90\ncompress.f90\ncompress.s\ntest_rpt.f90\ndist.F90\ndrive_dist.F90"
        }
      ]
    }
  }
}