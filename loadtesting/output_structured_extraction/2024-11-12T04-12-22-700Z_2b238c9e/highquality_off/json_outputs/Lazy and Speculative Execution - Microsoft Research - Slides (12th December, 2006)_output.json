{
  "file_name": "Lazy and Speculative Execution - Microsoft Research - Slides (12th December, 2006).pdf",
  "task_id": "4aac3f4d-ea98-406e-ba06-33fd1dda02a9",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "686bd8ce-d065-40e7-b202-b12f122e1fab",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 1,
            "page_width": 612,
            "page_height": 792,
            "content": "Lazy and Speculative Exec\r\nButler Lampson\r\nMicrosoft Research\r\nOPODIS, Bordeaux, France\r\n12 December 2006",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/686bd8ce-d065-40e7-b202-b12f122e1fab.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=75e8d140d071caf9eff24b0cec5a73890aaa9fdd9589052802d178ef662b7360",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "3e9b7e41-eb88-4a21-84cb-c2746d6e63e3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 2,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nWhy This Talk?\r\n A way to think about system design\r\n Could I do this lazily/speculatively? When would it pay?\r\n Steps toward a sound theory of laziness o\r\nspeculation\r\n I am not presenting such a theory",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/3e9b7e41-eb88-4a21-84cb-c2746d6e63e3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=265da2d9859e1b9cf5a30b0ba9ce2f5fcf13166441f5e176461298388ef3de2f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "6c89b95f-8812-471a-8121-ea7b8f3c111c",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 3,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nLazy Evaluation\r\n Well studied in programming languages\r\n Though not much used Lazy vs. eager/strict Examples:\r\n▬ Algol 60 call by name▬ Lazy is the default in Haskell▬ By hand: wrap the lazy part in a lambda\r\n Affects semantics\r\n▬ Side effects—usually not allowed▬ Free variables, e.g. in call by name▬ Termination even in purely functional language",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/6c89b95f-8812-471a-8121-ea7b8f3c111c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=467a74738f969f684c7236a4b37b4e3a160d6906aab6c8fbfc70a6270c37753f",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "a4233464-9f7d-4796-9356-ac043a77132f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 4,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nLazy Execution in Systems\r\n Widely used in systems\r\n Though not much studied\r\n The main idea: defer work that may not b\r\n Pays in saved work (and perhaps in latency) Pays in more concurrency \r\n▬ Only if you have extra resources\r\n Deferred work: a closure, or a program y A few examples\r\n Carry-save adder: use two numbers to repre Write buffer: defer writes from processor to  Redo logging: use log only after a crash",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/a4233464-9f7d-4796-9356-ac043a77132f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4529fd54b9bbf157db610122e77bf5a75d20a9e8167a2b39f0a0ae181b542c6b",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "1b72e599-6063-4526-9bca-1fadcab92c31",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 5,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nSpeculative Execution in Syst\r\n Widely used in processors, and less wide\r\nother systems\r\n The main idea: Do work that may not be \r\n Pays in more concurrency \r\n▬ Only if you have extra resources\r\n A few examples\r\n Prefetching in memory and file systems Branch prediction Optimistic concurrency control in databases",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/1b72e599-6063-4526-9bca-1fadcab92c31.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=97a2ceecf23c34c284a6537d74931c4838d795bf7d655725a1d62c5493940b0c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "7ed22334-1931-417c-8c07-f518d814df02",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 6,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nHow? Reordering\r\n A special case of concurrency Usual constraint: Don’t change the sema\r\n There are some exceptions\r\n Issues\r\n Correctness : Do reordered parts commu Performance : Scheduling Representation of reordered work",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/7ed22334-1931-417c-8c07-f518d814df02.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fd978563c1148157205735eec1fe226b333592a2c7922029813e80b5f5a94261",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "5914fbfa-9f06-464c-9e68-33efb1461213",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 7,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nReordering and Conditiona\r\nLazyt:=\r\nL; !A; !B(\r\nt\r\n)\r\n⇒ !A; !B(\r\nL) late\r\nt:=\r\nL; !A; \r\nx\r\n→ !B(\r\nt\r\n)\r\n⇒ !A;\r\nx\r\n→ !B(\r\nL) less \r\nt:=\r\nL; !A; \r\nx\r\n→ !B(\r\nt\r\n)\r\n⇒\r\nt:=L1;!A;\r\nx\r\n→ !B(L2\r\n(\r\nt)) mor\r\nSpeculative\r\n!A; \r\nx\r\n→ !B(\r\nS\r\n)\r\n⇒\r\nt:=\r\nS; !A;\r\nx\r\n→ !B(\r\nt\r\n)\r\n!A; \r\nx\r\n→ !B(\r\nS\r\n)\r\n⇒\r\nt:=S1;!A;\r\nx\r\n→ !B(S2\r\n(\r\nt)) mor\r\n You bet on the outcome of the conditiona\r\n! marks actions that have output/side effects",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/5914fbfa-9f06-464c-9e68-33efb1461213.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d278b84f74bb5c54ad650c855a5604f90b7b595f5e019d5db631c509bda7bb31",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "fcd201c1-1806-4a19-9c5d-ab6ffc3f881b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 8,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nWinning the Bet\r\n Lazy: You might need it but you don’t, \r\n because a later if decides not to use it: \r\nx is f\r\nt:=\r\nL; !A; \r\nx\r\n→ !B(\r\nt\r\n)\r\n⇒ !A; \r\nx\r\n→ !B(\r\nL\r\n)\r\n Speculative: You might not need it but y\r\n because a later if decides to use it : \r\nx is true\r\n!A; \r\nx\r\n→ !B(\r\nS\r\n)\r\n⇒\r\nt:=\r\nS; !A; \r\nx\r\n→ !B(\r\nt\r\n)",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/fcd201c1-1806-4a19-9c5d-ab6ffc3f881b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9ab6a2164313add5181ab27887a8acdce13adb0fe004c16cc6dce94a021bc59e",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 505
      },
      {
        "segments": [
          {
            "segment_id": "56bcd422-f8d5-49ca-b8a9-3b209b57a038",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 9,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nCorrectness: Actions Must Com\r\n L; A = A; L or A; S = S; A\r\n A special case of A; B = A || B\r\n Ensured if\r\n L/S is purely functional L/S has no side effects and reads nothing A  Transactions\r\n▬ Detect conflict, abort, and retry in the proper or▬ Often used for speculation, just aborting S",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/56bcd422-f8d5-49ca-b8a9-3b209b57a038.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2d6a72870449e32d9740edc82256709a7e113574cc23f075946c473b979f25c0",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "041d8595-d0cc-48f2-9b4e-0debfdfa493a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 10,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nPerformance and Schedulin\r\n Two factors\r\n Bet on the outcome of the conditional More concurrency (pays if you have extra \r\n Bandwidth (total cost of doing work)\r\n Less work to do if you win the lazy bet More concurrency when lazy, or if you win \r\nspeculative bet\r\n▬ Good if you have idle resources, which is incre\r\n Latency\r\n Faster results from A when lazy: L;  Faster results from S with concurrency: A; ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/041d8595-d0cc-48f2-9b4e-0debfdfa493a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9899708bc62cd9ddd06f36d707e63c3bc0b38361cb2004837ccd680bf5667ac3",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "c379d06c-3e39-4897-af49-a371d20d3d3f",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 11,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nLazy: Redo Logging\r\n For fault-tolerant persistent state\r\n Persistent state plus log represents current s Only use the log after a failure\r\n ps = persistent state, \r\nl = log, \r\ns = state\r\n\r\ns = ps; \r\nl\r\n To apply an update \r\nu: \r\nl := \r\nl; u writing a re\r\n To install an update \r\nu: ps := ps; \r\nu\r\n Need s' = \r\ns, so ps; \r\nu; \r\nl = ps; \r\nl\r\n\r\nu; \r\nl = \r\nl is sufficient\r\n The bet: No crash. An easy win Rep: state = persistent state + log",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/c379d06c-3e39-4897-af49-a371d20d3d3f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0bba76216e5ccc53f23b4e540eb684a9b9975ecfeacd0c08104760258d5d0f0c",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "12df1aaa-d2be-450b-ae6d-86471d31a05a",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 12,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nLazy: Write Buffers\r\n In memory and file systems\r\n Be lazy about updating the main store\r\n▬ Writeback caching is a variation\r\n The bet: Data is overwritten before it’s f Also win from reduced latency of store Also win from load balancing of store ba Rep: State = main store + write buffer\r\n Same idea as redo logging, but simpler",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/12df1aaa-d2be-450b-ae6d-86471d31a05a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7c1e6f6badab16eb963444d763a0905e72fc60c036235a7b25d22e37614f4f3d",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "942121b8-c678-4026-a27e-f4b536e18ba8",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 13,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nLazy: Copy-on-Write (CoW\r\n Keep multiple versions of a slowly chang\r\n Be lazy about allocating space for a new ve\r\n▬ Do it only when there’s new data in either vers▬ Otherwise, share the old data\r\n Usually in a database or file system\r\n The bet: Data won’t be overwritten. \r\n Usually an easy win.\r\n Big win in latency when making a new v Big win in bandwidth if versions differ li Rep: Data shared among versions (need ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/942121b8-c678-4026-a27e-f4b536e18ba8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=eaa7f538d3745d7b82dc50d7ca428a1899fa980b564f73bd3826fae67e872528",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "00b6edb9-0996-4a75-bb65-5b6c860af1ef",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 14,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nLazy: Futures / Out of Orde\r\n Launch a computation, consume the resu\r\n Futures in programming languages—progra Out of order execution in CPUs—hardware \r\n▬ IN VLIW program controls\r\n Dataflow is another form—either way\r\n The bet: Result isn’t needed right away \r\n Win in latency of other work Win in more concurrency",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/00b6edb9-0996-4a75-bb65-5b6c860af1ef.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e2b4822b4e1bae90fd3e7f3c37afeb43bf5a4b9073b30d21190dbf296dd3673f",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 482
      },
      {
        "segments": [
          {
            "segment_id": "37535fab-2d71-4cfc-8060-a831e28ee04e",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 15,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nLazy: Stream Processing\r\n In database queries, Unix pipes, etc., \r\n Apply functions to unbounded sequences of \r\n▬\r\nf must be pointwise: f (seq) = \r\ng(seq.head) \r\n⊕ f (\r\n Rearrange the computation to apply several \r\nto each data item in turn \r\n▬ If \r\nf and \r\ng are pointwise, so is \r\nf\r\n◦\r\ng\r\n Sometimes fails, as in piping to sort\r\n The bet: don’t need the whole stream Always a big win in latency\r\n In fact, it can handle infinite structures",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/37535fab-2d71-4cfc-8060-a831e28ee04e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=125e29d50fb377af33df23d05749228b158796e4a4de1813b99d1a8567e7e1cc",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "453c341c-77b0-44fe-9bf1-067d88b3156d",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 16,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nLazy: Eventual Consistenc\r\n Weaken the spec for updates to a store\r\n Give up sequential consistency / serializabil Instead, can see any subset of the updates\r\n▬ Requires updates to commute\r\n sync operation to make all updates visible\r\n Motivation\r\n Multi-master replication, as in DNS Better performance for multiple caches\r\n▬ “Relaxed memory models”\r\n The bet: Don’t need sync\r\n A big win in latency\r\n Rep: State = set of updates, not sequence",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/453c341c-77b0-44fe-9bf1-067d88b3156d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a3fbdccc2cbc3f174f1611b67d93bbac405f6c70c8b8a9c266432dd9454223c4",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "e7f92713-9000-4d1a-ac0a-67da188feddf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 17,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nLazy: Expose events\r\n Only compute what you need to display\r\n Figure out what parts of each window are v Set clipping regions accordingly\r\n The bet: Regions will never be exposed\r\n A win in latency: things you can see now ap Saves work: things not visible are never ren",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/e7f92713-9000-4d1a-ac0a-67da188feddf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1926f0adb0c45a63969b225ceedc9d2470b83dd9fac774217f3dfc6f2b622e9d",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "f9617d24-34e2-4152-ab7b-5e71ad8e51f6",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 18,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nLazy: “Formatting operator\r\n In text editors, how to make text “italic”\r\n Attach a function that computes formatting. \r\n▬ Set “italic”▬ Next larger font size▬ Indent 12 points\r\n Only evaluate it when the text needs to be d\r\n The bet: text will never be displayed\r\n A win in latency: things you can see now ap Saves work: things not visible are never ren\r\n Used in Microsoft Word",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/f9617d24-34e2-4152-ab7b-5e71ad8e51f6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dc5e4410035958e489396762e425bd824d688803210de73f774c71a7049499bb",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "54d6b373-ea98-44fd-b210-cbe35fb5f8b4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 19,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nLazy: Carry-save adders\r\n Don’t propagate carries until need a clean \r\n Represent \r\nx as \r\nx1 + \r\nx\r\n2\r\n For add or subtract, \r\nx + \r\ny = \r\nx1 + \r\nx2 + \r\ny = \r\nr1 \r\n▬\r\nr\r\n1i := \r\nx\r\n1i ⊕\r\nx\r\n2i ⊕\r\nyi ; r2i+1 := maj(x\r\n1i\r\n, x\r\n2i, \r\nyi\r\n)\r\n The bet: Another add before a test or mu",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/54d6b373-ea98-44fd-b210-cbe35fb5f8b4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4a69b7649c93d5cf120b031b7943f255763301cf1c8857efe9377e5ba51bb5ad",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "0476e328-b1a4-4601-8ae5-8c7e440d6daf",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 20,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nLazy:“Infinity” and “Not a Num\r\n Results of floating point operations\r\n Instead of raising a precise exception\r\n Changes the spec No bet, but a big gain in latency",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/0476e328-b1a4-4601-8ae5-8c7e440d6daf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=34d59f0fd6c0cbe6304d47e9834101eb0a65ce4df68930ebc139e33a7e3ee015",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "66b50ba5-b106-4e0d-82ed-ce94ec20c9d4",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 21,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nSpeculative: Optimistic Concurrency \r\n In databases and transactional memory The bet: Cconcurrent transactions don’t  The idea: \r\n Run concurrent transactions without locks Atomically with commit, check for conflict\r\ncommitted transactions\r\n▬ In some versions, conflict with any transaction \r\nwrites go to a shared store\r\n If conflict, abort and retry\r\n Problem: running out of resources",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/66b50ba5-b106-4e0d-82ed-ce94ec20c9d4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e742678bfdc3476c7323ec856bea3cd39023205913ccc3ad1c24e1f3623cf31d",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 495
      },
      {
        "segments": [
          {
            "segment_id": "2f56b746-b1f3-4181-84f7-7609362b9a10",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 22,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nSpeculative: Prefetching\r\n In memory, file systems, databases The bet: Prefetched data is used often en\r\n to pay for the cost in bandwidth Obviously the cost depends on what other u\r\nare for the bandwidth\r\n Scheduling\r\n Figure out what to prefetch\r\n▬ Take instructions from the program▬ Predict from history (like branch prediction)\r\n Assign priority",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/2f56b746-b1f3-4181-84f7-7609362b9a10.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d457f1ed2643b34d4dbeab4e63530549fd2046562cbb23dc677d1b0d39d5e510",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b2fd6415-7e51-4ba4-b125-fa4bb883c38b",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 23,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nSpeculative: Branch Predicti\r\n The bet: Branch will go as predicted\r\n A big win in latency of later operations Little cost, since otherwise you have to wait\r\n Needs undo if speculation fails\r\nx \r\n→ !S\r\n⇒ !S; ~x \r\n→ undo !S\r\n Scheduling: Predict from history\r\n Sometimes get hints from programmer",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/b2fd6415-7e51-4ba4-b125-fa4bb883c38b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=39e054666dceac6c4275ea9fd5911d69c6785cd9214594e0af98e5d625ed9c09",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "617e7c12-67a8-43d1-a494-65ac49dc1906",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 24,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nSpeculative: Data Speculatio\r\n Generalize from branch prediction: predi\r\n Seems implausible in general—predict 0? Works well to predict that cached data is sti\r\n▬ Even though it might be updated by a concurre\r\n The bet: Data will turn out as predicted \r\n An easy win for coherent caches\r\n Works for distributed file systems too\r\n Variation: speculate that sync will succeed\r\n▬ Block output that depends on success",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/617e7c12-67a8-43d1-a494-65ac49dc1906.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b7461f0ed2f0a33ac5d69044b1cb54b2047b7d2adc390301bd2ecb9ec0d98850",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "484f8457-4b98-40ce-bd16-23be8c585d08",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 25,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nSpeculative: Exponential back\r\n Schedule a resource without central cont\r\n Ethernet WiFi (descended from Aloha packet radio,  Spin locks\r\n The idea\r\n Try to access resource Detect collision, wait randomly and retry Back off exponentially, adapting to load\r\n The bet: No collision Good performance needs collision < hold ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/484f8457-4b98-40ce-bd16-23be8c585d08.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=92ba708248ee0bcf6cf313367cb14e89a2e2a1e9a8bd38596a6eb727a980fdf5",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "b7f6bdd1-57c1-4b71-9230-3b4a25ca44b3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 26,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nSpeculative: Caching\r\n Keep some data \r\n in the hope that you will use it again, or you will use other data near it\r\n The bet: Data is reused Typically cost is fairly small\r\n But people depend on winning because cost of miss is 100x – 1000x\r\n Bet yields a big win in latency and bandw\r\n >100x in latency today Save expensive memory/disk bandwidth",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/b7f6bdd1-57c1-4b71-9230-3b4a25ca44b3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bc4c881f6c65bc150427688ca324744cae894311a9a2eeabe16e767ce2276dbc",
            "html": null,
            "markdown": null
          },
          {
            "segment_id": "75cbc39c-e4a9-4b31-b94d-60eb32e55369",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 612,
              "height": 792
            },
            "page_number": 27,
            "page_width": 612,
            "page_height": 792,
            "content": "12 December 2006 Lampson: Lazy and Speculative Execution \r\nConclusion\r\n A way to think about system design\r\n Could I do this lazily/speculatively? When would it pay?\r\n Steps toward a sound theory of laziness o\r\nspeculation\r\n I am not presenting such a theory\r\n Lazy: defer work that may not be needed\r\n Pays in saved work (and perhaps in latency) Pays in more concurrency (if you have extra \r\n Speculative: Do work that may not be ne\r\n Pays in more concurrency (if you have extra ",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/4aac3f4d-ea98-406e-ba06-33fd1dda02a9/images/75cbc39c-e4a9-4b31-b94d-60eb32e55369.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T041826Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=62afa3a6e99c308252c5d1709f8144459b7c6b74eaa2ee4036f902e464bba950",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 433
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "Lazy and Speculative Execution\n"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Butler Lampson\n"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "12 December 2006\n"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "Bordeaux, France\n"
        }
      ]
    }
  }
}