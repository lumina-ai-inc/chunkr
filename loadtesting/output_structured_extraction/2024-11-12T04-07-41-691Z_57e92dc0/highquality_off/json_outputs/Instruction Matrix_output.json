{
  "file_name": "Instruction Matrix.pdf",
  "task_id": "d92072e6-625b-4222-bb21-c65886cd2f3f",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "701aab03-7263-46f6-9fcd-d0fac2e783b3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 1191,
              "height": 842
            },
            "page_number": 1,
            "page_width": 1191,
            "page_height": 842,
            "content": "#instructions (assumed to be single-cycle) \r\nper operation x86 SSE4, AVX2 ppc (POWER8/9) w/ VSX arm64 NEON intersection\r\nNumber of instructions by type and \r\nplatform\r\nOperations ⬇ Types ➡ i8 u8 i16 u16 i32 u32 i64 u64 f32 f64 i8 u8 i16 u16 i32 u32 i64 u64 f32 f64 i8 u8 i16 u16 i32 u32 i64 u64 f32 f64 i8 u8 i16 u16 i32 u32 i64 u64 f32 f64 Instructions\r\nARITH ARITH\r\nadd 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 add\r\nsub 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 sub\r\npairwise add 9 9 1 1 1 1 9 9 1 1 9 9 9 9 9 9 9 9 9 9 1 1 1 1 1 1 1 1 1 1 9 9 9 9 9 9 9 9 9 9 pairwise add\r\npairwise sub 9 9 1 1 1 1 9 9 1 1 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 pairwise sub\r\nsaturated_add 1 1 1 1 9 9 9 9 1 1 1 1 1 1 9 9 1 1 1 1 1 1 1 1 1 1 1 1 9 9 9 9 saturated_add\r\nsaturated_sub 1 1 1 1 9 9 9 9 1 1 1 1 1 1 9 9 1 1 1 1 1 1 1 1 1 1 1 1 9 9 9 9 saturated_sub\r\naverage 2 1 2 1 2 2 2 2 1 1 1 1 1 1 8 8 1 1 1 1 1 1 1 1 2 1 2 1 2 2 8 8 average\r\nshift left/right by constant bits 2 2 1 1 1 1 1 1 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 shift left/right by constant bits\r\nbit-shift-right-var (independent lanes) 9 9 9 9 1 1 9 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 9 9 9 9 2 2 9 2 bit-shift-right-var\r\nbit-shift-left-var (independent lanes) 9 9 9 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 9 9 9 9 1 1 1 1 bit-shift-left-var\r\nabs 1 1 1 9 1 1 3 3 3 3 1 1 1 1 1 1 1 1 3 3 3 9 1 1 abs\r\nnegate 2 2 2 2 1 1 2 2 2 2 1 1 1 1 1 1 1 1 2 2 2 2 1 1 neg\r\nmin/max 1 1 1 1 1 1 2 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 1 1 min/max\r\nmul_truncate (x86 mullo) 9 9 1 1 1 1 9 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 9 9 9 9 1 1 1 1 9 9 mul_truncate\r\nmul_even (PPC mule) 9 9 9 9 1 1 1 1 1 1 1 1 2 2 2 2 2 2 9 9 9 9 2 2 mul_even\r\nmul_fp 1 1 1 1 1 1 1 1 mul_fp\r\nmuladd_fp (3 variants with +/-) 1 1 1 1 1 1 1 1 muladd_fp (all 4 variants with +/-)\r\ndiv_fp 1 1 1 1 1 1 1 1 div_fp\r\nreciprocal_approx 1 9 1 1 1 1 1 9 reciprocal_approx\r\nsqrt 1 1 1 1 1 1 1 1 sqrt\r\nrecip_sqrt_approx 1 9 1 1 1 1 1 9 recip_sqrt_approx\r\nfloor 1 1 1 1 1 1 1 1 floor\r\nceil 1 1 1 1 1 1 1 1 ceil\r\nround 1 1 1 1 1 1 1 1 round\r\nCOMPARE COMPARE\r\ncompare LT/GT 1 3 1 3 1 3 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 3 1 3 1 3 1 1 compare LT/GT\r\ncompare LE/GE 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 1 1 compare LE/GE\r\ncompare == 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 compare ==\r\ncompare != 2 2 2 2 2 2 2 2 1 1 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 compare !=\r\ncompare entire register to 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 compare entire register to 0\r\nLOGICAL LOGICAL\r\nand 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 and\r\nand(not a, b) 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 and(not a, b)\r\nor 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 or\r\nxor 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 xor\r\nbitwise NOT 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 bitwise NOT\r\nmovmskb (concat high bit of each byte) 1 1 2 2 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 movmskb\r\nLOAD/STORE Note: may be big-endian LOAD/STORE\r\nload_aligned 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 load_all_aligned\r\nload_unaligned 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 load_all_unaligned\r\nload_64_unaligned 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 load_lower_half\r\nload1_and_broadcast 2 2 2 2 2 2 2 2 1 1 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 1 1 load1_and_broadcast\r\nstore_aligned 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 store_all_aligned\r\nstore_unaligned 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 store_all_unaligned\r\nstore64_unaligned 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 store64_unaligned_lo\r\nstore_32 3 3 3 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 1 1 1 1 1 1 store_lowest_aligned\r\nstream (non-temporal write) 9 9 9 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 9 9 9 9 1 1 1 1 1 1 stream (non-temporal write)\r\nSWIZZLE SWIZZLE\r\nshift128 left/right by constant bytes 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 shift128 left/right by constant bytes\r\nShift 2x128 bit right in byte increments 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Shift 2x128 bit right in byte increments\r\nbroadcast any lane 9 9 9 9 1 1 1 1 1 1 9 9 9 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 9 9 9 9 1 1 1 1 1 1 broadcast any lane\r\n16-byte shuffle (var indices, >127 to zero) 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 16-byte shuffle (var indices, >15 to zero)\r\nShuffle1032, 0321, 2103 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Shuffle1032, 0321, 2103\r\nInterleave/zip = unpack 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Merge/zip = unpack\r\nBlendV with full bit mask, not just MSB 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 BlendV with full bit mask, not just MSB\r\nCONVERSION CONVERSION\r\nExpand to 2x width (u8->u16, f32->f64) 1 1 1 1 1 1 1 1 2 1 2 1 2 1 1 1 1 1 1 1 1 1 2 1 2 1 2 1 Expand to 2x width (u8->u16, f32->f64)\r\nReducing to half width (e.g. u16->u8) 1 1 1 1 9 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 9 9 1 Reducing to half width (e.g. u16->u8)\r\nConvert integer -> same size real 1 9 9 9 1 1 1 1 1 1 1 1 1 1 1 9 9 9 Convert integer -> same size real\r\nConvert real -> same size integer 1 9 1 1 1 1 1 9 Convert real -> same size integer\r\nExtract lane 0 to reg/aligned mem 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Extract lane 0 to reg/aligned mem\r\nInsert reg/aligned mem into lane 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Insert reg/aligned mem into lane 0\r\nCRYPTO/HASH CRYPTO/HASH\r\nSHA1 1 1 1 1 SHA1\r\nSHA256 1 1 1 1 SHA256\r\nAES 1 1 1 1 AES\r\nCRC32C 1 1 1 1 3 3 3 3 1 1 1 1 3 3 3 3 CRC32C\r\nCLMUL 1 1 CLMUL\r\nEMULATED slow/emulate:\r\nmulhi16 1 1 3 2 mulhi16\r\nhorz_sum 1 5 3 horz_sum",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/d92072e6-625b-4222-bb21-c65886cd2f3f/images/701aab03-7263-46f6-9fcd-d0fac2e783b3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T040922Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=da728cc4ec1fc65859e4dfbcfea65a13d0bc7600844dc02f19aef785bae2c7a7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 2235
      },
      {
        "segments": [
          {
            "segment_id": "701aab03-7263-46f6-9fcd-d0fac2e783b3",
            "bbox": {
              "left": 0,
              "top": 0,
              "width": 1191,
              "height": 842
            },
            "page_number": 1,
            "page_width": 1191,
            "page_height": 842,
            "content": "#instructions (assumed to be single-cycle) \r\nper operation x86 SSE4, AVX2 ppc (POWER8/9) w/ VSX arm64 NEON intersection\r\nNumber of instructions by type and \r\nplatform\r\nOperations ⬇ Types ➡ i8 u8 i16 u16 i32 u32 i64 u64 f32 f64 i8 u8 i16 u16 i32 u32 i64 u64 f32 f64 i8 u8 i16 u16 i32 u32 i64 u64 f32 f64 i8 u8 i16 u16 i32 u32 i64 u64 f32 f64 Instructions\r\nARITH ARITH\r\nadd 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 add\r\nsub 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 sub\r\npairwise add 9 9 1 1 1 1 9 9 1 1 9 9 9 9 9 9 9 9 9 9 1 1 1 1 1 1 1 1 1 1 9 9 9 9 9 9 9 9 9 9 pairwise add\r\npairwise sub 9 9 1 1 1 1 9 9 1 1 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 pairwise sub\r\nsaturated_add 1 1 1 1 9 9 9 9 1 1 1 1 1 1 9 9 1 1 1 1 1 1 1 1 1 1 1 1 9 9 9 9 saturated_add\r\nsaturated_sub 1 1 1 1 9 9 9 9 1 1 1 1 1 1 9 9 1 1 1 1 1 1 1 1 1 1 1 1 9 9 9 9 saturated_sub\r\naverage 2 1 2 1 2 2 2 2 1 1 1 1 1 1 8 8 1 1 1 1 1 1 1 1 2 1 2 1 2 2 8 8 average\r\nshift left/right by constant bits 2 2 1 1 1 1 1 1 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 shift left/right by constant bits\r\nbit-shift-right-var (independent lanes) 9 9 9 9 1 1 9 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 9 9 9 9 2 2 9 2 bit-shift-right-var\r\nbit-shift-left-var (independent lanes) 9 9 9 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 9 9 9 9 1 1 1 1 bit-shift-left-var\r\nabs 1 1 1 9 1 1 3 3 3 3 1 1 1 1 1 1 1 1 3 3 3 9 1 1 abs\r\nnegate 2 2 2 2 1 1 2 2 2 2 1 1 1 1 1 1 1 1 2 2 2 2 1 1 neg\r\nmin/max 1 1 1 1 1 1 2 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 1 1 min/max\r\nmul_truncate (x86 mullo) 9 9 1 1 1 1 9 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 9 9 9 9 1 1 1 1 9 9 mul_truncate\r\nmul_even (PPC mule) 9 9 9 9 1 1 1 1 1 1 1 1 2 2 2 2 2 2 9 9 9 9 2 2 mul_even\r\nmul_fp 1 1 1 1 1 1 1 1 mul_fp\r\nmuladd_fp (3 variants with +/-) 1 1 1 1 1 1 1 1 muladd_fp (all 4 variants with +/-)\r\ndiv_fp 1 1 1 1 1 1 1 1 div_fp\r\nreciprocal_approx 1 9 1 1 1 1 1 9 reciprocal_approx\r\nsqrt 1 1 1 1 1 1 1 1 sqrt\r\nrecip_sqrt_approx 1 9 1 1 1 1 1 9 recip_sqrt_approx\r\nfloor 1 1 1 1 1 1 1 1 floor\r\nceil 1 1 1 1 1 1 1 1 ceil\r\nround 1 1 1 1 1 1 1 1 round\r\nCOMPARE COMPARE\r\ncompare LT/GT 1 3 1 3 1 3 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 3 1 3 1 3 1 1 compare LT/GT\r\ncompare LE/GE 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 1 1 compare LE/GE\r\ncompare == 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 compare ==\r\ncompare != 2 2 2 2 2 2 2 2 1 1 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 compare !=\r\ncompare entire register to 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 compare entire register to 0\r\nLOGICAL LOGICAL\r\nand 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 and\r\nand(not a, b) 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 and(not a, b)\r\nor 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 or\r\nxor 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 xor\r\nbitwise NOT 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 bitwise NOT\r\nmovmskb (concat high bit of each byte) 1 1 2 2 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 movmskb\r\nLOAD/STORE Note: may be big-endian LOAD/STORE\r\nload_aligned 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 load_all_aligned\r\nload_unaligned 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 load_all_unaligned\r\nload_64_unaligned 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 load_lower_half\r\nload1_and_broadcast 2 2 2 2 2 2 2 2 1 1 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 1 1 load1_and_broadcast\r\nstore_aligned 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 store_all_aligned\r\nstore_unaligned 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 store_all_unaligned\r\nstore64_unaligned 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 store64_unaligned_lo\r\nstore_32 3 3 3 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 1 1 1 1 1 1 store_lowest_aligned\r\nstream (non-temporal write) 9 9 9 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 9 9 9 9 1 1 1 1 1 1 stream (non-temporal write)\r\nSWIZZLE SWIZZLE\r\nshift128 left/right by constant bytes 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 shift128 left/right by constant bytes\r\nShift 2x128 bit right in byte increments 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Shift 2x128 bit right in byte increments\r\nbroadcast any lane 9 9 9 9 1 1 1 1 1 1 9 9 9 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 9 9 9 9 1 1 1 1 1 1 broadcast any lane\r\n16-byte shuffle (var indices, >127 to zero) 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 16-byte shuffle (var indices, >15 to zero)\r\nShuffle1032, 0321, 2103 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Shuffle1032, 0321, 2103\r\nInterleave/zip = unpack 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Merge/zip = unpack\r\nBlendV with full bit mask, not just MSB 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 BlendV with full bit mask, not just MSB\r\nCONVERSION CONVERSION\r\nExpand to 2x width (u8->u16, f32->f64) 1 1 1 1 1 1 1 1 2 1 2 1 2 1 1 1 1 1 1 1 1 1 2 1 2 1 2 1 Expand to 2x width (u8->u16, f32->f64)\r\nReducing to half width (e.g. u16->u8) 1 1 1 1 9 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 9 9 1 Reducing to half width (e.g. u16->u8)\r\nConvert integer -> same size real 1 9 9 9 1 1 1 1 1 1 1 1 1 1 1 9 9 9 Convert integer -> same size real\r\nConvert real -> same size integer 1 9 1 1 1 1 1 9 Convert real -> same size integer\r\nExtract lane 0 to reg/aligned mem 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Extract lane 0 to reg/aligned mem\r\nInsert reg/aligned mem into lane 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Insert reg/aligned mem into lane 0\r\nCRYPTO/HASH CRYPTO/HASH\r\nSHA1 1 1 1 1 SHA1\r\nSHA256 1 1 1 1 SHA256\r\nAES 1 1 1 1 AES\r\nCRC32C 1 1 1 1 3 3 3 3 1 1 1 1 3 3 3 3 CRC32C\r\nCLMUL 1 1 CLMUL\r\nEMULATED slow/emulate:\r\nmulhi16 1 1 3 2 mulhi16\r\nhorz_sum 1 5 3 horz_sum",
            "segment_type": "Page",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/d92072e6-625b-4222-bb21-c65886cd2f3f/images/701aab03-7263-46f6-9fcd-d0fac2e783b3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T040922Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=da728cc4ec1fc65859e4dfbcfea65a13d0bc7600844dc02f19aef785bae2c7a7",
            "html": null,
            "markdown": null
          }
        ],
        "chunk_length": 2235
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "Single-cycle instruction counts per operation for x86 SSE4/AVX2, POWER8/9 VSX, and ARM64 NEON.\n"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Author: Not specified in the provided context.\n"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "I am unable to extract the publication date of the document. The provided context contains information about x86, AVX2, PPC, and ARM64 NEON instruction sets, and does not include a date.\n"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "```json\n{\"location\": null}\n```\n"
        }
      ]
    }
  }
}