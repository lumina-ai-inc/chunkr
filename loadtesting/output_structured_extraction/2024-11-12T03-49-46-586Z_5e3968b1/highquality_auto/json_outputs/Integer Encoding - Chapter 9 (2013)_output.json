{
  "file_name": "Integer Encoding - Chapter 9 (2013).pdf",
  "task_id": "19bc0a94-c0e6-474c-b080-32c9dcb97a86",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "5f603bf7-45a2-4b3b-ba56-ccd82d59ce05",
            "bbox": {
              "left": 665.6666,
              "top": 242.74998,
              "width": 352,
              "height": 224.91666
            },
            "page_number": 1,
            "page_width": 1240,
            "page_height": 1754,
            "content": "9 Integer encoding",
            "segment_type": "Section header",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/5f603bf7-45a2-4b3b-ba56-ccd82d59ce05.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0e92829ec3cdb94917a43d1448947e7ccea64041105e69e6f87dddd2f2dc35f6",
            "html": "<h2>9 Integer encoding</h2>",
            "markdown": "## 9 Integer encoding\n\n"
          },
          {
            "segment_id": "c46f7bb3-10c9-4579-889b-52fcee8e615a",
            "bbox": {
              "left": 215.66666,
              "top": 536.5,
              "width": 804.0833,
              "height": 141.58333
            },
            "page_number": 1,
            "page_width": 1240,
            "page_height": 1754,
            "content": "9.1 Elias codes:y and s 9-3 9.2 Rice code 9-4 9.3 PForDelta encoding 9-5 Everything shouldbe made as simpleaspossible,butno 9.4 Variable-byte codes and (s.c)-dense codes 9-5 simpler 9.5 Interpolative coding 9-7 Albert Einstein 9.6 Concluding remarks 9-9",
            "segment_type": "Table",
            "ocr": [
              {
                "bbox": {
                  "left": 291,
                  "top": 3,
                  "width": 28,
                  "height": 18
                },
                "text": "9.1",
                "confidence": 0.9948745
              },
              {
                "bbox": {
                  "left": 334,
                  "top": 1,
                  "width": 172,
                  "height": 21
                },
                "text": "Elias codes:y and s",
                "confidence": 0.90890265
              },
              {
                "bbox": {
                  "left": 772,
                  "top": 0,
                  "width": 32,
                  "height": 24
                },
                "text": "9-3",
                "confidence": 0.976741
              },
              {
                "bbox": {
                  "left": 291,
                  "top": 28,
                  "width": 29,
                  "height": 16
                },
                "text": "9.2",
                "confidence": 0.9902982
              },
              {
                "bbox": {
                  "left": 336,
                  "top": 28,
                  "width": 81,
                  "height": 15
                },
                "text": "Rice code",
                "confidence": 0.9667229
              },
              {
                "bbox": {
                  "left": 775,
                  "top": 28,
                  "width": 28,
                  "height": 17
                },
                "text": "9-4",
                "confidence": 0.98744965
              },
              {
                "bbox": {
                  "left": 291,
                  "top": 51,
                  "width": 30,
                  "height": 16
                },
                "text": "9.3",
                "confidence": 0.98713255
              },
              {
                "bbox": {
                  "left": 335,
                  "top": 50,
                  "width": 170,
                  "height": 18
                },
                "text": "PForDelta encoding",
                "confidence": 0.9889762
              },
              {
                "bbox": {
                  "left": 775,
                  "top": 51,
                  "width": 28,
                  "height": 17
                },
                "text": "9-5",
                "confidence": 0.98085403
              },
              {
                "bbox": {
                  "left": 3,
                  "top": 61,
                  "width": 267,
                  "height": 15
                },
                "text": "Everything shouldbe made as",
                "confidence": 0.94672704
              },
              {
                "bbox": {
                  "left": 3,
                  "top": 82,
                  "width": 227,
                  "height": 15
                },
                "text": "simpleaspossible,butno",
                "confidence": 0.9607668
              },
              {
                "bbox": {
                  "left": 292,
                  "top": 74,
                  "width": 29,
                  "height": 16
                },
                "text": "9.4",
                "confidence": 0.9964598
              },
              {
                "bbox": {
                  "left": 336,
                  "top": 75,
                  "width": 342,
                  "height": 15
                },
                "text": "Variable-byte codes and (s.c)-dense codes",
                "confidence": 0.9386578
              },
              {
                "bbox": {
                  "left": 775,
                  "top": 74,
                  "width": 28,
                  "height": 17
                },
                "text": "9-5",
                "confidence": 0.9853501
              },
              {
                "bbox": {
                  "left": 1,
                  "top": 97,
                  "width": 66,
                  "height": 20
                },
                "text": "simpler",
                "confidence": 0.9925771
              },
              {
                "bbox": {
                  "left": 291,
                  "top": 97,
                  "width": 30,
                  "height": 18
                },
                "text": "9.5",
                "confidence": 0.9931906
              },
              {
                "bbox": {
                  "left": 334,
                  "top": 96,
                  "width": 172,
                  "height": 20
                },
                "text": "Interpolative coding",
                "confidence": 0.97796905
              },
              {
                "bbox": {
                  "left": 772,
                  "top": 93,
                  "width": 32,
                  "height": 24
                },
                "text": "9-7",
                "confidence": 0.98749894
              },
              {
                "bbox": {
                  "left": 2,
                  "top": 122,
                  "width": 97,
                  "height": 15
                },
                "text": "Albert Einstein",
                "confidence": 0.97084796
              },
              {
                "bbox": {
                  "left": 291,
                  "top": 119,
                  "width": 29,
                  "height": 18
                },
                "text": "9.6",
                "confidence": 0.9946442
              },
              {
                "bbox": {
                  "left": 337,
                  "top": 120,
                  "width": 167,
                  "height": 15
                },
                "text": "Concluding remarks",
                "confidence": 0.9630206
              },
              {
                "bbox": {
                  "left": 775,
                  "top": 119,
                  "width": 28,
                  "height": 18
                },
                "text": "9-9",
                "confidence": 0.99080014
              }
            ],
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/c46f7bb3-10c9-4579-889b-52fcee8e615a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6e878ef1443dafe74f67ad29771b700f304e751fd3b67fa749a3682bf259970b",
            "html": "<table>\n  <tbody>\n    <tr>\n      <td>Everything should be made as simple as possible, but no simpler<br>Albert Einstein</td>\n      <td>\n        <pre>\n9.1 Elias codes: y and δ ................................ 9-3\n9.2 Rice code .......................................... 9-4\n9.3 PForDelta encoding .................................. 9-5\n9.4 Variable-byte codes and (s,c)-dense codes .............. 9-5\n9.5 Interpolative coding ................................. 9-7\n9.6 Concluding remarks .................................. 9-9\n        </pre>\n      </td>\n    </tr>\n  </tbody>\n</table>",
            "markdown": "| Everything should be made as simple as possible, but no simpler<br>Albert Einstein | \n        <pre>\n9.1 Elias codes: y and δ ................................ 9-3\n9.2 Rice code .......................................... 9-4\n9.3 PForDelta encoding .................................. 9-5\n9.4 Variable-byte codes and (s,c)-dense codes .............. 9-5\n9.5 Interpolative coding ................................. 9-7\n9.6 Concluding remarks .................................. 9-9\n        </pre>\n       |\n| --- | --- |\n"
          },
          {
            "segment_id": "d4eae2a4-a80e-4622-8fb3-92e877e1a8cb",
            "bbox": {
              "left": 215.66666,
              "top": 753.1666,
              "width": 799.9166,
              "height": 68.666664
            },
            "page_number": 1,
            "page_width": 1240,
            "page_height": 1754,
            "content": "In this chapter we will address a basic encoding problem which occurs in many contexts, and whose e ffi cient dealing is frequently underestimated for the impact it may have on the total space occu- pancy and speed of the underlying application [2, 6].",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/d4eae2a4-a80e-4622-8fb3-92e877e1a8cb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c29440e280fef15ac17a2ebe59797b1d1a5528900a3dcb524959a3fbdf438989",
            "html": "<p>In this chapter we will address a basic encoding problem which occurs in many contexts, and whose e ffi cient dealing is frequently underestimated for the impact it may have on the total space occu- pancy and speed of the underlying application [2, 6].</p>",
            "markdown": "In this chapter we will address a basic encoding problem which occurs in many contexts, and whose e ffi cient dealing is frequently underestimated for the impact it may have on the total space occu- pancy and speed of the underlying application [2, 6].\n\n"
          },
          {
            "segment_id": "110511f0-4f8a-42b0-ad5f-aa67763135cf",
            "bbox": {
              "left": 242.74998,
              "top": 844.8333,
              "width": 733.25,
              "height": 68.666664
            },
            "page_number": 1,
            "page_width": 1240,
            "page_height": 1754,
            "content": "Problem. Let S = s 1 , . . . , s n be a sequence of positive integers s i , possibly repeated. The goal is to represent the integers of S as binary sequences which are self-delimiting and use few bits.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/110511f0-4f8a-42b0-ad5f-aa67763135cf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=efa1f6ece77fd45190218628b04c059a2563192414afdeb79784a530faf67eda",
            "html": "<p>Problem. Let S = s 1 , . . . , s n be a sequence of positive integers s i , possibly repeated. The goal is to represent the integers of S as binary sequences which are self-delimiting and use few bits.</p>",
            "markdown": "Problem. Let S = s 1 , . . . , s n be a sequence of positive integers s i , possibly repeated. The goal is to represent the integers of S as binary sequences which are self-delimiting and use few bits.\n\n"
          },
          {
            "segment_id": "8b9da454-633f-4e5b-bda8-2a6d63fe1240",
            "bbox": {
              "left": 219.83333,
              "top": 934.4166,
              "width": 797.8333,
              "height": 66.58333
            },
            "page_number": 1,
            "page_width": 1240,
            "page_height": 1754,
            "content": "We note that the request about s i of being positive integers can be relaxed by mapping a positive integer x to 2 x and a negative integer x to − 2 x + 1, thus turning again the set S to a set of just positive integers.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/8b9da454-633f-4e5b-bda8-2a6d63fe1240.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=46a0149cfd5a9a83e1369fcf3a2c310c204f88af7bd16d112f04d9221b735c75",
            "html": "<p>We note that the request about s i of being positive integers can be relaxed by mapping a positive integer x to 2 x and a negative integer x to − 2 x + 1, thus turning again the set S to a set of just positive integers.</p>",
            "markdown": "We note that the request about s i of being positive integers can be relaxed by mapping a positive integer x to 2 x and a negative integer x to − 2 x + 1, thus turning again the set S to a set of just positive integers.\n\n"
          }
        ],
        "chunk_length": 408
      },
      {
        "segments": [
          {
            "segment_id": "329149ff-880d-43ad-8b26-d2ab3ff8b598",
            "bbox": {
              "left": 217.74998,
              "top": 1007.3333,
              "width": 799.9166,
              "height": 285.3333
            },
            "page_number": 1,
            "page_width": 1240,
            "page_height": 1754,
            "content": "Let us comment two exemplar applications. Search engines store for each term t the list of documents (i.e. Web pages, blog posts, tweets, etc. etc.) where t occurs. Answering a user query, formulated as sequence of keywords t 1 t 2 . . . t k , then consists of finding the documents where all t i s occur. This is implemented by intersecting the document lists for these k terms. Documents are usually represented via integer IDs, which are assigned during the crawling of those documents from the Web. Storing these integers with a fixed-length binary encoding (i.e. 4 or 8 bytes) may require considerable space, and thus time for their retrieval, given that modern search engines index up to 20 billion documents. In order to reduce disk-space occupancy, as well as increase the amount of cached lists in internal memory, two kinds of compression tricks are adopted: the first one consists of sorting the document IDs in each list, and then encode each of them with the di ff erence between it and its preceding ID in the list, the so called d-gap 1 ; the second trick consists of encoding each d-gap with a variable-length sequence of bits which is short for small integers.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/329149ff-880d-43ad-8b26-d2ab3ff8b598.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b3f935cd604a65b91e29d0409dba817cc4d464ae34544e11ed3c0b979ceaf90",
            "html": "<p>Let us comment two exemplar applications. Search engines store for each term t the list of documents (i.e. Web pages, blog posts, tweets, etc. etc.) where t occurs. Answering a user query, formulated as sequence of keywords t 1 t 2 . . . t k , then consists of finding the documents where all t i s occur. This is implemented by intersecting the document lists for these k terms. Documents are usually represented via integer IDs, which are assigned during the crawling of those documents from the Web. Storing these integers with a fixed-length binary encoding (i.e. 4 or 8 bytes) may require considerable space, and thus time for their retrieval, given that modern search engines index up to 20 billion documents. In order to reduce disk-space occupancy, as well as increase the amount of cached lists in internal memory, two kinds of compression tricks are adopted: the first one consists of sorting the document IDs in each list, and then encode each of them with the di ff erence between it and its preceding ID in the list, the so called d-gap 1 ; the second trick consists of encoding each d-gap with a variable-length sequence of bits which is short for small integers.</p>",
            "markdown": "Let us comment two exemplar applications. Search engines store for each term t the list of documents (i.e. Web pages, blog posts, tweets, etc. etc.) where t occurs. Answering a user query, formulated as sequence of keywords t 1 t 2 . . . t k , then consists of finding the documents where all t i s occur. This is implemented by intersecting the document lists for these k terms. Documents are usually represented via integer IDs, which are assigned during the crawling of those documents from the Web. Storing these integers with a fixed-length binary encoding (i.e. 4 or 8 bytes) may require considerable space, and thus time for their retrieval, given that modern search engines index up to 20 billion documents. In order to reduce disk-space occupancy, as well as increase the amount of cached lists in internal memory, two kinds of compression tricks are adopted: the first one consists of sorting the document IDs in each list, and then encode each of them with the di ff erence between it and its preceding ID in the list, the so called d-gap 1 ; the second trick consists of encoding each d-gap with a variable-length sequence of bits which is short for small integers.\n\n"
          },
          {
            "segment_id": "5ec69c16-ad32-4852-95aa-61f01b9d4ffa",
            "bbox": {
              "left": 215.66666,
              "top": 1299,
              "width": 799.9166,
              "height": 93.666664
            },
            "page_number": 1,
            "page_width": 1240,
            "page_height": 1754,
            "content": "Another example of occurrence for the above problem relates to data compression. We have seen in Chapter 8 that the LZ77-compressor turns input files into sequence of triples in which the first two components are integers. Other known compressors (such as MTF, MPEG, RLE, BWT, etc.) produce as intermediate output one or more sets of integers, with smaller values most probable and",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/5ec69c16-ad32-4852-95aa-61f01b9d4ffa.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1728cd3c01ac2b1cd2f3a5d64b7fe0c075bf8e1e1788cd57a0cfac14f81041a5",
            "html": "<p>Another example of occurrence for the above problem relates to data compression. We have seen in Chapter 8 that the LZ77-compressor turns input files into sequence of triples in which the first two components are integers. Other known compressors (such as MTF, MPEG, RLE, BWT, etc.) produce as intermediate output one or more sets of integers, with smaller values most probable and</p>",
            "markdown": "Another example of occurrence for the above problem relates to data compression. We have seen in Chapter 8 that the LZ77-compressor turns input files into sequence of triples in which the first two components are integers. Other known compressors (such as MTF, MPEG, RLE, BWT, etc.) produce as intermediate output one or more sets of integers, with smaller values most probable and\n\n"
          },
          {
            "segment_id": "a3039024-e64f-4df1-b1a1-a5b885176d21",
            "bbox": {
              "left": 238.58333,
              "top": 1463.5833,
              "width": 397.8333,
              "height": 18.666666
            },
            "page_number": 1,
            "page_width": 1240,
            "page_height": 1754,
            "content": "1 Of course, the first document ID of a list is stored explicitly.",
            "segment_type": "Footnote",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/a3039024-e64f-4df1-b1a1-a5b885176d21.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=322227503bad56dcd952201108afb03024800a985fb5c6bb98e2e493a8cb74b1",
            "html": "<span class=\"footnote\">1 Of course, the first document ID of a list is stored explicitly.</span>",
            "markdown": "1 Of course, the first document ID of a list is stored explicitly.\n\n"
          },
          {
            "segment_id": "f9b45f3b-be9c-4358-800d-70f9708af2e0",
            "bbox": {
              "left": 886.49994,
              "top": 226.08333,
              "width": 129.08333,
              "height": 22.833332
            },
            "page_number": 2,
            "page_width": 1240,
            "page_height": 1754,
            "content": "Paolo Ferragina",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/f9b45f3b-be9c-4358-800d-70f9708af2e0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4ab53d8ca6dfd4bb065019da613795eecfa4ca54668b0626f63d682519f6b562",
            "html": "<p>Paolo Ferragina</p>",
            "markdown": "Paolo Ferragina\n\n"
          },
          {
            "segment_id": "01d61804-de24-4bde-a8d1-b920e470a280",
            "bbox": {
              "left": 217.74998,
              "top": 274,
              "width": 797.8333,
              "height": 45.75
            },
            "page_number": 2,
            "page_width": 1240,
            "page_height": 1754,
            "content": "larger values increasingly less probable. The final coding stage of those compressors must therefore convert these integers into a bit stream, such that the total number of bits is minimized.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/01d61804-de24-4bde-a8d1-b920e470a280.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2a1782507db7f4e64c82456ae4c58ff7ae539a7fd9621369692e1f6938202198",
            "html": "<p>larger values increasingly less probable. The final coding stage of those compressors must therefore convert these integers into a bit stream, such that the total number of bits is minimized.</p>",
            "markdown": "larger values increasingly less probable. The final coding stage of those compressors must therefore convert these integers into a bit stream, such that the total number of bits is minimized.\n\n"
          },
          {
            "segment_id": "dc42ae2a-d507-4575-8708-55a8daf9f7e0",
            "bbox": {
              "left": 215.66666,
              "top": 338.5833,
              "width": 799.9166,
              "height": 93.666664
            },
            "page_number": 2,
            "page_width": 1240,
            "page_height": 1754,
            "content": "The main question we address in this chapter is how we design a variable-length binary repre- sentation for (unbounded) integers which takes as few bit as possible and is prefix-free, namely the encoding of s i s can be concatenated to produce an output bit stream, which preserves decodability, in the sense that each individual integer encoding can be identified and decoded.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/dc42ae2a-d507-4575-8708-55a8daf9f7e0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bb2417e58e3458aa66c96c700efc962d9c876f7982ae908942aac10b3a3846a2",
            "html": "<p>The main question we address in this chapter is how we design a variable-length binary repre- sentation for (unbounded) integers which takes as few bit as possible and is prefix-free, namely the encoding of s i s can be concatenated to produce an output bit stream, which preserves decodability, in the sense that each individual integer encoding can be identified and decoded.</p>",
            "markdown": "The main question we address in this chapter is how we design a variable-length binary repre- sentation for (unbounded) integers which takes as few bit as possible and is prefix-free, namely the encoding of s i s can be concatenated to produce an output bit stream, which preserves decodability, in the sense that each individual integer encoding can be identified and decoded.\n\n"
          }
        ],
        "chunk_length": 376
      },
      {
        "segments": [
          {
            "segment_id": "87eb7447-86a0-435c-8624-b8e509d2e587",
            "bbox": {
              "left": 215.66666,
              "top": 438.5833,
              "width": 802,
              "height": 235.33333
            },
            "page_number": 2,
            "page_width": 1240,
            "page_height": 1754,
            "content": "The first and simplest idea to solve this problem is surely that one to take m = max j s j and then encode each integer s i ∈ S by using 1 + b log 2 m c bits. This fixed-size encoding is e ffi cient whenever the set S is not much spread and concentrated around the value zero. But this is a very unusual situation, in general, m s i so that many bits are wasted in the output bit stream. So why not storing each s i by using its binary encoding with 1 + b log 2 s i c bits. The subtle problem with this approach would be that this code is not self-delimiting, and in fact we cannot concatenate the binary encoding of all s i and still be able to distinguish each codeword. As an example, take S = { 1 , 2 , 3 } and the output bit sequence 11011 which would be produced by using their binary encoding. It is evident that we could derive many compatible sequence of integers from 11011 , such as S , but also { 6 , 1 , 1 } , as well as { 1 , 2 , 1 , 1 } , and several others.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/87eb7447-86a0-435c-8624-b8e509d2e587.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c0757dd5b6154b711f33edfc64156e0731864b8dfae603a552e93326d01442ed",
            "html": "<p>The first and simplest idea to solve this problem is surely that one to take m = max j s j and then encode each integer s i ∈ S by using 1 + b log 2 m c bits. This fixed-size encoding is e ffi cient whenever the set S is not much spread and concentrated around the value zero. But this is a very unusual situation, in general, m s i so that many bits are wasted in the output bit stream. So why not storing each s i by using its binary encoding with 1 + b log 2 s i c bits. The subtle problem with this approach would be that this code is not self-delimiting, and in fact we cannot concatenate the binary encoding of all s i and still be able to distinguish each codeword. As an example, take S = { 1 , 2 , 3 } and the output bit sequence 11011 which would be produced by using their binary encoding. It is evident that we could derive many compatible sequence of integers from 11011 , such as S , but also { 6 , 1 , 1 } , as well as { 1 , 2 , 1 , 1 } , and several others.</p>",
            "markdown": "The first and simplest idea to solve this problem is surely that one to take m = max j s j and then encode each integer s i ∈ S by using 1 + b log 2 m c bits. This fixed-size encoding is e ffi cient whenever the set S is not much spread and concentrated around the value zero. But this is a very unusual situation, in general, m s i so that many bits are wasted in the output bit stream. So why not storing each s i by using its binary encoding with 1 + b log 2 s i c bits. The subtle problem with this approach would be that this code is not self-delimiting, and in fact we cannot concatenate the binary encoding of all s i and still be able to distinguish each codeword. As an example, take S = { 1 , 2 , 3 } and the output bit sequence 11011 which would be produced by using their binary encoding. It is evident that we could derive many compatible sequence of integers from 11011 , such as S , but also { 6 , 1 , 1 } , as well as { 1 , 2 , 1 , 1 } , and several others.\n\n"
          },
          {
            "segment_id": "b9240fac-e9c6-48c4-9372-c35be875b40e",
            "bbox": {
              "left": 215.66666,
              "top": 682.3333,
              "width": 802,
              "height": 164.5
            },
            "page_number": 2,
            "page_width": 1240,
            "page_height": 1754,
            "content": "It is therefore clear that this simple encoding problem is challenging and deserves the attention that we dedicate in this chapter. We start by introducing one of the simplest integer codes known, the so called unary code . The unary code U ( x ) for an integer x ≥ 1 is given by a sequence of x − 1 bits set to 0, ended by a (delimiting) bit set to 1. The correctness of the condition that x , 0 is easily established. U ( x ) requires x bits, which is exponentially longer than the length Θ (log x ) of its binary code, nonetheless this code is e ffi cient for very small integers and soon becomes space ine ffi cient as x increases.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/b9240fac-e9c6-48c4-9372-c35be875b40e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=83c5b186def56c0275d7a146b938608342ca71b058cf543b1aaf96abb9719fca",
            "html": "<p>It is therefore clear that this simple encoding problem is challenging and deserves the attention that we dedicate in this chapter. We start by introducing one of the simplest integer codes known, the so called unary code . The unary code U ( x ) for an integer x ≥ 1 is given by a sequence of x − 1 bits set to 0, ended by a (delimiting) bit set to 1. The correctness of the condition that x , 0 is easily established. U ( x ) requires x bits, which is exponentially longer than the length Θ (log x ) of its binary code, nonetheless this code is e ffi cient for very small integers and soon becomes space ine ffi cient as x increases.</p>",
            "markdown": "It is therefore clear that this simple encoding problem is challenging and deserves the attention that we dedicate in this chapter. We start by introducing one of the simplest integer codes known, the so called unary code . The unary code U ( x ) for an integer x ≥ 1 is given by a sequence of x − 1 bits set to 0, ended by a (delimiting) bit set to 1. The correctness of the condition that x , 0 is easily established. U ( x ) requires x bits, which is exponentially longer than the length Θ (log x ) of its binary code, nonetheless this code is e ffi cient for very small integers and soon becomes space ine ffi cient as x increases.\n\n"
          }
        ],
        "chunk_length": 341
      },
      {
        "segments": [
          {
            "segment_id": "9db76677-122f-4f6b-88b7-b5318db8f8e6",
            "bbox": {
              "left": 215.66666,
              "top": 853.1666,
              "width": 802,
              "height": 237.41666
            },
            "page_number": 2,
            "page_width": 1240,
            "page_height": 1754,
            "content": "This statement can be made more precise by recalling a basic fact coming from the Shannon’s coding theory, which states that the ideal code length L ( c ) for a symbol c is equal to log 2 1 Pr [ c ] bits, where P [ c ] is the probability of occurrence of symbol c. This probability can be known in advance, if we have information about the source emitting c , or it can be estimated empirically by examining the occurrences of integers s i in S . The reader should be careful in recalling that, in the scenario considered in this chapter, symbols are positive integers so the ideal code for the integer x consists of log 2 1 Pr [ x ] bits. So, by solving the equation | U ( x ) | = log 2 1 Pr [ x ] with respect to P [ x ], we derive the distribution of the s i s for which the unary code is optimal. In this specific case it is P [ x ] = 2 − x . As far as e ffi ciency is concerned, the unary code needs a lot of bit shifts which are slow to be implemented in modern PCs; again another reason to favor small integers.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/9db76677-122f-4f6b-88b7-b5318db8f8e6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=400750efdea3f7109fe825f43375296cb4bbdd6463412f8055f955b4ad145aaf",
            "html": "<p>This statement can be made more precise by recalling a basic fact coming from the Shannon’s coding theory, which states that the ideal code length L ( c ) for a symbol c is equal to log 2 1 Pr [ c ] bits, where P [ c ] is the probability of occurrence of symbol c. This probability can be known in advance, if we have information about the source emitting c , or it can be estimated empirically by examining the occurrences of integers s i in S . The reader should be careful in recalling that, in the scenario considered in this chapter, symbols are positive integers so the ideal code for the integer x consists of log 2 1 Pr [ x ] bits. So, by solving the equation | U ( x ) | = log 2 1 Pr [ x ] with respect to P [ x ], we derive the distribution of the s i s for which the unary code is optimal. In this specific case it is P [ x ] = 2 − x . As far as e ffi ciency is concerned, the unary code needs a lot of bit shifts which are slow to be implemented in modern PCs; again another reason to favor small integers.</p>",
            "markdown": "This statement can be made more precise by recalling a basic fact coming from the Shannon’s coding theory, which states that the ideal code length L ( c ) for a symbol c is equal to log 2 1 Pr [ c ] bits, where P [ c ] is the probability of occurrence of symbol c. This probability can be known in advance, if we have information about the source emitting c , or it can be estimated empirically by examining the occurrences of integers s i in S . The reader should be careful in recalling that, in the scenario considered in this chapter, symbols are positive integers so the ideal code for the integer x consists of log 2 1 Pr [ x ] bits. So, by solving the equation | U ( x ) | = log 2 1 Pr [ x ] with respect to P [ x ], we derive the distribution of the s i s for which the unary code is optimal. In this specific case it is P [ x ] = 2 − x . As far as e ffi ciency is concerned, the unary code needs a lot of bit shifts which are slow to be implemented in modern PCs; again another reason to favor small integers.\n\n"
          },
          {
            "segment_id": "19f47c02-582c-4f3f-bf4f-d870e2ee0824",
            "bbox": {
              "left": 215.66666,
              "top": 1132.3333,
              "width": 799.9166,
              "height": 45.75
            },
            "page_number": 2,
            "page_width": 1240,
            "page_height": 1754,
            "content": "FACT 9.1 The unary code of a positive integer x takes x bits, and thus it is optimal for the distribution P [ x ] = 2 − x .",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/19f47c02-582c-4f3f-bf4f-d870e2ee0824.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=eae414b16d4e8b1641e72a5deffb17b5aaf76b32a6603c9b9f78d5a735354ab5",
            "html": "<p>FACT 9.1 The unary code of a positive integer x takes x bits, and thus it is optimal for the distribution P [ x ] = 2 − x .</p>",
            "markdown": "FACT 9.1 The unary code of a positive integer x takes x bits, and thus it is optimal for the distribution P [ x ] = 2 − x .\n\n"
          },
          {
            "segment_id": "fc62274c-7ef5-435b-8d7c-46c278f20d7e",
            "bbox": {
              "left": 217.74998,
              "top": 1205.25,
              "width": 799.9166,
              "height": 70.75
            },
            "page_number": 2,
            "page_width": 1240,
            "page_height": 1754,
            "content": "Using this same argument we can also deduct that the fixed-length binary encoding, which uses 1 + b log 2 m c bits, is optimal whenever integers in S are distributed uniformly within the range { 1 , 2 , . . . , m } .",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/fc62274c-7ef5-435b-8d7c-46c278f20d7e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=638eefadf9db5a43f94d479b5340f77f5b5e1b4c62a0367d9db9c6b07300f4e2",
            "html": "<p>Using this same argument we can also deduct that the fixed-length binary encoding, which uses 1 + b log 2 m c bits, is optimal whenever integers in S are distributed uniformly within the range { 1 , 2 , . . . , m } .</p>",
            "markdown": "Using this same argument we can also deduct that the fixed-length binary encoding, which uses 1 + b log 2 m c bits, is optimal whenever integers in S are distributed uniformly within the range { 1 , 2 , . . . , m } .\n\n"
          },
          {
            "segment_id": "e55db1c6-9d17-476c-807a-1297c78138cb",
            "bbox": {
              "left": 215.66666,
              "top": 1315.6666,
              "width": 799.9166,
              "height": 45.75
            },
            "page_number": 2,
            "page_width": 1240,
            "page_height": 1754,
            "content": "FACT 9.2 Given a set S of integers, of maximum value m, the fixed-length binary code repre- sents each of them in 1 + b log 2 m c bits, and thus it is optimal for the uniform distribution P [ x ] = 1 / m.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/e55db1c6-9d17-476c-807a-1297c78138cb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f9677fad9094a37cb2e6247e4a05379d8ac989487680f7762e56c9548f086f59",
            "html": "<p>FACT 9.2 Given a set S of integers, of maximum value m, the fixed-length binary code repre- sents each of them in 1 + b log 2 m c bits, and thus it is optimal for the uniform distribution P [ x ] = 1 / m.</p>",
            "markdown": "FACT 9.2 Given a set S of integers, of maximum value m, the fixed-length binary code repre- sents each of them in 1 + b log 2 m c bits, and thus it is optimal for the uniform distribution P [ x ] = 1 / m.\n\n"
          },
          {
            "segment_id": "658ecc79-c6d4-4578-b39b-cdce8a600521",
            "bbox": {
              "left": 215.66666,
              "top": 1390.6666,
              "width": 802,
              "height": 91.58333
            },
            "page_number": 2,
            "page_width": 1240,
            "page_height": 1754,
            "content": "In general integers are not uniformly distributed, and in fact variable-length binary representations must be considered which eventually improve the simple unary code. There are many proposals in the literature, each o ff ering a di ff erent trade-o ff between space occupancy of the binary-code and time e ffi ciency for its decoding. The following subsections will detail the most useful and the most",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/658ecc79-c6d4-4578-b39b-cdce8a600521.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=80bcdf31cf03654bd1a59cf927cf21730883478f3cbeceaba473c3c9708defc9",
            "html": "<p>In general integers are not uniformly distributed, and in fact variable-length binary representations must be considered which eventually improve the simple unary code. There are many proposals in the literature, each o ff ering a di ff erent trade-o ff between space occupancy of the binary-code and time e ffi ciency for its decoding. The following subsections will detail the most useful and the most</p>",
            "markdown": "In general integers are not uniformly distributed, and in fact variable-length binary representations must be considered which eventually improve the simple unary code. There are many proposals in the literature, each o ff ering a di ff erent trade-o ff between space occupancy of the binary-code and time e ffi ciency for its decoding. The following subsections will detail the most useful and the most\n\n"
          }
        ],
        "chunk_length": 407
      },
      {
        "segments": [
          {
            "segment_id": "b230675d-ad1b-4ffc-aa6b-5c77c179e248",
            "bbox": {
              "left": 215.66666,
              "top": 276.0833,
              "width": 799.9166,
              "height": 287.41666
            },
            "page_number": 3,
            "page_width": 1240,
            "page_height": 1754,
            "content": "used among these codes, starting from the most simplest ones which use fixed encoding models for the integers (such as, e.g., γ and δ codes) and, then, moving to the more involved Hu ff man and Inter- polative codes which use dynamic models that adapt themselves to the distribution of the integers in S . It is very well known that Hu ff man coding is optimal , but few times this optimality is dissected and made clear. In fact, this is crucial to explain some apparent contradictory statements about these more involved codes: such as the fact that in some cases Interpolative coding is better than Hu ff - man coding. The reason is that Hu ff man coding is optimal among the family of static prefix-free codes, namely the ones that use a fixed model for encoding each single integer of S (specifically, the Hu ff man code of an integer x is defined according to P [ x ]). Vice versa, Interpolative coding uses a dynamic model that encodes x according to the distribution of other integers in S , thus possibly adopting di ff erent codes for the occurrences of x . Depending on the distribution of the integers in S , this adaptivity might be useful and thus originate a shorter output bit stream.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/b230675d-ad1b-4ffc-aa6b-5c77c179e248.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d9a5b6b9c17ab1546023f98d70c697c4f8f60e6c73dc9a824b9e4151ee60d929",
            "html": "<p>used among these codes, starting from the most simplest ones which use fixed encoding models for the integers (such as, e.g., γ and δ codes) and, then, moving to the more involved Hu ff man and Inter- polative codes which use dynamic models that adapt themselves to the distribution of the integers in S . It is very well known that Hu ff man coding is optimal , but few times this optimality is dissected and made clear. In fact, this is crucial to explain some apparent contradictory statements about these more involved codes: such as the fact that in some cases Interpolative coding is better than Hu ff - man coding. The reason is that Hu ff man coding is optimal among the family of static prefix-free codes, namely the ones that use a fixed model for encoding each single integer of S (specifically, the Hu ff man code of an integer x is defined according to P [ x ]). Vice versa, Interpolative coding uses a dynamic model that encodes x according to the distribution of other integers in S , thus possibly adopting di ff erent codes for the occurrences of x . Depending on the distribution of the integers in S , this adaptivity might be useful and thus originate a shorter output bit stream.</p>",
            "markdown": "used among these codes, starting from the most simplest ones which use fixed encoding models for the integers (such as, e.g., γ and δ codes) and, then, moving to the more involved Hu ff man and Inter- polative codes which use dynamic models that adapt themselves to the distribution of the integers in S . It is very well known that Hu ff man coding is optimal , but few times this optimality is dissected and made clear. In fact, this is crucial to explain some apparent contradictory statements about these more involved codes: such as the fact that in some cases Interpolative coding is better than Hu ff - man coding. The reason is that Hu ff man coding is optimal among the family of static prefix-free codes, namely the ones that use a fixed model for encoding each single integer of S (specifically, the Hu ff man code of an integer x is defined according to P [ x ]). Vice versa, Interpolative coding uses a dynamic model that encodes x according to the distribution of other integers in S , thus possibly adopting di ff erent codes for the occurrences of x . Depending on the distribution of the integers in S , this adaptivity might be useful and thus originate a shorter output bit stream.\n\n"
          }
        ],
        "chunk_length": 219
      },
      {
        "segments": [
          {
            "segment_id": "dc2da225-c484-40f0-9f16-ad95349ded1e",
            "bbox": {
              "left": 217.74998,
              "top": 601.0833,
              "width": 327,
              "height": 22.833332
            },
            "page_number": 3,
            "page_width": 1240,
            "page_height": 1754,
            "content": "9.1 Elias codes: γ and δ",
            "segment_type": "Section header",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/dc2da225-c484-40f0-9f16-ad95349ded1e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ad9f9833c70e81019c19a590c96285f48b7895217452d7f5dfe51105c34b27a0",
            "html": "<h2>9.1 Elias codes: γ and δ</h2>",
            "markdown": "## 9.1 Elias codes: γ and δ\n\n"
          },
          {
            "segment_id": "07c7bf7a-9dc3-4f2c-824f-0d0591ac8e56",
            "bbox": {
              "left": 215.66666,
              "top": 651.0833,
              "width": 799.9166,
              "height": 93.666664
            },
            "page_number": 3,
            "page_width": 1240,
            "page_height": 1754,
            "content": "These are two very simple universal codes for integers which use a fixed model, they have been introduced in the ’60s by Elias [3]. The adjective ”universal” here relates to the property that the length of the code is O (log x ) for any integer x . So it is just a constant factor more than the optimal binary code B ( x ) having length 1 + b log x c , with the additional wishful property of being prefix-free.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/07c7bf7a-9dc3-4f2c-824f-0d0591ac8e56.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=54b7216a72d8f888d88644bc9bec1fe65e6a3a4d9a03359da16a381fe0dc4c23",
            "html": "<p>These are two very simple universal codes for integers which use a fixed model, they have been introduced in the ’60s by Elias [3]. The adjective ”universal” here relates to the property that the length of the code is O (log x ) for any integer x . So it is just a constant factor more than the optimal binary code B ( x ) having length 1 + b log x c , with the additional wishful property of being prefix-free.</p>",
            "markdown": "These are two very simple universal codes for integers which use a fixed model, they have been introduced in the ’60s by Elias [3]. The adjective ”universal” here relates to the property that the length of the code is O (log x ) for any integer x . So it is just a constant factor more than the optimal binary code B ( x ) having length 1 + b log x c , with the additional wishful property of being prefix-free.\n\n"
          },
          {
            "segment_id": "d270507f-7da9-43be-a0d2-f882eb43b375",
            "bbox": {
              "left": 215.66666,
              "top": 751.0833,
              "width": 799.9166,
              "height": 116.58333
            },
            "page_number": 3,
            "page_width": 1240,
            "page_height": 1754,
            "content": "γ -code represents the integer x as a binary sequence composed of two parts: a sequence of | B ( x ) |− 1 zero, followed by the binary representation B ( x ). The initial sequence of zeros is delimited by the 1 which starts the binary representation B ( x ). So γ ( x ) can be decoded easily: count the consecutive number of zeros up to the first 1, say they are c ; then, fetch the following c + 1 bits (included the 1), and interpret the sequence as the integer x .",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/d270507f-7da9-43be-a0d2-f882eb43b375.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ec0717d848f04afd3f7fe1932e5f3bc487623d3ca16d070d981a847bd82d20ac",
            "html": "<p>γ -code represents the integer x as a binary sequence composed of two parts: a sequence of | B ( x ) |− 1 zero, followed by the binary representation B ( x ). The initial sequence of zeros is delimited by the 1 which starts the binary representation B ( x ). So γ ( x ) can be decoded easily: count the consecutive number of zeros up to the first 1, say they are c ; then, fetch the following c + 1 bits (included the 1), and interpret the sequence as the integer x .</p>",
            "markdown": "γ -code represents the integer x as a binary sequence composed of two parts: a sequence of | B ( x ) |− 1 zero, followed by the binary representation B ( x ). The initial sequence of zeros is delimited by the 1 which starts the binary representation B ( x ). So γ ( x ) can be decoded easily: count the consecutive number of zeros up to the first 1, say they are c ; then, fetch the following c + 1 bits (included the 1), and interpret the sequence as the integer x .\n\n"
          },
          {
            "segment_id": "4ebf5eed-4ea4-48c9-afca-b6333db91c72",
            "bbox": {
              "left": 496.91666,
              "top": 913.5833,
              "width": 235.33333,
              "height": 77
            },
            "page_number": 3,
            "page_width": 1240,
            "page_height": 1754,
            "content": "Y(9)= 0001001 U(4) Bin（9",
            "segment_type": "Picture",
            "ocr": [
              {
                "bbox": {
                  "left": 3,
                  "top": 4,
                  "width": 92,
                  "height": 33
                },
                "text": "Y(9)=",
                "confidence": 0.9003951
              },
              {
                "bbox": {
                  "left": 104,
                  "top": 4,
                  "width": 126,
                  "height": 30
                },
                "text": "0001001",
                "confidence": 0.9937956
              },
              {
                "bbox": {
                  "left": 101,
                  "top": 52,
                  "width": 45,
                  "height": 25
                },
                "text": "U(4)",
                "confidence": 0.8219395
              },
              {
                "bbox": {
                  "left": 185,
                  "top": 53,
                  "width": 49,
                  "height": 23
                },
                "text": "Bin（9",
                "confidence": 0.89439476
              }
            ],
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/4ebf5eed-4ea4-48c9-afca-b6333db91c72.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=99fea39e03001c099939c0caf89d055822f1a38a08771210a21ac7ce71f7e4f3",
            "html": "<img src=\"https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/4ebf5eed-4ea4-48c9-afca-b6333db91c72.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=99fea39e03001c099939c0caf89d055822f1a38a08771210a21ac7ce71f7e4f3\" />",
            "markdown": "![Image](https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/4ebf5eed-4ea4-48c9-afca-b6333db91c72.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=99fea39e03001c099939c0caf89d055822f1a38a08771210a21ac7ce71f7e4f3)"
          },
          {
            "segment_id": "1a16121f-03c0-4132-8590-1f3005cec8bc",
            "bbox": {
              "left": 459.41666,
              "top": 1013.5833,
              "width": 314.5,
              "height": 20.75
            },
            "page_number": 3,
            "page_width": 1240,
            "page_height": 1754,
            "content": "FIGURE 9.1: Representation for γ (9).",
            "segment_type": "Caption",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/1a16121f-03c0-4132-8590-1f3005cec8bc.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b9ff99bb9d160e8aa2bef73ee63621a3070a427280a1d0ce2b1202991d0475ae",
            "html": "<span class=\"caption\">FIGURE 9.1: Representation for γ (9).</span>",
            "markdown": "FIGURE 9.1: Representation for γ (9).\n\n"
          },
          {
            "segment_id": "6ab7296b-5d97-455a-be0a-a83671d0adfb",
            "bbox": {
              "left": 217.74998,
              "top": 1084.4166,
              "width": 799.9166,
              "height": 72.83333
            },
            "page_number": 3,
            "page_width": 1240,
            "page_height": 1754,
            "content": "The γ -code requires 2 | B ( x ) |− 1 bits, which is 2(1 + b log 2 x c ) − 1 = 2 b log 2 x c + 1. In fact, the γ -code of the integer 9 needs 2 b log 2 9 c + 1 = 7 bits. From Shannon’s condition on ideal codes, we derive that the γ -code is optimal whenever the distribution of the values follows the formula Pr [ x ] ≈ 1 2 x 2 .",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/6ab7296b-5d97-455a-be0a-a83671d0adfb.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8405f8f33870e87f74596a8bb7e2fa23169de88330b8269137a726ddaf9f1ce8",
            "html": "<p>The γ -code requires 2 | B ( x ) |− 1 bits, which is 2(1 + b log 2 x c ) − 1 = 2 b log 2 x c + 1. In fact, the γ -code of the integer 9 needs 2 b log 2 9 c + 1 = 7 bits. From Shannon’s condition on ideal codes, we derive that the γ -code is optimal whenever the distribution of the values follows the formula Pr [ x ] ≈ 1 2 x 2 .</p>",
            "markdown": "The γ -code requires 2 | B ( x ) |− 1 bits, which is 2(1 + b log 2 x c ) − 1 = 2 b log 2 x c + 1. In fact, the γ -code of the integer 9 needs 2 b log 2 9 c + 1 = 7 bits. From Shannon’s condition on ideal codes, we derive that the γ -code is optimal whenever the distribution of the values follows the formula Pr [ x ] ≈ 1 2 x 2 .\n\n"
          },
          {
            "segment_id": "32dfa3e9-26af-4c7b-8f31-a2a59076230b",
            "bbox": {
              "left": 215.66666,
              "top": 1194.8333,
              "width": 802,
              "height": 45.75
            },
            "page_number": 3,
            "page_width": 1240,
            "page_height": 1754,
            "content": "FACT 9.3 The γ -code of a positive integer x takes 2 b log 2 x c + 1 bits, and thus it is optimal for the distribution P [ x ] ≈ 1 2 x 2 , and it is a factor of 2 from the length of the optimal binary code.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/32dfa3e9-26af-4c7b-8f31-a2a59076230b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dc13c84713748106d639922248ddf5f6266632a70e4c319fb96d0244fd06dbd9",
            "html": "<p>FACT 9.3 The γ -code of a positive integer x takes 2 b log 2 x c + 1 bits, and thus it is optimal for the distribution P [ x ] ≈ 1 2 x 2 , and it is a factor of 2 from the length of the optimal binary code.</p>",
            "markdown": "FACT 9.3 The γ -code of a positive integer x takes 2 b log 2 x c + 1 bits, and thus it is optimal for the distribution P [ x ] ≈ 1 2 x 2 , and it is a factor of 2 from the length of the optimal binary code.\n\n"
          },
          {
            "segment_id": "f2b48eea-02a3-48bc-9e02-7d2e3a7b82e6",
            "bbox": {
              "left": 217.74998,
              "top": 1269.8333,
              "width": 802,
              "height": 162.41666
            },
            "page_number": 3,
            "page_width": 1240,
            "page_height": 1754,
            "content": "The ine ffi ciency in the γ -code resides in the unary coding of the length | B ( x ) | which is really costly as x becomes larger and larger. In order to mitigate this problem, Elias introduced the δ -code, which applies the γ -code in place of the unary code. So δ ( x ) consists of two parts: the first encodes γ ( | B ( x ) | ), the second encodes B ( x ). Notice that, since we are using the γ -code for B ( x )’s length, the first and the second parts do not share any bits; moreover we observe that γ is applied to | B ( x ) | which guarantees to be a number greater than zero. The decoding of δ ( x ) is easy, first we decode γ ( | B ( x ) | ) and then fetch B ( x ), so getting the value x in binary.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/f2b48eea-02a3-48bc-9e02-7d2e3a7b82e6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e8773ef0598342a5a3c63b87d14c965454b8ce0915a33c7811c7748f78dd8df4",
            "html": "<p>The ine ffi ciency in the γ -code resides in the unary coding of the length | B ( x ) | which is really costly as x becomes larger and larger. In order to mitigate this problem, Elias introduced the δ -code, which applies the γ -code in place of the unary code. So δ ( x ) consists of two parts: the first encodes γ ( | B ( x ) | ), the second encodes B ( x ). Notice that, since we are using the γ -code for B ( x )’s length, the first and the second parts do not share any bits; moreover we observe that γ is applied to | B ( x ) | which guarantees to be a number greater than zero. The decoding of δ ( x ) is easy, first we decode γ ( | B ( x ) | ) and then fetch B ( x ), so getting the value x in binary.</p>",
            "markdown": "The ine ffi ciency in the γ -code resides in the unary coding of the length | B ( x ) | which is really costly as x becomes larger and larger. In order to mitigate this problem, Elias introduced the δ -code, which applies the γ -code in place of the unary code. So δ ( x ) consists of two parts: the first encodes γ ( | B ( x ) | ), the second encodes B ( x ). Notice that, since we are using the γ -code for B ( x )’s length, the first and the second parts do not share any bits; moreover we observe that γ is applied to | B ( x ) | which guarantees to be a number greater than zero. The decoding of δ ( x ) is easy, first we decode γ ( | B ( x ) | ) and then fetch B ( x ), so getting the value x in binary.\n\n"
          }
        ],
        "chunk_length": 499
      },
      {
        "segments": [
          {
            "segment_id": "905899bd-318e-441e-95f6-ae6997930261",
            "bbox": {
              "left": 219.83333,
              "top": 1436.5,
              "width": 795.75,
              "height": 45.75
            },
            "page_number": 3,
            "page_width": 1240,
            "page_height": 1754,
            "content": "As far as the length in bits of δ ( x ) is concerned, we observe that it is (1 + 2 b log 2 | B ( x ) |c ) + | B ( x ) | ≈ 1 + log x + 2 log log x . This encoding is therefore a factor 1 + o (1) from the optimal binary code,",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/905899bd-318e-441e-95f6-ae6997930261.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2bbe596a3e5b0bf3e4ac17492adf4050ad3d2104802b28f36e3342d432dbc723",
            "html": "<p>As far as the length in bits of δ ( x ) is concerned, we observe that it is (1 + 2 b log 2 | B ( x ) |c ) + | B ( x ) | ≈ 1 + log x + 2 log log x . This encoding is therefore a factor 1 + o (1) from the optimal binary code,</p>",
            "markdown": "As far as the length in bits of δ ( x ) is concerned, we observe that it is (1 + 2 b log 2 | B ( x ) |c ) + | B ( x ) | ≈ 1 + log x + 2 log log x . This encoding is therefore a factor 1 + o (1) from the optimal binary code,\n\n"
          },
          {
            "segment_id": "68720f20-73e2-489d-8c83-4ca79c7f5006",
            "bbox": {
              "left": 455.24997,
              "top": 265.66666,
              "width": 324.91666,
              "height": 104.08333
            },
            "page_number": 4,
            "page_width": 1240,
            "page_height": 1754,
            "content": "8（14）=001001110 U(3)Bin（4）Bin（14）",
            "segment_type": "Picture",
            "ocr": [
              {
                "bbox": {
                  "left": 3,
                  "top": 2,
                  "width": 285,
                  "height": 27
                },
                "text": "8（14）=001001110",
                "confidence": 0.9462279
              },
              {
                "bbox": {
                  "left": 94,
                  "top": 58,
                  "width": 228,
                  "height": 22
                },
                "text": "U(3)Bin（4）Bin（14）",
                "confidence": 0.86608434
              }
            ],
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/68720f20-73e2-489d-8c83-4ca79c7f5006.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=eb5c691e29b20ccd7ec942a337b606eeeb7b546a3d08dc46bf59b86f636e0a78",
            "html": "<img src=\"https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/68720f20-73e2-489d-8c83-4ca79c7f5006.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=eb5c691e29b20ccd7ec942a337b606eeeb7b546a3d08dc46bf59b86f636e0a78\" />",
            "markdown": "![Image](https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/68720f20-73e2-489d-8c83-4ca79c7f5006.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=eb5c691e29b20ccd7ec942a337b606eeeb7b546a3d08dc46bf59b86f636e0a78)"
          },
          {
            "segment_id": "fb1f8df8-2d06-497f-8cd6-720726bad031",
            "bbox": {
              "left": 457.3333,
              "top": 371.91666,
              "width": 320.75,
              "height": 20.75
            },
            "page_number": 4,
            "page_width": 1240,
            "page_height": 1754,
            "content": "FIGURE 9.2: Representation for δ (14).",
            "segment_type": "Caption",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/fb1f8df8-2d06-497f-8cd6-720726bad031.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e1a8d17884a46d339da0ca0f9404a79735e6521f58c1b55502960492795f7d8a",
            "html": "<span class=\"caption\">FIGURE 9.2: Representation for δ (14).</span>",
            "markdown": "FIGURE 9.2: Representation for δ (14).\n\n"
          },
          {
            "segment_id": "e2495200-f9da-4d07-911b-7d9834522705",
            "bbox": {
              "left": 215.66666,
              "top": 440.66666,
              "width": 166.58333,
              "height": 20.75
            },
            "page_number": 4,
            "page_width": 1240,
            "page_height": 1754,
            "content": "hence it is universal.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/e2495200-f9da-4d07-911b-7d9834522705.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=dfaa7cf2a5aad8de4469aa2aca1a19c6297adde76515be668e67260923bf2e33",
            "html": "<p>hence it is universal.</p>",
            "markdown": "hence it is universal.\n\n"
          },
          {
            "segment_id": "233e630f-63c8-4026-9f16-e52fcb266970",
            "bbox": {
              "left": 215.66666,
              "top": 505.24997,
              "width": 799.9166,
              "height": 70.75
            },
            "page_number": 4,
            "page_width": 1240,
            "page_height": 1754,
            "content": "FACT 9.4 The δ -code of a positive integer x takes about 1 + log 2 x + 2 log 2 log 2 x bits, and thus it is optimal for the distribution P [ x ] ≈ 1 2 x (log x ) 2 , and it is a factor of 1 + o (1) from the length of the optimal binary code.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/233e630f-63c8-4026-9f16-e52fcb266970.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f87d677cb96f3b8b61c10e9b1ffa5828b76bf316e1e8eb1eb905d8c904960dbe",
            "html": "<p>FACT 9.4 The δ -code of a positive integer x takes about 1 + log 2 x + 2 log 2 log 2 x bits, and thus it is optimal for the distribution P [ x ] ≈ 1 2 x (log x ) 2 , and it is a factor of 1 + o (1) from the length of the optimal binary code.</p>",
            "markdown": "FACT 9.4 The δ -code of a positive integer x takes about 1 + log 2 x + 2 log 2 log 2 x bits, and thus it is optimal for the distribution P [ x ] ≈ 1 2 x (log x ) 2 , and it is a factor of 1 + o (1) from the length of the optimal binary code.\n\n"
          },
          {
            "segment_id": "18824bba-c02d-48c5-9973-d46332104a85",
            "bbox": {
              "left": 217.74998,
              "top": 605.25,
              "width": 799.9166,
              "height": 93.666664
            },
            "page_number": 4,
            "page_width": 1240,
            "page_height": 1754,
            "content": "In conclusion, γ - and δ -codes are universal and pretty e ffi cient whenever the set S is concentrated around zero; however, it must be noted that these two codes need a lot of bit shifts to be decoded and this may be slow if numbers are larger and thus encoded in many bits. The following codes trade space e ffi ciency for decoding speed and, in fact, they are preferred in practical applications.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/18824bba-c02d-48c5-9973-d46332104a85.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0f143babec17e4501f77b99f533dc4f16ea6b695a8d68afa2cec5cb7c1e453bd",
            "html": "<p>In conclusion, γ - and δ -codes are universal and pretty e ffi cient whenever the set S is concentrated around zero; however, it must be noted that these two codes need a lot of bit shifts to be decoded and this may be slow if numbers are larger and thus encoded in many bits. The following codes trade space e ffi ciency for decoding speed and, in fact, they are preferred in practical applications.</p>",
            "markdown": "In conclusion, γ - and δ -codes are universal and pretty e ffi cient whenever the set S is concentrated around zero; however, it must be noted that these two codes need a lot of bit shifts to be decoded and this may be slow if numbers are larger and thus encoded in many bits. The following codes trade space e ffi ciency for decoding speed and, in fact, they are preferred in practical applications.\n\n"
          }
        ],
        "chunk_length": 214
      },
      {
        "segments": [
          {
            "segment_id": "6beaab26-9928-4ccc-82cd-a887a56cd12a",
            "bbox": {
              "left": 215.66666,
              "top": 736.5,
              "width": 197.83333,
              "height": 24.916666
            },
            "page_number": 4,
            "page_width": 1240,
            "page_height": 1754,
            "content": "9.2 Rice code",
            "segment_type": "Section header",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/6beaab26-9928-4ccc-82cd-a887a56cd12a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b48babf8ffd802f1ade7360b705f65d9285cfe5e20e84b0692587c137ce17744",
            "html": "<h2>9.2 Rice code</h2>",
            "markdown": "## 9.2 Rice code\n\n"
          },
          {
            "segment_id": "730cab6e-3649-461c-ab83-4747ea07cbdf",
            "bbox": {
              "left": 215.66666,
              "top": 794.8333,
              "width": 802,
              "height": 237.41666
            },
            "page_number": 4,
            "page_width": 1240,
            "page_height": 1754,
            "content": "There are situations in which integers are concentrated around some value, di ff erent from zero; here, Rice coding becomes advantageous both in compression ratio and decoding speed. Its special feature is to be a parametric code , namely one which depends from a positive integer k , which may be fixed according to the distribution of the integers in the set S . The Rice code R k ( x ) of an integer x , given the parameter k , consists of two parts: the quotient q = b ( x − 1) 2 k c and the remainder r = x − 2 k q − 1. The quotient is stored in unary using q + 1 bits, the remainder r is stored in binary using k bits. So the quotient is encoded in variable length, whereas the remainder is encoded in fixed length. The closer 2 k is to the value of x , the shorter is the representation of q , and thus the faster is its decoding. For this reason, k is chosen in such a way that 2 k is concentrated around the mean of S ’s elements.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/730cab6e-3649-461c-ab83-4747ea07cbdf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=edb839eee544a5e104fe356d91331c2becd499dfdbed978f6b8b0f0ca74a0839",
            "html": "<p>There are situations in which integers are concentrated around some value, di ff erent from zero; here, Rice coding becomes advantageous both in compression ratio and decoding speed. Its special feature is to be a parametric code , namely one which depends from a positive integer k , which may be fixed according to the distribution of the integers in the set S . The Rice code R k ( x ) of an integer x , given the parameter k , consists of two parts: the quotient q = b ( x − 1) 2 k c and the remainder r = x − 2 k q − 1. The quotient is stored in unary using q + 1 bits, the remainder r is stored in binary using k bits. So the quotient is encoded in variable length, whereas the remainder is encoded in fixed length. The closer 2 k is to the value of x , the shorter is the representation of q , and thus the faster is its decoding. For this reason, k is chosen in such a way that 2 k is concentrated around the mean of S ’s elements.</p>",
            "markdown": "There are situations in which integers are concentrated around some value, di ff erent from zero; here, Rice coding becomes advantageous both in compression ratio and decoding speed. Its special feature is to be a parametric code , namely one which depends from a positive integer k , which may be fixed according to the distribution of the integers in the set S . The Rice code R k ( x ) of an integer x , given the parameter k , consists of two parts: the quotient q = b ( x − 1) 2 k c and the remainder r = x − 2 k q − 1. The quotient is stored in unary using q + 1 bits, the remainder r is stored in binary using k bits. So the quotient is encoded in variable length, whereas the remainder is encoded in fixed length. The closer 2 k is to the value of x , the shorter is the representation of q , and thus the faster is its decoding. For this reason, k is chosen in such a way that 2 k is concentrated around the mean of S ’s elements.\n\n"
          },
          {
            "segment_id": "7cd526c6-edea-4982-a037-d34b5a179af1",
            "bbox": {
              "left": 467.74997,
              "top": 1074,
              "width": 297.8333,
              "height": 102
            },
            "page_number": 4,
            "page_width": 1240,
            "page_height": 1754,
            "content": "R(83)= 0000010010 U(6) Bin(2)",
            "segment_type": "Picture",
            "ocr": [
              {
                "bbox": {
                  "left": 3,
                  "top": 5,
                  "width": 109,
                  "height": 27
                },
                "text": "R(83)=",
                "confidence": 0.85771626
              },
              {
                "bbox": {
                  "left": 111,
                  "top": 6,
                  "width": 168,
                  "height": 23
                },
                "text": "0000010010",
                "confidence": 0.9944084
              },
              {
                "bbox": {
                  "left": 129,
                  "top": 70,
                  "width": 58,
                  "height": 29
                },
                "text": "U(6)",
                "confidence": 0.96526194
              },
              {
                "bbox": {
                  "left": 219,
                  "top": 71,
                  "width": 77,
                  "height": 27
                },
                "text": "Bin(2)",
                "confidence": 0.8769469
              }
            ],
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/7cd526c6-edea-4982-a037-d34b5a179af1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e83111bf8dcaabadb0d73925391ea3f941db898e3ba2f8ff0f5144d8894a56de",
            "html": "<img src=\"https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/7cd526c6-edea-4982-a037-d34b5a179af1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e83111bf8dcaabadb0d73925391ea3f941db898e3ba2f8ff0f5144d8894a56de\" />",
            "markdown": "![Image](https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/7cd526c6-edea-4982-a037-d34b5a179af1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e83111bf8dcaabadb0d73925391ea3f941db898e3ba2f8ff0f5144d8894a56de)"
          },
          {
            "segment_id": "73a6b4e6-ccee-48f5-9261-38989664f3d2",
            "bbox": {
              "left": 453.16666,
              "top": 1196.9166,
              "width": 327,
              "height": 22.833332
            },
            "page_number": 4,
            "page_width": 1240,
            "page_height": 1754,
            "content": "FIGURE 9.3: Representation for R 4 (83)",
            "segment_type": "Caption",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/73a6b4e6-ccee-48f5-9261-38989664f3d2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=07974029b1305b9645934c614bf87473ca9f4fd421719c0152ad2160c4767587",
            "html": "<span class=\"caption\">FIGURE 9.3: Representation for R 4 (83)</span>",
            "markdown": "FIGURE 9.3: Representation for R 4 (83)\n\n"
          },
          {
            "segment_id": "5e870f08-e01b-4623-90bf-bb234598b3a4",
            "bbox": {
              "left": 217.74998,
              "top": 1274,
              "width": 799.9166,
              "height": 93.666664
            },
            "page_number": 4,
            "page_width": 1240,
            "page_height": 1754,
            "content": "The bit length of R k ( x ) is q + k + 1. This code is a particular case of the Golomb Code [6], it is optimal when the values to be encoded follow a geometric distribution with parameter p , namely Pr [ x ] = (1 − p ) x − 1 p . In this case, if 2 k ' ln (2) p ' 0 . 69 mean ( S ), the Rice and all Golomb codes generate an optimal prefix-code [6].",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/5e870f08-e01b-4623-90bf-bb234598b3a4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b677d8204d15c479392911fd6049d1c8d8b0d62d6227d56a2484484987bcd71",
            "html": "<p>The bit length of R k ( x ) is q + k + 1. This code is a particular case of the Golomb Code [6], it is optimal when the values to be encoded follow a geometric distribution with parameter p , namely Pr [ x ] = (1 − p ) x − 1 p . In this case, if 2 k ' ln (2) p ' 0 . 69 mean ( S ), the Rice and all Golomb codes generate an optimal prefix-code [6].</p>",
            "markdown": "The bit length of R k ( x ) is q + k + 1. This code is a particular case of the Golomb Code [6], it is optimal when the values to be encoded follow a geometric distribution with parameter p , namely Pr [ x ] = (1 − p ) x − 1 p . In this case, if 2 k ' ln (2) p ' 0 . 69 mean ( S ), the Rice and all Golomb codes generate an optimal prefix-code [6].\n\n"
          },
          {
            "segment_id": "cde83c57-42c7-44f5-b785-f23009215085",
            "bbox": {
              "left": 215.66666,
              "top": 1403.1666,
              "width": 802,
              "height": 52
            },
            "page_number": 4,
            "page_width": 1240,
            "page_height": 1754,
            "content": "FACT 9.5 The Rice code of a positive integer x takes b ( x − 1) 2 k c + 1 + k bits, and it is optimal for the geometric distribution Pr [ x ] = (1 − p ) x − 1 p.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/cde83c57-42c7-44f5-b785-f23009215085.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=008c043a26e9967321ac0d1ab080ce08ec6464ddcfbe93c0209b74026bf5f75d",
            "html": "<p>FACT 9.5 The Rice code of a positive integer x takes b ( x − 1) 2 k c + 1 + k bits, and it is optimal for the geometric distribution Pr [ x ] = (1 − p ) x − 1 p.</p>",
            "markdown": "FACT 9.5 The Rice code of a positive integer x takes b ( x − 1) 2 k c + 1 + k bits, and it is optimal for the geometric distribution Pr [ x ] = (1 − p ) x − 1 p.\n\n"
          }
        ],
        "chunk_length": 337
      },
      {
        "segments": [
          {
            "segment_id": "3b9b252f-feec-42a5-b651-264bdf325cb7",
            "bbox": {
              "left": 215.66666,
              "top": 271.91666,
              "width": 333.25,
              "height": 24.916666
            },
            "page_number": 5,
            "page_width": 1240,
            "page_height": 1754,
            "content": "9.3 PForDelta encoding",
            "segment_type": "Section header",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/3b9b252f-feec-42a5-b651-264bdf325cb7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ecc2340a5e819b35fe9dcf7ca1daf89bd5e569c35b522edbcc92dcd9424a679a",
            "html": "<h2>9.3 PForDelta encoding</h2>",
            "markdown": "## 9.3 PForDelta encoding\n\n"
          },
          {
            "segment_id": "34dbf758-0ced-4074-98ae-bb162dcbc2df",
            "bbox": {
              "left": 215.66666,
              "top": 326.0833,
              "width": 802,
              "height": 212.41666
            },
            "page_number": 5,
            "page_width": 1240,
            "page_height": 1754,
            "content": "This method for compressing integers supports extremely fast decompression and achieves a small size in the compressed output whenever S ’s values follow a gaussian distribution. In detail, let us assume that most of S ’s values fall in an interval [ base , base + 2 b − 1], we translate the values in the new interval [0 , 2 b − 1] in order to encode them in b bits; the other values outside this range are called exceptions and they are represented in the compressed list with an escape symbol and also encoded explicitly in a separate list using a fixed-size representation of w bits (namely, a whole memory word). The good property of this code is that all values in S are encoded in fixed length, either b bits or w + b bits, so that they can be decoded very fast and possibly in parallel by packing few of them in a memory word.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/34dbf758-0ced-4074-98ae-bb162dcbc2df.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6847239261a15383b33a1db254b9d423e0c9c75fa2c546441e4f1808b4ed361c",
            "html": "<p>This method for compressing integers supports extremely fast decompression and achieves a small size in the compressed output whenever S ’s values follow a gaussian distribution. In detail, let us assume that most of S ’s values fall in an interval [ base , base + 2 b − 1], we translate the values in the new interval [0 , 2 b − 1] in order to encode them in b bits; the other values outside this range are called exceptions and they are represented in the compressed list with an escape symbol and also encoded explicitly in a separate list using a fixed-size representation of w bits (namely, a whole memory word). The good property of this code is that all values in S are encoded in fixed length, either b bits or w + b bits, so that they can be decoded very fast and possibly in parallel by packing few of them in a memory word.</p>",
            "markdown": "This method for compressing integers supports extremely fast decompression and achieves a small size in the compressed output whenever S ’s values follow a gaussian distribution. In detail, let us assume that most of S ’s values fall in an interval [ base , base + 2 b − 1], we translate the values in the new interval [0 , 2 b − 1] in order to encode them in b bits; the other values outside this range are called exceptions and they are represented in the compressed list with an escape symbol and also encoded explicitly in a separate list using a fixed-size representation of w bits (namely, a whole memory word). The good property of this code is that all values in S are encoded in fixed length, either b bits or w + b bits, so that they can be decoded very fast and possibly in parallel by packing few of them in a memory word.\n\n"
          },
          {
            "segment_id": "4a157f6b-3e87-4f40-993c-c9988254d391",
            "bbox": {
              "left": 394.8333,
              "top": 580.25,
              "width": 435.3333,
              "height": 137.41666
            },
            "page_number": 5,
            "page_width": 1240,
            "page_height": 1754,
            "content": "",
            "segment_type": "Picture",
            "ocr": [
              {
                "bbox": {
                  "left": 29,
                  "top": 4,
                  "width": 386,
                  "height": 26
                },
                "text": "S=1210162645222",
                "confidence": 0.9944852
              },
              {
                "bbox": {
                  "left": 213,
                  "top": 34,
                  "width": 34,
                  "height": 42
                },
                "text": "↓",
                "confidence": 0.21338691
              },
              {
                "bbox": {
                  "left": 8,
                  "top": 95,
                  "width": 302,
                  "height": 32
                },
                "text": "12《《2645《2",
                "confidence": 0.96133745
              },
              {
                "bbox": {
                  "left": 295,
                  "top": 94,
                  "width": 140,
                  "height": 36
                },
                "text": "101622",
                "confidence": 0.99807745
              }
            ],
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/4a157f6b-3e87-4f40-993c-c9988254d391.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6c622de2932b7cb71c9ca0a8a8d9616f83cc64d4e1bcd93c8c6dcf136165ceee",
            "html": "<img src=\"https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/4a157f6b-3e87-4f40-993c-c9988254d391.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6c622de2932b7cb71c9ca0a8a8d9616f83cc64d4e1bcd93c8c6dcf136165ceee\" />",
            "markdown": "![Image](https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/4a157f6b-3e87-4f40-993c-c9988254d391.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6c622de2932b7cb71c9ca0a8a8d9616f83cc64d4e1bcd93c8c6dcf136165ceee)"
          },
          {
            "segment_id": "de0d5042-4e94-41fa-aaae-86e82796e2e0",
            "bbox": {
              "left": 215.66666,
              "top": 751.0833,
              "width": 799.9166,
              "height": 68.666664
            },
            "page_number": 5,
            "page_width": 1240,
            "page_height": 1754,
            "content": "FIGURE 9.4: An example for PForDelta, with b = 3 and base = 0. The values in the range (blue box) are encoded using 3 bits, while the out-of-range values (green box) are encoded separately and an escape symbol is used as a place-holder.",
            "segment_type": "Caption",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/de0d5042-4e94-41fa-aaae-86e82796e2e0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=72e6e8cae6a540e23f24a89743c54de7c5859c132798ba120d4885bd73497061",
            "html": "<span class=\"caption\">FIGURE 9.4: An example for PForDelta, with b = 3 and base = 0. The values in the range (blue box) are encoded using 3 bits, while the out-of-range values (green box) are encoded separately and an escape symbol is used as a place-holder.</span>",
            "markdown": "FIGURE 9.4: An example for PForDelta, with b = 3 and base = 0. The values in the range (blue box) are encoded using 3 bits, while the out-of-range values (green box) are encoded separately and an escape symbol is used as a place-holder.\n\n"
          },
          {
            "segment_id": "0591be24-3a9e-43f6-8f58-7e0e46247fee",
            "bbox": {
              "left": 215.66666,
              "top": 907.3333,
              "width": 802,
              "height": 70.75
            },
            "page_number": 5,
            "page_width": 1240,
            "page_height": 1754,
            "content": "FACT 9.6 The PForDelta code of a positive integer x takes either b bits or b + w bits, depending on the fact that x ∈ [ base , base + 2 b − 1] or not, respectively. This code is proper for a gaussian distribution of the integers to be encoded.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/0591be24-3a9e-43f6-8f58-7e0e46247fee.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7bcd3b788e826c9b1f2ced37baa4a25048dfbf2ed2c09f3f9444b19fc32a4017",
            "html": "<p>FACT 9.6 The PForDelta code of a positive integer x takes either b bits or b + w bits, depending on the fact that x ∈ [ base , base + 2 b − 1] or not, respectively. This code is proper for a gaussian distribution of the integers to be encoded.</p>",
            "markdown": "FACT 9.6 The PForDelta code of a positive integer x takes either b bits or b + w bits, depending on the fact that x ∈ [ base , base + 2 b − 1] or not, respectively. This code is proper for a gaussian distribution of the integers to be encoded.\n\n"
          },
          {
            "segment_id": "d22faf7a-3ce0-4f70-94b9-6e4538642891",
            "bbox": {
              "left": 236.49998,
              "top": 1003.1666,
              "width": 529.0833,
              "height": 20.75
            },
            "page_number": 5,
            "page_width": 1240,
            "page_height": 1754,
            "content": "The design of a PForDelta code needs to deal with two problems:",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/d22faf7a-3ce0-4f70-94b9-6e4538642891.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3b0e2f298642f1ce34b55373f744c91ca0b2e437ebda5fbae0fda242138be648",
            "html": "<p>The design of a PForDelta code needs to deal with two problems:</p>",
            "markdown": "The design of a PForDelta code needs to deal with two problems:\n\n"
          },
          {
            "segment_id": "0cdf1314-28cf-42b1-9d84-f53fcab66126",
            "bbox": {
              "left": 246.91666,
              "top": 1038.5833,
              "width": 731.1666,
              "height": 133.25
            },
            "page_number": 5,
            "page_width": 1240,
            "page_height": 1754,
            "content": "• How to choose b: in the original work, b was chosen such that about the 90% of the values in S are smaller than 2 b . An alternative solution is to trade between space wasting (choosing a greater b ) or space saving (more exceptions, smaller b ). In [5] it has been proposed a method based on dynamic programming, that computes the optimal b for a desired compression ratio. In particular, it returns the largest b that minimizes the number of exceptions and, thus, ensures a faster decompression.",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/0cdf1314-28cf-42b1-9d84-f53fcab66126.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=05428317cba15df11d087053437a50f530d0f4720507367babe78a0e12ec9959",
            "html": "<ul><li>How to choose b: in the original work, b was chosen such that about the 90% of the values in S are smaller than 2 b . An alternative solution is to trade between space wasting (choosing a greater b ) or space saving (more exceptions, smaller b ). In [5] it has been proposed a method based on dynamic programming, that computes the optimal b for a desired compression ratio. In particular, it returns the largest b that minimizes the number of exceptions and, thus, ensures a faster decompression.</li></ul>",
            "markdown": "- How to choose b: in the original work, b was chosen such that about the 90% of the values in S are smaller than 2 b . An alternative solution is to trade between space wasting (choosing a greater b ) or space saving (more exceptions, smaller b ). In [5] it has been proposed a method based on dynamic programming, that computes the optimal b for a desired compression ratio. In particular, it returns the largest b that minimizes the number of exceptions and, thus, ensures a faster decompression.\n\n"
          },
          {
            "segment_id": "70971358-9acd-4c3c-9675-0e1b90643976",
            "bbox": {
              "left": 246.91666,
              "top": 1186.5,
              "width": 724.9166,
              "height": 47.833332
            },
            "page_number": 5,
            "page_width": 1240,
            "page_height": 1754,
            "content": "• How to encode the escape character: a possible solution is to assign a special bit se- quence for it, thus leaving 2 b − 1 configurations for the values in the range.",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/70971358-9acd-4c3c-9675-0e1b90643976.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=603c9f645ae72f13f37f8db79b8da7cb6d19118dc96a4eda861021a1b394e70c",
            "html": "<ul><li>How to encode the escape character: a possible solution is to assign a special bit se- quence for it, thus leaving 2 b − 1 configurations for the values in the range.</li></ul>",
            "markdown": "- How to encode the escape character: a possible solution is to assign a special bit se- quence for it, thus leaving 2 b − 1 configurations for the values in the range.\n\n"
          },
          {
            "segment_id": "b2e6f756-fb42-424e-9dc4-44f7b3a219b7",
            "bbox": {
              "left": 215.66666,
              "top": 1246.9166,
              "width": 804.0833,
              "height": 162.41666
            },
            "page_number": 5,
            "page_width": 1240,
            "page_height": 1754,
            "content": "In conclusion PForDelta encodes blocks of k consecutive integers so that they can be stored in a multi-word (i.e. multiple of 32 bits). Those integers that do not fit within b bits are treated as exceptions and stored in another array that is merged to the original sequence of codewords during the decoding phase (thus paying w + b bits). PForDelta is surprisingly succinct in storing the integers which occur in search-engine indexes; but the actual positive feature which makes it very appealing for developers is that it is incredibly fast in decoding because of the word-alignment and the fact that there exist implementations which do not use if -statements, and thus avoid branch mispredictions.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/b2e6f756-fb42-424e-9dc4-44f7b3a219b7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bc780a2ddea0bcb8ddede7e6a646a5a306e99f0e7fcc05fd382ce654c682d807",
            "html": "<p>In conclusion PForDelta encodes blocks of k consecutive integers so that they can be stored in a multi-word (i.e. multiple of 32 bits). Those integers that do not fit within b bits are treated as exceptions and stored in another array that is merged to the original sequence of codewords during the decoding phase (thus paying w + b bits). PForDelta is surprisingly succinct in storing the integers which occur in search-engine indexes; but the actual positive feature which makes it very appealing for developers is that it is incredibly fast in decoding because of the word-alignment and the fact that there exist implementations which do not use if -statements, and thus avoid branch mispredictions.</p>",
            "markdown": "In conclusion PForDelta encodes blocks of k consecutive integers so that they can be stored in a multi-word (i.e. multiple of 32 bits). Those integers that do not fit within b bits are treated as exceptions and stored in another array that is merged to the original sequence of codewords during the decoding phase (thus paying w + b bits). PForDelta is surprisingly succinct in storing the integers which occur in search-engine indexes; but the actual positive feature which makes it very appealing for developers is that it is incredibly fast in decoding because of the word-alignment and the fact that there exist implementations which do not use if -statements, and thus avoid branch mispredictions.\n\n"
          }
        ],
        "chunk_length": 509
      },
      {
        "segments": [
          {
            "segment_id": "afe328ca-7c09-40ec-8540-9af235a892cf",
            "bbox": {
              "left": 217.74998,
              "top": 1449,
              "width": 602,
              "height": 24.916666
            },
            "page_number": 5,
            "page_width": 1240,
            "page_height": 1754,
            "content": "9.4 Variable-byte codes and ( s , c ) -dense codes",
            "segment_type": "Section header",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/afe328ca-7c09-40ec-8540-9af235a892cf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5cda96b1bbd4654cedcdb8d0f633a0c678122f3a6c596fcd29e005edb567ed51",
            "html": "<h2>9.4 Variable-byte codes and ( s , c ) -dense codes</h2>",
            "markdown": "## 9.4 Variable-byte codes and ( s , c ) -dense codes\n\n"
          },
          {
            "segment_id": "3bee2068-e4f6-4cb4-98f5-5dd6887d73ca",
            "bbox": {
              "left": 215.66666,
              "top": 307.3333,
              "width": 799.9166,
              "height": 189.5
            },
            "page_number": 6,
            "page_width": 1240,
            "page_height": 1754,
            "content": "Another class of codes which trade speed by succinctness is the one of the so called ( s , c ) -dense codes . Their simplest instantiation, originally used in the Altavista search engine, is the variable- byte code which uses a sequence of bytes to represent an integer x . This byte-aligned coding is useful to achieve a significant decoding speed. It is constructed as follows: the binary representation B ( x ) is partitioned into groups of 7-bits, possibly the first group is padded by appending 0s to its front; a flag-bit is appended to each group to indicate whether that group is the last one (bit set to 0) or not (bit set to 1) of the representation. The decoding is simple, we scan the byte sequence until we find a byte whose value is smaller than 128.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/3bee2068-e4f6-4cb4-98f5-5dd6887d73ca.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d67cfe6c7ad680d50d6c0639b8723a2460a669943fc48889a4cecd03e0328dfc",
            "html": "<p>Another class of codes which trade speed by succinctness is the one of the so called ( s , c ) -dense codes . Their simplest instantiation, originally used in the Altavista search engine, is the variable- byte code which uses a sequence of bytes to represent an integer x . This byte-aligned coding is useful to achieve a significant decoding speed. It is constructed as follows: the binary representation B ( x ) is partitioned into groups of 7-bits, possibly the first group is padded by appending 0s to its front; a flag-bit is appended to each group to indicate whether that group is the last one (bit set to 0) or not (bit set to 1) of the representation. The decoding is simple, we scan the byte sequence until we find a byte whose value is smaller than 128.</p>",
            "markdown": "Another class of codes which trade speed by succinctness is the one of the so called ( s , c ) -dense codes . Their simplest instantiation, originally used in the Altavista search engine, is the variable- byte code which uses a sequence of bytes to represent an integer x . This byte-aligned coding is useful to achieve a significant decoding speed. It is constructed as follows: the binary representation B ( x ) is partitioned into groups of 7-bits, possibly the first group is padded by appending 0s to its front; a flag-bit is appended to each group to indicate whether that group is the last one (bit set to 0) or not (bit set to 1) of the representation. The decoding is simple, we scan the byte sequence until we find a byte whose value is smaller than 128.\n\n"
          },
          {
            "segment_id": "04202981-deb2-4fb7-86b7-9fe2ce5501e7",
            "bbox": {
              "left": 392.75,
              "top": 536.5,
              "width": 441.5833,
              "height": 124.916664
            },
            "page_number": 6,
            "page_width": 1240,
            "page_height": 1754,
            "content": "2 10000000000000000 100001001000000000000000",
            "segment_type": "Picture",
            "ocr": [
              {
                "bbox": {
                  "left": 34,
                  "top": 1,
                  "width": 380,
                  "height": 55
                },
                "text": "2 10000000000000000",
                "confidence": 0.8780815
              },
              {
                "bbox": {
                  "left": 9,
                  "top": 98,
                  "width": 429,
                  "height": 23
                },
                "text": "100001001000000000000000",
                "confidence": 0.9925062
              }
            ],
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/04202981-deb2-4fb7-86b7-9fe2ce5501e7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8be0d71d5f8073c79843d1088791611088bdc41865982721a5d59eb96b3b122b",
            "html": "<img src=\"https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/04202981-deb2-4fb7-86b7-9fe2ce5501e7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8be0d71d5f8073c79843d1088791611088bdc41865982721a5d59eb96b3b122b\" />",
            "markdown": "![Image](https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/04202981-deb2-4fb7-86b7-9fe2ce5501e7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8be0d71d5f8073c79843d1088791611088bdc41865982721a5d59eb96b3b122b)"
          },
          {
            "segment_id": "91197f3e-c723-4410-b687-393f97f68838",
            "bbox": {
              "left": 369.8333,
              "top": 682.3333,
              "width": 491.5833,
              "height": 20.75
            },
            "page_number": 6,
            "page_width": 1240,
            "page_height": 1754,
            "content": "FIGURE 9.5: Variable-byte representation for the integer 2 16",
            "segment_type": "Caption",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/91197f3e-c723-4410-b687-393f97f68838.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=57e84160ff1d7bc902013d9f7559e9157b90db0f11994fe0694d555de19b495e",
            "html": "<span class=\"caption\">FIGURE 9.5: Variable-byte representation for the integer 2 16</span>",
            "markdown": "FIGURE 9.5: Variable-byte representation for the integer 2 16\n\n"
          },
          {
            "segment_id": "11560eee-a94c-4578-8090-4bfd85b52cd5",
            "bbox": {
              "left": 217.74998,
              "top": 755.25,
              "width": 799.9166,
              "height": 45.75
            },
            "page_number": 6,
            "page_width": 1240,
            "page_height": 1754,
            "content": "The minimum amount of bits necessary to encode x is 8, and on average 4 bits are wasted because of the padding. Hence this method is proper for large values x .",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/11560eee-a94c-4578-8090-4bfd85b52cd5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=198749c562192f4898bc69af066830f8a458be2480710c4d76e2067cd639a5f4",
            "html": "<p>The minimum amount of bits necessary to encode x is 8, and on average 4 bits are wasted because of the padding. Hence this method is proper for large values x .</p>",
            "markdown": "The minimum amount of bits necessary to encode x is 8, and on average 4 bits are wasted because of the padding. Hence this method is proper for large values x .\n\n"
          },
          {
            "segment_id": "0dca5712-54a1-465f-8af4-66669551457b",
            "bbox": {
              "left": 215.66666,
              "top": 834.4166,
              "width": 802,
              "height": 54.083332
            },
            "page_number": 6,
            "page_width": 1240,
            "page_height": 1754,
            "content": "FACT 9.7 The Variable-byte code of a positive integer x takes d | B ( x ) | 7 e bytes. This code is optimal for the distribution P [ x ] ≈ 7 √ 1 / x.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/0dca5712-54a1-465f-8af4-66669551457b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f94ceec45275b7e0a220ac1e9379fe514525916572bf1410378536dc02c978ff",
            "html": "<p>FACT 9.7 The Variable-byte code of a positive integer x takes d | B ( x ) | 7 e bytes. This code is optimal for the distribution P [ x ] ≈ 7 √ 1 / x.</p>",
            "markdown": "FACT 9.7 The Variable-byte code of a positive integer x takes d | B ( x ) | 7 e bytes. This code is optimal for the distribution P [ x ] ≈ 7 √ 1 / x.\n\n"
          },
          {
            "segment_id": "d0abfd71-2faa-4c8b-b794-328248fd84ef",
            "bbox": {
              "left": 217.74998,
              "top": 915.6666,
              "width": 799.9166,
              "height": 139.5
            },
            "page_number": 6,
            "page_width": 1240,
            "page_height": 1754,
            "content": "The use of the status bit induces a subtle issue, in that it partitions the configurations of each byte into two sets: the values smaller than 128 (status bit equal to 0, called stoppers ) and the values larger or equal than 128 (status bit equal to 1, called continuers ). For the sake of presentation we denote the cardinalities of the two sets by s and c , respectively. Of course, we have that s + c = 256 because they represent all possibly byte-configurations. During the decoding phase, whenever we encounter a continuer byte, we go on reading, otherwise we stop.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/d0abfd71-2faa-4c8b-b794-328248fd84ef.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d45986d77e085ef4d356352bdd8b02cf42e18201809853349d0d57f1be6fc693",
            "html": "<p>The use of the status bit induces a subtle issue, in that it partitions the configurations of each byte into two sets: the values smaller than 128 (status bit equal to 0, called stoppers ) and the values larger or equal than 128 (status bit equal to 1, called continuers ). For the sake of presentation we denote the cardinalities of the two sets by s and c , respectively. Of course, we have that s + c = 256 because they represent all possibly byte-configurations. During the decoding phase, whenever we encounter a continuer byte, we go on reading, otherwise we stop.</p>",
            "markdown": "The use of the status bit induces a subtle issue, in that it partitions the configurations of each byte into two sets: the values smaller than 128 (status bit equal to 0, called stoppers ) and the values larger or equal than 128 (status bit equal to 1, called continuers ). For the sake of presentation we denote the cardinalities of the two sets by s and c , respectively. Of course, we have that s + c = 256 because they represent all possibly byte-configurations. During the decoding phase, whenever we encounter a continuer byte, we go on reading, otherwise we stop.\n\n"
          },
          {
            "segment_id": "91a27ec6-a4db-4a6b-ae61-105ebc6114e7",
            "bbox": {
              "left": 217.74998,
              "top": 1059.4166,
              "width": 799.9166,
              "height": 141.58333
            },
            "page_number": 6,
            "page_width": 1240,
            "page_height": 1754,
            "content": "The drawback of this approach is that for any x < 128 we use always 1 byte. Therefore if the set S consists of very-small integers, we are wasting bits. Vice versa, if S consists of integers larger than 128, then it could be better to enlarge the set of stoppers. Indeed nobody prevents us to change the distribution of stoppers and continuers, provided that s + c = 256. Let us analyze how changes the number of integers which can be encoded with one of more bytes, depending on the choice of s and c :",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/91a27ec6-a4db-4a6b-ae61-105ebc6114e7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4944897036b9bcb96bbdd8644cb4cf6a836b3fe162e042aeccbd631accde8446",
            "html": "<p>The drawback of this approach is that for any x < 128 we use always 1 byte. Therefore if the set S consists of very-small integers, we are wasting bits. Vice versa, if S consists of integers larger than 128, then it could be better to enlarge the set of stoppers. Indeed nobody prevents us to change the distribution of stoppers and continuers, provided that s + c = 256. Let us analyze how changes the number of integers which can be encoded with one of more bytes, depending on the choice of s and c :</p>",
            "markdown": "The drawback of this approach is that for any x < 128 we use always 1 byte. Therefore if the set S consists of very-small integers, we are wasting bits. Vice versa, if S consists of integers larger than 128, then it could be better to enlarge the set of stoppers. Indeed nobody prevents us to change the distribution of stoppers and continuers, provided that s + c = 256. Let us analyze how changes the number of integers which can be encoded with one of more bytes, depending on the choice of s and c :\n\n"
          },
          {
            "segment_id": "e8a19e92-c806-4988-9a08-be5f371d257f",
            "bbox": {
              "left": 246.91666,
              "top": 1219.8333,
              "width": 345.75,
              "height": 20.75
            },
            "page_number": 6,
            "page_width": 1240,
            "page_height": 1754,
            "content": "• One byte can encode the first s integers;",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/e8a19e92-c806-4988-9a08-be5f371d257f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=be17ac7c3462f2311d9bdac27745b1cb3a6591ee3dea6da5bf2a8f76e28826a9",
            "html": "<ul><li>One byte can encode the first s integers;</li></ul>",
            "markdown": "- One byte can encode the first s integers;\n\n"
          },
          {
            "segment_id": "40ab200e-909b-4d2a-b3c2-2cb6c35c233f",
            "bbox": {
              "left": 246.91666,
              "top": 1244.8333,
              "width": 418.66666,
              "height": 22.833332
            },
            "page_number": 6,
            "page_width": 1240,
            "page_height": 1754,
            "content": "• Two bytes can encode the subsequent sc integers.",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/40ab200e-909b-4d2a-b3c2-2cb6c35c233f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=10f2d9d83ff11bf228921fba804e1a596060f2f549a45665c0d2664b9eff83fe",
            "html": "<ul><li>Two bytes can encode the subsequent sc integers.</li></ul>",
            "markdown": "- Two bytes can encode the subsequent sc integers.\n\n"
          },
          {
            "segment_id": "9affb911-90d4-48c2-86a1-d82388b87e5d",
            "bbox": {
              "left": 246.91666,
              "top": 1274,
              "width": 439.49997,
              "height": 22.833332
            },
            "page_number": 6,
            "page_width": 1240,
            "page_height": 1754,
            "content": "• Three bytes can encode the subsequent sc 2 integers.",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/9affb911-90d4-48c2-86a1-d82388b87e5d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bf0fe4df21a23897d8fca55d73604b50ca74b4bc22085e4c65d7059b379dc5bd",
            "html": "<ul><li>Three bytes can encode the subsequent sc 2 integers.</li></ul>",
            "markdown": "- Three bytes can encode the subsequent sc 2 integers.\n\n"
          },
          {
            "segment_id": "19caea7a-a62f-4288-8ce4-d447ab360b66",
            "bbox": {
              "left": 246.91666,
              "top": 1301.0833,
              "width": 295.75,
              "height": 22.833332
            },
            "page_number": 6,
            "page_width": 1240,
            "page_height": 1754,
            "content": "• k bytes can encode sc k − 1 integers.",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/19caea7a-a62f-4288-8ce4-d447ab360b66.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0c464a03e170429b6eda113cdb1becb3c5d465e3c9e56cba2ce3f0ac143d370a",
            "html": "<ul><li>k bytes can encode sc k − 1 integers.</li></ul>",
            "markdown": "- k bytes can encode sc k − 1 integers.\n\n"
          }
        ],
        "chunk_length": 469
      },
      {
        "segments": [
          {
            "segment_id": "40782449-9c5f-4cd1-9901-dd275efbd3da",
            "bbox": {
              "left": 215.66666,
              "top": 1342.75,
              "width": 802,
              "height": 91.58333
            },
            "page_number": 6,
            "page_width": 1240,
            "page_height": 1754,
            "content": "It is evident, at this point, that the choice of s and c depends on the distribution of the integers to be encoded. For example, assume that we want to encode the values 1 , . . . , 15 and they have decreasing frequency; moreover, assume that the word-length is 3 bits (instead of 8 bits), so that s + c = 2 3 = 8 (instead of 256).",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/40782449-9c5f-4cd1-9901-dd275efbd3da.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f45395c92d994a59e9973a8e24e907361801b48084838e90a43092b898bb0fd4",
            "html": "<p>It is evident, at this point, that the choice of s and c depends on the distribution of the integers to be encoded. For example, assume that we want to encode the values 1 , . . . , 15 and they have decreasing frequency; moreover, assume that the word-length is 3 bits (instead of 8 bits), so that s + c = 2 3 = 8 (instead of 256).</p>",
            "markdown": "It is evident, at this point, that the choice of s and c depends on the distribution of the integers to be encoded. For example, assume that we want to encode the values 1 , . . . , 15 and they have decreasing frequency; moreover, assume that the word-length is 3 bits (instead of 8 bits), so that s + c = 2 3 = 8 (instead of 256).\n\n"
          },
          {
            "segment_id": "335a980f-2f90-4e4d-afe7-898c7b4452be",
            "bbox": {
              "left": 217.74998,
              "top": 1438.5833,
              "width": 799.9166,
              "height": 45.75
            },
            "page_number": 6,
            "page_width": 1240,
            "page_height": 1754,
            "content": "Table 9.1 shows how the integers smaller than 15 are encoded by using two di ff erent choices for s and c : in the first case, the number of stoppers and continuers is 4; in the second case, the number of",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/335a980f-2f90-4e4d-afe7-898c7b4452be.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=aca9b153966c5f5e21ba1855a9602e31d6bf2bca538e040b93b8e44a68d84160",
            "html": "<p>Table 9.1 shows how the integers smaller than 15 are encoded by using two di ff erent choices for s and c : in the first case, the number of stoppers and continuers is 4; in the second case, the number of</p>",
            "markdown": "Table 9.1 shows how the integers smaller than 15 are encoded by using two di ff erent choices for s and c : in the first case, the number of stoppers and continuers is 4; in the second case, the number of\n\n"
          },
          {
            "segment_id": "73f2d76a-bead-40d1-a4b5-5ea85d27dba2",
            "bbox": {
              "left": 217.74998,
              "top": 228.16666,
              "width": 137.41666,
              "height": 20.75
            },
            "page_number": 7,
            "page_width": 1240,
            "page_height": 1754,
            "content": "Integer encoding",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/73f2d76a-bead-40d1-a4b5-5ea85d27dba2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=aa5e0693470f2c3466d268a27c684ba09d9ebab31f9a3615723b1249b3749435",
            "html": "<p>Integer encoding</p>",
            "markdown": "Integer encoding\n\n"
          },
          {
            "segment_id": "2e390393-bb08-444b-b60f-7baf8e8c17ae",
            "bbox": {
              "left": 311.5,
              "top": 267.75,
              "width": 614.5,
              "height": 408.24997
            },
            "page_number": 7,
            "page_width": 1240,
            "page_height": 1754,
            "content": "Values S=C= 4 S= 6,c=2 1 001 001 2 010 010 3 011 011 4 100000 100 5 100001 101 6 100010 110000 7 100011 110001 8 101000 110010 9 101001 110011 10 101010 110100 11 101011 110101 12 110000 111000 13 110001 111001 14 110010 111010 15 110011 111011 TABLE.9.1 Example of（s.c）-encoding usingtwo different values for",
            "segment_type": "Table",
            "ocr": [
              {
                "bbox": {
                  "left": 167,
                  "top": 1,
                  "width": 57,
                  "height": 21
                },
                "text": "Values",
                "confidence": 0.99353933
              },
              {
                "bbox": {
                  "left": 246,
                  "top": 4,
                  "width": 65,
                  "height": 17
                },
                "text": "S=C=",
                "confidence": 0.85994256
              },
              {
                "bbox": {
                  "left": 311,
                  "top": 5,
                  "width": 12,
                  "height": 14
                },
                "text": "4",
                "confidence": 0.99802244
              },
              {
                "bbox": {
                  "left": 348,
                  "top": 8,
                  "width": 26,
                  "height": 12
                },
                "text": "S=",
                "confidence": 0.93215716
              },
              {
                "bbox": {
                  "left": 380,
                  "top": 4,
                  "width": 65,
                  "height": 18
                },
                "text": "6,c=2",
                "confidence": 0.88246983
              },
              {
                "bbox": {
                  "left": 169,
                  "top": 28,
                  "width": 12,
                  "height": 18
                },
                "text": "1",
                "confidence": 0.9308216
              },
              {
                "bbox": {
                  "left": 245,
                  "top": 27,
                  "width": 35,
                  "height": 19
                },
                "text": "001",
                "confidence": 0.9980416
              },
              {
                "bbox": {
                  "left": 345,
                  "top": 27,
                  "width": 35,
                  "height": 19
                },
                "text": "001",
                "confidence": 0.99730635
              },
              {
                "bbox": {
                  "left": 168,
                  "top": 52,
                  "width": 13,
                  "height": 18
                },
                "text": "2",
                "confidence": 0.99902666
              },
              {
                "bbox": {
                  "left": 245,
                  "top": 51,
                  "width": 35,
                  "height": 19
                },
                "text": "010",
                "confidence": 0.9985196
              },
              {
                "bbox": {
                  "left": 345,
                  "top": 51,
                  "width": 35,
                  "height": 19
                },
                "text": "010",
                "confidence": 0.99817246
              },
              {
                "bbox": {
                  "left": 168,
                  "top": 76,
                  "width": 12,
                  "height": 17
                },
                "text": "3",
                "confidence": 0.99729025
              },
              {
                "bbox": {
                  "left": 245,
                  "top": 76,
                  "width": 34,
                  "height": 18
                },
                "text": "011",
                "confidence": 0.99590975
              },
              {
                "bbox": {
                  "left": 345,
                  "top": 76,
                  "width": 35,
                  "height": 18
                },
                "text": "011",
                "confidence": 0.99429053
              },
              {
                "bbox": {
                  "left": 168,
                  "top": 100,
                  "width": 13,
                  "height": 17
                },
                "text": "4",
                "confidence": 0.9988166
              },
              {
                "bbox": {
                  "left": 247,
                  "top": 100,
                  "width": 67,
                  "height": 17
                },
                "text": "100000",
                "confidence": 0.9985614
              },
              {
                "bbox": {
                  "left": 346,
                  "top": 99,
                  "width": 34,
                  "height": 19
                },
                "text": "100",
                "confidence": 0.9988777
              },
              {
                "bbox": {
                  "left": 168,
                  "top": 126,
                  "width": 13,
                  "height": 16
                },
                "text": "5",
                "confidence": 0.9980876
              },
              {
                "bbox": {
                  "left": 247,
                  "top": 125,
                  "width": 66,
                  "height": 17
                },
                "text": "100001",
                "confidence": 0.9980293
              },
              {
                "bbox": {
                  "left": 347,
                  "top": 126,
                  "width": 32,
                  "height": 15
                },
                "text": "101",
                "confidence": 0.9967143
              },
              {
                "bbox": {
                  "left": 168,
                  "top": 150,
                  "width": 13,
                  "height": 17
                },
                "text": "6",
                "confidence": 0.9991924
              },
              {
                "bbox": {
                  "left": 247,
                  "top": 148,
                  "width": 67,
                  "height": 17
                },
                "text": "100010",
                "confidence": 0.9985309
              },
              {
                "bbox": {
                  "left": 346,
                  "top": 148,
                  "width": 67,
                  "height": 17
                },
                "text": "110000",
                "confidence": 0.9985463
              },
              {
                "bbox": {
                  "left": 168,
                  "top": 174,
                  "width": 13,
                  "height": 16
                },
                "text": "7",
                "confidence": 0.9978532
              },
              {
                "bbox": {
                  "left": 247,
                  "top": 173,
                  "width": 66,
                  "height": 17
                },
                "text": "100011",
                "confidence": 0.9971519
              },
              {
                "bbox": {
                  "left": 347,
                  "top": 173,
                  "width": 67,
                  "height": 17
                },
                "text": "110001",
                "confidence": 0.99798036
              },
              {
                "bbox": {
                  "left": 168,
                  "top": 197,
                  "width": 13,
                  "height": 18
                },
                "text": "8",
                "confidence": 0.9982279
              },
              {
                "bbox": {
                  "left": 247,
                  "top": 197,
                  "width": 67,
                  "height": 17
                },
                "text": "101000",
                "confidence": 0.99821776
              },
              {
                "bbox": {
                  "left": 346,
                  "top": 197,
                  "width": 67,
                  "height": 17
                },
                "text": "110010",
                "confidence": 0.99865586
              },
              {
                "bbox": {
                  "left": 167,
                  "top": 223,
                  "width": 14,
                  "height": 16
                },
                "text": "9",
                "confidence": 0.99750596
              },
              {
                "bbox": {
                  "left": 247,
                  "top": 222,
                  "width": 66,
                  "height": 17
                },
                "text": "101001",
                "confidence": 0.9978893
              },
              {
                "bbox": {
                  "left": 347,
                  "top": 222,
                  "width": 67,
                  "height": 17
                },
                "text": "110011",
                "confidence": 0.9972465
              },
              {
                "bbox": {
                  "left": 167,
                  "top": 245,
                  "width": 26,
                  "height": 20
                },
                "text": "10",
                "confidence": 0.9981166
              },
              {
                "bbox": {
                  "left": 247,
                  "top": 246,
                  "width": 67,
                  "height": 17
                },
                "text": "101010",
                "confidence": 0.9983383
              },
              {
                "bbox": {
                  "left": 346,
                  "top": 246,
                  "width": 68,
                  "height": 17
                },
                "text": "110100",
                "confidence": 0.99888664
              },
              {
                "bbox": {
                  "left": 168,
                  "top": 270,
                  "width": 24,
                  "height": 18
                },
                "text": "11",
                "confidence": 0.98866963
              },
              {
                "bbox": {
                  "left": 247,
                  "top": 270,
                  "width": 66,
                  "height": 17
                },
                "text": "101011",
                "confidence": 0.9972348
              },
              {
                "bbox": {
                  "left": 347,
                  "top": 270,
                  "width": 66,
                  "height": 17
                },
                "text": "110101",
                "confidence": 0.9978263
              },
              {
                "bbox": {
                  "left": 168,
                  "top": 294,
                  "width": 24,
                  "height": 17
                },
                "text": "12",
                "confidence": 0.9945276
              },
              {
                "bbox": {
                  "left": 247,
                  "top": 293,
                  "width": 66,
                  "height": 17
                },
                "text": "110000",
                "confidence": 0.99854416
              },
              {
                "bbox": {
                  "left": 346,
                  "top": 293,
                  "width": 68,
                  "height": 17
                },
                "text": "111000",
                "confidence": 0.9985764
              },
              {
                "bbox": {
                  "left": 168,
                  "top": 318,
                  "width": 24,
                  "height": 18
                },
                "text": "13",
                "confidence": 0.997389
              },
              {
                "bbox": {
                  "left": 247,
                  "top": 318,
                  "width": 66,
                  "height": 17
                },
                "text": "110001",
                "confidence": 0.9982085
              },
              {
                "bbox": {
                  "left": 347,
                  "top": 318,
                  "width": 66,
                  "height": 17
                },
                "text": "111001",
                "confidence": 0.9972215
              },
              {
                "bbox": {
                  "left": 167,
                  "top": 341,
                  "width": 26,
                  "height": 20
                },
                "text": "14",
                "confidence": 0.9974579
              },
              {
                "bbox": {
                  "left": 247,
                  "top": 342,
                  "width": 67,
                  "height": 17
                },
                "text": "110010",
                "confidence": 0.9982365
              },
              {
                "bbox": {
                  "left": 347,
                  "top": 343,
                  "width": 67,
                  "height": 17
                },
                "text": "111010",
                "confidence": 0.99690217
              },
              {
                "bbox": {
                  "left": 168,
                  "top": 367,
                  "width": 24,
                  "height": 18
                },
                "text": "15",
                "confidence": 0.995938
              },
              {
                "bbox": {
                  "left": 248,
                  "top": 368,
                  "width": 64,
                  "height": 14
                },
                "text": "110011",
                "confidence": 0.9833595
              },
              {
                "bbox": {
                  "left": 346,
                  "top": 366,
                  "width": 67,
                  "height": 16
                },
                "text": "111011",
                "confidence": 0.9904146
              },
              {
                "bbox": {
                  "left": 3,
                  "top": 392,
                  "width": 96,
                  "height": 13
                },
                "text": "TABLE.9.1",
                "confidence": 0.9371718
              },
              {
                "bbox": {
                  "left": 121,
                  "top": 392,
                  "width": 425,
                  "height": 13
                },
                "text": "Example of（s.c）-encoding usingtwo different values for",
                "confidence": 0.9101426
              }
            ],
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/2e390393-bb08-444b-b60f-7baf8e8c17ae.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a7432ffbb87545abed305af1cdbec9010a4b0a08883b6d514192e48dd00f995e",
            "html": "<table>\n  <caption>TABLE 9.1 Example of (<em>s</em>, <em>c</em>)-encoding using two different values for <em>s</em> and <em>c</em>.</caption>\n  <thead>\n    <tr>\n      <th>Values</th>\n      <th><em>s</em> = <em>c</em> = 4</th>\n      <th><em>s</em> = 6, <em>c</em> = 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>001</td>\n      <td>001</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>010</td>\n      <td>010</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>011</td>\n      <td>011</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>100 000</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>100 001</td>\n      <td>101</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>100 010</td>\n      <td>110 000</td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td>100 011</td>\n      <td>110 001</td>\n    </tr>\n    <tr>\n      <td>8</td>\n      <td>101 000</td>\n      <td>110 010</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td>101 001</td>\n      <td>110 011</td>\n    </tr>\n    <tr>\n      <td>10</td>\n      <td>101 010</td>\n      <td>110 100</td>\n    </tr>\n    <tr>\n      <td>11</td>\n      <td>101 011</td>\n      <td>110 101</td>\n    </tr>\n    <tr>\n      <td>12</td>\n      <td>110 000</td>\n      <td>111 000</td>\n    </tr>\n    <tr>\n      <td>13</td>\n      <td>110 001</td>\n      <td>111 001</td>\n    </tr>\n    <tr>\n      <td>14</td>\n      <td>110 010</td>\n      <td>111 010</td>\n    </tr>\n    <tr>\n      <td>15</td>\n      <td>110 011</td>\n      <td>111 011</td>\n    </tr>\n  </tbody>\n</table>",
            "markdown": "| Values | <em>s</em> = <em>c</em> = 4 | <em>s</em> = 6, <em>c</em> = 2 |\n| --- | --- | --- |\n| 1 | 001 | 001 |\n| 2 | 010 | 010 |\n| 3 | 011 | 011 |\n| 4 | 100 000 | 100 |\n| 5 | 100 001 | 101 |\n| 6 | 100 010 | 110 000 |\n| 7 | 100 011 | 110 001 |\n| 8 | 101 000 | 110 010 |\n| 9 | 101 001 | 110 011 |\n| 10 | 101 010 | 110 100 |\n| 11 | 101 011 | 110 101 |\n| 12 | 110 000 | 111 000 |\n| 13 | 110 001 | 111 001 |\n| 14 | 110 010 | 111 010 |\n| 15 | 110 011 | 111 011 |\n"
          },
          {
            "segment_id": "443dd052-1dce-41d0-aed6-be9cd35d0ddf",
            "bbox": {
              "left": 217.74998,
              "top": 744.8333,
              "width": 799.9166,
              "height": 116.58333
            },
            "page_number": 7,
            "page_width": 1240,
            "page_height": 1754,
            "content": "stoppers is 6 and the number of continuers is 2. Notice that in both cases we correctly have s + c = 8. We point out that in both cases, two words of 3 bits ( i.e. 6 bits) are enough to encode all the 15 integers; but, while in the former case we can encode only the first four values with one word, in the latter the values encoded using one word are six. This can lead to a more compressed sequence according to the skewness of the distribution of { 1 , . . . , 15 } .",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/443dd052-1dce-41d0-aed6-be9cd35d0ddf.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e386657dbe9492d38383fb02225f33409176b3d32ede996448ad0db93aaeb192",
            "html": "<p>stoppers is 6 and the number of continuers is 2. Notice that in both cases we correctly have s + c = 8. We point out that in both cases, two words of 3 bits ( i.e. 6 bits) are enough to encode all the 15 integers; but, while in the former case we can encode only the first four values with one word, in the latter the values encoded using one word are six. This can lead to a more compressed sequence according to the skewness of the distribution of { 1 , . . . , 15 } .</p>",
            "markdown": "stoppers is 6 and the number of continuers is 2. Notice that in both cases we correctly have s + c = 8. We point out that in both cases, two words of 3 bits ( i.e. 6 bits) are enough to encode all the 15 integers; but, while in the former case we can encode only the first four values with one word, in the latter the values encoded using one word are six. This can lead to a more compressed sequence according to the skewness of the distribution of { 1 , . . . , 15 } .\n\n"
          }
        ],
        "chunk_length": 313
      },
      {
        "segments": [
          {
            "segment_id": "9ba699bc-736f-40d7-95b2-3b56ac1c879c",
            "bbox": {
              "left": 217.74998,
              "top": 869.8333,
              "width": 799.9166,
              "height": 283.25
            },
            "page_number": 7,
            "page_width": 1240,
            "page_height": 1754,
            "content": "This shows, surprisingly, that can be advantageous to adapt the number of stoppers and continuers to the probability distribution of S ’s values. Figure 9.6 further details this observation, by showing the compression ratio as a function of s , for two di ff erent distributions ZIFF and AP , the former is the classic Zipfian distribution (i.e. P [ x ] ≈ 1 / x ), the latter is the distribution derived from the words of the Associated-Press collection (i.e. P [ x ] is the frequency of occurrence of the x -th most frequent word). When s is very small, the number of high frequency values encoded with one byte is also very small, but in this case c is large and therefore many words with low frequency will be encoded with few bytes. As s grows, we gain compression in more frequent values and loose compression in less frequent values. At some later point, the compression lost in the last values is larger than the compression gained in values at the beginning, and therefore the global compression ratio worsens. That point give us the optimal s value. In [1] it is shown that the minimum is unique and the authors propose an e ffi cient algorithm to calculate that optimal s .",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/9ba699bc-736f-40d7-95b2-3b56ac1c879c.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=24723fc2ec20abb9ce78313a1ea4e8b860654a070431b88f4cf1c865f65152ed",
            "html": "<p>This shows, surprisingly, that can be advantageous to adapt the number of stoppers and continuers to the probability distribution of S ’s values. Figure 9.6 further details this observation, by showing the compression ratio as a function of s , for two di ff erent distributions ZIFF and AP , the former is the classic Zipfian distribution (i.e. P [ x ] ≈ 1 / x ), the latter is the distribution derived from the words of the Associated-Press collection (i.e. P [ x ] is the frequency of occurrence of the x -th most frequent word). When s is very small, the number of high frequency values encoded with one byte is also very small, but in this case c is large and therefore many words with low frequency will be encoded with few bytes. As s grows, we gain compression in more frequent values and loose compression in less frequent values. At some later point, the compression lost in the last values is larger than the compression gained in values at the beginning, and therefore the global compression ratio worsens. That point give us the optimal s value. In [1] it is shown that the minimum is unique and the authors propose an e ffi cient algorithm to calculate that optimal s .</p>",
            "markdown": "This shows, surprisingly, that can be advantageous to adapt the number of stoppers and continuers to the probability distribution of S ’s values. Figure 9.6 further details this observation, by showing the compression ratio as a function of s , for two di ff erent distributions ZIFF and AP , the former is the classic Zipfian distribution (i.e. P [ x ] ≈ 1 / x ), the latter is the distribution derived from the words of the Associated-Press collection (i.e. P [ x ] is the frequency of occurrence of the x -th most frequent word). When s is very small, the number of high frequency values encoded with one byte is also very small, but in this case c is large and therefore many words with low frequency will be encoded with few bytes. As s grows, we gain compression in more frequent values and loose compression in less frequent values. At some later point, the compression lost in the last values is larger than the compression gained in values at the beginning, and therefore the global compression ratio worsens. That point give us the optimal s value. In [1] it is shown that the minimum is unique and the authors propose an e ffi cient algorithm to calculate that optimal s .\n\n"
          }
        ],
        "chunk_length": 215
      },
      {
        "segments": [
          {
            "segment_id": "243888bb-aa38-4afc-9795-ccdf405423e4",
            "bbox": {
              "left": 217.74998,
              "top": 1192.75,
              "width": 335.3333,
              "height": 22.833332
            },
            "page_number": 7,
            "page_width": 1240,
            "page_height": 1754,
            "content": "9.5 Interpolative coding",
            "segment_type": "Section header",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/243888bb-aa38-4afc-9795-ccdf405423e4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7670c7dc1bbe9ce9e387e6cec828d5fdbd5d330461ca86957d67149346572cab",
            "html": "<h2>9.5 Interpolative coding</h2>",
            "markdown": "## 9.5 Interpolative coding\n\n"
          },
          {
            "segment_id": "b5ad7f84-442c-49ec-86f5-12d666014f32",
            "bbox": {
              "left": 217.74998,
              "top": 1246.9166,
              "width": 799.9166,
              "height": 143.66666
            },
            "page_number": 7,
            "page_width": 1240,
            "page_height": 1754,
            "content": "This is an integer-encoding technique that is ideal whenever the sequence S shows clustered occur- rences of integers, namely subsequences which are concentrated in small ranges. This is a typical situation which arises in the storage of posting lists of search engines [5]. Interpolative code is designed in a recursive way by assuming that the integer sequence to be compressed consists of increasing values : namely S 0 = s 0 1 , . . . , s 0 n with s 0 i < s 0 i + 1 . We can turn the original problem to this one, by just setting s 0 i = P i j = 1 s j .",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/b5ad7f84-442c-49ec-86f5-12d666014f32.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f98620f09629a7808f519cfb6d5335e9aca4572f0bf2e9cbc3d2a5373922530a",
            "html": "<p>This is an integer-encoding technique that is ideal whenever the sequence S shows clustered occur- rences of integers, namely subsequences which are concentrated in small ranges. This is a typical situation which arises in the storage of posting lists of search engines [5]. Interpolative code is designed in a recursive way by assuming that the integer sequence to be compressed consists of increasing values : namely S 0 = s 0 1 , . . . , s 0 n with s 0 i < s 0 i + 1 . We can turn the original problem to this one, by just setting s 0 i = P i j = 1 s j .</p>",
            "markdown": "This is an integer-encoding technique that is ideal whenever the sequence S shows clustered occur- rences of integers, namely subsequences which are concentrated in small ranges. This is a typical situation which arises in the storage of posting lists of search engines [5]. Interpolative code is designed in a recursive way by assuming that the integer sequence to be compressed consists of increasing values : namely S 0 = s 0 1 , . . . , s 0 n with s 0 i < s 0 i + 1 . We can turn the original problem to this one, by just setting s 0 i = P i j = 1 s j .\n\n"
          },
          {
            "segment_id": "e19389f0-b4f8-427d-a871-2efcd9f9006f",
            "bbox": {
              "left": 217.74998,
              "top": 1394.8333,
              "width": 797.8333,
              "height": 45.75
            },
            "page_number": 7,
            "page_width": 1240,
            "page_height": 1754,
            "content": "At each iteration we know, for the current subsequence S 0 l , r to be encoded, the following 5 pa- rameters:",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/e19389f0-b4f8-427d-a871-2efcd9f9006f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8d2d6c30abab04b72e85276e53d2d67d6455aafaeae1ad960596f963a7f194da",
            "html": "<p>At each iteration we know, for the current subsequence S 0 l , r to be encoded, the following 5 pa- rameters:</p>",
            "markdown": "At each iteration we know, for the current subsequence S 0 l , r to be encoded, the following 5 pa- rameters:\n\n"
          },
          {
            "segment_id": "3e8d9d31-8d03-49da-af10-5c63abbf9a5b",
            "bbox": {
              "left": 246.91666,
              "top": 1461.5,
              "width": 720.75,
              "height": 39.5
            },
            "page_number": 7,
            "page_width": 1240,
            "page_height": 1754,
            "content": "• the left index l and the right index r delimiting the subsequence S 0 l , r = { s 0 l , s 0 l + 1 , . . . , s 0 r } ;",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/3e8d9d31-8d03-49da-af10-5c63abbf9a5b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f757889008cf110b5ea1077226c5c439ba6beea134cb6a8ce464192f0bd6ef77",
            "html": "<ul><li>the left index l and the right index r delimiting the subsequence S 0 l , r = { s 0 l , s 0 l + 1 , . . . , s 0 r } ;</li></ul>",
            "markdown": "- the left index l and the right index r delimiting the subsequence S 0 l , r = { s 0 l , s 0 l + 1 , . . . , s 0 r } ;\n\n"
          },
          {
            "segment_id": "61080e27-8249-4d3f-99ee-e7eec069fdae",
            "bbox": {
              "left": 405.24997,
              "top": 265.66666,
              "width": 406.16666,
              "height": 345.75
            },
            "page_number": 8,
            "page_width": 1240,
            "page_height": 1754,
            "content": "4 AP 40 ZIFF 39 ne 38 37 36 35 34 33 32 31 50 100 150 200 250 svalue",
            "segment_type": "Picture",
            "ocr": [
              {
                "bbox": {
                  "left": 28,
                  "top": 27,
                  "width": 13,
                  "height": 11
                },
                "text": "4",
                "confidence": 0.99553776
              },
              {
                "bbox": {
                  "left": 278,
                  "top": 37,
                  "width": 21,
                  "height": 17
                },
                "text": "AP",
                "confidence": 0.9933668
              },
              {
                "bbox": {
                  "left": 27,
                  "top": 51,
                  "width": 20,
                  "height": 17
                },
                "text": "40",
                "confidence": 0.9982005
              },
              {
                "bbox": {
                  "left": 279,
                  "top": 59,
                  "width": 29,
                  "height": 15
                },
                "text": "ZIFF",
                "confidence": 0.994313
              },
              {
                "bbox": {
                  "left": 27,
                  "top": 78,
                  "width": 20,
                  "height": 17
                },
                "text": "39",
                "confidence": 0.998377
              },
              {
                "bbox": {
                  "left": 6,
                  "top": 88,
                  "width": 19,
                  "height": 150
                },
                "text": "ne",
                "confidence": 0.11052339
              },
              {
                "bbox": {
                  "left": 28,
                  "top": 105,
                  "width": 18,
                  "height": 17
                },
                "text": "38",
                "confidence": 0.9973986
              },
              {
                "bbox": {
                  "left": 27,
                  "top": 130,
                  "width": 18,
                  "height": 18
                },
                "text": "37",
                "confidence": 0.995875
              },
              {
                "bbox": {
                  "left": 27,
                  "top": 159,
                  "width": 19,
                  "height": 16
                },
                "text": "36",
                "confidence": 0.9962539
              },
              {
                "bbox": {
                  "left": 28,
                  "top": 185,
                  "width": 18,
                  "height": 19
                },
                "text": "35",
                "confidence": 0.9983084
              },
              {
                "bbox": {
                  "left": 27,
                  "top": 213,
                  "width": 18,
                  "height": 18
                },
                "text": "34",
                "confidence": 0.99751896
              },
              {
                "bbox": {
                  "left": 27,
                  "top": 240,
                  "width": 20,
                  "height": 18
                },
                "text": "33",
                "confidence": 0.99729264
              },
              {
                "bbox": {
                  "left": 27,
                  "top": 268,
                  "width": 22,
                  "height": 15
                },
                "text": "32",
                "confidence": 0.99759007
              },
              {
                "bbox": {
                  "left": 27,
                  "top": 295,
                  "width": 27,
                  "height": 16
                },
                "text": "31",
                "confidence": 0.9920352
              },
              {
                "bbox": {
                  "left": 104,
                  "top": 314,
                  "width": 17,
                  "height": 13
                },
                "text": "50",
                "confidence": 0.99741304
              },
              {
                "bbox": {
                  "left": 171,
                  "top": 313,
                  "width": 24,
                  "height": 15
                },
                "text": "100",
                "confidence": 0.99837667
              },
              {
                "bbox": {
                  "left": 239,
                  "top": 313,
                  "width": 25,
                  "height": 14
                },
                "text": "150",
                "confidence": 0.9921662
              },
              {
                "bbox": {
                  "left": 309,
                  "top": 313,
                  "width": 26,
                  "height": 15
                },
                "text": "200",
                "confidence": 0.99745893
              },
              {
                "bbox": {
                  "left": 379,
                  "top": 313,
                  "width": 25,
                  "height": 14
                },
                "text": "250",
                "confidence": 0.998755
              },
              {
                "bbox": {
                  "left": 200,
                  "top": 328,
                  "width": 50,
                  "height": 14
                },
                "text": "svalue",
                "confidence": 0.9537191
              }
            ],
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/61080e27-8249-4d3f-99ee-e7eec069fdae.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8cfef196f14d65c3920785d96d50c2298eb14bbaee030cc580a4a059adadf09b",
            "html": "<img src=\"https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/61080e27-8249-4d3f-99ee-e7eec069fdae.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8cfef196f14d65c3920785d96d50c2298eb14bbaee030cc580a4a059adadf09b\" />",
            "markdown": "![Image](https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/61080e27-8249-4d3f-99ee-e7eec069fdae.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8cfef196f14d65c3920785d96d50c2298eb14bbaee030cc580a4a059adadf09b)"
          },
          {
            "segment_id": "87b9ead5-a43d-4503-ae43-8bee946df9ec",
            "bbox": {
              "left": 215.66666,
              "top": 642.75,
              "width": 799.9166,
              "height": 43.666664
            },
            "page_number": 8,
            "page_width": 1240,
            "page_height": 1754,
            "content": "FIGURE 9.6: An example of how compression rate varies according to the choice of s , given that c = 256 − s .",
            "segment_type": "Caption",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/87b9ead5-a43d-4503-ae43-8bee946df9ec.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e41d1904fee079758e0d1f01236e54bd7cbb41f87fbaa27760ec2c6f32176f48",
            "html": "<span class=\"caption\">FIGURE 9.6: An example of how compression rate varies according to the choice of s , given that c = 256 − s .</span>",
            "markdown": "FIGURE 9.6: An example of how compression rate varies according to the choice of s , given that c = 256 − s .\n\n"
          },
          {
            "segment_id": "bd5652c0-8952-4896-98be-e8a84eac2ec2",
            "bbox": {
              "left": 246.91666,
              "top": 732.3333,
              "width": 393.66666,
              "height": 22.833332
            },
            "page_number": 8,
            "page_width": 1240,
            "page_height": 1754,
            "content": "• the number n of elements in subsequence S 0 l , r ;",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/bd5652c0-8952-4896-98be-e8a84eac2ec2.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4509ab2ae87d774a308c3008616943a91071309aa1e6cdaef26208a6a6ba276b",
            "html": "<ul><li>the number n of elements in subsequence S 0 l , r ;</li></ul>",
            "markdown": "- the number n of elements in subsequence S 0 l , r ;\n\n"
          },
          {
            "segment_id": "d480e7e0-5221-49b8-866d-7e3d4f87f632",
            "bbox": {
              "left": 246.91666,
              "top": 759.4166,
              "width": 729.0833,
              "height": 49.916664
            },
            "page_number": 8,
            "page_width": 1240,
            "page_height": 1754,
            "content": "• a lower-bound low to the lowest value in S 0 l , r , and an upper-bound hi to the highest value in S 0 l , r , hence low ≤ s 0 l and hi ≥ s 0 r .",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/d480e7e0-5221-49b8-866d-7e3d4f87f632.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5c3f37a5c65a963c110966a4c1bcc037058b62823aa504479bae198392308bd2",
            "html": "<ul><li>a lower-bound low to the lowest value in S 0 l , r , and an upper-bound hi to the highest value in S 0 l , r , hence low ≤ s 0 l and hi ≥ s 0 r .</li></ul>",
            "markdown": "- a lower-bound low to the lowest value in S 0 l , r , and an upper-bound hi to the highest value in S 0 l , r , hence low ≤ s 0 l and hi ≥ s 0 r .\n\n"
          },
          {
            "segment_id": "e80aba8e-c5f4-4ace-8299-d5de7ac30bd1",
            "bbox": {
              "left": 215.66666,
              "top": 828.1666,
              "width": 802,
              "height": 93.666664
            },
            "page_number": 8,
            "page_width": 1240,
            "page_height": 1754,
            "content": "Initially we have n = | S | , l = 1, r = n , low = s 0 1 and hi = s 0 n . At each step we first encode the mid- dle element s 0 m , where m = b l + r 2 c , given the information available for the quintuple h n , l , r , low , hi i , and then recursively encode the two subsequences s 0 l , . . . , s 0 m − 1 and s 0 m + 1 , . . . , s 0 r , by using a properly recomputed parameters h n , l , r , low , hi i for each of them.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/e80aba8e-c5f4-4ace-8299-d5de7ac30bd1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=48486cab7b2da29e6f44cb96e7b3a421db8d2d80f4706cb9e3954bc463bc9f0c",
            "html": "<p>Initially we have n = | S | , l = 1, r = n , low = s 0 1 and hi = s 0 n . At each step we first encode the mid- dle element s 0 m , where m = b l + r 2 c , given the information available for the quintuple h n , l , r , low , hi i , and then recursively encode the two subsequences s 0 l , . . . , s 0 m − 1 and s 0 m + 1 , . . . , s 0 r , by using a properly recomputed parameters h n , l , r , low , hi i for each of them.</p>",
            "markdown": "Initially we have n = | S | , l = 1, r = n , low = s 0 1 and hi = s 0 n . At each step we first encode the mid- dle element s 0 m , where m = b l + r 2 c , given the information available for the quintuple h n , l , r , low , hi i , and then recursively encode the two subsequences s 0 l , . . . , s 0 m − 1 and s 0 m + 1 , . . . , s 0 r , by using a properly recomputed parameters h n , l , r , low , hi i for each of them.\n\n"
          }
        ],
        "chunk_length": 387
      },
      {
        "segments": [
          {
            "segment_id": "edd4e560-7043-4636-b0b3-db5e481fbf32",
            "bbox": {
              "left": 215.66666,
              "top": 926.0833,
              "width": 802,
              "height": 143.66666
            },
            "page_number": 8,
            "page_width": 1240,
            "page_height": 1754,
            "content": "In order to succinctly encode s 0 m we deploy as much information as possible we can derive from h n , l , r , low , hi i . Specifically, we observe that it is s 0 m ≥ low + m − l (in the first half of S 0 l , r we have m − l distinct values and the smallest one is larger than low ) and s 0 m ≤ hi − ( r − m ) (via a similar argument). Thus s 0 m lies in the range [ low + m − l , hi − r + m ] so we can encode the value s 0 m − ( low + m − l ) by using d log 2 l e bits, where l = hi − low − r + l is the size of that interval. In this way, interpolative coding can use very few bits per value whenever the sequence S 0 l , r is dense.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/edd4e560-7043-4636-b0b3-db5e481fbf32.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1a415688fa960cb5ebe8f3808cc66748f8901eb7084bb5eb2f4d980000a4f3ad",
            "html": "<p>In order to succinctly encode s 0 m we deploy as much information as possible we can derive from h n , l , r , low , hi i . Specifically, we observe that it is s 0 m ≥ low + m − l (in the first half of S 0 l , r we have m − l distinct values and the smallest one is larger than low ) and s 0 m ≤ hi − ( r − m ) (via a similar argument). Thus s 0 m lies in the range [ low + m − l , hi − r + m ] so we can encode the value s 0 m − ( low + m − l ) by using d log 2 l e bits, where l = hi − low − r + l is the size of that interval. In this way, interpolative coding can use very few bits per value whenever the sequence S 0 l , r is dense.</p>",
            "markdown": "In order to succinctly encode s 0 m we deploy as much information as possible we can derive from h n , l , r , low , hi i . Specifically, we observe that it is s 0 m ≥ low + m − l (in the first half of S 0 l , r we have m − l distinct values and the smallest one is larger than low ) and s 0 m ≤ hi − ( r − m ) (via a similar argument). Thus s 0 m lies in the range [ low + m − l , hi − r + m ] so we can encode the value s 0 m − ( low + m − l ) by using d log 2 l e bits, where l = hi − low − r + l is the size of that interval. In this way, interpolative coding can use very few bits per value whenever the sequence S 0 l , r is dense.\n\n"
          },
          {
            "segment_id": "d94aad70-5eae-471d-a146-617b4a5bbae3",
            "bbox": {
              "left": 215.66666,
              "top": 1076.0833,
              "width": 799.9166,
              "height": 68.666664
            },
            "page_number": 8,
            "page_width": 1240,
            "page_height": 1754,
            "content": "With the exception of the values of the first iteration, which must be known to both the encoder and the decoder, all values for the subsequent iterations can be easily derived from the previous ones. In particular,",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/d94aad70-5eae-471d-a146-617b4a5bbae3.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ea8fa780fe4f101f5683165102a0b554cdefae26dbe2f84452c86c789ee5d50e",
            "html": "<p>With the exception of the values of the first iteration, which must be known to both the encoder and the decoder, all values for the subsequent iterations can be easily derived from the previous ones. In particular,</p>",
            "markdown": "With the exception of the values of the first iteration, which must be known to both the encoder and the decoder, all values for the subsequent iterations can be easily derived from the previous ones. In particular,\n\n"
          },
          {
            "segment_id": "549dec43-6b34-4c93-861c-6a4dbc70041d",
            "bbox": {
              "left": 246.91666,
              "top": 1165.6666,
              "width": 731.1666,
              "height": 70.75
            },
            "page_number": 8,
            "page_width": 1240,
            "page_height": 1754,
            "content": "• for the subsequence s 0 l , . . . , s 0 m − 1 , the parameter low is the same of the previous step, since s 0 l has not changed; and we can set hi = s 0 m − 1, since s 0 m − 1 < s 0 m given that we assumed the integers to be distinct and increasing;",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/549dec43-6b34-4c93-861c-6a4dbc70041d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f1f67f9d6a835645c78be1e3ac158cd582fb01de22b99abd4e18700a4779fe3b",
            "html": "<ul><li>for the subsequence s 0 l , . . . , s 0 m − 1 , the parameter low is the same of the previous step, since s 0 l has not changed; and we can set hi = s 0 m − 1, since s 0 m − 1 < s 0 m given that we assumed the integers to be distinct and increasing;</li></ul>",
            "markdown": "- for the subsequence s 0 l , . . . , s 0 m − 1 , the parameter low is the same of the previous step, since s 0 l has not changed; and we can set hi = s 0 m − 1, since s 0 m − 1 < s 0 m given that we assumed the integers to be distinct and increasing;\n\n"
          },
          {
            "segment_id": "08440f75-7b7d-42f5-8308-3bffcf59ea1a",
            "bbox": {
              "left": 248.99998,
              "top": 1242.75,
              "width": 727,
              "height": 47.833332
            },
            "page_number": 8,
            "page_width": 1240,
            "page_height": 1754,
            "content": "• for the subsequence s 0 m + 1 , . . . , s 0 r , the parameter hi is the same as before, since s 0 r has not changed; and we can set low = s 0 m + 1, since s 0 m + 1 > s 0 m ;",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/08440f75-7b7d-42f5-8308-3bffcf59ea1a.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=e63080a0b99083f7bc6b64360c43544f29841ee87dd28df7089b24c307236ebc",
            "html": "<ul><li>for the subsequence s 0 m + 1 , . . . , s 0 r , the parameter hi is the same as before, since s 0 r has not changed; and we can set low = s 0 m + 1, since s 0 m + 1 > s 0 m ;</li></ul>",
            "markdown": "- for the subsequence s 0 m + 1 , . . . , s 0 r , the parameter hi is the same as before, since s 0 r has not changed; and we can set low = s 0 m + 1, since s 0 m + 1 > s 0 m ;\n\n"
          },
          {
            "segment_id": "0abc061c-434e-4e8b-98cf-5b69f59e6aed",
            "bbox": {
              "left": 246.91666,
              "top": 1296.9166,
              "width": 451.99997,
              "height": 20.75
            },
            "page_number": 8,
            "page_width": 1240,
            "page_height": 1754,
            "content": "• the parameters l , r and n are recomputed accordingly.",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/0abc061c-434e-4e8b-98cf-5b69f59e6aed.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0373157071f7a86271c32e4323d36cb25b7d18508bc355044107d33398ece25f",
            "html": "<ul><li>the parameters l , r and n are recomputed accordingly.</li></ul>",
            "markdown": "- the parameters l , r and n are recomputed accordingly.\n\n"
          },
          {
            "segment_id": "b5254af2-1454-4154-b926-d22ed3064d12",
            "bbox": {
              "left": 236.49998,
              "top": 1340.6666,
              "width": 647.8333,
              "height": 20.75
            },
            "page_number": 8,
            "page_width": 1240,
            "page_height": 1754,
            "content": "The following figure shows a running example of the behavior of the algorithm:",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/b5254af2-1454-4154-b926-d22ed3064d12.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=732e1073b709cae199059ea7dcb25ad530c9c94dfeaef7042ac0d36b325e173c",
            "html": "<p>The following figure shows a running example of the behavior of the algorithm:</p>",
            "markdown": "The following figure shows a running example of the behavior of the algorithm:\n\n"
          },
          {
            "segment_id": "a7ec28df-e395-4fd2-affd-9e7e0ab2e2aa",
            "bbox": {
              "left": 217.74998,
              "top": 1363.5833,
              "width": 799.9166,
              "height": 120.74999
            },
            "page_number": 8,
            "page_width": 1240,
            "page_height": 1754,
            "content": "We conclude the description of Interpolative coding by noticing that the encoding of an integer s 0 i is not fixed but depends on the distribution of the other integers in S 0 . This reflects onto the original sequence S in such a way that the same integer x may be encoded di ff erently in its occurrences. This code is therefore adaptive and, additionally, it is not prefix-free; these two specialties may turn it better than Hu ff man code, which is optimal among the class of static prefix-free codes.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/a7ec28df-e395-4fd2-affd-9e7e0ab2e2aa.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=7f2a35c50e6834a2079ef473fae1ddf4f0557ab47ce0ca91e0ada5b458a40518",
            "html": "<p>We conclude the description of Interpolative coding by noticing that the encoding of an integer s 0 i is not fixed but depends on the distribution of the other integers in S 0 . This reflects onto the original sequence S in such a way that the same integer x may be encoded di ff erently in its occurrences. This code is therefore adaptive and, additionally, it is not prefix-free; these two specialties may turn it better than Hu ff man code, which is optimal among the class of static prefix-free codes.</p>",
            "markdown": "We conclude the description of Interpolative coding by noticing that the encoding of an integer s 0 i is not fixed but depends on the distribution of the other integers in S 0 . This reflects onto the original sequence S in such a way that the same integer x may be encoded di ff erently in its occurrences. This code is therefore adaptive and, additionally, it is not prefix-free; these two specialties may turn it better than Hu ff man code, which is optimal among the class of static prefix-free codes.\n\n"
          },
          {
            "segment_id": "b3e36127-9fb7-4b0e-b62b-d34791e142b6",
            "bbox": {
              "left": 217.74998,
              "top": 228.16666,
              "width": 139.5,
              "height": 20.75
            },
            "page_number": 9,
            "page_width": 1240,
            "page_height": 1754,
            "content": "Integer encoding",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/b3e36127-9fb7-4b0e-b62b-d34791e142b6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4428d0697546aa733fdb721fec253781d3b6be05b0d06f6a461046203a02b3f4",
            "html": "<p>Integer encoding</p>",
            "markdown": "Integer encoding\n\n"
          },
          {
            "segment_id": "5d1adc57-9e1a-444a-8671-b88b0719293f",
            "bbox": {
              "left": 267.75,
              "top": 263.5833,
              "width": 695.75,
              "height": 441.5833
            },
            "page_number": 9,
            "page_width": 1240,
            "page_height": 1754,
            "content": "S=123579111518192021 n=12l=1r=12low=1hi=21 12357 111518192021 n=51=1r=5low=1hi=8 n=6｜=7r=12low=10hi=21 12 57 1115 192021 n=2l=1r=2 n=21=4r=5 n=21=7r=8 n=3｜=10r=12 low=1hi=2 low=4hi=8 low=10hi=17 low=19hi=21 NO BITS 7 15 NO BITS EMITTED EMITTED n=11=5r=5 n=11=8r=8 low=6hi=8 low=11hi=18",
            "segment_type": "Picture",
            "ocr": [
              {
                "bbox": {
                  "left": 69,
                  "top": 11,
                  "width": 554,
                  "height": 29
                },
                "text": "S=123579111518192021",
                "confidence": 0.9938661
              },
              {
                "bbox": {
                  "left": 199,
                  "top": 50,
                  "width": 304,
                  "height": 17
                },
                "text": "n=12l=1r=12low=1hi=21",
                "confidence": 0.94369805
              },
              {
                "bbox": {
                  "left": 49,
                  "top": 127,
                  "width": 153,
                  "height": 34
                },
                "text": "12357",
                "confidence": 0.998518
              },
              {
                "bbox": {
                  "left": 345,
                  "top": 128,
                  "width": 310,
                  "height": 30
                },
                "text": "111518192021",
                "confidence": 0.9969557
              },
              {
                "bbox": {
                  "left": 40,
                  "top": 164,
                  "width": 172,
                  "height": 13
                },
                "text": "n=51=1r=5low=1hi=8",
                "confidence": 0.9275872
              },
              {
                "bbox": {
                  "left": 400,
                  "top": 166,
                  "width": 201,
                  "height": 13
                },
                "text": "n=6｜=7r=12low=10hi=21",
                "confidence": 0.9307111
              },
              {
                "bbox": {
                  "left": 13,
                  "top": 239,
                  "width": 57,
                  "height": 35
                },
                "text": "12",
                "confidence": 0.99829185
              },
              {
                "bbox": {
                  "left": 173,
                  "top": 234,
                  "width": 69,
                  "height": 44
                },
                "text": "57",
                "confidence": 0.81112635
              },
              {
                "bbox": {
                  "left": 322,
                  "top": 236,
                  "width": 103,
                  "height": 39
                },
                "text": "1115",
                "confidence": 0.99830616
              },
              {
                "bbox": {
                  "left": 542,
                  "top": 240,
                  "width": 149,
                  "height": 31
                },
                "text": "192021",
                "confidence": 0.9979441
              },
              {
                "bbox": {
                  "left": 2,
                  "top": 276,
                  "width": 76,
                  "height": 14
                },
                "text": "n=2l=1r=2",
                "confidence": 0.9245809
              },
              {
                "bbox": {
                  "left": 168,
                  "top": 276,
                  "width": 76,
                  "height": 14
                },
                "text": "n=21=4r=5",
                "confidence": 0.92662853
              },
              {
                "bbox": {
                  "left": 336,
                  "top": 278,
                  "width": 76,
                  "height": 11
                },
                "text": "n=21=7r=8",
                "confidence": 0.92749435
              },
              {
                "bbox": {
                  "left": 573,
                  "top": 277,
                  "width": 89,
                  "height": 12
                },
                "text": "n=3｜=10r=12",
                "confidence": 0.9323122
              },
              {
                "bbox": {
                  "left": 4,
                  "top": 288,
                  "width": 72,
                  "height": 16
                },
                "text": "low=1hi=2",
                "confidence": 0.97651577
              },
              {
                "bbox": {
                  "left": 171,
                  "top": 289,
                  "width": 71,
                  "height": 14
                },
                "text": "low=4hi=8",
                "confidence": 0.985169
              },
              {
                "bbox": {
                  "left": 331,
                  "top": 290,
                  "width": 85,
                  "height": 13
                },
                "text": "low=10hi=17",
                "confidence": 0.9634562
              },
              {
                "bbox": {
                  "left": 573,
                  "top": 289,
                  "width": 88,
                  "height": 15
                },
                "text": "low=19hi=21",
                "confidence": 0.9816858
              },
              {
                "bbox": {
                  "left": 20,
                  "top": 372,
                  "width": 48,
                  "height": 11
                },
                "text": "NO BITS",
                "confidence": 0.90375394
              },
              {
                "bbox": {
                  "left": 221,
                  "top": 370,
                  "width": 20,
                  "height": 28
                },
                "text": "7",
                "confidence": 0.992728
              },
              {
                "bbox": {
                  "left": 377,
                  "top": 366,
                  "width": 48,
                  "height": 37
                },
                "text": "15",
                "confidence": 0.9988926
              },
              {
                "bbox": {
                  "left": 596,
                  "top": 373,
                  "width": 49,
                  "height": 11
                },
                "text": "NO BITS",
                "confidence": 0.9113569
              },
              {
                "bbox": {
                  "left": 18,
                  "top": 388,
                  "width": 51,
                  "height": 11
                },
                "text": "EMITTED",
                "confidence": 0.99431723
              },
              {
                "bbox": {
                  "left": 594,
                  "top": 388,
                  "width": 52,
                  "height": 11
                },
                "text": "EMITTED",
                "confidence": 0.9949346
              },
              {
                "bbox": {
                  "left": 192,
                  "top": 412,
                  "width": 72,
                  "height": 11
                },
                "text": "n=11=5r=5",
                "confidence": 0.9318623
              },
              {
                "bbox": {
                  "left": 364,
                  "top": 410,
                  "width": 74,
                  "height": 14
                },
                "text": "n=11=8r=8",
                "confidence": 0.92672706
              },
              {
                "bbox": {
                  "left": 193,
                  "top": 427,
                  "width": 69,
                  "height": 11
                },
                "text": "low=6hi=8",
                "confidence": 0.9724211
              },
              {
                "bbox": {
                  "left": 359,
                  "top": 426,
                  "width": 83,
                  "height": 13
                },
                "text": "low=11hi=18",
                "confidence": 0.9449116
              }
            ],
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/5d1adc57-9e1a-444a-8671-b88b0719293f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=97c1219e056f1dcbe3148c06359d4993c179bc0fb8049931329f3bcc1a1cac63",
            "html": "<img src=\"https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/5d1adc57-9e1a-444a-8671-b88b0719293f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=97c1219e056f1dcbe3148c06359d4993c179bc0fb8049931329f3bcc1a1cac63\" />",
            "markdown": "![Image](https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/5d1adc57-9e1a-444a-8671-b88b0719293f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=97c1219e056f1dcbe3148c06359d4993c179bc0fb8049931329f3bcc1a1cac63)"
          }
        ],
        "chunk_length": 449
      },
      {
        "segments": [
          {
            "segment_id": "7d7ec103-fbea-4cbf-9bb2-5073a7a82dc5",
            "bbox": {
              "left": 215.66666,
              "top": 728.1666,
              "width": 802,
              "height": 139.5
            },
            "page_number": 9,
            "page_width": 1240,
            "page_height": 1754,
            "content": "FIGURE 9.7: The blue and the red boxes are, respectively, the left and the right subsequence of each iteration. In the green boxes is indicated the integer s 0 m to be encoded. The procedure performs, in practice, a preorder traversal of a balanced binary tree whose leaves are the integers in S . When it encounters a subsequence of the form [ low , low + 1 , . . . , low + n − 1], it doesn’t emit anything. Thus, the items are encoded in the following order (in brackets the actual number encoded): 9 (3), 3 (3), 5 (1), 7 (1), 18 (6), 11 (1), 15 (4).",
            "segment_type": "Caption",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/7d7ec103-fbea-4cbf-9bb2-5073a7a82dc5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6896dbe890d0867581ee34ec7ff2185bfb25e355044ed9e2d12b54b84bca18f0",
            "html": "<span class=\"caption\">FIGURE 9.7: The blue and the red boxes are, respectively, the left and the right subsequence of each iteration. In the green boxes is indicated the integer s 0 m to be encoded. The procedure performs, in practice, a preorder traversal of a balanced binary tree whose leaves are the integers in S . When it encounters a subsequence of the form [ low , low + 1 , . . . , low + n − 1], it doesn’t emit anything. Thus, the items are encoded in the following order (in brackets the actual number encoded): 9 (3), 3 (3), 5 (1), 7 (1), 18 (6), 11 (1), 15 (4).</span>",
            "markdown": "FIGURE 9.7: The blue and the red boxes are, respectively, the left and the right subsequence of each iteration. In the green boxes is indicated the integer s 0 m to be encoded. The procedure performs, in practice, a preorder traversal of a balanced binary tree whose leaves are the integers in S . When it encounters a subsequence of the form [ low , low + 1 , . . . , low + n − 1], it doesn’t emit anything. Thus, the items are encoded in the following order (in brackets the actual number encoded): 9 (3), 3 (3), 5 (1), 7 (1), 18 (6), 11 (1), 15 (4).\n\n"
          }
        ],
        "chunk_length": 111
      },
      {
        "segments": [
          {
            "segment_id": "f4896cea-7beb-49e2-be75-8ecd1bad09e0",
            "bbox": {
              "left": 217.74998,
              "top": 919.8333,
              "width": 335.3333,
              "height": 24.916666
            },
            "page_number": 9,
            "page_width": 1240,
            "page_height": 1754,
            "content": "9.6 Concluding remarks",
            "segment_type": "Section header",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/f4896cea-7beb-49e2-be75-8ecd1bad09e0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=debb9f2a7274b2c0663dc18fea21478f3b13c524badbdea2d4678ffd0f4b0656",
            "html": "<h2>9.6 Concluding remarks</h2>",
            "markdown": "## 9.6 Concluding remarks\n\n"
          },
          {
            "segment_id": "60cdf6d8-d331-4423-97b9-75c5e4a850b7",
            "bbox": {
              "left": 215.66666,
              "top": 988.5833,
              "width": 802,
              "height": 406.16666
            },
            "page_number": 9,
            "page_width": 1240,
            "page_height": 1754,
            "content": "We wish to convince the reader about the generality of the Integer Compression problem, because more and more frequently other compression problems, such as the classic Text Compression, boil down to compressing sequences of integers. An example was given by the LZ77-compressor in Chapter 8. Another example can be obtained by looking at any text T as a sequence of tokens, being them words or single characters; each token can be represented with an integer (aka token- ID ), so that the problem of compressing T can be solved by compressing the sequence of token-IDs. In order to better deploy one of the previous integer-encoding schemes, one can adopt an interesting strategy which consists of sorting the tokens by decreasing frequency of occurrence in T , and then assign as token-ID their rank in the ordered sequence. This way, the more frequent is the occurrence of the token in T , the smaller is the token-ID, and thus the shorter will be the codeword assigned to it by anyone of the previous integer-encoding schemes. Therefore this simple strategy implements the golden rule of data compression which consists of assigning short codewords to frequent tokens. If the distribution of the tokens follows one of the distributions indicated in the previous sections, those codewords have optimal length; otherwise, the codewords may be sub-optimal. In [4] it is shown that, if the i -th word follows a Zipfian distribution, such as P [ i ] = c (1 / i ) α where c is a normalization constant and α is a parameter depending on the input text, then the previous algorithm using δ - coding achieves a performance close to the entropy of the input text.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/60cdf6d8-d331-4423-97b9-75c5e4a850b7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d09e05392926d71d3433c8f25e54fa0634d1da68f3c1ef3ced0fc4d876ed7a40",
            "html": "<p>We wish to convince the reader about the generality of the Integer Compression problem, because more and more frequently other compression problems, such as the classic Text Compression, boil down to compressing sequences of integers. An example was given by the LZ77-compressor in Chapter 8. Another example can be obtained by looking at any text T as a sequence of tokens, being them words or single characters; each token can be represented with an integer (aka token- ID ), so that the problem of compressing T can be solved by compressing the sequence of token-IDs. In order to better deploy one of the previous integer-encoding schemes, one can adopt an interesting strategy which consists of sorting the tokens by decreasing frequency of occurrence in T , and then assign as token-ID their rank in the ordered sequence. This way, the more frequent is the occurrence of the token in T , the smaller is the token-ID, and thus the shorter will be the codeword assigned to it by anyone of the previous integer-encoding schemes. Therefore this simple strategy implements the golden rule of data compression which consists of assigning short codewords to frequent tokens. If the distribution of the tokens follows one of the distributions indicated in the previous sections, those codewords have optimal length; otherwise, the codewords may be sub-optimal. In [4] it is shown that, if the i -th word follows a Zipfian distribution, such as P [ i ] = c (1 / i ) α where c is a normalization constant and α is a parameter depending on the input text, then the previous algorithm using δ - coding achieves a performance close to the entropy of the input text.</p>",
            "markdown": "We wish to convince the reader about the generality of the Integer Compression problem, because more and more frequently other compression problems, such as the classic Text Compression, boil down to compressing sequences of integers. An example was given by the LZ77-compressor in Chapter 8. Another example can be obtained by looking at any text T as a sequence of tokens, being them words or single characters; each token can be represented with an integer (aka token- ID ), so that the problem of compressing T can be solved by compressing the sequence of token-IDs. In order to better deploy one of the previous integer-encoding schemes, one can adopt an interesting strategy which consists of sorting the tokens by decreasing frequency of occurrence in T , and then assign as token-ID their rank in the ordered sequence. This way, the more frequent is the occurrence of the token in T , the smaller is the token-ID, and thus the shorter will be the codeword assigned to it by anyone of the previous integer-encoding schemes. Therefore this simple strategy implements the golden rule of data compression which consists of assigning short codewords to frequent tokens. If the distribution of the tokens follows one of the distributions indicated in the previous sections, those codewords have optimal length; otherwise, the codewords may be sub-optimal. In [4] it is shown that, if the i -th word follows a Zipfian distribution, such as P [ i ] = c (1 / i ) α where c is a normalization constant and α is a parameter depending on the input text, then the previous algorithm using δ - coding achieves a performance close to the entropy of the input text.\n\n"
          }
        ],
        "chunk_length": 287
      },
      {
        "segments": [
          {
            "segment_id": "6de1c9de-edab-4bef-9984-30f6ac176f94",
            "bbox": {
              "left": 215.66666,
              "top": 1438.5833,
              "width": 143.66666,
              "height": 27
            },
            "page_number": 9,
            "page_width": 1240,
            "page_height": 1754,
            "content": "References",
            "segment_type": "Section header",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/6de1c9de-edab-4bef-9984-30f6ac176f94.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=36121eb8aee4c1cbf4b6ad0beab5aaf65e975399d68c5e380764558f7abe720e",
            "html": "<h2>References</h2>",
            "markdown": "## References\n\n"
          },
          {
            "segment_id": "1111683e-174a-4872-8def-6a0ddb658fc0",
            "bbox": {
              "left": 209.41666,
              "top": 307.3333,
              "width": 766.5833,
              "height": 43.666664
            },
            "page_number": 10,
            "page_width": 1240,
            "page_height": 1754,
            "content": "[1] Nieves R. Brisaboa, Antonio Farina, Gonzalo Navarro, Jos´e R. Param´ a. Lightweight natural language text compression. Information Retrieval , 10:1-33, 2007.",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/1111683e-174a-4872-8def-6a0ddb658fc0.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1141ce3304b5bcfa165db34ef83fe9fc6ab8fb0a2ae2e3a8b549f9016a7d899b",
            "html": "<ul><li>[1] Nieves R. Brisaboa, Antonio Farina, Gonzalo Navarro, Jos´e R. Param´ a. Lightweight natural language text compression. Information Retrieval , 10:1-33, 2007.</li></ul>",
            "markdown": "- [1] Nieves R. Brisaboa, Antonio Farina, Gonzalo Navarro, Jos´e R. Param´ a. Lightweight natural language text compression. Information Retrieval , 10:1-33, 2007.\n\n"
          },
          {
            "segment_id": "f575e6e8-b754-42dd-9856-f86d4c4cee35",
            "bbox": {
              "left": 211.49998,
              "top": 355.25,
              "width": 766.5833,
              "height": 43.666664
            },
            "page_number": 10,
            "page_width": 1240,
            "page_height": 1754,
            "content": "[2] Alistair Moffat. Compressing Integer Sequences and Sets. In Encyclopedia of Algorithms . Springer, 2009.",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/f575e6e8-b754-42dd-9856-f86d4c4cee35.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=804e4f87eb5b3c871dd0109df48ae6b353ad1887ccbebee92490f43f72148aa3",
            "html": "<ul><li>[2] Alistair Moffat. Compressing Integer Sequences and Sets. In Encyclopedia of Algorithms . Springer, 2009.</li></ul>",
            "markdown": "- [2] Alistair Moffat. Compressing Integer Sequences and Sets. In Encyclopedia of Algorithms . Springer, 2009.\n\n"
          },
          {
            "segment_id": "ccd9faca-5573-44ae-9140-2fe2619c0a70",
            "bbox": {
              "left": 211.49998,
              "top": 403.16666,
              "width": 766.5833,
              "height": 43.666664
            },
            "page_number": 10,
            "page_width": 1240,
            "page_height": 1754,
            "content": "[3] Peter Fenwick. Universal Codes. In Lossless Data Compression Handbook . Academic Press, 2003.",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/ccd9faca-5573-44ae-9140-2fe2619c0a70.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a9f5890466dffd9063cadea56ea16c6e83b99978df235207ac9b7a147dd39341",
            "html": "<ul><li>[3] Peter Fenwick. Universal Codes. In Lossless Data Compression Handbook . Academic Press, 2003.</li></ul>",
            "markdown": "- [3] Peter Fenwick. Universal Codes. In Lossless Data Compression Handbook . Academic Press, 2003.\n\n"
          },
          {
            "segment_id": "56244e9e-0422-4678-b395-1d8106d2d0af",
            "bbox": {
              "left": 209.41666,
              "top": 453.16666,
              "width": 764.5,
              "height": 43.666664
            },
            "page_number": 10,
            "page_width": 1240,
            "page_height": 1754,
            "content": "[4] Christopher D. Manning, Prabhakar Raghavan and Hinrich Sch¨ utze. Introduction to Information Retrieval . Cambridge University Press, 2008.",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/56244e9e-0422-4678-b395-1d8106d2d0af.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=3506ce430a88f7cc4cd3485a90665cee4997b07120b0e5103b3d1e67b22b3527",
            "html": "<ul><li>[4] Christopher D. Manning, Prabhakar Raghavan and Hinrich Sch¨ utze. Introduction to Information Retrieval . Cambridge University Press, 2008.</li></ul>",
            "markdown": "- [4] Christopher D. Manning, Prabhakar Raghavan and Hinrich Sch¨ utze. Introduction to Information Retrieval . Cambridge University Press, 2008.\n\n"
          },
          {
            "segment_id": "4a5bd711-2ef9-4d63-b5f4-51e61726f7a5",
            "bbox": {
              "left": 209.41666,
              "top": 501.0833,
              "width": 764.5,
              "height": 43.666664
            },
            "page_number": 10,
            "page_width": 1240,
            "page_height": 1754,
            "content": "[5] Hao Yan, Shuai Ding, Torsten Suel. Inverted Index Compression and Query Processing with Optimized Document Ordering. In Procs of WWW , pp. 401-410, 2009.",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/4a5bd711-2ef9-4d63-b5f4-51e61726f7a5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=44d5a8c99f260381e50a7674b9a4bbbba393dd9ee03f625965b4d7d060e5d743",
            "html": "<ul><li>[5] Hao Yan, Shuai Ding, Torsten Suel. Inverted Index Compression and Query Processing with Optimized Document Ordering. In Procs of WWW , pp. 401-410, 2009.</li></ul>",
            "markdown": "- [5] Hao Yan, Shuai Ding, Torsten Suel. Inverted Index Compression and Query Processing with Optimized Document Ordering. In Procs of WWW , pp. 401-410, 2009.\n\n"
          },
          {
            "segment_id": "1352cc35-7079-400d-80b3-fc098e733e5b",
            "bbox": {
              "left": 209.41666,
              "top": 549,
              "width": 766.5833,
              "height": 43.666664
            },
            "page_number": 10,
            "page_width": 1240,
            "page_height": 1754,
            "content": "[6] Ian H. Witten, Alistair Moffat, Timoty C. Bell. Managing Gigabytes . Morgan Kauffman, second edition, 1999.",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/19bc0a94-c0e6-474c-b080-32c9dcb97a86/images/1352cc35-7079-400d-80b3-fc098e733e5b.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T035031Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=41d2e5c2be99842bab048118003e6f2a1fcdbf057c657970ed7a4b180f0b37aa",
            "html": "<ul><li>[6] Ian H. Witten, Alistair Moffat, Timoty C. Bell. Managing Gigabytes . Morgan Kauffman, second edition, 1999.</li></ul>",
            "markdown": "- [6] Ian H. Witten, Alistair Moffat, Timoty C. Bell. Managing Gigabytes . Morgan Kauffman, second edition, 1999.\n\n"
          }
        ],
        "chunk_length": 113
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "Integer encoding\n"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Paolo Ferragina\n"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "2009\n"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "I cannot find any information about the specific locations mentioned in the document.  The text discusses integer encoding and compression techniques, referencing various figures and academic papers, but doesn't provide details about any geographical locations or places.\n"
        }
      ]
    }
  }
}