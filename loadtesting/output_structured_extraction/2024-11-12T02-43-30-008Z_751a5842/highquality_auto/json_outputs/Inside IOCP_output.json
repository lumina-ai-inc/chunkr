{
  "file_name": "Inside IOCP.pdf",
  "task_id": "fbff705a-2342-407e-83cc-637b6e892f02",
  "output": {
    "chunks": [
      {
        "segments": [
          {
            "segment_id": "daaf5632-e147-425f-a7bd-e1e6bde035f5",
            "bbox": {
              "left": 386.5,
              "top": 832.3333,
              "width": 770.75,
              "height": 174.91666
            },
            "page_number": 1,
            "page_width": 1275,
            "page_height": 1650,
            "content": "The goal of a server is to incur as few context switches as possible by having its threads avoid unnecessary blocking, while at the same time maximizing parallelism by using multiple threads. The ideal is for there to be a thread actively servicing a client request on every processor and for those threads not to block if there are additional requests waiting when they complete a request. For this to work correctly however, there must be a way for the application to activate another thread when one processing a client request blocks on I/O (like when it reads from a file as part of the processing).",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/daaf5632-e147-425f-a7bd-e1e6bde035f5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9263f5b5bbc0994c442910434705cb6c67876259b304f4b2b5cb8c4f9512c63c",
            "html": "<p>The goal of a server is to incur as few context switches as possible by having its threads avoid unnecessary blocking, while at the same time maximizing parallelism by using multiple threads. The ideal is for there to be a thread actively servicing a client request on every processor and for those threads not to block if there are additional requests waiting when they complete a request. For this to work correctly however, there must be a way for the application to activate another thread when one processing a client request blocks on I/O (like when it reads from a file as part of the processing).</p>",
            "markdown": "The goal of a server is to incur as few context switches as possible by having its threads avoid unnecessary blocking, while at the same time maximizing parallelism by using multiple threads. The ideal is for there to be a thread actively servicing a client request on every processor and for those threads not to block if there are additional requests waiting when they complete a request. For this to work correctly however, there must be a way for the application to activate another thread when one processing a client request blocks on I/O (like when it reads from a file as part of the processing).\n\n"
          },
          {
            "segment_id": "0ddd885d-80d2-4f4e-b5d2-359e67636bee",
            "bbox": {
              "left": 51.083332,
              "top": 46.916664,
              "width": 1179.0833,
              "height": 758.25
            },
            "page_number": 1,
            "page_width": 1275,
            "page_height": 1650,
            "content": "9/21/13 Sysinternals Freeware - Information for Windows NT and Windows 2000 - Inside I/O Completion Ports Copyright © 1998 Mark Russinovich Last updated July 30, 1998 Introduction Writing a high-performance server application requires implementing an efficient threading model. Having either too few or too many server threads to process client requests can lead to performance problems. For example, if a server creates a single thread to handle all requests clients can become starved since the server will be tied up processing one request at a time. Of course, a single thread could simultaneously process multiple requests, switching from one to another as I/O operations are started, but this architecture introduces significant complexity and cannot take advantage of multiprocessor systems. At the other extreme a server could create a big pool of threads so that virtually every client request is processed by a dedicated thread. This scenario usually leads to thread-thrashing, where lots of threads wake-up, perform some CPU processing, block waiting for I/O and then after request procesing is completed block again waiting for a new request. If nothing else, context-switches are caused by the scheduler having to divide processor time among multiple active threads. http://doc.sch130.nsc.ru/www.sysinternals.com/ntw2k/info/comport.shtml Go SEP NOV DEC 1 2009 2010 2011 19 captures 26 Jul 10 ‑ 15 Aug 13",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/0ddd885d-80d2-4f4e-b5d2-359e67636bee.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b9aff9c5c6ecb95b552e2de0eb07880d4bce296bf3e03430af650777be8ae39a",
            "html": "<p>9/21/13 Sysinternals Freeware - Information for Windows NT and Windows 2000 - Inside I/O Completion Ports Copyright © 1998 Mark Russinovich Last updated July 30, 1998 Introduction Writing a high-performance server application requires implementing an efficient threading model. Having either too few or too many server threads to process client requests can lead to performance problems. For example, if a server creates a single thread to handle all requests clients can become starved since the server will be tied up processing one request at a time. Of course, a single thread could simultaneously process multiple requests, switching from one to another as I/O operations are started, but this architecture introduces significant complexity and cannot take advantage of multiprocessor systems. At the other extreme a server could create a big pool of threads so that virtually every client request is processed by a dedicated thread. This scenario usually leads to thread-thrashing, where lots of threads wake-up, perform some CPU processing, block waiting for I/O and then after request procesing is completed block again waiting for a new request. If nothing else, context-switches are caused by the scheduler having to divide processor time among multiple active threads. http://doc.sch130.nsc.ru/www.sysinternals.com/ntw2k/info/comport.shtml Go SEP NOV DEC 1 2009 2010 2011 19 captures 26 Jul 10 ‑ 15 Aug 13</p>",
            "markdown": "9/21/13 Sysinternals Freeware - Information for Windows NT and Windows 2000 - Inside I/O Completion Ports Copyright © 1998 Mark Russinovich Last updated July 30, 1998 Introduction Writing a high-performance server application requires implementing an efficient threading model. Having either too few or too many server threads to process client requests can lead to performance problems. For example, if a server creates a single thread to handle all requests clients can become starved since the server will be tied up processing one request at a time. Of course, a single thread could simultaneously process multiple requests, switching from one to another as I/O operations are started, but this architecture introduces significant complexity and cannot take advantage of multiprocessor systems. At the other extreme a server could create a big pool of threads so that virtually every client request is processed by a dedicated thread. This scenario usually leads to thread-thrashing, where lots of threads wake-up, perform some CPU processing, block waiting for I/O and then after request procesing is completed block again waiting for a new request. If nothing else, context-switches are caused by the scheduler having to divide processor time among multiple active threads. http://doc.sch130.nsc.ru/www.sysinternals.com/ntw2k/info/comport.shtml Go SEP NOV DEC 1 2009 2010 2011 19 captures 26 Jul 10 ‑ 15 Aug 13\n\n"
          },
          {
            "segment_id": "efe7088f-f497-4f5d-aa81-5209c26d60a7",
            "bbox": {
              "left": 388.5833,
              "top": 1034.4166,
              "width": 774.9166,
              "height": 97.83333
            },
            "page_number": 1,
            "page_width": 1275,
            "page_height": 1650,
            "content": "Windows NT 3.5 introduced a set of APIs that make this goal relatively easy to achieve. The APIs are centered on an object called a completion port. In this article I'm going to provide an overview of how completion ports are used and then go inside them to show you how Windows NT implements them.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/efe7088f-f497-4f5d-aa81-5209c26d60a7.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9be04d73ceceecf5c1f35b5480e418c1935b57761e3cb08968a1235ffa07aaa6",
            "html": "<p>Windows NT 3.5 introduced a set of APIs that make this goal relatively easy to achieve. The APIs are centered on an object called a completion port. In this article I'm going to provide an overview of how completion ports are used and then go inside them to show you how Windows NT implements them.</p>",
            "markdown": "Windows NT 3.5 introduced a set of APIs that make this goal relatively easy to achieve. The APIs are centered on an object called a completion port. In this article I'm going to provide an overview of how completion ports are used and then go inside them to show you how Windows NT implements them.\n\n"
          },
          {
            "segment_id": "762c24d0-a85c-4f4a-a43c-9da92b416068",
            "bbox": {
              "left": 388.5833,
              "top": 1151.0833,
              "width": 254.08333,
              "height": 22.833332
            },
            "page_number": 1,
            "page_width": 1275,
            "page_height": 1650,
            "content": "Using I/O Completion Ports",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/762c24d0-a85c-4f4a-a43c-9da92b416068.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=9a50aa53ded1f3225b723149288a0b381e7c6767d4ceaeb69d71ec095199da93",
            "html": "<p>Using I/O Completion Ports</p>",
            "markdown": "Using I/O Completion Ports\n\n"
          },
          {
            "segment_id": "cec838c3-35ac-4ef8-b327-d4c0196d5564",
            "bbox": {
              "left": 386.5,
              "top": 1192.75,
              "width": 774.9166,
              "height": 231.16666
            },
            "page_number": 1,
            "page_width": 1275,
            "page_height": 1650,
            "content": "Applications use completion ports as the the focal point for the completion of I/O associated with multiple file handles. Once a file is associated with a completion port any asynchronous I/O operations that complete on the file result in a completion packet being queued to the port. A thread can wait for any outstanding I/Os to complete on multiple files simply by waiting for a completion packet to be queued on the completion port. The Win32 API provides similar functionality with the WaitForMultipleObjects API, but the advantage that completion ports have is that concurrency, or the number of threads that an application has actively servicing client requests, is controlled with the aid of the system.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/cec838c3-35ac-4ef8-b327-d4c0196d5564.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4d0a020cca3e6267f794786065a44eb1233c6e2624eb4a27fb0b17652fef5b2a",
            "html": "<p>Applications use completion ports as the the focal point for the completion of I/O associated with multiple file handles. Once a file is associated with a completion port any asynchronous I/O operations that complete on the file result in a completion packet being queued to the port. A thread can wait for any outstanding I/Os to complete on multiple files simply by waiting for a completion packet to be queued on the completion port. The Win32 API provides similar functionality with the WaitForMultipleObjects API, but the advantage that completion ports have is that concurrency, or the number of threads that an application has actively servicing client requests, is controlled with the aid of the system.</p>",
            "markdown": "Applications use completion ports as the the focal point for the completion of I/O associated with multiple file handles. Once a file is associated with a completion port any asynchronous I/O operations that complete on the file result in a completion packet being queued to the port. A thread can wait for any outstanding I/Os to complete on multiple files simply by waiting for a completion packet to be queued on the completion port. The Win32 API provides similar functionality with the WaitForMultipleObjects API, but the advantage that completion ports have is that concurrency, or the number of threads that an application has actively servicing client requests, is controlled with the aid of the system.\n\n"
          }
        ],
        "chunk_length": 493
      },
      {
        "segments": [
          {
            "segment_id": "9643d4ad-0f14-4ee3-8260-dd99bcd281a9",
            "bbox": {
              "left": 388.5833,
              "top": 1451.0833,
              "width": 770.75,
              "height": 147.83333
            },
            "page_number": 1,
            "page_width": 1275,
            "page_height": 1650,
            "content": "When an application creates a completion port it specifies a concurrency value. This value indicates the maximum number of threads associated with the port that should be running at any given point in time. As I stated earlier, the ideal is to have one thread active at any given point in time for every processor in the system. The concurrency value associated with a port is used by NT to control how many threads an application has active - if the number of active threads associated with a port equals the",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/9643d4ad-0f14-4ee3-8260-dd99bcd281a9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a0f2777f052dc5f55737f8c6e80f25d8c1edeb8661c41991429b97a4cf8c4d8a",
            "html": "<p>When an application creates a completion port it specifies a concurrency value. This value indicates the maximum number of threads associated with the port that should be running at any given point in time. As I stated earlier, the ideal is to have one thread active at any given point in time for every processor in the system. The concurrency value associated with a port is used by NT to control how many threads an application has active - if the number of active threads associated with a port equals the</p>",
            "markdown": "When an application creates a completion port it specifies a concurrency value. This value indicates the maximum number of threads associated with the port that should be running at any given point in time. As I stated earlier, the ideal is to have one thread active at any given point in time for every processor in the system. The concurrency value associated with a port is used by NT to control how many threads an application has active - if the number of active threads associated with a port equals the\n\n"
          },
          {
            "segment_id": "5f37ae63-aa73-4cc1-af75-df95962b0ec5",
            "bbox": {
              "left": 388.5833,
              "top": 63.58333,
              "width": 756.1666,
              "height": 126.99999
            },
            "page_number": 2,
            "page_width": 1275,
            "page_height": 1650,
            "content": "has active - if the number of active threads associated with a port equals the concurrency value then a thread that is waiting on the completion port will not be allowed to run. Instead, it is expected that one of the active threads will finish processing its current request and check to see if there's another packet waiting at the port - if there is then it simply grabs it and goes off to process it. When this happens there is no context switch, and the CPUs are utilized to near their full capacity.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/5f37ae63-aa73-4cc1-af75-df95962b0ec5.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0e614c4688e34532ff8b5c86782579d9ac663a0574a30943dbfc11f28b0b7f6f",
            "html": "<p>has active - if the number of active threads associated with a port equals the concurrency value then a thread that is waiting on the completion port will not be allowed to run. Instead, it is expected that one of the active threads will finish processing its current request and check to see if there's another packet waiting at the port - if there is then it simply grabs it and goes off to process it. When this happens there is no context switch, and the CPUs are utilized to near their full capacity.</p>",
            "markdown": "has active - if the number of active threads associated with a port equals the concurrency value then a thread that is waiting on the completion port will not be allowed to run. Instead, it is expected that one of the active threads will finish processing its current request and check to see if there's another packet waiting at the port - if there is then it simply grabs it and goes off to process it. When this happens there is no context switch, and the CPUs are utilized to near their full capacity.\n\n"
          },
          {
            "segment_id": "67e19c37-8e0a-4aa2-8dea-2041696f77e4",
            "bbox": {
              "left": 388.5833,
              "top": 217.74998,
              "width": 777,
              "height": 149.91666
            },
            "page_number": 2,
            "page_width": 1275,
            "page_height": 1650,
            "content": "Figure 1 below shows a high-level picture of completion port operation. Incoming client requests cause completion packets to be queued at the port. A number of threads, up to the concurrency limit for the port, are allowed by NT to process client requests. Any additional threads associated with the port are blocked until the number of active threads drops, as can happen when an active thread blocks on file I/O. I'll discuss this further a little later.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/67e19c37-8e0a-4aa2-8dea-2041696f77e4.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=05e1dbbf1994c27d26eccdb7074479d508992d33661cbe5771e8d9379b714942",
            "html": "<p>Figure 1 below shows a high-level picture of completion port operation. Incoming client requests cause completion packets to be queued at the port. A number of threads, up to the concurrency limit for the port, are allowed by NT to process client requests. Any additional threads associated with the port are blocked until the number of active threads drops, as can happen when an active thread blocks on file I/O. I'll discuss this further a little later.</p>",
            "markdown": "Figure 1 below shows a high-level picture of completion port operation. Incoming client requests cause completion packets to be queued at the port. A number of threads, up to the concurrency limit for the port, are allowed by NT to process client requests. Any additional threads associated with the port are blocked until the number of active threads drops, as can happen when an active thread blocks on file I/O. I'll discuss this further a little later.\n\n"
          },
          {
            "segment_id": "bac69dec-baa1-4572-af5d-5b71a7987f6f",
            "bbox": {
              "left": 396.91666,
              "top": 403.16666,
              "width": 731.1666,
              "height": 431.16666
            },
            "page_number": 2,
            "page_width": 1275,
            "page_height": 1650,
            "content": "Incoming client request CompletionPort Threads blocked on the Completion Port Perform CpU processing (active) Perform filel/O-Block (inactive) Perform Cpuprocessing (active) Figure1.Completion PortFlow",
            "segment_type": "Picture",
            "ocr": [
              {
                "bbox": {
                  "left": 5,
                  "top": 6,
                  "width": 193,
                  "height": 18
                },
                "text": "Incoming client request",
                "confidence": 0.9714779
              },
              {
                "bbox": {
                  "left": 199,
                  "top": 98,
                  "width": 129,
                  "height": 18
                },
                "text": "CompletionPort",
                "confidence": 0.9878465
              },
              {
                "bbox": {
                  "left": 486,
                  "top": 154,
                  "width": 187,
                  "height": 19
                },
                "text": "Threads blocked on the",
                "confidence": 0.96016484
              },
              {
                "bbox": {
                  "left": 520,
                  "top": 176,
                  "width": 131,
                  "height": 18
                },
                "text": "Completion Port",
                "confidence": 0.96769327
              },
              {
                "bbox": {
                  "left": 183,
                  "top": 194,
                  "width": 196,
                  "height": 21
                },
                "text": "Perform CpU processing",
                "confidence": 0.9038145
              },
              {
                "bbox": {
                  "left": 239,
                  "top": 211,
                  "width": 60,
                  "height": 18
                },
                "text": "(active)",
                "confidence": 0.93528396
              },
              {
                "bbox": {
                  "left": 193,
                  "top": 277,
                  "width": 174,
                  "height": 14
                },
                "text": "Perform filel/O-Block",
                "confidence": 0.89478403
              },
              {
                "bbox": {
                  "left": 239,
                  "top": 291,
                  "width": 75,
                  "height": 18
                },
                "text": "(inactive)",
                "confidence": 0.96972597
              },
              {
                "bbox": {
                  "left": 187,
                  "top": 352,
                  "width": 197,
                  "height": 21
                },
                "text": "Perform Cpuprocessing",
                "confidence": 0.92524767
              },
              {
                "bbox": {
                  "left": 249,
                  "top": 369,
                  "width": 61,
                  "height": 18
                },
                "text": "(active)",
                "confidence": 0.9775684
              },
              {
                "bbox": {
                  "left": 422,
                  "top": 405,
                  "width": 240,
                  "height": 18
                },
                "text": "Figure1.Completion PortFlow",
                "confidence": 0.9584557
              }
            ],
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/bac69dec-baa1-4572-af5d-5b71a7987f6f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b25ff6f0e84fdc8583216426e9ad10e50cfeff45e9d179686863590b179fa36d",
            "html": "<img src=\"https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/bac69dec-baa1-4572-af5d-5b71a7987f6f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b25ff6f0e84fdc8583216426e9ad10e50cfeff45e9d179686863590b179fa36d\" />",
            "markdown": "![Image](https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/bac69dec-baa1-4572-af5d-5b71a7987f6f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b25ff6f0e84fdc8583216426e9ad10e50cfeff45e9d179686863590b179fa36d)"
          },
          {
            "segment_id": "37da0206-601d-4c7a-b02b-ee3344382b06",
            "bbox": {
              "left": 388.5833,
              "top": 848.99994,
              "width": 762.4166,
              "height": 29.083332
            },
            "page_number": 2,
            "page_width": 1275,
            "page_height": 1650,
            "content": "A completion port is created with a call to the Win32 API CreateIoCompletionPort:",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/37da0206-601d-4c7a-b02b-ee3344382b06.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=43c70e603129caadf1e4d5f6bc4c35c7c936dba1ea6fde54edbcc0376d4b68e7",
            "html": "<p>A completion port is created with a call to the Win32 API CreateIoCompletionPort:</p>",
            "markdown": "A completion port is created with a call to the Win32 API CreateIoCompletionPort:\n\n"
          },
          {
            "segment_id": "a55893ff-34da-4bd1-af30-72a889ff76ba",
            "bbox": {
              "left": 388.5833,
              "top": 898.99994,
              "width": 416.5833,
              "height": 152
            },
            "page_number": 2,
            "page_width": 1275,
            "page_height": 1650,
            "content": "HANDLE CreateIoCompletionPort( HANDLE FileHandle, HANDLE ExistingCompletionPort, DWORD CompletionKey , DWORD NumberOfConcurrentThreads );",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/a55893ff-34da-4bd1-af30-72a889ff76ba.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b05a82ebf08d58c0c57d9f231b470279f0e8484e0a84ea1342f405bac87b7e57",
            "html": "<p>HANDLE CreateIoCompletionPort( HANDLE FileHandle, HANDLE ExistingCompletionPort, DWORD CompletionKey , DWORD NumberOfConcurrentThreads );</p>",
            "markdown": "HANDLE CreateIoCompletionPort( HANDLE FileHandle, HANDLE ExistingCompletionPort, DWORD CompletionKey , DWORD NumberOfConcurrentThreads );\n\n"
          },
          {
            "segment_id": "6871effb-dc1c-4418-92e0-e5b328d03802",
            "bbox": {
              "left": 388.5833,
              "top": 1103.1666,
              "width": 760.3333,
              "height": 174.91666
            },
            "page_number": 2,
            "page_width": 1275,
            "page_height": 1650,
            "content": "To create the port an application passes in a NULL for the ExistingCompletionPort parameter and indicates the concurreny value with the NumberOfConcurrentThreads parameter. If a FileHandle parameter is specified then the file handle becomes associated with the port. When an I/O request that has been issued on the file handle completes a completion packet is queued to the completion port. To retrieve a completion packet and possibly block waiting for one to arrive a thread calls the GetQueuedCompletionStatus API:",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/6871effb-dc1c-4418-92e0-e5b328d03802.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4eeeadb1198c9950b1bf431b4b03d39882be9f1dc14ea66a88c41417adbe0182",
            "html": "<p>To create the port an application passes in a NULL for the ExistingCompletionPort parameter and indicates the concurreny value with the NumberOfConcurrentThreads parameter. If a FileHandle parameter is specified then the file handle becomes associated with the port. When an I/O request that has been issued on the file handle completes a completion packet is queued to the completion port. To retrieve a completion packet and possibly block waiting for one to arrive a thread calls the GetQueuedCompletionStatus API:</p>",
            "markdown": "To create the port an application passes in a NULL for the ExistingCompletionPort parameter and indicates the concurreny value with the NumberOfConcurrentThreads parameter. If a FileHandle parameter is specified then the file handle becomes associated with the port. When an I/O request that has been issued on the file handle completes a completion packet is queued to the completion port. To retrieve a completion packet and possibly block waiting for one to arrive a thread calls the GetQueuedCompletionStatus API:\n\n"
          },
          {
            "segment_id": "3dfd3a0c-1d65-4a93-bb6b-6917bd5539ea",
            "bbox": {
              "left": 49,
              "top": 1526.0833,
              "width": 1118.6666,
              "height": 91.58333
            },
            "page_number": 2,
            "page_width": 1275,
            "page_height": 1650,
            "content": "web.archive.org/web/20101101112358/http://doc.sch130.nsc.ru/www.sysinternals.com/ntw2k/info/comport.shtml Threads that block on a completion port become associated with the port and are woken in LIFO order so that the thread that blocked most recently is the one that is given the next packet. Threads that block for long periods of time can have their stacks",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/3dfd3a0c-1d65-4a93-bb6b-6917bd5539ea.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=453c1e69bd2d4d294df2cddc01822468d7e5490324270da4300f549e18723d2f",
            "html": "<p>web.archive.org/web/20101101112358/http://doc.sch130.nsc.ru/www.sysinternals.com/ntw2k/info/comport.shtml Threads that block on a completion port become associated with the port and are woken in LIFO order so that the thread that blocked most recently is the one that is given the next packet. Threads that block for long periods of time can have their stacks</p>",
            "markdown": "web.archive.org/web/20101101112358/http://doc.sch130.nsc.ru/www.sysinternals.com/ntw2k/info/comport.shtml Threads that block on a completion port become associated with the port and are woken in LIFO order so that the thread that blocked most recently is the one that is given the next packet. Threads that block for long periods of time can have their stacks\n\n"
          },
          {
            "segment_id": "9420d691-c619-4336-8d8c-a88e435e5c98",
            "bbox": {
              "left": 388.5833,
              "top": 1301.0833,
              "width": 447.8333,
              "height": 181.16666
            },
            "page_number": 2,
            "page_width": 1275,
            "page_height": 1650,
            "content": "BOOL GetQueuedCompletionStatus( HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, LPDWORD CompletionKey , LPOVERLAPPED *lpOverlapped, DWORD dwMiillisecondTimeout );",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/9420d691-c619-4336-8d8c-a88e435e5c98.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c335bd794161a6967db1f2c32447c830aa46a2d2048623e992d121644cd7cee9",
            "html": "<p>BOOL GetQueuedCompletionStatus( HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, LPDWORD CompletionKey , LPOVERLAPPED *lpOverlapped, DWORD dwMiillisecondTimeout );</p>",
            "markdown": "BOOL GetQueuedCompletionStatus( HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, LPDWORD CompletionKey , LPOVERLAPPED *lpOverlapped, DWORD dwMiillisecondTimeout );\n\n"
          },
          {
            "segment_id": "c0d44173-e091-4894-beae-5f674f65a1a6",
            "bbox": {
              "left": 388.5833,
              "top": 55.249996,
              "width": 774.9166,
              "height": 62.416664
            },
            "page_number": 3,
            "page_width": 1275,
            "page_height": 1650,
            "content": "given the next packet. Threads that block for long periods of time can have their stacks swapped out to disk, so if there are more threads associated with a port then there is work to process the in-memory footprints of threads blocked the longest are minimized.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/c0d44173-e091-4894-beae-5f674f65a1a6.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5d1ca9aaecaf2f8565a00b2e5c64619555440303da83790547a4bb7178f078b4",
            "html": "<p>given the next packet. Threads that block for long periods of time can have their stacks swapped out to disk, so if there are more threads associated with a port then there is work to process the in-memory footprints of threads blocked the longest are minimized.</p>",
            "markdown": "given the next packet. Threads that block for long periods of time can have their stacks swapped out to disk, so if there are more threads associated with a port then there is work to process the in-memory footprints of threads blocked the longest are minimized.\n\n"
          }
        ],
        "chunk_length": 474
      },
      {
        "segments": [
          {
            "segment_id": "cfef9689-07fa-4ac2-a40b-7c12efa1673e",
            "bbox": {
              "left": 386.5,
              "top": 144.83333,
              "width": 777,
              "height": 274.91666
            },
            "page_number": 3,
            "page_width": 1275,
            "page_height": 1650,
            "content": "A server application will usually receive client requests via network endpoints that are represented as file handles. Examples include Winsock2 sockets or named pipes. As the server creates its communications endpoints it associates them with a completion port and its threads wait for incoming requests by calling GetQueuedCompletionStatus on the port. When a thread is given a packet from the completion port it will go off and start processing the request, becoming an active thread. Many times a thread will block during its processing, like when it needs to read or write data to a file on disk, or when it synchronizes with other threads. Windows NT is clever enough to detect this and recognize that the completion port has one less active thread. Therefore, when a thread becomes inactive because it blocks, a thread waiting on the completion port will be woken if there is packet in the queue.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/cfef9689-07fa-4ac2-a40b-7c12efa1673e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f3de662626e0390d4cf92eb009ab194e2b7eec6ae336d5dac00dde4cf4b85f8e",
            "html": "<p>A server application will usually receive client requests via network endpoints that are represented as file handles. Examples include Winsock2 sockets or named pipes. As the server creates its communications endpoints it associates them with a completion port and its threads wait for incoming requests by calling GetQueuedCompletionStatus on the port. When a thread is given a packet from the completion port it will go off and start processing the request, becoming an active thread. Many times a thread will block during its processing, like when it needs to read or write data to a file on disk, or when it synchronizes with other threads. Windows NT is clever enough to detect this and recognize that the completion port has one less active thread. Therefore, when a thread becomes inactive because it blocks, a thread waiting on the completion port will be woken if there is packet in the queue.</p>",
            "markdown": "A server application will usually receive client requests via network endpoints that are represented as file handles. Examples include Winsock2 sockets or named pipes. As the server creates its communications endpoints it associates them with a completion port and its threads wait for incoming requests by calling GetQueuedCompletionStatus on the port. When a thread is given a packet from the completion port it will go off and start processing the request, becoming an active thread. Many times a thread will block during its processing, like when it needs to read or write data to a file on disk, or when it synchronizes with other threads. Windows NT is clever enough to detect this and recognize that the completion port has one less active thread. Therefore, when a thread becomes inactive because it blocks, a thread waiting on the completion port will be woken if there is packet in the queue.\n\n"
          },
          {
            "segment_id": "eb960681-19c5-4dbb-a3e4-0514049be78f",
            "bbox": {
              "left": 388.5833,
              "top": 446.91666,
              "width": 764.5,
              "height": 274.91666
            },
            "page_number": 3,
            "page_width": 1275,
            "page_height": 1650,
            "content": "Microsoft's guidelines are to set the concurrency value roughly equal to the number of processors in a system. Note that it is possible for the number of active threads for a completion port to exceed the concurrency limit. Consider a case where the limit is specified as 1. A client request comes in and a thread is dispatched to process the request, becoming active. A second requests comes in but a second thread waiting on the port is not allowed to proceed because the concurrency limit has been reached. Then the first thread blocks waiting for a file I/O so it becomes inactive. The second thread is then released and while it is still active the first thread's file I/O is completes, making it active again. At that point in time, and until one of the threads blocks, the concurrency value is 2, which is higher than the limit of 1. Most of the time the active count will remain at or just above the concurrency limit.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/eb960681-19c5-4dbb-a3e4-0514049be78f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=52117be000fcbc8af3b880e53a91efc13565aac875707873260661299e5dc488",
            "html": "<p>Microsoft's guidelines are to set the concurrency value roughly equal to the number of processors in a system. Note that it is possible for the number of active threads for a completion port to exceed the concurrency limit. Consider a case where the limit is specified as 1. A client request comes in and a thread is dispatched to process the request, becoming active. A second requests comes in but a second thread waiting on the port is not allowed to proceed because the concurrency limit has been reached. Then the first thread blocks waiting for a file I/O so it becomes inactive. The second thread is then released and while it is still active the first thread's file I/O is completes, making it active again. At that point in time, and until one of the threads blocks, the concurrency value is 2, which is higher than the limit of 1. Most of the time the active count will remain at or just above the concurrency limit.</p>",
            "markdown": "Microsoft's guidelines are to set the concurrency value roughly equal to the number of processors in a system. Note that it is possible for the number of active threads for a completion port to exceed the concurrency limit. Consider a case where the limit is specified as 1. A client request comes in and a thread is dispatched to process the request, becoming active. A second requests comes in but a second thread waiting on the port is not allowed to proceed because the concurrency limit has been reached. Then the first thread blocks waiting for a file I/O so it becomes inactive. The second thread is then released and while it is still active the first thread's file I/O is completes, making it active again. At that point in time, and until one of the threads blocks, the concurrency value is 2, which is higher than the limit of 1. Most of the time the active count will remain at or just above the concurrency limit.\n\n"
          },
          {
            "segment_id": "dcd8346f-80b1-47eb-9d12-04c4c89bf395",
            "bbox": {
              "left": 388.5833,
              "top": 751.0833,
              "width": 716.5833,
              "height": 99.916664
            },
            "page_number": 3,
            "page_width": 1275,
            "page_height": 1650,
            "content": "The completion port API also makes it possible for a server application to queue privately defined completion packets to a completion port using PostQueuedCompletionStatus. Servers typically use this function to inform its threads of external events such as the need to shut down gracefully.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/dcd8346f-80b1-47eb-9d12-04c4c89bf395.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=46cfc0fb0b4b2525e2969af90ebfeb6e88b060078e32a13564db5a0e902016aa",
            "html": "<p>The completion port API also makes it possible for a server application to queue privately defined completion packets to a completion port using PostQueuedCompletionStatus. Servers typically use this function to inform its threads of external events such as the need to shut down gracefully.</p>",
            "markdown": "The completion port API also makes it possible for a server application to queue privately defined completion packets to a completion port using PostQueuedCompletionStatus. Servers typically use this function to inform its threads of external events such as the need to shut down gracefully.\n\n"
          },
          {
            "segment_id": "ec74d290-066f-465d-8e8f-c92a1192e20e",
            "bbox": {
              "left": 388.5833,
              "top": 863.5833,
              "width": 231.16666,
              "height": 24.916666
            },
            "page_number": 3,
            "page_width": 1275,
            "page_height": 1650,
            "content": "Completion Port Internals",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/ec74d290-066f-465d-8e8f-c92a1192e20e.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b18c8c8c732db6471f893ca2e8b1415a90ba804e9cb5799c21b8392848535b56",
            "html": "<p>Completion Port Internals</p>",
            "markdown": "Completion Port Internals\n\n"
          },
          {
            "segment_id": "1b5dcd99-ee9a-40f2-9ac7-813ad3ed3606",
            "bbox": {
              "left": 386.5,
              "top": 907.3333,
              "width": 764.5,
              "height": 272.8333
            },
            "page_number": 3,
            "page_width": 1275,
            "page_height": 1650,
            "content": "A call to the Win32 API CreateIoCompletionPort with a NULL completion port handle results in the execution of the native API function NtCreateIoCompletion, which invokes the corresponding kernel-mode system service of the same name. Internally, completion ports are based on an undocumented executive synchronization object called a Queue. Thus, the system service creates a completion port object and initializes a queue object in the port's allocated memory (a pointer to the port also points to the queue object since the queue is at the start of the port memory). A queue object has (coincidentally) a concurrency value that is specified when a thread initializes one, and in this case the value that is used is the one that was passed to CreateIoCompletionPort. KeInitializeQueue is the function that NtCreateIoCompletion calls to initialize a port's queue object.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/1b5dcd99-ee9a-40f2-9ac7-813ad3ed3606.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=fb76a52fa7b4f0e00048ed648f80f816fed854f1b5e54760734bc606737d137c",
            "html": "<p>A call to the Win32 API CreateIoCompletionPort with a NULL completion port handle results in the execution of the native API function NtCreateIoCompletion, which invokes the corresponding kernel-mode system service of the same name. Internally, completion ports are based on an undocumented executive synchronization object called a Queue. Thus, the system service creates a completion port object and initializes a queue object in the port's allocated memory (a pointer to the port also points to the queue object since the queue is at the start of the port memory). A queue object has (coincidentally) a concurrency value that is specified when a thread initializes one, and in this case the value that is used is the one that was passed to CreateIoCompletionPort. KeInitializeQueue is the function that NtCreateIoCompletion calls to initialize a port's queue object.</p>",
            "markdown": "A call to the Win32 API CreateIoCompletionPort with a NULL completion port handle results in the execution of the native API function NtCreateIoCompletion, which invokes the corresponding kernel-mode system service of the same name. Internally, completion ports are based on an undocumented executive synchronization object called a Queue. Thus, the system service creates a completion port object and initializes a queue object in the port's allocated memory (a pointer to the port also points to the queue object since the queue is at the start of the port memory). A queue object has (coincidentally) a concurrency value that is specified when a thread initializes one, and in this case the value that is used is the one that was passed to CreateIoCompletionPort. KeInitializeQueue is the function that NtCreateIoCompletion calls to initialize a port's queue object.\n\n"
          }
        ],
        "chunk_length": 499
      },
      {
        "segments": [
          {
            "segment_id": "b1597991-3652-4d14-b987-8463ff878a34",
            "bbox": {
              "left": 388.5833,
              "top": 1211.5,
              "width": 777,
              "height": 174.91666
            },
            "page_number": 3,
            "page_width": 1275,
            "page_height": 1650,
            "content": "When an application calls CreateIoCompletionPort to associate a file handle with a port the Win32 API invokes the native function NtSetInformationFile with the file handle as the primary parameter. The information class that is set is FileCompletionInformation and the completion port's handle and the CompletionKey parameter from CreateIoCompletionPort are the data values. NtSetInformationFile dereferences the file handle to obtain the file object and allocates a completion context data structure, which is defined in NTDDK.H as:",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/b1597991-3652-4d14-b987-8463ff878a34.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5bce1122be176c48c5df82c4ce4ef5461dde8eb9be4ad26c3201b2b11b1c04a7",
            "html": "<p>When an application calls CreateIoCompletionPort to associate a file handle with a port the Win32 API invokes the native function NtSetInformationFile with the file handle as the primary parameter. The information class that is set is FileCompletionInformation and the completion port's handle and the CompletionKey parameter from CreateIoCompletionPort are the data values. NtSetInformationFile dereferences the file handle to obtain the file object and allocates a completion context data structure, which is defined in NTDDK.H as:</p>",
            "markdown": "When an application calls CreateIoCompletionPort to associate a file handle with a port the Win32 API invokes the native function NtSetInformationFile with the file handle as the primary parameter. The information class that is set is FileCompletionInformation and the completion port's handle and the CompletionKey parameter from CreateIoCompletionPort are the data values. NtSetInformationFile dereferences the file handle to obtain the file object and allocates a completion context data structure, which is defined in NTDDK.H as:\n\n"
          },
          {
            "segment_id": "84077775-f482-4c82-afea-b80f780fec8f",
            "bbox": {
              "left": 384.41666,
              "top": 1407.3333,
              "width": 704.0833,
              "height": 104.08333
            },
            "page_number": 3,
            "page_width": 1275,
            "page_height": 1650,
            "content": "typedef struct _IO_COMPLETION_CONTEXT { PVOID Port; ULONG Key; } IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT;",
            "segment_type": "List item",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/84077775-f482-4c82-afea-b80f780fec8f.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f87ebee781566406e86f8fc809176e8df7450cd654e64ab287938b2181b75f8c",
            "html": "<ul><li>typedef struct _IO_COMPLETION_CONTEXT { PVOID Port; ULONG Key; } IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT;</li></ul>",
            "markdown": "- typedef struct _IO_COMPLETION_CONTEXT { PVOID Port; ULONG Key; } IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT;\n\n"
          },
          {
            "segment_id": "8544fadd-1bf8-4b2f-9b0a-0e35bec477a8",
            "bbox": {
              "left": 386.5,
              "top": 53.166664,
              "width": 764.5,
              "height": 172.83333
            },
            "page_number": 4,
            "page_width": 1275,
            "page_height": 1650,
            "content": "point at the context structure. When an I/O operation completes on a file object the internal I/O manager function IopCompleteRequest executes and, if the I/O was asynchronous, checks to see if the CompletionContext field in the file object is non- NULL. If its non-NULL the I/O Manager allocates a completion packet and queues it to the completion port by calling KeInsertQueue with the port as the queue on which to insert the packet (remember that the completion port object and queue object are synonymous).",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/8544fadd-1bf8-4b2f-9b0a-0e35bec477a8.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f2b4da194df4152677443f2a030a0fce9af80bcb3bd5fd93f7263f27d0212055",
            "html": "<p>point at the context structure. When an I/O operation completes on a file object the internal I/O manager function IopCompleteRequest executes and, if the I/O was asynchronous, checks to see if the CompletionContext field in the file object is non- NULL. If its non-NULL the I/O Manager allocates a completion packet and queues it to the completion port by calling KeInsertQueue with the port as the queue on which to insert the packet (remember that the completion port object and queue object are synonymous).</p>",
            "markdown": "point at the context structure. When an I/O operation completes on a file object the internal I/O manager function IopCompleteRequest executes and, if the I/O was asynchronous, checks to see if the CompletionContext field in the file object is non- NULL. If its non-NULL the I/O Manager allocates a completion packet and queues it to the completion port by calling KeInsertQueue with the port as the queue on which to insert the packet (remember that the completion port object and queue object are synonymous).\n\n"
          },
          {
            "segment_id": "2eea135e-a93f-4d13-87b9-37aba4b1b56d",
            "bbox": {
              "left": 388.5833,
              "top": 251.08333,
              "width": 760.3333,
              "height": 124.916664
            },
            "page_number": 4,
            "page_width": 1275,
            "page_height": 1650,
            "content": "When GetQueuedCompletionStatus is invoked by a server thread, it calls the native API function NtRemoveIoCompletion, which transfers control to the NtRemoveIoCompletion system service. After validating parameters and translating the completion port handle to a pointer to the port, NtRemoveIoCompletion calls KeRemoveQueue.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/2eea135e-a93f-4d13-87b9-37aba4b1b56d.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0c410336c9a914f1331c86c365a9d8d08c04154846588605b0447b49cc88a0d0",
            "html": "<p>When GetQueuedCompletionStatus is invoked by a server thread, it calls the native API function NtRemoveIoCompletion, which transfers control to the NtRemoveIoCompletion system service. After validating parameters and translating the completion port handle to a pointer to the port, NtRemoveIoCompletion calls KeRemoveQueue.</p>",
            "markdown": "When GetQueuedCompletionStatus is invoked by a server thread, it calls the native API function NtRemoveIoCompletion, which transfers control to the NtRemoveIoCompletion system service. After validating parameters and translating the completion port handle to a pointer to the port, NtRemoveIoCompletion calls KeRemoveQueue.\n\n"
          },
          {
            "segment_id": "2046637a-5681-4163-98c0-4a5af6e3f824",
            "bbox": {
              "left": 386.5,
              "top": 405.24997,
              "width": 777,
              "height": 197.83333
            },
            "page_number": 4,
            "page_width": 1275,
            "page_height": 1650,
            "content": "As you can see, KeRemoveQueue and KeInsertQueue are the engine behind completion ports and are the functions that determine whether a thread waiting for an I/O completion packet should be activated or not. Internally, a queue object maintains a count of the current number of active threads and the maximum active threads. If the current number equals or exceeds the maximum when a thread calls KeRemoveQueue, the thread will be put (in LIFO order) onto a list of threads waiting for a turn to process a completion packet. The list of threads hangs off the queue object. A thread's control block data structure has a pointer in it that references the",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/2046637a-5681-4163-98c0-4a5af6e3f824.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=8899e524551b9e74cbd74342bc4a70ebed9a0d58c3b65f78325027d159bfb1b2",
            "html": "<p>As you can see, KeRemoveQueue and KeInsertQueue are the engine behind completion ports and are the functions that determine whether a thread waiting for an I/O completion packet should be activated or not. Internally, a queue object maintains a count of the current number of active threads and the maximum active threads. If the current number equals or exceeds the maximum when a thread calls KeRemoveQueue, the thread will be put (in LIFO order) onto a list of threads waiting for a turn to process a completion packet. The list of threads hangs off the queue object. A thread's control block data structure has a pointer in it that references the</p>",
            "markdown": "As you can see, KeRemoveQueue and KeInsertQueue are the engine behind completion ports and are the functions that determine whether a thread waiting for an I/O completion packet should be activated or not. Internally, a queue object maintains a count of the current number of active threads and the maximum active threads. If the current number equals or exceeds the maximum when a thread calls KeRemoveQueue, the thread will be put (in LIFO order) onto a list of threads waiting for a turn to process a completion packet. The list of threads hangs off the queue object. A thread's control block data structure has a pointer in it that references the\n\n"
          },
          {
            "segment_id": "f4a7b2b7-643d-40f5-b252-6f92ac3c58bd",
            "bbox": {
              "left": 388.5833,
              "top": 615.6666,
              "width": 716.5833,
              "height": 47.833332
            },
            "page_number": 4,
            "page_width": 1275,
            "page_height": 1650,
            "content": "queue object of a queue that it is associated with; if the pointer is NULL then the thread is not associated with a queue.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/f4a7b2b7-643d-40f5-b252-6f92ac3c58bd.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1a4b2645e72ce812d5372dabee30e7bb616fae5f198db477e36382618870da5b",
            "html": "<p>queue object of a queue that it is associated with; if the pointer is NULL then the thread is not associated with a queue.</p>",
            "markdown": "queue object of a queue that it is associated with; if the pointer is NULL then the thread is not associated with a queue.\n\n"
          },
          {
            "segment_id": "0cf334f6-48c9-4ce7-9fd0-846cfa9030e9",
            "bbox": {
              "left": 386.5,
              "top": 692.75,
              "width": 770.75,
              "height": 274.91666
            },
            "page_number": 4,
            "page_width": 1275,
            "page_height": 1650,
            "content": "So how does NT keep track of threads that become inactive because they block on something other than the completion port? The answer lies in the queue pointer in a thread's control block. The scheduler routines that are executed in response to a thread blocking (KeWaitForSingleObject, KeDelayExecutionThread, etc.) check the thread's queue pointer and if its not NULL they will call KiActivateWaiterQueue, a queue-related function. KiActivateWaiterQueue decrements the count of active threads associated with the queue, and if the result is less than the maximum and there is at least one completion packet in the queue then the thread at the front of the queue's thread list is woken and given the oldest packet. Conversely, whenever a thread that is associated with a queue wakes up after blocking the scheduler executes the function KiUnwaitThread, which increments the queue's active count.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/0cf334f6-48c9-4ce7-9fd0-846cfa9030e9.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b10949e3fd1c7fa8e6f11f347ccf59341dbb58afa5477d81e56e33e777fa0f52",
            "html": "<p>So how does NT keep track of threads that become inactive because they block on something other than the completion port? The answer lies in the queue pointer in a thread's control block. The scheduler routines that are executed in response to a thread blocking (KeWaitForSingleObject, KeDelayExecutionThread, etc.) check the thread's queue pointer and if its not NULL they will call KiActivateWaiterQueue, a queue-related function. KiActivateWaiterQueue decrements the count of active threads associated with the queue, and if the result is less than the maximum and there is at least one completion packet in the queue then the thread at the front of the queue's thread list is woken and given the oldest packet. Conversely, whenever a thread that is associated with a queue wakes up after blocking the scheduler executes the function KiUnwaitThread, which increments the queue's active count.</p>",
            "markdown": "So how does NT keep track of threads that become inactive because they block on something other than the completion port? The answer lies in the queue pointer in a thread's control block. The scheduler routines that are executed in response to a thread blocking (KeWaitForSingleObject, KeDelayExecutionThread, etc.) check the thread's queue pointer and if its not NULL they will call KiActivateWaiterQueue, a queue-related function. KiActivateWaiterQueue decrements the count of active threads associated with the queue, and if the result is less than the maximum and there is at least one completion packet in the queue then the thread at the front of the queue's thread list is woken and given the oldest packet. Conversely, whenever a thread that is associated with a queue wakes up after blocking the scheduler executes the function KiUnwaitThread, which increments the queue's active count.\n\n"
          }
        ],
        "chunk_length": 486
      },
      {
        "segments": [
          {
            "segment_id": "0b32d4f0-9adc-47f1-84bf-278f727d6865",
            "bbox": {
              "left": 388.5833,
              "top": 996.9166,
              "width": 770.75,
              "height": 99.916664
            },
            "page_number": 4,
            "page_width": 1275,
            "page_height": 1650,
            "content": "Finally, the PostQueuedCompletionStatus Win32 API calls upon the native function NtSetIoCompletion. As with the other native APIs in the completion port group, this one invokes a system service bearing the same name, which simply inserts that packet onto the completion port's queue using KeInsertQueue.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/0b32d4f0-9adc-47f1-84bf-278f727d6865.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=168c3a6bdc822c2fe6b1650795b6ecd5aca83abd0e167ef2e6576366ff3c46c1",
            "html": "<p>Finally, the PostQueuedCompletionStatus Win32 API calls upon the native function NtSetIoCompletion. As with the other native APIs in the completion port group, this one invokes a system service bearing the same name, which simply inserts that packet onto the completion port's queue using KeInsertQueue.</p>",
            "markdown": "Finally, the PostQueuedCompletionStatus Win32 API calls upon the native function NtSetIoCompletion. As with the other native APIs in the completion port group, this one invokes a system service bearing the same name, which simply inserts that packet onto the completion port's queue using KeInsertQueue.\n\n"
          }
        ],
        "chunk_length": 44
      },
      {
        "segments": [
          {
            "segment_id": "945735ee-73eb-4aac-a951-17b9acbbf5de",
            "bbox": {
              "left": 388.5833,
              "top": 1126.0833,
              "width": 124.916664,
              "height": 22.833332
            },
            "page_number": 4,
            "page_width": 1275,
            "page_height": 1650,
            "content": "Not Exported",
            "segment_type": "Section header",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/945735ee-73eb-4aac-a951-17b9acbbf5de.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a2721e887bcc45b509bef59787ddd12fbb283db6a1abaf954ade73eb9e562d5d",
            "html": "<h2>Not Exported</h2>",
            "markdown": "## Not Exported\n\n"
          },
          {
            "segment_id": "14e6a758-50f0-4a1a-807c-340086b544b1",
            "bbox": {
              "left": 386.5,
              "top": 1165.6666,
              "width": 777,
              "height": 224.91666
            },
            "page_number": 4,
            "page_width": 1275,
            "page_height": 1650,
            "content": "Windows NT's completion port API provides an easy-to-use and efficient way to maximize a server's performance by minimizing context switches while obtaining high- degrees of parallelism. The API is made possible with support in the I/O Manager, Kernel, and system services. While the Queue object is exported for use by device drivers (it is undocumented but its interfaces are relatively easy to figure out), the completion port APIs are not. However, if the queue interfaces are derived it is possible to mimick the completion port interfaces by simply using the queue routines and manually associating file objects with queues by setting the CompletionContext entry.",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/14e6a758-50f0-4a1a-807c-340086b544b1.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1095fe7c85554610145cbd43260a4e9922d56723b7b8ae6fa5af3296ae3ef425",
            "html": "<p>Windows NT's completion port API provides an easy-to-use and efficient way to maximize a server's performance by minimizing context switches while obtaining high- degrees of parallelism. The API is made possible with support in the I/O Manager, Kernel, and system services. While the Queue object is exported for use by device drivers (it is undocumented but its interfaces are relatively easy to figure out), the completion port APIs are not. However, if the queue interfaces are derived it is possible to mimick the completion port interfaces by simply using the queue routines and manually associating file objects with queues by setting the CompletionContext entry.</p>",
            "markdown": "Windows NT's completion port API provides an easy-to-use and efficient way to maximize a server's performance by minimizing context switches while obtaining high- degrees of parallelism. The API is made possible with support in the I/O Manager, Kernel, and system services. While the Queue object is exported for use by device drivers (it is undocumented but its interfaces are relatively easy to figure out), the completion port APIs are not. However, if the queue interfaces are derived it is possible to mimick the completion port interfaces by simply using the queue routines and manually associating file objects with queues by setting the CompletionContext entry.\n\n"
          },
          {
            "segment_id": "f6b03744-9214-491c-b96e-e9e78370b690",
            "bbox": {
              "left": 713.5833,
              "top": 1409.4166,
              "width": 120.74999,
              "height": 22.833332
            },
            "page_number": 4,
            "page_width": 1275,
            "page_height": 1650,
            "content": "Back to Top",
            "segment_type": "Text",
            "ocr": null,
            "image": "https://storage.googleapis.com/chunkr-bucket-dev/ccf89702-e38e-4089-bd6b-77e3ba63c341/fbff705a-2342-407e-83cc-637b6e892f02/images/f6b03744-9214-491c-b96e-e9e78370b690.jpg?x-id=GetObject&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=GOOG1E6ZKWCYPX4LV42MGE7WJ66QU2EMDPF3DJ2IFHNTQIGHNC2STOGTWF75E%2F20241112%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20241112T024339Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bfd893ce91bd43cb0bff3d5035a42465c3d347ef5148f08f9285fd097b848607",
            "html": "<p>Back to Top</p>",
            "markdown": "Back to Top\n\n"
          }
        ],
        "chunk_length": 109
      }
    ],
    "extracted_json": {
      "title": "Document Metadata",
      "schema_type": "object",
      "extracted_fields": [
        {
          "name": "title",
          "field_type": "string",
          "value": "Completion ports are used for the completion of I/O associated with multiple file handles.  Applications use them to maximize parallelism by having threads actively servicing client requests on every processor.\n"
        },
        {
          "name": "author",
          "field_type": "string",
          "value": "Mark Russinovich\n"
        },
        {
          "name": "date_published",
          "field_type": "string",
          "value": "date_published:  No publication date is explicitly provided in the text.\n"
        },
        {
          "name": "location",
          "field_type": "string",
          "value": "location: Windows NT\n"
        }
      ]
    }
  }
}