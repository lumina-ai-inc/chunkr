services:
  rrq:
    enabled: true
    useStandardEnv: true
    image:
      repository: rrq
      tag: 9326b10
    port: 8000
    targetPort: 8000
    ingress:
      enabled: false
      subdomain: rrq-api
    env:
      - name: API_KEY
        value: '1234567890'
      - name: VERSION
        value: 1.0.5
  
  embeddings:
    enabled: true
    image:
      repository: text-embeddings-inference
      tag: 1.5
      registry: ghcr.io/huggingface
    ingress:
      enabled: false
      subdomain: embed
    port: 8000
    targetPort: 80
    args:
      - '--model-id'
      - BAAI/bge-m3
      - '--auto-truncate'
      - '--payload-limit'
      - '100000000'
    useGPU: true
    labels:
      workload-type: chunkr-gpu

  keycloak:
    enabled: true
    image:
      repository: keycloak
      tag: 25.0.2
      registry: quay.io/keycloak
    port: 8080
    targetPort: 8080
    ingress:
      enabled: true
      subdomain: auth
    args:
      - start-dev
      - '--import-realm'
    envFrom:
      - configMapRef:
          name: keycloak-config
      - secretRef:
          name: chunkr-secret
    readinessProbe:
      httpGet:
        path: /realms/master
        port: 8080
    volumes:
      - name: realm-config
        configMap:
          name: keycloak-realm-config
    volumeMounts:
      - name: realm-config
        mountPath: /opt/keycloak/data/import/realm-export.json
        subPath: realm-export.json
  redis:
    enabled: true
    image:
      repository: redis
      tag: 7.2-alpine
      registry: docker.io
    port: 6379
    targetPort: 6379
    resources:
      requests:
        memory: 512Mi
        cpu: 200m
      limits:
        memory: 1Gi
        cpu: 1500m
    args:
      - redis-server
      - '--appendonly'
      - 'yes'
      - '--maxmemory'
      - 900mb
      - '--maxmemory-policy'
      - allkeys-lru
      - '--save'
      - '900'
      - '1'
      - '--save'
      - '300'
      - '10'
      - '--save'
      - '60'
      - '10000'
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
      fsGroup: 999
      fsGroupChangePolicy: OnRootMismatch
    persistence:
      name: redis-data
      enabled: true
      size: 1Gi
      accessModes:
        - ReadWriteOnce
      annotations:
        helm.sh/resource-policy: keep
    volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data
    volumeMounts:
      - name: redis-data
        mountPath: /data
    livenessProbe:
      tcpSocket:
        port: 6379
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      tcpSocket:
        port: 6379
      initialDelaySeconds: 5
      periodSeconds: 5

  minio:
    enabled: true
    image:
      repository: minio/minio
      tag: latest
      registry: docker.io
    port: 9000
    consolePort: 9001
    targetPort: 9000
    ingress:
      enabled: true
      subdomain: s3
    env:
      - name: MINIO_ROOT_USER
        valueFrom:
          secretKeyRef:
            name: chunkr-secret
            key: AWS__ACCESS_KEY
      - name: MINIO_ROOT_PASSWORD
        valueFrom:
          secretKeyRef:
            name: chunkr-secret
            key: AWS__SECRET_KEY
    args:
      - server
      - /data
      - '--console-address'
      - ':9001'
    persistence:
      name: minio-data
      enabled: true
      size: 100Gi
      accessModes:
        - ReadWriteOnce
      annotations:
        helm.sh/resource-policy: keep
    volumes:
      - name: minio-data
        persistentVolumeClaim:
          claimName: minio-data
    volumeMounts:
      - name: minio-data
        mountPath: /data
    livenessProbe:
      httpGet:
        path: /minio/health/live
        port: 9000
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /minio/health/live
        port: 9000
      initialDelaySeconds: 5
      periodSeconds: 5

  minio-init:
    enabled: true
    type: job
    backoffLimit: 4
    image:
      repository: minio/mc
      tag: latest
      registry: docker.io
    command:
      - /bin/sh
      - /config/init.sh
    env:
      - name: MINIO_ROOT_USER
        valueFrom:
          secretKeyRef:
            name: chunkr-secret
            key: AWS__ACCESS_KEY
      - name: MINIO_ROOT_PASSWORD
        valueFrom:
          secretKeyRef:
            name: chunkr-secret
            key: AWS__SECRET_KEY
    volumes:
      - name: init-script
        configMap:
          name: minio-init-config
    volumeMounts:
      - name: init-script
        mountPath: /config
    podSpec:
      restartPolicy: OnFailure

  postgres:
    enabled: false
    image:
      repository: postgres
      tag: 15-alpine
      registry: docker.io
    port: 5432
    targetPort: 5432
    credentials:
      username: postgres
      password: postgres
    env:
      - name: POSTGRES_USER
        value: '{{ .Values.services.postgres.credentials.username }}'
      - name: POSTGRES_PASSWORD
        value: '{{ .Values.services.postgres.credentials.password }}'
      - name: PGDATA
        value: /var/lib/postgresql/data/pgdata
    resources:
      requests:
        memory: 1Gi
        cpu: 1000m
      limits:
        memory: 4Gi
        cpu: 6000m
    persistence:
      name: postgres-data
      enabled: true
      size: 10Gi
      accessModes:
        - ReadWriteOnce
      annotations:
        helm.sh/resource-policy: keep
    volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data
      - name: postgres-init
        configMap:
          name: postgres-init-config
    volumeMounts:
      - name: postgres-data
        mountPath: /var/lib/postgresql/data
      - name: postgres-init
        mountPath: /docker-entrypoint-initdb.d/init.sql
        subPath: init.sql
    securityContext:
      runAsUser: 0
      fsGroup: 0
      fsGroupChangePolicy: OnRootMismatch
    livenessProbe:
      tcpSocket:
        port: 5432
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      tcpSocket:
        port: 5432
      initialDelaySeconds: 5
      periodSeconds: 5
    lifecycle:
      preStop:
        exec:
          command:
            - /bin/sh
            - '-c'
            - pg_ctl -D /var/lib/postgresql/data -w -t 60 -m fast stop
