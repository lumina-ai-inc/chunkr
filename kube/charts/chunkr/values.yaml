ingress:
  enabled: true
  type: "cloudflare" # can be "cloudflare" or "nginx"
  className: "cloudflare"
  annotations:
    kubernetes.io/ingress.class: nginx
  domain: "chunkr.ai"
  subdomains:
    root: true
  tls:
    enabled: false
    secretName: "tls-secret"
  cloudflare:
    enabled: true
    replicas: 2
    image:
      repository: cloudflare/cloudflared
      tag: "2024.12.1"
      pullPolicy: Always
    config:
      tunnelName: "chunkr"
      services:
        - name: "chunkr"
        - name: "keycloak"
        - name: "web"
        - name: "s3proxy"

common:
  standardEnv:
    - name: AUTH__KEYCLOAK_URL
      value: "https://{{ .Values.services.keycloak.ingress.subdomain }}.{{ .Values.ingress.domain }}"
    - name: AWS__ENDPOINT
      value: '{{ if eq .Values.global.s3provider "azure" }}https://{{ .Values.services.s3proxy.ingress.subdomain }}.{{ .Values.ingress.domain }}{{ else }}https://s3.amazonaws.com{{ end }}'
    - name: AWS__PRESIGNED_URL_ENDPOINT
      value: '{{ if eq .Values.global.s3provider "azure" }}https://{{ .Values.services.s3proxy.ingress.subdomain }}.{{ .Values.ingress.domain }}{{ else }}https://s3.amazonaws.com{{ end }}'
    - name: AWS__REGION
      value: "us-east-1"
    - name: PG__URL
      value: "postgresql://{{ .Values.services.postgres.credentials.username }}:{{ .Values.services.postgres.credentials.password }}@{{- .Release.Name }}-postgres:5432/chunkr"
    - name: RRQ__URL
      value: "http://{{- .Release.Name }}-rrq:8000"
    - name: REDIS__URL
      value: "redis://{{- .Release.Name }}-redis:6379"
    - name: SEARCH__DENSE_VECTOR_URL
      value: "http://{{- .Release.Name }}-embeddings:80"
    - name: WORKER__GENERAL_OCR_URL
      value: "http://{{- .Release.Name }}-doctr:8000"
    - name: WORKER__PDLA_URL
      value: "http://{{- .Release.Name }}-pdla:8000"
    - name: WORKER__SERVER_URL
      value: "https://{{ .Values.services.chunkr.ingress.subdomain }}.{{ .Values.ingress.domain }}"
    - name: WORKER__TABLE_OCR_MODEL
      value: "LLM"

global:
  image:
    registry: luminainc
    pullPolicy: Always
  s3provider: "filesystem"

  # Shared GPU configuration
  gpuWorkload:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - ${SERVICE_NAME}
              topologyKey: "kubernetes.io/hostname"
    tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"
    resources:
      limits:
        nvidia.com/gpu: 1
      requests:
        nvidia.com/gpu: 1
    volumes:
      - name: dshm
        emptyDir:
          medium: Memory
          sizeLimit: 5Gi
    volumeMounts:
      - name: dshm
        mountPath: /dev/shm

services:
  # Servers
  chunkr:
    enabled: true
    useStandardEnv: true
    image:
      repository: chunkmydocs
      tag: "68a05839"
    port: 8000
    targetPort: 8000
    ingress:
      enabled: true
      subdomain: "api"
    envFrom:
      - secretRef:
          name: chunkr-secret

  rrq:
    enabled: true
    useStandardEnv: true
    image:
      repository: rrq
      tag: "9326b10"
    port: 8000
    targetPort: 8000
    ingress:
      enabled: false
      subdomain: "rrq-api"
    env:
      - name: API_KEY
        value: "1234567890"
      - name: VERSION
        value: "1.0.5"

  rrq-analytics:
    enabled: true
    image:
      repository: rrq-analytics
      tag: "459b00d"
    port: 8000
    targetPort: 8000
    ingress:
      enabled: false
      subdomain: "rrq"
    env:
      - name: VITE_API_URL
        value: https://{{ .Values.services.rrq.ingress.subdomain }}.{{ .Values.ingress.domain }}

  web:
    enabled: true
    image:
      repository: web
      tag: "0c5f457a"
    port: 8000
    targetPort: 8000
    ingress:
      enabled: true
      subdomain: "www"
    env:
      - name: VITE_API_URL
        value: https://{{ .Values.services.chunkr.ingress.subdomain }}.{{ .Values.ingress.domain }}
      - name: VITE_KEYCLOAK_CLIENT_ID
        value: chunkr
      - name: VITE_KEYCLOAK_POST_LOGOUT_REDIRECT_URI
        value: https://{{ .Values.services.web.ingress.subdomain }}.{{ .Values.ingress.domain }}
      - name: VITE_KEYCLOAK_REALM
        value: chunkr
      - name: VITE_KEYCLOAK_REDIRECT_URI
        value: https://{{ .Values.services.web.ingress.subdomain }}.{{ .Values.ingress.domain }}
      - name: VITE_KEYCLOAK_URL
        value: https://{{ .Values.services.keycloak.ingress.subdomain }}.{{ .Values.ingress.domain }}

  # Workers
  fast:
    enabled: true
    useStandardEnv: true
    image:
      repository: fast
      tag: "68a05839"
    envFrom:
      - secretRef:
          name: chunkr-secret
    env:
      - name: PG__POOL__MAX_SIZE
        value: "3"

  high-quality:
    enabled: true
    useStandardEnv: true
    image:
      repository: high-quality
      tag: "68a05839"
    envFrom:
      - secretRef:
          name: chunkr-secret
    env:
      - name: PG__POOL__MAX_SIZE
        value: "3"

  ocr:
    enabled: true
    useStandardEnv: true
    image:
      repository: ocr
      tag: "68a05839"
    envFrom:
      - secretRef:
          name: chunkr-secret
    env:
      - name: PG__POOL__MAX_SIZE
        value: "3"

  postprocess:
    enabled: true
    useStandardEnv: true
    image:
      repository: postprocess
      tag: "68a05839"
    envFrom:
      - secretRef:
          name: chunkr-secret
    env:
      - name: PG__POOL__MAX_SIZE
        value: "3"

  preprocess:
    enabled: true
    useStandardEnv: true
    image:
      repository: preprocess
      tag: "68a05839"
    envFrom:
      - secretRef:
          name: chunkr-secret
    env:
      - name: PG__POOL__MAX_SIZE
        value: "3"

  structured-extraction:
    enabled: true
    useStandardEnv: true
    image:
      repository: structured-extraction
      tag: "68a05839"
    envFrom:
      - secretRef:
          name: chunkr-secret
    env:
      - name: PG__POOL__MAX_SIZE
        value: "3"

  # Services
  doctr:
    enabled: true
    image:
      repository: doctr
      tag: "07c654a8"
    port: 8000
    targetPort: 8000
    useGPU: true

  embeddings:
    enabled: true
    image:
      repository: text-embeddings-inference
      tag: "turing-1.5"
      registry: ghcr.io/huggingface
    port: 8000
    targetPort: 80
    args: ["--model-id", "BAAI/bge-m3"]
    useGPU: true

  paddle-ocr:
    enabled: false
    image:
      repository: paddle-ocr
      tag: "07c654a8"
    port: 8000
    targetPort: 8000
    useGPU: true

  pdla:
    enabled: true
    image:
      repository: pdla
      tag: "8c4bfb6d"
    port: 8000
    targetPort: 8000
    useGPU: true
    command:
      [
        "gunicorn",
        "-k",
        "uvicorn.workers.UvicornWorker",
        "--chdir",
        "./src",
        "app:app",
        "--bind",
        "0.0.0.0:8000",
        "--timeout",
        "10000",
      ]

  table-ocr:
    enabled: false
    image:
      repository: table-ocr
      tag: "68a05839"
    port: 8000
    targetPort: 8000
    useGPU: true

 # Supporting services
  keycloak:
    enabled: true
    image:
      repository: keycloak
      tag: "25.0.2"
      registry: quay.io/keycloak
    port: 8080
    targetPort: 8080
    ingress:
      enabled: true
      subdomain: "auth"
    args: ["start-dev", "--import-realm"]
    env:
      - name: KEYCLOAK_ADMIN
        value: "admin"
      - name: KEYCLOAK_ADMIN_PASSWORD
        value: "admin"
      - name: KC_PROXY
        value: "edge"
      - name: KC_HOSTNAME
        value: "{{ .Values.services.keycloak.ingress.subdomain }}.{{ .Values.ingress.domain }}"
      - name: KC_FEATURES
        value: "hostname:v2"
      - name: KC_HOSTNAME_DEBUG
        value: "true"
      - name: KC_DB
        value: "postgres"
      - name: KC_DB_URL
        value: "jdbc:postgresql://{{- .Release.Name }}-postgres:5432/keycloak"
      - name: KC_DB_USERNAME
        value: "{{ .Values.services.postgres.credentials.username }}"
      - name: KC_DB_PASSWORD
        value: "{{ .Values.services.postgres.credentials.password }}"
    readinessProbe:
      httpGet:
        path: /realms/master
        port: 8080
    volumes:
      - name: realm-config
        configMap:
          name: keycloak-realm-config
    volumeMounts:
      - name: realm-config
        mountPath: /opt/keycloak/data/import/realm-export.json
        subPath: realm-export.json

  redis:
    enabled: true
    image:
      repository: redis
      tag: "7.2-alpine"
      registry: docker.io
    port: 6379
    targetPort: 6379
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "500m"
    args:
      - "redis-server"
      - "--appendonly"
      - "yes"
      - "--maxmemory"
      - "900mb"
      - "--maxmemory-policy"
      - "allkeys-lru"
      - "--save"
      - "900"
      - "1"
      - "--save"
      - "300"
      - "10"
      - "--save"
      - "60"
      - "10000"
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
      fsGroup: 999
      fsGroupChangePolicy: "OnRootMismatch"
    persistence:
      name: redis-data
      enabled: true
      size: 1Gi
      storageClassName: "default" 
      accessModes:
        - ReadWriteOnce
      annotations:
        "helm.sh/resource-policy": keep
    volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data
    volumeMounts:
      - name: redis-data
        mountPath: /data
    livenessProbe:
      tcpSocket:
        port: 6379
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      tcpSocket:
        port: 6379
      initialDelaySeconds: 5
      periodSeconds: 5

  # S3 proxy for azure blob storage
  s3proxy:
    enabled: "{{ or (eq .Values.global.s3provider \"azure\") (eq .Values.global.s3provider \"filesystem\") }}"
    image:
      repository: s3proxy
      tag: "latest"
      registry: andrewgaul
    port: 8080
    targetPort: 8080
    ingress:
      enabled: true
      subdomain: "s3"
    env:
      - name: S3PROXY_AUTHORIZATION
        value: none
      - name: S3_PROXY_CORS_ALLOW_ALL
        value: "true"
      - name: S3PROXY_ENDPOINT
        value: "http://0.0.0.0:8080"
      - name: S3PROXY_IDENTITY
        valueFrom:
          secretKeyRef:
            name: chunkr-secret
            key: AWS__ACCESS_KEY
      - name: S3PROXY_CREDENTIAL
        valueFrom:
          secretKeyRef:
            name: chunkr-secret
            key: AWS__SECRET_KEY
      - name: JCLOUDS_PROVIDER
        value: '{{ if eq .Values.global.s3provider "azure" }}azureblob{{ else }}filesystem{{ end }}'
      - name: JCLOUDS_FILESYSTEM_BASEDIR
        value: '{{ if eq .Values.global.s3provider "filesystem" }}/data{{ end }}'
      - name: JCLOUDS_AZUREBLOB_AUTH
        value: '{{ if eq .Values.global.s3provider "azure" }}azureKey{{ end }}'
      - name: JCLOUDS_ENDPOINT
        valueFrom:
          secretKeyRef:
            name: chunkr-secret
            key: JCLOUDS_ENDPOINT
      - name: JCLOUDS_IDENTITY
        valueFrom:
          secretKeyRef:
            name: chunkr-secret
            key: AWS__ACCESS_KEY
      - name: JCLOUDS_CREDENTIAL
        valueFrom:
          secretKeyRef:
            name: chunkr-secret
            key: AWS__SECRET_KEY
    persistence:
      name: s3proxy-data
      enabled: true
      size: 100Gi
      storageClassName: "default" 
      accessModes:
        - ReadWriteOnce
      annotations:
        "helm.sh/resource-policy": keep
    volumes:
      - name: s3proxy-data
        persistentVolumeClaim:
          claimName: s3proxy-data
    volumeMounts:
      - name: s3proxy-data
        mountPath: /data

  postgres:
    enabled: true
    image:
      repository: postgres
      tag: "15-alpine"
      registry: docker.io
    port: 5432
    targetPort: 5432
    credentials:
      username: postgres
      password: postgres
    env:
      - name: POSTGRES_USER
        value: "{{ .Values.services.postgres.credentials.username }}"
      - name: POSTGRES_PASSWORD
        value: "{{ .Values.services.postgres.credentials.password }}"
      - name: PGDATA
        value: "/var/lib/postgresql/data/pgdata"
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "2Gi"
        cpu: "1000m"
    initContainers:
      - name: init-chmod-data
        image: busybox
        command: 
          - /bin/sh
          - -c
          - |
            mkdir -p /var/lib/postgresql/data/pgdata /var/run/postgresql
            chmod -R 700 /var/lib/postgresql/data/pgdata /var/run/postgresql
            chown -R 999:999 /var/lib/postgresql/data/pgdata /var/run/postgresql
        volumeMounts:
          - name: data
            mountPath: /var/lib/postgresql/data
        securityContext:
          runAsUser: 0
          privileged: true
    persistence:
      name: postgres-data
      enabled: true
      size: 10Gi
      storageClassName: "default" 
      accessModes:
        - ReadWriteOnce
      annotations:
        "helm.sh/resource-policy": keep
    volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data
      - name: postgres-init
        configMap:
          name: postgres-init-config
    volumeMounts:
      - name: postgres-data
        mountPath: /var/lib/postgresql/data
      - name: postgres-init
        mountPath: /docker-entrypoint-initdb.d/init.sql
        subPath: init.sql
    securityContext:
      runAsUser: 0
      fsGroup: 0
      fsGroupChangePolicy: "OnRootMismatch"
    livenessProbe:
      tcpSocket:
        port: 5432
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      tcpSocket:
        port: 5432
      initialDelaySeconds: 5
      periodSeconds: 5