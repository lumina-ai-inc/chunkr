ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
  domain: "chunkr.ai"
  subdomains:
    root: true

common:
  standardEnv:
    - name: AUTH__KEYCLOAK_URL
      value: "http://keycloak:8080"
    - name: AWS__ENDPOINT
      value: '{{ if eq .Values.global.provider "azure" }}http://s3proxy:8080{{ else }}https://s3.amazonaws.com{{ end }}'
    - name: RRQ__URL
      value: "http://rrq:8000"
    - name: SEARCH__DENSE_VECTOR_URL
      value: "http://dense-vector:80"
    - name: WORKER__GENERAL_OCR_URL
      value: "http://doctr:8000"
    - name: WORKER__PDLA_URL
      value: "http://pdla:8000"
    - name: WORKER__SERVER_URL
      value: "https://api.{{ .Values.ingress.domain }}"
    - name: REDIS__URL
      value: "redis://redis:6379"

global:
  image:
    registry: luminainc
    pullPolicy: Always
  provider: "gcp"

  # Shared GPU configuration
  gpuWorkload:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - ${SERVICE_NAME}
              topologyKey: "kubernetes.io/hostname"
    tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"
    resources:
      limits:
        nvidia.com/gpu: 1
      requests:
        nvidia.com/gpu: 1
    volumes:
      - name: dshm
        emptyDir:
          medium: Memory
          sizeLimit: 5Gi
    volumeMounts:
      - name: dshm
        mountPath: /dev/shm

services:
  chunkr:
    enabled: true
    useStandardEnv: true
    image:
      repository: chunkmydocs
      tag: "68a05839"
    port: 8000
    targetPort: 8000
    ingress:
      enabled: true
      subdomain: "api"
    envFrom:
      - secretRef:
          name: chunkr-secret

  keycloak:
    enabled: true
    image:
      repository: keycloak
      tag: "25.0.2"
      registry: quay.io/keycloak
    port: 8080
    targetPort: 8080
    ingress:
      enabled: true
      subdomain: "auth"
    args: ["start-dev", "--import-realm"]
    envFrom:
      - secretRef:
          name: keycloak-secret
    readinessProbe:
      httpGet:
        path: /realms/master
        port: 8080
    volumes:
      - name: realm-config
        configMap:
          name: keycloak-realm-config
    volumeMounts:
      - name: realm-config
        mountPath: /opt/keycloak/data/import/realm-export.json
        subPath: realm-export.json

  redis:
    enabled: true
    image:
      repository: redis
      tag: "7.2-alpine"
      registry: docker.io
    port: 6379
    targetPort: 6379
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "500m"
    persistence:
      enabled: true
      size: 10Gi
      storageClass: standard
    args:
      - "redis-server"
      - "--appendonly"
      - "yes"
      - "--maxmemory"
      - "900mb"
      - "--maxmemory-policy"
      - "allkeys-lru"
      - "--save"
      - "900"
      - "1"
      - "--save"
      - "300"
      - "10"
      - "--save"
      - "60"
      - "10000"
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
    livenessProbe:
      tcpSocket:
        port: 6379
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      tcpSocket:
        port: 6379
      initialDelaySeconds: 5
      periodSeconds: 5

  rrq:
    enabled: true
    useStandardEnv: true
    image:
      repository: rrq
      tag: "9326b10"
    port: 8000
    targetPort: 8000
    ingress:
      enabled: true
      subdomain: "rrq-api"
    env:
      - name: VERSION
        value: "1.0.5"
    envFrom:
      - secretRef:
          name: rrq-secret

  rrq-analytics:
    enabled: true
    image:
      repository: rrq-analytics
      tag: "459b00d"
    port: 8000
    targetPort: 8000
    ingress:
      enabled: true
      subdomain: "rrq"
    env:
      - name: VITE_API_URL
        value: "https://rrq-api.{{ .Values.ingress.domain }}"
    envFrom:
      - secretRef:
          name: rrq-secret

  web:
    enabled: true
    image:
      repository: web
      tag: "0c5f457a"
    port: 8000
    targetPort: 8000
    ingress:
      enabled: true
      subdomain: "www"
    env:
      - name: VITE_API_URL
        value: "https://api.{{ .Values.ingress.domain }}"
      - name: VITE_KEYCLOAK_CLIENT_ID
        value: "chunkr"
      - name: VITE_KEYCLOAK_POST_LOGOUT_REDIRECT_URI
        value: "https://{{ .Values.ingress.domain }}"
      - name: VITE_KEYCLOAK_REALM
        value: "chunkr"
      - name: VITE_KEYCLOAK_REDIRECT_URI
        value: "https://{{ .Values.ingress.domain }}"
      - name: VITE_KEYCLOAK_URL
        value: "https://keycloak.{{ .Values.ingress.domain }}"
    envFrom:
      - secretRef:
          name: web-secrets

  # Workers
  fast:
    enabled: true
    useStandardEnv: true
    image:
      repository: fast
      tag: "68a05839"
    envFrom:
      - secretRef:
          name: chunkr-secret
    env:
      - name: PG__POOL__MAX_SIZE
        value: "3"

  high-quality:
    enabled: true
    useStandardEnv: true
    image:
      repository: high-quality
      tag: "68a05839"
    envFrom:
      - secretRef:
          name: chunkr-secret
    env:
      - name: PG__POOL__MAX_SIZE
        value: "3"

  ocr:
    enabled: true
    useStandardEnv: true
    image:
      repository: ocr
      tag: "68a05839"
    envFrom:
      - secretRef:
          name: chunkr-secret
    env:
      - name: PG__POOL__MAX_SIZE
        value: "3"

  postprocess:
    enabled: true
    useStandardEnv: true
    image:
      repository: postprocess
      tag: "68a05839"
    envFrom:
      - secretRef:
          name: chunkr-secret
    env:
      - name: PG__POOL__MAX_SIZE
        value: "3"

  preprocess:
    enabled: true
    useStandardEnv: true
    image:
      repository: preprocess
      tag: "68a05839"
    envFrom:
      - secretRef:
          name: chunkr-secret
    env:
      - name: PG__POOL__MAX_SIZE
        value: "3"

  structured-extraction:
    enabled: true
    useStandardEnv: true
    image:
      repository: structured-extraction
      tag: "68a05839"
    envFrom:
      - secretRef:
          name: chunkr-secret
    env:
      - name: PG__POOL__MAX_SIZE
        value: "3"

  # Services
  doctr:
    enabled: true
    image:
      repository: doctr
      tag: "07c654a8"
    port: 8000
    targetPort: 8000
    useGPU: true

  embeddings:
    enabled: true
    image:
      repository: text-embeddings-inference
      tag: "1.5"
      registry: ghcr.io/huggingface
    port: 8000
    targetPort: 80
    args: ["--model-id", "BAAI/bge-m3"]
    useGPU: true

  paddle-ocr:
    enabled: false
    image:
      repository: paddle-ocr
      tag: "07c654a8"
    port: 8000
    targetPort: 8000
    useGPU: true

  pdla:
    enabled: true
    image:
      repository: pdla
      tag: "8c4bfb6d"
    port: 8000
    targetPort: 8000
    useGPU: true
    command:
      [
        "gunicorn",
        "-k",
        "uvicorn.workers.UvicornWorker",
        "--chdir",
        "./src",
        "app:app",
        "--bind",
        "0.0.0.0:8000",
        "--timeout",
        "10000",
      ]

  table-ocr:
    enabled: false
    image:
      repository: table-ocr
      tag: "68a05839"
    port: 8000
    targetPort: 8000
    useGPU: true

  # S3 proxy for azure blob storage
  s3proxy:
    enabled: '{{ if eq .Values.global.provider "azure" }}true{{ else }}false{{ end }}'
    image:
      repository: s3proxy
      tag: "latest"
      registry: andrewgaul
    port: 8080
    targetPort: 8080
    env:
      - name: S3PROXY_ENDPOINT
        value: "http://0.0.0.0:8080/"
      - name: S3PROXY_AUTHORIZATION
        value: "none"
      - name: JCLOUDS_AZUREBLOB_AUTH
        value: "azureKey"
      - name: JCLOUDS_PROVIDER
        value: "azureblob"
      - name: JCLOUDS_CREDENTIAL
    envFrom:
      - secretRef:
          name: s3proxy-secret
