services:
  server:
    build:
      context: .
      dockerfile: docker/server-azure/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - minio
    env_file:
      - .env
    deploy:
      replicas: 1
    restart: always
    volumes:
      - ./models.yaml:/app/models.yaml:ro
    develop:
      watch:
        - action: rebuild
          path: ./core/
          ignore:
            - ./core/target/
            - ./core/Cargo.lock

  task:
    build:
      context: .
      dockerfile: docker/task-azure/Dockerfile
    depends_on:
      - postgres
      - redis
      - minio
    environment:
      - RENDERER__SANDBOX=false
      - RENDERER__CLEAR_CACHE_ON_ERROR=true
      - CHROME_NO_FIRST_RUN=1
      - CHROME_DISABLE_GPU=1
    env_file:
      - .env
    deploy:
      replicas: 1
    restart: always
    volumes:
      - ./models.yaml:/app/models.yaml:ro
    develop:
      watch:
        - action: rebuild
          path: ./core/
          ignore:
            - ./core/target/
            - ./core/Cargo.lock

  web:
    build:
      context: .
      dockerfile: docker/web/Dockerfile
    platform: linux/amd64
    ports:
      - "5173:8000"
    env_file:
      - .env
    environment:
      # Allow local development connections for CSP
      - CSP_CONNECT_SRC_ADDITIONAL=localhost:8000 localhost:9000 localhost:8080 localhost:5173
      # Allow local development images for CSP
      - CSP_IMG_SRC_ADDITIONAL=http://localhost:9000
    deploy:
      replicas: 1
    restart: always

  segmentation:
    image: nginx:latest
    ports:
      - "8001:8000"
    volumes:
      - ./nginx/segmentation.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - segmentation-backend
    restart: always

  segmentation-backend:
    build:
      context: .
      dockerfile: docker/segmentation/Dockerfile
    expose:
      - "8000"
    deploy:
      replicas: 6
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]
    volumes:
      - /dev/shm:/dev/shm
    environment:
      - MAX_BATCH_SIZE=4
      - BATCH_WAIT_TIME=0.2
      - OVERLAP_THRESHOLD=0.025
      - SCORE_THRESHOLD=0.2
    restart: always

  ocr:
    image: nginx:latest
    ports:
      - "8002:8000"
    volumes:
      - ./nginx/ocr.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - ocr-backend
    restart: always

  ocr-backend:
    build:
      context: .
      dockerfile: docker/doctr/Dockerfile
    expose:
      - "8000"
    deploy:
      replicas: 3
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]
    volumes:
      - /dev/shm:/dev/shm
    restart: always

  postgres:
    build:
      context: docker/postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 1

  adminer:
    image: adminer:latest
    ports:
      - "8082:8080"
    depends_on:
      - postgres
    restart: always

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 1

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 1

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin &&
        /usr/bin/mc mb myminio/chunkr --ignore-existing &&
        /usr/bin/mc anonymous set public myminio/chunkr
      "

  keycloak:
    build:
      context: .
      dockerfile: docker/auth/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_PROXY=edge
      - KC_DB=postgres
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HTTP_ENABLED=true
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=postgres
      - KC_HEALTH_ENABLED=true
      - KC_TRANSACTION_XA_ENABLED=false
    volumes:
      - ./realm-export.json:/opt/keycloak/data/import/realm-export.json
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 600s
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

volumes:
  postgres_data:
  redis_data:
  minio_data:


